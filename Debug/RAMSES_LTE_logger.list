
RAMSES_LTE_logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005698  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009f4  080057d4  080057d4  000157d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061c8  080061c8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080061c8  080061c8  000161c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061d0  080061d0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061d0  080061d0  000161d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061d4  080061d4  000161d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080061d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000eb0  20000070  08006248  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f20  08006248  00020f20  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a150  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d69  00000000  00000000  0002a1e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000800  00000000  00000000  0002bf58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000748  00000000  00000000  0002c758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001691a  00000000  00000000  0002cea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a6a9  00000000  00000000  000437ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008653b  00000000  00000000  0004de63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d439e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b9c  00000000  00000000  000d43f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  000d6f8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000d6fb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	080057bc 	.word	0x080057bc

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	080057bc 	.word	0x080057bc

0800017c <strcmp>:
 800017c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000180:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000184:	2a01      	cmp	r2, #1
 8000186:	bf28      	it	cs
 8000188:	429a      	cmpcs	r2, r3
 800018a:	d0f7      	beq.n	800017c <strcmp>
 800018c:	1ad0      	subs	r0, r2, r3
 800018e:	4770      	bx	lr

08000190 <strlen>:
 8000190:	4603      	mov	r3, r0
 8000192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000196:	2a00      	cmp	r2, #0
 8000198:	d1fb      	bne.n	8000192 <strlen+0x2>
 800019a:	1a18      	subs	r0, r3, r0
 800019c:	3801      	subs	r0, #1
 800019e:	4770      	bx	lr

080001a0 <__aeabi_uldivmod>:
 80001a0:	b953      	cbnz	r3, 80001b8 <__aeabi_uldivmod+0x18>
 80001a2:	b94a      	cbnz	r2, 80001b8 <__aeabi_uldivmod+0x18>
 80001a4:	2900      	cmp	r1, #0
 80001a6:	bf08      	it	eq
 80001a8:	2800      	cmpeq	r0, #0
 80001aa:	bf1c      	itt	ne
 80001ac:	f04f 31ff 	movne.w	r1, #4294967295
 80001b0:	f04f 30ff 	movne.w	r0, #4294967295
 80001b4:	f000 b976 	b.w	80004a4 <__aeabi_idiv0>
 80001b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001c0:	f000 f806 	bl	80001d0 <__udivmoddi4>
 80001c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001cc:	b004      	add	sp, #16
 80001ce:	4770      	bx	lr

080001d0 <__udivmoddi4>:
 80001d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001d4:	9e08      	ldr	r6, [sp, #32]
 80001d6:	460d      	mov	r5, r1
 80001d8:	4604      	mov	r4, r0
 80001da:	4688      	mov	r8, r1
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d14d      	bne.n	800027c <__udivmoddi4+0xac>
 80001e0:	428a      	cmp	r2, r1
 80001e2:	4694      	mov	ip, r2
 80001e4:	d968      	bls.n	80002b8 <__udivmoddi4+0xe8>
 80001e6:	fab2 f282 	clz	r2, r2
 80001ea:	b152      	cbz	r2, 8000202 <__udivmoddi4+0x32>
 80001ec:	fa01 f302 	lsl.w	r3, r1, r2
 80001f0:	f1c2 0120 	rsb	r1, r2, #32
 80001f4:	fa20 f101 	lsr.w	r1, r0, r1
 80001f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80001fc:	ea41 0803 	orr.w	r8, r1, r3
 8000200:	4094      	lsls	r4, r2
 8000202:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000206:	fbb8 f7f1 	udiv	r7, r8, r1
 800020a:	fa1f fe8c 	uxth.w	lr, ip
 800020e:	fb01 8817 	mls	r8, r1, r7, r8
 8000212:	fb07 f00e 	mul.w	r0, r7, lr
 8000216:	0c23      	lsrs	r3, r4, #16
 8000218:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800021c:	4298      	cmp	r0, r3
 800021e:	d90a      	bls.n	8000236 <__udivmoddi4+0x66>
 8000220:	eb1c 0303 	adds.w	r3, ip, r3
 8000224:	f107 35ff 	add.w	r5, r7, #4294967295
 8000228:	f080 811e 	bcs.w	8000468 <__udivmoddi4+0x298>
 800022c:	4298      	cmp	r0, r3
 800022e:	f240 811b 	bls.w	8000468 <__udivmoddi4+0x298>
 8000232:	3f02      	subs	r7, #2
 8000234:	4463      	add	r3, ip
 8000236:	1a1b      	subs	r3, r3, r0
 8000238:	fbb3 f0f1 	udiv	r0, r3, r1
 800023c:	fb01 3310 	mls	r3, r1, r0, r3
 8000240:	fb00 fe0e 	mul.w	lr, r0, lr
 8000244:	b2a4      	uxth	r4, r4
 8000246:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800024a:	45a6      	cmp	lr, r4
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x94>
 800024e:	eb1c 0404 	adds.w	r4, ip, r4
 8000252:	f100 33ff 	add.w	r3, r0, #4294967295
 8000256:	f080 8109 	bcs.w	800046c <__udivmoddi4+0x29c>
 800025a:	45a6      	cmp	lr, r4
 800025c:	f240 8106 	bls.w	800046c <__udivmoddi4+0x29c>
 8000260:	4464      	add	r4, ip
 8000262:	3802      	subs	r0, #2
 8000264:	2100      	movs	r1, #0
 8000266:	eba4 040e 	sub.w	r4, r4, lr
 800026a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800026e:	b11e      	cbz	r6, 8000278 <__udivmoddi4+0xa8>
 8000270:	2300      	movs	r3, #0
 8000272:	40d4      	lsrs	r4, r2
 8000274:	e9c6 4300 	strd	r4, r3, [r6]
 8000278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027c:	428b      	cmp	r3, r1
 800027e:	d908      	bls.n	8000292 <__udivmoddi4+0xc2>
 8000280:	2e00      	cmp	r6, #0
 8000282:	f000 80ee 	beq.w	8000462 <__udivmoddi4+0x292>
 8000286:	2100      	movs	r1, #0
 8000288:	e9c6 0500 	strd	r0, r5, [r6]
 800028c:	4608      	mov	r0, r1
 800028e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000292:	fab3 f183 	clz	r1, r3
 8000296:	2900      	cmp	r1, #0
 8000298:	d14a      	bne.n	8000330 <__udivmoddi4+0x160>
 800029a:	42ab      	cmp	r3, r5
 800029c:	d302      	bcc.n	80002a4 <__udivmoddi4+0xd4>
 800029e:	4282      	cmp	r2, r0
 80002a0:	f200 80fc 	bhi.w	800049c <__udivmoddi4+0x2cc>
 80002a4:	1a84      	subs	r4, r0, r2
 80002a6:	eb65 0303 	sbc.w	r3, r5, r3
 80002aa:	2001      	movs	r0, #1
 80002ac:	4698      	mov	r8, r3
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	d0e2      	beq.n	8000278 <__udivmoddi4+0xa8>
 80002b2:	e9c6 4800 	strd	r4, r8, [r6]
 80002b6:	e7df      	b.n	8000278 <__udivmoddi4+0xa8>
 80002b8:	b902      	cbnz	r2, 80002bc <__udivmoddi4+0xec>
 80002ba:	deff      	udf	#255	; 0xff
 80002bc:	fab2 f282 	clz	r2, r2
 80002c0:	2a00      	cmp	r2, #0
 80002c2:	f040 8091 	bne.w	80003e8 <__udivmoddi4+0x218>
 80002c6:	eba1 000c 	sub.w	r0, r1, ip
 80002ca:	2101      	movs	r1, #1
 80002cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d0:	fa1f fe8c 	uxth.w	lr, ip
 80002d4:	fbb0 f3f7 	udiv	r3, r0, r7
 80002d8:	fb07 0013 	mls	r0, r7, r3, r0
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002e2:	fb0e f003 	mul.w	r0, lr, r3
 80002e6:	42a8      	cmp	r0, r5
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0x12c>
 80002ea:	eb1c 0505 	adds.w	r5, ip, r5
 80002ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x12a>
 80002f4:	42a8      	cmp	r0, r5
 80002f6:	f200 80ce 	bhi.w	8000496 <__udivmoddi4+0x2c6>
 80002fa:	4643      	mov	r3, r8
 80002fc:	1a2d      	subs	r5, r5, r0
 80002fe:	fbb5 f0f7 	udiv	r0, r5, r7
 8000302:	fb07 5510 	mls	r5, r7, r0, r5
 8000306:	fb0e fe00 	mul.w	lr, lr, r0
 800030a:	b2a4      	uxth	r4, r4
 800030c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000310:	45a6      	cmp	lr, r4
 8000312:	d908      	bls.n	8000326 <__udivmoddi4+0x156>
 8000314:	eb1c 0404 	adds.w	r4, ip, r4
 8000318:	f100 35ff 	add.w	r5, r0, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x154>
 800031e:	45a6      	cmp	lr, r4
 8000320:	f200 80b6 	bhi.w	8000490 <__udivmoddi4+0x2c0>
 8000324:	4628      	mov	r0, r5
 8000326:	eba4 040e 	sub.w	r4, r4, lr
 800032a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800032e:	e79e      	b.n	800026e <__udivmoddi4+0x9e>
 8000330:	f1c1 0720 	rsb	r7, r1, #32
 8000334:	408b      	lsls	r3, r1
 8000336:	fa22 fc07 	lsr.w	ip, r2, r7
 800033a:	ea4c 0c03 	orr.w	ip, ip, r3
 800033e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000342:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000346:	fbba f8f9 	udiv	r8, sl, r9
 800034a:	fa20 f307 	lsr.w	r3, r0, r7
 800034e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000352:	408d      	lsls	r5, r1
 8000354:	fa1f fe8c 	uxth.w	lr, ip
 8000358:	431d      	orrs	r5, r3
 800035a:	fa00 f301 	lsl.w	r3, r0, r1
 800035e:	fb08 f00e 	mul.w	r0, r8, lr
 8000362:	0c2c      	lsrs	r4, r5, #16
 8000364:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000368:	42a0      	cmp	r0, r4
 800036a:	fa02 f201 	lsl.w	r2, r2, r1
 800036e:	d90b      	bls.n	8000388 <__udivmoddi4+0x1b8>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f108 3aff 	add.w	sl, r8, #4294967295
 8000378:	f080 8088 	bcs.w	800048c <__udivmoddi4+0x2bc>
 800037c:	42a0      	cmp	r0, r4
 800037e:	f240 8085 	bls.w	800048c <__udivmoddi4+0x2bc>
 8000382:	f1a8 0802 	sub.w	r8, r8, #2
 8000386:	4464      	add	r4, ip
 8000388:	1a24      	subs	r4, r4, r0
 800038a:	fbb4 f0f9 	udiv	r0, r4, r9
 800038e:	fb09 4410 	mls	r4, r9, r0, r4
 8000392:	fb00 fe0e 	mul.w	lr, r0, lr
 8000396:	b2ad      	uxth	r5, r5
 8000398:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800039c:	45a6      	cmp	lr, r4
 800039e:	d908      	bls.n	80003b2 <__udivmoddi4+0x1e2>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f100 35ff 	add.w	r5, r0, #4294967295
 80003a8:	d26c      	bcs.n	8000484 <__udivmoddi4+0x2b4>
 80003aa:	45a6      	cmp	lr, r4
 80003ac:	d96a      	bls.n	8000484 <__udivmoddi4+0x2b4>
 80003ae:	3802      	subs	r0, #2
 80003b0:	4464      	add	r4, ip
 80003b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003b6:	fba0 9502 	umull	r9, r5, r0, r2
 80003ba:	eba4 040e 	sub.w	r4, r4, lr
 80003be:	42ac      	cmp	r4, r5
 80003c0:	46c8      	mov	r8, r9
 80003c2:	46ae      	mov	lr, r5
 80003c4:	d356      	bcc.n	8000474 <__udivmoddi4+0x2a4>
 80003c6:	d053      	beq.n	8000470 <__udivmoddi4+0x2a0>
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d069      	beq.n	80004a0 <__udivmoddi4+0x2d0>
 80003cc:	ebb3 0208 	subs.w	r2, r3, r8
 80003d0:	eb64 040e 	sbc.w	r4, r4, lr
 80003d4:	fa22 f301 	lsr.w	r3, r2, r1
 80003d8:	fa04 f707 	lsl.w	r7, r4, r7
 80003dc:	431f      	orrs	r7, r3
 80003de:	40cc      	lsrs	r4, r1
 80003e0:	e9c6 7400 	strd	r7, r4, [r6]
 80003e4:	2100      	movs	r1, #0
 80003e6:	e747      	b.n	8000278 <__udivmoddi4+0xa8>
 80003e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ec:	f1c2 0120 	rsb	r1, r2, #32
 80003f0:	fa25 f301 	lsr.w	r3, r5, r1
 80003f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f8:	fa20 f101 	lsr.w	r1, r0, r1
 80003fc:	4095      	lsls	r5, r2
 80003fe:	430d      	orrs	r5, r1
 8000400:	fbb3 f1f7 	udiv	r1, r3, r7
 8000404:	fb07 3311 	mls	r3, r7, r1, r3
 8000408:	fa1f fe8c 	uxth.w	lr, ip
 800040c:	0c28      	lsrs	r0, r5, #16
 800040e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000412:	fb01 f30e 	mul.w	r3, r1, lr
 8000416:	4283      	cmp	r3, r0
 8000418:	fa04 f402 	lsl.w	r4, r4, r2
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x260>
 800041e:	eb1c 0000 	adds.w	r0, ip, r0
 8000422:	f101 38ff 	add.w	r8, r1, #4294967295
 8000426:	d22f      	bcs.n	8000488 <__udivmoddi4+0x2b8>
 8000428:	4283      	cmp	r3, r0
 800042a:	d92d      	bls.n	8000488 <__udivmoddi4+0x2b8>
 800042c:	3902      	subs	r1, #2
 800042e:	4460      	add	r0, ip
 8000430:	1ac0      	subs	r0, r0, r3
 8000432:	fbb0 f3f7 	udiv	r3, r0, r7
 8000436:	fb07 0013 	mls	r0, r7, r3, r0
 800043a:	b2ad      	uxth	r5, r5
 800043c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000440:	fb03 f00e 	mul.w	r0, r3, lr
 8000444:	42a8      	cmp	r0, r5
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x28a>
 8000448:	eb1c 0505 	adds.w	r5, ip, r5
 800044c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000450:	d216      	bcs.n	8000480 <__udivmoddi4+0x2b0>
 8000452:	42a8      	cmp	r0, r5
 8000454:	d914      	bls.n	8000480 <__udivmoddi4+0x2b0>
 8000456:	3b02      	subs	r3, #2
 8000458:	4465      	add	r5, ip
 800045a:	1a28      	subs	r0, r5, r0
 800045c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000460:	e738      	b.n	80002d4 <__udivmoddi4+0x104>
 8000462:	4631      	mov	r1, r6
 8000464:	4630      	mov	r0, r6
 8000466:	e707      	b.n	8000278 <__udivmoddi4+0xa8>
 8000468:	462f      	mov	r7, r5
 800046a:	e6e4      	b.n	8000236 <__udivmoddi4+0x66>
 800046c:	4618      	mov	r0, r3
 800046e:	e6f9      	b.n	8000264 <__udivmoddi4+0x94>
 8000470:	454b      	cmp	r3, r9
 8000472:	d2a9      	bcs.n	80003c8 <__udivmoddi4+0x1f8>
 8000474:	ebb9 0802 	subs.w	r8, r9, r2
 8000478:	eb65 0e0c 	sbc.w	lr, r5, ip
 800047c:	3801      	subs	r0, #1
 800047e:	e7a3      	b.n	80003c8 <__udivmoddi4+0x1f8>
 8000480:	4643      	mov	r3, r8
 8000482:	e7ea      	b.n	800045a <__udivmoddi4+0x28a>
 8000484:	4628      	mov	r0, r5
 8000486:	e794      	b.n	80003b2 <__udivmoddi4+0x1e2>
 8000488:	4641      	mov	r1, r8
 800048a:	e7d1      	b.n	8000430 <__udivmoddi4+0x260>
 800048c:	46d0      	mov	r8, sl
 800048e:	e77b      	b.n	8000388 <__udivmoddi4+0x1b8>
 8000490:	4464      	add	r4, ip
 8000492:	3802      	subs	r0, #2
 8000494:	e747      	b.n	8000326 <__udivmoddi4+0x156>
 8000496:	3b02      	subs	r3, #2
 8000498:	4465      	add	r5, ip
 800049a:	e72f      	b.n	80002fc <__udivmoddi4+0x12c>
 800049c:	4608      	mov	r0, r1
 800049e:	e706      	b.n	80002ae <__udivmoddi4+0xde>
 80004a0:	4631      	mov	r1, r6
 80004a2:	e6e9      	b.n	8000278 <__udivmoddi4+0xa8>

080004a4 <__aeabi_idiv0>:
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop

080004a8 <UARTDMA_UartIrqHandler>:
#include "string.h"
#include "scheduler.h"


void UARTDMA_UartIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
	if(huartdma->huart->Instance->SR & UART_FLAG_IDLE)       // Check if Idle flag is set
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	f003 0310 	and.w	r3, r3, #16
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d01a      	beq.n	80004f6 <UARTDMA_UartIrqHandler+0x4e>
	{

		volatile uint32_t tmp;
		tmp = huartdma->huart->Instance->SR;                      // Read status register
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	60fb      	str	r3, [r7, #12]
		tmp = huartdma->huart->Instance->DR;                      // Read data register
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	685b      	ldr	r3, [r3, #4]
 80004d2:	60fb      	str	r3, [r7, #12]
		huartdma->huart->hdmarx->Instance->CCR &= ~DMA_CCR_EN; 	  // Disable DMA - it will force Transfer Complete interrupt if it's enabled
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	f022 0201 	bic.w	r2, r2, #1
 80004ea:	601a      	str	r2, [r3, #0]
																  // BUT! It's only for DMA Streams(i.e F4), not for Channels like there in F103!
		tmp = tmp; // For unused warning
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	60fb      	str	r3, [r7, #12]
		UARTDMA_DmaIrqHandler(huartdma); // Since DMA IRQ won't start independently for Channels, we have to handle it manually
 80004f0:	6878      	ldr	r0, [r7, #4]
 80004f2:	f000 f804 	bl	80004fe <UARTDMA_DmaIrqHandler>
	}
}
 80004f6:	bf00      	nop
 80004f8:	3710      	adds	r7, #16
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <UARTDMA_DmaIrqHandler>:

void UARTDMA_DmaIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 80004fe:	b480      	push	{r7}
 8000500:	b089      	sub	sp, #36	; 0x24
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
	{
		__IO uint32_t ISR;   // DMA interrupt status register
		__IO uint32_t IFCR;  // DMA interrupt flag clear register
	} DMA_Base_Registers;

	DMA_Base_Registers *DmaRegisters = (DMA_Base_Registers *) huartdma->huart->hdmarx->DmaBaseAddress; // Take registers base address
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800050c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800050e:	61bb      	str	r3, [r7, #24]

	if (__HAL_DMA_GET_IT_SOURCE(huartdma->huart->hdmarx, DMA_IT_TC) != RESET) // Check if interrupt source is Transfer Complete
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f003 0302 	and.w	r3, r3, #2
 800051e:	2b00      	cmp	r3, #0
 8000520:	d075      	beq.n	800060e <UARTDMA_DmaIrqHandler+0x110>
	{
		DmaRegisters->IFCR = DMA_IFCR_CTCIF1 << huartdma->huart->hdmarx->ChannelIndex;	// Clear Transfer Complete flag
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052a:	2202      	movs	r2, #2
 800052c:	409a      	lsls	r2, r3
 800052e:	69bb      	ldr	r3, [r7, #24]
 8000530:	605a      	str	r2, [r3, #4]

		Length = DMA_RX_BUFFER_SIZE - huartdma->huart->hdmarx->Instance->CNDTR; // Get the Length of transfered data
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8000540:	617b      	str	r3, [r7, #20]

		UartBufferPointer = huartdma->UART_Buffer;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8000548:	613b      	str	r3, [r7, #16]
		DmaBufferPointer = 	huartdma->DMA_RX_Buffer;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	3304      	adds	r3, #4
 800054e:	60fb      	str	r3, [r7, #12]

		// Write received data for UART main buffer - circular buffer
		for(i = 0; i < Length; i++)
 8000550:	2300      	movs	r3, #0
 8000552:	83fb      	strh	r3, [r7, #30]
 8000554:	e035      	b.n	80005c2 <UARTDMA_DmaIrqHandler+0xc4>
		{
			TempHead = (huartdma->UartBufferHead + 1) % UART_BUFFER_SIZE;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	f8b3 3c04 	ldrh.w	r3, [r3, #3076]	; 0xc04
 800055c:	3301      	adds	r3, #1
 800055e:	425a      	negs	r2, r3
 8000560:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000564:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000568:	bf58      	it	pl
 800056a:	4253      	negpl	r3, r2
 800056c:	817b      	strh	r3, [r7, #10]
			if(TempHead == huartdma->UartBufferTail)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 8000574:	897a      	ldrh	r2, [r7, #10]
 8000576:	429a      	cmp	r2, r3
 8000578:	d106      	bne.n	8000588 <UARTDMA_DmaIrqHandler+0x8a>
			{
				huartdma->UartBufferHead = huartdma->UartBufferTail;	// No room for new data
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	f8b3 2c06 	ldrh.w	r2, [r3, #3078]	; 0xc06
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	f8a3 2c04 	strh.w	r2, [r3, #3076]	; 0xc04
 8000586:	e019      	b.n	80005bc <UARTDMA_DmaIrqHandler+0xbe>
			}
			else
			{
				UartBufferPointer[TempHead] = DmaBufferPointer[i];
 8000588:	8bfb      	ldrh	r3, [r7, #30]
 800058a:	68fa      	ldr	r2, [r7, #12]
 800058c:	441a      	add	r2, r3
 800058e:	897b      	ldrh	r3, [r7, #10]
 8000590:	6939      	ldr	r1, [r7, #16]
 8000592:	440b      	add	r3, r1
 8000594:	7812      	ldrb	r2, [r2, #0]
 8000596:	701a      	strb	r2, [r3, #0]
				if(UartBufferPointer[TempHead] == '\n')
 8000598:	897b      	ldrh	r3, [r7, #10]
 800059a:	693a      	ldr	r2, [r7, #16]
 800059c:	4413      	add	r3, r2
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b0a      	cmp	r3, #10
 80005a2:	d107      	bne.n	80005b4 <UARTDMA_DmaIrqHandler+0xb6>
				{
					huartdma->UartBufferLines++;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f893 3c08 	ldrb.w	r3, [r3, #3080]	; 0xc08
 80005aa:	3301      	adds	r3, #1
 80005ac:	b2da      	uxtb	r2, r3
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	f883 2c08 	strb.w	r2, [r3, #3080]	; 0xc08
				}
				huartdma->UartBufferHead = TempHead;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	897a      	ldrh	r2, [r7, #10]
 80005b8:	f8a3 2c04 	strh.w	r2, [r3, #3076]	; 0xc04
		for(i = 0; i < Length; i++)
 80005bc:	8bfb      	ldrh	r3, [r7, #30]
 80005be:	3301      	adds	r3, #1
 80005c0:	83fb      	strh	r3, [r7, #30]
 80005c2:	8bfb      	ldrh	r3, [r7, #30]
 80005c4:	697a      	ldr	r2, [r7, #20]
 80005c6:	429a      	cmp	r2, r3
 80005c8:	d8c5      	bhi.n	8000556 <UARTDMA_DmaIrqHandler+0x58>
			}
		}


		DmaRegisters->IFCR = 0x0FU << huartdma->huart->hdmarx->ChannelIndex; 		// Clear all interrupts
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d2:	220f      	movs	r2, #15
 80005d4:	409a      	lsls	r2, r3
 80005d6:	69bb      	ldr	r3, [r7, #24]
 80005d8:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CMAR = (uint32_t) huartdma->DMA_RX_Buffer; // Set memory address for DMA again
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	1d1a      	adds	r2, r3, #4
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	60da      	str	r2, [r3, #12]
		huartdma->huart->hdmarx->Instance->CNDTR = DMA_RX_BUFFER_SIZE; // Set number of bytes to receive
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005f4:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CCR |= DMA_CCR_EN;            	// Start DMA transfer
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f042 0201 	orr.w	r2, r2, #1
 800060c:	601a      	str	r2, [r3, #0]
	}
}
 800060e:	bf00      	nop
 8000610:	3724      	adds	r7, #36	; 0x24
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr

08000618 <UARTDMA_GetCharFromBuffer>:

int UARTDMA_GetCharFromBuffer(UARTDMA_HandleTypeDef *huartdma)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	if(huartdma->UartBufferHead == huartdma->UartBufferTail)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f8b3 2c04 	ldrh.w	r2, [r3, #3076]	; 0xc04
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 800062c:	429a      	cmp	r2, r3
 800062e:	d102      	bne.n	8000636 <UARTDMA_GetCharFromBuffer+0x1e>
	{
		return -1; // error - no char to return
 8000630:	f04f 33ff 	mov.w	r3, #4294967295
 8000634:	e016      	b.n	8000664 <UARTDMA_GetCharFromBuffer+0x4c>
	}
	huartdma->UartBufferTail = (huartdma->UartBufferTail + 1) % UART_BUFFER_SIZE;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 800063c:	3301      	adds	r3, #1
 800063e:	425a      	negs	r2, r3
 8000640:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000644:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000648:	bf58      	it	pl
 800064a:	4253      	negpl	r3, r2
 800064c:	b29a      	uxth	r2, r3
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	f8a3 2c06 	strh.w	r2, [r3, #3078]	; 0xc06

	return huartdma->UART_Buffer[huartdma->UartBufferTail];
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 800065a:	461a      	mov	r2, r3
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	4413      	add	r3, r2
 8000660:	f893 3404 	ldrb.w	r3, [r3, #1028]	; 0x404
}
 8000664:	4618      	mov	r0, r3
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	bc80      	pop	{r7}
 800066c:	4770      	bx	lr

0800066e <UARTDMA_IsDataReady>:

uint8_t UARTDMA_IsDataReady(UARTDMA_HandleTypeDef *huartdma)
{
 800066e:	b480      	push	{r7}
 8000670:	b083      	sub	sp, #12
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
	if(huartdma->UartBufferLines)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f893 3c08 	ldrb.w	r3, [r3, #3080]	; 0xc08
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <UARTDMA_IsDataReady+0x16>
		return 1;
 8000680:	2301      	movs	r3, #1
 8000682:	e000      	b.n	8000686 <UARTDMA_IsDataReady+0x18>
	else
		return 0;
 8000684:	2300      	movs	r3, #0
}
 8000686:	4618      	mov	r0, r3
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr

08000690 <UARTDMA_GetLineFromBuffer>:

int UARTDMA_GetLineFromBuffer(UARTDMA_HandleTypeDef *huartdma, char *OutBuffer)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	6039      	str	r1, [r7, #0]
	char TempChar;
	char* LinePointer = OutBuffer;
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	60fb      	str	r3, [r7, #12]
	if(huartdma->UartBufferLines)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	f893 3c08 	ldrb.w	r3, [r3, #3080]	; 0xc08
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d024      	beq.n	80006f2 <UARTDMA_GetLineFromBuffer+0x62>
	{
		while((TempChar = UARTDMA_GetCharFromBuffer(huartdma)))
 80006a8:	e00e      	b.n	80006c8 <UARTDMA_GetLineFromBuffer+0x38>
		{
			if(TempChar == '\n')
 80006aa:	7afb      	ldrb	r3, [r7, #11]
 80006ac:	2b0a      	cmp	r3, #10
 80006ae:	d014      	beq.n	80006da <UARTDMA_GetLineFromBuffer+0x4a>
			{
				break;
			}
			if((TempChar != '\n') && (TempChar != '\r')){
 80006b0:	7afb      	ldrb	r3, [r7, #11]
 80006b2:	2b0a      	cmp	r3, #10
 80006b4:	d008      	beq.n	80006c8 <UARTDMA_GetLineFromBuffer+0x38>
 80006b6:	7afb      	ldrb	r3, [r7, #11]
 80006b8:	2b0d      	cmp	r3, #13
 80006ba:	d005      	beq.n	80006c8 <UARTDMA_GetLineFromBuffer+0x38>
				*LinePointer = TempChar;
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	7afa      	ldrb	r2, [r7, #11]
 80006c0:	701a      	strb	r2, [r3, #0]
				LinePointer++;
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	3301      	adds	r3, #1
 80006c6:	60fb      	str	r3, [r7, #12]
		while((TempChar = UARTDMA_GetCharFromBuffer(huartdma)))
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f7ff ffa5 	bl	8000618 <UARTDMA_GetCharFromBuffer>
 80006ce:	4603      	mov	r3, r0
 80006d0:	72fb      	strb	r3, [r7, #11]
 80006d2:	7afb      	ldrb	r3, [r7, #11]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d1e8      	bne.n	80006aa <UARTDMA_GetLineFromBuffer+0x1a>
 80006d8:	e000      	b.n	80006dc <UARTDMA_GetLineFromBuffer+0x4c>
				break;
 80006da:	bf00      	nop
			}
		}
		*LinePointer = 0; // end of cstring
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]
		huartdma->UartBufferLines--; // decrement line counter
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	f893 3c08 	ldrb.w	r3, [r3, #3080]	; 0xc08
 80006e8:	3b01      	subs	r3, #1
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	f883 2c08 	strb.w	r2, [r3, #3080]	; 0xc08
	}
	return 0;
 80006f2:	2300      	movs	r3, #0
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3710      	adds	r7, #16
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <UARTDMA_Init>:

void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	6039      	str	r1, [r7, #0]
	huartdma->huart = huart;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	683a      	ldr	r2, [r7, #0]
 800070a:	601a      	str	r2, [r3, #0]

	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	68da      	ldr	r2, [r3, #12]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f042 0210 	orr.w	r2, r2, #16
 800071e:	60da      	str	r2, [r3, #12]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f042 0202 	orr.w	r2, r2, #2
 8000736:	601a      	str	r2, [r3, #0]

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	6818      	ldr	r0, [r3, #0]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3304      	adds	r3, #4
 8000740:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000744:	4619      	mov	r1, r3
 8000746:	f003 fa06 	bl	8003b56 <HAL_UART_Receive_DMA>

	huartdma->huart->hdmarx->Instance->CCR &= ~DMA_CCR_HTIE; // Disable DMA Half Complete interrupt
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f022 0204 	bic.w	r2, r2, #4
 8000760:	601a      	str	r2, [r3, #0]
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
	...

0800076c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000774:	1d39      	adds	r1, r7, #4
 8000776:	f04f 33ff 	mov.w	r3, #4294967295
 800077a:	2201      	movs	r2, #1
 800077c:	4803      	ldr	r0, [pc, #12]	; (800078c <__io_putchar+0x20>)
 800077e:	f003 f967 	bl	8003a50 <HAL_UART_Transmit>
	return ch;
 8000782:	687b      	ldr	r3, [r7, #4]
}
 8000784:	4618      	mov	r0, r3
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000ce0 	.word	0x20000ce0

08000790 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000792:	f5ad 5dea 	sub.w	sp, sp, #7488	; 0x1d40
 8000796:	b081      	sub	sp, #4
 8000798:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800079a:	f001 fec8 	bl	800252e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800079e:	f001 fa05 	bl	8001bac <SystemClock_Config>

	/* USER CODE BEGIN SysInit */

	srand(time(NULL));
 80007a2:	2000      	movs	r0, #0
 80007a4:	f003 ff94 	bl	80046d0 <time>
 80007a8:	4602      	mov	r2, r0
 80007aa:	460b      	mov	r3, r1
 80007ac:	4613      	mov	r3, r2
 80007ae:	4618      	mov	r0, r3
 80007b0:	f003 fe6e 	bl	8004490 <srand>

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80007b4:	f001 fb0e 	bl	8001dd4 <MX_GPIO_Init>
	MX_DMA_Init();
 80007b8:	f001 faee 	bl	8001d98 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80007bc:	f001 fa98 	bl	8001cf0 <MX_USART2_UART_Init>
	MX_UART4_Init();
 80007c0:	f001 fa42 	bl	8001c48 <MX_UART4_Init>
	MX_USART1_UART_Init();
 80007c4:	f001 fa6a 	bl	8001c9c <MX_USART1_UART_Init>
	MX_USART3_UART_Init();
 80007c8:	f001 fabc 	bl	8001d44 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	UARTDMA_Init(&huartdma6, &huart2);
 80007cc:	49d4      	ldr	r1, [pc, #848]	; (8000b20 <main+0x390>)
 80007ce:	48d5      	ldr	r0, [pc, #852]	; (8000b24 <main+0x394>)
 80007d0:	f7ff ff94 	bl	80006fc <UARTDMA_Init>
	/* USER CODE BEGIN WHILE */




	command LTE_sim_check_active = {
 80007d4:	4bd4      	ldr	r3, [pc, #848]	; (8000b28 <main+0x398>)
 80007d6:	f507 54e7 	add.w	r4, r7, #7392	; 0x1ce0
 80007da:	f104 040c 	add.w	r4, r4, #12
 80007de:	461d      	mov	r5, r3
 80007e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007e4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80007e8:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = RETRY,
			.retry_counter = 3
	};

	command LTE_disable_echo = {
 80007ec:	4bcf      	ldr	r3, [pc, #828]	; (8000b2c <main+0x39c>)
 80007ee:	f507 54e6 	add.w	r4, r7, #7360	; 0x1cc0
 80007f2:	f104 0414 	add.w	r4, r4, #20
 80007f6:	461d      	mov	r5, r3
 80007f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007fc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000800:	e884 0003 	stmia.w	r4, {r0, r1}
			.retry_counter = 3
	};



	command LTE_deactivate_gprs = {
 8000804:	4bca      	ldr	r3, [pc, #808]	; (8000b30 <main+0x3a0>)
 8000806:	f507 54e5 	add.w	r4, r7, #7328	; 0x1ca0
 800080a:	f104 041c 	add.w	r4, r4, #28
 800080e:	461d      	mov	r5, r3
 8000810:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000812:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000814:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000818:	e884 0003 	stmia.w	r4, {r0, r1}
			.act_on_error = RETRY,
			.retry_counter = 3
	};


	command LTE_attach_gprs = {
 800081c:	4bc5      	ldr	r3, [pc, #788]	; (8000b34 <main+0x3a4>)
 800081e:	f507 54e5 	add.w	r4, r7, #7328	; 0x1ca0
 8000822:	f104 0404 	add.w	r4, r4, #4
 8000826:	461d      	mov	r5, r3
 8000828:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800082a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800082c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000830:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = RETRY,
			.retry_counter = 3
	};

	command LTE_set_apn = {
 8000834:	4bc0      	ldr	r3, [pc, #768]	; (8000b38 <main+0x3a8>)
 8000836:	f507 54e4 	add.w	r4, r7, #7296	; 0x1c80
 800083a:	f104 040c 	add.w	r4, r4, #12
 800083e:	461d      	mov	r5, r3
 8000840:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000842:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000844:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000848:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = RETRY,
			.retry_counter = 3
	};

	command LTE_gprs_up = {
 800084c:	4bbb      	ldr	r3, [pc, #748]	; (8000b3c <main+0x3ac>)
 800084e:	f507 54e3 	add.w	r4, r7, #7264	; 0x1c60
 8000852:	f104 0414 	add.w	r4, r4, #20
 8000856:	461d      	mov	r5, r3
 8000858:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800085a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800085c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000860:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = RETRY,
			.retry_counter = 3
	};

	command LTE_get_ip = {
 8000864:	4bb6      	ldr	r3, [pc, #728]	; (8000b40 <main+0x3b0>)
 8000866:	f507 54e2 	add.w	r4, r7, #7232	; 0x1c40
 800086a:	f104 041c 	add.w	r4, r4, #28
 800086e:	461d      	mov	r5, r3
 8000870:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000872:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000874:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000878:	e884 0003 	stmia.w	r4, {r0, r1}
			.act_on_error = RETRY,
			.retry_counter = 3
	};


	command LTE_init_gps = {
 800087c:	4bb1      	ldr	r3, [pc, #708]	; (8000b44 <main+0x3b4>)
 800087e:	f507 54e2 	add.w	r4, r7, #7232	; 0x1c40
 8000882:	f104 0404 	add.w	r4, r4, #4
 8000886:	461d      	mov	r5, r3
 8000888:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800088a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800088c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000890:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = RETRY,
			.retry_counter = 3
	};

	command LTE_get_position = {
 8000894:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8000898:	f103 0310 	add.w	r3, r3, #16
 800089c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80008a0:	4aa9      	ldr	r2, [pc, #676]	; (8000b48 <main+0x3b8>)
 80008a2:	461c      	mov	r4, r3
 80008a4:	4615      	mov	r5, r2
 80008a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008aa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80008ae:	e884 0003 	stmia.w	r4, {r0, r1}
			.act_on_error = RETRY,
			.retry_counter = 0
	};


	command LTE_ftp_quit = {
 80008b2:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 80008b6:	f103 0310 	add.w	r3, r3, #16
 80008ba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80008be:	4aa3      	ldr	r2, [pc, #652]	; (8000b4c <main+0x3bc>)
 80008c0:	461c      	mov	r4, r3
 80008c2:	4615      	mov	r5, r2
 80008c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008c8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80008cc:	e884 0003 	stmia.w	r4, {r0, r1}
			.act_on_error = MOVE_ON,
			.retry_counter = 0
	};


	command LTE_bearer_1 = {
 80008d0:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 80008d4:	f103 0310 	add.w	r3, r3, #16
 80008d8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80008dc:	4a9c      	ldr	r2, [pc, #624]	; (8000b50 <main+0x3c0>)
 80008de:	461c      	mov	r4, r3
 80008e0:	4615      	mov	r5, r2
 80008e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008e6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80008ea:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = MOVE_ON,
			.retry_counter = 0
	};

	command LTE_bearer_2 = {
 80008ee:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 80008f2:	f103 0310 	add.w	r3, r3, #16
 80008f6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80008fa:	4a96      	ldr	r2, [pc, #600]	; (8000b54 <main+0x3c4>)
 80008fc:	461c      	mov	r4, r3
 80008fe:	4615      	mov	r5, r2
 8000900:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000902:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000904:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000908:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = MOVE_ON,
			.retry_counter = 0
	};

	command LTE_bearer_3 = {
 800090c:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8000910:	f103 0310 	add.w	r3, r3, #16
 8000914:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8000918:	4a8f      	ldr	r2, [pc, #572]	; (8000b58 <main+0x3c8>)
 800091a:	461c      	mov	r4, r3
 800091c:	4615      	mov	r5, r2
 800091e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000920:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000922:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000926:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = MOVE_ON,
			.retry_counter = 0
	};

	command LTE_set_dns = {
 800092a:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 800092e:	f103 0310 	add.w	r3, r3, #16
 8000932:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8000936:	4a89      	ldr	r2, [pc, #548]	; (8000b5c <main+0x3cc>)
 8000938:	461c      	mov	r4, r3
 800093a:	4615      	mov	r5, r2
 800093c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800093e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000940:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000944:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = MOVE_ON,
			.retry_counter = 0
	};

	command LTE_ftp_bearer = {
 8000948:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 800094c:	f103 0310 	add.w	r3, r3, #16
 8000950:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000954:	4a82      	ldr	r2, [pc, #520]	; (8000b60 <main+0x3d0>)
 8000956:	461c      	mov	r4, r3
 8000958:	4615      	mov	r5, r2
 800095a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800095c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800095e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000962:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = MOVE_ON,
			.retry_counter = 0
	};

	command LTE_ftp_type_binary = {
 8000966:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 800096a:	f103 0310 	add.w	r3, r3, #16
 800096e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8000972:	4a7c      	ldr	r2, [pc, #496]	; (8000b64 <main+0x3d4>)
 8000974:	461c      	mov	r4, r3
 8000976:	4615      	mov	r5, r2
 8000978:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800097a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800097c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000980:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = MOVE_ON,
			.retry_counter = 0
	};

	command LTE_ftp_append = {
 8000984:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8000988:	f103 0310 	add.w	r3, r3, #16
 800098c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8000990:	4a75      	ldr	r2, [pc, #468]	; (8000b68 <main+0x3d8>)
 8000992:	461c      	mov	r4, r3
 8000994:	4615      	mov	r5, r2
 8000996:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000998:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800099a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800099e:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = MOVE_ON,
			.retry_counter = 0
	};

	command LTE_ftp_ip = {
 80009a2:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 80009a6:	f103 0310 	add.w	r3, r3, #16
 80009aa:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80009ae:	4a6f      	ldr	r2, [pc, #444]	; (8000b6c <main+0x3dc>)
 80009b0:	461c      	mov	r4, r3
 80009b2:	4615      	mov	r5, r2
 80009b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009b8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80009bc:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = MOVE_ON,
			.retry_counter = 0
	};

	command LTE_ftp_user = {
 80009c0:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 80009c4:	f103 0310 	add.w	r3, r3, #16
 80009c8:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80009cc:	4a68      	ldr	r2, [pc, #416]	; (8000b70 <main+0x3e0>)
 80009ce:	461c      	mov	r4, r3
 80009d0:	4615      	mov	r5, r2
 80009d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009d6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80009da:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = MOVE_ON,
			.retry_counter = 0
	};

	command LTE_ftp_pass = {
 80009de:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 80009e2:	f103 0310 	add.w	r3, r3, #16
 80009e6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80009ea:	4a62      	ldr	r2, [pc, #392]	; (8000b74 <main+0x3e4>)
 80009ec:	461c      	mov	r4, r3
 80009ee:	4615      	mov	r5, r2
 80009f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80009f8:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = MOVE_ON,
			.retry_counter = 0
	};

	command LTE_ftp_port = {
 80009fc:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8000a00:	f103 0310 	add.w	r3, r3, #16
 8000a04:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8000a08:	4a5b      	ldr	r2, [pc, #364]	; (8000b78 <main+0x3e8>)
 8000a0a:	461c      	mov	r4, r3
 8000a0c:	4615      	mov	r5, r2
 8000a0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a12:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a16:	e884 0003 	stmia.w	r4, {r0, r1}
			.act_on_error = MOVE_ON,
			.retry_counter = 0
	};


	command LTE_ftp_path = {
 8000a1a:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8000a1e:	f103 0310 	add.w	r3, r3, #16
 8000a22:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8000a26:	4a55      	ldr	r2, [pc, #340]	; (8000b7c <main+0x3ec>)
 8000a28:	461c      	mov	r4, r3
 8000a2a:	4615      	mov	r5, r2
 8000a2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a30:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a34:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = MOVE_ON,
			.retry_counter = 0
	};

	command LTE_get_time = {
 8000a38:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8000a3c:	f103 0310 	add.w	r3, r3, #16
 8000a40:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8000a44:	4a4e      	ldr	r2, [pc, #312]	; (8000b80 <main+0x3f0>)
 8000a46:	461c      	mov	r4, r3
 8000a48:	4615      	mov	r5, r2
 8000a4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a4e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a52:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = MOVE_ON,
			.retry_counter = 0
	};

	char g_fileName[60] = "AT+FTPPUTNAME=\"unknown_";
 8000a56:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8000a5a:	f103 0310 	add.w	r3, r3, #16
 8000a5e:	f5a3 7624 	sub.w	r6, r3, #656	; 0x290
 8000a62:	4b48      	ldr	r3, [pc, #288]	; (8000b84 <main+0x3f4>)
 8000a64:	4634      	mov	r4, r6
 8000a66:	461d      	mov	r5, r3
 8000a68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a6c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a70:	e884 0003 	stmia.w	r4, {r0, r1}
 8000a74:	f106 0318 	add.w	r3, r6, #24
 8000a78:	2224      	movs	r2, #36	; 0x24
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f003 fc71 	bl	8004364 <memset>

	char g_dataSize[20] = " AT+FTPPUT=2,0";
 8000a82:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8000a86:	f103 0310 	add.w	r3, r3, #16
 8000a8a:	f5a3 7529 	sub.w	r5, r3, #676	; 0x2a4
 8000a8e:	4b3e      	ldr	r3, [pc, #248]	; (8000b88 <main+0x3f8>)
 8000a90:	462c      	mov	r4, r5
 8000a92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a94:	c407      	stmia	r4!, {r0, r1, r2}
 8000a96:	8023      	strh	r3, [r4, #0]
 8000a98:	3402      	adds	r4, #2
 8000a9a:	0c1b      	lsrs	r3, r3, #16
 8000a9c:	7023      	strb	r3, [r4, #0]
 8000a9e:	f105 030f 	add.w	r3, r5, #15
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	711a      	strb	r2, [r3, #4]

	char g_dataSizeResponse[20] = "+FTPPUT=2,0";
 8000aa8:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8000aac:	f103 0310 	add.w	r3, r3, #16
 8000ab0:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8000ab4:	4a35      	ldr	r2, [pc, #212]	; (8000b8c <main+0x3fc>)
 8000ab6:	461c      	mov	r4, r3
 8000ab8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000aba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000abe:	330c      	adds	r3, #12
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]


	char gps_data_latest[BUFFER_SIZE] = {};
 8000ac6:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8000aca:	f103 0310 	add.w	r3, r3, #16
 8000ace:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	3304      	adds	r3, #4
 8000ad8:	22fc      	movs	r2, #252	; 0xfc
 8000ada:	2100      	movs	r1, #0
 8000adc:	4618      	mov	r0, r3
 8000ade:	f003 fc41 	bl	8004364 <memset>


	char random[20];
	itoa(rand(), random, 10);
 8000ae2:	f003 fd03 	bl	80044ec <rand>
 8000ae6:	f507 53cb 	add.w	r3, r7, #6496	; 0x1960
 8000aea:	f103 0304 	add.w	r3, r3, #4
 8000aee:	220a      	movs	r2, #10
 8000af0:	4619      	mov	r1, r3
 8000af2:	f003 fc35 	bl	8004360 <itoa>
	strcat(g_fileName, random);
 8000af6:	f507 52cb 	add.w	r2, r7, #6496	; 0x1960
 8000afa:	f102 0204 	add.w	r2, r2, #4
 8000afe:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000b02:	4611      	mov	r1, r2
 8000b04:	4618      	mov	r0, r3
 8000b06:	f003 fd2f 	bl	8004568 <strcat>
	strcat(g_fileName, ".txt\"\r\n");
 8000b0a:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff fb3e 	bl	8000190 <strlen>
 8000b14:	4603      	mov	r3, r0
 8000b16:	461a      	mov	r2, r3
 8000b18:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000b1c:	4413      	add	r3, r2
 8000b1e:	e037      	b.n	8000b90 <main+0x400>
 8000b20:	20000d28 	.word	0x20000d28
 8000b24:	2000008c 	.word	0x2000008c
 8000b28:	08005b58 	.word	0x08005b58
 8000b2c:	08005b70 	.word	0x08005b70
 8000b30:	08005b88 	.word	0x08005b88
 8000b34:	08005ba0 	.word	0x08005ba0
 8000b38:	08005bb8 	.word	0x08005bb8
 8000b3c:	08005bd0 	.word	0x08005bd0
 8000b40:	08005be8 	.word	0x08005be8
 8000b44:	08005c00 	.word	0x08005c00
 8000b48:	08005c18 	.word	0x08005c18
 8000b4c:	08005c30 	.word	0x08005c30
 8000b50:	08005c48 	.word	0x08005c48
 8000b54:	08005c60 	.word	0x08005c60
 8000b58:	08005c78 	.word	0x08005c78
 8000b5c:	08005c90 	.word	0x08005c90
 8000b60:	08005ca8 	.word	0x08005ca8
 8000b64:	08005cc0 	.word	0x08005cc0
 8000b68:	08005cd8 	.word	0x08005cd8
 8000b6c:	08005cf0 	.word	0x08005cf0
 8000b70:	08005d08 	.word	0x08005d08
 8000b74:	08005d20 	.word	0x08005d20
 8000b78:	08005d38 	.word	0x08005d38
 8000b7c:	08005d50 	.word	0x08005d50
 8000b80:	08005d68 	.word	0x08005d68
 8000b84:	08005d80 	.word	0x08005d80
 8000b88:	08005dbc 	.word	0x08005dbc
 8000b8c:	08005dd0 	.word	0x08005dd0
 8000b90:	49dd      	ldr	r1, [pc, #884]	; (8000f08 <main+0x778>)
 8000b92:	461a      	mov	r2, r3
 8000b94:	460b      	mov	r3, r1
 8000b96:	cb03      	ldmia	r3!, {r0, r1}
 8000b98:	6010      	str	r0, [r2, #0]
 8000b9a:	6051      	str	r1, [r2, #4]


	printf("\t\tFILE_RAND: %s\r\n", g_fileName);
 8000b9c:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	48da      	ldr	r0, [pc, #872]	; (8000f0c <main+0x77c>)
 8000ba4:	f003 fbe6 	bl	8004374 <iprintf>

	command LTE_ftp_filename = {
 8000ba8:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8000bac:	f103 0310 	add.w	r3, r3, #16
 8000bb0:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8000bb4:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8000bbe:	f103 0310 	add.w	r3, r3, #16
 8000bc2:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8000bc6:	4ad2      	ldr	r2, [pc, #840]	; (8000f10 <main+0x780>)
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8000bce:	f103 0310 	add.w	r3, r3, #16
 8000bd2:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8000bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8000be0:	f103 0310 	add.w	r3, r3, #16
 8000be4:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8000be8:	4aca      	ldr	r2, [pc, #808]	; (8000f14 <main+0x784>)
 8000bea:	60da      	str	r2, [r3, #12]
 8000bec:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8000bf0:	f103 0310 	add.w	r3, r3, #16
 8000bf4:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8000bf8:	2203      	movs	r2, #3
 8000bfa:	741a      	strb	r2, [r3, #16]
 8000bfc:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8000c00:	f103 0310 	add.w	r3, r3, #16
 8000c04:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8000c08:	2200      	movs	r2, #0
 8000c0a:	615a      	str	r2, [r3, #20]
			.bad_answer = "ERROR",
			.act_on_error = MOVE_ON,
			.retry_counter = 0
	};

	command LTE_ftp_start_put = {
 8000c0c:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8000c10:	f103 0310 	add.w	r3, r3, #16
 8000c14:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8000c18:	4abf      	ldr	r2, [pc, #764]	; (8000f18 <main+0x788>)
 8000c1a:	461c      	mov	r4, r3
 8000c1c:	4615      	mov	r5, r2
 8000c1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c22:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c26:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "+FTPPUT: 1,66",
			.act_on_error = RESET_PROCESSOR,
			.retry_counter = 0
	};

	command LTE_ftp_put_data_size = {
 8000c2a:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8000c2e:	f103 0310 	add.w	r3, r3, #16
 8000c32:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8000c36:	f507 52d4 	add.w	r2, r7, #6784	; 0x1a80
 8000c3a:	f102 020c 	add.w	r2, r2, #12
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8000c44:	f103 0310 	add.w	r3, r3, #16
 8000c48:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8000c4c:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 8000c50:	f102 0218 	add.w	r2, r2, #24
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8000c5a:	f103 0310 	add.w	r3, r3, #16
 8000c5e:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8000c62:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8000c6c:	f103 0310 	add.w	r3, r3, #16
 8000c70:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8000c74:	4aa7      	ldr	r2, [pc, #668]	; (8000f14 <main+0x784>)
 8000c76:	60da      	str	r2, [r3, #12]
 8000c78:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8000c7c:	f103 0310 	add.w	r3, r3, #16
 8000c80:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8000c84:	2201      	movs	r2, #1
 8000c86:	741a      	strb	r2, [r3, #16]
 8000c88:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8000c8c:	f103 0310 	add.w	r3, r3, #16
 8000c90:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8000c94:	2200      	movs	r2, #0
 8000c96:	615a      	str	r2, [r3, #20]
			.bad_answer = "ERROR",
			.act_on_error = RESET_PROCESSOR,
			.retry_counter = 0
	};

	command LTE_ftp_put_data = {
 8000c98:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8000c9c:	f103 0310 	add.w	r3, r3, #16
 8000ca0:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8000ca4:	f507 52cb 	add.w	r2, r7, #6496	; 0x1960
 8000ca8:	f102 0218 	add.w	r2, r2, #24
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8000cb2:	f103 0310 	add.w	r3, r3, #16
 8000cb6:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8000cba:	4a95      	ldr	r2, [pc, #596]	; (8000f10 <main+0x780>)
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8000cc2:	f103 0310 	add.w	r3, r3, #16
 8000cc6:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8000cca:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8000cd4:	f103 0310 	add.w	r3, r3, #16
 8000cd8:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8000cdc:	4a8d      	ldr	r2, [pc, #564]	; (8000f14 <main+0x784>)
 8000cde:	60da      	str	r2, [r3, #12]
 8000ce0:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8000ce4:	f103 0310 	add.w	r3, r3, #16
 8000ce8:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8000cec:	2201      	movs	r2, #1
 8000cee:	741a      	strb	r2, [r3, #16]
 8000cf0:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8000cf4:	f103 0310 	add.w	r3, r3, #16
 8000cf8:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	615a      	str	r2, [r3, #20]
			.act_on_error = RESET_PROCESSOR,
			.retry_counter = 0
	};


	command LTE_ftp_end_put = {
 8000d00:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8000d04:	f103 0310 	add.w	r3, r3, #16
 8000d08:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8000d0c:	4a83      	ldr	r2, [pc, #524]	; (8000f1c <main+0x78c>)
 8000d0e:	461c      	mov	r4, r3
 8000d10:	4615      	mov	r5, r2
 8000d12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d16:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d1a:	e884 0003 	stmia.w	r4, {r0, r1}
			.act_on_error = RESET_PROCESSOR,
			.retry_counter = 0
	};

	// SIGNAL commands
	command LTE_ftp_active = {
 8000d1e:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8000d22:	f103 0310 	add.w	r3, r3, #16
 8000d26:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	6013      	str	r3, [r2, #0]
 8000d30:	6053      	str	r3, [r2, #4]
 8000d32:	6093      	str	r3, [r2, #8]
 8000d34:	60d3      	str	r3, [r2, #12]
 8000d36:	6113      	str	r3, [r2, #16]
 8000d38:	6153      	str	r3, [r2, #20]
 8000d3a:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8000d3e:	f103 0310 	add.w	r3, r3, #16
 8000d42:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8000d46:	4a76      	ldr	r2, [pc, #472]	; (8000f20 <main+0x790>)
 8000d48:	601a      	str	r2, [r3, #0]
			.cmd = "FTP_ACTIVE"
	};

	command LTE_reset_action = {
 8000d4a:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8000d4e:	f103 0310 	add.w	r3, r3, #16
 8000d52:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8000d56:	461a      	mov	r2, r3
 8000d58:	2300      	movs	r3, #0
 8000d5a:	6013      	str	r3, [r2, #0]
 8000d5c:	6053      	str	r3, [r2, #4]
 8000d5e:	6093      	str	r3, [r2, #8]
 8000d60:	60d3      	str	r3, [r2, #12]
 8000d62:	6113      	str	r3, [r2, #16]
 8000d64:	6153      	str	r3, [r2, #20]
 8000d66:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8000d6a:	f103 0310 	add.w	r3, r3, #16
 8000d6e:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8000d72:	4a6c      	ldr	r2, [pc, #432]	; (8000f24 <main+0x794>)
 8000d74:	601a      	str	r2, [r3, #0]
			.cmd = "RESET_ACTION"
	};

	uint8_t current_action = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 8000d7c:	f102 020f 	add.w	r2, r2, #15
 8000d80:	7013      	strb	r3, [r2, #0]

	uint8_t filename_time_set = 0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 8000d88:	f102 020e 	add.w	r2, r2, #14
 8000d8c:	7013      	strb	r3, [r2, #0]

	uint8_t transfer_status = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 8000d94:	f102 020d 	add.w	r2, r2, #13
 8000d98:	7013      	strb	r3, [r2, #0]

	command action_list[255];


	uint8_t last_action = 34;
 8000d9a:	2322      	movs	r3, #34	; 0x22
 8000d9c:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 8000da0:	f102 020f 	add.w	r2, r2, #15
 8000da4:	7013      	strb	r3, [r2, #0]

	action_list[0] = LTE_sim_check_active;
 8000da6:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8000daa:	f6a3 435c 	subw	r3, r3, #3164	; 0xc5c
 8000dae:	461d      	mov	r5, r3
 8000db0:	f507 54e7 	add.w	r4, r7, #7392	; 0x1ce0
 8000db4:	f104 040c 	add.w	r4, r4, #12
 8000db8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dbc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000dc0:	e885 0003 	stmia.w	r5, {r0, r1}
	action_list[1] = LTE_disable_echo;
 8000dc4:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8000dc8:	f6a3 435c 	subw	r3, r3, #3164	; 0xc5c
 8000dcc:	f103 0418 	add.w	r4, r3, #24
 8000dd0:	f507 55e6 	add.w	r5, r7, #7360	; 0x1cc0
 8000dd4:	f105 0514 	add.w	r5, r5, #20
 8000dd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ddc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000de0:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[2] = LTE_deactivate_gprs;
 8000de4:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8000de8:	f6a3 435c 	subw	r3, r3, #3164	; 0xc5c
 8000dec:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8000df0:	f507 55e5 	add.w	r5, r7, #7328	; 0x1ca0
 8000df4:	f105 051c 	add.w	r5, r5, #28
 8000df8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dfc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e00:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[3] = LTE_attach_gprs;
 8000e04:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8000e08:	f6a3 435c 	subw	r3, r3, #3164	; 0xc5c
 8000e0c:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8000e10:	f507 55e5 	add.w	r5, r7, #7328	; 0x1ca0
 8000e14:	f105 0504 	add.w	r5, r5, #4
 8000e18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e1c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e20:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[4] = LTE_set_apn;
 8000e24:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8000e28:	f6a3 435c 	subw	r3, r3, #3164	; 0xc5c
 8000e2c:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8000e30:	f507 55e4 	add.w	r5, r7, #7296	; 0x1c80
 8000e34:	f105 050c 	add.w	r5, r5, #12
 8000e38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e3c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e40:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[5] = LTE_gprs_up;
 8000e44:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8000e48:	f6a3 435c 	subw	r3, r3, #3164	; 0xc5c
 8000e4c:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8000e50:	f507 55e3 	add.w	r5, r7, #7264	; 0x1c60
 8000e54:	f105 0514 	add.w	r5, r5, #20
 8000e58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e5c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e60:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[6] = LTE_get_ip;
 8000e64:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8000e68:	f6a3 435c 	subw	r3, r3, #3164	; 0xc5c
 8000e6c:	f103 0490 	add.w	r4, r3, #144	; 0x90
 8000e70:	f507 55e2 	add.w	r5, r7, #7232	; 0x1c40
 8000e74:	f105 051c 	add.w	r5, r5, #28
 8000e78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e7c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e80:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[7] = LTE_init_gps;
 8000e84:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8000e88:	f6a3 435c 	subw	r3, r3, #3164	; 0xc5c
 8000e8c:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8000e90:	f507 55e2 	add.w	r5, r7, #7232	; 0x1c40
 8000e94:	f105 0504 	add.w	r5, r5, #4
 8000e98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e9c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ea0:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[8] = LTE_reset_action;
 8000ea4:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8000ea8:	f6a3 435c 	subw	r3, r3, #3164	; 0xc5c
 8000eac:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 8000eb0:	f102 0210 	add.w	r2, r2, #16
 8000eb4:	f2a2 4274 	subw	r2, r2, #1140	; 0x474
 8000eb8:	f103 04c0 	add.w	r4, r3, #192	; 0xc0
 8000ebc:	4615      	mov	r5, r2
 8000ebe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ec0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ec2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ec6:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[9] = LTE_bearer_1;
 8000eca:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8000ece:	f6a3 435c 	subw	r3, r3, #3164	; 0xc5c
 8000ed2:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 8000ed6:	f102 0210 	add.w	r2, r2, #16
 8000eda:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8000ede:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8000ee2:	4615      	mov	r5, r2
 8000ee4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ee6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ee8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000eec:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[10] = LTE_bearer_2;
 8000ef0:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8000ef4:	f6a3 435c 	subw	r3, r3, #3164	; 0xc5c
 8000ef8:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 8000efc:	f102 0210 	add.w	r2, r2, #16
 8000f00:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 8000f04:	e010      	b.n	8000f28 <main+0x798>
 8000f06:	bf00      	nop
 8000f08:	08005a00 	.word	0x08005a00
 8000f0c:	08005a08 	.word	0x08005a08
 8000f10:	080057dc 	.word	0x080057dc
 8000f14:	080057e0 	.word	0x080057e0
 8000f18:	08005de4 	.word	0x08005de4
 8000f1c:	08005dfc 	.word	0x08005dfc
 8000f20:	08005a1c 	.word	0x08005a1c
 8000f24:	08005a28 	.word	0x08005a28
 8000f28:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 8000f2c:	4615      	mov	r5, r2
 8000f2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f32:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f36:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[11] = LTE_bearer_3;
 8000f3a:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8000f3e:	f6a3 435c 	subw	r3, r3, #3164	; 0xc5c
 8000f42:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 8000f46:	f102 0210 	add.w	r2, r2, #16
 8000f4a:	f5a2 72b2 	sub.w	r2, r2, #356	; 0x164
 8000f4e:	f503 7484 	add.w	r4, r3, #264	; 0x108
 8000f52:	4615      	mov	r5, r2
 8000f54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f58:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f5c:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[12] = LTE_set_dns;
 8000f60:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8000f64:	f6a3 435c 	subw	r3, r3, #3164	; 0xc5c
 8000f68:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 8000f6c:	f102 0210 	add.w	r2, r2, #16
 8000f70:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8000f74:	f503 7490 	add.w	r4, r3, #288	; 0x120
 8000f78:	4615      	mov	r5, r2
 8000f7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f7e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f82:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[13] = LTE_get_position;
 8000f86:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8000f8a:	f6a3 435c 	subw	r3, r3, #3164	; 0xc5c
 8000f8e:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 8000f92:	f102 0210 	add.w	r2, r2, #16
 8000f96:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000f9a:	f503 749c 	add.w	r4, r3, #312	; 0x138
 8000f9e:	4615      	mov	r5, r2
 8000fa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fa4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fa8:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[14] = LTE_get_time;
 8000fac:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8000fb0:	f6a3 435c 	subw	r3, r3, #3164	; 0xc5c
 8000fb4:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 8000fb8:	f102 0210 	add.w	r2, r2, #16
 8000fbc:	f5a2 7215 	sub.w	r2, r2, #596	; 0x254
 8000fc0:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 8000fc4:	4615      	mov	r5, r2
 8000fc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fca:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fce:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[15] = LTE_ftp_quit;
 8000fd2:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8000fd6:	f6a3 435c 	subw	r3, r3, #3164	; 0xc5c
 8000fda:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 8000fde:	f102 0210 	add.w	r2, r2, #16
 8000fe2:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8000fe6:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 8000fea:	4615      	mov	r5, r2
 8000fec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ff0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ff4:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[16] = LTE_ftp_bearer;
 8000ff8:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8000ffc:	f6a3 435c 	subw	r3, r3, #3164	; 0xc5c
 8001000:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 8001004:	f102 0210 	add.w	r2, r2, #16
 8001008:	f5a2 72ca 	sub.w	r2, r2, #404	; 0x194
 800100c:	f503 74c0 	add.w	r4, r3, #384	; 0x180
 8001010:	4615      	mov	r5, r2
 8001012:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001014:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001016:	e895 0003 	ldmia.w	r5, {r0, r1}
 800101a:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[17] = LTE_ftp_type_binary;
 800101e:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8001022:	f6a3 435c 	subw	r3, r3, #3164	; 0xc5c
 8001026:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 800102a:	f102 0210 	add.w	r2, r2, #16
 800102e:	f5a2 72d6 	sub.w	r2, r2, #428	; 0x1ac
 8001032:	f503 74cc 	add.w	r4, r3, #408	; 0x198
 8001036:	4615      	mov	r5, r2
 8001038:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800103a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800103c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001040:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[18] = LTE_ftp_append;
 8001044:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8001048:	f6a3 435c 	subw	r3, r3, #3164	; 0xc5c
 800104c:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 8001050:	f102 0210 	add.w	r2, r2, #16
 8001054:	f5a2 72e2 	sub.w	r2, r2, #452	; 0x1c4
 8001058:	f503 74d8 	add.w	r4, r3, #432	; 0x1b0
 800105c:	4615      	mov	r5, r2
 800105e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001060:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001062:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001066:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[19] = LTE_ftp_ip;
 800106a:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800106e:	f6a3 435c 	subw	r3, r3, #3164	; 0xc5c
 8001072:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 8001076:	f102 0210 	add.w	r2, r2, #16
 800107a:	f5a2 72ee 	sub.w	r2, r2, #476	; 0x1dc
 800107e:	f503 74e4 	add.w	r4, r3, #456	; 0x1c8
 8001082:	4615      	mov	r5, r2
 8001084:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001086:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001088:	e895 0003 	ldmia.w	r5, {r0, r1}
 800108c:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[20] = LTE_ftp_user;
 8001090:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8001094:	f6a3 435c 	subw	r3, r3, #3164	; 0xc5c
 8001098:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 800109c:	f102 0210 	add.w	r2, r2, #16
 80010a0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80010a4:	f503 74f0 	add.w	r4, r3, #480	; 0x1e0
 80010a8:	4615      	mov	r5, r2
 80010aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010b2:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[21] = LTE_ftp_pass;
 80010b6:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 80010ba:	f6a3 435c 	subw	r3, r3, #3164	; 0xc5c
 80010be:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 80010c2:	f102 0210 	add.w	r2, r2, #16
 80010c6:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 80010ca:	f503 74fc 	add.w	r4, r3, #504	; 0x1f8
 80010ce:	4615      	mov	r5, r2
 80010d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010d4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010d8:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[22] = LTE_ftp_port;
 80010dc:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 80010e0:	f6a3 435c 	subw	r3, r3, #3164	; 0xc5c
 80010e4:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 80010e8:	f102 0210 	add.w	r2, r2, #16
 80010ec:	f5a2 7209 	sub.w	r2, r2, #548	; 0x224
 80010f0:	f503 7404 	add.w	r4, r3, #528	; 0x210
 80010f4:	4615      	mov	r5, r2
 80010f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010fa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010fe:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[23] = LTE_ftp_path;
 8001102:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8001106:	f6a3 435c 	subw	r3, r3, #3164	; 0xc5c
 800110a:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 800110e:	f102 0210 	add.w	r2, r2, #16
 8001112:	f5a2 720f 	sub.w	r2, r2, #572	; 0x23c
 8001116:	f503 740a 	add.w	r4, r3, #552	; 0x228
 800111a:	4615      	mov	r5, r2
 800111c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800111e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001120:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001124:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[24] = LTE_ftp_filename;
 8001128:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800112c:	f6a3 435c 	subw	r3, r3, #3164	; 0xc5c
 8001130:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 8001134:	f102 0210 	add.w	r2, r2, #16
 8001138:	f5a2 7279 	sub.w	r2, r2, #996	; 0x3e4
 800113c:	f503 7410 	add.w	r4, r3, #576	; 0x240
 8001140:	4615      	mov	r5, r2
 8001142:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001144:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001146:	e895 0003 	ldmia.w	r5, {r0, r1}
 800114a:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[25] = LTE_ftp_start_put;
 800114e:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8001152:	f6a3 435c 	subw	r3, r3, #3164	; 0xc5c
 8001156:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 800115a:	f102 0210 	add.w	r2, r2, #16
 800115e:	f5a2 727f 	sub.w	r2, r2, #1020	; 0x3fc
 8001162:	f503 7416 	add.w	r4, r3, #600	; 0x258
 8001166:	4615      	mov	r5, r2
 8001168:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800116a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800116c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001170:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[26] = LTE_ftp_put_data_size;
 8001174:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8001178:	f6a3 435c 	subw	r3, r3, #3164	; 0xc5c
 800117c:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 8001180:	f102 0210 	add.w	r2, r2, #16
 8001184:	f2a2 4214 	subw	r2, r2, #1044	; 0x414
 8001188:	f503 741c 	add.w	r4, r3, #624	; 0x270
 800118c:	4615      	mov	r5, r2
 800118e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001190:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001192:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001196:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[27] = LTE_ftp_put_data;
 800119a:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800119e:	f6a3 435c 	subw	r3, r3, #3164	; 0xc5c
 80011a2:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 80011a6:	f102 0210 	add.w	r2, r2, #16
 80011aa:	f2a2 422c 	subw	r2, r2, #1068	; 0x42c
 80011ae:	f503 7422 	add.w	r4, r3, #648	; 0x288
 80011b2:	4615      	mov	r5, r2
 80011b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011b8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80011bc:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[28] = LTE_ftp_end_put;
 80011c0:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 80011c4:	f6a3 435c 	subw	r3, r3, #3164	; 0xc5c
 80011c8:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 80011cc:	f102 0210 	add.w	r2, r2, #16
 80011d0:	f2a2 4244 	subw	r2, r2, #1092	; 0x444
 80011d4:	f503 7428 	add.w	r4, r3, #672	; 0x2a0
 80011d8:	4615      	mov	r5, r2
 80011da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011de:	e895 0003 	ldmia.w	r5, {r0, r1}
 80011e2:	e884 0003 	stmia.w	r4, {r0, r1}

	action_list[29] = LTE_get_position;
 80011e6:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 80011ea:	f6a3 435c 	subw	r3, r3, #3164	; 0xc5c
 80011ee:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 80011f2:	f102 0210 	add.w	r2, r2, #16
 80011f6:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80011fa:	f503 742e 	add.w	r4, r3, #696	; 0x2b8
 80011fe:	4615      	mov	r5, r2
 8001200:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001202:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001204:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001208:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[30] = LTE_get_time;
 800120c:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8001210:	f6a3 435c 	subw	r3, r3, #3164	; 0xc5c
 8001214:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 8001218:	f102 0210 	add.w	r2, r2, #16
 800121c:	f5a2 7215 	sub.w	r2, r2, #596	; 0x254
 8001220:	f503 7434 	add.w	r4, r3, #720	; 0x2d0
 8001224:	4615      	mov	r5, r2
 8001226:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001228:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800122a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800122e:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[31] = LTE_ftp_start_put;
 8001232:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8001236:	f6a3 435c 	subw	r3, r3, #3164	; 0xc5c
 800123a:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 800123e:	f102 0210 	add.w	r2, r2, #16
 8001242:	f5a2 727f 	sub.w	r2, r2, #1020	; 0x3fc
 8001246:	f503 743a 	add.w	r4, r3, #744	; 0x2e8
 800124a:	4615      	mov	r5, r2
 800124c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800124e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001250:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001254:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[32] = LTE_ftp_put_data_size;
 8001258:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800125c:	f6a3 435c 	subw	r3, r3, #3164	; 0xc5c
 8001260:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 8001264:	f102 0210 	add.w	r2, r2, #16
 8001268:	f2a2 4214 	subw	r2, r2, #1044	; 0x414
 800126c:	f503 7440 	add.w	r4, r3, #768	; 0x300
 8001270:	4615      	mov	r5, r2
 8001272:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001274:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001276:	e895 0003 	ldmia.w	r5, {r0, r1}
 800127a:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[33] = LTE_ftp_put_data;
 800127e:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8001282:	f6a3 435c 	subw	r3, r3, #3164	; 0xc5c
 8001286:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 800128a:	f102 0210 	add.w	r2, r2, #16
 800128e:	f2a2 422c 	subw	r2, r2, #1068	; 0x42c
 8001292:	f503 7446 	add.w	r4, r3, #792	; 0x318
 8001296:	4615      	mov	r5, r2
 8001298:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800129a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800129c:	e895 0003 	ldmia.w	r5, {r0, r1}
 80012a0:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[34] = LTE_ftp_end_put;
 80012a4:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 80012a8:	f6a3 435c 	subw	r3, r3, #3164	; 0xc5c
 80012ac:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 80012b0:	f102 0210 	add.w	r2, r2, #16
 80012b4:	f2a2 4244 	subw	r2, r2, #1092	; 0x444
 80012b8:	f503 744c 	add.w	r4, r3, #816	; 0x330
 80012bc:	4615      	mov	r5, r2
 80012be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012c2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80012c6:	e884 0003 	stmia.w	r4, {r0, r1}

	action_list[35] = LTE_reset_action;
 80012ca:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 80012ce:	f6a3 435c 	subw	r3, r3, #3164	; 0xc5c
 80012d2:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 80012d6:	f102 0210 	add.w	r2, r2, #16
 80012da:	f2a2 4274 	subw	r2, r2, #1140	; 0x474
 80012de:	f503 7452 	add.w	r4, r3, #840	; 0x348
 80012e2:	4615      	mov	r5, r2
 80012e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012e8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80012ec:	e884 0003 	stmia.w	r4, {r0, r1}

	//uint8_t ftp_transfer_active = 0;



	uint8_t startup = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 80012f6:	f102 020c 	add.w	r2, r2, #12
 80012fa:	7013      	strb	r3, [r2, #0]

	for(int i = 0; i< BUFFER_SIZE; i++){
 80012fc:	2300      	movs	r3, #0
 80012fe:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 8001302:	f102 0208 	add.w	r2, r2, #8
 8001306:	6013      	str	r3, [r2, #0]
 8001308:	e013      	b.n	8001332 <main+0xba2>
		ParseBuffer[i] ='\0';
 800130a:	4acd      	ldr	r2, [pc, #820]	; (8001640 <main+0xeb0>)
 800130c:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8001310:	f103 0308 	add.w	r3, r3, #8
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4413      	add	r3, r2
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i< BUFFER_SIZE; i++){
 800131c:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8001320:	f103 0308 	add.w	r3, r3, #8
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	3301      	adds	r3, #1
 8001328:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 800132c:	f102 0208 	add.w	r2, r2, #8
 8001330:	6013      	str	r3, [r2, #0]
 8001332:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8001336:	f103 0308 	add.w	r3, r3, #8
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2bff      	cmp	r3, #255	; 0xff
 800133e:	dde4      	ble.n	800130a <main+0xb7a>
	}

	int resolution = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 8001346:	f102 0204 	add.w	r2, r2, #4
 800134a:	6013      	str	r3, [r2, #0]

	while (1)
	{

		if(current_action > last_action){
 800134c:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8001350:	f103 030f 	add.w	r3, r3, #15
 8001354:	781a      	ldrb	r2, [r3, #0]
 8001356:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 800135a:	f103 030f 	add.w	r3, r3, #15
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	429a      	cmp	r2, r3
 8001362:	d91d      	bls.n	80013a0 <main+0xc10>
			for(int i = 0; i< BUFFER_SIZE; i++){
 8001364:	2300      	movs	r3, #0
 8001366:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 800136a:	6013      	str	r3, [r2, #0]
 800136c:	e00d      	b.n	800138a <main+0xbfa>
				ParseBuffer[i] ='\0';
 800136e:	4ab4      	ldr	r2, [pc, #720]	; (8001640 <main+0xeb0>)
 8001370:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4413      	add	r3, r2
 8001378:	2200      	movs	r2, #0
 800137a:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i< BUFFER_SIZE; i++){
 800137c:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	3301      	adds	r3, #1
 8001384:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2bff      	cmp	r3, #255	; 0xff
 8001392:	ddec      	ble.n	800136e <main+0xbde>
			}
			current_action = 29;
 8001394:	231d      	movs	r3, #29
 8001396:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 800139a:	f102 020f 	add.w	r2, r2, #15
 800139e:	7013      	strb	r3, [r2, #0]
		}


		if((resolution % 50) == 0){
 80013a0:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 80013a4:	f103 0304 	add.w	r3, r3, #4
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	4ba6      	ldr	r3, [pc, #664]	; (8001644 <main+0xeb4>)
 80013ac:	fb83 1302 	smull	r1, r3, r3, r2
 80013b0:	1119      	asrs	r1, r3, #4
 80013b2:	17d3      	asrs	r3, r2, #31
 80013b4:	1acb      	subs	r3, r1, r3
 80013b6:	2132      	movs	r1, #50	; 0x32
 80013b8:	fb01 f303 	mul.w	r3, r1, r3
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d112      	bne.n	80013e8 <main+0xc58>
			printf("TRYING: >>%s<<\r\n", action_list[current_action].cmd);
 80013c2:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 80013c6:	f103 030f 	add.w	r3, r3, #15
 80013ca:	781a      	ldrb	r2, [r3, #0]
 80013cc:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 80013d0:	f6a3 415c 	subw	r1, r3, #3164	; 0xc5c
 80013d4:	4613      	mov	r3, r2
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	4413      	add	r3, r2
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	440b      	add	r3, r1
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4619      	mov	r1, r3
 80013e2:	4899      	ldr	r0, [pc, #612]	; (8001648 <main+0xeb8>)
 80013e4:	f002 ffc6 	bl	8004374 <iprintf>
		}

		enum State state = Do_Action(action_list[current_action], (uint8_t*)ParseBuffer);
 80013e8:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 80013ec:	f103 030f 	add.w	r3, r3, #15
 80013f0:	781a      	ldrb	r2, [r3, #0]
 80013f2:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 80013f6:	f6a3 415c 	subw	r1, r3, #3164	; 0xc5c
 80013fa:	4613      	mov	r3, r2
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	4413      	add	r3, r2
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	440b      	add	r3, r1
 8001404:	4a8e      	ldr	r2, [pc, #568]	; (8001640 <main+0xeb0>)
 8001406:	9202      	str	r2, [sp, #8]
 8001408:	466c      	mov	r4, sp
 800140a:	f103 0210 	add.w	r2, r3, #16
 800140e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001412:	e884 0003 	stmia.w	r4, {r0, r1}
 8001416:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001418:	f000 fd5c 	bl	8001ed4 <Do_Action>
 800141c:	4603      	mov	r3, r0
 800141e:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 8001422:	f102 020e 	add.w	r2, r2, #14
 8001426:	7013      	strb	r3, [r2, #0]
		resolution++;
 8001428:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 800142c:	f103 0304 	add.w	r3, r3, #4
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	3301      	adds	r3, #1
 8001434:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 8001438:	f102 0204 	add.w	r2, r2, #4
 800143c:	6013      	str	r3, [r2, #0]

		switch (state){
 800143e:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 8001442:	f103 030e 	add.w	r3, r3, #14
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b05      	cmp	r3, #5
 800144a:	f200 8161 	bhi.w	8001710 <main+0xf80>
 800144e:	a201      	add	r2, pc, #4	; (adr r2, 8001454 <main+0xcc4>)
 8001450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001454:	0800153d 	.word	0x0800153d
 8001458:	08001711 	.word	0x08001711
 800145c:	0800146d 	.word	0x0800146d
 8001460:	08001665 	.word	0x08001665
 8001464:	08001561 	.word	0x08001561
 8001468:	08001711 	.word	0x08001711
		case GOOD_ANSWER:
			printf("%s - %s\r\n", action_list[current_action].cmd, action_list[current_action].good_answer);
 800146c:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8001470:	f103 030f 	add.w	r3, r3, #15
 8001474:	781a      	ldrb	r2, [r3, #0]
 8001476:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800147a:	f6a3 415c 	subw	r1, r3, #3164	; 0xc5c
 800147e:	4613      	mov	r3, r2
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	4413      	add	r3, r2
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	440b      	add	r3, r1
 8001488:	6818      	ldr	r0, [r3, #0]
 800148a:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 800148e:	f103 030f 	add.w	r3, r3, #15
 8001492:	781a      	ldrb	r2, [r3, #0]
 8001494:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8001498:	f6a3 415c 	subw	r1, r3, #3164	; 0xc5c
 800149c:	4613      	mov	r3, r2
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	4413      	add	r3, r2
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	440b      	add	r3, r1
 80014a6:	3304      	adds	r3, #4
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	461a      	mov	r2, r3
 80014ac:	4601      	mov	r1, r0
 80014ae:	4867      	ldr	r0, [pc, #412]	; (800164c <main+0xebc>)
 80014b0:	f002 ff60 	bl	8004374 <iprintf>
			printf("\tREPLY: >>%s<<\r\n", (char*)ParseBuffer);
 80014b4:	4962      	ldr	r1, [pc, #392]	; (8001640 <main+0xeb0>)
 80014b6:	4866      	ldr	r0, [pc, #408]	; (8001650 <main+0xec0>)
 80014b8:	f002 ff5c 	bl	8004374 <iprintf>
			Do_Action(LTE_reset_action, (uint8_t*)ParseBuffer);
 80014bc:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 80014c0:	f103 0310 	add.w	r3, r3, #16
 80014c4:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 80014c8:	4a5d      	ldr	r2, [pc, #372]	; (8001640 <main+0xeb0>)
 80014ca:	9202      	str	r2, [sp, #8]
 80014cc:	466c      	mov	r4, sp
 80014ce:	f103 0210 	add.w	r2, r3, #16
 80014d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014d6:	e884 0003 	stmia.w	r4, {r0, r1}
 80014da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014dc:	f000 fcfa 	bl	8001ed4 <Do_Action>
			current_action++;
 80014e0:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 80014e4:	f103 030f 	add.w	r3, r3, #15
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	3301      	adds	r3, #1
 80014ec:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 80014f0:	f102 020f 	add.w	r2, r2, #15
 80014f4:	7013      	strb	r3, [r2, #0]
			HAL_Delay(action_list[current_action].timeout / 2);
 80014f6:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 80014fa:	f103 030f 	add.w	r3, r3, #15
 80014fe:	781a      	ldrb	r2, [r3, #0]
 8001500:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8001504:	f6a3 415c 	subw	r1, r3, #3164	; 0xc5c
 8001508:	4613      	mov	r3, r2
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	4413      	add	r3, r2
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	440b      	add	r3, r1
 8001512:	3308      	adds	r3, #8
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	0fda      	lsrs	r2, r3, #31
 8001518:	4413      	add	r3, r2
 800151a:	105b      	asrs	r3, r3, #1
 800151c:	4618      	mov	r0, r3
 800151e:	f001 f875 	bl	800260c <HAL_Delay>
			startup = 5;
 8001522:	2305      	movs	r3, #5
 8001524:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 8001528:	f102 020c 	add.w	r2, r2, #12
 800152c:	7013      	strb	r3, [r2, #0]
			resolution = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 8001534:	f102 0204 	add.w	r2, r2, #4
 8001538:	6013      	str	r3, [r2, #0]
			break;
 800153a:	e0ea      	b.n	8001712 <main+0xf82>
		case READY:
			//printf("%s - READY\r\n", action_list[current_action].cmd);
			//printf("BUFFER: >>%s<<\r\n", (char*)ParseBuffer);
			current_action++;
 800153c:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8001540:	f103 030f 	add.w	r3, r3, #15
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	3301      	adds	r3, #1
 8001548:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 800154c:	f102 020f 	add.w	r2, r2, #15
 8001550:	7013      	strb	r3, [r2, #0]
			resolution = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 8001558:	f102 0204 	add.w	r2, r2, #4
 800155c:	6013      	str	r3, [r2, #0]
			break;
 800155e:	e0d8      	b.n	8001712 <main+0xf82>
		case TIMEOUT:
			printf("%s - Timeout\r\n", action_list[current_action].cmd);
 8001560:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8001564:	f103 030f 	add.w	r3, r3, #15
 8001568:	781a      	ldrb	r2, [r3, #0]
 800156a:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800156e:	f6a3 415c 	subw	r1, r3, #3164	; 0xc5c
 8001572:	4613      	mov	r3, r2
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	4413      	add	r3, r2
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	440b      	add	r3, r1
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4619      	mov	r1, r3
 8001580:	4834      	ldr	r0, [pc, #208]	; (8001654 <main+0xec4>)
 8001582:	f002 fef7 	bl	8004374 <iprintf>
			if(startup < 2){
 8001586:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 800158a:	f103 030c 	add.w	r3, r3, #12
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d822      	bhi.n	80015da <main+0xe4a>
				printf("INIT\r\n");
 8001594:	4830      	ldr	r0, [pc, #192]	; (8001658 <main+0xec8>)
 8001596:	f002 ff73 	bl	8004480 <puts>
				printf("TURN ON\r\n");
 800159a:	4830      	ldr	r0, [pc, #192]	; (800165c <main+0xecc>)
 800159c:	f002 ff70 	bl	8004480 <puts>
				HAL_GPIO_WritePin(GPIOA,  GPIO_PIN_6, GPIO_PIN_SET);
 80015a0:	2201      	movs	r2, #1
 80015a2:	2140      	movs	r1, #64	; 0x40
 80015a4:	482e      	ldr	r0, [pc, #184]	; (8001660 <main+0xed0>)
 80015a6:	f001 fbf5 	bl	8002d94 <HAL_GPIO_WritePin>
				HAL_Delay(1500);
 80015aa:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80015ae:	f001 f82d 	bl	800260c <HAL_Delay>
				HAL_GPIO_WritePin(GPIOA,  GPIO_PIN_6, GPIO_PIN_RESET);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2140      	movs	r1, #64	; 0x40
 80015b6:	482a      	ldr	r0, [pc, #168]	; (8001660 <main+0xed0>)
 80015b8:	f001 fbec 	bl	8002d94 <HAL_GPIO_WritePin>
				HAL_Delay(5000);
 80015bc:	f241 3088 	movw	r0, #5000	; 0x1388
 80015c0:	f001 f824 	bl	800260c <HAL_Delay>
				startup++;
 80015c4:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 80015c8:	f103 030c 	add.w	r3, r3, #12
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	3301      	adds	r3, #1
 80015d0:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 80015d4:	f102 020c 	add.w	r2, r2, #12
 80015d8:	7013      	strb	r3, [r2, #0]
			}
			Do_Action(LTE_reset_action, (uint8_t*)ParseBuffer);
 80015da:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 80015de:	f103 0310 	add.w	r3, r3, #16
 80015e2:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 80015e6:	4a16      	ldr	r2, [pc, #88]	; (8001640 <main+0xeb0>)
 80015e8:	9202      	str	r2, [sp, #8]
 80015ea:	466c      	mov	r4, sp
 80015ec:	f103 0210 	add.w	r2, r3, #16
 80015f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015f4:	e884 0003 	stmia.w	r4, {r0, r1}
 80015f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015fa:	f000 fc6b 	bl	8001ed4 <Do_Action>

			HAL_Delay(action_list[current_action].timeout);
 80015fe:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8001602:	f103 030f 	add.w	r3, r3, #15
 8001606:	781a      	ldrb	r2, [r3, #0]
 8001608:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800160c:	f6a3 415c 	subw	r1, r3, #3164	; 0xc5c
 8001610:	4613      	mov	r3, r2
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	4413      	add	r3, r2
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	440b      	add	r3, r1
 800161a:	3308      	adds	r3, #8
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f000 fff4 	bl	800260c <HAL_Delay>
			current_action=0;
 8001624:	2300      	movs	r3, #0
 8001626:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 800162a:	f102 020f 	add.w	r2, r2, #15
 800162e:	7013      	strb	r3, [r2, #0]
			resolution = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 8001636:	f102 0204 	add.w	r2, r2, #4
 800163a:	6013      	str	r3, [r2, #0]
			break;
 800163c:	e069      	b.n	8001712 <main+0xf82>
 800163e:	bf00      	nop
 8001640:	20000dfc 	.word	0x20000dfc
 8001644:	51eb851f 	.word	0x51eb851f
 8001648:	08005a38 	.word	0x08005a38
 800164c:	08005a4c 	.word	0x08005a4c
 8001650:	08005a58 	.word	0x08005a58
 8001654:	08005a6c 	.word	0x08005a6c
 8001658:	08005a7c 	.word	0x08005a7c
 800165c:	08005a84 	.word	0x08005a84
 8001660:	40020000 	.word	0x40020000
		case BAD_ANSWER:
			printf("%s - %s\r\n", action_list[current_action].cmd, action_list[current_action].bad_answer);
 8001664:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8001668:	f103 030f 	add.w	r3, r3, #15
 800166c:	781a      	ldrb	r2, [r3, #0]
 800166e:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8001672:	f6a3 415c 	subw	r1, r3, #3164	; 0xc5c
 8001676:	4613      	mov	r3, r2
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	4413      	add	r3, r2
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	440b      	add	r3, r1
 8001680:	6818      	ldr	r0, [r3, #0]
 8001682:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8001686:	f103 030f 	add.w	r3, r3, #15
 800168a:	781a      	ldrb	r2, [r3, #0]
 800168c:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8001690:	f6a3 415c 	subw	r1, r3, #3164	; 0xc5c
 8001694:	4613      	mov	r3, r2
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	4413      	add	r3, r2
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	440b      	add	r3, r1
 800169e:	330c      	adds	r3, #12
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	461a      	mov	r2, r3
 80016a4:	4601      	mov	r1, r0
 80016a6:	48c8      	ldr	r0, [pc, #800]	; (80019c8 <main+0x1238>)
 80016a8:	f002 fe64 	bl	8004374 <iprintf>
			Do_Action(LTE_reset_action, (uint8_t*)ParseBuffer);
 80016ac:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 80016b0:	f103 0310 	add.w	r3, r3, #16
 80016b4:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 80016b8:	4ac4      	ldr	r2, [pc, #784]	; (80019cc <main+0x123c>)
 80016ba:	9202      	str	r2, [sp, #8]
 80016bc:	466c      	mov	r4, sp
 80016be:	f103 0210 	add.w	r2, r3, #16
 80016c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016c6:	e884 0003 	stmia.w	r4, {r0, r1}
 80016ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016cc:	f000 fc02 	bl	8001ed4 <Do_Action>
			HAL_Delay(action_list[current_action].timeout);
 80016d0:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 80016d4:	f103 030f 	add.w	r3, r3, #15
 80016d8:	781a      	ldrb	r2, [r3, #0]
 80016da:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 80016de:	f6a3 415c 	subw	r1, r3, #3164	; 0xc5c
 80016e2:	4613      	mov	r3, r2
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	4413      	add	r3, r2
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	440b      	add	r3, r1
 80016ec:	3308      	adds	r3, #8
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f000 ff8b 	bl	800260c <HAL_Delay>
			startup = 5;
 80016f6:	2305      	movs	r3, #5
 80016f8:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 80016fc:	f102 020c 	add.w	r2, r2, #12
 8001700:	7013      	strb	r3, [r2, #0]
			resolution = 0;
 8001702:	2300      	movs	r3, #0
 8001704:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 8001708:	f102 0204 	add.w	r2, r2, #4
 800170c:	6013      	str	r3, [r2, #0]
			break;
 800170e:	e000      	b.n	8001712 <main+0xf82>
		case FTP_ACTIVE:

			break;
		default:
			break;
 8001710:	bf00      	nop
		};

		if(UARTDMA_IsDataReady(&huartdma6))
 8001712:	48af      	ldr	r0, [pc, #700]	; (80019d0 <main+0x1240>)
 8001714:	f7fe ffab 	bl	800066e <UARTDMA_IsDataReady>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	f000 8217 	beq.w	8001b4e <main+0x13be>
		{
			UARTDMA_GetLineFromBuffer(&huartdma6, ParseBuffer);
 8001720:	49aa      	ldr	r1, [pc, #680]	; (80019cc <main+0x123c>)
 8001722:	48ab      	ldr	r0, [pc, #684]	; (80019d0 <main+0x1240>)
 8001724:	f7fe ffb4 	bl	8000690 <UARTDMA_GetLineFromBuffer>
			printf("\tBUFFER: >>%s<<\r\n", (char*)ParseBuffer);
 8001728:	49a8      	ldr	r1, [pc, #672]	; (80019cc <main+0x123c>)
 800172a:	48aa      	ldr	r0, [pc, #680]	; (80019d4 <main+0x1244>)
 800172c:	f002 fe22 	bl	8004374 <iprintf>

			// if message is time, update FTP filename
			char* ptr;
			if((ptr = strstr((char*)ParseBuffer, "+CCLK: ")) != NULL){
 8001730:	49a9      	ldr	r1, [pc, #676]	; (80019d8 <main+0x1248>)
 8001732:	48a6      	ldr	r0, [pc, #664]	; (80019cc <main+0x123c>)
 8001734:	f002 ff2f 	bl	8004596 <strstr>
 8001738:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 800173c:	f103 0308 	add.w	r3, r3, #8
 8001740:	6018      	str	r0, [r3, #0]
 8001742:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 8001746:	f103 0308 	add.w	r3, r3, #8
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 8157 	beq.w	8001a00 <main+0x1270>
				printf("\t\tTIME: %s\r\n", (char*)ParseBuffer);
 8001752:	499e      	ldr	r1, [pc, #632]	; (80019cc <main+0x123c>)
 8001754:	48a1      	ldr	r0, [pc, #644]	; (80019dc <main+0x124c>)
 8001756:	f002 fe0d 	bl	8004374 <iprintf>

				strcat(gps_data_latest,ParseBuffer); // append GPS data with LTE time
 800175a:	f507 53cb 	add.w	r3, r7, #6496	; 0x1960
 800175e:	f103 0318 	add.w	r3, r3, #24
 8001762:	499a      	ldr	r1, [pc, #616]	; (80019cc <main+0x123c>)
 8001764:	4618      	mov	r0, r3
 8001766:	f002 feff 	bl	8004568 <strcat>
				//strcat(gps_data_latest,"\r\n");

				printf("GPS BUFFER AT TIME: %s\r\n", gps_data_latest);
 800176a:	f507 53cb 	add.w	r3, r7, #6496	; 0x1960
 800176e:	f103 0318 	add.w	r3, r3, #24
 8001772:	4619      	mov	r1, r3
 8001774:	489a      	ldr	r0, [pc, #616]	; (80019e0 <main+0x1250>)
 8001776:	f002 fdfd 	bl	8004374 <iprintf>

				if(filename_time_set == 0){ // it's the first time I receive, and I will set FTP file name based on it
 800177a:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 800177e:	f103 030e 	add.w	r3, r3, #14
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	f040 80ac 	bne.w	80018e2 <main+0x1152>


					filename_time_set = 1; // do not repeat
 800178a:	2301      	movs	r3, #1
 800178c:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 8001790:	f102 020e 	add.w	r2, r2, #14
 8001794:	7013      	strb	r3, [r2, #0]

					char* timeString = ptr+8;
 8001796:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 800179a:	f103 0308 	add.w	r3, r3, #8
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	3308      	adds	r3, #8
 80017a2:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 80017a6:	f102 0204 	add.w	r2, r2, #4
 80017aa:	6013      	str	r3, [r2, #0]

					for (int i = 0; i < strlen(timeString); i++)
 80017ac:	2300      	movs	r3, #0
 80017ae:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 80017b2:	f102 021c 	add.w	r2, r2, #28
 80017b6:	6013      	str	r3, [r2, #0]
 80017b8:	e047      	b.n	800184a <main+0x10ba>
					{
						if ((timeString[i] > '9') || (timeString[i] < '0')){
 80017ba:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 80017be:	f103 031c 	add.w	r3, r3, #28
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 80017c8:	f102 0204 	add.w	r2, r2, #4
 80017cc:	6812      	ldr	r2, [r2, #0]
 80017ce:	4413      	add	r3, r2
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b39      	cmp	r3, #57	; 0x39
 80017d4:	d80d      	bhi.n	80017f2 <main+0x1062>
 80017d6:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 80017da:	f103 031c 	add.w	r3, r3, #28
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 80017e4:	f102 0204 	add.w	r2, r2, #4
 80017e8:	6812      	ldr	r2, [r2, #0]
 80017ea:	4413      	add	r3, r2
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b2f      	cmp	r3, #47	; 0x2f
 80017f0:	d80c      	bhi.n	800180c <main+0x107c>
							timeString[i] = '_';
 80017f2:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 80017f6:	f103 031c 	add.w	r3, r3, #28
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 8001800:	f102 0204 	add.w	r2, r2, #4
 8001804:	6812      	ldr	r2, [r2, #0]
 8001806:	4413      	add	r3, r2
 8001808:	225f      	movs	r2, #95	; 0x5f
 800180a:	701a      	strb	r2, [r3, #0]
						}
						if(i>19){
 800180c:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 8001810:	f103 031c 	add.w	r3, r3, #28
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b13      	cmp	r3, #19
 8001818:	dd0c      	ble.n	8001834 <main+0x10a4>
							timeString[i] = '\0';
 800181a:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 800181e:	f103 031c 	add.w	r3, r3, #28
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 8001828:	f102 0204 	add.w	r2, r2, #4
 800182c:	6812      	ldr	r2, [r2, #0]
 800182e:	4413      	add	r3, r2
 8001830:	2200      	movs	r2, #0
 8001832:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < strlen(timeString); i++)
 8001834:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 8001838:	f103 031c 	add.w	r3, r3, #28
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	3301      	adds	r3, #1
 8001840:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 8001844:	f102 021c 	add.w	r2, r2, #28
 8001848:	6013      	str	r3, [r2, #0]
 800184a:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 800184e:	f103 0304 	add.w	r3, r3, #4
 8001852:	6818      	ldr	r0, [r3, #0]
 8001854:	f7fe fc9c 	bl	8000190 <strlen>
 8001858:	4602      	mov	r2, r0
 800185a:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 800185e:	f103 031c 	add.w	r3, r3, #28
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	429a      	cmp	r2, r3
 8001866:	d8a8      	bhi.n	80017ba <main+0x102a>
						}
					}

					char fileNameLocal[60] = "AT+FTPPUTNAME=\"";
 8001868:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800186c:	f6a3 44c8 	subw	r4, r3, #3272	; 0xcc8
 8001870:	4b5c      	ldr	r3, [pc, #368]	; (80019e4 <main+0x1254>)
 8001872:	4625      	mov	r5, r4
 8001874:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001876:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800187a:	f104 0310 	add.w	r3, r4, #16
 800187e:	222c      	movs	r2, #44	; 0x2c
 8001880:	2100      	movs	r1, #0
 8001882:	4618      	mov	r0, r3
 8001884:	f002 fd6e 	bl	8004364 <memset>
					strcat(fileNameLocal, timeString);
 8001888:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800188c:	3b08      	subs	r3, #8
 800188e:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 8001892:	f102 0204 	add.w	r2, r2, #4
 8001896:	6811      	ldr	r1, [r2, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f002 fe65 	bl	8004568 <strcat>
					strcat(fileNameLocal, ".txt\"\r\n");
 800189e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80018a2:	3b08      	subs	r3, #8
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7fe fc73 	bl	8000190 <strlen>
 80018aa:	4603      	mov	r3, r0
 80018ac:	461a      	mov	r2, r3
 80018ae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80018b2:	3b08      	subs	r3, #8
 80018b4:	4413      	add	r3, r2
 80018b6:	494c      	ldr	r1, [pc, #304]	; (80019e8 <main+0x1258>)
 80018b8:	461a      	mov	r2, r3
 80018ba:	460b      	mov	r3, r1
 80018bc:	cb03      	ldmia	r3!, {r0, r1}
 80018be:	6010      	str	r0, [r2, #0]
 80018c0:	6051      	str	r1, [r2, #4]


					printf("\tFILENAME_TIME_CHANGE: %s\r\n", fileNameLocal);
 80018c2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80018c6:	3b08      	subs	r3, #8
 80018c8:	4619      	mov	r1, r3
 80018ca:	4848      	ldr	r0, [pc, #288]	; (80019ec <main+0x125c>)
 80018cc:	f002 fd52 	bl	8004374 <iprintf>

					strcpy(g_fileName, fileNameLocal);
 80018d0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80018d4:	3b08      	subs	r3, #8
 80018d6:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 80018da:	4619      	mov	r1, r3
 80018dc:	4610      	mov	r0, r2
 80018de:	f002 fe52 	bl	8004586 <strcpy>

				}

				char save[100] = "AT+FTPPUT=2,";
 80018e2:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 80018e6:	f6a3 552c 	subw	r5, r3, #3372	; 0xd2c
 80018ea:	4b41      	ldr	r3, [pc, #260]	; (80019f0 <main+0x1260>)
 80018ec:	462c      	mov	r4, r5
 80018ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018f0:	c407      	stmia	r4!, {r0, r1, r2}
 80018f2:	7023      	strb	r3, [r4, #0]
 80018f4:	f105 030d 	add.w	r3, r5, #13
 80018f8:	2257      	movs	r2, #87	; 0x57
 80018fa:	2100      	movs	r1, #0
 80018fc:	4618      	mov	r0, r3
 80018fe:	f002 fd31 	bl	8004364 <memset>
				char len[5];
				itoa(strlen(gps_data_latest), len, 10);
 8001902:	f507 53cb 	add.w	r3, r7, #6496	; 0x1960
 8001906:	f103 0318 	add.w	r3, r3, #24
 800190a:	4618      	mov	r0, r3
 800190c:	f7fe fc40 	bl	8000190 <strlen>
 8001910:	4603      	mov	r3, r0
 8001912:	4618      	mov	r0, r3
 8001914:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001918:	3b04      	subs	r3, #4
 800191a:	220a      	movs	r2, #10
 800191c:	4619      	mov	r1, r3
 800191e:	f002 fd1f 	bl	8004360 <itoa>
				strcat(save, len);
 8001922:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8001926:	3a04      	subs	r2, #4
 8001928:	f107 0310 	add.w	r3, r7, #16
 800192c:	3b0c      	subs	r3, #12
 800192e:	4611      	mov	r1, r2
 8001930:	4618      	mov	r0, r3
 8001932:	f002 fe19 	bl	8004568 <strcat>
				strcat(save, "\r\n");
 8001936:	f107 0310 	add.w	r3, r7, #16
 800193a:	3b0c      	subs	r3, #12
 800193c:	4618      	mov	r0, r3
 800193e:	f7fe fc27 	bl	8000190 <strlen>
 8001942:	4603      	mov	r3, r0
 8001944:	461a      	mov	r2, r3
 8001946:	f107 0310 	add.w	r3, r7, #16
 800194a:	3b0c      	subs	r3, #12
 800194c:	4413      	add	r3, r2
 800194e:	4a29      	ldr	r2, [pc, #164]	; (80019f4 <main+0x1264>)
 8001950:	8811      	ldrh	r1, [r2, #0]
 8001952:	7892      	ldrb	r2, [r2, #2]
 8001954:	8019      	strh	r1, [r3, #0]
 8001956:	709a      	strb	r2, [r3, #2]

				strcpy(g_dataSize, save);
 8001958:	f107 0310 	add.w	r3, r7, #16
 800195c:	3b0c      	subs	r3, #12
 800195e:	f507 52d4 	add.w	r2, r7, #6784	; 0x1a80
 8001962:	f102 020c 	add.w	r2, r2, #12
 8001966:	4619      	mov	r1, r3
 8001968:	4610      	mov	r0, r2
 800196a:	f002 fe0c 	bl	8004586 <strcpy>

				char save2[100] = "+FTPPUT: 2,";
 800196e:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8001972:	f6a3 43c8 	subw	r3, r3, #3272	; 0xcc8
 8001976:	4a20      	ldr	r2, [pc, #128]	; (80019f8 <main+0x1268>)
 8001978:	461c      	mov	r4, r3
 800197a:	ca07      	ldmia	r2, {r0, r1, r2}
 800197c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001980:	330c      	adds	r3, #12
 8001982:	2258      	movs	r2, #88	; 0x58
 8001984:	2100      	movs	r1, #0
 8001986:	4618      	mov	r0, r3
 8001988:	f002 fcec 	bl	8004364 <memset>
				strcat(save2, len);
 800198c:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8001990:	3a04      	subs	r2, #4
 8001992:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001996:	3b08      	subs	r3, #8
 8001998:	4611      	mov	r1, r2
 800199a:	4618      	mov	r0, r3
 800199c:	f002 fde4 	bl	8004568 <strcat>

				strcpy(g_dataSizeResponse, save2);
 80019a0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80019a4:	3b08      	subs	r3, #8
 80019a6:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 80019aa:	f102 0218 	add.w	r2, r2, #24
 80019ae:	4619      	mov	r1, r3
 80019b0:	4610      	mov	r0, r2
 80019b2:	f002 fde8 	bl	8004586 <strcpy>

				printf("\tASSERT_EXPECTED_REPLY: %s\r\n", g_dataSizeResponse);
 80019b6:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80019ba:	f103 0318 	add.w	r3, r3, #24
 80019be:	4619      	mov	r1, r3
 80019c0:	480e      	ldr	r0, [pc, #56]	; (80019fc <main+0x126c>)
 80019c2:	f002 fcd7 	bl	8004374 <iprintf>
 80019c6:	e4c1      	b.n	800134c <main+0xbbc>
 80019c8:	08005a4c 	.word	0x08005a4c
 80019cc:	20000dfc 	.word	0x20000dfc
 80019d0:	2000008c 	.word	0x2000008c
 80019d4:	08005a90 	.word	0x08005a90
 80019d8:	08005aa4 	.word	0x08005aa4
 80019dc:	08005aac 	.word	0x08005aac
 80019e0:	08005abc 	.word	0x08005abc
 80019e4:	08005e14 	.word	0x08005e14
 80019e8:	08005a00 	.word	0x08005a00
 80019ec:	08005ad8 	.word	0x08005ad8
 80019f0:	08005e50 	.word	0x08005e50
 80019f4:	08005af4 	.word	0x08005af4
 80019f8:	08005eb4 	.word	0x08005eb4
 80019fc:	08005af8 	.word	0x08005af8
				//				}else{
				//					printf("\t\t\t\tCALLOC_FAIL_DATA");
				//				}


			}else if((ptr = strstr((char*)ParseBuffer, "+FTPPUT: 1,1,")) != NULL){ // else, if message is FTP server ready for data response
 8001a00:	4965      	ldr	r1, [pc, #404]	; (8001b98 <main+0x1408>)
 8001a02:	4866      	ldr	r0, [pc, #408]	; (8001b9c <main+0x140c>)
 8001a04:	f002 fdc7 	bl	8004596 <strstr>
 8001a08:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 8001a0c:	f103 0308 	add.w	r3, r3, #8
 8001a10:	6018      	str	r0, [r3, #0]
 8001a12:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 8001a16:	f103 0308 	add.w	r3, r3, #8
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d019      	beq.n	8001a54 <main+0x12c4>
				//ftp_transfer_active = 1;
				transfer_status++;
 8001a20:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8001a24:	f103 030d 	add.w	r3, r3, #13
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 8001a30:	f102 020d 	add.w	r2, r2, #13
 8001a34:	7013      	strb	r3, [r2, #0]
				printf("FTP #: %d\r\n", atoi(ptr+13));
 8001a36:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 8001a3a:	f103 0308 	add.w	r3, r3, #8
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	330d      	adds	r3, #13
 8001a42:	4618      	mov	r0, r3
 8001a44:	f002 fc46 	bl	80042d4 <atoi>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4854      	ldr	r0, [pc, #336]	; (8001ba0 <main+0x1410>)
 8001a4e:	f002 fc91 	bl	8004374 <iprintf>
 8001a52:	e47b      	b.n	800134c <main+0xbbc>
			}else if((ptr = strstr((char*)ParseBuffer, "+CGNSINF")) != NULL){ // save GPS data
 8001a54:	4953      	ldr	r1, [pc, #332]	; (8001ba4 <main+0x1414>)
 8001a56:	4851      	ldr	r0, [pc, #324]	; (8001b9c <main+0x140c>)
 8001a58:	f002 fd9d 	bl	8004596 <strstr>
 8001a5c:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 8001a60:	f103 0308 	add.w	r3, r3, #8
 8001a64:	6018      	str	r0, [r3, #0]
 8001a66:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 8001a6a:	f103 0308 	add.w	r3, r3, #8
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f43f ac6b 	beq.w	800134c <main+0xbbc>
				//ftp_transfer_active = 0;
				//transfer_status = 0; // I receive new GPS data, which means I don't transmit

				for(int i=0; i<BUFFER_SIZE; i++){ // clean old data
 8001a76:	2300      	movs	r3, #0
 8001a78:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 8001a7c:	f102 0218 	add.w	r2, r2, #24
 8001a80:	6013      	str	r3, [r2, #0]
 8001a82:	e018      	b.n	8001ab6 <main+0x1326>
					gps_data_latest[i] = '\0';
 8001a84:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8001a88:	f103 0310 	add.w	r3, r3, #16
 8001a8c:	f5a3 726e 	sub.w	r2, r3, #952	; 0x3b8
 8001a90:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 8001a94:	f103 0318 	add.w	r3, r3, #24
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<BUFFER_SIZE; i++){ // clean old data
 8001aa0:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 8001aa4:	f103 0318 	add.w	r3, r3, #24
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 8001ab0:	f102 0218 	add.w	r2, r2, #24
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 8001aba:	f103 0318 	add.w	r3, r3, #24
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2bff      	cmp	r3, #255	; 0xff
 8001ac2:	dddf      	ble.n	8001a84 <main+0x12f4>
				}

				gps_data_latest[0] = '#'; // preamble
 8001ac4:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8001ac8:	f103 0310 	add.w	r3, r3, #16
 8001acc:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 8001ad0:	2223      	movs	r2, #35	; 0x23
 8001ad2:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<strlen(ParseBuffer)-1; i++){ // -1 because I added preamble
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 8001ada:	f102 0214 	add.w	r2, r2, #20
 8001ade:	6013      	str	r3, [r2, #0]
 8001ae0:	e01f      	b.n	8001b22 <main+0x1392>
					gps_data_latest[i+1] = ParseBuffer[i];
 8001ae2:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 8001ae6:	f103 0314 	add.w	r3, r3, #20
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	3301      	adds	r3, #1
 8001aee:	492b      	ldr	r1, [pc, #172]	; (8001b9c <main+0x140c>)
 8001af0:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 8001af4:	f102 0214 	add.w	r2, r2, #20
 8001af8:	6812      	ldr	r2, [r2, #0]
 8001afa:	440a      	add	r2, r1
 8001afc:	7811      	ldrb	r1, [r2, #0]
 8001afe:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 8001b02:	f102 0210 	add.w	r2, r2, #16
 8001b06:	f5a2 726e 	sub.w	r2, r2, #952	; 0x3b8
 8001b0a:	54d1      	strb	r1, [r2, r3]
				for(int i=0; i<strlen(ParseBuffer)-1; i++){ // -1 because I added preamble
 8001b0c:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 8001b10:	f103 0314 	add.w	r3, r3, #20
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	3301      	adds	r3, #1
 8001b18:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 8001b1c:	f102 0214 	add.w	r2, r2, #20
 8001b20:	6013      	str	r3, [r2, #0]
 8001b22:	481e      	ldr	r0, [pc, #120]	; (8001b9c <main+0x140c>)
 8001b24:	f7fe fb34 	bl	8000190 <strlen>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	1e5a      	subs	r2, r3, #1
 8001b2c:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 8001b30:	f103 0314 	add.w	r3, r3, #20
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d8d3      	bhi.n	8001ae2 <main+0x1352>
				//char fake[BUFFER_SIZE] = "+CGNSINF: 5109.0262308,N,11401.8407342,203522.00,A,5109.0262308,N,11401.8407342,W,0.004,133.4,130522,0.0,E,D*2B";
				//				for(int i=0; i<strlen(fake); i++){
				//					gps_data_latest[i] = fake[i];
				//				}

				printf("GPS DATA LOCKED: %s\r\n", gps_data_latest);
 8001b3a:	f507 53cb 	add.w	r3, r7, #6496	; 0x1960
 8001b3e:	f103 0318 	add.w	r3, r3, #24
 8001b42:	4619      	mov	r1, r3
 8001b44:	4818      	ldr	r0, [pc, #96]	; (8001ba8 <main+0x1418>)
 8001b46:	f002 fc15 	bl	8004374 <iprintf>
 8001b4a:	f7ff bbff 	b.w	800134c <main+0xbbc>

			}

		}else{
			for(int i = 0; i< BUFFER_SIZE; i++){
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 8001b54:	f102 0210 	add.w	r2, r2, #16
 8001b58:	6013      	str	r3, [r2, #0]
 8001b5a:	e013      	b.n	8001b84 <main+0x13f4>
				ParseBuffer[i] ='\0';
 8001b5c:	4a0f      	ldr	r2, [pc, #60]	; (8001b9c <main+0x140c>)
 8001b5e:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 8001b62:	f103 0310 	add.w	r3, r3, #16
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4413      	add	r3, r2
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i< BUFFER_SIZE; i++){
 8001b6e:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 8001b72:	f103 0310 	add.w	r3, r3, #16
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 8001b7e:	f102 0210 	add.w	r2, r2, #16
 8001b82:	6013      	str	r3, [r2, #0]
 8001b84:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 8001b88:	f103 0310 	add.w	r3, r3, #16
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2bff      	cmp	r3, #255	; 0xff
 8001b90:	dde4      	ble.n	8001b5c <main+0x13cc>
	{
 8001b92:	f7ff bbdb 	b.w	800134c <main+0xbbc>
 8001b96:	bf00      	nop
 8001b98:	08005b18 	.word	0x08005b18
 8001b9c:	20000dfc 	.word	0x20000dfc
 8001ba0:	08005b28 	.word	0x08005b28
 8001ba4:	08005b34 	.word	0x08005b34
 8001ba8:	08005b40 	.word	0x08005b40

08001bac <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b092      	sub	sp, #72	; 0x48
 8001bb0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bb2:	f107 0314 	add.w	r3, r7, #20
 8001bb6:	2234      	movs	r2, #52	; 0x34
 8001bb8:	2100      	movs	r1, #0
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f002 fbd2 	bl	8004364 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bc0:	463b      	mov	r3, r7
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	605a      	str	r2, [r3, #4]
 8001bc8:	609a      	str	r2, [r3, #8]
 8001bca:	60da      	str	r2, [r3, #12]
 8001bcc:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bce:	4b1d      	ldr	r3, [pc, #116]	; (8001c44 <SystemClock_Config+0x98>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001bd6:	4a1b      	ldr	r2, [pc, #108]	; (8001c44 <SystemClock_Config+0x98>)
 8001bd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001bdc:	6013      	str	r3, [r2, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bde:	2302      	movs	r3, #2
 8001be0:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001be2:	2301      	movs	r3, #1
 8001be4:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001be6:	2310      	movs	r3, #16
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bea:	2302      	movs	r3, #2
 8001bec:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001bf2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001bf6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001bf8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001bfc:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bfe:	f107 0314 	add.w	r3, r7, #20
 8001c02:	4618      	mov	r0, r3
 8001c04:	f001 f8de 	bl	8002dc4 <HAL_RCC_OscConfig>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <SystemClock_Config+0x66>
	{
		Error_Handler();
 8001c0e:	f000 f947 	bl	8001ea0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c12:	230f      	movs	r3, #15
 8001c14:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c16:	2303      	movs	r3, #3
 8001c18:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c22:	2300      	movs	r3, #0
 8001c24:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001c26:	463b      	mov	r3, r7
 8001c28:	2101      	movs	r1, #1
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f001 fbfa 	bl	8003424 <HAL_RCC_ClockConfig>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <SystemClock_Config+0x8e>
	{
		Error_Handler();
 8001c36:	f000 f933 	bl	8001ea0 <Error_Handler>
	}
}
 8001c3a:	bf00      	nop
 8001c3c:	3748      	adds	r7, #72	; 0x48
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40007000 	.word	0x40007000

08001c48 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8001c4c:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <MX_UART4_Init+0x4c>)
 8001c4e:	4a12      	ldr	r2, [pc, #72]	; (8001c98 <MX_UART4_Init+0x50>)
 8001c50:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 8001c52:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <MX_UART4_Init+0x4c>)
 8001c54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c58:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001c5a:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <MX_UART4_Init+0x4c>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8001c60:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <MX_UART4_Init+0x4c>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8001c66:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <MX_UART4_Init+0x4c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8001c6c:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <MX_UART4_Init+0x4c>)
 8001c6e:	220c      	movs	r2, #12
 8001c70:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c72:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <MX_UART4_Init+0x4c>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c78:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <MX_UART4_Init+0x4c>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK)
 8001c7e:	4805      	ldr	r0, [pc, #20]	; (8001c94 <MX_UART4_Init+0x4c>)
 8001c80:	f001 fe96 	bl	80039b0 <HAL_UART_Init>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_UART4_Init+0x46>
	{
		Error_Handler();
 8001c8a:	f000 f909 	bl	8001ea0 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000c98 	.word	0x20000c98
 8001c98:	40004c00 	.word	0x40004c00

08001c9c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001ca0:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <MX_USART1_UART_Init+0x4c>)
 8001ca2:	4a12      	ldr	r2, [pc, #72]	; (8001cec <MX_USART1_UART_Init+0x50>)
 8001ca4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001ca6:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <MX_USART1_UART_Init+0x4c>)
 8001ca8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cac:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cae:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <MX_USART1_UART_Init+0x4c>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <MX_USART1_UART_Init+0x4c>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001cba:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <MX_USART1_UART_Init+0x4c>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001cc0:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <MX_USART1_UART_Init+0x4c>)
 8001cc2:	220c      	movs	r2, #12
 8001cc4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cc6:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <MX_USART1_UART_Init+0x4c>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <MX_USART1_UART_Init+0x4c>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cd2:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <MX_USART1_UART_Init+0x4c>)
 8001cd4:	f001 fe6c 	bl	80039b0 <HAL_UART_Init>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8001cde:	f000 f8df 	bl	8001ea0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000ce0 	.word	0x20000ce0
 8001cec:	40013800 	.word	0x40013800

08001cf0 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001cf4:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001cf6:	4a12      	ldr	r2, [pc, #72]	; (8001d40 <MX_USART2_UART_Init+0x50>)
 8001cf8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 57600;
 8001cfa:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001cfc:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001d00:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d02:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001d08:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001d0e:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001d14:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d16:	220c      	movs	r2, #12
 8001d18:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d1a:	4b08      	ldr	r3, [pc, #32]	; (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d20:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d26:	4805      	ldr	r0, [pc, #20]	; (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d28:	f001 fe42 	bl	80039b0 <HAL_UART_Init>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8001d32:	f000 f8b5 	bl	8001ea0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000d28 	.word	0x20000d28
 8001d40:	40004400 	.word	0x40004400

08001d44 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001d48:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <MX_USART3_UART_Init+0x4c>)
 8001d4a:	4a12      	ldr	r2, [pc, #72]	; (8001d94 <MX_USART3_UART_Init+0x50>)
 8001d4c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8001d4e:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <MX_USART3_UART_Init+0x4c>)
 8001d50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d54:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d56:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <MX_USART3_UART_Init+0x4c>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <MX_USART3_UART_Init+0x4c>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001d62:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <MX_USART3_UART_Init+0x4c>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001d68:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <MX_USART3_UART_Init+0x4c>)
 8001d6a:	220c      	movs	r2, #12
 8001d6c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d6e:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <MX_USART3_UART_Init+0x4c>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <MX_USART3_UART_Init+0x4c>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d7a:	4805      	ldr	r0, [pc, #20]	; (8001d90 <MX_USART3_UART_Init+0x4c>)
 8001d7c:	f001 fe18 	bl	80039b0 <HAL_UART_Init>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 8001d86:	f000 f88b 	bl	8001ea0 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000d70 	.word	0x20000d70
 8001d94:	40004800 	.word	0x40004800

08001d98 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001d9e:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <MX_DMA_Init+0x38>)
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	4a0b      	ldr	r2, [pc, #44]	; (8001dd0 <MX_DMA_Init+0x38>)
 8001da4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001da8:	61d3      	str	r3, [r2, #28]
 8001daa:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <MX_DMA_Init+0x38>)
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001db2:	607b      	str	r3, [r7, #4]
 8001db4:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001db6:	2200      	movs	r2, #0
 8001db8:	2100      	movs	r1, #0
 8001dba:	2010      	movs	r0, #16
 8001dbc:	f000 fd1f 	bl	80027fe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001dc0:	2010      	movs	r0, #16
 8001dc2:	f000 fd38 	bl	8002836 <HAL_NVIC_EnableIRQ>

}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40023800 	.word	0x40023800

08001dd4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08a      	sub	sp, #40	; 0x28
 8001dd8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dda:	f107 0314 	add.w	r3, r7, #20
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	605a      	str	r2, [r3, #4]
 8001de4:	609a      	str	r2, [r3, #8]
 8001de6:	60da      	str	r2, [r3, #12]
 8001de8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001dea:	4b2a      	ldr	r3, [pc, #168]	; (8001e94 <MX_GPIO_Init+0xc0>)
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	4a29      	ldr	r2, [pc, #164]	; (8001e94 <MX_GPIO_Init+0xc0>)
 8001df0:	f043 0304 	orr.w	r3, r3, #4
 8001df4:	61d3      	str	r3, [r2, #28]
 8001df6:	4b27      	ldr	r3, [pc, #156]	; (8001e94 <MX_GPIO_Init+0xc0>)
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	f003 0304 	and.w	r3, r3, #4
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001e02:	4b24      	ldr	r3, [pc, #144]	; (8001e94 <MX_GPIO_Init+0xc0>)
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	4a23      	ldr	r2, [pc, #140]	; (8001e94 <MX_GPIO_Init+0xc0>)
 8001e08:	f043 0320 	orr.w	r3, r3, #32
 8001e0c:	61d3      	str	r3, [r2, #28]
 8001e0e:	4b21      	ldr	r3, [pc, #132]	; (8001e94 <MX_GPIO_Init+0xc0>)
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	f003 0320 	and.w	r3, r3, #32
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1a:	4b1e      	ldr	r3, [pc, #120]	; (8001e94 <MX_GPIO_Init+0xc0>)
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	4a1d      	ldr	r2, [pc, #116]	; (8001e94 <MX_GPIO_Init+0xc0>)
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	61d3      	str	r3, [r2, #28]
 8001e26:	4b1b      	ldr	r3, [pc, #108]	; (8001e94 <MX_GPIO_Init+0xc0>)
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	60bb      	str	r3, [r7, #8]
 8001e30:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001e32:	4b18      	ldr	r3, [pc, #96]	; (8001e94 <MX_GPIO_Init+0xc0>)
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	4a17      	ldr	r2, [pc, #92]	; (8001e94 <MX_GPIO_Init+0xc0>)
 8001e38:	f043 0302 	orr.w	r3, r3, #2
 8001e3c:	61d3      	str	r3, [r2, #28]
 8001e3e:	4b15      	ldr	r3, [pc, #84]	; (8001e94 <MX_GPIO_Init+0xc0>)
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	607b      	str	r3, [r7, #4]
 8001e48:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2160      	movs	r1, #96	; 0x60
 8001e4e:	4812      	ldr	r0, [pc, #72]	; (8001e98 <MX_GPIO_Init+0xc4>)
 8001e50:	f000 ffa0 	bl	8002d94 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001e54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e58:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e5a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e5e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e64:	f107 0314 	add.w	r3, r7, #20
 8001e68:	4619      	mov	r1, r3
 8001e6a:	480c      	ldr	r0, [pc, #48]	; (8001e9c <MX_GPIO_Init+0xc8>)
 8001e6c:	f000 fe02 	bl	8002a74 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin PA6 */
	GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
 8001e70:	2360      	movs	r3, #96	; 0x60
 8001e72:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e74:	2301      	movs	r3, #1
 8001e76:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e80:	f107 0314 	add.w	r3, r7, #20
 8001e84:	4619      	mov	r1, r3
 8001e86:	4804      	ldr	r0, [pc, #16]	; (8001e98 <MX_GPIO_Init+0xc4>)
 8001e88:	f000 fdf4 	bl	8002a74 <HAL_GPIO_Init>

}
 8001e8c:	bf00      	nop
 8001e8e:	3728      	adds	r7, #40	; 0x28
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40023800 	.word	0x40023800
 8001e98:	40020000 	.word	0x40020000
 8001e9c:	40020800 	.word	0x40020800

08001ea0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ea4:	b672      	cpsid	i
}
 8001ea6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001ea8:	e7fe      	b.n	8001ea8 <Error_Handler+0x8>
	...

08001eac <Send_LTE>:
#include "scheduler.h"


void Send_LTE(char* cmd){
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
	//printf("%s, %d - SIZEOF\r\n", (char*)cmd, sizeof(cmd));
	//	strcat(cmd, "\r\n");
	//printf("%s, %d - SIZEOF\r\n", cmd, strlen(cmd));
	HAL_UART_Transmit(&huart2,(uint8_t*)cmd,strlen(cmd),250);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7fe f96b 	bl	8000190 <strlen>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	23fa      	movs	r3, #250	; 0xfa
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	4803      	ldr	r0, [pc, #12]	; (8001ed0 <Send_LTE+0x24>)
 8001ec4:	f001 fdc4 	bl	8003a50 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart2,(uint8_t*)"\r\n",2,10);
}
 8001ec8:	bf00      	nop
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	20000d28 	.word	0x20000d28

08001ed4 <Do_Action>:
void Get_LTE_data(){
	UARTDMA_IsDataReady(&huartdma6);
}


enum State Do_Action(command cmd, uint8_t* uart_data){
 8001ed4:	b084      	sub	sp, #16
 8001ed6:	b590      	push	{r4, r7, lr}
 8001ed8:	b087      	sub	sp, #28
 8001eda:	af04      	add	r7, sp, #16
 8001edc:	f107 0418 	add.w	r4, r7, #24
 8001ee0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	static enum State state = READY;
	static unsigned int retry;
	static int start_time;

	if(strcmp(cmd.cmd, "FTP_ACTIVE") == 0){
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	495a      	ldr	r1, [pc, #360]	; (8002050 <Do_Action+0x17c>)
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7fe f947 	bl	800017c <strcmp>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d116      	bne.n	8001f22 <Do_Action+0x4e>
		state = FTP_ACTIVE;
 8001ef4:	4b57      	ldr	r3, [pc, #348]	; (8002054 <Do_Action+0x180>)
 8001ef6:	2205      	movs	r2, #5
 8001ef8:	701a      	strb	r2, [r3, #0]
		retry = 0;
 8001efa:	4b57      	ldr	r3, [pc, #348]	; (8002058 <Do_Action+0x184>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
		for(int i = 0; i< BUFFER_SIZE; i++){
 8001f00:	2300      	movs	r3, #0
 8001f02:	607b      	str	r3, [r7, #4]
 8001f04:	e007      	b.n	8001f16 <Do_Action+0x42>
			uart_data[i] ='\0';
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f0a:	4413      	add	r3, r2
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i< BUFFER_SIZE; i++){
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3301      	adds	r3, #1
 8001f14:	607b      	str	r3, [r7, #4]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2bff      	cmp	r3, #255	; 0xff
 8001f1a:	ddf4      	ble.n	8001f06 <Do_Action+0x32>
		}
		return state;
 8001f1c:	4b4d      	ldr	r3, [pc, #308]	; (8002054 <Do_Action+0x180>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	e08e      	b.n	8002040 <Do_Action+0x16c>
	}


	if(strcmp(cmd.cmd, "RESET_ACTION") == 0){
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	494d      	ldr	r1, [pc, #308]	; (800205c <Do_Action+0x188>)
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe f928 	bl	800017c <strcmp>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d116      	bne.n	8001f60 <Do_Action+0x8c>
		state = READY;
 8001f32:	4b48      	ldr	r3, [pc, #288]	; (8002054 <Do_Action+0x180>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	701a      	strb	r2, [r3, #0]
		retry = 0;
 8001f38:	4b47      	ldr	r3, [pc, #284]	; (8002058 <Do_Action+0x184>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
		for(int i = 0; i< BUFFER_SIZE; i++){
 8001f3e:	2300      	movs	r3, #0
 8001f40:	603b      	str	r3, [r7, #0]
 8001f42:	e007      	b.n	8001f54 <Do_Action+0x80>
			uart_data[i] ='\0';
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f48:	4413      	add	r3, r2
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i< BUFFER_SIZE; i++){
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	3301      	adds	r3, #1
 8001f52:	603b      	str	r3, [r7, #0]
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	2bff      	cmp	r3, #255	; 0xff
 8001f58:	ddf4      	ble.n	8001f44 <Do_Action+0x70>
		}
		return state;
 8001f5a:	4b3e      	ldr	r3, [pc, #248]	; (8002054 <Do_Action+0x180>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	e06f      	b.n	8002040 <Do_Action+0x16c>
	}

	if(state == READY){ 					// ready to send new command
 8001f60:	4b3c      	ldr	r3, [pc, #240]	; (8002054 <Do_Action+0x180>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d10f      	bne.n	8001f88 <Do_Action+0xb4>
		start_time = HAL_GetTick();		// save send time
 8001f68:	f000 fb46 	bl	80025f8 <HAL_GetTick>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	461a      	mov	r2, r3
 8001f70:	4b3b      	ldr	r3, [pc, #236]	; (8002060 <Do_Action+0x18c>)
 8001f72:	601a      	str	r2, [r3, #0]
		state = CHECKING_ANSWER;			// notify that now we wait for a reply
 8001f74:	4b37      	ldr	r3, [pc, #220]	; (8002054 <Do_Action+0x180>)
 8001f76:	2201      	movs	r2, #1
 8001f78:	701a      	strb	r2, [r3, #0]
		Send_LTE(cmd.cmd);				// send new command
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff ff95 	bl	8001eac <Send_LTE>
		return state;
 8001f82:	4b34      	ldr	r3, [pc, #208]	; (8002054 <Do_Action+0x180>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	e05b      	b.n	8002040 <Do_Action+0x16c>

	}else if(state == CHECKING_ANSWER){	// if we expect a reply now
 8001f88:	4b32      	ldr	r3, [pc, #200]	; (8002054 <Do_Action+0x180>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d155      	bne.n	800203c <Do_Action+0x168>

		if((start_time + cmd.timeout) < HAL_GetTick()){	// if we wait too long, report timeout
 8001f90:	6a3a      	ldr	r2, [r7, #32]
 8001f92:	4b33      	ldr	r3, [pc, #204]	; (8002060 <Do_Action+0x18c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4413      	add	r3, r2
 8001f98:	461c      	mov	r4, r3
 8001f9a:	f000 fb2d 	bl	80025f8 <HAL_GetTick>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	429c      	cmp	r4, r3
 8001fa2:	d205      	bcs.n	8001fb0 <Do_Action+0xdc>
			state = TIMEOUT;
 8001fa4:	4b2b      	ldr	r3, [pc, #172]	; (8002054 <Do_Action+0x180>)
 8001fa6:	2204      	movs	r2, #4
 8001fa8:	701a      	strb	r2, [r3, #0]
			return state;
 8001faa:	4b2a      	ldr	r3, [pc, #168]	; (8002054 <Do_Action+0x180>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	e047      	b.n	8002040 <Do_Action+0x16c>
		}

		if((strcmp(cmd.good_answer, (char*)uart_data) == 0) || strcmp(cmd.good_answer, "ANY") == 0){ 		// if the reply is OK, return success
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7fe f8e1 	bl	800017c <strcmp>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d007      	beq.n	8001fd0 <Do_Action+0xfc>
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	4928      	ldr	r1, [pc, #160]	; (8002064 <Do_Action+0x190>)
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7fe f8d9 	bl	800017c <strcmp>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d105      	bne.n	8001fdc <Do_Action+0x108>
			state = GOOD_ANSWER;
 8001fd0:	4b20      	ldr	r3, [pc, #128]	; (8002054 <Do_Action+0x180>)
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	701a      	strb	r2, [r3, #0]
			return state;
 8001fd6:	4b1f      	ldr	r3, [pc, #124]	; (8002054 <Do_Action+0x180>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	e031      	b.n	8002040 <Do_Action+0x16c>
		}else if(strcmp(cmd.bad_answer, (char*)uart_data) == 0){	// if the reply suggest an error...
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fde:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7fe f8cb 	bl	800017c <strcmp>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d127      	bne.n	800203c <Do_Action+0x168>
			state = BAD_ANSWER;
 8001fec:	4b19      	ldr	r3, [pc, #100]	; (8002054 <Do_Action+0x180>)
 8001fee:	2203      	movs	r2, #3
 8001ff0:	701a      	strb	r2, [r3, #0]
			if(retry < cmd.retry_counter){				// retry if structure suggest that behaviour
 8001ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	4b18      	ldr	r3, [pc, #96]	; (8002058 <Do_Action+0x184>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d915      	bls.n	800202a <Do_Action+0x156>
				retry++;
 8001ffe:	4b16      	ldr	r3, [pc, #88]	; (8002058 <Do_Action+0x184>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	3301      	adds	r3, #1
 8002004:	4a14      	ldr	r2, [pc, #80]	; (8002058 <Do_Action+0x184>)
 8002006:	6013      	str	r3, [r2, #0]
				Do_Action(cmd, uart_data);
 8002008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800200a:	9302      	str	r3, [sp, #8]
 800200c:	466a      	mov	r2, sp
 800200e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002012:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002016:	e882 0003 	stmia.w	r2, {r0, r1}
 800201a:	f107 0318 	add.w	r3, r7, #24
 800201e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002020:	f7ff ff58 	bl	8001ed4 <Do_Action>
			}else{										// if retries still give an error, or no replies suggested, report error
				retry = 0;
				state = BAD_ANSWER;
				return state;
			}
			return state;
 8002024:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <Do_Action+0x180>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	e00a      	b.n	8002040 <Do_Action+0x16c>
				retry = 0;
 800202a:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <Do_Action+0x184>)
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
				state = BAD_ANSWER;
 8002030:	4b08      	ldr	r3, [pc, #32]	; (8002054 <Do_Action+0x180>)
 8002032:	2203      	movs	r2, #3
 8002034:	701a      	strb	r2, [r3, #0]
				return state;
 8002036:	4b07      	ldr	r3, [pc, #28]	; (8002054 <Do_Action+0x180>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	e001      	b.n	8002040 <Do_Action+0x16c>
		}
	}

	return state;
 800203c:	4b05      	ldr	r3, [pc, #20]	; (8002054 <Do_Action+0x180>)
 800203e:	781b      	ldrb	r3, [r3, #0]
}
 8002040:	4618      	mov	r0, r3
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800204a:	b004      	add	sp, #16
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	08005f18 	.word	0x08005f18
 8002054:	20000efc 	.word	0x20000efc
 8002058:	20000f00 	.word	0x20000f00
 800205c:	08005f24 	.word	0x08005f24
 8002060:	20000f04 	.word	0x20000f04
 8002064:	08005f34 	.word	0x08005f34

08002068 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800206e:	4b15      	ldr	r3, [pc, #84]	; (80020c4 <HAL_MspInit+0x5c>)
 8002070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002072:	4a14      	ldr	r2, [pc, #80]	; (80020c4 <HAL_MspInit+0x5c>)
 8002074:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002078:	6253      	str	r3, [r2, #36]	; 0x24
 800207a:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <HAL_MspInit+0x5c>)
 800207c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002086:	4b0f      	ldr	r3, [pc, #60]	; (80020c4 <HAL_MspInit+0x5c>)
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	4a0e      	ldr	r2, [pc, #56]	; (80020c4 <HAL_MspInit+0x5c>)
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	6213      	str	r3, [r2, #32]
 8002092:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <HAL_MspInit+0x5c>)
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	60bb      	str	r3, [r7, #8]
 800209c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800209e:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <HAL_MspInit+0x5c>)
 80020a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a2:	4a08      	ldr	r2, [pc, #32]	; (80020c4 <HAL_MspInit+0x5c>)
 80020a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a8:	6253      	str	r3, [r2, #36]	; 0x24
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <HAL_MspInit+0x5c>)
 80020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b2:	607b      	str	r3, [r7, #4]
 80020b4:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80020b6:	2007      	movs	r0, #7
 80020b8:	f000 fb96 	bl	80027e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020bc:	bf00      	nop
 80020be:	3710      	adds	r7, #16
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40023800 	.word	0x40023800

080020c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b090      	sub	sp, #64	; 0x40
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	60da      	str	r2, [r3, #12]
 80020de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a74      	ldr	r2, [pc, #464]	; (80022b8 <HAL_UART_MspInit+0x1f0>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d129      	bne.n	800213e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80020ea:	4b74      	ldr	r3, [pc, #464]	; (80022bc <HAL_UART_MspInit+0x1f4>)
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ee:	4a73      	ldr	r2, [pc, #460]	; (80022bc <HAL_UART_MspInit+0x1f4>)
 80020f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80020f4:	6253      	str	r3, [r2, #36]	; 0x24
 80020f6:	4b71      	ldr	r3, [pc, #452]	; (80022bc <HAL_UART_MspInit+0x1f4>)
 80020f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002100:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002102:	4b6e      	ldr	r3, [pc, #440]	; (80022bc <HAL_UART_MspInit+0x1f4>)
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	4a6d      	ldr	r2, [pc, #436]	; (80022bc <HAL_UART_MspInit+0x1f4>)
 8002108:	f043 0304 	orr.w	r3, r3, #4
 800210c:	61d3      	str	r3, [r2, #28]
 800210e:	4b6b      	ldr	r3, [pc, #428]	; (80022bc <HAL_UART_MspInit+0x1f4>)
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	f003 0304 	and.w	r3, r3, #4
 8002116:	627b      	str	r3, [r7, #36]	; 0x24
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800211a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800211e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002120:	2302      	movs	r3, #2
 8002122:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002124:	2301      	movs	r3, #1
 8002126:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002128:	2303      	movs	r3, #3
 800212a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800212c:	2308      	movs	r3, #8
 800212e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002130:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002134:	4619      	mov	r1, r3
 8002136:	4862      	ldr	r0, [pc, #392]	; (80022c0 <HAL_UART_MspInit+0x1f8>)
 8002138:	f000 fc9c 	bl	8002a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800213c:	e0b8      	b.n	80022b0 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART1)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a60      	ldr	r2, [pc, #384]	; (80022c4 <HAL_UART_MspInit+0x1fc>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d129      	bne.n	800219c <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002148:	4b5c      	ldr	r3, [pc, #368]	; (80022bc <HAL_UART_MspInit+0x1f4>)
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	4a5b      	ldr	r2, [pc, #364]	; (80022bc <HAL_UART_MspInit+0x1f4>)
 800214e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002152:	6213      	str	r3, [r2, #32]
 8002154:	4b59      	ldr	r3, [pc, #356]	; (80022bc <HAL_UART_MspInit+0x1f4>)
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800215c:	623b      	str	r3, [r7, #32]
 800215e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002160:	4b56      	ldr	r3, [pc, #344]	; (80022bc <HAL_UART_MspInit+0x1f4>)
 8002162:	69db      	ldr	r3, [r3, #28]
 8002164:	4a55      	ldr	r2, [pc, #340]	; (80022bc <HAL_UART_MspInit+0x1f4>)
 8002166:	f043 0301 	orr.w	r3, r3, #1
 800216a:	61d3      	str	r3, [r2, #28]
 800216c:	4b53      	ldr	r3, [pc, #332]	; (80022bc <HAL_UART_MspInit+0x1f4>)
 800216e:	69db      	ldr	r3, [r3, #28]
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	61fb      	str	r3, [r7, #28]
 8002176:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002178:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800217c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217e:	2302      	movs	r3, #2
 8002180:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	2300      	movs	r3, #0
 8002184:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002186:	2303      	movs	r3, #3
 8002188:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800218a:	2307      	movs	r3, #7
 800218c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800218e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002192:	4619      	mov	r1, r3
 8002194:	484c      	ldr	r0, [pc, #304]	; (80022c8 <HAL_UART_MspInit+0x200>)
 8002196:	f000 fc6d 	bl	8002a74 <HAL_GPIO_Init>
}
 800219a:	e089      	b.n	80022b0 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART2)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a4a      	ldr	r2, [pc, #296]	; (80022cc <HAL_UART_MspInit+0x204>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d156      	bne.n	8002254 <HAL_UART_MspInit+0x18c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80021a6:	4b45      	ldr	r3, [pc, #276]	; (80022bc <HAL_UART_MspInit+0x1f4>)
 80021a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021aa:	4a44      	ldr	r2, [pc, #272]	; (80022bc <HAL_UART_MspInit+0x1f4>)
 80021ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021b0:	6253      	str	r3, [r2, #36]	; 0x24
 80021b2:	4b42      	ldr	r3, [pc, #264]	; (80022bc <HAL_UART_MspInit+0x1f4>)
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ba:	61bb      	str	r3, [r7, #24]
 80021bc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021be:	4b3f      	ldr	r3, [pc, #252]	; (80022bc <HAL_UART_MspInit+0x1f4>)
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	4a3e      	ldr	r2, [pc, #248]	; (80022bc <HAL_UART_MspInit+0x1f4>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	61d3      	str	r3, [r2, #28]
 80021ca:	4b3c      	ldr	r3, [pc, #240]	; (80022bc <HAL_UART_MspInit+0x1f4>)
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	617b      	str	r3, [r7, #20]
 80021d4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80021d6:	230c      	movs	r3, #12
 80021d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021da:	2302      	movs	r3, #2
 80021dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021de:	2300      	movs	r3, #0
 80021e0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e2:	2303      	movs	r3, #3
 80021e4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021e6:	2307      	movs	r3, #7
 80021e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021ee:	4619      	mov	r1, r3
 80021f0:	4835      	ldr	r0, [pc, #212]	; (80022c8 <HAL_UART_MspInit+0x200>)
 80021f2:	f000 fc3f 	bl	8002a74 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80021f6:	4b36      	ldr	r3, [pc, #216]	; (80022d0 <HAL_UART_MspInit+0x208>)
 80021f8:	4a36      	ldr	r2, [pc, #216]	; (80022d4 <HAL_UART_MspInit+0x20c>)
 80021fa:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021fc:	4b34      	ldr	r3, [pc, #208]	; (80022d0 <HAL_UART_MspInit+0x208>)
 80021fe:	2200      	movs	r2, #0
 8002200:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002202:	4b33      	ldr	r3, [pc, #204]	; (80022d0 <HAL_UART_MspInit+0x208>)
 8002204:	2200      	movs	r2, #0
 8002206:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002208:	4b31      	ldr	r3, [pc, #196]	; (80022d0 <HAL_UART_MspInit+0x208>)
 800220a:	2280      	movs	r2, #128	; 0x80
 800220c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800220e:	4b30      	ldr	r3, [pc, #192]	; (80022d0 <HAL_UART_MspInit+0x208>)
 8002210:	2200      	movs	r2, #0
 8002212:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002214:	4b2e      	ldr	r3, [pc, #184]	; (80022d0 <HAL_UART_MspInit+0x208>)
 8002216:	2200      	movs	r2, #0
 8002218:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800221a:	4b2d      	ldr	r3, [pc, #180]	; (80022d0 <HAL_UART_MspInit+0x208>)
 800221c:	2200      	movs	r2, #0
 800221e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002220:	4b2b      	ldr	r3, [pc, #172]	; (80022d0 <HAL_UART_MspInit+0x208>)
 8002222:	2200      	movs	r2, #0
 8002224:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002226:	482a      	ldr	r0, [pc, #168]	; (80022d0 <HAL_UART_MspInit+0x208>)
 8002228:	f000 fb20 	bl	800286c <HAL_DMA_Init>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <HAL_UART_MspInit+0x16e>
      Error_Handler();
 8002232:	f7ff fe35 	bl	8001ea0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a25      	ldr	r2, [pc, #148]	; (80022d0 <HAL_UART_MspInit+0x208>)
 800223a:	63da      	str	r2, [r3, #60]	; 0x3c
 800223c:	4a24      	ldr	r2, [pc, #144]	; (80022d0 <HAL_UART_MspInit+0x208>)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002242:	2200      	movs	r2, #0
 8002244:	2100      	movs	r1, #0
 8002246:	2026      	movs	r0, #38	; 0x26
 8002248:	f000 fad9 	bl	80027fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800224c:	2026      	movs	r0, #38	; 0x26
 800224e:	f000 faf2 	bl	8002836 <HAL_NVIC_EnableIRQ>
}
 8002252:	e02d      	b.n	80022b0 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART3)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a1f      	ldr	r2, [pc, #124]	; (80022d8 <HAL_UART_MspInit+0x210>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d128      	bne.n	80022b0 <HAL_UART_MspInit+0x1e8>
    __HAL_RCC_USART3_CLK_ENABLE();
 800225e:	4b17      	ldr	r3, [pc, #92]	; (80022bc <HAL_UART_MspInit+0x1f4>)
 8002260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002262:	4a16      	ldr	r2, [pc, #88]	; (80022bc <HAL_UART_MspInit+0x1f4>)
 8002264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002268:	6253      	str	r3, [r2, #36]	; 0x24
 800226a:	4b14      	ldr	r3, [pc, #80]	; (80022bc <HAL_UART_MspInit+0x1f4>)
 800226c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002272:	613b      	str	r3, [r7, #16]
 8002274:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002276:	4b11      	ldr	r3, [pc, #68]	; (80022bc <HAL_UART_MspInit+0x1f4>)
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	4a10      	ldr	r2, [pc, #64]	; (80022bc <HAL_UART_MspInit+0x1f4>)
 800227c:	f043 0302 	orr.w	r3, r3, #2
 8002280:	61d3      	str	r3, [r2, #28]
 8002282:	4b0e      	ldr	r3, [pc, #56]	; (80022bc <HAL_UART_MspInit+0x1f4>)
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800228e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002292:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002294:	2302      	movs	r3, #2
 8002296:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800229c:	2303      	movs	r3, #3
 800229e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022a0:	2307      	movs	r3, #7
 80022a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022a8:	4619      	mov	r1, r3
 80022aa:	480c      	ldr	r0, [pc, #48]	; (80022dc <HAL_UART_MspInit+0x214>)
 80022ac:	f000 fbe2 	bl	8002a74 <HAL_GPIO_Init>
}
 80022b0:	bf00      	nop
 80022b2:	3740      	adds	r7, #64	; 0x40
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40004c00 	.word	0x40004c00
 80022bc:	40023800 	.word	0x40023800
 80022c0:	40020800 	.word	0x40020800
 80022c4:	40013800 	.word	0x40013800
 80022c8:	40020000 	.word	0x40020000
 80022cc:	40004400 	.word	0x40004400
 80022d0:	20000db8 	.word	0x20000db8
 80022d4:	4002606c 	.word	0x4002606c
 80022d8:	40004800 	.word	0x40004800
 80022dc:	40020400 	.word	0x40020400

080022e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022e4:	e7fe      	b.n	80022e4 <NMI_Handler+0x4>

080022e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022e6:	b480      	push	{r7}
 80022e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ea:	e7fe      	b.n	80022ea <HardFault_Handler+0x4>

080022ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022f0:	e7fe      	b.n	80022f0 <MemManage_Handler+0x4>

080022f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022f2:	b480      	push	{r7}
 80022f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022f6:	e7fe      	b.n	80022f6 <BusFault_Handler+0x4>

080022f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022fc:	e7fe      	b.n	80022fc <UsageFault_Handler+0x4>

080022fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022fe:	b480      	push	{r7}
 8002300:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002302:	bf00      	nop
 8002304:	46bd      	mov	sp, r7
 8002306:	bc80      	pop	{r7}
 8002308:	4770      	bx	lr

0800230a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800230a:	b480      	push	{r7}
 800230c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	46bd      	mov	sp, r7
 8002312:	bc80      	pop	{r7}
 8002314:	4770      	bx	lr

08002316 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002316:	b480      	push	{r7}
 8002318:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800231a:	bf00      	nop
 800231c:	46bd      	mov	sp, r7
 800231e:	bc80      	pop	{r7}
 8002320:	4770      	bx	lr

08002322 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002326:	f000 f955 	bl	80025d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
	...

08002330 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
  UARTDMA_DmaIrqHandler(&huartdma6);
 8002334:	4802      	ldr	r0, [pc, #8]	; (8002340 <DMA1_Channel6_IRQHandler+0x10>)
 8002336:	f7fe f8e2 	bl	80004fe <UARTDMA_DmaIrqHandler>
  return;
 800233a:	bf00      	nop
  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	2000008c 	.word	0x2000008c

08002344 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  UARTDMA_UartIrqHandler(&huartdma6);
 8002348:	4802      	ldr	r0, [pc, #8]	; (8002354 <USART2_IRQHandler+0x10>)
 800234a:	f7fe f8ad 	bl	80004a8 <UARTDMA_UartIrqHandler>
  return;
 800234e:	bf00      	nop
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	2000008c 	.word	0x2000008c

08002358 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  return 1;
 800235c:	2301      	movs	r3, #1
}
 800235e:	4618      	mov	r0, r3
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr

08002366 <_kill>:

int _kill(int pid, int sig)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b082      	sub	sp, #8
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
 800236e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002370:	f001 ffb4 	bl	80042dc <__errno>
 8002374:	4603      	mov	r3, r0
 8002376:	2216      	movs	r2, #22
 8002378:	601a      	str	r2, [r3, #0]
  return -1;
 800237a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800237e:	4618      	mov	r0, r3
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <_exit>:

void _exit (int status)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800238e:	f04f 31ff 	mov.w	r1, #4294967295
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7ff ffe7 	bl	8002366 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002398:	e7fe      	b.n	8002398 <_exit+0x12>

0800239a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b086      	sub	sp, #24
 800239e:	af00      	add	r7, sp, #0
 80023a0:	60f8      	str	r0, [r7, #12]
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]
 80023aa:	e00a      	b.n	80023c2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023ac:	f3af 8000 	nop.w
 80023b0:	4601      	mov	r1, r0
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	1c5a      	adds	r2, r3, #1
 80023b6:	60ba      	str	r2, [r7, #8]
 80023b8:	b2ca      	uxtb	r2, r1
 80023ba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	3301      	adds	r3, #1
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	dbf0      	blt.n	80023ac <_read+0x12>
  }

  return len;
 80023ca:	687b      	ldr	r3, [r7, #4]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3718      	adds	r7, #24
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	e009      	b.n	80023fa <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	1c5a      	adds	r2, r3, #1
 80023ea:	60ba      	str	r2, [r7, #8]
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fe f9bc 	bl	800076c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	3301      	adds	r3, #1
 80023f8:	617b      	str	r3, [r7, #20]
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	429a      	cmp	r2, r3
 8002400:	dbf1      	blt.n	80023e6 <_write+0x12>
  }
  return len;
 8002402:	687b      	ldr	r3, [r7, #4]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <_close>:

int _close(int file)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002414:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002418:	4618      	mov	r0, r3
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	bc80      	pop	{r7}
 8002420:	4770      	bx	lr

08002422 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
 800242a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002432:	605a      	str	r2, [r3, #4]
  return 0;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr

08002440 <_isatty>:

int _isatty(int file)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002448:	2301      	movs	r3, #1
}
 800244a:	4618      	mov	r0, r3
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr

08002454 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr

0800246c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002474:	4a14      	ldr	r2, [pc, #80]	; (80024c8 <_sbrk+0x5c>)
 8002476:	4b15      	ldr	r3, [pc, #84]	; (80024cc <_sbrk+0x60>)
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002480:	4b13      	ldr	r3, [pc, #76]	; (80024d0 <_sbrk+0x64>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d102      	bne.n	800248e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002488:	4b11      	ldr	r3, [pc, #68]	; (80024d0 <_sbrk+0x64>)
 800248a:	4a12      	ldr	r2, [pc, #72]	; (80024d4 <_sbrk+0x68>)
 800248c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800248e:	4b10      	ldr	r3, [pc, #64]	; (80024d0 <_sbrk+0x64>)
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4413      	add	r3, r2
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	429a      	cmp	r2, r3
 800249a:	d207      	bcs.n	80024ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800249c:	f001 ff1e 	bl	80042dc <__errno>
 80024a0:	4603      	mov	r3, r0
 80024a2:	220c      	movs	r2, #12
 80024a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024a6:	f04f 33ff 	mov.w	r3, #4294967295
 80024aa:	e009      	b.n	80024c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024ac:	4b08      	ldr	r3, [pc, #32]	; (80024d0 <_sbrk+0x64>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024b2:	4b07      	ldr	r3, [pc, #28]	; (80024d0 <_sbrk+0x64>)
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4413      	add	r3, r2
 80024ba:	4a05      	ldr	r2, [pc, #20]	; (80024d0 <_sbrk+0x64>)
 80024bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024be:	68fb      	ldr	r3, [r7, #12]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20014000 	.word	0x20014000
 80024cc:	00000400 	.word	0x00000400
 80024d0:	20000f08 	.word	0x20000f08
 80024d4:	20000f20 	.word	0x20000f20

080024d8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024dc:	bf00      	nop
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr

080024e4 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 80024e4:	f7ff fff8 	bl	80024d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024e8:	480b      	ldr	r0, [pc, #44]	; (8002518 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80024ea:	490c      	ldr	r1, [pc, #48]	; (800251c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80024ec:	4a0c      	ldr	r2, [pc, #48]	; (8002520 <LoopFillZerobss+0x16>)
  movs r3, #0
 80024ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024f0:	e002      	b.n	80024f8 <LoopCopyDataInit>

080024f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024f6:	3304      	adds	r3, #4

080024f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024fc:	d3f9      	bcc.n	80024f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024fe:	4a09      	ldr	r2, [pc, #36]	; (8002524 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002500:	4c09      	ldr	r4, [pc, #36]	; (8002528 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002504:	e001      	b.n	800250a <LoopFillZerobss>

08002506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002508:	3204      	adds	r2, #4

0800250a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800250a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800250c:	d3fb      	bcc.n	8002506 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800250e:	f001 feeb 	bl	80042e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002512:	f7fe f93d 	bl	8000790 <main>
  bx lr
 8002516:	4770      	bx	lr
  ldr r0, =_sdata
 8002518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800251c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002520:	080061d8 	.word	0x080061d8
  ldr r2, =_sbss
 8002524:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002528:	20000f20 	.word	0x20000f20

0800252c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800252c:	e7fe      	b.n	800252c <ADC1_IRQHandler>

0800252e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002534:	2300      	movs	r3, #0
 8002536:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002538:	2003      	movs	r0, #3
 800253a:	f000 f955 	bl	80027e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800253e:	2000      	movs	r0, #0
 8002540:	f000 f80e 	bl	8002560 <HAL_InitTick>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d002      	beq.n	8002550 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	71fb      	strb	r3, [r7, #7]
 800254e:	e001      	b.n	8002554 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002550:	f7ff fd8a 	bl	8002068 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002554:	79fb      	ldrb	r3, [r7, #7]
}
 8002556:	4618      	mov	r0, r3
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
	...

08002560 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002568:	2300      	movs	r3, #0
 800256a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800256c:	4b16      	ldr	r3, [pc, #88]	; (80025c8 <HAL_InitTick+0x68>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d022      	beq.n	80025ba <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002574:	4b15      	ldr	r3, [pc, #84]	; (80025cc <HAL_InitTick+0x6c>)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	4b13      	ldr	r3, [pc, #76]	; (80025c8 <HAL_InitTick+0x68>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002580:	fbb1 f3f3 	udiv	r3, r1, r3
 8002584:	fbb2 f3f3 	udiv	r3, r2, r3
 8002588:	4618      	mov	r0, r3
 800258a:	f000 f962 	bl	8002852 <HAL_SYSTICK_Config>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10f      	bne.n	80025b4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b0f      	cmp	r3, #15
 8002598:	d809      	bhi.n	80025ae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800259a:	2200      	movs	r2, #0
 800259c:	6879      	ldr	r1, [r7, #4]
 800259e:	f04f 30ff 	mov.w	r0, #4294967295
 80025a2:	f000 f92c 	bl	80027fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025a6:	4a0a      	ldr	r2, [pc, #40]	; (80025d0 <HAL_InitTick+0x70>)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6013      	str	r3, [r2, #0]
 80025ac:	e007      	b.n	80025be <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	73fb      	strb	r3, [r7, #15]
 80025b2:	e004      	b.n	80025be <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	73fb      	strb	r3, [r7, #15]
 80025b8:	e001      	b.n	80025be <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80025be:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	20000008 	.word	0x20000008
 80025cc:	20000000 	.word	0x20000000
 80025d0:	20000004 	.word	0x20000004

080025d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025d8:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <HAL_IncTick+0x1c>)
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <HAL_IncTick+0x20>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4413      	add	r3, r2
 80025e2:	4a03      	ldr	r2, [pc, #12]	; (80025f0 <HAL_IncTick+0x1c>)
 80025e4:	6013      	str	r3, [r2, #0]
}
 80025e6:	bf00      	nop
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bc80      	pop	{r7}
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	20000f0c 	.word	0x20000f0c
 80025f4:	20000008 	.word	0x20000008

080025f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  return uwTick;
 80025fc:	4b02      	ldr	r3, [pc, #8]	; (8002608 <HAL_GetTick+0x10>)
 80025fe:	681b      	ldr	r3, [r3, #0]
}
 8002600:	4618      	mov	r0, r3
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr
 8002608:	20000f0c 	.word	0x20000f0c

0800260c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002614:	f7ff fff0 	bl	80025f8 <HAL_GetTick>
 8002618:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002624:	d004      	beq.n	8002630 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002626:	4b09      	ldr	r3, [pc, #36]	; (800264c <HAL_Delay+0x40>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	4413      	add	r3, r2
 800262e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002630:	bf00      	nop
 8002632:	f7ff ffe1 	bl	80025f8 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	429a      	cmp	r2, r3
 8002640:	d8f7      	bhi.n	8002632 <HAL_Delay+0x26>
  {
  }
}
 8002642:	bf00      	nop
 8002644:	bf00      	nop
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	20000008 	.word	0x20000008

08002650 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f003 0307 	and.w	r3, r3, #7
 800265e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002660:	4b0c      	ldr	r3, [pc, #48]	; (8002694 <__NVIC_SetPriorityGrouping+0x44>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800266c:	4013      	ands	r3, r2
 800266e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002678:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800267c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002680:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002682:	4a04      	ldr	r2, [pc, #16]	; (8002694 <__NVIC_SetPriorityGrouping+0x44>)
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	60d3      	str	r3, [r2, #12]
}
 8002688:	bf00      	nop
 800268a:	3714      	adds	r7, #20
 800268c:	46bd      	mov	sp, r7
 800268e:	bc80      	pop	{r7}
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	e000ed00 	.word	0xe000ed00

08002698 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800269c:	4b04      	ldr	r3, [pc, #16]	; (80026b0 <__NVIC_GetPriorityGrouping+0x18>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	0a1b      	lsrs	r3, r3, #8
 80026a2:	f003 0307 	and.w	r3, r3, #7
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	e000ed00 	.word	0xe000ed00

080026b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	db0b      	blt.n	80026de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026c6:	79fb      	ldrb	r3, [r7, #7]
 80026c8:	f003 021f 	and.w	r2, r3, #31
 80026cc:	4906      	ldr	r1, [pc, #24]	; (80026e8 <__NVIC_EnableIRQ+0x34>)
 80026ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d2:	095b      	lsrs	r3, r3, #5
 80026d4:	2001      	movs	r0, #1
 80026d6:	fa00 f202 	lsl.w	r2, r0, r2
 80026da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr
 80026e8:	e000e100 	.word	0xe000e100

080026ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	6039      	str	r1, [r7, #0]
 80026f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	db0a      	blt.n	8002716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	b2da      	uxtb	r2, r3
 8002704:	490c      	ldr	r1, [pc, #48]	; (8002738 <__NVIC_SetPriority+0x4c>)
 8002706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270a:	0112      	lsls	r2, r2, #4
 800270c:	b2d2      	uxtb	r2, r2
 800270e:	440b      	add	r3, r1
 8002710:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002714:	e00a      	b.n	800272c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	b2da      	uxtb	r2, r3
 800271a:	4908      	ldr	r1, [pc, #32]	; (800273c <__NVIC_SetPriority+0x50>)
 800271c:	79fb      	ldrb	r3, [r7, #7]
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	3b04      	subs	r3, #4
 8002724:	0112      	lsls	r2, r2, #4
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	440b      	add	r3, r1
 800272a:	761a      	strb	r2, [r3, #24]
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	bc80      	pop	{r7}
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	e000e100 	.word	0xe000e100
 800273c:	e000ed00 	.word	0xe000ed00

08002740 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002740:	b480      	push	{r7}
 8002742:	b089      	sub	sp, #36	; 0x24
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f1c3 0307 	rsb	r3, r3, #7
 800275a:	2b04      	cmp	r3, #4
 800275c:	bf28      	it	cs
 800275e:	2304      	movcs	r3, #4
 8002760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	3304      	adds	r3, #4
 8002766:	2b06      	cmp	r3, #6
 8002768:	d902      	bls.n	8002770 <NVIC_EncodePriority+0x30>
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	3b03      	subs	r3, #3
 800276e:	e000      	b.n	8002772 <NVIC_EncodePriority+0x32>
 8002770:	2300      	movs	r3, #0
 8002772:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002774:	f04f 32ff 	mov.w	r2, #4294967295
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43da      	mvns	r2, r3
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	401a      	ands	r2, r3
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002788:	f04f 31ff 	mov.w	r1, #4294967295
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	fa01 f303 	lsl.w	r3, r1, r3
 8002792:	43d9      	mvns	r1, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002798:	4313      	orrs	r3, r2
         );
}
 800279a:	4618      	mov	r0, r3
 800279c:	3724      	adds	r7, #36	; 0x24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3b01      	subs	r3, #1
 80027b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027b4:	d301      	bcc.n	80027ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027b6:	2301      	movs	r3, #1
 80027b8:	e00f      	b.n	80027da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ba:	4a0a      	ldr	r2, [pc, #40]	; (80027e4 <SysTick_Config+0x40>)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3b01      	subs	r3, #1
 80027c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027c2:	210f      	movs	r1, #15
 80027c4:	f04f 30ff 	mov.w	r0, #4294967295
 80027c8:	f7ff ff90 	bl	80026ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027cc:	4b05      	ldr	r3, [pc, #20]	; (80027e4 <SysTick_Config+0x40>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027d2:	4b04      	ldr	r3, [pc, #16]	; (80027e4 <SysTick_Config+0x40>)
 80027d4:	2207      	movs	r2, #7
 80027d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	e000e010 	.word	0xe000e010

080027e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f7ff ff2d 	bl	8002650 <__NVIC_SetPriorityGrouping>
}
 80027f6:	bf00      	nop
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b086      	sub	sp, #24
 8002802:	af00      	add	r7, sp, #0
 8002804:	4603      	mov	r3, r0
 8002806:	60b9      	str	r1, [r7, #8]
 8002808:	607a      	str	r2, [r7, #4]
 800280a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800280c:	2300      	movs	r3, #0
 800280e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002810:	f7ff ff42 	bl	8002698 <__NVIC_GetPriorityGrouping>
 8002814:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	68b9      	ldr	r1, [r7, #8]
 800281a:	6978      	ldr	r0, [r7, #20]
 800281c:	f7ff ff90 	bl	8002740 <NVIC_EncodePriority>
 8002820:	4602      	mov	r2, r0
 8002822:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002826:	4611      	mov	r1, r2
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff ff5f 	bl	80026ec <__NVIC_SetPriority>
}
 800282e:	bf00      	nop
 8002830:	3718      	adds	r7, #24
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b082      	sub	sp, #8
 800283a:	af00      	add	r7, sp, #0
 800283c:	4603      	mov	r3, r0
 800283e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff ff35 	bl	80026b4 <__NVIC_EnableIRQ>
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b082      	sub	sp, #8
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7ff ffa2 	bl	80027a4 <SysTick_Config>
 8002860:	4603      	mov	r3, r0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
	...

0800286c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e059      	b.n	8002932 <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	461a      	mov	r2, r3
 8002884:	4b2d      	ldr	r3, [pc, #180]	; (800293c <HAL_DMA_Init+0xd0>)
 8002886:	429a      	cmp	r2, r3
 8002888:	d80f      	bhi.n	80028aa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	461a      	mov	r2, r3
 8002890:	4b2b      	ldr	r3, [pc, #172]	; (8002940 <HAL_DMA_Init+0xd4>)
 8002892:	4413      	add	r3, r2
 8002894:	4a2b      	ldr	r2, [pc, #172]	; (8002944 <HAL_DMA_Init+0xd8>)
 8002896:	fba2 2303 	umull	r2, r3, r2, r3
 800289a:	091b      	lsrs	r3, r3, #4
 800289c:	009a      	lsls	r2, r3, #2
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a28      	ldr	r2, [pc, #160]	; (8002948 <HAL_DMA_Init+0xdc>)
 80028a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80028a8:	e00e      	b.n	80028c8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	461a      	mov	r2, r3
 80028b0:	4b26      	ldr	r3, [pc, #152]	; (800294c <HAL_DMA_Init+0xe0>)
 80028b2:	4413      	add	r3, r2
 80028b4:	4a23      	ldr	r2, [pc, #140]	; (8002944 <HAL_DMA_Init+0xd8>)
 80028b6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ba:	091b      	lsrs	r3, r3, #4
 80028bc:	009a      	lsls	r2, r3, #2
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a22      	ldr	r2, [pc, #136]	; (8002950 <HAL_DMA_Init+0xe4>)
 80028c6:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2202      	movs	r2, #2
 80028cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80028de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80028ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002904:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	4313      	orrs	r3, r2
 8002910:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3714      	adds	r7, #20
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr
 800293c:	40026407 	.word	0x40026407
 8002940:	bffd9ff8 	.word	0xbffd9ff8
 8002944:	cccccccd 	.word	0xcccccccd
 8002948:	40026000 	.word	0x40026000
 800294c:	bffd9bf8 	.word	0xbffd9bf8
 8002950:	40026400 	.word	0x40026400

08002954 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
 8002960:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002962:	2300      	movs	r3, #0
 8002964:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f893 3020 	ldrb.w	r3, [r3, #32]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d101      	bne.n	8002974 <HAL_DMA_Start_IT+0x20>
 8002970:	2302      	movs	r3, #2
 8002972:	e04b      	b.n	8002a0c <HAL_DMA_Start_IT+0xb8>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b01      	cmp	r3, #1
 8002986:	d13a      	bne.n	80029fe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2202      	movs	r2, #2
 800298c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 0201 	bic.w	r2, r2, #1
 80029a4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	68b9      	ldr	r1, [r7, #8]
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f000 f831 	bl	8002a14 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d008      	beq.n	80029cc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f042 020e 	orr.w	r2, r2, #14
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	e00f      	b.n	80029ec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 0204 	bic.w	r2, r2, #4
 80029da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 020a 	orr.w	r2, r2, #10
 80029ea:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 0201 	orr.w	r2, r2, #1
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	e005      	b.n	8002a0a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002a06:	2302      	movs	r3, #2
 8002a08:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002a0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3718      	adds	r7, #24
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
 8002a20:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	f003 021c 	and.w	r2, r3, #28
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a2e:	2101      	movs	r1, #1
 8002a30:	fa01 f202 	lsl.w	r2, r1, r2
 8002a34:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	2b10      	cmp	r3, #16
 8002a44:	d108      	bne.n	8002a58 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a56:	e007      	b.n	8002a68 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68ba      	ldr	r2, [r7, #8]
 8002a5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	60da      	str	r2, [r3, #12]
}
 8002a68:	bf00      	nop
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr
	...

08002a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b087      	sub	sp, #28
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002a82:	2300      	movs	r3, #0
 8002a84:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002a86:	2300      	movs	r3, #0
 8002a88:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002a8a:	e160      	b.n	8002d4e <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	2101      	movs	r1, #1
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	fa01 f303 	lsl.w	r3, r1, r3
 8002a98:	4013      	ands	r3, r2
 8002a9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 8152 	beq.w	8002d48 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 0303 	and.w	r3, r3, #3
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d005      	beq.n	8002abc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d130      	bne.n	8002b1e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	2203      	movs	r2, #3
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	43db      	mvns	r3, r3
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	68da      	ldr	r2, [r3, #12]
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002af2:	2201      	movs	r2, #1
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	43db      	mvns	r3, r3
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	4013      	ands	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	091b      	lsrs	r3, r3, #4
 8002b08:	f003 0201 	and.w	r2, r3, #1
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	2b03      	cmp	r3, #3
 8002b28:	d017      	beq.n	8002b5a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	2203      	movs	r2, #3
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f003 0303 	and.w	r3, r3, #3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d123      	bne.n	8002bae <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	08da      	lsrs	r2, r3, #3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	3208      	adds	r2, #8
 8002b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b72:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	220f      	movs	r2, #15
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	43db      	mvns	r3, r3
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	4013      	ands	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	691a      	ldr	r2, [r3, #16]
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	08da      	lsrs	r2, r3, #3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3208      	adds	r2, #8
 8002ba8:	6939      	ldr	r1, [r7, #16]
 8002baa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	2203      	movs	r2, #3
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f003 0203 	and.w	r2, r3, #3
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 80ac 	beq.w	8002d48 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bf0:	4b5e      	ldr	r3, [pc, #376]	; (8002d6c <HAL_GPIO_Init+0x2f8>)
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
 8002bf4:	4a5d      	ldr	r2, [pc, #372]	; (8002d6c <HAL_GPIO_Init+0x2f8>)
 8002bf6:	f043 0301 	orr.w	r3, r3, #1
 8002bfa:	6213      	str	r3, [r2, #32]
 8002bfc:	4b5b      	ldr	r3, [pc, #364]	; (8002d6c <HAL_GPIO_Init+0x2f8>)
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	60bb      	str	r3, [r7, #8]
 8002c06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c08:	4a59      	ldr	r2, [pc, #356]	; (8002d70 <HAL_GPIO_Init+0x2fc>)
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	089b      	lsrs	r3, r3, #2
 8002c0e:	3302      	adds	r3, #2
 8002c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c14:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	f003 0303 	and.w	r3, r3, #3
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	220f      	movs	r2, #15
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	43db      	mvns	r3, r3
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a51      	ldr	r2, [pc, #324]	; (8002d74 <HAL_GPIO_Init+0x300>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d025      	beq.n	8002c80 <HAL_GPIO_Init+0x20c>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a50      	ldr	r2, [pc, #320]	; (8002d78 <HAL_GPIO_Init+0x304>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d01f      	beq.n	8002c7c <HAL_GPIO_Init+0x208>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a4f      	ldr	r2, [pc, #316]	; (8002d7c <HAL_GPIO_Init+0x308>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d019      	beq.n	8002c78 <HAL_GPIO_Init+0x204>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a4e      	ldr	r2, [pc, #312]	; (8002d80 <HAL_GPIO_Init+0x30c>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d013      	beq.n	8002c74 <HAL_GPIO_Init+0x200>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a4d      	ldr	r2, [pc, #308]	; (8002d84 <HAL_GPIO_Init+0x310>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d00d      	beq.n	8002c70 <HAL_GPIO_Init+0x1fc>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a4c      	ldr	r2, [pc, #304]	; (8002d88 <HAL_GPIO_Init+0x314>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d007      	beq.n	8002c6c <HAL_GPIO_Init+0x1f8>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a4b      	ldr	r2, [pc, #300]	; (8002d8c <HAL_GPIO_Init+0x318>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d101      	bne.n	8002c68 <HAL_GPIO_Init+0x1f4>
 8002c64:	2306      	movs	r3, #6
 8002c66:	e00c      	b.n	8002c82 <HAL_GPIO_Init+0x20e>
 8002c68:	2307      	movs	r3, #7
 8002c6a:	e00a      	b.n	8002c82 <HAL_GPIO_Init+0x20e>
 8002c6c:	2305      	movs	r3, #5
 8002c6e:	e008      	b.n	8002c82 <HAL_GPIO_Init+0x20e>
 8002c70:	2304      	movs	r3, #4
 8002c72:	e006      	b.n	8002c82 <HAL_GPIO_Init+0x20e>
 8002c74:	2303      	movs	r3, #3
 8002c76:	e004      	b.n	8002c82 <HAL_GPIO_Init+0x20e>
 8002c78:	2302      	movs	r3, #2
 8002c7a:	e002      	b.n	8002c82 <HAL_GPIO_Init+0x20e>
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e000      	b.n	8002c82 <HAL_GPIO_Init+0x20e>
 8002c80:	2300      	movs	r3, #0
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	f002 0203 	and.w	r2, r2, #3
 8002c88:	0092      	lsls	r2, r2, #2
 8002c8a:	4093      	lsls	r3, r2
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c92:	4937      	ldr	r1, [pc, #220]	; (8002d70 <HAL_GPIO_Init+0x2fc>)
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	089b      	lsrs	r3, r3, #2
 8002c98:	3302      	adds	r3, #2
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ca0:	4b3b      	ldr	r3, [pc, #236]	; (8002d90 <HAL_GPIO_Init+0x31c>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	4013      	ands	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d003      	beq.n	8002cc4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002cc4:	4a32      	ldr	r2, [pc, #200]	; (8002d90 <HAL_GPIO_Init+0x31c>)
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cca:	4b31      	ldr	r3, [pc, #196]	; (8002d90 <HAL_GPIO_Init+0x31c>)
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002cee:	4a28      	ldr	r2, [pc, #160]	; (8002d90 <HAL_GPIO_Init+0x31c>)
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cf4:	4b26      	ldr	r3, [pc, #152]	; (8002d90 <HAL_GPIO_Init+0x31c>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	4013      	ands	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d003      	beq.n	8002d18 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002d18:	4a1d      	ldr	r2, [pc, #116]	; (8002d90 <HAL_GPIO_Init+0x31c>)
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d1e:	4b1c      	ldr	r3, [pc, #112]	; (8002d90 <HAL_GPIO_Init+0x31c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	43db      	mvns	r3, r3
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002d42:	4a13      	ldr	r2, [pc, #76]	; (8002d90 <HAL_GPIO_Init+0x31c>)
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	fa22 f303 	lsr.w	r3, r2, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f47f ae97 	bne.w	8002a8c <HAL_GPIO_Init+0x18>
  }
}
 8002d5e:	bf00      	nop
 8002d60:	bf00      	nop
 8002d62:	371c      	adds	r7, #28
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bc80      	pop	{r7}
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	40010000 	.word	0x40010000
 8002d74:	40020000 	.word	0x40020000
 8002d78:	40020400 	.word	0x40020400
 8002d7c:	40020800 	.word	0x40020800
 8002d80:	40020c00 	.word	0x40020c00
 8002d84:	40021000 	.word	0x40021000
 8002d88:	40021400 	.word	0x40021400
 8002d8c:	40021800 	.word	0x40021800
 8002d90:	40010400 	.word	0x40010400

08002d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	807b      	strh	r3, [r7, #2]
 8002da0:	4613      	mov	r3, r2
 8002da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002da4:	787b      	ldrb	r3, [r7, #1]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002daa:	887a      	ldrh	r2, [r7, #2]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002db0:	e003      	b.n	8002dba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002db2:	887b      	ldrh	r3, [r7, #2]
 8002db4:	041a      	lsls	r2, r3, #16
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	619a      	str	r2, [r3, #24]
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bc80      	pop	{r7}
 8002dc2:	4770      	bx	lr

08002dc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b088      	sub	sp, #32
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e31d      	b.n	8003412 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dd6:	4b94      	ldr	r3, [pc, #592]	; (8003028 <HAL_RCC_OscConfig+0x264>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 030c 	and.w	r3, r3, #12
 8002dde:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002de0:	4b91      	ldr	r3, [pc, #580]	; (8003028 <HAL_RCC_OscConfig+0x264>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002de8:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d07b      	beq.n	8002eee <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d006      	beq.n	8002e0a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	2b0c      	cmp	r3, #12
 8002e00:	d10f      	bne.n	8002e22 <HAL_RCC_OscConfig+0x5e>
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e08:	d10b      	bne.n	8002e22 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e0a:	4b87      	ldr	r3, [pc, #540]	; (8003028 <HAL_RCC_OscConfig+0x264>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d06a      	beq.n	8002eec <HAL_RCC_OscConfig+0x128>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d166      	bne.n	8002eec <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e2f7      	b.n	8003412 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d106      	bne.n	8002e38 <HAL_RCC_OscConfig+0x74>
 8002e2a:	4b7f      	ldr	r3, [pc, #508]	; (8003028 <HAL_RCC_OscConfig+0x264>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a7e      	ldr	r2, [pc, #504]	; (8003028 <HAL_RCC_OscConfig+0x264>)
 8002e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e34:	6013      	str	r3, [r2, #0]
 8002e36:	e02d      	b.n	8002e94 <HAL_RCC_OscConfig+0xd0>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d10c      	bne.n	8002e5a <HAL_RCC_OscConfig+0x96>
 8002e40:	4b79      	ldr	r3, [pc, #484]	; (8003028 <HAL_RCC_OscConfig+0x264>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a78      	ldr	r2, [pc, #480]	; (8003028 <HAL_RCC_OscConfig+0x264>)
 8002e46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e4a:	6013      	str	r3, [r2, #0]
 8002e4c:	4b76      	ldr	r3, [pc, #472]	; (8003028 <HAL_RCC_OscConfig+0x264>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a75      	ldr	r2, [pc, #468]	; (8003028 <HAL_RCC_OscConfig+0x264>)
 8002e52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e56:	6013      	str	r3, [r2, #0]
 8002e58:	e01c      	b.n	8002e94 <HAL_RCC_OscConfig+0xd0>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2b05      	cmp	r3, #5
 8002e60:	d10c      	bne.n	8002e7c <HAL_RCC_OscConfig+0xb8>
 8002e62:	4b71      	ldr	r3, [pc, #452]	; (8003028 <HAL_RCC_OscConfig+0x264>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a70      	ldr	r2, [pc, #448]	; (8003028 <HAL_RCC_OscConfig+0x264>)
 8002e68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e6c:	6013      	str	r3, [r2, #0]
 8002e6e:	4b6e      	ldr	r3, [pc, #440]	; (8003028 <HAL_RCC_OscConfig+0x264>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a6d      	ldr	r2, [pc, #436]	; (8003028 <HAL_RCC_OscConfig+0x264>)
 8002e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e78:	6013      	str	r3, [r2, #0]
 8002e7a:	e00b      	b.n	8002e94 <HAL_RCC_OscConfig+0xd0>
 8002e7c:	4b6a      	ldr	r3, [pc, #424]	; (8003028 <HAL_RCC_OscConfig+0x264>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a69      	ldr	r2, [pc, #420]	; (8003028 <HAL_RCC_OscConfig+0x264>)
 8002e82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e86:	6013      	str	r3, [r2, #0]
 8002e88:	4b67      	ldr	r3, [pc, #412]	; (8003028 <HAL_RCC_OscConfig+0x264>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a66      	ldr	r2, [pc, #408]	; (8003028 <HAL_RCC_OscConfig+0x264>)
 8002e8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d013      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9c:	f7ff fbac 	bl	80025f8 <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ea4:	f7ff fba8 	bl	80025f8 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b64      	cmp	r3, #100	; 0x64
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e2ad      	b.n	8003412 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002eb6:	4b5c      	ldr	r3, [pc, #368]	; (8003028 <HAL_RCC_OscConfig+0x264>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0f0      	beq.n	8002ea4 <HAL_RCC_OscConfig+0xe0>
 8002ec2:	e014      	b.n	8002eee <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec4:	f7ff fb98 	bl	80025f8 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ecc:	f7ff fb94 	bl	80025f8 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b64      	cmp	r3, #100	; 0x64
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e299      	b.n	8003412 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002ede:	4b52      	ldr	r3, [pc, #328]	; (8003028 <HAL_RCC_OscConfig+0x264>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1f0      	bne.n	8002ecc <HAL_RCC_OscConfig+0x108>
 8002eea:	e000      	b.n	8002eee <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d05a      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	2b04      	cmp	r3, #4
 8002efe:	d005      	beq.n	8002f0c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	2b0c      	cmp	r3, #12
 8002f04:	d119      	bne.n	8002f3a <HAL_RCC_OscConfig+0x176>
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d116      	bne.n	8002f3a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f0c:	4b46      	ldr	r3, [pc, #280]	; (8003028 <HAL_RCC_OscConfig+0x264>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d005      	beq.n	8002f24 <HAL_RCC_OscConfig+0x160>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d001      	beq.n	8002f24 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e276      	b.n	8003412 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f24:	4b40      	ldr	r3, [pc, #256]	; (8003028 <HAL_RCC_OscConfig+0x264>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	021b      	lsls	r3, r3, #8
 8002f32:	493d      	ldr	r1, [pc, #244]	; (8003028 <HAL_RCC_OscConfig+0x264>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f38:	e03a      	b.n	8002fb0 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d020      	beq.n	8002f84 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f42:	4b3a      	ldr	r3, [pc, #232]	; (800302c <HAL_RCC_OscConfig+0x268>)
 8002f44:	2201      	movs	r2, #1
 8002f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f48:	f7ff fb56 	bl	80025f8 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f50:	f7ff fb52 	bl	80025f8 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e257      	b.n	8003412 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f62:	4b31      	ldr	r3, [pc, #196]	; (8003028 <HAL_RCC_OscConfig+0x264>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0f0      	beq.n	8002f50 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f6e:	4b2e      	ldr	r3, [pc, #184]	; (8003028 <HAL_RCC_OscConfig+0x264>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	021b      	lsls	r3, r3, #8
 8002f7c:	492a      	ldr	r1, [pc, #168]	; (8003028 <HAL_RCC_OscConfig+0x264>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	604b      	str	r3, [r1, #4]
 8002f82:	e015      	b.n	8002fb0 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f84:	4b29      	ldr	r3, [pc, #164]	; (800302c <HAL_RCC_OscConfig+0x268>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8a:	f7ff fb35 	bl	80025f8 <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f90:	e008      	b.n	8002fa4 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f92:	f7ff fb31 	bl	80025f8 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e236      	b.n	8003412 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002fa4:	4b20      	ldr	r3, [pc, #128]	; (8003028 <HAL_RCC_OscConfig+0x264>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1f0      	bne.n	8002f92 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0310 	and.w	r3, r3, #16
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 80b8 	beq.w	800312e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d170      	bne.n	80030a6 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fc4:	4b18      	ldr	r3, [pc, #96]	; (8003028 <HAL_RCC_OscConfig+0x264>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d005      	beq.n	8002fdc <HAL_RCC_OscConfig+0x218>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e21a      	b.n	8003412 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a1a      	ldr	r2, [r3, #32]
 8002fe0:	4b11      	ldr	r3, [pc, #68]	; (8003028 <HAL_RCC_OscConfig+0x264>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d921      	bls.n	8003030 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f000 fc7d 	bl	80038f0 <RCC_SetFlashLatencyFromMSIRange>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e208      	b.n	8003412 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003000:	4b09      	ldr	r3, [pc, #36]	; (8003028 <HAL_RCC_OscConfig+0x264>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	4906      	ldr	r1, [pc, #24]	; (8003028 <HAL_RCC_OscConfig+0x264>)
 800300e:	4313      	orrs	r3, r2
 8003010:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003012:	4b05      	ldr	r3, [pc, #20]	; (8003028 <HAL_RCC_OscConfig+0x264>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	061b      	lsls	r3, r3, #24
 8003020:	4901      	ldr	r1, [pc, #4]	; (8003028 <HAL_RCC_OscConfig+0x264>)
 8003022:	4313      	orrs	r3, r2
 8003024:	604b      	str	r3, [r1, #4]
 8003026:	e020      	b.n	800306a <HAL_RCC_OscConfig+0x2a6>
 8003028:	40023800 	.word	0x40023800
 800302c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003030:	4b99      	ldr	r3, [pc, #612]	; (8003298 <HAL_RCC_OscConfig+0x4d4>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	4996      	ldr	r1, [pc, #600]	; (8003298 <HAL_RCC_OscConfig+0x4d4>)
 800303e:	4313      	orrs	r3, r2
 8003040:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003042:	4b95      	ldr	r3, [pc, #596]	; (8003298 <HAL_RCC_OscConfig+0x4d4>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	061b      	lsls	r3, r3, #24
 8003050:	4991      	ldr	r1, [pc, #580]	; (8003298 <HAL_RCC_OscConfig+0x4d4>)
 8003052:	4313      	orrs	r3, r2
 8003054:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	4618      	mov	r0, r3
 800305c:	f000 fc48 	bl	80038f0 <RCC_SetFlashLatencyFromMSIRange>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e1d3      	b.n	8003412 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	0b5b      	lsrs	r3, r3, #13
 8003070:	3301      	adds	r3, #1
 8003072:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800307a:	4a87      	ldr	r2, [pc, #540]	; (8003298 <HAL_RCC_OscConfig+0x4d4>)
 800307c:	6892      	ldr	r2, [r2, #8]
 800307e:	0912      	lsrs	r2, r2, #4
 8003080:	f002 020f 	and.w	r2, r2, #15
 8003084:	4985      	ldr	r1, [pc, #532]	; (800329c <HAL_RCC_OscConfig+0x4d8>)
 8003086:	5c8a      	ldrb	r2, [r1, r2]
 8003088:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800308a:	4a85      	ldr	r2, [pc, #532]	; (80032a0 <HAL_RCC_OscConfig+0x4dc>)
 800308c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800308e:	4b85      	ldr	r3, [pc, #532]	; (80032a4 <HAL_RCC_OscConfig+0x4e0>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4618      	mov	r0, r3
 8003094:	f7ff fa64 	bl	8002560 <HAL_InitTick>
 8003098:	4603      	mov	r3, r0
 800309a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800309c:	7bfb      	ldrb	r3, [r7, #15]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d045      	beq.n	800312e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80030a2:	7bfb      	ldrb	r3, [r7, #15]
 80030a4:	e1b5      	b.n	8003412 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d029      	beq.n	8003102 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030ae:	4b7e      	ldr	r3, [pc, #504]	; (80032a8 <HAL_RCC_OscConfig+0x4e4>)
 80030b0:	2201      	movs	r2, #1
 80030b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b4:	f7ff faa0 	bl	80025f8 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030bc:	f7ff fa9c 	bl	80025f8 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e1a1      	b.n	8003412 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80030ce:	4b72      	ldr	r3, [pc, #456]	; (8003298 <HAL_RCC_OscConfig+0x4d4>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0f0      	beq.n	80030bc <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030da:	4b6f      	ldr	r3, [pc, #444]	; (8003298 <HAL_RCC_OscConfig+0x4d4>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	496c      	ldr	r1, [pc, #432]	; (8003298 <HAL_RCC_OscConfig+0x4d4>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030ec:	4b6a      	ldr	r3, [pc, #424]	; (8003298 <HAL_RCC_OscConfig+0x4d4>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	061b      	lsls	r3, r3, #24
 80030fa:	4967      	ldr	r1, [pc, #412]	; (8003298 <HAL_RCC_OscConfig+0x4d4>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	604b      	str	r3, [r1, #4]
 8003100:	e015      	b.n	800312e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003102:	4b69      	ldr	r3, [pc, #420]	; (80032a8 <HAL_RCC_OscConfig+0x4e4>)
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003108:	f7ff fa76 	bl	80025f8 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003110:	f7ff fa72 	bl	80025f8 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e177      	b.n	8003412 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003122:	4b5d      	ldr	r3, [pc, #372]	; (8003298 <HAL_RCC_OscConfig+0x4d4>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1f0      	bne.n	8003110 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0308 	and.w	r3, r3, #8
 8003136:	2b00      	cmp	r3, #0
 8003138:	d030      	beq.n	800319c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d016      	beq.n	8003170 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003142:	4b5a      	ldr	r3, [pc, #360]	; (80032ac <HAL_RCC_OscConfig+0x4e8>)
 8003144:	2201      	movs	r2, #1
 8003146:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003148:	f7ff fa56 	bl	80025f8 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003150:	f7ff fa52 	bl	80025f8 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e157      	b.n	8003412 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003162:	4b4d      	ldr	r3, [pc, #308]	; (8003298 <HAL_RCC_OscConfig+0x4d4>)
 8003164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d0f0      	beq.n	8003150 <HAL_RCC_OscConfig+0x38c>
 800316e:	e015      	b.n	800319c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003170:	4b4e      	ldr	r3, [pc, #312]	; (80032ac <HAL_RCC_OscConfig+0x4e8>)
 8003172:	2200      	movs	r2, #0
 8003174:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003176:	f7ff fa3f 	bl	80025f8 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800317c:	e008      	b.n	8003190 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800317e:	f7ff fa3b 	bl	80025f8 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e140      	b.n	8003412 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003190:	4b41      	ldr	r3, [pc, #260]	; (8003298 <HAL_RCC_OscConfig+0x4d4>)
 8003192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1f0      	bne.n	800317e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 80b5 	beq.w	8003314 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031aa:	2300      	movs	r3, #0
 80031ac:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031ae:	4b3a      	ldr	r3, [pc, #232]	; (8003298 <HAL_RCC_OscConfig+0x4d4>)
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10d      	bne.n	80031d6 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ba:	4b37      	ldr	r3, [pc, #220]	; (8003298 <HAL_RCC_OscConfig+0x4d4>)
 80031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031be:	4a36      	ldr	r2, [pc, #216]	; (8003298 <HAL_RCC_OscConfig+0x4d4>)
 80031c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031c4:	6253      	str	r3, [r2, #36]	; 0x24
 80031c6:	4b34      	ldr	r3, [pc, #208]	; (8003298 <HAL_RCC_OscConfig+0x4d4>)
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ce:	60bb      	str	r3, [r7, #8]
 80031d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031d2:	2301      	movs	r3, #1
 80031d4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d6:	4b36      	ldr	r3, [pc, #216]	; (80032b0 <HAL_RCC_OscConfig+0x4ec>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d118      	bne.n	8003214 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031e2:	4b33      	ldr	r3, [pc, #204]	; (80032b0 <HAL_RCC_OscConfig+0x4ec>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a32      	ldr	r2, [pc, #200]	; (80032b0 <HAL_RCC_OscConfig+0x4ec>)
 80031e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ee:	f7ff fa03 	bl	80025f8 <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f4:	e008      	b.n	8003208 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031f6:	f7ff f9ff 	bl	80025f8 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b64      	cmp	r3, #100	; 0x64
 8003202:	d901      	bls.n	8003208 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e104      	b.n	8003412 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003208:	4b29      	ldr	r3, [pc, #164]	; (80032b0 <HAL_RCC_OscConfig+0x4ec>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003210:	2b00      	cmp	r3, #0
 8003212:	d0f0      	beq.n	80031f6 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d106      	bne.n	800322a <HAL_RCC_OscConfig+0x466>
 800321c:	4b1e      	ldr	r3, [pc, #120]	; (8003298 <HAL_RCC_OscConfig+0x4d4>)
 800321e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003220:	4a1d      	ldr	r2, [pc, #116]	; (8003298 <HAL_RCC_OscConfig+0x4d4>)
 8003222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003226:	6353      	str	r3, [r2, #52]	; 0x34
 8003228:	e02d      	b.n	8003286 <HAL_RCC_OscConfig+0x4c2>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10c      	bne.n	800324c <HAL_RCC_OscConfig+0x488>
 8003232:	4b19      	ldr	r3, [pc, #100]	; (8003298 <HAL_RCC_OscConfig+0x4d4>)
 8003234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003236:	4a18      	ldr	r2, [pc, #96]	; (8003298 <HAL_RCC_OscConfig+0x4d4>)
 8003238:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800323c:	6353      	str	r3, [r2, #52]	; 0x34
 800323e:	4b16      	ldr	r3, [pc, #88]	; (8003298 <HAL_RCC_OscConfig+0x4d4>)
 8003240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003242:	4a15      	ldr	r2, [pc, #84]	; (8003298 <HAL_RCC_OscConfig+0x4d4>)
 8003244:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003248:	6353      	str	r3, [r2, #52]	; 0x34
 800324a:	e01c      	b.n	8003286 <HAL_RCC_OscConfig+0x4c2>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	2b05      	cmp	r3, #5
 8003252:	d10c      	bne.n	800326e <HAL_RCC_OscConfig+0x4aa>
 8003254:	4b10      	ldr	r3, [pc, #64]	; (8003298 <HAL_RCC_OscConfig+0x4d4>)
 8003256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003258:	4a0f      	ldr	r2, [pc, #60]	; (8003298 <HAL_RCC_OscConfig+0x4d4>)
 800325a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800325e:	6353      	str	r3, [r2, #52]	; 0x34
 8003260:	4b0d      	ldr	r3, [pc, #52]	; (8003298 <HAL_RCC_OscConfig+0x4d4>)
 8003262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003264:	4a0c      	ldr	r2, [pc, #48]	; (8003298 <HAL_RCC_OscConfig+0x4d4>)
 8003266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800326a:	6353      	str	r3, [r2, #52]	; 0x34
 800326c:	e00b      	b.n	8003286 <HAL_RCC_OscConfig+0x4c2>
 800326e:	4b0a      	ldr	r3, [pc, #40]	; (8003298 <HAL_RCC_OscConfig+0x4d4>)
 8003270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003272:	4a09      	ldr	r2, [pc, #36]	; (8003298 <HAL_RCC_OscConfig+0x4d4>)
 8003274:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003278:	6353      	str	r3, [r2, #52]	; 0x34
 800327a:	4b07      	ldr	r3, [pc, #28]	; (8003298 <HAL_RCC_OscConfig+0x4d4>)
 800327c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800327e:	4a06      	ldr	r2, [pc, #24]	; (8003298 <HAL_RCC_OscConfig+0x4d4>)
 8003280:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003284:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d024      	beq.n	80032d8 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800328e:	f7ff f9b3 	bl	80025f8 <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003294:	e019      	b.n	80032ca <HAL_RCC_OscConfig+0x506>
 8003296:	bf00      	nop
 8003298:	40023800 	.word	0x40023800
 800329c:	08005f44 	.word	0x08005f44
 80032a0:	20000000 	.word	0x20000000
 80032a4:	20000004 	.word	0x20000004
 80032a8:	42470020 	.word	0x42470020
 80032ac:	42470680 	.word	0x42470680
 80032b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032b4:	f7ff f9a0 	bl	80025f8 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e0a3      	b.n	8003412 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032ca:	4b54      	ldr	r3, [pc, #336]	; (800341c <HAL_RCC_OscConfig+0x658>)
 80032cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d0ee      	beq.n	80032b4 <HAL_RCC_OscConfig+0x4f0>
 80032d6:	e014      	b.n	8003302 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032d8:	f7ff f98e 	bl	80025f8 <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80032de:	e00a      	b.n	80032f6 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032e0:	f7ff f98a 	bl	80025f8 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e08d      	b.n	8003412 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80032f6:	4b49      	ldr	r3, [pc, #292]	; (800341c <HAL_RCC_OscConfig+0x658>)
 80032f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1ee      	bne.n	80032e0 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003302:	7ffb      	ldrb	r3, [r7, #31]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d105      	bne.n	8003314 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003308:	4b44      	ldr	r3, [pc, #272]	; (800341c <HAL_RCC_OscConfig+0x658>)
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	4a43      	ldr	r2, [pc, #268]	; (800341c <HAL_RCC_OscConfig+0x658>)
 800330e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003312:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003318:	2b00      	cmp	r3, #0
 800331a:	d079      	beq.n	8003410 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	2b0c      	cmp	r3, #12
 8003320:	d056      	beq.n	80033d0 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	2b02      	cmp	r3, #2
 8003328:	d13b      	bne.n	80033a2 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800332a:	4b3d      	ldr	r3, [pc, #244]	; (8003420 <HAL_RCC_OscConfig+0x65c>)
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003330:	f7ff f962 	bl	80025f8 <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003338:	f7ff f95e 	bl	80025f8 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e063      	b.n	8003412 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800334a:	4b34      	ldr	r3, [pc, #208]	; (800341c <HAL_RCC_OscConfig+0x658>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1f0      	bne.n	8003338 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003356:	4b31      	ldr	r3, [pc, #196]	; (800341c <HAL_RCC_OscConfig+0x658>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003366:	4319      	orrs	r1, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336c:	430b      	orrs	r3, r1
 800336e:	492b      	ldr	r1, [pc, #172]	; (800341c <HAL_RCC_OscConfig+0x658>)
 8003370:	4313      	orrs	r3, r2
 8003372:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003374:	4b2a      	ldr	r3, [pc, #168]	; (8003420 <HAL_RCC_OscConfig+0x65c>)
 8003376:	2201      	movs	r2, #1
 8003378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337a:	f7ff f93d 	bl	80025f8 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003382:	f7ff f939 	bl	80025f8 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e03e      	b.n	8003412 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003394:	4b21      	ldr	r3, [pc, #132]	; (800341c <HAL_RCC_OscConfig+0x658>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d0f0      	beq.n	8003382 <HAL_RCC_OscConfig+0x5be>
 80033a0:	e036      	b.n	8003410 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033a2:	4b1f      	ldr	r3, [pc, #124]	; (8003420 <HAL_RCC_OscConfig+0x65c>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a8:	f7ff f926 	bl	80025f8 <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033b0:	f7ff f922 	bl	80025f8 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e027      	b.n	8003412 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033c2:	4b16      	ldr	r3, [pc, #88]	; (800341c <HAL_RCC_OscConfig+0x658>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1f0      	bne.n	80033b0 <HAL_RCC_OscConfig+0x5ec>
 80033ce:	e01f      	b.n	8003410 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d101      	bne.n	80033dc <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e01a      	b.n	8003412 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033dc:	4b0f      	ldr	r3, [pc, #60]	; (800341c <HAL_RCC_OscConfig+0x658>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d10d      	bne.n	800340c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d106      	bne.n	800340c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003408:	429a      	cmp	r2, r3
 800340a:	d001      	beq.n	8003410 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e000      	b.n	8003412 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3720      	adds	r7, #32
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	40023800 	.word	0x40023800
 8003420:	42470060 	.word	0x42470060

08003424 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e11a      	b.n	800366e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003438:	4b8f      	ldr	r3, [pc, #572]	; (8003678 <HAL_RCC_ClockConfig+0x254>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	429a      	cmp	r2, r3
 8003444:	d919      	bls.n	800347a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d105      	bne.n	8003458 <HAL_RCC_ClockConfig+0x34>
 800344c:	4b8a      	ldr	r3, [pc, #552]	; (8003678 <HAL_RCC_ClockConfig+0x254>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a89      	ldr	r2, [pc, #548]	; (8003678 <HAL_RCC_ClockConfig+0x254>)
 8003452:	f043 0304 	orr.w	r3, r3, #4
 8003456:	6013      	str	r3, [r2, #0]
 8003458:	4b87      	ldr	r3, [pc, #540]	; (8003678 <HAL_RCC_ClockConfig+0x254>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f023 0201 	bic.w	r2, r3, #1
 8003460:	4985      	ldr	r1, [pc, #532]	; (8003678 <HAL_RCC_ClockConfig+0x254>)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	4313      	orrs	r3, r2
 8003466:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003468:	4b83      	ldr	r3, [pc, #524]	; (8003678 <HAL_RCC_ClockConfig+0x254>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	429a      	cmp	r2, r3
 8003474:	d001      	beq.n	800347a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e0f9      	b.n	800366e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d008      	beq.n	8003498 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003486:	4b7d      	ldr	r3, [pc, #500]	; (800367c <HAL_RCC_ClockConfig+0x258>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	497a      	ldr	r1, [pc, #488]	; (800367c <HAL_RCC_ClockConfig+0x258>)
 8003494:	4313      	orrs	r3, r2
 8003496:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 808e 	beq.w	80035c2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d107      	bne.n	80034be <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80034ae:	4b73      	ldr	r3, [pc, #460]	; (800367c <HAL_RCC_ClockConfig+0x258>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d121      	bne.n	80034fe <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e0d7      	b.n	800366e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	2b03      	cmp	r3, #3
 80034c4:	d107      	bne.n	80034d6 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034c6:	4b6d      	ldr	r3, [pc, #436]	; (800367c <HAL_RCC_ClockConfig+0x258>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d115      	bne.n	80034fe <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e0cb      	b.n	800366e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d107      	bne.n	80034ee <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034de:	4b67      	ldr	r3, [pc, #412]	; (800367c <HAL_RCC_ClockConfig+0x258>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d109      	bne.n	80034fe <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e0bf      	b.n	800366e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80034ee:	4b63      	ldr	r3, [pc, #396]	; (800367c <HAL_RCC_ClockConfig+0x258>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e0b7      	b.n	800366e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034fe:	4b5f      	ldr	r3, [pc, #380]	; (800367c <HAL_RCC_ClockConfig+0x258>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f023 0203 	bic.w	r2, r3, #3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	495c      	ldr	r1, [pc, #368]	; (800367c <HAL_RCC_ClockConfig+0x258>)
 800350c:	4313      	orrs	r3, r2
 800350e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003510:	f7ff f872 	bl	80025f8 <HAL_GetTick>
 8003514:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	2b02      	cmp	r3, #2
 800351c:	d112      	bne.n	8003544 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800351e:	e00a      	b.n	8003536 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003520:	f7ff f86a 	bl	80025f8 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	f241 3288 	movw	r2, #5000	; 0x1388
 800352e:	4293      	cmp	r3, r2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e09b      	b.n	800366e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003536:	4b51      	ldr	r3, [pc, #324]	; (800367c <HAL_RCC_ClockConfig+0x258>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 030c 	and.w	r3, r3, #12
 800353e:	2b08      	cmp	r3, #8
 8003540:	d1ee      	bne.n	8003520 <HAL_RCC_ClockConfig+0xfc>
 8003542:	e03e      	b.n	80035c2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	2b03      	cmp	r3, #3
 800354a:	d112      	bne.n	8003572 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800354c:	e00a      	b.n	8003564 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800354e:	f7ff f853 	bl	80025f8 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	f241 3288 	movw	r2, #5000	; 0x1388
 800355c:	4293      	cmp	r3, r2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e084      	b.n	800366e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003564:	4b45      	ldr	r3, [pc, #276]	; (800367c <HAL_RCC_ClockConfig+0x258>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 030c 	and.w	r3, r3, #12
 800356c:	2b0c      	cmp	r3, #12
 800356e:	d1ee      	bne.n	800354e <HAL_RCC_ClockConfig+0x12a>
 8003570:	e027      	b.n	80035c2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d11d      	bne.n	80035b6 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800357a:	e00a      	b.n	8003592 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800357c:	f7ff f83c 	bl	80025f8 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	f241 3288 	movw	r2, #5000	; 0x1388
 800358a:	4293      	cmp	r3, r2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e06d      	b.n	800366e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003592:	4b3a      	ldr	r3, [pc, #232]	; (800367c <HAL_RCC_ClockConfig+0x258>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 030c 	and.w	r3, r3, #12
 800359a:	2b04      	cmp	r3, #4
 800359c:	d1ee      	bne.n	800357c <HAL_RCC_ClockConfig+0x158>
 800359e:	e010      	b.n	80035c2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035a0:	f7ff f82a 	bl	80025f8 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e05b      	b.n	800366e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80035b6:	4b31      	ldr	r3, [pc, #196]	; (800367c <HAL_RCC_ClockConfig+0x258>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f003 030c 	and.w	r3, r3, #12
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1ee      	bne.n	80035a0 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035c2:	4b2d      	ldr	r3, [pc, #180]	; (8003678 <HAL_RCC_ClockConfig+0x254>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	683a      	ldr	r2, [r7, #0]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d219      	bcs.n	8003604 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d105      	bne.n	80035e2 <HAL_RCC_ClockConfig+0x1be>
 80035d6:	4b28      	ldr	r3, [pc, #160]	; (8003678 <HAL_RCC_ClockConfig+0x254>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a27      	ldr	r2, [pc, #156]	; (8003678 <HAL_RCC_ClockConfig+0x254>)
 80035dc:	f043 0304 	orr.w	r3, r3, #4
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	4b25      	ldr	r3, [pc, #148]	; (8003678 <HAL_RCC_ClockConfig+0x254>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f023 0201 	bic.w	r2, r3, #1
 80035ea:	4923      	ldr	r1, [pc, #140]	; (8003678 <HAL_RCC_ClockConfig+0x254>)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f2:	4b21      	ldr	r3, [pc, #132]	; (8003678 <HAL_RCC_ClockConfig+0x254>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d001      	beq.n	8003604 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e034      	b.n	800366e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b00      	cmp	r3, #0
 800360e:	d008      	beq.n	8003622 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003610:	4b1a      	ldr	r3, [pc, #104]	; (800367c <HAL_RCC_ClockConfig+0x258>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	4917      	ldr	r1, [pc, #92]	; (800367c <HAL_RCC_ClockConfig+0x258>)
 800361e:	4313      	orrs	r3, r2
 8003620:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0308 	and.w	r3, r3, #8
 800362a:	2b00      	cmp	r3, #0
 800362c:	d009      	beq.n	8003642 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800362e:	4b13      	ldr	r3, [pc, #76]	; (800367c <HAL_RCC_ClockConfig+0x258>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	490f      	ldr	r1, [pc, #60]	; (800367c <HAL_RCC_ClockConfig+0x258>)
 800363e:	4313      	orrs	r3, r2
 8003640:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003642:	f000 f823 	bl	800368c <HAL_RCC_GetSysClockFreq>
 8003646:	4602      	mov	r2, r0
 8003648:	4b0c      	ldr	r3, [pc, #48]	; (800367c <HAL_RCC_ClockConfig+0x258>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	091b      	lsrs	r3, r3, #4
 800364e:	f003 030f 	and.w	r3, r3, #15
 8003652:	490b      	ldr	r1, [pc, #44]	; (8003680 <HAL_RCC_ClockConfig+0x25c>)
 8003654:	5ccb      	ldrb	r3, [r1, r3]
 8003656:	fa22 f303 	lsr.w	r3, r2, r3
 800365a:	4a0a      	ldr	r2, [pc, #40]	; (8003684 <HAL_RCC_ClockConfig+0x260>)
 800365c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800365e:	4b0a      	ldr	r3, [pc, #40]	; (8003688 <HAL_RCC_ClockConfig+0x264>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f7fe ff7c 	bl	8002560 <HAL_InitTick>
 8003668:	4603      	mov	r3, r0
 800366a:	72fb      	strb	r3, [r7, #11]

  return status;
 800366c:	7afb      	ldrb	r3, [r7, #11]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	40023c00 	.word	0x40023c00
 800367c:	40023800 	.word	0x40023800
 8003680:	08005f44 	.word	0x08005f44
 8003684:	20000000 	.word	0x20000000
 8003688:	20000004 	.word	0x20000004

0800368c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800368c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003690:	b092      	sub	sp, #72	; 0x48
 8003692:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003694:	4b79      	ldr	r3, [pc, #484]	; (800387c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800369a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800369c:	f003 030c 	and.w	r3, r3, #12
 80036a0:	2b0c      	cmp	r3, #12
 80036a2:	d00d      	beq.n	80036c0 <HAL_RCC_GetSysClockFreq+0x34>
 80036a4:	2b0c      	cmp	r3, #12
 80036a6:	f200 80d5 	bhi.w	8003854 <HAL_RCC_GetSysClockFreq+0x1c8>
 80036aa:	2b04      	cmp	r3, #4
 80036ac:	d002      	beq.n	80036b4 <HAL_RCC_GetSysClockFreq+0x28>
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d003      	beq.n	80036ba <HAL_RCC_GetSysClockFreq+0x2e>
 80036b2:	e0cf      	b.n	8003854 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036b4:	4b72      	ldr	r3, [pc, #456]	; (8003880 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80036b6:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80036b8:	e0da      	b.n	8003870 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036ba:	4b72      	ldr	r3, [pc, #456]	; (8003884 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80036bc:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80036be:	e0d7      	b.n	8003870 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80036c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036c2:	0c9b      	lsrs	r3, r3, #18
 80036c4:	f003 020f 	and.w	r2, r3, #15
 80036c8:	4b6f      	ldr	r3, [pc, #444]	; (8003888 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80036ca:	5c9b      	ldrb	r3, [r3, r2]
 80036cc:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80036ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036d0:	0d9b      	lsrs	r3, r3, #22
 80036d2:	f003 0303 	and.w	r3, r3, #3
 80036d6:	3301      	adds	r3, #1
 80036d8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036da:	4b68      	ldr	r3, [pc, #416]	; (800387c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d05d      	beq.n	80037a2 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80036e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e8:	2200      	movs	r2, #0
 80036ea:	4618      	mov	r0, r3
 80036ec:	4611      	mov	r1, r2
 80036ee:	4604      	mov	r4, r0
 80036f0:	460d      	mov	r5, r1
 80036f2:	4622      	mov	r2, r4
 80036f4:	462b      	mov	r3, r5
 80036f6:	f04f 0000 	mov.w	r0, #0
 80036fa:	f04f 0100 	mov.w	r1, #0
 80036fe:	0159      	lsls	r1, r3, #5
 8003700:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003704:	0150      	lsls	r0, r2, #5
 8003706:	4602      	mov	r2, r0
 8003708:	460b      	mov	r3, r1
 800370a:	4621      	mov	r1, r4
 800370c:	1a51      	subs	r1, r2, r1
 800370e:	6139      	str	r1, [r7, #16]
 8003710:	4629      	mov	r1, r5
 8003712:	eb63 0301 	sbc.w	r3, r3, r1
 8003716:	617b      	str	r3, [r7, #20]
 8003718:	f04f 0200 	mov.w	r2, #0
 800371c:	f04f 0300 	mov.w	r3, #0
 8003720:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003724:	4659      	mov	r1, fp
 8003726:	018b      	lsls	r3, r1, #6
 8003728:	4651      	mov	r1, sl
 800372a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800372e:	4651      	mov	r1, sl
 8003730:	018a      	lsls	r2, r1, #6
 8003732:	46d4      	mov	ip, sl
 8003734:	ebb2 080c 	subs.w	r8, r2, ip
 8003738:	4659      	mov	r1, fp
 800373a:	eb63 0901 	sbc.w	r9, r3, r1
 800373e:	f04f 0200 	mov.w	r2, #0
 8003742:	f04f 0300 	mov.w	r3, #0
 8003746:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800374a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800374e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003752:	4690      	mov	r8, r2
 8003754:	4699      	mov	r9, r3
 8003756:	4623      	mov	r3, r4
 8003758:	eb18 0303 	adds.w	r3, r8, r3
 800375c:	60bb      	str	r3, [r7, #8]
 800375e:	462b      	mov	r3, r5
 8003760:	eb49 0303 	adc.w	r3, r9, r3
 8003764:	60fb      	str	r3, [r7, #12]
 8003766:	f04f 0200 	mov.w	r2, #0
 800376a:	f04f 0300 	mov.w	r3, #0
 800376e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003772:	4629      	mov	r1, r5
 8003774:	024b      	lsls	r3, r1, #9
 8003776:	4620      	mov	r0, r4
 8003778:	4629      	mov	r1, r5
 800377a:	4604      	mov	r4, r0
 800377c:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003780:	4601      	mov	r1, r0
 8003782:	024a      	lsls	r2, r1, #9
 8003784:	4610      	mov	r0, r2
 8003786:	4619      	mov	r1, r3
 8003788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800378a:	2200      	movs	r2, #0
 800378c:	62bb      	str	r3, [r7, #40]	; 0x28
 800378e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003790:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003794:	f7fc fd04 	bl	80001a0 <__aeabi_uldivmod>
 8003798:	4602      	mov	r2, r0
 800379a:	460b      	mov	r3, r1
 800379c:	4613      	mov	r3, r2
 800379e:	647b      	str	r3, [r7, #68]	; 0x44
 80037a0:	e055      	b.n	800384e <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80037a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a4:	2200      	movs	r2, #0
 80037a6:	623b      	str	r3, [r7, #32]
 80037a8:	627a      	str	r2, [r7, #36]	; 0x24
 80037aa:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80037ae:	4642      	mov	r2, r8
 80037b0:	464b      	mov	r3, r9
 80037b2:	f04f 0000 	mov.w	r0, #0
 80037b6:	f04f 0100 	mov.w	r1, #0
 80037ba:	0159      	lsls	r1, r3, #5
 80037bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037c0:	0150      	lsls	r0, r2, #5
 80037c2:	4602      	mov	r2, r0
 80037c4:	460b      	mov	r3, r1
 80037c6:	46c4      	mov	ip, r8
 80037c8:	ebb2 0a0c 	subs.w	sl, r2, ip
 80037cc:	4640      	mov	r0, r8
 80037ce:	4649      	mov	r1, r9
 80037d0:	468c      	mov	ip, r1
 80037d2:	eb63 0b0c 	sbc.w	fp, r3, ip
 80037d6:	f04f 0200 	mov.w	r2, #0
 80037da:	f04f 0300 	mov.w	r3, #0
 80037de:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80037e2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80037e6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80037ea:	ebb2 040a 	subs.w	r4, r2, sl
 80037ee:	eb63 050b 	sbc.w	r5, r3, fp
 80037f2:	f04f 0200 	mov.w	r2, #0
 80037f6:	f04f 0300 	mov.w	r3, #0
 80037fa:	00eb      	lsls	r3, r5, #3
 80037fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003800:	00e2      	lsls	r2, r4, #3
 8003802:	4614      	mov	r4, r2
 8003804:	461d      	mov	r5, r3
 8003806:	4603      	mov	r3, r0
 8003808:	18e3      	adds	r3, r4, r3
 800380a:	603b      	str	r3, [r7, #0]
 800380c:	460b      	mov	r3, r1
 800380e:	eb45 0303 	adc.w	r3, r5, r3
 8003812:	607b      	str	r3, [r7, #4]
 8003814:	f04f 0200 	mov.w	r2, #0
 8003818:	f04f 0300 	mov.w	r3, #0
 800381c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003820:	4629      	mov	r1, r5
 8003822:	028b      	lsls	r3, r1, #10
 8003824:	4620      	mov	r0, r4
 8003826:	4629      	mov	r1, r5
 8003828:	4604      	mov	r4, r0
 800382a:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800382e:	4601      	mov	r1, r0
 8003830:	028a      	lsls	r2, r1, #10
 8003832:	4610      	mov	r0, r2
 8003834:	4619      	mov	r1, r3
 8003836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003838:	2200      	movs	r2, #0
 800383a:	61bb      	str	r3, [r7, #24]
 800383c:	61fa      	str	r2, [r7, #28]
 800383e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003842:	f7fc fcad 	bl	80001a0 <__aeabi_uldivmod>
 8003846:	4602      	mov	r2, r0
 8003848:	460b      	mov	r3, r1
 800384a:	4613      	mov	r3, r2
 800384c:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 800384e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003850:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003852:	e00d      	b.n	8003870 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003854:	4b09      	ldr	r3, [pc, #36]	; (800387c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	0b5b      	lsrs	r3, r3, #13
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003862:	3301      	adds	r3, #1
 8003864:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800386e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003870:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8003872:	4618      	mov	r0, r3
 8003874:	3748      	adds	r7, #72	; 0x48
 8003876:	46bd      	mov	sp, r7
 8003878:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800387c:	40023800 	.word	0x40023800
 8003880:	00f42400 	.word	0x00f42400
 8003884:	007a1200 	.word	0x007a1200
 8003888:	08005f38 	.word	0x08005f38

0800388c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003890:	4b02      	ldr	r3, [pc, #8]	; (800389c <HAL_RCC_GetHCLKFreq+0x10>)
 8003892:	681b      	ldr	r3, [r3, #0]
}
 8003894:	4618      	mov	r0, r3
 8003896:	46bd      	mov	sp, r7
 8003898:	bc80      	pop	{r7}
 800389a:	4770      	bx	lr
 800389c:	20000000 	.word	0x20000000

080038a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038a4:	f7ff fff2 	bl	800388c <HAL_RCC_GetHCLKFreq>
 80038a8:	4602      	mov	r2, r0
 80038aa:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	0a1b      	lsrs	r3, r3, #8
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	4903      	ldr	r1, [pc, #12]	; (80038c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038b6:	5ccb      	ldrb	r3, [r1, r3]
 80038b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038bc:	4618      	mov	r0, r3
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40023800 	.word	0x40023800
 80038c4:	08005f54 	.word	0x08005f54

080038c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038cc:	f7ff ffde 	bl	800388c <HAL_RCC_GetHCLKFreq>
 80038d0:	4602      	mov	r2, r0
 80038d2:	4b05      	ldr	r3, [pc, #20]	; (80038e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	0adb      	lsrs	r3, r3, #11
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	4903      	ldr	r1, [pc, #12]	; (80038ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80038de:	5ccb      	ldrb	r3, [r1, r3]
 80038e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	40023800 	.word	0x40023800
 80038ec:	08005f54 	.word	0x08005f54

080038f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b087      	sub	sp, #28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80038f8:	2300      	movs	r3, #0
 80038fa:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80038fc:	4b29      	ldr	r3, [pc, #164]	; (80039a4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d12c      	bne.n	8003962 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003908:	4b26      	ldr	r3, [pc, #152]	; (80039a4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d005      	beq.n	8003920 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003914:	4b24      	ldr	r3, [pc, #144]	; (80039a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800391c:	617b      	str	r3, [r7, #20]
 800391e:	e016      	b.n	800394e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003920:	4b20      	ldr	r3, [pc, #128]	; (80039a4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	4a1f      	ldr	r2, [pc, #124]	; (80039a4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800392a:	6253      	str	r3, [r2, #36]	; 0x24
 800392c:	4b1d      	ldr	r3, [pc, #116]	; (80039a4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003934:	60fb      	str	r3, [r7, #12]
 8003936:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003938:	4b1b      	ldr	r3, [pc, #108]	; (80039a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003940:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003942:	4b18      	ldr	r3, [pc, #96]	; (80039a4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003946:	4a17      	ldr	r2, [pc, #92]	; (80039a4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003948:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800394c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003954:	d105      	bne.n	8003962 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800395c:	d101      	bne.n	8003962 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800395e:	2301      	movs	r3, #1
 8003960:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d105      	bne.n	8003974 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003968:	4b10      	ldr	r3, [pc, #64]	; (80039ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a0f      	ldr	r2, [pc, #60]	; (80039ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800396e:	f043 0304 	orr.w	r3, r3, #4
 8003972:	6013      	str	r3, [r2, #0]
 8003974:	4b0d      	ldr	r3, [pc, #52]	; (80039ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f023 0201 	bic.w	r2, r3, #1
 800397c:	490b      	ldr	r1, [pc, #44]	; (80039ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	4313      	orrs	r3, r2
 8003982:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003984:	4b09      	ldr	r3, [pc, #36]	; (80039ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	429a      	cmp	r2, r3
 8003990:	d001      	beq.n	8003996 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e000      	b.n	8003998 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	371c      	adds	r7, #28
 800399c:	46bd      	mov	sp, r7
 800399e:	bc80      	pop	{r7}
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	40023800 	.word	0x40023800
 80039a8:	40007000 	.word	0x40007000
 80039ac:	40023c00 	.word	0x40023c00

080039b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e042      	b.n	8003a48 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d106      	bne.n	80039dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7fe fb76 	bl	80020c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2224      	movs	r2, #36	; 0x24
 80039e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68da      	ldr	r2, [r3, #12]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 fb89 	bl	800410c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	691a      	ldr	r2, [r3, #16]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	695a      	ldr	r2, [r3, #20]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68da      	ldr	r2, [r3, #12]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2220      	movs	r2, #32
 8003a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b08a      	sub	sp, #40	; 0x28
 8003a54:	af02      	add	r7, sp, #8
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	603b      	str	r3, [r7, #0]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a60:	2300      	movs	r3, #0
 8003a62:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b20      	cmp	r3, #32
 8003a6e:	d16d      	bne.n	8003b4c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <HAL_UART_Transmit+0x2c>
 8003a76:	88fb      	ldrh	r3, [r7, #6]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e066      	b.n	8003b4e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2221      	movs	r2, #33	; 0x21
 8003a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a8e:	f7fe fdb3 	bl	80025f8 <HAL_GetTick>
 8003a92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	88fa      	ldrh	r2, [r7, #6]
 8003a98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	88fa      	ldrh	r2, [r7, #6]
 8003a9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aa8:	d108      	bne.n	8003abc <HAL_UART_Transmit+0x6c>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d104      	bne.n	8003abc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	61bb      	str	r3, [r7, #24]
 8003aba:	e003      	b.n	8003ac4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ac4:	e02a      	b.n	8003b1c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	2200      	movs	r2, #0
 8003ace:	2180      	movs	r1, #128	; 0x80
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f000 f989 	bl	8003de8 <UART_WaitOnFlagUntilTimeout>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e036      	b.n	8003b4e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10b      	bne.n	8003afe <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	881b      	ldrh	r3, [r3, #0]
 8003aea:	461a      	mov	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003af4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	3302      	adds	r3, #2
 8003afa:	61bb      	str	r3, [r7, #24]
 8003afc:	e007      	b.n	8003b0e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	781a      	ldrb	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1cf      	bne.n	8003ac6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	2140      	movs	r1, #64	; 0x40
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f000 f959 	bl	8003de8 <UART_WaitOnFlagUntilTimeout>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d001      	beq.n	8003b40 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e006      	b.n	8003b4e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2220      	movs	r2, #32
 8003b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	e000      	b.n	8003b4e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003b4c:	2302      	movs	r3, #2
  }
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3720      	adds	r7, #32
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b084      	sub	sp, #16
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	60f8      	str	r0, [r7, #12]
 8003b5e:	60b9      	str	r1, [r7, #8]
 8003b60:	4613      	mov	r3, r2
 8003b62:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b20      	cmp	r3, #32
 8003b6e:	d112      	bne.n	8003b96 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d002      	beq.n	8003b7c <HAL_UART_Receive_DMA+0x26>
 8003b76:	88fb      	ldrh	r3, [r7, #6]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e00b      	b.n	8003b98 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003b86:	88fb      	ldrh	r3, [r7, #6]
 8003b88:	461a      	mov	r2, r3
 8003b8a:	68b9      	ldr	r1, [r7, #8]
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f000 f999 	bl	8003ec4 <UART_Start_Receive_DMA>
 8003b92:	4603      	mov	r3, r0
 8003b94:	e000      	b.n	8003b98 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003b96:	2302      	movs	r3, #2
  }
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bc80      	pop	{r7}
 8003bb0:	4770      	bx	lr

08003bb2 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b083      	sub	sp, #12
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003bba:	bf00      	nop
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bc80      	pop	{r7}
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bc80      	pop	{r7}
 8003bd4:	4770      	bx	lr

08003bd6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b083      	sub	sp, #12
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
 8003bde:	460b      	mov	r3, r1
 8003be0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003be2:	bf00      	nop
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bc80      	pop	{r7}
 8003bea:	4770      	bx	lr

08003bec <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b09c      	sub	sp, #112	; 0x70
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf8:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0320 	and.w	r3, r3, #32
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d172      	bne.n	8003cee <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	330c      	adds	r3, #12
 8003c14:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c18:	e853 3f00 	ldrex	r3, [r3]
 8003c1c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c24:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	330c      	adds	r3, #12
 8003c2c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003c2e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c30:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c32:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c36:	e841 2300 	strex	r3, r2, [r1]
 8003c3a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003c3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1e5      	bne.n	8003c0e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	3314      	adds	r3, #20
 8003c48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c4c:	e853 3f00 	ldrex	r3, [r3]
 8003c50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c54:	f023 0301 	bic.w	r3, r3, #1
 8003c58:	667b      	str	r3, [r7, #100]	; 0x64
 8003c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	3314      	adds	r3, #20
 8003c60:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003c62:	647a      	str	r2, [r7, #68]	; 0x44
 8003c64:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c6a:	e841 2300 	strex	r3, r2, [r1]
 8003c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1e5      	bne.n	8003c42 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	3314      	adds	r3, #20
 8003c7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	e853 3f00 	ldrex	r3, [r3]
 8003c84:	623b      	str	r3, [r7, #32]
   return(result);
 8003c86:	6a3b      	ldr	r3, [r7, #32]
 8003c88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c8c:	663b      	str	r3, [r7, #96]	; 0x60
 8003c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	3314      	adds	r3, #20
 8003c94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c96:	633a      	str	r2, [r7, #48]	; 0x30
 8003c98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c9e:	e841 2300 	strex	r3, r2, [r1]
 8003ca2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1e5      	bne.n	8003c76 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003caa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cac:	2220      	movs	r2, #32
 8003cae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d119      	bne.n	8003cee <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	330c      	adds	r3, #12
 8003cc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	e853 3f00 	ldrex	r3, [r3]
 8003cc8:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f023 0310 	bic.w	r3, r3, #16
 8003cd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	330c      	adds	r3, #12
 8003cd8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003cda:	61fa      	str	r2, [r7, #28]
 8003cdc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cde:	69b9      	ldr	r1, [r7, #24]
 8003ce0:	69fa      	ldr	r2, [r7, #28]
 8003ce2:	e841 2300 	strex	r3, r2, [r1]
 8003ce6:	617b      	str	r3, [r7, #20]
   return(result);
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1e5      	bne.n	8003cba <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d106      	bne.n	8003d0a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cfe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d00:	4619      	mov	r1, r3
 8003d02:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003d04:	f7ff ff67 	bl	8003bd6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003d08:	e002      	b.n	8003d10 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003d0a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003d0c:	f7ff ff48 	bl	8003ba0 <HAL_UART_RxCpltCallback>
}
 8003d10:	bf00      	nop
 8003d12:	3770      	adds	r7, #112	; 0x70
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d24:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d108      	bne.n	8003d46 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d38:	085b      	lsrs	r3, r3, #1
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f7ff ff49 	bl	8003bd6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003d44:	e002      	b.n	8003d4c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f7ff ff33 	bl	8003bb2 <HAL_UART_RxHalfCpltCallback>
}
 8003d4c:	bf00      	nop
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d64:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d70:	2b80      	cmp	r3, #128	; 0x80
 8003d72:	bf0c      	ite	eq
 8003d74:	2301      	moveq	r3, #1
 8003d76:	2300      	movne	r3, #0
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b21      	cmp	r3, #33	; 0x21
 8003d86:	d108      	bne.n	8003d9a <UART_DMAError+0x46>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d005      	beq.n	8003d9a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	2200      	movs	r2, #0
 8003d92:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003d94:	68b8      	ldr	r0, [r7, #8]
 8003d96:	f000 f92f 	bl	8003ff8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da4:	2b40      	cmp	r3, #64	; 0x40
 8003da6:	bf0c      	ite	eq
 8003da8:	2301      	moveq	r3, #1
 8003daa:	2300      	movne	r3, #0
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b22      	cmp	r3, #34	; 0x22
 8003dba:	d108      	bne.n	8003dce <UART_DMAError+0x7a>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d005      	beq.n	8003dce <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003dc8:	68b8      	ldr	r0, [r7, #8]
 8003dca:	f000 f93c 	bl	8004046 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd2:	f043 0210 	orr.w	r2, r3, #16
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dda:	68b8      	ldr	r0, [r7, #8]
 8003ddc:	f7ff fef2 	bl	8003bc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003de0:	bf00      	nop
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b090      	sub	sp, #64	; 0x40
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	603b      	str	r3, [r7, #0]
 8003df4:	4613      	mov	r3, r2
 8003df6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003df8:	e050      	b.n	8003e9c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e00:	d04c      	beq.n	8003e9c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d007      	beq.n	8003e18 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e08:	f7fe fbf6 	bl	80025f8 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d241      	bcs.n	8003e9c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	330c      	adds	r3, #12
 8003e1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e22:	e853 3f00 	ldrex	r3, [r3]
 8003e26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	330c      	adds	r3, #12
 8003e36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e38:	637a      	str	r2, [r7, #52]	; 0x34
 8003e3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e40:	e841 2300 	strex	r3, r2, [r1]
 8003e44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1e5      	bne.n	8003e18 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	3314      	adds	r3, #20
 8003e52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	e853 3f00 	ldrex	r3, [r3]
 8003e5a:	613b      	str	r3, [r7, #16]
   return(result);
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	f023 0301 	bic.w	r3, r3, #1
 8003e62:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	3314      	adds	r3, #20
 8003e6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e6c:	623a      	str	r2, [r7, #32]
 8003e6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e70:	69f9      	ldr	r1, [r7, #28]
 8003e72:	6a3a      	ldr	r2, [r7, #32]
 8003e74:	e841 2300 	strex	r3, r2, [r1]
 8003e78:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1e5      	bne.n	8003e4c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e00f      	b.n	8003ebc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	bf0c      	ite	eq
 8003eac:	2301      	moveq	r3, #1
 8003eae:	2300      	movne	r3, #0
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	79fb      	ldrb	r3, [r7, #7]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d09f      	beq.n	8003dfa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3740      	adds	r7, #64	; 0x40
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b098      	sub	sp, #96	; 0x60
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	88fa      	ldrh	r2, [r7, #6]
 8003edc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2222      	movs	r2, #34	; 0x22
 8003ee8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef0:	4a3e      	ldr	r2, [pc, #248]	; (8003fec <UART_Start_Receive_DMA+0x128>)
 8003ef2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef8:	4a3d      	ldr	r2, [pc, #244]	; (8003ff0 <UART_Start_Receive_DMA+0x12c>)
 8003efa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f00:	4a3c      	ldr	r2, [pc, #240]	; (8003ff4 <UART_Start_Receive_DMA+0x130>)
 8003f02:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f08:	2200      	movs	r2, #0
 8003f0a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003f0c:	f107 0308 	add.w	r3, r7, #8
 8003f10:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	3304      	adds	r3, #4
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	88fb      	ldrh	r3, [r7, #6]
 8003f24:	f7fe fd16 	bl	8002954 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003f28:	2300      	movs	r3, #0
 8003f2a:	613b      	str	r3, [r7, #16]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	613b      	str	r3, [r7, #16]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	613b      	str	r3, [r7, #16]
 8003f3c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d019      	beq.n	8003f7a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	330c      	adds	r3, #12
 8003f4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f50:	e853 3f00 	ldrex	r3, [r3]
 8003f54:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	330c      	adds	r3, #12
 8003f64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f66:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003f68:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003f6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f6e:	e841 2300 	strex	r3, r2, [r1]
 8003f72:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003f74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1e5      	bne.n	8003f46 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	3314      	adds	r3, #20
 8003f80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f84:	e853 3f00 	ldrex	r3, [r3]
 8003f88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8c:	f043 0301 	orr.w	r3, r3, #1
 8003f90:	657b      	str	r3, [r7, #84]	; 0x54
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	3314      	adds	r3, #20
 8003f98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003f9a:	63ba      	str	r2, [r7, #56]	; 0x38
 8003f9c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003fa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fa2:	e841 2300 	strex	r3, r2, [r1]
 8003fa6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1e5      	bne.n	8003f7a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	3314      	adds	r3, #20
 8003fb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	e853 3f00 	ldrex	r3, [r3]
 8003fbc:	617b      	str	r3, [r7, #20]
   return(result);
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fc4:	653b      	str	r3, [r7, #80]	; 0x50
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	3314      	adds	r3, #20
 8003fcc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003fce:	627a      	str	r2, [r7, #36]	; 0x24
 8003fd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd2:	6a39      	ldr	r1, [r7, #32]
 8003fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fd6:	e841 2300 	strex	r3, r2, [r1]
 8003fda:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1e5      	bne.n	8003fae <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3760      	adds	r7, #96	; 0x60
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	08003bed 	.word	0x08003bed
 8003ff0:	08003d19 	.word	0x08003d19
 8003ff4:	08003d55 	.word	0x08003d55

08003ff8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b089      	sub	sp, #36	; 0x24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	330c      	adds	r3, #12
 8004006:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	e853 3f00 	ldrex	r3, [r3]
 800400e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004016:	61fb      	str	r3, [r7, #28]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	330c      	adds	r3, #12
 800401e:	69fa      	ldr	r2, [r7, #28]
 8004020:	61ba      	str	r2, [r7, #24]
 8004022:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004024:	6979      	ldr	r1, [r7, #20]
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	e841 2300 	strex	r3, r2, [r1]
 800402c:	613b      	str	r3, [r7, #16]
   return(result);
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1e5      	bne.n	8004000 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2220      	movs	r2, #32
 8004038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800403c:	bf00      	nop
 800403e:	3724      	adds	r7, #36	; 0x24
 8004040:	46bd      	mov	sp, r7
 8004042:	bc80      	pop	{r7}
 8004044:	4770      	bx	lr

08004046 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004046:	b480      	push	{r7}
 8004048:	b095      	sub	sp, #84	; 0x54
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	330c      	adds	r3, #12
 8004054:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004058:	e853 3f00 	ldrex	r3, [r3]
 800405c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800405e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004060:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004064:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	330c      	adds	r3, #12
 800406c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800406e:	643a      	str	r2, [r7, #64]	; 0x40
 8004070:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004072:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004074:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004076:	e841 2300 	strex	r3, r2, [r1]
 800407a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800407c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1e5      	bne.n	800404e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	3314      	adds	r3, #20
 8004088:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408a:	6a3b      	ldr	r3, [r7, #32]
 800408c:	e853 3f00 	ldrex	r3, [r3]
 8004090:	61fb      	str	r3, [r7, #28]
   return(result);
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	f023 0301 	bic.w	r3, r3, #1
 8004098:	64bb      	str	r3, [r7, #72]	; 0x48
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	3314      	adds	r3, #20
 80040a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040aa:	e841 2300 	strex	r3, r2, [r1]
 80040ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1e5      	bne.n	8004082 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d119      	bne.n	80040f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	330c      	adds	r3, #12
 80040c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	e853 3f00 	ldrex	r3, [r3]
 80040cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	f023 0310 	bic.w	r3, r3, #16
 80040d4:	647b      	str	r3, [r7, #68]	; 0x44
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	330c      	adds	r3, #12
 80040dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040de:	61ba      	str	r2, [r7, #24]
 80040e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e2:	6979      	ldr	r1, [r7, #20]
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	e841 2300 	strex	r3, r2, [r1]
 80040ea:	613b      	str	r3, [r7, #16]
   return(result);
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1e5      	bne.n	80040be <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2220      	movs	r2, #32
 80040f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004100:	bf00      	nop
 8004102:	3754      	adds	r7, #84	; 0x54
 8004104:	46bd      	mov	sp, r7
 8004106:	bc80      	pop	{r7}
 8004108:	4770      	bx	lr
	...

0800410c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68da      	ldr	r2, [r3, #12]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	430a      	orrs	r2, r1
 8004128:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689a      	ldr	r2, [r3, #8]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	431a      	orrs	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	695b      	ldr	r3, [r3, #20]
 8004138:	431a      	orrs	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	4313      	orrs	r3, r2
 8004140:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800414c:	f023 030c 	bic.w	r3, r3, #12
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	6812      	ldr	r2, [r2, #0]
 8004154:	68b9      	ldr	r1, [r7, #8]
 8004156:	430b      	orrs	r3, r1
 8004158:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	699a      	ldr	r2, [r3, #24]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	430a      	orrs	r2, r1
 800416e:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a55      	ldr	r2, [pc, #340]	; (80042cc <UART_SetConfig+0x1c0>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d103      	bne.n	8004182 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800417a:	f7ff fba5 	bl	80038c8 <HAL_RCC_GetPCLK2Freq>
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	e002      	b.n	8004188 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004182:	f7ff fb8d 	bl	80038a0 <HAL_RCC_GetPCLK1Freq>
 8004186:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	69db      	ldr	r3, [r3, #28]
 800418c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004190:	d14c      	bne.n	800422c <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	4613      	mov	r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	4413      	add	r3, r2
 800419a:	009a      	lsls	r2, r3, #2
 800419c:	441a      	add	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a8:	4a49      	ldr	r2, [pc, #292]	; (80042d0 <UART_SetConfig+0x1c4>)
 80041aa:	fba2 2303 	umull	r2, r3, r2, r3
 80041ae:	095b      	lsrs	r3, r3, #5
 80041b0:	0119      	lsls	r1, r3, #4
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	4613      	mov	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	009a      	lsls	r2, r3, #2
 80041bc:	441a      	add	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	005b      	lsls	r3, r3, #1
 80041c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80041c8:	4b41      	ldr	r3, [pc, #260]	; (80042d0 <UART_SetConfig+0x1c4>)
 80041ca:	fba3 0302 	umull	r0, r3, r3, r2
 80041ce:	095b      	lsrs	r3, r3, #5
 80041d0:	2064      	movs	r0, #100	; 0x64
 80041d2:	fb00 f303 	mul.w	r3, r0, r3
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	00db      	lsls	r3, r3, #3
 80041da:	3332      	adds	r3, #50	; 0x32
 80041dc:	4a3c      	ldr	r2, [pc, #240]	; (80042d0 <UART_SetConfig+0x1c4>)
 80041de:	fba2 2303 	umull	r2, r3, r2, r3
 80041e2:	095b      	lsrs	r3, r3, #5
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041ea:	4419      	add	r1, r3
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	4613      	mov	r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	4413      	add	r3, r2
 80041f4:	009a      	lsls	r2, r3, #2
 80041f6:	441a      	add	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	005b      	lsls	r3, r3, #1
 80041fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8004202:	4b33      	ldr	r3, [pc, #204]	; (80042d0 <UART_SetConfig+0x1c4>)
 8004204:	fba3 0302 	umull	r0, r3, r3, r2
 8004208:	095b      	lsrs	r3, r3, #5
 800420a:	2064      	movs	r0, #100	; 0x64
 800420c:	fb00 f303 	mul.w	r3, r0, r3
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	00db      	lsls	r3, r3, #3
 8004214:	3332      	adds	r3, #50	; 0x32
 8004216:	4a2e      	ldr	r2, [pc, #184]	; (80042d0 <UART_SetConfig+0x1c4>)
 8004218:	fba2 2303 	umull	r2, r3, r2, r3
 800421c:	095b      	lsrs	r3, r3, #5
 800421e:	f003 0207 	and.w	r2, r3, #7
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	440a      	add	r2, r1
 8004228:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800422a:	e04a      	b.n	80042c2 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	4613      	mov	r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	4413      	add	r3, r2
 8004234:	009a      	lsls	r2, r3, #2
 8004236:	441a      	add	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004242:	4a23      	ldr	r2, [pc, #140]	; (80042d0 <UART_SetConfig+0x1c4>)
 8004244:	fba2 2303 	umull	r2, r3, r2, r3
 8004248:	095b      	lsrs	r3, r3, #5
 800424a:	0119      	lsls	r1, r3, #4
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	4613      	mov	r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	4413      	add	r3, r2
 8004254:	009a      	lsls	r2, r3, #2
 8004256:	441a      	add	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004262:	4b1b      	ldr	r3, [pc, #108]	; (80042d0 <UART_SetConfig+0x1c4>)
 8004264:	fba3 0302 	umull	r0, r3, r3, r2
 8004268:	095b      	lsrs	r3, r3, #5
 800426a:	2064      	movs	r0, #100	; 0x64
 800426c:	fb00 f303 	mul.w	r3, r0, r3
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	011b      	lsls	r3, r3, #4
 8004274:	3332      	adds	r3, #50	; 0x32
 8004276:	4a16      	ldr	r2, [pc, #88]	; (80042d0 <UART_SetConfig+0x1c4>)
 8004278:	fba2 2303 	umull	r2, r3, r2, r3
 800427c:	095b      	lsrs	r3, r3, #5
 800427e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004282:	4419      	add	r1, r3
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	4613      	mov	r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	4413      	add	r3, r2
 800428c:	009a      	lsls	r2, r3, #2
 800428e:	441a      	add	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	fbb2 f2f3 	udiv	r2, r2, r3
 800429a:	4b0d      	ldr	r3, [pc, #52]	; (80042d0 <UART_SetConfig+0x1c4>)
 800429c:	fba3 0302 	umull	r0, r3, r3, r2
 80042a0:	095b      	lsrs	r3, r3, #5
 80042a2:	2064      	movs	r0, #100	; 0x64
 80042a4:	fb00 f303 	mul.w	r3, r0, r3
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	011b      	lsls	r3, r3, #4
 80042ac:	3332      	adds	r3, #50	; 0x32
 80042ae:	4a08      	ldr	r2, [pc, #32]	; (80042d0 <UART_SetConfig+0x1c4>)
 80042b0:	fba2 2303 	umull	r2, r3, r2, r3
 80042b4:	095b      	lsrs	r3, r3, #5
 80042b6:	f003 020f 	and.w	r2, r3, #15
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	440a      	add	r2, r1
 80042c0:	609a      	str	r2, [r3, #8]
}
 80042c2:	bf00      	nop
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	40013800 	.word	0x40013800
 80042d0:	51eb851f 	.word	0x51eb851f

080042d4 <atoi>:
 80042d4:	220a      	movs	r2, #10
 80042d6:	2100      	movs	r1, #0
 80042d8:	f000 b9f0 	b.w	80046bc <strtol>

080042dc <__errno>:
 80042dc:	4b01      	ldr	r3, [pc, #4]	; (80042e4 <__errno+0x8>)
 80042de:	6818      	ldr	r0, [r3, #0]
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	2000000c 	.word	0x2000000c

080042e8 <__libc_init_array>:
 80042e8:	b570      	push	{r4, r5, r6, lr}
 80042ea:	2600      	movs	r6, #0
 80042ec:	4d0c      	ldr	r5, [pc, #48]	; (8004320 <__libc_init_array+0x38>)
 80042ee:	4c0d      	ldr	r4, [pc, #52]	; (8004324 <__libc_init_array+0x3c>)
 80042f0:	1b64      	subs	r4, r4, r5
 80042f2:	10a4      	asrs	r4, r4, #2
 80042f4:	42a6      	cmp	r6, r4
 80042f6:	d109      	bne.n	800430c <__libc_init_array+0x24>
 80042f8:	f001 fa60 	bl	80057bc <_init>
 80042fc:	2600      	movs	r6, #0
 80042fe:	4d0a      	ldr	r5, [pc, #40]	; (8004328 <__libc_init_array+0x40>)
 8004300:	4c0a      	ldr	r4, [pc, #40]	; (800432c <__libc_init_array+0x44>)
 8004302:	1b64      	subs	r4, r4, r5
 8004304:	10a4      	asrs	r4, r4, #2
 8004306:	42a6      	cmp	r6, r4
 8004308:	d105      	bne.n	8004316 <__libc_init_array+0x2e>
 800430a:	bd70      	pop	{r4, r5, r6, pc}
 800430c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004310:	4798      	blx	r3
 8004312:	3601      	adds	r6, #1
 8004314:	e7ee      	b.n	80042f4 <__libc_init_array+0xc>
 8004316:	f855 3b04 	ldr.w	r3, [r5], #4
 800431a:	4798      	blx	r3
 800431c:	3601      	adds	r6, #1
 800431e:	e7f2      	b.n	8004306 <__libc_init_array+0x1e>
 8004320:	080061d0 	.word	0x080061d0
 8004324:	080061d0 	.word	0x080061d0
 8004328:	080061d0 	.word	0x080061d0
 800432c:	080061d4 	.word	0x080061d4

08004330 <__itoa>:
 8004330:	1e93      	subs	r3, r2, #2
 8004332:	2b22      	cmp	r3, #34	; 0x22
 8004334:	b510      	push	{r4, lr}
 8004336:	460c      	mov	r4, r1
 8004338:	d904      	bls.n	8004344 <__itoa+0x14>
 800433a:	2300      	movs	r3, #0
 800433c:	461c      	mov	r4, r3
 800433e:	700b      	strb	r3, [r1, #0]
 8004340:	4620      	mov	r0, r4
 8004342:	bd10      	pop	{r4, pc}
 8004344:	2a0a      	cmp	r2, #10
 8004346:	d109      	bne.n	800435c <__itoa+0x2c>
 8004348:	2800      	cmp	r0, #0
 800434a:	da07      	bge.n	800435c <__itoa+0x2c>
 800434c:	232d      	movs	r3, #45	; 0x2d
 800434e:	700b      	strb	r3, [r1, #0]
 8004350:	2101      	movs	r1, #1
 8004352:	4240      	negs	r0, r0
 8004354:	4421      	add	r1, r4
 8004356:	f000 f9d5 	bl	8004704 <__utoa>
 800435a:	e7f1      	b.n	8004340 <__itoa+0x10>
 800435c:	2100      	movs	r1, #0
 800435e:	e7f9      	b.n	8004354 <__itoa+0x24>

08004360 <itoa>:
 8004360:	f7ff bfe6 	b.w	8004330 <__itoa>

08004364 <memset>:
 8004364:	4603      	mov	r3, r0
 8004366:	4402      	add	r2, r0
 8004368:	4293      	cmp	r3, r2
 800436a:	d100      	bne.n	800436e <memset+0xa>
 800436c:	4770      	bx	lr
 800436e:	f803 1b01 	strb.w	r1, [r3], #1
 8004372:	e7f9      	b.n	8004368 <memset+0x4>

08004374 <iprintf>:
 8004374:	b40f      	push	{r0, r1, r2, r3}
 8004376:	4b0a      	ldr	r3, [pc, #40]	; (80043a0 <iprintf+0x2c>)
 8004378:	b513      	push	{r0, r1, r4, lr}
 800437a:	681c      	ldr	r4, [r3, #0]
 800437c:	b124      	cbz	r4, 8004388 <iprintf+0x14>
 800437e:	69a3      	ldr	r3, [r4, #24]
 8004380:	b913      	cbnz	r3, 8004388 <iprintf+0x14>
 8004382:	4620      	mov	r0, r4
 8004384:	f000 fbf4 	bl	8004b70 <__sinit>
 8004388:	ab05      	add	r3, sp, #20
 800438a:	4620      	mov	r0, r4
 800438c:	9a04      	ldr	r2, [sp, #16]
 800438e:	68a1      	ldr	r1, [r4, #8]
 8004390:	9301      	str	r3, [sp, #4]
 8004392:	f000 fe23 	bl	8004fdc <_vfiprintf_r>
 8004396:	b002      	add	sp, #8
 8004398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800439c:	b004      	add	sp, #16
 800439e:	4770      	bx	lr
 80043a0:	2000000c 	.word	0x2000000c

080043a4 <_puts_r>:
 80043a4:	b570      	push	{r4, r5, r6, lr}
 80043a6:	460e      	mov	r6, r1
 80043a8:	4605      	mov	r5, r0
 80043aa:	b118      	cbz	r0, 80043b4 <_puts_r+0x10>
 80043ac:	6983      	ldr	r3, [r0, #24]
 80043ae:	b90b      	cbnz	r3, 80043b4 <_puts_r+0x10>
 80043b0:	f000 fbde 	bl	8004b70 <__sinit>
 80043b4:	69ab      	ldr	r3, [r5, #24]
 80043b6:	68ac      	ldr	r4, [r5, #8]
 80043b8:	b913      	cbnz	r3, 80043c0 <_puts_r+0x1c>
 80043ba:	4628      	mov	r0, r5
 80043bc:	f000 fbd8 	bl	8004b70 <__sinit>
 80043c0:	4b2c      	ldr	r3, [pc, #176]	; (8004474 <_puts_r+0xd0>)
 80043c2:	429c      	cmp	r4, r3
 80043c4:	d120      	bne.n	8004408 <_puts_r+0x64>
 80043c6:	686c      	ldr	r4, [r5, #4]
 80043c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043ca:	07db      	lsls	r3, r3, #31
 80043cc:	d405      	bmi.n	80043da <_puts_r+0x36>
 80043ce:	89a3      	ldrh	r3, [r4, #12]
 80043d0:	0598      	lsls	r0, r3, #22
 80043d2:	d402      	bmi.n	80043da <_puts_r+0x36>
 80043d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043d6:	f000 fc8e 	bl	8004cf6 <__retarget_lock_acquire_recursive>
 80043da:	89a3      	ldrh	r3, [r4, #12]
 80043dc:	0719      	lsls	r1, r3, #28
 80043de:	d51d      	bpl.n	800441c <_puts_r+0x78>
 80043e0:	6923      	ldr	r3, [r4, #16]
 80043e2:	b1db      	cbz	r3, 800441c <_puts_r+0x78>
 80043e4:	3e01      	subs	r6, #1
 80043e6:	68a3      	ldr	r3, [r4, #8]
 80043e8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80043ec:	3b01      	subs	r3, #1
 80043ee:	60a3      	str	r3, [r4, #8]
 80043f0:	bb39      	cbnz	r1, 8004442 <_puts_r+0x9e>
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	da38      	bge.n	8004468 <_puts_r+0xc4>
 80043f6:	4622      	mov	r2, r4
 80043f8:	210a      	movs	r1, #10
 80043fa:	4628      	mov	r0, r5
 80043fc:	f000 f9c4 	bl	8004788 <__swbuf_r>
 8004400:	3001      	adds	r0, #1
 8004402:	d011      	beq.n	8004428 <_puts_r+0x84>
 8004404:	250a      	movs	r5, #10
 8004406:	e011      	b.n	800442c <_puts_r+0x88>
 8004408:	4b1b      	ldr	r3, [pc, #108]	; (8004478 <_puts_r+0xd4>)
 800440a:	429c      	cmp	r4, r3
 800440c:	d101      	bne.n	8004412 <_puts_r+0x6e>
 800440e:	68ac      	ldr	r4, [r5, #8]
 8004410:	e7da      	b.n	80043c8 <_puts_r+0x24>
 8004412:	4b1a      	ldr	r3, [pc, #104]	; (800447c <_puts_r+0xd8>)
 8004414:	429c      	cmp	r4, r3
 8004416:	bf08      	it	eq
 8004418:	68ec      	ldreq	r4, [r5, #12]
 800441a:	e7d5      	b.n	80043c8 <_puts_r+0x24>
 800441c:	4621      	mov	r1, r4
 800441e:	4628      	mov	r0, r5
 8004420:	f000 fa04 	bl	800482c <__swsetup_r>
 8004424:	2800      	cmp	r0, #0
 8004426:	d0dd      	beq.n	80043e4 <_puts_r+0x40>
 8004428:	f04f 35ff 	mov.w	r5, #4294967295
 800442c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800442e:	07da      	lsls	r2, r3, #31
 8004430:	d405      	bmi.n	800443e <_puts_r+0x9a>
 8004432:	89a3      	ldrh	r3, [r4, #12]
 8004434:	059b      	lsls	r3, r3, #22
 8004436:	d402      	bmi.n	800443e <_puts_r+0x9a>
 8004438:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800443a:	f000 fc5d 	bl	8004cf8 <__retarget_lock_release_recursive>
 800443e:	4628      	mov	r0, r5
 8004440:	bd70      	pop	{r4, r5, r6, pc}
 8004442:	2b00      	cmp	r3, #0
 8004444:	da04      	bge.n	8004450 <_puts_r+0xac>
 8004446:	69a2      	ldr	r2, [r4, #24]
 8004448:	429a      	cmp	r2, r3
 800444a:	dc06      	bgt.n	800445a <_puts_r+0xb6>
 800444c:	290a      	cmp	r1, #10
 800444e:	d004      	beq.n	800445a <_puts_r+0xb6>
 8004450:	6823      	ldr	r3, [r4, #0]
 8004452:	1c5a      	adds	r2, r3, #1
 8004454:	6022      	str	r2, [r4, #0]
 8004456:	7019      	strb	r1, [r3, #0]
 8004458:	e7c5      	b.n	80043e6 <_puts_r+0x42>
 800445a:	4622      	mov	r2, r4
 800445c:	4628      	mov	r0, r5
 800445e:	f000 f993 	bl	8004788 <__swbuf_r>
 8004462:	3001      	adds	r0, #1
 8004464:	d1bf      	bne.n	80043e6 <_puts_r+0x42>
 8004466:	e7df      	b.n	8004428 <_puts_r+0x84>
 8004468:	250a      	movs	r5, #10
 800446a:	6823      	ldr	r3, [r4, #0]
 800446c:	1c5a      	adds	r2, r3, #1
 800446e:	6022      	str	r2, [r4, #0]
 8004470:	701d      	strb	r5, [r3, #0]
 8004472:	e7db      	b.n	800442c <_puts_r+0x88>
 8004474:	08006154 	.word	0x08006154
 8004478:	08006174 	.word	0x08006174
 800447c:	08006134 	.word	0x08006134

08004480 <puts>:
 8004480:	4b02      	ldr	r3, [pc, #8]	; (800448c <puts+0xc>)
 8004482:	4601      	mov	r1, r0
 8004484:	6818      	ldr	r0, [r3, #0]
 8004486:	f7ff bf8d 	b.w	80043a4 <_puts_r>
 800448a:	bf00      	nop
 800448c:	2000000c 	.word	0x2000000c

08004490 <srand>:
 8004490:	b538      	push	{r3, r4, r5, lr}
 8004492:	4b10      	ldr	r3, [pc, #64]	; (80044d4 <srand+0x44>)
 8004494:	4604      	mov	r4, r0
 8004496:	681d      	ldr	r5, [r3, #0]
 8004498:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800449a:	b9b3      	cbnz	r3, 80044ca <srand+0x3a>
 800449c:	2018      	movs	r0, #24
 800449e:	f000 fc91 	bl	8004dc4 <malloc>
 80044a2:	4602      	mov	r2, r0
 80044a4:	63a8      	str	r0, [r5, #56]	; 0x38
 80044a6:	b920      	cbnz	r0, 80044b2 <srand+0x22>
 80044a8:	2142      	movs	r1, #66	; 0x42
 80044aa:	4b0b      	ldr	r3, [pc, #44]	; (80044d8 <srand+0x48>)
 80044ac:	480b      	ldr	r0, [pc, #44]	; (80044dc <srand+0x4c>)
 80044ae:	f000 fa2b 	bl	8004908 <__assert_func>
 80044b2:	490b      	ldr	r1, [pc, #44]	; (80044e0 <srand+0x50>)
 80044b4:	4b0b      	ldr	r3, [pc, #44]	; (80044e4 <srand+0x54>)
 80044b6:	e9c0 1300 	strd	r1, r3, [r0]
 80044ba:	4b0b      	ldr	r3, [pc, #44]	; (80044e8 <srand+0x58>)
 80044bc:	2100      	movs	r1, #0
 80044be:	6083      	str	r3, [r0, #8]
 80044c0:	230b      	movs	r3, #11
 80044c2:	8183      	strh	r3, [r0, #12]
 80044c4:	2001      	movs	r0, #1
 80044c6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80044ca:	2200      	movs	r2, #0
 80044cc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80044ce:	611c      	str	r4, [r3, #16]
 80044d0:	615a      	str	r2, [r3, #20]
 80044d2:	bd38      	pop	{r3, r4, r5, pc}
 80044d4:	2000000c 	.word	0x2000000c
 80044d8:	08005f60 	.word	0x08005f60
 80044dc:	08005f77 	.word	0x08005f77
 80044e0:	abcd330e 	.word	0xabcd330e
 80044e4:	e66d1234 	.word	0xe66d1234
 80044e8:	0005deec 	.word	0x0005deec

080044ec <rand>:
 80044ec:	4b16      	ldr	r3, [pc, #88]	; (8004548 <rand+0x5c>)
 80044ee:	b510      	push	{r4, lr}
 80044f0:	681c      	ldr	r4, [r3, #0]
 80044f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80044f4:	b9b3      	cbnz	r3, 8004524 <rand+0x38>
 80044f6:	2018      	movs	r0, #24
 80044f8:	f000 fc64 	bl	8004dc4 <malloc>
 80044fc:	4602      	mov	r2, r0
 80044fe:	63a0      	str	r0, [r4, #56]	; 0x38
 8004500:	b920      	cbnz	r0, 800450c <rand+0x20>
 8004502:	214e      	movs	r1, #78	; 0x4e
 8004504:	4b11      	ldr	r3, [pc, #68]	; (800454c <rand+0x60>)
 8004506:	4812      	ldr	r0, [pc, #72]	; (8004550 <rand+0x64>)
 8004508:	f000 f9fe 	bl	8004908 <__assert_func>
 800450c:	4911      	ldr	r1, [pc, #68]	; (8004554 <rand+0x68>)
 800450e:	4b12      	ldr	r3, [pc, #72]	; (8004558 <rand+0x6c>)
 8004510:	e9c0 1300 	strd	r1, r3, [r0]
 8004514:	4b11      	ldr	r3, [pc, #68]	; (800455c <rand+0x70>)
 8004516:	2100      	movs	r1, #0
 8004518:	6083      	str	r3, [r0, #8]
 800451a:	230b      	movs	r3, #11
 800451c:	8183      	strh	r3, [r0, #12]
 800451e:	2001      	movs	r0, #1
 8004520:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004524:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8004526:	4a0e      	ldr	r2, [pc, #56]	; (8004560 <rand+0x74>)
 8004528:	6920      	ldr	r0, [r4, #16]
 800452a:	6963      	ldr	r3, [r4, #20]
 800452c:	4342      	muls	r2, r0
 800452e:	490d      	ldr	r1, [pc, #52]	; (8004564 <rand+0x78>)
 8004530:	fb01 2203 	mla	r2, r1, r3, r2
 8004534:	fba0 0101 	umull	r0, r1, r0, r1
 8004538:	1c43      	adds	r3, r0, #1
 800453a:	eb42 0001 	adc.w	r0, r2, r1
 800453e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8004542:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004546:	bd10      	pop	{r4, pc}
 8004548:	2000000c 	.word	0x2000000c
 800454c:	08005f60 	.word	0x08005f60
 8004550:	08005f77 	.word	0x08005f77
 8004554:	abcd330e 	.word	0xabcd330e
 8004558:	e66d1234 	.word	0xe66d1234
 800455c:	0005deec 	.word	0x0005deec
 8004560:	5851f42d 	.word	0x5851f42d
 8004564:	4c957f2d 	.word	0x4c957f2d

08004568 <strcat>:
 8004568:	4602      	mov	r2, r0
 800456a:	b510      	push	{r4, lr}
 800456c:	7814      	ldrb	r4, [r2, #0]
 800456e:	4613      	mov	r3, r2
 8004570:	3201      	adds	r2, #1
 8004572:	2c00      	cmp	r4, #0
 8004574:	d1fa      	bne.n	800456c <strcat+0x4>
 8004576:	3b01      	subs	r3, #1
 8004578:	f811 2b01 	ldrb.w	r2, [r1], #1
 800457c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004580:	2a00      	cmp	r2, #0
 8004582:	d1f9      	bne.n	8004578 <strcat+0x10>
 8004584:	bd10      	pop	{r4, pc}

08004586 <strcpy>:
 8004586:	4603      	mov	r3, r0
 8004588:	f811 2b01 	ldrb.w	r2, [r1], #1
 800458c:	f803 2b01 	strb.w	r2, [r3], #1
 8004590:	2a00      	cmp	r2, #0
 8004592:	d1f9      	bne.n	8004588 <strcpy+0x2>
 8004594:	4770      	bx	lr

08004596 <strstr>:
 8004596:	780a      	ldrb	r2, [r1, #0]
 8004598:	b570      	push	{r4, r5, r6, lr}
 800459a:	b96a      	cbnz	r2, 80045b8 <strstr+0x22>
 800459c:	bd70      	pop	{r4, r5, r6, pc}
 800459e:	429a      	cmp	r2, r3
 80045a0:	d109      	bne.n	80045b6 <strstr+0x20>
 80045a2:	460c      	mov	r4, r1
 80045a4:	4605      	mov	r5, r0
 80045a6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d0f6      	beq.n	800459c <strstr+0x6>
 80045ae:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80045b2:	429e      	cmp	r6, r3
 80045b4:	d0f7      	beq.n	80045a6 <strstr+0x10>
 80045b6:	3001      	adds	r0, #1
 80045b8:	7803      	ldrb	r3, [r0, #0]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1ef      	bne.n	800459e <strstr+0x8>
 80045be:	4618      	mov	r0, r3
 80045c0:	e7ec      	b.n	800459c <strstr+0x6>
	...

080045c4 <_strtol_l.constprop.0>:
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045ca:	4680      	mov	r8, r0
 80045cc:	d001      	beq.n	80045d2 <_strtol_l.constprop.0+0xe>
 80045ce:	2b24      	cmp	r3, #36	; 0x24
 80045d0:	d906      	bls.n	80045e0 <_strtol_l.constprop.0+0x1c>
 80045d2:	f7ff fe83 	bl	80042dc <__errno>
 80045d6:	2316      	movs	r3, #22
 80045d8:	6003      	str	r3, [r0, #0]
 80045da:	2000      	movs	r0, #0
 80045dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045e0:	460d      	mov	r5, r1
 80045e2:	4f35      	ldr	r7, [pc, #212]	; (80046b8 <_strtol_l.constprop.0+0xf4>)
 80045e4:	4628      	mov	r0, r5
 80045e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80045ea:	5de6      	ldrb	r6, [r4, r7]
 80045ec:	f016 0608 	ands.w	r6, r6, #8
 80045f0:	d1f8      	bne.n	80045e4 <_strtol_l.constprop.0+0x20>
 80045f2:	2c2d      	cmp	r4, #45	; 0x2d
 80045f4:	d12f      	bne.n	8004656 <_strtol_l.constprop.0+0x92>
 80045f6:	2601      	movs	r6, #1
 80045f8:	782c      	ldrb	r4, [r5, #0]
 80045fa:	1c85      	adds	r5, r0, #2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d057      	beq.n	80046b0 <_strtol_l.constprop.0+0xec>
 8004600:	2b10      	cmp	r3, #16
 8004602:	d109      	bne.n	8004618 <_strtol_l.constprop.0+0x54>
 8004604:	2c30      	cmp	r4, #48	; 0x30
 8004606:	d107      	bne.n	8004618 <_strtol_l.constprop.0+0x54>
 8004608:	7828      	ldrb	r0, [r5, #0]
 800460a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800460e:	2858      	cmp	r0, #88	; 0x58
 8004610:	d149      	bne.n	80046a6 <_strtol_l.constprop.0+0xe2>
 8004612:	2310      	movs	r3, #16
 8004614:	786c      	ldrb	r4, [r5, #1]
 8004616:	3502      	adds	r5, #2
 8004618:	2700      	movs	r7, #0
 800461a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800461e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8004622:	fbbe f9f3 	udiv	r9, lr, r3
 8004626:	4638      	mov	r0, r7
 8004628:	fb03 ea19 	mls	sl, r3, r9, lr
 800462c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004630:	f1bc 0f09 	cmp.w	ip, #9
 8004634:	d814      	bhi.n	8004660 <_strtol_l.constprop.0+0x9c>
 8004636:	4664      	mov	r4, ip
 8004638:	42a3      	cmp	r3, r4
 800463a:	dd22      	ble.n	8004682 <_strtol_l.constprop.0+0xbe>
 800463c:	2f00      	cmp	r7, #0
 800463e:	db1d      	blt.n	800467c <_strtol_l.constprop.0+0xb8>
 8004640:	4581      	cmp	r9, r0
 8004642:	d31b      	bcc.n	800467c <_strtol_l.constprop.0+0xb8>
 8004644:	d101      	bne.n	800464a <_strtol_l.constprop.0+0x86>
 8004646:	45a2      	cmp	sl, r4
 8004648:	db18      	blt.n	800467c <_strtol_l.constprop.0+0xb8>
 800464a:	2701      	movs	r7, #1
 800464c:	fb00 4003 	mla	r0, r0, r3, r4
 8004650:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004654:	e7ea      	b.n	800462c <_strtol_l.constprop.0+0x68>
 8004656:	2c2b      	cmp	r4, #43	; 0x2b
 8004658:	bf04      	itt	eq
 800465a:	782c      	ldrbeq	r4, [r5, #0]
 800465c:	1c85      	addeq	r5, r0, #2
 800465e:	e7cd      	b.n	80045fc <_strtol_l.constprop.0+0x38>
 8004660:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004664:	f1bc 0f19 	cmp.w	ip, #25
 8004668:	d801      	bhi.n	800466e <_strtol_l.constprop.0+0xaa>
 800466a:	3c37      	subs	r4, #55	; 0x37
 800466c:	e7e4      	b.n	8004638 <_strtol_l.constprop.0+0x74>
 800466e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004672:	f1bc 0f19 	cmp.w	ip, #25
 8004676:	d804      	bhi.n	8004682 <_strtol_l.constprop.0+0xbe>
 8004678:	3c57      	subs	r4, #87	; 0x57
 800467a:	e7dd      	b.n	8004638 <_strtol_l.constprop.0+0x74>
 800467c:	f04f 37ff 	mov.w	r7, #4294967295
 8004680:	e7e6      	b.n	8004650 <_strtol_l.constprop.0+0x8c>
 8004682:	2f00      	cmp	r7, #0
 8004684:	da07      	bge.n	8004696 <_strtol_l.constprop.0+0xd2>
 8004686:	2322      	movs	r3, #34	; 0x22
 8004688:	4670      	mov	r0, lr
 800468a:	f8c8 3000 	str.w	r3, [r8]
 800468e:	2a00      	cmp	r2, #0
 8004690:	d0a4      	beq.n	80045dc <_strtol_l.constprop.0+0x18>
 8004692:	1e69      	subs	r1, r5, #1
 8004694:	e005      	b.n	80046a2 <_strtol_l.constprop.0+0xde>
 8004696:	b106      	cbz	r6, 800469a <_strtol_l.constprop.0+0xd6>
 8004698:	4240      	negs	r0, r0
 800469a:	2a00      	cmp	r2, #0
 800469c:	d09e      	beq.n	80045dc <_strtol_l.constprop.0+0x18>
 800469e:	2f00      	cmp	r7, #0
 80046a0:	d1f7      	bne.n	8004692 <_strtol_l.constprop.0+0xce>
 80046a2:	6011      	str	r1, [r2, #0]
 80046a4:	e79a      	b.n	80045dc <_strtol_l.constprop.0+0x18>
 80046a6:	2430      	movs	r4, #48	; 0x30
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1b5      	bne.n	8004618 <_strtol_l.constprop.0+0x54>
 80046ac:	2308      	movs	r3, #8
 80046ae:	e7b3      	b.n	8004618 <_strtol_l.constprop.0+0x54>
 80046b0:	2c30      	cmp	r4, #48	; 0x30
 80046b2:	d0a9      	beq.n	8004608 <_strtol_l.constprop.0+0x44>
 80046b4:	230a      	movs	r3, #10
 80046b6:	e7af      	b.n	8004618 <_strtol_l.constprop.0+0x54>
 80046b8:	08006034 	.word	0x08006034

080046bc <strtol>:
 80046bc:	4613      	mov	r3, r2
 80046be:	460a      	mov	r2, r1
 80046c0:	4601      	mov	r1, r0
 80046c2:	4802      	ldr	r0, [pc, #8]	; (80046cc <strtol+0x10>)
 80046c4:	6800      	ldr	r0, [r0, #0]
 80046c6:	f7ff bf7d 	b.w	80045c4 <_strtol_l.constprop.0>
 80046ca:	bf00      	nop
 80046cc:	2000000c 	.word	0x2000000c

080046d0 <time>:
 80046d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80046d2:	4b0b      	ldr	r3, [pc, #44]	; (8004700 <time+0x30>)
 80046d4:	4604      	mov	r4, r0
 80046d6:	2200      	movs	r2, #0
 80046d8:	4669      	mov	r1, sp
 80046da:	6818      	ldr	r0, [r3, #0]
 80046dc:	f000 faf8 	bl	8004cd0 <_gettimeofday_r>
 80046e0:	2800      	cmp	r0, #0
 80046e2:	da05      	bge.n	80046f0 <time+0x20>
 80046e4:	f04f 32ff 	mov.w	r2, #4294967295
 80046e8:	f04f 33ff 	mov.w	r3, #4294967295
 80046ec:	e9cd 2300 	strd	r2, r3, [sp]
 80046f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80046f4:	b10c      	cbz	r4, 80046fa <time+0x2a>
 80046f6:	e9c4 0100 	strd	r0, r1, [r4]
 80046fa:	b004      	add	sp, #16
 80046fc:	bd10      	pop	{r4, pc}
 80046fe:	bf00      	nop
 8004700:	2000000c 	.word	0x2000000c

08004704 <__utoa>:
 8004704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004706:	b08b      	sub	sp, #44	; 0x2c
 8004708:	4605      	mov	r5, r0
 800470a:	460b      	mov	r3, r1
 800470c:	466e      	mov	r6, sp
 800470e:	4c1d      	ldr	r4, [pc, #116]	; (8004784 <__utoa+0x80>)
 8004710:	f104 0c20 	add.w	ip, r4, #32
 8004714:	4637      	mov	r7, r6
 8004716:	6820      	ldr	r0, [r4, #0]
 8004718:	6861      	ldr	r1, [r4, #4]
 800471a:	3408      	adds	r4, #8
 800471c:	c703      	stmia	r7!, {r0, r1}
 800471e:	4564      	cmp	r4, ip
 8004720:	463e      	mov	r6, r7
 8004722:	d1f7      	bne.n	8004714 <__utoa+0x10>
 8004724:	7921      	ldrb	r1, [r4, #4]
 8004726:	6820      	ldr	r0, [r4, #0]
 8004728:	7139      	strb	r1, [r7, #4]
 800472a:	1e91      	subs	r1, r2, #2
 800472c:	2922      	cmp	r1, #34	; 0x22
 800472e:	6038      	str	r0, [r7, #0]
 8004730:	f04f 0100 	mov.w	r1, #0
 8004734:	d904      	bls.n	8004740 <__utoa+0x3c>
 8004736:	7019      	strb	r1, [r3, #0]
 8004738:	460b      	mov	r3, r1
 800473a:	4618      	mov	r0, r3
 800473c:	b00b      	add	sp, #44	; 0x2c
 800473e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004740:	1e58      	subs	r0, r3, #1
 8004742:	4684      	mov	ip, r0
 8004744:	fbb5 f7f2 	udiv	r7, r5, r2
 8004748:	fb02 5617 	mls	r6, r2, r7, r5
 800474c:	3628      	adds	r6, #40	; 0x28
 800474e:	446e      	add	r6, sp
 8004750:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8004754:	460c      	mov	r4, r1
 8004756:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800475a:	462e      	mov	r6, r5
 800475c:	42b2      	cmp	r2, r6
 800475e:	463d      	mov	r5, r7
 8004760:	f101 0101 	add.w	r1, r1, #1
 8004764:	d9ee      	bls.n	8004744 <__utoa+0x40>
 8004766:	2200      	movs	r2, #0
 8004768:	545a      	strb	r2, [r3, r1]
 800476a:	1919      	adds	r1, r3, r4
 800476c:	1aa5      	subs	r5, r4, r2
 800476e:	42aa      	cmp	r2, r5
 8004770:	dae3      	bge.n	800473a <__utoa+0x36>
 8004772:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004776:	780e      	ldrb	r6, [r1, #0]
 8004778:	3201      	adds	r2, #1
 800477a:	7006      	strb	r6, [r0, #0]
 800477c:	f801 5901 	strb.w	r5, [r1], #-1
 8004780:	e7f4      	b.n	800476c <__utoa+0x68>
 8004782:	bf00      	nop
 8004784:	08005fd2 	.word	0x08005fd2

08004788 <__swbuf_r>:
 8004788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800478a:	460e      	mov	r6, r1
 800478c:	4614      	mov	r4, r2
 800478e:	4605      	mov	r5, r0
 8004790:	b118      	cbz	r0, 800479a <__swbuf_r+0x12>
 8004792:	6983      	ldr	r3, [r0, #24]
 8004794:	b90b      	cbnz	r3, 800479a <__swbuf_r+0x12>
 8004796:	f000 f9eb 	bl	8004b70 <__sinit>
 800479a:	4b21      	ldr	r3, [pc, #132]	; (8004820 <__swbuf_r+0x98>)
 800479c:	429c      	cmp	r4, r3
 800479e:	d12b      	bne.n	80047f8 <__swbuf_r+0x70>
 80047a0:	686c      	ldr	r4, [r5, #4]
 80047a2:	69a3      	ldr	r3, [r4, #24]
 80047a4:	60a3      	str	r3, [r4, #8]
 80047a6:	89a3      	ldrh	r3, [r4, #12]
 80047a8:	071a      	lsls	r2, r3, #28
 80047aa:	d52f      	bpl.n	800480c <__swbuf_r+0x84>
 80047ac:	6923      	ldr	r3, [r4, #16]
 80047ae:	b36b      	cbz	r3, 800480c <__swbuf_r+0x84>
 80047b0:	6923      	ldr	r3, [r4, #16]
 80047b2:	6820      	ldr	r0, [r4, #0]
 80047b4:	b2f6      	uxtb	r6, r6
 80047b6:	1ac0      	subs	r0, r0, r3
 80047b8:	6963      	ldr	r3, [r4, #20]
 80047ba:	4637      	mov	r7, r6
 80047bc:	4283      	cmp	r3, r0
 80047be:	dc04      	bgt.n	80047ca <__swbuf_r+0x42>
 80047c0:	4621      	mov	r1, r4
 80047c2:	4628      	mov	r0, r5
 80047c4:	f000 f940 	bl	8004a48 <_fflush_r>
 80047c8:	bb30      	cbnz	r0, 8004818 <__swbuf_r+0x90>
 80047ca:	68a3      	ldr	r3, [r4, #8]
 80047cc:	3001      	adds	r0, #1
 80047ce:	3b01      	subs	r3, #1
 80047d0:	60a3      	str	r3, [r4, #8]
 80047d2:	6823      	ldr	r3, [r4, #0]
 80047d4:	1c5a      	adds	r2, r3, #1
 80047d6:	6022      	str	r2, [r4, #0]
 80047d8:	701e      	strb	r6, [r3, #0]
 80047da:	6963      	ldr	r3, [r4, #20]
 80047dc:	4283      	cmp	r3, r0
 80047de:	d004      	beq.n	80047ea <__swbuf_r+0x62>
 80047e0:	89a3      	ldrh	r3, [r4, #12]
 80047e2:	07db      	lsls	r3, r3, #31
 80047e4:	d506      	bpl.n	80047f4 <__swbuf_r+0x6c>
 80047e6:	2e0a      	cmp	r6, #10
 80047e8:	d104      	bne.n	80047f4 <__swbuf_r+0x6c>
 80047ea:	4621      	mov	r1, r4
 80047ec:	4628      	mov	r0, r5
 80047ee:	f000 f92b 	bl	8004a48 <_fflush_r>
 80047f2:	b988      	cbnz	r0, 8004818 <__swbuf_r+0x90>
 80047f4:	4638      	mov	r0, r7
 80047f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047f8:	4b0a      	ldr	r3, [pc, #40]	; (8004824 <__swbuf_r+0x9c>)
 80047fa:	429c      	cmp	r4, r3
 80047fc:	d101      	bne.n	8004802 <__swbuf_r+0x7a>
 80047fe:	68ac      	ldr	r4, [r5, #8]
 8004800:	e7cf      	b.n	80047a2 <__swbuf_r+0x1a>
 8004802:	4b09      	ldr	r3, [pc, #36]	; (8004828 <__swbuf_r+0xa0>)
 8004804:	429c      	cmp	r4, r3
 8004806:	bf08      	it	eq
 8004808:	68ec      	ldreq	r4, [r5, #12]
 800480a:	e7ca      	b.n	80047a2 <__swbuf_r+0x1a>
 800480c:	4621      	mov	r1, r4
 800480e:	4628      	mov	r0, r5
 8004810:	f000 f80c 	bl	800482c <__swsetup_r>
 8004814:	2800      	cmp	r0, #0
 8004816:	d0cb      	beq.n	80047b0 <__swbuf_r+0x28>
 8004818:	f04f 37ff 	mov.w	r7, #4294967295
 800481c:	e7ea      	b.n	80047f4 <__swbuf_r+0x6c>
 800481e:	bf00      	nop
 8004820:	08006154 	.word	0x08006154
 8004824:	08006174 	.word	0x08006174
 8004828:	08006134 	.word	0x08006134

0800482c <__swsetup_r>:
 800482c:	4b32      	ldr	r3, [pc, #200]	; (80048f8 <__swsetup_r+0xcc>)
 800482e:	b570      	push	{r4, r5, r6, lr}
 8004830:	681d      	ldr	r5, [r3, #0]
 8004832:	4606      	mov	r6, r0
 8004834:	460c      	mov	r4, r1
 8004836:	b125      	cbz	r5, 8004842 <__swsetup_r+0x16>
 8004838:	69ab      	ldr	r3, [r5, #24]
 800483a:	b913      	cbnz	r3, 8004842 <__swsetup_r+0x16>
 800483c:	4628      	mov	r0, r5
 800483e:	f000 f997 	bl	8004b70 <__sinit>
 8004842:	4b2e      	ldr	r3, [pc, #184]	; (80048fc <__swsetup_r+0xd0>)
 8004844:	429c      	cmp	r4, r3
 8004846:	d10f      	bne.n	8004868 <__swsetup_r+0x3c>
 8004848:	686c      	ldr	r4, [r5, #4]
 800484a:	89a3      	ldrh	r3, [r4, #12]
 800484c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004850:	0719      	lsls	r1, r3, #28
 8004852:	d42c      	bmi.n	80048ae <__swsetup_r+0x82>
 8004854:	06dd      	lsls	r5, r3, #27
 8004856:	d411      	bmi.n	800487c <__swsetup_r+0x50>
 8004858:	2309      	movs	r3, #9
 800485a:	6033      	str	r3, [r6, #0]
 800485c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004860:	f04f 30ff 	mov.w	r0, #4294967295
 8004864:	81a3      	strh	r3, [r4, #12]
 8004866:	e03e      	b.n	80048e6 <__swsetup_r+0xba>
 8004868:	4b25      	ldr	r3, [pc, #148]	; (8004900 <__swsetup_r+0xd4>)
 800486a:	429c      	cmp	r4, r3
 800486c:	d101      	bne.n	8004872 <__swsetup_r+0x46>
 800486e:	68ac      	ldr	r4, [r5, #8]
 8004870:	e7eb      	b.n	800484a <__swsetup_r+0x1e>
 8004872:	4b24      	ldr	r3, [pc, #144]	; (8004904 <__swsetup_r+0xd8>)
 8004874:	429c      	cmp	r4, r3
 8004876:	bf08      	it	eq
 8004878:	68ec      	ldreq	r4, [r5, #12]
 800487a:	e7e6      	b.n	800484a <__swsetup_r+0x1e>
 800487c:	0758      	lsls	r0, r3, #29
 800487e:	d512      	bpl.n	80048a6 <__swsetup_r+0x7a>
 8004880:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004882:	b141      	cbz	r1, 8004896 <__swsetup_r+0x6a>
 8004884:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004888:	4299      	cmp	r1, r3
 800488a:	d002      	beq.n	8004892 <__swsetup_r+0x66>
 800488c:	4630      	mov	r0, r6
 800488e:	f000 faa1 	bl	8004dd4 <_free_r>
 8004892:	2300      	movs	r3, #0
 8004894:	6363      	str	r3, [r4, #52]	; 0x34
 8004896:	89a3      	ldrh	r3, [r4, #12]
 8004898:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800489c:	81a3      	strh	r3, [r4, #12]
 800489e:	2300      	movs	r3, #0
 80048a0:	6063      	str	r3, [r4, #4]
 80048a2:	6923      	ldr	r3, [r4, #16]
 80048a4:	6023      	str	r3, [r4, #0]
 80048a6:	89a3      	ldrh	r3, [r4, #12]
 80048a8:	f043 0308 	orr.w	r3, r3, #8
 80048ac:	81a3      	strh	r3, [r4, #12]
 80048ae:	6923      	ldr	r3, [r4, #16]
 80048b0:	b94b      	cbnz	r3, 80048c6 <__swsetup_r+0x9a>
 80048b2:	89a3      	ldrh	r3, [r4, #12]
 80048b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80048b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048bc:	d003      	beq.n	80048c6 <__swsetup_r+0x9a>
 80048be:	4621      	mov	r1, r4
 80048c0:	4630      	mov	r0, r6
 80048c2:	f000 fa3f 	bl	8004d44 <__smakebuf_r>
 80048c6:	89a0      	ldrh	r0, [r4, #12]
 80048c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80048cc:	f010 0301 	ands.w	r3, r0, #1
 80048d0:	d00a      	beq.n	80048e8 <__swsetup_r+0xbc>
 80048d2:	2300      	movs	r3, #0
 80048d4:	60a3      	str	r3, [r4, #8]
 80048d6:	6963      	ldr	r3, [r4, #20]
 80048d8:	425b      	negs	r3, r3
 80048da:	61a3      	str	r3, [r4, #24]
 80048dc:	6923      	ldr	r3, [r4, #16]
 80048de:	b943      	cbnz	r3, 80048f2 <__swsetup_r+0xc6>
 80048e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80048e4:	d1ba      	bne.n	800485c <__swsetup_r+0x30>
 80048e6:	bd70      	pop	{r4, r5, r6, pc}
 80048e8:	0781      	lsls	r1, r0, #30
 80048ea:	bf58      	it	pl
 80048ec:	6963      	ldrpl	r3, [r4, #20]
 80048ee:	60a3      	str	r3, [r4, #8]
 80048f0:	e7f4      	b.n	80048dc <__swsetup_r+0xb0>
 80048f2:	2000      	movs	r0, #0
 80048f4:	e7f7      	b.n	80048e6 <__swsetup_r+0xba>
 80048f6:	bf00      	nop
 80048f8:	2000000c 	.word	0x2000000c
 80048fc:	08006154 	.word	0x08006154
 8004900:	08006174 	.word	0x08006174
 8004904:	08006134 	.word	0x08006134

08004908 <__assert_func>:
 8004908:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800490a:	4614      	mov	r4, r2
 800490c:	461a      	mov	r2, r3
 800490e:	4b09      	ldr	r3, [pc, #36]	; (8004934 <__assert_func+0x2c>)
 8004910:	4605      	mov	r5, r0
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68d8      	ldr	r0, [r3, #12]
 8004916:	b14c      	cbz	r4, 800492c <__assert_func+0x24>
 8004918:	4b07      	ldr	r3, [pc, #28]	; (8004938 <__assert_func+0x30>)
 800491a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800491e:	9100      	str	r1, [sp, #0]
 8004920:	462b      	mov	r3, r5
 8004922:	4906      	ldr	r1, [pc, #24]	; (800493c <__assert_func+0x34>)
 8004924:	f000 f9a2 	bl	8004c6c <fiprintf>
 8004928:	f000 fe84 	bl	8005634 <abort>
 800492c:	4b04      	ldr	r3, [pc, #16]	; (8004940 <__assert_func+0x38>)
 800492e:	461c      	mov	r4, r3
 8004930:	e7f3      	b.n	800491a <__assert_func+0x12>
 8004932:	bf00      	nop
 8004934:	2000000c 	.word	0x2000000c
 8004938:	08005ff7 	.word	0x08005ff7
 800493c:	08006004 	.word	0x08006004
 8004940:	08006032 	.word	0x08006032

08004944 <__sflush_r>:
 8004944:	898a      	ldrh	r2, [r1, #12]
 8004946:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004948:	4605      	mov	r5, r0
 800494a:	0710      	lsls	r0, r2, #28
 800494c:	460c      	mov	r4, r1
 800494e:	d457      	bmi.n	8004a00 <__sflush_r+0xbc>
 8004950:	684b      	ldr	r3, [r1, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	dc04      	bgt.n	8004960 <__sflush_r+0x1c>
 8004956:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004958:	2b00      	cmp	r3, #0
 800495a:	dc01      	bgt.n	8004960 <__sflush_r+0x1c>
 800495c:	2000      	movs	r0, #0
 800495e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004960:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004962:	2e00      	cmp	r6, #0
 8004964:	d0fa      	beq.n	800495c <__sflush_r+0x18>
 8004966:	2300      	movs	r3, #0
 8004968:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800496c:	682f      	ldr	r7, [r5, #0]
 800496e:	602b      	str	r3, [r5, #0]
 8004970:	d032      	beq.n	80049d8 <__sflush_r+0x94>
 8004972:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004974:	89a3      	ldrh	r3, [r4, #12]
 8004976:	075a      	lsls	r2, r3, #29
 8004978:	d505      	bpl.n	8004986 <__sflush_r+0x42>
 800497a:	6863      	ldr	r3, [r4, #4]
 800497c:	1ac0      	subs	r0, r0, r3
 800497e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004980:	b10b      	cbz	r3, 8004986 <__sflush_r+0x42>
 8004982:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004984:	1ac0      	subs	r0, r0, r3
 8004986:	2300      	movs	r3, #0
 8004988:	4602      	mov	r2, r0
 800498a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800498c:	4628      	mov	r0, r5
 800498e:	6a21      	ldr	r1, [r4, #32]
 8004990:	47b0      	blx	r6
 8004992:	1c43      	adds	r3, r0, #1
 8004994:	89a3      	ldrh	r3, [r4, #12]
 8004996:	d106      	bne.n	80049a6 <__sflush_r+0x62>
 8004998:	6829      	ldr	r1, [r5, #0]
 800499a:	291d      	cmp	r1, #29
 800499c:	d82c      	bhi.n	80049f8 <__sflush_r+0xb4>
 800499e:	4a29      	ldr	r2, [pc, #164]	; (8004a44 <__sflush_r+0x100>)
 80049a0:	40ca      	lsrs	r2, r1
 80049a2:	07d6      	lsls	r6, r2, #31
 80049a4:	d528      	bpl.n	80049f8 <__sflush_r+0xb4>
 80049a6:	2200      	movs	r2, #0
 80049a8:	6062      	str	r2, [r4, #4]
 80049aa:	6922      	ldr	r2, [r4, #16]
 80049ac:	04d9      	lsls	r1, r3, #19
 80049ae:	6022      	str	r2, [r4, #0]
 80049b0:	d504      	bpl.n	80049bc <__sflush_r+0x78>
 80049b2:	1c42      	adds	r2, r0, #1
 80049b4:	d101      	bne.n	80049ba <__sflush_r+0x76>
 80049b6:	682b      	ldr	r3, [r5, #0]
 80049b8:	b903      	cbnz	r3, 80049bc <__sflush_r+0x78>
 80049ba:	6560      	str	r0, [r4, #84]	; 0x54
 80049bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049be:	602f      	str	r7, [r5, #0]
 80049c0:	2900      	cmp	r1, #0
 80049c2:	d0cb      	beq.n	800495c <__sflush_r+0x18>
 80049c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049c8:	4299      	cmp	r1, r3
 80049ca:	d002      	beq.n	80049d2 <__sflush_r+0x8e>
 80049cc:	4628      	mov	r0, r5
 80049ce:	f000 fa01 	bl	8004dd4 <_free_r>
 80049d2:	2000      	movs	r0, #0
 80049d4:	6360      	str	r0, [r4, #52]	; 0x34
 80049d6:	e7c2      	b.n	800495e <__sflush_r+0x1a>
 80049d8:	6a21      	ldr	r1, [r4, #32]
 80049da:	2301      	movs	r3, #1
 80049dc:	4628      	mov	r0, r5
 80049de:	47b0      	blx	r6
 80049e0:	1c41      	adds	r1, r0, #1
 80049e2:	d1c7      	bne.n	8004974 <__sflush_r+0x30>
 80049e4:	682b      	ldr	r3, [r5, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0c4      	beq.n	8004974 <__sflush_r+0x30>
 80049ea:	2b1d      	cmp	r3, #29
 80049ec:	d001      	beq.n	80049f2 <__sflush_r+0xae>
 80049ee:	2b16      	cmp	r3, #22
 80049f0:	d101      	bne.n	80049f6 <__sflush_r+0xb2>
 80049f2:	602f      	str	r7, [r5, #0]
 80049f4:	e7b2      	b.n	800495c <__sflush_r+0x18>
 80049f6:	89a3      	ldrh	r3, [r4, #12]
 80049f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049fc:	81a3      	strh	r3, [r4, #12]
 80049fe:	e7ae      	b.n	800495e <__sflush_r+0x1a>
 8004a00:	690f      	ldr	r7, [r1, #16]
 8004a02:	2f00      	cmp	r7, #0
 8004a04:	d0aa      	beq.n	800495c <__sflush_r+0x18>
 8004a06:	0793      	lsls	r3, r2, #30
 8004a08:	bf18      	it	ne
 8004a0a:	2300      	movne	r3, #0
 8004a0c:	680e      	ldr	r6, [r1, #0]
 8004a0e:	bf08      	it	eq
 8004a10:	694b      	ldreq	r3, [r1, #20]
 8004a12:	1bf6      	subs	r6, r6, r7
 8004a14:	600f      	str	r7, [r1, #0]
 8004a16:	608b      	str	r3, [r1, #8]
 8004a18:	2e00      	cmp	r6, #0
 8004a1a:	dd9f      	ble.n	800495c <__sflush_r+0x18>
 8004a1c:	4633      	mov	r3, r6
 8004a1e:	463a      	mov	r2, r7
 8004a20:	4628      	mov	r0, r5
 8004a22:	6a21      	ldr	r1, [r4, #32]
 8004a24:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004a28:	47e0      	blx	ip
 8004a2a:	2800      	cmp	r0, #0
 8004a2c:	dc06      	bgt.n	8004a3c <__sflush_r+0xf8>
 8004a2e:	89a3      	ldrh	r3, [r4, #12]
 8004a30:	f04f 30ff 	mov.w	r0, #4294967295
 8004a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a38:	81a3      	strh	r3, [r4, #12]
 8004a3a:	e790      	b.n	800495e <__sflush_r+0x1a>
 8004a3c:	4407      	add	r7, r0
 8004a3e:	1a36      	subs	r6, r6, r0
 8004a40:	e7ea      	b.n	8004a18 <__sflush_r+0xd4>
 8004a42:	bf00      	nop
 8004a44:	20400001 	.word	0x20400001

08004a48 <_fflush_r>:
 8004a48:	b538      	push	{r3, r4, r5, lr}
 8004a4a:	690b      	ldr	r3, [r1, #16]
 8004a4c:	4605      	mov	r5, r0
 8004a4e:	460c      	mov	r4, r1
 8004a50:	b913      	cbnz	r3, 8004a58 <_fflush_r+0x10>
 8004a52:	2500      	movs	r5, #0
 8004a54:	4628      	mov	r0, r5
 8004a56:	bd38      	pop	{r3, r4, r5, pc}
 8004a58:	b118      	cbz	r0, 8004a62 <_fflush_r+0x1a>
 8004a5a:	6983      	ldr	r3, [r0, #24]
 8004a5c:	b90b      	cbnz	r3, 8004a62 <_fflush_r+0x1a>
 8004a5e:	f000 f887 	bl	8004b70 <__sinit>
 8004a62:	4b14      	ldr	r3, [pc, #80]	; (8004ab4 <_fflush_r+0x6c>)
 8004a64:	429c      	cmp	r4, r3
 8004a66:	d11b      	bne.n	8004aa0 <_fflush_r+0x58>
 8004a68:	686c      	ldr	r4, [r5, #4]
 8004a6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d0ef      	beq.n	8004a52 <_fflush_r+0xa>
 8004a72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004a74:	07d0      	lsls	r0, r2, #31
 8004a76:	d404      	bmi.n	8004a82 <_fflush_r+0x3a>
 8004a78:	0599      	lsls	r1, r3, #22
 8004a7a:	d402      	bmi.n	8004a82 <_fflush_r+0x3a>
 8004a7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a7e:	f000 f93a 	bl	8004cf6 <__retarget_lock_acquire_recursive>
 8004a82:	4628      	mov	r0, r5
 8004a84:	4621      	mov	r1, r4
 8004a86:	f7ff ff5d 	bl	8004944 <__sflush_r>
 8004a8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a8c:	4605      	mov	r5, r0
 8004a8e:	07da      	lsls	r2, r3, #31
 8004a90:	d4e0      	bmi.n	8004a54 <_fflush_r+0xc>
 8004a92:	89a3      	ldrh	r3, [r4, #12]
 8004a94:	059b      	lsls	r3, r3, #22
 8004a96:	d4dd      	bmi.n	8004a54 <_fflush_r+0xc>
 8004a98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a9a:	f000 f92d 	bl	8004cf8 <__retarget_lock_release_recursive>
 8004a9e:	e7d9      	b.n	8004a54 <_fflush_r+0xc>
 8004aa0:	4b05      	ldr	r3, [pc, #20]	; (8004ab8 <_fflush_r+0x70>)
 8004aa2:	429c      	cmp	r4, r3
 8004aa4:	d101      	bne.n	8004aaa <_fflush_r+0x62>
 8004aa6:	68ac      	ldr	r4, [r5, #8]
 8004aa8:	e7df      	b.n	8004a6a <_fflush_r+0x22>
 8004aaa:	4b04      	ldr	r3, [pc, #16]	; (8004abc <_fflush_r+0x74>)
 8004aac:	429c      	cmp	r4, r3
 8004aae:	bf08      	it	eq
 8004ab0:	68ec      	ldreq	r4, [r5, #12]
 8004ab2:	e7da      	b.n	8004a6a <_fflush_r+0x22>
 8004ab4:	08006154 	.word	0x08006154
 8004ab8:	08006174 	.word	0x08006174
 8004abc:	08006134 	.word	0x08006134

08004ac0 <std>:
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	b510      	push	{r4, lr}
 8004ac4:	4604      	mov	r4, r0
 8004ac6:	e9c0 3300 	strd	r3, r3, [r0]
 8004aca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ace:	6083      	str	r3, [r0, #8]
 8004ad0:	8181      	strh	r1, [r0, #12]
 8004ad2:	6643      	str	r3, [r0, #100]	; 0x64
 8004ad4:	81c2      	strh	r2, [r0, #14]
 8004ad6:	6183      	str	r3, [r0, #24]
 8004ad8:	4619      	mov	r1, r3
 8004ada:	2208      	movs	r2, #8
 8004adc:	305c      	adds	r0, #92	; 0x5c
 8004ade:	f7ff fc41 	bl	8004364 <memset>
 8004ae2:	4b05      	ldr	r3, [pc, #20]	; (8004af8 <std+0x38>)
 8004ae4:	6224      	str	r4, [r4, #32]
 8004ae6:	6263      	str	r3, [r4, #36]	; 0x24
 8004ae8:	4b04      	ldr	r3, [pc, #16]	; (8004afc <std+0x3c>)
 8004aea:	62a3      	str	r3, [r4, #40]	; 0x28
 8004aec:	4b04      	ldr	r3, [pc, #16]	; (8004b00 <std+0x40>)
 8004aee:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004af0:	4b04      	ldr	r3, [pc, #16]	; (8004b04 <std+0x44>)
 8004af2:	6323      	str	r3, [r4, #48]	; 0x30
 8004af4:	bd10      	pop	{r4, pc}
 8004af6:	bf00      	nop
 8004af8:	08005589 	.word	0x08005589
 8004afc:	080055ab 	.word	0x080055ab
 8004b00:	080055e3 	.word	0x080055e3
 8004b04:	08005607 	.word	0x08005607

08004b08 <_cleanup_r>:
 8004b08:	4901      	ldr	r1, [pc, #4]	; (8004b10 <_cleanup_r+0x8>)
 8004b0a:	f000 b8c1 	b.w	8004c90 <_fwalk_reent>
 8004b0e:	bf00      	nop
 8004b10:	08004a49 	.word	0x08004a49

08004b14 <__sfmoreglue>:
 8004b14:	2268      	movs	r2, #104	; 0x68
 8004b16:	b570      	push	{r4, r5, r6, lr}
 8004b18:	1e4d      	subs	r5, r1, #1
 8004b1a:	4355      	muls	r5, r2
 8004b1c:	460e      	mov	r6, r1
 8004b1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004b22:	f000 f9bf 	bl	8004ea4 <_malloc_r>
 8004b26:	4604      	mov	r4, r0
 8004b28:	b140      	cbz	r0, 8004b3c <__sfmoreglue+0x28>
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	e9c0 1600 	strd	r1, r6, [r0]
 8004b30:	300c      	adds	r0, #12
 8004b32:	60a0      	str	r0, [r4, #8]
 8004b34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004b38:	f7ff fc14 	bl	8004364 <memset>
 8004b3c:	4620      	mov	r0, r4
 8004b3e:	bd70      	pop	{r4, r5, r6, pc}

08004b40 <__sfp_lock_acquire>:
 8004b40:	4801      	ldr	r0, [pc, #4]	; (8004b48 <__sfp_lock_acquire+0x8>)
 8004b42:	f000 b8d8 	b.w	8004cf6 <__retarget_lock_acquire_recursive>
 8004b46:	bf00      	nop
 8004b48:	20000f11 	.word	0x20000f11

08004b4c <__sfp_lock_release>:
 8004b4c:	4801      	ldr	r0, [pc, #4]	; (8004b54 <__sfp_lock_release+0x8>)
 8004b4e:	f000 b8d3 	b.w	8004cf8 <__retarget_lock_release_recursive>
 8004b52:	bf00      	nop
 8004b54:	20000f11 	.word	0x20000f11

08004b58 <__sinit_lock_acquire>:
 8004b58:	4801      	ldr	r0, [pc, #4]	; (8004b60 <__sinit_lock_acquire+0x8>)
 8004b5a:	f000 b8cc 	b.w	8004cf6 <__retarget_lock_acquire_recursive>
 8004b5e:	bf00      	nop
 8004b60:	20000f12 	.word	0x20000f12

08004b64 <__sinit_lock_release>:
 8004b64:	4801      	ldr	r0, [pc, #4]	; (8004b6c <__sinit_lock_release+0x8>)
 8004b66:	f000 b8c7 	b.w	8004cf8 <__retarget_lock_release_recursive>
 8004b6a:	bf00      	nop
 8004b6c:	20000f12 	.word	0x20000f12

08004b70 <__sinit>:
 8004b70:	b510      	push	{r4, lr}
 8004b72:	4604      	mov	r4, r0
 8004b74:	f7ff fff0 	bl	8004b58 <__sinit_lock_acquire>
 8004b78:	69a3      	ldr	r3, [r4, #24]
 8004b7a:	b11b      	cbz	r3, 8004b84 <__sinit+0x14>
 8004b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b80:	f7ff bff0 	b.w	8004b64 <__sinit_lock_release>
 8004b84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004b88:	6523      	str	r3, [r4, #80]	; 0x50
 8004b8a:	4b13      	ldr	r3, [pc, #76]	; (8004bd8 <__sinit+0x68>)
 8004b8c:	4a13      	ldr	r2, [pc, #76]	; (8004bdc <__sinit+0x6c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	62a2      	str	r2, [r4, #40]	; 0x28
 8004b92:	42a3      	cmp	r3, r4
 8004b94:	bf08      	it	eq
 8004b96:	2301      	moveq	r3, #1
 8004b98:	4620      	mov	r0, r4
 8004b9a:	bf08      	it	eq
 8004b9c:	61a3      	streq	r3, [r4, #24]
 8004b9e:	f000 f81f 	bl	8004be0 <__sfp>
 8004ba2:	6060      	str	r0, [r4, #4]
 8004ba4:	4620      	mov	r0, r4
 8004ba6:	f000 f81b 	bl	8004be0 <__sfp>
 8004baa:	60a0      	str	r0, [r4, #8]
 8004bac:	4620      	mov	r0, r4
 8004bae:	f000 f817 	bl	8004be0 <__sfp>
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	2104      	movs	r1, #4
 8004bb6:	60e0      	str	r0, [r4, #12]
 8004bb8:	6860      	ldr	r0, [r4, #4]
 8004bba:	f7ff ff81 	bl	8004ac0 <std>
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	2109      	movs	r1, #9
 8004bc2:	68a0      	ldr	r0, [r4, #8]
 8004bc4:	f7ff ff7c 	bl	8004ac0 <std>
 8004bc8:	2202      	movs	r2, #2
 8004bca:	2112      	movs	r1, #18
 8004bcc:	68e0      	ldr	r0, [r4, #12]
 8004bce:	f7ff ff77 	bl	8004ac0 <std>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	61a3      	str	r3, [r4, #24]
 8004bd6:	e7d1      	b.n	8004b7c <__sinit+0xc>
 8004bd8:	08005f5c 	.word	0x08005f5c
 8004bdc:	08004b09 	.word	0x08004b09

08004be0 <__sfp>:
 8004be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004be2:	4607      	mov	r7, r0
 8004be4:	f7ff ffac 	bl	8004b40 <__sfp_lock_acquire>
 8004be8:	4b1e      	ldr	r3, [pc, #120]	; (8004c64 <__sfp+0x84>)
 8004bea:	681e      	ldr	r6, [r3, #0]
 8004bec:	69b3      	ldr	r3, [r6, #24]
 8004bee:	b913      	cbnz	r3, 8004bf6 <__sfp+0x16>
 8004bf0:	4630      	mov	r0, r6
 8004bf2:	f7ff ffbd 	bl	8004b70 <__sinit>
 8004bf6:	3648      	adds	r6, #72	; 0x48
 8004bf8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	d503      	bpl.n	8004c08 <__sfp+0x28>
 8004c00:	6833      	ldr	r3, [r6, #0]
 8004c02:	b30b      	cbz	r3, 8004c48 <__sfp+0x68>
 8004c04:	6836      	ldr	r6, [r6, #0]
 8004c06:	e7f7      	b.n	8004bf8 <__sfp+0x18>
 8004c08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004c0c:	b9d5      	cbnz	r5, 8004c44 <__sfp+0x64>
 8004c0e:	4b16      	ldr	r3, [pc, #88]	; (8004c68 <__sfp+0x88>)
 8004c10:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004c14:	60e3      	str	r3, [r4, #12]
 8004c16:	6665      	str	r5, [r4, #100]	; 0x64
 8004c18:	f000 f86c 	bl	8004cf4 <__retarget_lock_init_recursive>
 8004c1c:	f7ff ff96 	bl	8004b4c <__sfp_lock_release>
 8004c20:	2208      	movs	r2, #8
 8004c22:	4629      	mov	r1, r5
 8004c24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004c28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004c2c:	6025      	str	r5, [r4, #0]
 8004c2e:	61a5      	str	r5, [r4, #24]
 8004c30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004c34:	f7ff fb96 	bl	8004364 <memset>
 8004c38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004c3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004c40:	4620      	mov	r0, r4
 8004c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c44:	3468      	adds	r4, #104	; 0x68
 8004c46:	e7d9      	b.n	8004bfc <__sfp+0x1c>
 8004c48:	2104      	movs	r1, #4
 8004c4a:	4638      	mov	r0, r7
 8004c4c:	f7ff ff62 	bl	8004b14 <__sfmoreglue>
 8004c50:	4604      	mov	r4, r0
 8004c52:	6030      	str	r0, [r6, #0]
 8004c54:	2800      	cmp	r0, #0
 8004c56:	d1d5      	bne.n	8004c04 <__sfp+0x24>
 8004c58:	f7ff ff78 	bl	8004b4c <__sfp_lock_release>
 8004c5c:	230c      	movs	r3, #12
 8004c5e:	603b      	str	r3, [r7, #0]
 8004c60:	e7ee      	b.n	8004c40 <__sfp+0x60>
 8004c62:	bf00      	nop
 8004c64:	08005f5c 	.word	0x08005f5c
 8004c68:	ffff0001 	.word	0xffff0001

08004c6c <fiprintf>:
 8004c6c:	b40e      	push	{r1, r2, r3}
 8004c6e:	b503      	push	{r0, r1, lr}
 8004c70:	4601      	mov	r1, r0
 8004c72:	ab03      	add	r3, sp, #12
 8004c74:	4805      	ldr	r0, [pc, #20]	; (8004c8c <fiprintf+0x20>)
 8004c76:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c7a:	6800      	ldr	r0, [r0, #0]
 8004c7c:	9301      	str	r3, [sp, #4]
 8004c7e:	f000 f9ad 	bl	8004fdc <_vfiprintf_r>
 8004c82:	b002      	add	sp, #8
 8004c84:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c88:	b003      	add	sp, #12
 8004c8a:	4770      	bx	lr
 8004c8c:	2000000c 	.word	0x2000000c

08004c90 <_fwalk_reent>:
 8004c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c94:	4606      	mov	r6, r0
 8004c96:	4688      	mov	r8, r1
 8004c98:	2700      	movs	r7, #0
 8004c9a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004c9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ca2:	f1b9 0901 	subs.w	r9, r9, #1
 8004ca6:	d505      	bpl.n	8004cb4 <_fwalk_reent+0x24>
 8004ca8:	6824      	ldr	r4, [r4, #0]
 8004caa:	2c00      	cmp	r4, #0
 8004cac:	d1f7      	bne.n	8004c9e <_fwalk_reent+0xe>
 8004cae:	4638      	mov	r0, r7
 8004cb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cb4:	89ab      	ldrh	r3, [r5, #12]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d907      	bls.n	8004cca <_fwalk_reent+0x3a>
 8004cba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	d003      	beq.n	8004cca <_fwalk_reent+0x3a>
 8004cc2:	4629      	mov	r1, r5
 8004cc4:	4630      	mov	r0, r6
 8004cc6:	47c0      	blx	r8
 8004cc8:	4307      	orrs	r7, r0
 8004cca:	3568      	adds	r5, #104	; 0x68
 8004ccc:	e7e9      	b.n	8004ca2 <_fwalk_reent+0x12>
	...

08004cd0 <_gettimeofday_r>:
 8004cd0:	b538      	push	{r3, r4, r5, lr}
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	4d06      	ldr	r5, [pc, #24]	; (8004cf0 <_gettimeofday_r+0x20>)
 8004cd6:	4604      	mov	r4, r0
 8004cd8:	4608      	mov	r0, r1
 8004cda:	4611      	mov	r1, r2
 8004cdc:	602b      	str	r3, [r5, #0]
 8004cde:	f000 fd65 	bl	80057ac <_gettimeofday>
 8004ce2:	1c43      	adds	r3, r0, #1
 8004ce4:	d102      	bne.n	8004cec <_gettimeofday_r+0x1c>
 8004ce6:	682b      	ldr	r3, [r5, #0]
 8004ce8:	b103      	cbz	r3, 8004cec <_gettimeofday_r+0x1c>
 8004cea:	6023      	str	r3, [r4, #0]
 8004cec:	bd38      	pop	{r3, r4, r5, pc}
 8004cee:	bf00      	nop
 8004cf0:	20000f1c 	.word	0x20000f1c

08004cf4 <__retarget_lock_init_recursive>:
 8004cf4:	4770      	bx	lr

08004cf6 <__retarget_lock_acquire_recursive>:
 8004cf6:	4770      	bx	lr

08004cf8 <__retarget_lock_release_recursive>:
 8004cf8:	4770      	bx	lr

08004cfa <__swhatbuf_r>:
 8004cfa:	b570      	push	{r4, r5, r6, lr}
 8004cfc:	460e      	mov	r6, r1
 8004cfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d02:	4614      	mov	r4, r2
 8004d04:	2900      	cmp	r1, #0
 8004d06:	461d      	mov	r5, r3
 8004d08:	b096      	sub	sp, #88	; 0x58
 8004d0a:	da08      	bge.n	8004d1e <__swhatbuf_r+0x24>
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004d12:	602a      	str	r2, [r5, #0]
 8004d14:	061a      	lsls	r2, r3, #24
 8004d16:	d410      	bmi.n	8004d3a <__swhatbuf_r+0x40>
 8004d18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d1c:	e00e      	b.n	8004d3c <__swhatbuf_r+0x42>
 8004d1e:	466a      	mov	r2, sp
 8004d20:	f000 fca0 	bl	8005664 <_fstat_r>
 8004d24:	2800      	cmp	r0, #0
 8004d26:	dbf1      	blt.n	8004d0c <__swhatbuf_r+0x12>
 8004d28:	9a01      	ldr	r2, [sp, #4]
 8004d2a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004d2e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004d32:	425a      	negs	r2, r3
 8004d34:	415a      	adcs	r2, r3
 8004d36:	602a      	str	r2, [r5, #0]
 8004d38:	e7ee      	b.n	8004d18 <__swhatbuf_r+0x1e>
 8004d3a:	2340      	movs	r3, #64	; 0x40
 8004d3c:	2000      	movs	r0, #0
 8004d3e:	6023      	str	r3, [r4, #0]
 8004d40:	b016      	add	sp, #88	; 0x58
 8004d42:	bd70      	pop	{r4, r5, r6, pc}

08004d44 <__smakebuf_r>:
 8004d44:	898b      	ldrh	r3, [r1, #12]
 8004d46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d48:	079d      	lsls	r5, r3, #30
 8004d4a:	4606      	mov	r6, r0
 8004d4c:	460c      	mov	r4, r1
 8004d4e:	d507      	bpl.n	8004d60 <__smakebuf_r+0x1c>
 8004d50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004d54:	6023      	str	r3, [r4, #0]
 8004d56:	6123      	str	r3, [r4, #16]
 8004d58:	2301      	movs	r3, #1
 8004d5a:	6163      	str	r3, [r4, #20]
 8004d5c:	b002      	add	sp, #8
 8004d5e:	bd70      	pop	{r4, r5, r6, pc}
 8004d60:	466a      	mov	r2, sp
 8004d62:	ab01      	add	r3, sp, #4
 8004d64:	f7ff ffc9 	bl	8004cfa <__swhatbuf_r>
 8004d68:	9900      	ldr	r1, [sp, #0]
 8004d6a:	4605      	mov	r5, r0
 8004d6c:	4630      	mov	r0, r6
 8004d6e:	f000 f899 	bl	8004ea4 <_malloc_r>
 8004d72:	b948      	cbnz	r0, 8004d88 <__smakebuf_r+0x44>
 8004d74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d78:	059a      	lsls	r2, r3, #22
 8004d7a:	d4ef      	bmi.n	8004d5c <__smakebuf_r+0x18>
 8004d7c:	f023 0303 	bic.w	r3, r3, #3
 8004d80:	f043 0302 	orr.w	r3, r3, #2
 8004d84:	81a3      	strh	r3, [r4, #12]
 8004d86:	e7e3      	b.n	8004d50 <__smakebuf_r+0xc>
 8004d88:	4b0d      	ldr	r3, [pc, #52]	; (8004dc0 <__smakebuf_r+0x7c>)
 8004d8a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004d8c:	89a3      	ldrh	r3, [r4, #12]
 8004d8e:	6020      	str	r0, [r4, #0]
 8004d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d94:	81a3      	strh	r3, [r4, #12]
 8004d96:	9b00      	ldr	r3, [sp, #0]
 8004d98:	6120      	str	r0, [r4, #16]
 8004d9a:	6163      	str	r3, [r4, #20]
 8004d9c:	9b01      	ldr	r3, [sp, #4]
 8004d9e:	b15b      	cbz	r3, 8004db8 <__smakebuf_r+0x74>
 8004da0:	4630      	mov	r0, r6
 8004da2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004da6:	f000 fc6f 	bl	8005688 <_isatty_r>
 8004daa:	b128      	cbz	r0, 8004db8 <__smakebuf_r+0x74>
 8004dac:	89a3      	ldrh	r3, [r4, #12]
 8004dae:	f023 0303 	bic.w	r3, r3, #3
 8004db2:	f043 0301 	orr.w	r3, r3, #1
 8004db6:	81a3      	strh	r3, [r4, #12]
 8004db8:	89a0      	ldrh	r0, [r4, #12]
 8004dba:	4305      	orrs	r5, r0
 8004dbc:	81a5      	strh	r5, [r4, #12]
 8004dbe:	e7cd      	b.n	8004d5c <__smakebuf_r+0x18>
 8004dc0:	08004b09 	.word	0x08004b09

08004dc4 <malloc>:
 8004dc4:	4b02      	ldr	r3, [pc, #8]	; (8004dd0 <malloc+0xc>)
 8004dc6:	4601      	mov	r1, r0
 8004dc8:	6818      	ldr	r0, [r3, #0]
 8004dca:	f000 b86b 	b.w	8004ea4 <_malloc_r>
 8004dce:	bf00      	nop
 8004dd0:	2000000c 	.word	0x2000000c

08004dd4 <_free_r>:
 8004dd4:	b538      	push	{r3, r4, r5, lr}
 8004dd6:	4605      	mov	r5, r0
 8004dd8:	2900      	cmp	r1, #0
 8004dda:	d040      	beq.n	8004e5e <_free_r+0x8a>
 8004ddc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004de0:	1f0c      	subs	r4, r1, #4
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	bfb8      	it	lt
 8004de6:	18e4      	addlt	r4, r4, r3
 8004de8:	f000 fc7e 	bl	80056e8 <__malloc_lock>
 8004dec:	4a1c      	ldr	r2, [pc, #112]	; (8004e60 <_free_r+0x8c>)
 8004dee:	6813      	ldr	r3, [r2, #0]
 8004df0:	b933      	cbnz	r3, 8004e00 <_free_r+0x2c>
 8004df2:	6063      	str	r3, [r4, #4]
 8004df4:	6014      	str	r4, [r2, #0]
 8004df6:	4628      	mov	r0, r5
 8004df8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004dfc:	f000 bc7a 	b.w	80056f4 <__malloc_unlock>
 8004e00:	42a3      	cmp	r3, r4
 8004e02:	d908      	bls.n	8004e16 <_free_r+0x42>
 8004e04:	6820      	ldr	r0, [r4, #0]
 8004e06:	1821      	adds	r1, r4, r0
 8004e08:	428b      	cmp	r3, r1
 8004e0a:	bf01      	itttt	eq
 8004e0c:	6819      	ldreq	r1, [r3, #0]
 8004e0e:	685b      	ldreq	r3, [r3, #4]
 8004e10:	1809      	addeq	r1, r1, r0
 8004e12:	6021      	streq	r1, [r4, #0]
 8004e14:	e7ed      	b.n	8004df2 <_free_r+0x1e>
 8004e16:	461a      	mov	r2, r3
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	b10b      	cbz	r3, 8004e20 <_free_r+0x4c>
 8004e1c:	42a3      	cmp	r3, r4
 8004e1e:	d9fa      	bls.n	8004e16 <_free_r+0x42>
 8004e20:	6811      	ldr	r1, [r2, #0]
 8004e22:	1850      	adds	r0, r2, r1
 8004e24:	42a0      	cmp	r0, r4
 8004e26:	d10b      	bne.n	8004e40 <_free_r+0x6c>
 8004e28:	6820      	ldr	r0, [r4, #0]
 8004e2a:	4401      	add	r1, r0
 8004e2c:	1850      	adds	r0, r2, r1
 8004e2e:	4283      	cmp	r3, r0
 8004e30:	6011      	str	r1, [r2, #0]
 8004e32:	d1e0      	bne.n	8004df6 <_free_r+0x22>
 8004e34:	6818      	ldr	r0, [r3, #0]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	4401      	add	r1, r0
 8004e3a:	6011      	str	r1, [r2, #0]
 8004e3c:	6053      	str	r3, [r2, #4]
 8004e3e:	e7da      	b.n	8004df6 <_free_r+0x22>
 8004e40:	d902      	bls.n	8004e48 <_free_r+0x74>
 8004e42:	230c      	movs	r3, #12
 8004e44:	602b      	str	r3, [r5, #0]
 8004e46:	e7d6      	b.n	8004df6 <_free_r+0x22>
 8004e48:	6820      	ldr	r0, [r4, #0]
 8004e4a:	1821      	adds	r1, r4, r0
 8004e4c:	428b      	cmp	r3, r1
 8004e4e:	bf01      	itttt	eq
 8004e50:	6819      	ldreq	r1, [r3, #0]
 8004e52:	685b      	ldreq	r3, [r3, #4]
 8004e54:	1809      	addeq	r1, r1, r0
 8004e56:	6021      	streq	r1, [r4, #0]
 8004e58:	6063      	str	r3, [r4, #4]
 8004e5a:	6054      	str	r4, [r2, #4]
 8004e5c:	e7cb      	b.n	8004df6 <_free_r+0x22>
 8004e5e:	bd38      	pop	{r3, r4, r5, pc}
 8004e60:	20000f14 	.word	0x20000f14

08004e64 <sbrk_aligned>:
 8004e64:	b570      	push	{r4, r5, r6, lr}
 8004e66:	4e0e      	ldr	r6, [pc, #56]	; (8004ea0 <sbrk_aligned+0x3c>)
 8004e68:	460c      	mov	r4, r1
 8004e6a:	6831      	ldr	r1, [r6, #0]
 8004e6c:	4605      	mov	r5, r0
 8004e6e:	b911      	cbnz	r1, 8004e76 <sbrk_aligned+0x12>
 8004e70:	f000 fb7a 	bl	8005568 <_sbrk_r>
 8004e74:	6030      	str	r0, [r6, #0]
 8004e76:	4621      	mov	r1, r4
 8004e78:	4628      	mov	r0, r5
 8004e7a:	f000 fb75 	bl	8005568 <_sbrk_r>
 8004e7e:	1c43      	adds	r3, r0, #1
 8004e80:	d00a      	beq.n	8004e98 <sbrk_aligned+0x34>
 8004e82:	1cc4      	adds	r4, r0, #3
 8004e84:	f024 0403 	bic.w	r4, r4, #3
 8004e88:	42a0      	cmp	r0, r4
 8004e8a:	d007      	beq.n	8004e9c <sbrk_aligned+0x38>
 8004e8c:	1a21      	subs	r1, r4, r0
 8004e8e:	4628      	mov	r0, r5
 8004e90:	f000 fb6a 	bl	8005568 <_sbrk_r>
 8004e94:	3001      	adds	r0, #1
 8004e96:	d101      	bne.n	8004e9c <sbrk_aligned+0x38>
 8004e98:	f04f 34ff 	mov.w	r4, #4294967295
 8004e9c:	4620      	mov	r0, r4
 8004e9e:	bd70      	pop	{r4, r5, r6, pc}
 8004ea0:	20000f18 	.word	0x20000f18

08004ea4 <_malloc_r>:
 8004ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ea8:	1ccd      	adds	r5, r1, #3
 8004eaa:	f025 0503 	bic.w	r5, r5, #3
 8004eae:	3508      	adds	r5, #8
 8004eb0:	2d0c      	cmp	r5, #12
 8004eb2:	bf38      	it	cc
 8004eb4:	250c      	movcc	r5, #12
 8004eb6:	2d00      	cmp	r5, #0
 8004eb8:	4607      	mov	r7, r0
 8004eba:	db01      	blt.n	8004ec0 <_malloc_r+0x1c>
 8004ebc:	42a9      	cmp	r1, r5
 8004ebe:	d905      	bls.n	8004ecc <_malloc_r+0x28>
 8004ec0:	230c      	movs	r3, #12
 8004ec2:	2600      	movs	r6, #0
 8004ec4:	603b      	str	r3, [r7, #0]
 8004ec6:	4630      	mov	r0, r6
 8004ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ecc:	4e2e      	ldr	r6, [pc, #184]	; (8004f88 <_malloc_r+0xe4>)
 8004ece:	f000 fc0b 	bl	80056e8 <__malloc_lock>
 8004ed2:	6833      	ldr	r3, [r6, #0]
 8004ed4:	461c      	mov	r4, r3
 8004ed6:	bb34      	cbnz	r4, 8004f26 <_malloc_r+0x82>
 8004ed8:	4629      	mov	r1, r5
 8004eda:	4638      	mov	r0, r7
 8004edc:	f7ff ffc2 	bl	8004e64 <sbrk_aligned>
 8004ee0:	1c43      	adds	r3, r0, #1
 8004ee2:	4604      	mov	r4, r0
 8004ee4:	d14d      	bne.n	8004f82 <_malloc_r+0xde>
 8004ee6:	6834      	ldr	r4, [r6, #0]
 8004ee8:	4626      	mov	r6, r4
 8004eea:	2e00      	cmp	r6, #0
 8004eec:	d140      	bne.n	8004f70 <_malloc_r+0xcc>
 8004eee:	6823      	ldr	r3, [r4, #0]
 8004ef0:	4631      	mov	r1, r6
 8004ef2:	4638      	mov	r0, r7
 8004ef4:	eb04 0803 	add.w	r8, r4, r3
 8004ef8:	f000 fb36 	bl	8005568 <_sbrk_r>
 8004efc:	4580      	cmp	r8, r0
 8004efe:	d13a      	bne.n	8004f76 <_malloc_r+0xd2>
 8004f00:	6821      	ldr	r1, [r4, #0]
 8004f02:	3503      	adds	r5, #3
 8004f04:	1a6d      	subs	r5, r5, r1
 8004f06:	f025 0503 	bic.w	r5, r5, #3
 8004f0a:	3508      	adds	r5, #8
 8004f0c:	2d0c      	cmp	r5, #12
 8004f0e:	bf38      	it	cc
 8004f10:	250c      	movcc	r5, #12
 8004f12:	4638      	mov	r0, r7
 8004f14:	4629      	mov	r1, r5
 8004f16:	f7ff ffa5 	bl	8004e64 <sbrk_aligned>
 8004f1a:	3001      	adds	r0, #1
 8004f1c:	d02b      	beq.n	8004f76 <_malloc_r+0xd2>
 8004f1e:	6823      	ldr	r3, [r4, #0]
 8004f20:	442b      	add	r3, r5
 8004f22:	6023      	str	r3, [r4, #0]
 8004f24:	e00e      	b.n	8004f44 <_malloc_r+0xa0>
 8004f26:	6822      	ldr	r2, [r4, #0]
 8004f28:	1b52      	subs	r2, r2, r5
 8004f2a:	d41e      	bmi.n	8004f6a <_malloc_r+0xc6>
 8004f2c:	2a0b      	cmp	r2, #11
 8004f2e:	d916      	bls.n	8004f5e <_malloc_r+0xba>
 8004f30:	1961      	adds	r1, r4, r5
 8004f32:	42a3      	cmp	r3, r4
 8004f34:	6025      	str	r5, [r4, #0]
 8004f36:	bf18      	it	ne
 8004f38:	6059      	strne	r1, [r3, #4]
 8004f3a:	6863      	ldr	r3, [r4, #4]
 8004f3c:	bf08      	it	eq
 8004f3e:	6031      	streq	r1, [r6, #0]
 8004f40:	5162      	str	r2, [r4, r5]
 8004f42:	604b      	str	r3, [r1, #4]
 8004f44:	4638      	mov	r0, r7
 8004f46:	f104 060b 	add.w	r6, r4, #11
 8004f4a:	f000 fbd3 	bl	80056f4 <__malloc_unlock>
 8004f4e:	f026 0607 	bic.w	r6, r6, #7
 8004f52:	1d23      	adds	r3, r4, #4
 8004f54:	1af2      	subs	r2, r6, r3
 8004f56:	d0b6      	beq.n	8004ec6 <_malloc_r+0x22>
 8004f58:	1b9b      	subs	r3, r3, r6
 8004f5a:	50a3      	str	r3, [r4, r2]
 8004f5c:	e7b3      	b.n	8004ec6 <_malloc_r+0x22>
 8004f5e:	6862      	ldr	r2, [r4, #4]
 8004f60:	42a3      	cmp	r3, r4
 8004f62:	bf0c      	ite	eq
 8004f64:	6032      	streq	r2, [r6, #0]
 8004f66:	605a      	strne	r2, [r3, #4]
 8004f68:	e7ec      	b.n	8004f44 <_malloc_r+0xa0>
 8004f6a:	4623      	mov	r3, r4
 8004f6c:	6864      	ldr	r4, [r4, #4]
 8004f6e:	e7b2      	b.n	8004ed6 <_malloc_r+0x32>
 8004f70:	4634      	mov	r4, r6
 8004f72:	6876      	ldr	r6, [r6, #4]
 8004f74:	e7b9      	b.n	8004eea <_malloc_r+0x46>
 8004f76:	230c      	movs	r3, #12
 8004f78:	4638      	mov	r0, r7
 8004f7a:	603b      	str	r3, [r7, #0]
 8004f7c:	f000 fbba 	bl	80056f4 <__malloc_unlock>
 8004f80:	e7a1      	b.n	8004ec6 <_malloc_r+0x22>
 8004f82:	6025      	str	r5, [r4, #0]
 8004f84:	e7de      	b.n	8004f44 <_malloc_r+0xa0>
 8004f86:	bf00      	nop
 8004f88:	20000f14 	.word	0x20000f14

08004f8c <__sfputc_r>:
 8004f8c:	6893      	ldr	r3, [r2, #8]
 8004f8e:	b410      	push	{r4}
 8004f90:	3b01      	subs	r3, #1
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	6093      	str	r3, [r2, #8]
 8004f96:	da07      	bge.n	8004fa8 <__sfputc_r+0x1c>
 8004f98:	6994      	ldr	r4, [r2, #24]
 8004f9a:	42a3      	cmp	r3, r4
 8004f9c:	db01      	blt.n	8004fa2 <__sfputc_r+0x16>
 8004f9e:	290a      	cmp	r1, #10
 8004fa0:	d102      	bne.n	8004fa8 <__sfputc_r+0x1c>
 8004fa2:	bc10      	pop	{r4}
 8004fa4:	f7ff bbf0 	b.w	8004788 <__swbuf_r>
 8004fa8:	6813      	ldr	r3, [r2, #0]
 8004faa:	1c58      	adds	r0, r3, #1
 8004fac:	6010      	str	r0, [r2, #0]
 8004fae:	7019      	strb	r1, [r3, #0]
 8004fb0:	4608      	mov	r0, r1
 8004fb2:	bc10      	pop	{r4}
 8004fb4:	4770      	bx	lr

08004fb6 <__sfputs_r>:
 8004fb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fb8:	4606      	mov	r6, r0
 8004fba:	460f      	mov	r7, r1
 8004fbc:	4614      	mov	r4, r2
 8004fbe:	18d5      	adds	r5, r2, r3
 8004fc0:	42ac      	cmp	r4, r5
 8004fc2:	d101      	bne.n	8004fc8 <__sfputs_r+0x12>
 8004fc4:	2000      	movs	r0, #0
 8004fc6:	e007      	b.n	8004fd8 <__sfputs_r+0x22>
 8004fc8:	463a      	mov	r2, r7
 8004fca:	4630      	mov	r0, r6
 8004fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fd0:	f7ff ffdc 	bl	8004f8c <__sfputc_r>
 8004fd4:	1c43      	adds	r3, r0, #1
 8004fd6:	d1f3      	bne.n	8004fc0 <__sfputs_r+0xa>
 8004fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004fdc <_vfiprintf_r>:
 8004fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fe0:	460d      	mov	r5, r1
 8004fe2:	4614      	mov	r4, r2
 8004fe4:	4698      	mov	r8, r3
 8004fe6:	4606      	mov	r6, r0
 8004fe8:	b09d      	sub	sp, #116	; 0x74
 8004fea:	b118      	cbz	r0, 8004ff4 <_vfiprintf_r+0x18>
 8004fec:	6983      	ldr	r3, [r0, #24]
 8004fee:	b90b      	cbnz	r3, 8004ff4 <_vfiprintf_r+0x18>
 8004ff0:	f7ff fdbe 	bl	8004b70 <__sinit>
 8004ff4:	4b89      	ldr	r3, [pc, #548]	; (800521c <_vfiprintf_r+0x240>)
 8004ff6:	429d      	cmp	r5, r3
 8004ff8:	d11b      	bne.n	8005032 <_vfiprintf_r+0x56>
 8004ffa:	6875      	ldr	r5, [r6, #4]
 8004ffc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ffe:	07d9      	lsls	r1, r3, #31
 8005000:	d405      	bmi.n	800500e <_vfiprintf_r+0x32>
 8005002:	89ab      	ldrh	r3, [r5, #12]
 8005004:	059a      	lsls	r2, r3, #22
 8005006:	d402      	bmi.n	800500e <_vfiprintf_r+0x32>
 8005008:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800500a:	f7ff fe74 	bl	8004cf6 <__retarget_lock_acquire_recursive>
 800500e:	89ab      	ldrh	r3, [r5, #12]
 8005010:	071b      	lsls	r3, r3, #28
 8005012:	d501      	bpl.n	8005018 <_vfiprintf_r+0x3c>
 8005014:	692b      	ldr	r3, [r5, #16]
 8005016:	b9eb      	cbnz	r3, 8005054 <_vfiprintf_r+0x78>
 8005018:	4629      	mov	r1, r5
 800501a:	4630      	mov	r0, r6
 800501c:	f7ff fc06 	bl	800482c <__swsetup_r>
 8005020:	b1c0      	cbz	r0, 8005054 <_vfiprintf_r+0x78>
 8005022:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005024:	07dc      	lsls	r4, r3, #31
 8005026:	d50e      	bpl.n	8005046 <_vfiprintf_r+0x6a>
 8005028:	f04f 30ff 	mov.w	r0, #4294967295
 800502c:	b01d      	add	sp, #116	; 0x74
 800502e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005032:	4b7b      	ldr	r3, [pc, #492]	; (8005220 <_vfiprintf_r+0x244>)
 8005034:	429d      	cmp	r5, r3
 8005036:	d101      	bne.n	800503c <_vfiprintf_r+0x60>
 8005038:	68b5      	ldr	r5, [r6, #8]
 800503a:	e7df      	b.n	8004ffc <_vfiprintf_r+0x20>
 800503c:	4b79      	ldr	r3, [pc, #484]	; (8005224 <_vfiprintf_r+0x248>)
 800503e:	429d      	cmp	r5, r3
 8005040:	bf08      	it	eq
 8005042:	68f5      	ldreq	r5, [r6, #12]
 8005044:	e7da      	b.n	8004ffc <_vfiprintf_r+0x20>
 8005046:	89ab      	ldrh	r3, [r5, #12]
 8005048:	0598      	lsls	r0, r3, #22
 800504a:	d4ed      	bmi.n	8005028 <_vfiprintf_r+0x4c>
 800504c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800504e:	f7ff fe53 	bl	8004cf8 <__retarget_lock_release_recursive>
 8005052:	e7e9      	b.n	8005028 <_vfiprintf_r+0x4c>
 8005054:	2300      	movs	r3, #0
 8005056:	9309      	str	r3, [sp, #36]	; 0x24
 8005058:	2320      	movs	r3, #32
 800505a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800505e:	2330      	movs	r3, #48	; 0x30
 8005060:	f04f 0901 	mov.w	r9, #1
 8005064:	f8cd 800c 	str.w	r8, [sp, #12]
 8005068:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005228 <_vfiprintf_r+0x24c>
 800506c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005070:	4623      	mov	r3, r4
 8005072:	469a      	mov	sl, r3
 8005074:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005078:	b10a      	cbz	r2, 800507e <_vfiprintf_r+0xa2>
 800507a:	2a25      	cmp	r2, #37	; 0x25
 800507c:	d1f9      	bne.n	8005072 <_vfiprintf_r+0x96>
 800507e:	ebba 0b04 	subs.w	fp, sl, r4
 8005082:	d00b      	beq.n	800509c <_vfiprintf_r+0xc0>
 8005084:	465b      	mov	r3, fp
 8005086:	4622      	mov	r2, r4
 8005088:	4629      	mov	r1, r5
 800508a:	4630      	mov	r0, r6
 800508c:	f7ff ff93 	bl	8004fb6 <__sfputs_r>
 8005090:	3001      	adds	r0, #1
 8005092:	f000 80aa 	beq.w	80051ea <_vfiprintf_r+0x20e>
 8005096:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005098:	445a      	add	r2, fp
 800509a:	9209      	str	r2, [sp, #36]	; 0x24
 800509c:	f89a 3000 	ldrb.w	r3, [sl]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f000 80a2 	beq.w	80051ea <_vfiprintf_r+0x20e>
 80050a6:	2300      	movs	r3, #0
 80050a8:	f04f 32ff 	mov.w	r2, #4294967295
 80050ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050b0:	f10a 0a01 	add.w	sl, sl, #1
 80050b4:	9304      	str	r3, [sp, #16]
 80050b6:	9307      	str	r3, [sp, #28]
 80050b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050bc:	931a      	str	r3, [sp, #104]	; 0x68
 80050be:	4654      	mov	r4, sl
 80050c0:	2205      	movs	r2, #5
 80050c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050c6:	4858      	ldr	r0, [pc, #352]	; (8005228 <_vfiprintf_r+0x24c>)
 80050c8:	f000 fb00 	bl	80056cc <memchr>
 80050cc:	9a04      	ldr	r2, [sp, #16]
 80050ce:	b9d8      	cbnz	r0, 8005108 <_vfiprintf_r+0x12c>
 80050d0:	06d1      	lsls	r1, r2, #27
 80050d2:	bf44      	itt	mi
 80050d4:	2320      	movmi	r3, #32
 80050d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050da:	0713      	lsls	r3, r2, #28
 80050dc:	bf44      	itt	mi
 80050de:	232b      	movmi	r3, #43	; 0x2b
 80050e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050e4:	f89a 3000 	ldrb.w	r3, [sl]
 80050e8:	2b2a      	cmp	r3, #42	; 0x2a
 80050ea:	d015      	beq.n	8005118 <_vfiprintf_r+0x13c>
 80050ec:	4654      	mov	r4, sl
 80050ee:	2000      	movs	r0, #0
 80050f0:	f04f 0c0a 	mov.w	ip, #10
 80050f4:	9a07      	ldr	r2, [sp, #28]
 80050f6:	4621      	mov	r1, r4
 80050f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050fc:	3b30      	subs	r3, #48	; 0x30
 80050fe:	2b09      	cmp	r3, #9
 8005100:	d94e      	bls.n	80051a0 <_vfiprintf_r+0x1c4>
 8005102:	b1b0      	cbz	r0, 8005132 <_vfiprintf_r+0x156>
 8005104:	9207      	str	r2, [sp, #28]
 8005106:	e014      	b.n	8005132 <_vfiprintf_r+0x156>
 8005108:	eba0 0308 	sub.w	r3, r0, r8
 800510c:	fa09 f303 	lsl.w	r3, r9, r3
 8005110:	4313      	orrs	r3, r2
 8005112:	46a2      	mov	sl, r4
 8005114:	9304      	str	r3, [sp, #16]
 8005116:	e7d2      	b.n	80050be <_vfiprintf_r+0xe2>
 8005118:	9b03      	ldr	r3, [sp, #12]
 800511a:	1d19      	adds	r1, r3, #4
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	9103      	str	r1, [sp, #12]
 8005120:	2b00      	cmp	r3, #0
 8005122:	bfbb      	ittet	lt
 8005124:	425b      	neglt	r3, r3
 8005126:	f042 0202 	orrlt.w	r2, r2, #2
 800512a:	9307      	strge	r3, [sp, #28]
 800512c:	9307      	strlt	r3, [sp, #28]
 800512e:	bfb8      	it	lt
 8005130:	9204      	strlt	r2, [sp, #16]
 8005132:	7823      	ldrb	r3, [r4, #0]
 8005134:	2b2e      	cmp	r3, #46	; 0x2e
 8005136:	d10c      	bne.n	8005152 <_vfiprintf_r+0x176>
 8005138:	7863      	ldrb	r3, [r4, #1]
 800513a:	2b2a      	cmp	r3, #42	; 0x2a
 800513c:	d135      	bne.n	80051aa <_vfiprintf_r+0x1ce>
 800513e:	9b03      	ldr	r3, [sp, #12]
 8005140:	3402      	adds	r4, #2
 8005142:	1d1a      	adds	r2, r3, #4
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	9203      	str	r2, [sp, #12]
 8005148:	2b00      	cmp	r3, #0
 800514a:	bfb8      	it	lt
 800514c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005150:	9305      	str	r3, [sp, #20]
 8005152:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800522c <_vfiprintf_r+0x250>
 8005156:	2203      	movs	r2, #3
 8005158:	4650      	mov	r0, sl
 800515a:	7821      	ldrb	r1, [r4, #0]
 800515c:	f000 fab6 	bl	80056cc <memchr>
 8005160:	b140      	cbz	r0, 8005174 <_vfiprintf_r+0x198>
 8005162:	2340      	movs	r3, #64	; 0x40
 8005164:	eba0 000a 	sub.w	r0, r0, sl
 8005168:	fa03 f000 	lsl.w	r0, r3, r0
 800516c:	9b04      	ldr	r3, [sp, #16]
 800516e:	3401      	adds	r4, #1
 8005170:	4303      	orrs	r3, r0
 8005172:	9304      	str	r3, [sp, #16]
 8005174:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005178:	2206      	movs	r2, #6
 800517a:	482d      	ldr	r0, [pc, #180]	; (8005230 <_vfiprintf_r+0x254>)
 800517c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005180:	f000 faa4 	bl	80056cc <memchr>
 8005184:	2800      	cmp	r0, #0
 8005186:	d03f      	beq.n	8005208 <_vfiprintf_r+0x22c>
 8005188:	4b2a      	ldr	r3, [pc, #168]	; (8005234 <_vfiprintf_r+0x258>)
 800518a:	bb1b      	cbnz	r3, 80051d4 <_vfiprintf_r+0x1f8>
 800518c:	9b03      	ldr	r3, [sp, #12]
 800518e:	3307      	adds	r3, #7
 8005190:	f023 0307 	bic.w	r3, r3, #7
 8005194:	3308      	adds	r3, #8
 8005196:	9303      	str	r3, [sp, #12]
 8005198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800519a:	443b      	add	r3, r7
 800519c:	9309      	str	r3, [sp, #36]	; 0x24
 800519e:	e767      	b.n	8005070 <_vfiprintf_r+0x94>
 80051a0:	460c      	mov	r4, r1
 80051a2:	2001      	movs	r0, #1
 80051a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80051a8:	e7a5      	b.n	80050f6 <_vfiprintf_r+0x11a>
 80051aa:	2300      	movs	r3, #0
 80051ac:	f04f 0c0a 	mov.w	ip, #10
 80051b0:	4619      	mov	r1, r3
 80051b2:	3401      	adds	r4, #1
 80051b4:	9305      	str	r3, [sp, #20]
 80051b6:	4620      	mov	r0, r4
 80051b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051bc:	3a30      	subs	r2, #48	; 0x30
 80051be:	2a09      	cmp	r2, #9
 80051c0:	d903      	bls.n	80051ca <_vfiprintf_r+0x1ee>
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d0c5      	beq.n	8005152 <_vfiprintf_r+0x176>
 80051c6:	9105      	str	r1, [sp, #20]
 80051c8:	e7c3      	b.n	8005152 <_vfiprintf_r+0x176>
 80051ca:	4604      	mov	r4, r0
 80051cc:	2301      	movs	r3, #1
 80051ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80051d2:	e7f0      	b.n	80051b6 <_vfiprintf_r+0x1da>
 80051d4:	ab03      	add	r3, sp, #12
 80051d6:	9300      	str	r3, [sp, #0]
 80051d8:	462a      	mov	r2, r5
 80051da:	4630      	mov	r0, r6
 80051dc:	4b16      	ldr	r3, [pc, #88]	; (8005238 <_vfiprintf_r+0x25c>)
 80051de:	a904      	add	r1, sp, #16
 80051e0:	f3af 8000 	nop.w
 80051e4:	4607      	mov	r7, r0
 80051e6:	1c78      	adds	r0, r7, #1
 80051e8:	d1d6      	bne.n	8005198 <_vfiprintf_r+0x1bc>
 80051ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051ec:	07d9      	lsls	r1, r3, #31
 80051ee:	d405      	bmi.n	80051fc <_vfiprintf_r+0x220>
 80051f0:	89ab      	ldrh	r3, [r5, #12]
 80051f2:	059a      	lsls	r2, r3, #22
 80051f4:	d402      	bmi.n	80051fc <_vfiprintf_r+0x220>
 80051f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051f8:	f7ff fd7e 	bl	8004cf8 <__retarget_lock_release_recursive>
 80051fc:	89ab      	ldrh	r3, [r5, #12]
 80051fe:	065b      	lsls	r3, r3, #25
 8005200:	f53f af12 	bmi.w	8005028 <_vfiprintf_r+0x4c>
 8005204:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005206:	e711      	b.n	800502c <_vfiprintf_r+0x50>
 8005208:	ab03      	add	r3, sp, #12
 800520a:	9300      	str	r3, [sp, #0]
 800520c:	462a      	mov	r2, r5
 800520e:	4630      	mov	r0, r6
 8005210:	4b09      	ldr	r3, [pc, #36]	; (8005238 <_vfiprintf_r+0x25c>)
 8005212:	a904      	add	r1, sp, #16
 8005214:	f000 f882 	bl	800531c <_printf_i>
 8005218:	e7e4      	b.n	80051e4 <_vfiprintf_r+0x208>
 800521a:	bf00      	nop
 800521c:	08006154 	.word	0x08006154
 8005220:	08006174 	.word	0x08006174
 8005224:	08006134 	.word	0x08006134
 8005228:	08006194 	.word	0x08006194
 800522c:	0800619a 	.word	0x0800619a
 8005230:	0800619e 	.word	0x0800619e
 8005234:	00000000 	.word	0x00000000
 8005238:	08004fb7 	.word	0x08004fb7

0800523c <_printf_common>:
 800523c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005240:	4616      	mov	r6, r2
 8005242:	4699      	mov	r9, r3
 8005244:	688a      	ldr	r2, [r1, #8]
 8005246:	690b      	ldr	r3, [r1, #16]
 8005248:	4607      	mov	r7, r0
 800524a:	4293      	cmp	r3, r2
 800524c:	bfb8      	it	lt
 800524e:	4613      	movlt	r3, r2
 8005250:	6033      	str	r3, [r6, #0]
 8005252:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005256:	460c      	mov	r4, r1
 8005258:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800525c:	b10a      	cbz	r2, 8005262 <_printf_common+0x26>
 800525e:	3301      	adds	r3, #1
 8005260:	6033      	str	r3, [r6, #0]
 8005262:	6823      	ldr	r3, [r4, #0]
 8005264:	0699      	lsls	r1, r3, #26
 8005266:	bf42      	ittt	mi
 8005268:	6833      	ldrmi	r3, [r6, #0]
 800526a:	3302      	addmi	r3, #2
 800526c:	6033      	strmi	r3, [r6, #0]
 800526e:	6825      	ldr	r5, [r4, #0]
 8005270:	f015 0506 	ands.w	r5, r5, #6
 8005274:	d106      	bne.n	8005284 <_printf_common+0x48>
 8005276:	f104 0a19 	add.w	sl, r4, #25
 800527a:	68e3      	ldr	r3, [r4, #12]
 800527c:	6832      	ldr	r2, [r6, #0]
 800527e:	1a9b      	subs	r3, r3, r2
 8005280:	42ab      	cmp	r3, r5
 8005282:	dc28      	bgt.n	80052d6 <_printf_common+0x9a>
 8005284:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005288:	1e13      	subs	r3, r2, #0
 800528a:	6822      	ldr	r2, [r4, #0]
 800528c:	bf18      	it	ne
 800528e:	2301      	movne	r3, #1
 8005290:	0692      	lsls	r2, r2, #26
 8005292:	d42d      	bmi.n	80052f0 <_printf_common+0xb4>
 8005294:	4649      	mov	r1, r9
 8005296:	4638      	mov	r0, r7
 8005298:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800529c:	47c0      	blx	r8
 800529e:	3001      	adds	r0, #1
 80052a0:	d020      	beq.n	80052e4 <_printf_common+0xa8>
 80052a2:	6823      	ldr	r3, [r4, #0]
 80052a4:	68e5      	ldr	r5, [r4, #12]
 80052a6:	f003 0306 	and.w	r3, r3, #6
 80052aa:	2b04      	cmp	r3, #4
 80052ac:	bf18      	it	ne
 80052ae:	2500      	movne	r5, #0
 80052b0:	6832      	ldr	r2, [r6, #0]
 80052b2:	f04f 0600 	mov.w	r6, #0
 80052b6:	68a3      	ldr	r3, [r4, #8]
 80052b8:	bf08      	it	eq
 80052ba:	1aad      	subeq	r5, r5, r2
 80052bc:	6922      	ldr	r2, [r4, #16]
 80052be:	bf08      	it	eq
 80052c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052c4:	4293      	cmp	r3, r2
 80052c6:	bfc4      	itt	gt
 80052c8:	1a9b      	subgt	r3, r3, r2
 80052ca:	18ed      	addgt	r5, r5, r3
 80052cc:	341a      	adds	r4, #26
 80052ce:	42b5      	cmp	r5, r6
 80052d0:	d11a      	bne.n	8005308 <_printf_common+0xcc>
 80052d2:	2000      	movs	r0, #0
 80052d4:	e008      	b.n	80052e8 <_printf_common+0xac>
 80052d6:	2301      	movs	r3, #1
 80052d8:	4652      	mov	r2, sl
 80052da:	4649      	mov	r1, r9
 80052dc:	4638      	mov	r0, r7
 80052de:	47c0      	blx	r8
 80052e0:	3001      	adds	r0, #1
 80052e2:	d103      	bne.n	80052ec <_printf_common+0xb0>
 80052e4:	f04f 30ff 	mov.w	r0, #4294967295
 80052e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052ec:	3501      	adds	r5, #1
 80052ee:	e7c4      	b.n	800527a <_printf_common+0x3e>
 80052f0:	2030      	movs	r0, #48	; 0x30
 80052f2:	18e1      	adds	r1, r4, r3
 80052f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052f8:	1c5a      	adds	r2, r3, #1
 80052fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052fe:	4422      	add	r2, r4
 8005300:	3302      	adds	r3, #2
 8005302:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005306:	e7c5      	b.n	8005294 <_printf_common+0x58>
 8005308:	2301      	movs	r3, #1
 800530a:	4622      	mov	r2, r4
 800530c:	4649      	mov	r1, r9
 800530e:	4638      	mov	r0, r7
 8005310:	47c0      	blx	r8
 8005312:	3001      	adds	r0, #1
 8005314:	d0e6      	beq.n	80052e4 <_printf_common+0xa8>
 8005316:	3601      	adds	r6, #1
 8005318:	e7d9      	b.n	80052ce <_printf_common+0x92>
	...

0800531c <_printf_i>:
 800531c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005320:	7e0f      	ldrb	r7, [r1, #24]
 8005322:	4691      	mov	r9, r2
 8005324:	2f78      	cmp	r7, #120	; 0x78
 8005326:	4680      	mov	r8, r0
 8005328:	460c      	mov	r4, r1
 800532a:	469a      	mov	sl, r3
 800532c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800532e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005332:	d807      	bhi.n	8005344 <_printf_i+0x28>
 8005334:	2f62      	cmp	r7, #98	; 0x62
 8005336:	d80a      	bhi.n	800534e <_printf_i+0x32>
 8005338:	2f00      	cmp	r7, #0
 800533a:	f000 80d9 	beq.w	80054f0 <_printf_i+0x1d4>
 800533e:	2f58      	cmp	r7, #88	; 0x58
 8005340:	f000 80a4 	beq.w	800548c <_printf_i+0x170>
 8005344:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005348:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800534c:	e03a      	b.n	80053c4 <_printf_i+0xa8>
 800534e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005352:	2b15      	cmp	r3, #21
 8005354:	d8f6      	bhi.n	8005344 <_printf_i+0x28>
 8005356:	a101      	add	r1, pc, #4	; (adr r1, 800535c <_printf_i+0x40>)
 8005358:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800535c:	080053b5 	.word	0x080053b5
 8005360:	080053c9 	.word	0x080053c9
 8005364:	08005345 	.word	0x08005345
 8005368:	08005345 	.word	0x08005345
 800536c:	08005345 	.word	0x08005345
 8005370:	08005345 	.word	0x08005345
 8005374:	080053c9 	.word	0x080053c9
 8005378:	08005345 	.word	0x08005345
 800537c:	08005345 	.word	0x08005345
 8005380:	08005345 	.word	0x08005345
 8005384:	08005345 	.word	0x08005345
 8005388:	080054d7 	.word	0x080054d7
 800538c:	080053f9 	.word	0x080053f9
 8005390:	080054b9 	.word	0x080054b9
 8005394:	08005345 	.word	0x08005345
 8005398:	08005345 	.word	0x08005345
 800539c:	080054f9 	.word	0x080054f9
 80053a0:	08005345 	.word	0x08005345
 80053a4:	080053f9 	.word	0x080053f9
 80053a8:	08005345 	.word	0x08005345
 80053ac:	08005345 	.word	0x08005345
 80053b0:	080054c1 	.word	0x080054c1
 80053b4:	682b      	ldr	r3, [r5, #0]
 80053b6:	1d1a      	adds	r2, r3, #4
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	602a      	str	r2, [r5, #0]
 80053bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053c4:	2301      	movs	r3, #1
 80053c6:	e0a4      	b.n	8005512 <_printf_i+0x1f6>
 80053c8:	6820      	ldr	r0, [r4, #0]
 80053ca:	6829      	ldr	r1, [r5, #0]
 80053cc:	0606      	lsls	r6, r0, #24
 80053ce:	f101 0304 	add.w	r3, r1, #4
 80053d2:	d50a      	bpl.n	80053ea <_printf_i+0xce>
 80053d4:	680e      	ldr	r6, [r1, #0]
 80053d6:	602b      	str	r3, [r5, #0]
 80053d8:	2e00      	cmp	r6, #0
 80053da:	da03      	bge.n	80053e4 <_printf_i+0xc8>
 80053dc:	232d      	movs	r3, #45	; 0x2d
 80053de:	4276      	negs	r6, r6
 80053e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053e4:	230a      	movs	r3, #10
 80053e6:	485e      	ldr	r0, [pc, #376]	; (8005560 <_printf_i+0x244>)
 80053e8:	e019      	b.n	800541e <_printf_i+0x102>
 80053ea:	680e      	ldr	r6, [r1, #0]
 80053ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 80053f0:	602b      	str	r3, [r5, #0]
 80053f2:	bf18      	it	ne
 80053f4:	b236      	sxthne	r6, r6
 80053f6:	e7ef      	b.n	80053d8 <_printf_i+0xbc>
 80053f8:	682b      	ldr	r3, [r5, #0]
 80053fa:	6820      	ldr	r0, [r4, #0]
 80053fc:	1d19      	adds	r1, r3, #4
 80053fe:	6029      	str	r1, [r5, #0]
 8005400:	0601      	lsls	r1, r0, #24
 8005402:	d501      	bpl.n	8005408 <_printf_i+0xec>
 8005404:	681e      	ldr	r6, [r3, #0]
 8005406:	e002      	b.n	800540e <_printf_i+0xf2>
 8005408:	0646      	lsls	r6, r0, #25
 800540a:	d5fb      	bpl.n	8005404 <_printf_i+0xe8>
 800540c:	881e      	ldrh	r6, [r3, #0]
 800540e:	2f6f      	cmp	r7, #111	; 0x6f
 8005410:	bf0c      	ite	eq
 8005412:	2308      	moveq	r3, #8
 8005414:	230a      	movne	r3, #10
 8005416:	4852      	ldr	r0, [pc, #328]	; (8005560 <_printf_i+0x244>)
 8005418:	2100      	movs	r1, #0
 800541a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800541e:	6865      	ldr	r5, [r4, #4]
 8005420:	2d00      	cmp	r5, #0
 8005422:	bfa8      	it	ge
 8005424:	6821      	ldrge	r1, [r4, #0]
 8005426:	60a5      	str	r5, [r4, #8]
 8005428:	bfa4      	itt	ge
 800542a:	f021 0104 	bicge.w	r1, r1, #4
 800542e:	6021      	strge	r1, [r4, #0]
 8005430:	b90e      	cbnz	r6, 8005436 <_printf_i+0x11a>
 8005432:	2d00      	cmp	r5, #0
 8005434:	d04d      	beq.n	80054d2 <_printf_i+0x1b6>
 8005436:	4615      	mov	r5, r2
 8005438:	fbb6 f1f3 	udiv	r1, r6, r3
 800543c:	fb03 6711 	mls	r7, r3, r1, r6
 8005440:	5dc7      	ldrb	r7, [r0, r7]
 8005442:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005446:	4637      	mov	r7, r6
 8005448:	42bb      	cmp	r3, r7
 800544a:	460e      	mov	r6, r1
 800544c:	d9f4      	bls.n	8005438 <_printf_i+0x11c>
 800544e:	2b08      	cmp	r3, #8
 8005450:	d10b      	bne.n	800546a <_printf_i+0x14e>
 8005452:	6823      	ldr	r3, [r4, #0]
 8005454:	07de      	lsls	r6, r3, #31
 8005456:	d508      	bpl.n	800546a <_printf_i+0x14e>
 8005458:	6923      	ldr	r3, [r4, #16]
 800545a:	6861      	ldr	r1, [r4, #4]
 800545c:	4299      	cmp	r1, r3
 800545e:	bfde      	ittt	le
 8005460:	2330      	movle	r3, #48	; 0x30
 8005462:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005466:	f105 35ff 	addle.w	r5, r5, #4294967295
 800546a:	1b52      	subs	r2, r2, r5
 800546c:	6122      	str	r2, [r4, #16]
 800546e:	464b      	mov	r3, r9
 8005470:	4621      	mov	r1, r4
 8005472:	4640      	mov	r0, r8
 8005474:	f8cd a000 	str.w	sl, [sp]
 8005478:	aa03      	add	r2, sp, #12
 800547a:	f7ff fedf 	bl	800523c <_printf_common>
 800547e:	3001      	adds	r0, #1
 8005480:	d14c      	bne.n	800551c <_printf_i+0x200>
 8005482:	f04f 30ff 	mov.w	r0, #4294967295
 8005486:	b004      	add	sp, #16
 8005488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800548c:	4834      	ldr	r0, [pc, #208]	; (8005560 <_printf_i+0x244>)
 800548e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005492:	6829      	ldr	r1, [r5, #0]
 8005494:	6823      	ldr	r3, [r4, #0]
 8005496:	f851 6b04 	ldr.w	r6, [r1], #4
 800549a:	6029      	str	r1, [r5, #0]
 800549c:	061d      	lsls	r5, r3, #24
 800549e:	d514      	bpl.n	80054ca <_printf_i+0x1ae>
 80054a0:	07df      	lsls	r7, r3, #31
 80054a2:	bf44      	itt	mi
 80054a4:	f043 0320 	orrmi.w	r3, r3, #32
 80054a8:	6023      	strmi	r3, [r4, #0]
 80054aa:	b91e      	cbnz	r6, 80054b4 <_printf_i+0x198>
 80054ac:	6823      	ldr	r3, [r4, #0]
 80054ae:	f023 0320 	bic.w	r3, r3, #32
 80054b2:	6023      	str	r3, [r4, #0]
 80054b4:	2310      	movs	r3, #16
 80054b6:	e7af      	b.n	8005418 <_printf_i+0xfc>
 80054b8:	6823      	ldr	r3, [r4, #0]
 80054ba:	f043 0320 	orr.w	r3, r3, #32
 80054be:	6023      	str	r3, [r4, #0]
 80054c0:	2378      	movs	r3, #120	; 0x78
 80054c2:	4828      	ldr	r0, [pc, #160]	; (8005564 <_printf_i+0x248>)
 80054c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054c8:	e7e3      	b.n	8005492 <_printf_i+0x176>
 80054ca:	0659      	lsls	r1, r3, #25
 80054cc:	bf48      	it	mi
 80054ce:	b2b6      	uxthmi	r6, r6
 80054d0:	e7e6      	b.n	80054a0 <_printf_i+0x184>
 80054d2:	4615      	mov	r5, r2
 80054d4:	e7bb      	b.n	800544e <_printf_i+0x132>
 80054d6:	682b      	ldr	r3, [r5, #0]
 80054d8:	6826      	ldr	r6, [r4, #0]
 80054da:	1d18      	adds	r0, r3, #4
 80054dc:	6961      	ldr	r1, [r4, #20]
 80054de:	6028      	str	r0, [r5, #0]
 80054e0:	0635      	lsls	r5, r6, #24
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	d501      	bpl.n	80054ea <_printf_i+0x1ce>
 80054e6:	6019      	str	r1, [r3, #0]
 80054e8:	e002      	b.n	80054f0 <_printf_i+0x1d4>
 80054ea:	0670      	lsls	r0, r6, #25
 80054ec:	d5fb      	bpl.n	80054e6 <_printf_i+0x1ca>
 80054ee:	8019      	strh	r1, [r3, #0]
 80054f0:	2300      	movs	r3, #0
 80054f2:	4615      	mov	r5, r2
 80054f4:	6123      	str	r3, [r4, #16]
 80054f6:	e7ba      	b.n	800546e <_printf_i+0x152>
 80054f8:	682b      	ldr	r3, [r5, #0]
 80054fa:	2100      	movs	r1, #0
 80054fc:	1d1a      	adds	r2, r3, #4
 80054fe:	602a      	str	r2, [r5, #0]
 8005500:	681d      	ldr	r5, [r3, #0]
 8005502:	6862      	ldr	r2, [r4, #4]
 8005504:	4628      	mov	r0, r5
 8005506:	f000 f8e1 	bl	80056cc <memchr>
 800550a:	b108      	cbz	r0, 8005510 <_printf_i+0x1f4>
 800550c:	1b40      	subs	r0, r0, r5
 800550e:	6060      	str	r0, [r4, #4]
 8005510:	6863      	ldr	r3, [r4, #4]
 8005512:	6123      	str	r3, [r4, #16]
 8005514:	2300      	movs	r3, #0
 8005516:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800551a:	e7a8      	b.n	800546e <_printf_i+0x152>
 800551c:	462a      	mov	r2, r5
 800551e:	4649      	mov	r1, r9
 8005520:	4640      	mov	r0, r8
 8005522:	6923      	ldr	r3, [r4, #16]
 8005524:	47d0      	blx	sl
 8005526:	3001      	adds	r0, #1
 8005528:	d0ab      	beq.n	8005482 <_printf_i+0x166>
 800552a:	6823      	ldr	r3, [r4, #0]
 800552c:	079b      	lsls	r3, r3, #30
 800552e:	d413      	bmi.n	8005558 <_printf_i+0x23c>
 8005530:	68e0      	ldr	r0, [r4, #12]
 8005532:	9b03      	ldr	r3, [sp, #12]
 8005534:	4298      	cmp	r0, r3
 8005536:	bfb8      	it	lt
 8005538:	4618      	movlt	r0, r3
 800553a:	e7a4      	b.n	8005486 <_printf_i+0x16a>
 800553c:	2301      	movs	r3, #1
 800553e:	4632      	mov	r2, r6
 8005540:	4649      	mov	r1, r9
 8005542:	4640      	mov	r0, r8
 8005544:	47d0      	blx	sl
 8005546:	3001      	adds	r0, #1
 8005548:	d09b      	beq.n	8005482 <_printf_i+0x166>
 800554a:	3501      	adds	r5, #1
 800554c:	68e3      	ldr	r3, [r4, #12]
 800554e:	9903      	ldr	r1, [sp, #12]
 8005550:	1a5b      	subs	r3, r3, r1
 8005552:	42ab      	cmp	r3, r5
 8005554:	dcf2      	bgt.n	800553c <_printf_i+0x220>
 8005556:	e7eb      	b.n	8005530 <_printf_i+0x214>
 8005558:	2500      	movs	r5, #0
 800555a:	f104 0619 	add.w	r6, r4, #25
 800555e:	e7f5      	b.n	800554c <_printf_i+0x230>
 8005560:	080061a5 	.word	0x080061a5
 8005564:	080061b6 	.word	0x080061b6

08005568 <_sbrk_r>:
 8005568:	b538      	push	{r3, r4, r5, lr}
 800556a:	2300      	movs	r3, #0
 800556c:	4d05      	ldr	r5, [pc, #20]	; (8005584 <_sbrk_r+0x1c>)
 800556e:	4604      	mov	r4, r0
 8005570:	4608      	mov	r0, r1
 8005572:	602b      	str	r3, [r5, #0]
 8005574:	f7fc ff7a 	bl	800246c <_sbrk>
 8005578:	1c43      	adds	r3, r0, #1
 800557a:	d102      	bne.n	8005582 <_sbrk_r+0x1a>
 800557c:	682b      	ldr	r3, [r5, #0]
 800557e:	b103      	cbz	r3, 8005582 <_sbrk_r+0x1a>
 8005580:	6023      	str	r3, [r4, #0]
 8005582:	bd38      	pop	{r3, r4, r5, pc}
 8005584:	20000f1c 	.word	0x20000f1c

08005588 <__sread>:
 8005588:	b510      	push	{r4, lr}
 800558a:	460c      	mov	r4, r1
 800558c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005590:	f000 f8b6 	bl	8005700 <_read_r>
 8005594:	2800      	cmp	r0, #0
 8005596:	bfab      	itete	ge
 8005598:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800559a:	89a3      	ldrhlt	r3, [r4, #12]
 800559c:	181b      	addge	r3, r3, r0
 800559e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80055a2:	bfac      	ite	ge
 80055a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80055a6:	81a3      	strhlt	r3, [r4, #12]
 80055a8:	bd10      	pop	{r4, pc}

080055aa <__swrite>:
 80055aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055ae:	461f      	mov	r7, r3
 80055b0:	898b      	ldrh	r3, [r1, #12]
 80055b2:	4605      	mov	r5, r0
 80055b4:	05db      	lsls	r3, r3, #23
 80055b6:	460c      	mov	r4, r1
 80055b8:	4616      	mov	r6, r2
 80055ba:	d505      	bpl.n	80055c8 <__swrite+0x1e>
 80055bc:	2302      	movs	r3, #2
 80055be:	2200      	movs	r2, #0
 80055c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055c4:	f000 f870 	bl	80056a8 <_lseek_r>
 80055c8:	89a3      	ldrh	r3, [r4, #12]
 80055ca:	4632      	mov	r2, r6
 80055cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055d0:	81a3      	strh	r3, [r4, #12]
 80055d2:	4628      	mov	r0, r5
 80055d4:	463b      	mov	r3, r7
 80055d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055de:	f000 b817 	b.w	8005610 <_write_r>

080055e2 <__sseek>:
 80055e2:	b510      	push	{r4, lr}
 80055e4:	460c      	mov	r4, r1
 80055e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055ea:	f000 f85d 	bl	80056a8 <_lseek_r>
 80055ee:	1c43      	adds	r3, r0, #1
 80055f0:	89a3      	ldrh	r3, [r4, #12]
 80055f2:	bf15      	itete	ne
 80055f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80055f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80055fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80055fe:	81a3      	strheq	r3, [r4, #12]
 8005600:	bf18      	it	ne
 8005602:	81a3      	strhne	r3, [r4, #12]
 8005604:	bd10      	pop	{r4, pc}

08005606 <__sclose>:
 8005606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800560a:	f000 b81b 	b.w	8005644 <_close_r>
	...

08005610 <_write_r>:
 8005610:	b538      	push	{r3, r4, r5, lr}
 8005612:	4604      	mov	r4, r0
 8005614:	4608      	mov	r0, r1
 8005616:	4611      	mov	r1, r2
 8005618:	2200      	movs	r2, #0
 800561a:	4d05      	ldr	r5, [pc, #20]	; (8005630 <_write_r+0x20>)
 800561c:	602a      	str	r2, [r5, #0]
 800561e:	461a      	mov	r2, r3
 8005620:	f7fc fed8 	bl	80023d4 <_write>
 8005624:	1c43      	adds	r3, r0, #1
 8005626:	d102      	bne.n	800562e <_write_r+0x1e>
 8005628:	682b      	ldr	r3, [r5, #0]
 800562a:	b103      	cbz	r3, 800562e <_write_r+0x1e>
 800562c:	6023      	str	r3, [r4, #0]
 800562e:	bd38      	pop	{r3, r4, r5, pc}
 8005630:	20000f1c 	.word	0x20000f1c

08005634 <abort>:
 8005634:	2006      	movs	r0, #6
 8005636:	b508      	push	{r3, lr}
 8005638:	f000 f89c 	bl	8005774 <raise>
 800563c:	2001      	movs	r0, #1
 800563e:	f7fc fea2 	bl	8002386 <_exit>
	...

08005644 <_close_r>:
 8005644:	b538      	push	{r3, r4, r5, lr}
 8005646:	2300      	movs	r3, #0
 8005648:	4d05      	ldr	r5, [pc, #20]	; (8005660 <_close_r+0x1c>)
 800564a:	4604      	mov	r4, r0
 800564c:	4608      	mov	r0, r1
 800564e:	602b      	str	r3, [r5, #0]
 8005650:	f7fc fedc 	bl	800240c <_close>
 8005654:	1c43      	adds	r3, r0, #1
 8005656:	d102      	bne.n	800565e <_close_r+0x1a>
 8005658:	682b      	ldr	r3, [r5, #0]
 800565a:	b103      	cbz	r3, 800565e <_close_r+0x1a>
 800565c:	6023      	str	r3, [r4, #0]
 800565e:	bd38      	pop	{r3, r4, r5, pc}
 8005660:	20000f1c 	.word	0x20000f1c

08005664 <_fstat_r>:
 8005664:	b538      	push	{r3, r4, r5, lr}
 8005666:	2300      	movs	r3, #0
 8005668:	4d06      	ldr	r5, [pc, #24]	; (8005684 <_fstat_r+0x20>)
 800566a:	4604      	mov	r4, r0
 800566c:	4608      	mov	r0, r1
 800566e:	4611      	mov	r1, r2
 8005670:	602b      	str	r3, [r5, #0]
 8005672:	f7fc fed6 	bl	8002422 <_fstat>
 8005676:	1c43      	adds	r3, r0, #1
 8005678:	d102      	bne.n	8005680 <_fstat_r+0x1c>
 800567a:	682b      	ldr	r3, [r5, #0]
 800567c:	b103      	cbz	r3, 8005680 <_fstat_r+0x1c>
 800567e:	6023      	str	r3, [r4, #0]
 8005680:	bd38      	pop	{r3, r4, r5, pc}
 8005682:	bf00      	nop
 8005684:	20000f1c 	.word	0x20000f1c

08005688 <_isatty_r>:
 8005688:	b538      	push	{r3, r4, r5, lr}
 800568a:	2300      	movs	r3, #0
 800568c:	4d05      	ldr	r5, [pc, #20]	; (80056a4 <_isatty_r+0x1c>)
 800568e:	4604      	mov	r4, r0
 8005690:	4608      	mov	r0, r1
 8005692:	602b      	str	r3, [r5, #0]
 8005694:	f7fc fed4 	bl	8002440 <_isatty>
 8005698:	1c43      	adds	r3, r0, #1
 800569a:	d102      	bne.n	80056a2 <_isatty_r+0x1a>
 800569c:	682b      	ldr	r3, [r5, #0]
 800569e:	b103      	cbz	r3, 80056a2 <_isatty_r+0x1a>
 80056a0:	6023      	str	r3, [r4, #0]
 80056a2:	bd38      	pop	{r3, r4, r5, pc}
 80056a4:	20000f1c 	.word	0x20000f1c

080056a8 <_lseek_r>:
 80056a8:	b538      	push	{r3, r4, r5, lr}
 80056aa:	4604      	mov	r4, r0
 80056ac:	4608      	mov	r0, r1
 80056ae:	4611      	mov	r1, r2
 80056b0:	2200      	movs	r2, #0
 80056b2:	4d05      	ldr	r5, [pc, #20]	; (80056c8 <_lseek_r+0x20>)
 80056b4:	602a      	str	r2, [r5, #0]
 80056b6:	461a      	mov	r2, r3
 80056b8:	f7fc fecc 	bl	8002454 <_lseek>
 80056bc:	1c43      	adds	r3, r0, #1
 80056be:	d102      	bne.n	80056c6 <_lseek_r+0x1e>
 80056c0:	682b      	ldr	r3, [r5, #0]
 80056c2:	b103      	cbz	r3, 80056c6 <_lseek_r+0x1e>
 80056c4:	6023      	str	r3, [r4, #0]
 80056c6:	bd38      	pop	{r3, r4, r5, pc}
 80056c8:	20000f1c 	.word	0x20000f1c

080056cc <memchr>:
 80056cc:	4603      	mov	r3, r0
 80056ce:	b510      	push	{r4, lr}
 80056d0:	b2c9      	uxtb	r1, r1
 80056d2:	4402      	add	r2, r0
 80056d4:	4293      	cmp	r3, r2
 80056d6:	4618      	mov	r0, r3
 80056d8:	d101      	bne.n	80056de <memchr+0x12>
 80056da:	2000      	movs	r0, #0
 80056dc:	e003      	b.n	80056e6 <memchr+0x1a>
 80056de:	7804      	ldrb	r4, [r0, #0]
 80056e0:	3301      	adds	r3, #1
 80056e2:	428c      	cmp	r4, r1
 80056e4:	d1f6      	bne.n	80056d4 <memchr+0x8>
 80056e6:	bd10      	pop	{r4, pc}

080056e8 <__malloc_lock>:
 80056e8:	4801      	ldr	r0, [pc, #4]	; (80056f0 <__malloc_lock+0x8>)
 80056ea:	f7ff bb04 	b.w	8004cf6 <__retarget_lock_acquire_recursive>
 80056ee:	bf00      	nop
 80056f0:	20000f10 	.word	0x20000f10

080056f4 <__malloc_unlock>:
 80056f4:	4801      	ldr	r0, [pc, #4]	; (80056fc <__malloc_unlock+0x8>)
 80056f6:	f7ff baff 	b.w	8004cf8 <__retarget_lock_release_recursive>
 80056fa:	bf00      	nop
 80056fc:	20000f10 	.word	0x20000f10

08005700 <_read_r>:
 8005700:	b538      	push	{r3, r4, r5, lr}
 8005702:	4604      	mov	r4, r0
 8005704:	4608      	mov	r0, r1
 8005706:	4611      	mov	r1, r2
 8005708:	2200      	movs	r2, #0
 800570a:	4d05      	ldr	r5, [pc, #20]	; (8005720 <_read_r+0x20>)
 800570c:	602a      	str	r2, [r5, #0]
 800570e:	461a      	mov	r2, r3
 8005710:	f7fc fe43 	bl	800239a <_read>
 8005714:	1c43      	adds	r3, r0, #1
 8005716:	d102      	bne.n	800571e <_read_r+0x1e>
 8005718:	682b      	ldr	r3, [r5, #0]
 800571a:	b103      	cbz	r3, 800571e <_read_r+0x1e>
 800571c:	6023      	str	r3, [r4, #0]
 800571e:	bd38      	pop	{r3, r4, r5, pc}
 8005720:	20000f1c 	.word	0x20000f1c

08005724 <_raise_r>:
 8005724:	291f      	cmp	r1, #31
 8005726:	b538      	push	{r3, r4, r5, lr}
 8005728:	4604      	mov	r4, r0
 800572a:	460d      	mov	r5, r1
 800572c:	d904      	bls.n	8005738 <_raise_r+0x14>
 800572e:	2316      	movs	r3, #22
 8005730:	6003      	str	r3, [r0, #0]
 8005732:	f04f 30ff 	mov.w	r0, #4294967295
 8005736:	bd38      	pop	{r3, r4, r5, pc}
 8005738:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800573a:	b112      	cbz	r2, 8005742 <_raise_r+0x1e>
 800573c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005740:	b94b      	cbnz	r3, 8005756 <_raise_r+0x32>
 8005742:	4620      	mov	r0, r4
 8005744:	f000 f830 	bl	80057a8 <_getpid_r>
 8005748:	462a      	mov	r2, r5
 800574a:	4601      	mov	r1, r0
 800574c:	4620      	mov	r0, r4
 800574e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005752:	f000 b817 	b.w	8005784 <_kill_r>
 8005756:	2b01      	cmp	r3, #1
 8005758:	d00a      	beq.n	8005770 <_raise_r+0x4c>
 800575a:	1c59      	adds	r1, r3, #1
 800575c:	d103      	bne.n	8005766 <_raise_r+0x42>
 800575e:	2316      	movs	r3, #22
 8005760:	6003      	str	r3, [r0, #0]
 8005762:	2001      	movs	r0, #1
 8005764:	e7e7      	b.n	8005736 <_raise_r+0x12>
 8005766:	2400      	movs	r4, #0
 8005768:	4628      	mov	r0, r5
 800576a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800576e:	4798      	blx	r3
 8005770:	2000      	movs	r0, #0
 8005772:	e7e0      	b.n	8005736 <_raise_r+0x12>

08005774 <raise>:
 8005774:	4b02      	ldr	r3, [pc, #8]	; (8005780 <raise+0xc>)
 8005776:	4601      	mov	r1, r0
 8005778:	6818      	ldr	r0, [r3, #0]
 800577a:	f7ff bfd3 	b.w	8005724 <_raise_r>
 800577e:	bf00      	nop
 8005780:	2000000c 	.word	0x2000000c

08005784 <_kill_r>:
 8005784:	b538      	push	{r3, r4, r5, lr}
 8005786:	2300      	movs	r3, #0
 8005788:	4d06      	ldr	r5, [pc, #24]	; (80057a4 <_kill_r+0x20>)
 800578a:	4604      	mov	r4, r0
 800578c:	4608      	mov	r0, r1
 800578e:	4611      	mov	r1, r2
 8005790:	602b      	str	r3, [r5, #0]
 8005792:	f7fc fde8 	bl	8002366 <_kill>
 8005796:	1c43      	adds	r3, r0, #1
 8005798:	d102      	bne.n	80057a0 <_kill_r+0x1c>
 800579a:	682b      	ldr	r3, [r5, #0]
 800579c:	b103      	cbz	r3, 80057a0 <_kill_r+0x1c>
 800579e:	6023      	str	r3, [r4, #0]
 80057a0:	bd38      	pop	{r3, r4, r5, pc}
 80057a2:	bf00      	nop
 80057a4:	20000f1c 	.word	0x20000f1c

080057a8 <_getpid_r>:
 80057a8:	f7fc bdd6 	b.w	8002358 <_getpid>

080057ac <_gettimeofday>:
 80057ac:	2258      	movs	r2, #88	; 0x58
 80057ae:	4b02      	ldr	r3, [pc, #8]	; (80057b8 <_gettimeofday+0xc>)
 80057b0:	f04f 30ff 	mov.w	r0, #4294967295
 80057b4:	601a      	str	r2, [r3, #0]
 80057b6:	4770      	bx	lr
 80057b8:	20000f1c 	.word	0x20000f1c

080057bc <_init>:
 80057bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057be:	bf00      	nop
 80057c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057c2:	bc08      	pop	{r3}
 80057c4:	469e      	mov	lr, r3
 80057c6:	4770      	bx	lr

080057c8 <_fini>:
 80057c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ca:	bf00      	nop
 80057cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ce:	bc08      	pop	{r3}
 80057d0:	469e      	mov	lr, r3
 80057d2:	4770      	bx	lr
