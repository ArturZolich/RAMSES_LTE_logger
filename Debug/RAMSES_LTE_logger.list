
RAMSES_LTE_logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054f0  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000894  0800562c  0800562c  0001562c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ec0  08005ec0  00020498  2**0
                  CONTENTS
  4 .ARM          00000008  08005ec0  08005ec0  00015ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ec8  08005ec8  00020498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ec8  08005ec8  00015ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ecc  08005ecc  00015ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000498  20000000  08005ed0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000325c  20000498  08006368  00020498  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200036f4  08006368  000236f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020498  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a5c3  00000000  00000000  000204c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ddf  00000000  00000000  0002aa84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000830  00000000  00000000  0002c868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000778  00000000  00000000  0002d098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016838  00000000  00000000  0002d810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a6b8  00000000  00000000  00044048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008683b  00000000  00000000  0004e700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d4f3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c58  00000000  00000000  000d4f8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  000d7be4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000d7c08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000498 	.word	0x20000498
 8000158:	00000000 	.word	0x00000000
 800015c:	08005614 	.word	0x08005614

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000049c 	.word	0x2000049c
 8000178:	08005614 	.word	0x08005614

0800017c <strcmp>:
 800017c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000180:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000184:	2a01      	cmp	r2, #1
 8000186:	bf28      	it	cs
 8000188:	429a      	cmpcs	r2, r3
 800018a:	d0f7      	beq.n	800017c <strcmp>
 800018c:	1ad0      	subs	r0, r2, r3
 800018e:	4770      	bx	lr

08000190 <strlen>:
 8000190:	4603      	mov	r3, r0
 8000192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000196:	2a00      	cmp	r2, #0
 8000198:	d1fb      	bne.n	8000192 <strlen+0x2>
 800019a:	1a18      	subs	r0, r3, r0
 800019c:	3801      	subs	r0, #1
 800019e:	4770      	bx	lr

080001a0 <__aeabi_uldivmod>:
 80001a0:	b953      	cbnz	r3, 80001b8 <__aeabi_uldivmod+0x18>
 80001a2:	b94a      	cbnz	r2, 80001b8 <__aeabi_uldivmod+0x18>
 80001a4:	2900      	cmp	r1, #0
 80001a6:	bf08      	it	eq
 80001a8:	2800      	cmpeq	r0, #0
 80001aa:	bf1c      	itt	ne
 80001ac:	f04f 31ff 	movne.w	r1, #4294967295
 80001b0:	f04f 30ff 	movne.w	r0, #4294967295
 80001b4:	f000 b976 	b.w	80004a4 <__aeabi_idiv0>
 80001b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001c0:	f000 f806 	bl	80001d0 <__udivmoddi4>
 80001c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001cc:	b004      	add	sp, #16
 80001ce:	4770      	bx	lr

080001d0 <__udivmoddi4>:
 80001d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001d4:	9e08      	ldr	r6, [sp, #32]
 80001d6:	460d      	mov	r5, r1
 80001d8:	4604      	mov	r4, r0
 80001da:	4688      	mov	r8, r1
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d14d      	bne.n	800027c <__udivmoddi4+0xac>
 80001e0:	428a      	cmp	r2, r1
 80001e2:	4694      	mov	ip, r2
 80001e4:	d968      	bls.n	80002b8 <__udivmoddi4+0xe8>
 80001e6:	fab2 f282 	clz	r2, r2
 80001ea:	b152      	cbz	r2, 8000202 <__udivmoddi4+0x32>
 80001ec:	fa01 f302 	lsl.w	r3, r1, r2
 80001f0:	f1c2 0120 	rsb	r1, r2, #32
 80001f4:	fa20 f101 	lsr.w	r1, r0, r1
 80001f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80001fc:	ea41 0803 	orr.w	r8, r1, r3
 8000200:	4094      	lsls	r4, r2
 8000202:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000206:	fbb8 f7f1 	udiv	r7, r8, r1
 800020a:	fa1f fe8c 	uxth.w	lr, ip
 800020e:	fb01 8817 	mls	r8, r1, r7, r8
 8000212:	fb07 f00e 	mul.w	r0, r7, lr
 8000216:	0c23      	lsrs	r3, r4, #16
 8000218:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800021c:	4298      	cmp	r0, r3
 800021e:	d90a      	bls.n	8000236 <__udivmoddi4+0x66>
 8000220:	eb1c 0303 	adds.w	r3, ip, r3
 8000224:	f107 35ff 	add.w	r5, r7, #4294967295
 8000228:	f080 811e 	bcs.w	8000468 <__udivmoddi4+0x298>
 800022c:	4298      	cmp	r0, r3
 800022e:	f240 811b 	bls.w	8000468 <__udivmoddi4+0x298>
 8000232:	3f02      	subs	r7, #2
 8000234:	4463      	add	r3, ip
 8000236:	1a1b      	subs	r3, r3, r0
 8000238:	fbb3 f0f1 	udiv	r0, r3, r1
 800023c:	fb01 3310 	mls	r3, r1, r0, r3
 8000240:	fb00 fe0e 	mul.w	lr, r0, lr
 8000244:	b2a4      	uxth	r4, r4
 8000246:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800024a:	45a6      	cmp	lr, r4
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x94>
 800024e:	eb1c 0404 	adds.w	r4, ip, r4
 8000252:	f100 33ff 	add.w	r3, r0, #4294967295
 8000256:	f080 8109 	bcs.w	800046c <__udivmoddi4+0x29c>
 800025a:	45a6      	cmp	lr, r4
 800025c:	f240 8106 	bls.w	800046c <__udivmoddi4+0x29c>
 8000260:	4464      	add	r4, ip
 8000262:	3802      	subs	r0, #2
 8000264:	2100      	movs	r1, #0
 8000266:	eba4 040e 	sub.w	r4, r4, lr
 800026a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800026e:	b11e      	cbz	r6, 8000278 <__udivmoddi4+0xa8>
 8000270:	2300      	movs	r3, #0
 8000272:	40d4      	lsrs	r4, r2
 8000274:	e9c6 4300 	strd	r4, r3, [r6]
 8000278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027c:	428b      	cmp	r3, r1
 800027e:	d908      	bls.n	8000292 <__udivmoddi4+0xc2>
 8000280:	2e00      	cmp	r6, #0
 8000282:	f000 80ee 	beq.w	8000462 <__udivmoddi4+0x292>
 8000286:	2100      	movs	r1, #0
 8000288:	e9c6 0500 	strd	r0, r5, [r6]
 800028c:	4608      	mov	r0, r1
 800028e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000292:	fab3 f183 	clz	r1, r3
 8000296:	2900      	cmp	r1, #0
 8000298:	d14a      	bne.n	8000330 <__udivmoddi4+0x160>
 800029a:	42ab      	cmp	r3, r5
 800029c:	d302      	bcc.n	80002a4 <__udivmoddi4+0xd4>
 800029e:	4282      	cmp	r2, r0
 80002a0:	f200 80fc 	bhi.w	800049c <__udivmoddi4+0x2cc>
 80002a4:	1a84      	subs	r4, r0, r2
 80002a6:	eb65 0303 	sbc.w	r3, r5, r3
 80002aa:	2001      	movs	r0, #1
 80002ac:	4698      	mov	r8, r3
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	d0e2      	beq.n	8000278 <__udivmoddi4+0xa8>
 80002b2:	e9c6 4800 	strd	r4, r8, [r6]
 80002b6:	e7df      	b.n	8000278 <__udivmoddi4+0xa8>
 80002b8:	b902      	cbnz	r2, 80002bc <__udivmoddi4+0xec>
 80002ba:	deff      	udf	#255	; 0xff
 80002bc:	fab2 f282 	clz	r2, r2
 80002c0:	2a00      	cmp	r2, #0
 80002c2:	f040 8091 	bne.w	80003e8 <__udivmoddi4+0x218>
 80002c6:	eba1 000c 	sub.w	r0, r1, ip
 80002ca:	2101      	movs	r1, #1
 80002cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d0:	fa1f fe8c 	uxth.w	lr, ip
 80002d4:	fbb0 f3f7 	udiv	r3, r0, r7
 80002d8:	fb07 0013 	mls	r0, r7, r3, r0
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002e2:	fb0e f003 	mul.w	r0, lr, r3
 80002e6:	42a8      	cmp	r0, r5
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0x12c>
 80002ea:	eb1c 0505 	adds.w	r5, ip, r5
 80002ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x12a>
 80002f4:	42a8      	cmp	r0, r5
 80002f6:	f200 80ce 	bhi.w	8000496 <__udivmoddi4+0x2c6>
 80002fa:	4643      	mov	r3, r8
 80002fc:	1a2d      	subs	r5, r5, r0
 80002fe:	fbb5 f0f7 	udiv	r0, r5, r7
 8000302:	fb07 5510 	mls	r5, r7, r0, r5
 8000306:	fb0e fe00 	mul.w	lr, lr, r0
 800030a:	b2a4      	uxth	r4, r4
 800030c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000310:	45a6      	cmp	lr, r4
 8000312:	d908      	bls.n	8000326 <__udivmoddi4+0x156>
 8000314:	eb1c 0404 	adds.w	r4, ip, r4
 8000318:	f100 35ff 	add.w	r5, r0, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x154>
 800031e:	45a6      	cmp	lr, r4
 8000320:	f200 80b6 	bhi.w	8000490 <__udivmoddi4+0x2c0>
 8000324:	4628      	mov	r0, r5
 8000326:	eba4 040e 	sub.w	r4, r4, lr
 800032a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800032e:	e79e      	b.n	800026e <__udivmoddi4+0x9e>
 8000330:	f1c1 0720 	rsb	r7, r1, #32
 8000334:	408b      	lsls	r3, r1
 8000336:	fa22 fc07 	lsr.w	ip, r2, r7
 800033a:	ea4c 0c03 	orr.w	ip, ip, r3
 800033e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000342:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000346:	fbba f8f9 	udiv	r8, sl, r9
 800034a:	fa20 f307 	lsr.w	r3, r0, r7
 800034e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000352:	408d      	lsls	r5, r1
 8000354:	fa1f fe8c 	uxth.w	lr, ip
 8000358:	431d      	orrs	r5, r3
 800035a:	fa00 f301 	lsl.w	r3, r0, r1
 800035e:	fb08 f00e 	mul.w	r0, r8, lr
 8000362:	0c2c      	lsrs	r4, r5, #16
 8000364:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000368:	42a0      	cmp	r0, r4
 800036a:	fa02 f201 	lsl.w	r2, r2, r1
 800036e:	d90b      	bls.n	8000388 <__udivmoddi4+0x1b8>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f108 3aff 	add.w	sl, r8, #4294967295
 8000378:	f080 8088 	bcs.w	800048c <__udivmoddi4+0x2bc>
 800037c:	42a0      	cmp	r0, r4
 800037e:	f240 8085 	bls.w	800048c <__udivmoddi4+0x2bc>
 8000382:	f1a8 0802 	sub.w	r8, r8, #2
 8000386:	4464      	add	r4, ip
 8000388:	1a24      	subs	r4, r4, r0
 800038a:	fbb4 f0f9 	udiv	r0, r4, r9
 800038e:	fb09 4410 	mls	r4, r9, r0, r4
 8000392:	fb00 fe0e 	mul.w	lr, r0, lr
 8000396:	b2ad      	uxth	r5, r5
 8000398:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800039c:	45a6      	cmp	lr, r4
 800039e:	d908      	bls.n	80003b2 <__udivmoddi4+0x1e2>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f100 35ff 	add.w	r5, r0, #4294967295
 80003a8:	d26c      	bcs.n	8000484 <__udivmoddi4+0x2b4>
 80003aa:	45a6      	cmp	lr, r4
 80003ac:	d96a      	bls.n	8000484 <__udivmoddi4+0x2b4>
 80003ae:	3802      	subs	r0, #2
 80003b0:	4464      	add	r4, ip
 80003b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003b6:	fba0 9502 	umull	r9, r5, r0, r2
 80003ba:	eba4 040e 	sub.w	r4, r4, lr
 80003be:	42ac      	cmp	r4, r5
 80003c0:	46c8      	mov	r8, r9
 80003c2:	46ae      	mov	lr, r5
 80003c4:	d356      	bcc.n	8000474 <__udivmoddi4+0x2a4>
 80003c6:	d053      	beq.n	8000470 <__udivmoddi4+0x2a0>
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d069      	beq.n	80004a0 <__udivmoddi4+0x2d0>
 80003cc:	ebb3 0208 	subs.w	r2, r3, r8
 80003d0:	eb64 040e 	sbc.w	r4, r4, lr
 80003d4:	fa22 f301 	lsr.w	r3, r2, r1
 80003d8:	fa04 f707 	lsl.w	r7, r4, r7
 80003dc:	431f      	orrs	r7, r3
 80003de:	40cc      	lsrs	r4, r1
 80003e0:	e9c6 7400 	strd	r7, r4, [r6]
 80003e4:	2100      	movs	r1, #0
 80003e6:	e747      	b.n	8000278 <__udivmoddi4+0xa8>
 80003e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ec:	f1c2 0120 	rsb	r1, r2, #32
 80003f0:	fa25 f301 	lsr.w	r3, r5, r1
 80003f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f8:	fa20 f101 	lsr.w	r1, r0, r1
 80003fc:	4095      	lsls	r5, r2
 80003fe:	430d      	orrs	r5, r1
 8000400:	fbb3 f1f7 	udiv	r1, r3, r7
 8000404:	fb07 3311 	mls	r3, r7, r1, r3
 8000408:	fa1f fe8c 	uxth.w	lr, ip
 800040c:	0c28      	lsrs	r0, r5, #16
 800040e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000412:	fb01 f30e 	mul.w	r3, r1, lr
 8000416:	4283      	cmp	r3, r0
 8000418:	fa04 f402 	lsl.w	r4, r4, r2
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x260>
 800041e:	eb1c 0000 	adds.w	r0, ip, r0
 8000422:	f101 38ff 	add.w	r8, r1, #4294967295
 8000426:	d22f      	bcs.n	8000488 <__udivmoddi4+0x2b8>
 8000428:	4283      	cmp	r3, r0
 800042a:	d92d      	bls.n	8000488 <__udivmoddi4+0x2b8>
 800042c:	3902      	subs	r1, #2
 800042e:	4460      	add	r0, ip
 8000430:	1ac0      	subs	r0, r0, r3
 8000432:	fbb0 f3f7 	udiv	r3, r0, r7
 8000436:	fb07 0013 	mls	r0, r7, r3, r0
 800043a:	b2ad      	uxth	r5, r5
 800043c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000440:	fb03 f00e 	mul.w	r0, r3, lr
 8000444:	42a8      	cmp	r0, r5
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x28a>
 8000448:	eb1c 0505 	adds.w	r5, ip, r5
 800044c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000450:	d216      	bcs.n	8000480 <__udivmoddi4+0x2b0>
 8000452:	42a8      	cmp	r0, r5
 8000454:	d914      	bls.n	8000480 <__udivmoddi4+0x2b0>
 8000456:	3b02      	subs	r3, #2
 8000458:	4465      	add	r5, ip
 800045a:	1a28      	subs	r0, r5, r0
 800045c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000460:	e738      	b.n	80002d4 <__udivmoddi4+0x104>
 8000462:	4631      	mov	r1, r6
 8000464:	4630      	mov	r0, r6
 8000466:	e707      	b.n	8000278 <__udivmoddi4+0xa8>
 8000468:	462f      	mov	r7, r5
 800046a:	e6e4      	b.n	8000236 <__udivmoddi4+0x66>
 800046c:	4618      	mov	r0, r3
 800046e:	e6f9      	b.n	8000264 <__udivmoddi4+0x94>
 8000470:	454b      	cmp	r3, r9
 8000472:	d2a9      	bcs.n	80003c8 <__udivmoddi4+0x1f8>
 8000474:	ebb9 0802 	subs.w	r8, r9, r2
 8000478:	eb65 0e0c 	sbc.w	lr, r5, ip
 800047c:	3801      	subs	r0, #1
 800047e:	e7a3      	b.n	80003c8 <__udivmoddi4+0x1f8>
 8000480:	4643      	mov	r3, r8
 8000482:	e7ea      	b.n	800045a <__udivmoddi4+0x28a>
 8000484:	4628      	mov	r0, r5
 8000486:	e794      	b.n	80003b2 <__udivmoddi4+0x1e2>
 8000488:	4641      	mov	r1, r8
 800048a:	e7d1      	b.n	8000430 <__udivmoddi4+0x260>
 800048c:	46d0      	mov	r8, sl
 800048e:	e77b      	b.n	8000388 <__udivmoddi4+0x1b8>
 8000490:	4464      	add	r4, ip
 8000492:	3802      	subs	r0, #2
 8000494:	e747      	b.n	8000326 <__udivmoddi4+0x156>
 8000496:	3b02      	subs	r3, #2
 8000498:	4465      	add	r5, ip
 800049a:	e72f      	b.n	80002fc <__udivmoddi4+0x12c>
 800049c:	4608      	mov	r0, r1
 800049e:	e706      	b.n	80002ae <__udivmoddi4+0xde>
 80004a0:	4631      	mov	r1, r6
 80004a2:	e6e9      	b.n	8000278 <__udivmoddi4+0xa8>

080004a4 <__aeabi_idiv0>:
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop

080004a8 <UARTDMA_UartIrqHandler>:
#include "string.h"
#include "scheduler.h"


void UARTDMA_UartIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
	if(huartdma->huart->Instance->SR & UART_FLAG_IDLE)       // Check if Idle flag is set
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	f003 0310 	and.w	r3, r3, #16
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d01a      	beq.n	80004f6 <UARTDMA_UartIrqHandler+0x4e>
	{

		volatile uint32_t tmp;
		tmp = huartdma->huart->Instance->SR;                      // Read status register
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	60fb      	str	r3, [r7, #12]
		tmp = huartdma->huart->Instance->DR;                      // Read data register
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	685b      	ldr	r3, [r3, #4]
 80004d2:	60fb      	str	r3, [r7, #12]
		huartdma->huart->hdmarx->Instance->CCR &= ~DMA_CCR_EN; 	  // Disable DMA - it will force Transfer Complete interrupt if it's enabled
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	f022 0201 	bic.w	r2, r2, #1
 80004ea:	601a      	str	r2, [r3, #0]
																  // BUT! It's only for DMA Streams(i.e F4), not for Channels like there in F103!
		tmp = tmp; // For unused warning
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	60fb      	str	r3, [r7, #12]
		UARTDMA_DmaIrqHandler(huartdma); // Since DMA IRQ won't start independently for Channels, we have to handle it manually
 80004f0:	6878      	ldr	r0, [r7, #4]
 80004f2:	f000 f804 	bl	80004fe <UARTDMA_DmaIrqHandler>
	}
}
 80004f6:	bf00      	nop
 80004f8:	3710      	adds	r7, #16
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <UARTDMA_DmaIrqHandler>:

void UARTDMA_DmaIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 80004fe:	b480      	push	{r7}
 8000500:	b089      	sub	sp, #36	; 0x24
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
	{
		__IO uint32_t ISR;   // DMA interrupt status register
		__IO uint32_t IFCR;  // DMA interrupt flag clear register
	} DMA_Base_Registers;

	DMA_Base_Registers *DmaRegisters = (DMA_Base_Registers *) huartdma->huart->hdmarx->DmaBaseAddress; // Take registers base address
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800050c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800050e:	61bb      	str	r3, [r7, #24]

	if (__HAL_DMA_GET_IT_SOURCE(huartdma->huart->hdmarx, DMA_IT_TC) != RESET) // Check if interrupt source is Transfer Complete
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f003 0302 	and.w	r3, r3, #2
 800051e:	2b00      	cmp	r3, #0
 8000520:	d079      	beq.n	8000616 <UARTDMA_DmaIrqHandler+0x118>
	{
		DmaRegisters->IFCR = DMA_IFCR_CTCIF1 << huartdma->huart->hdmarx->ChannelIndex;	// Clear Transfer Complete flag
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052a:	2202      	movs	r2, #2
 800052c:	409a      	lsls	r2, r3
 800052e:	69bb      	ldr	r3, [r7, #24]
 8000530:	605a      	str	r2, [r3, #4]

		Length = DMA_RX_BUFFER_SIZE - huartdma->huart->hdmarx->Instance->CNDTR; // Get the Length of transfered data
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8000540:	617b      	str	r3, [r7, #20]

		UartBufferPointer = huartdma->UART_Buffer;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8000548:	613b      	str	r3, [r7, #16]
		DmaBufferPointer = 	huartdma->DMA_RX_Buffer;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	3304      	adds	r3, #4
 800054e:	60fb      	str	r3, [r7, #12]

		// Write received data for UART main buffer - circular buffer
		for(i = 0; i < Length; i++)
 8000550:	2300      	movs	r3, #0
 8000552:	83fb      	strh	r3, [r7, #30]
 8000554:	e035      	b.n	80005c2 <UARTDMA_DmaIrqHandler+0xc4>
		{
			TempHead = (huartdma->UartBufferHead + 1) % UART_BUFFER_SIZE;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	f8b3 3c04 	ldrh.w	r3, [r3, #3076]	; 0xc04
 800055c:	3301      	adds	r3, #1
 800055e:	425a      	negs	r2, r3
 8000560:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000564:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000568:	bf58      	it	pl
 800056a:	4253      	negpl	r3, r2
 800056c:	817b      	strh	r3, [r7, #10]
			if(TempHead == huartdma->UartBufferTail)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 8000574:	897a      	ldrh	r2, [r7, #10]
 8000576:	429a      	cmp	r2, r3
 8000578:	d106      	bne.n	8000588 <UARTDMA_DmaIrqHandler+0x8a>
			{
				huartdma->UartBufferHead = huartdma->UartBufferTail;	// No room for new data
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	f8b3 2c06 	ldrh.w	r2, [r3, #3078]	; 0xc06
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	f8a3 2c04 	strh.w	r2, [r3, #3076]	; 0xc04
 8000586:	e019      	b.n	80005bc <UARTDMA_DmaIrqHandler+0xbe>
			}
			else
			{
				UartBufferPointer[TempHead] = DmaBufferPointer[i];
 8000588:	8bfb      	ldrh	r3, [r7, #30]
 800058a:	68fa      	ldr	r2, [r7, #12]
 800058c:	441a      	add	r2, r3
 800058e:	897b      	ldrh	r3, [r7, #10]
 8000590:	6939      	ldr	r1, [r7, #16]
 8000592:	440b      	add	r3, r1
 8000594:	7812      	ldrb	r2, [r2, #0]
 8000596:	701a      	strb	r2, [r3, #0]
				if(UartBufferPointer[TempHead] == '\n')
 8000598:	897b      	ldrh	r3, [r7, #10]
 800059a:	693a      	ldr	r2, [r7, #16]
 800059c:	4413      	add	r3, r2
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b0a      	cmp	r3, #10
 80005a2:	d107      	bne.n	80005b4 <UARTDMA_DmaIrqHandler+0xb6>
				{
					huartdma->UartBufferLines++;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f893 3c08 	ldrb.w	r3, [r3, #3080]	; 0xc08
 80005aa:	3301      	adds	r3, #1
 80005ac:	b2da      	uxtb	r2, r3
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	f883 2c08 	strb.w	r2, [r3, #3080]	; 0xc08
				}
				huartdma->UartBufferHead = TempHead;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	897a      	ldrh	r2, [r7, #10]
 80005b8:	f8a3 2c04 	strh.w	r2, [r3, #3076]	; 0xc04
		for(i = 0; i < Length; i++)
 80005bc:	8bfb      	ldrh	r3, [r7, #30]
 80005be:	3301      	adds	r3, #1
 80005c0:	83fb      	strh	r3, [r7, #30]
 80005c2:	8bfb      	ldrh	r3, [r7, #30]
 80005c4:	697a      	ldr	r2, [r7, #20]
 80005c6:	429a      	cmp	r2, r3
 80005c8:	d8c5      	bhi.n	8000556 <UARTDMA_DmaIrqHandler+0x58>
			}
		}

		huartdma->UartTransferCompleted = 1;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2201      	movs	r2, #1
 80005ce:	f883 2c09 	strb.w	r2, [r3, #3081]	; 0xc09


		DmaRegisters->IFCR = 0x0FU << huartdma->huart->hdmarx->ChannelIndex; 		// Clear all interrupts
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005da:	220f      	movs	r2, #15
 80005dc:	409a      	lsls	r2, r3
 80005de:	69bb      	ldr	r3, [r7, #24]
 80005e0:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CMAR = (uint32_t) huartdma->DMA_RX_Buffer; // Set memory address for DMA again
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	1d1a      	adds	r2, r3, #4
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	60da      	str	r2, [r3, #12]
		huartdma->huart->hdmarx->Instance->CNDTR = DMA_RX_BUFFER_SIZE; // Set number of bytes to receive
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005fc:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CCR |= DMA_CCR_EN;            	// Start DMA transfer
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f042 0201 	orr.w	r2, r2, #1
 8000614:	601a      	str	r2, [r3, #0]
	}
}
 8000616:	bf00      	nop
 8000618:	3724      	adds	r7, #36	; 0x24
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr

08000620 <UARTDMA_GetCharFromBuffer>:

int UARTDMA_GetCharFromBuffer(UARTDMA_HandleTypeDef *huartdma)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	if(huartdma->UartBufferHead == huartdma->UartBufferTail)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	f8b3 2c04 	ldrh.w	r2, [r3, #3076]	; 0xc04
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 8000634:	429a      	cmp	r2, r3
 8000636:	d106      	bne.n	8000646 <UARTDMA_GetCharFromBuffer+0x26>
	{
		huartdma->UartTransferCompleted = 0;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	2200      	movs	r2, #0
 800063c:	f883 2c09 	strb.w	r2, [r3, #3081]	; 0xc09
		return -1; // error - no char to return
 8000640:	f04f 33ff 	mov.w	r3, #4294967295
 8000644:	e016      	b.n	8000674 <UARTDMA_GetCharFromBuffer+0x54>
	}
	huartdma->UartBufferTail = (huartdma->UartBufferTail + 1) % UART_BUFFER_SIZE;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 800064c:	3301      	adds	r3, #1
 800064e:	425a      	negs	r2, r3
 8000650:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000654:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000658:	bf58      	it	pl
 800065a:	4253      	negpl	r3, r2
 800065c:	b29a      	uxth	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	f8a3 2c06 	strh.w	r2, [r3, #3078]	; 0xc06

	return huartdma->UART_Buffer[huartdma->UartBufferTail];
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 800066a:	461a      	mov	r2, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4413      	add	r3, r2
 8000670:	f893 3404 	ldrb.w	r3, [r3, #1028]	; 0x404
}
 8000674:	4618      	mov	r0, r3
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	bc80      	pop	{r7}
 800067c:	4770      	bx	lr

0800067e <UARTDMA_IsDataReady>:

uint8_t UARTDMA_IsDataReady(UARTDMA_HandleTypeDef *huartdma)
{
 800067e:	b480      	push	{r7}
 8000680:	b083      	sub	sp, #12
 8000682:	af00      	add	r7, sp, #0
 8000684:	6078      	str	r0, [r7, #4]
	if(huartdma->UartBufferLines)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	f893 3c08 	ldrb.w	r3, [r3, #3080]	; 0xc08
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <UARTDMA_IsDataReady+0x16>
		return 1;
 8000690:	2301      	movs	r3, #1
 8000692:	e000      	b.n	8000696 <UARTDMA_IsDataReady+0x18>
	else
		return 0;
 8000694:	2300      	movs	r3, #0
}
 8000696:	4618      	mov	r0, r3
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr

080006a0 <UARTDMA_GetLineFromBuffer>:

int UARTDMA_GetLineFromBuffer(UARTDMA_HandleTypeDef *huartdma, char *OutBuffer)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	6039      	str	r1, [r7, #0]
	char TempChar;
	char* LinePointer = OutBuffer;
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	60fb      	str	r3, [r7, #12]
	if(huartdma->UartBufferLines)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	f893 3c08 	ldrb.w	r3, [r3, #3080]	; 0xc08
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d024      	beq.n	8000702 <UARTDMA_GetLineFromBuffer+0x62>
	{
		while((TempChar = UARTDMA_GetCharFromBuffer(huartdma)))
 80006b8:	e00e      	b.n	80006d8 <UARTDMA_GetLineFromBuffer+0x38>
		{
			if(TempChar == '\n')
 80006ba:	7afb      	ldrb	r3, [r7, #11]
 80006bc:	2b0a      	cmp	r3, #10
 80006be:	d014      	beq.n	80006ea <UARTDMA_GetLineFromBuffer+0x4a>
			{
				break;
			}
			if((TempChar != '\n') && (TempChar != '\r')){
 80006c0:	7afb      	ldrb	r3, [r7, #11]
 80006c2:	2b0a      	cmp	r3, #10
 80006c4:	d008      	beq.n	80006d8 <UARTDMA_GetLineFromBuffer+0x38>
 80006c6:	7afb      	ldrb	r3, [r7, #11]
 80006c8:	2b0d      	cmp	r3, #13
 80006ca:	d005      	beq.n	80006d8 <UARTDMA_GetLineFromBuffer+0x38>
				*LinePointer = TempChar;
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	7afa      	ldrb	r2, [r7, #11]
 80006d0:	701a      	strb	r2, [r3, #0]
				LinePointer++;
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	3301      	adds	r3, #1
 80006d6:	60fb      	str	r3, [r7, #12]
		while((TempChar = UARTDMA_GetCharFromBuffer(huartdma)))
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f7ff ffa1 	bl	8000620 <UARTDMA_GetCharFromBuffer>
 80006de:	4603      	mov	r3, r0
 80006e0:	72fb      	strb	r3, [r7, #11]
 80006e2:	7afb      	ldrb	r3, [r7, #11]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d1e8      	bne.n	80006ba <UARTDMA_GetLineFromBuffer+0x1a>
 80006e8:	e000      	b.n	80006ec <UARTDMA_GetLineFromBuffer+0x4c>
				break;
 80006ea:	bf00      	nop
			}
		}
		*LinePointer = 0; // end of cstring
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	2200      	movs	r2, #0
 80006f0:	701a      	strb	r2, [r3, #0]
		huartdma->UartBufferLines--; // decrement line counter
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	f893 3c08 	ldrb.w	r3, [r3, #3080]	; 0xc08
 80006f8:	3b01      	subs	r3, #1
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	f883 2c08 	strb.w	r2, [r3, #3080]	; 0xc08
	}
	return 0;
 8000702:	2300      	movs	r3, #0
}
 8000704:	4618      	mov	r0, r3
 8000706:	3710      	adds	r7, #16
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <UARTDMA_Init>:

void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
	huartdma->huart = huart;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	683a      	ldr	r2, [r7, #0]
 800071a:	601a      	str	r2, [r3, #0]

	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	68da      	ldr	r2, [r3, #12]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f042 0210 	orr.w	r2, r2, #16
 800072e:	60da      	str	r2, [r3, #12]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f042 0202 	orr.w	r2, r2, #2
 8000746:	601a      	str	r2, [r3, #0]

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	6818      	ldr	r0, [r3, #0]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	3304      	adds	r3, #4
 8000750:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000754:	4619      	mov	r1, r3
 8000756:	f003 f92a 	bl	80039ae <HAL_UART_Receive_DMA>

	huartdma->huart->hdmarx->Instance->CCR &= ~DMA_CCR_HTIE; // Disable DMA Half Complete interrupt
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f022 0204 	bic.w	r2, r2, #4
 8000770:	601a      	str	r2, [r3, #0]
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000784:	1d39      	adds	r1, r7, #4
 8000786:	f04f 33ff 	mov.w	r3, #4294967295
 800078a:	2201      	movs	r2, #1
 800078c:	4803      	ldr	r0, [pc, #12]	; (800079c <__io_putchar+0x20>)
 800078e:	f003 f88b 	bl	80038a8 <HAL_UART_Transmit>
	return ch;
 8000792:	687b      	ldr	r3, [r7, #4]
}
 8000794:	4618      	mov	r0, r3
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	200028d8 	.word	0x200028d8

080007a0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80007a0:	b5b0      	push	{r4, r5, r7, lr}
 80007a2:	f5ad 5de8 	sub.w	sp, sp, #7424	; 0x1d00
 80007a6:	b082      	sub	sp, #8
 80007a8:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80007aa:	f001 fdec 	bl	8002386 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80007ae:	f000 ffc5 	bl	800173c <SystemClock_Config>

	/* USER CODE BEGIN SysInit */

	srand(time(NULL));
 80007b2:	2000      	movs	r0, #0
 80007b4:	f003 feb8 	bl	8004528 <time>
 80007b8:	4602      	mov	r2, r0
 80007ba:	460b      	mov	r3, r1
 80007bc:	4613      	mov	r3, r2
 80007be:	4618      	mov	r0, r3
 80007c0:	f003 fd92 	bl	80042e8 <srand>

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80007c4:	f001 f8de 	bl	8001984 <MX_GPIO_Init>
	MX_DMA_Init();
 80007c8:	f001 f8ae 	bl	8001928 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80007cc:	f001 f858 	bl	8001880 <MX_USART2_UART_Init>
	MX_UART4_Init();
 80007d0:	f001 f802 	bl	80017d8 <MX_UART4_Init>
	MX_USART1_UART_Init();
 80007d4:	f001 f82a 	bl	800182c <MX_USART1_UART_Init>
	MX_USART3_UART_Init();
 80007d8:	f001 f87c 	bl	80018d4 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	UARTDMA_Init(&hLTE_uart2dma6, &huart2); // receives LTE modem serial
 80007dc:	49d1      	ldr	r1, [pc, #836]	; (8000b24 <main+0x384>)
 80007de:	48d2      	ldr	r0, [pc, #840]	; (8000b28 <main+0x388>)
 80007e0:	f7ff ff94 	bl	800070c <UARTDMA_Init>
	UARTDMA_Init(&hRAM_1_uart1dma5, &huart1); // receives RAMSES 1 serial
 80007e4:	49d1      	ldr	r1, [pc, #836]	; (8000b2c <main+0x38c>)
 80007e6:	48d2      	ldr	r0, [pc, #840]	; (8000b30 <main+0x390>)
 80007e8:	f7ff ff90 	bl	800070c <UARTDMA_Init>
	UARTDMA_Init(&hRAM_2_uart3dma3, &huart3); // receives RAMSES 2 serial
 80007ec:	49d1      	ldr	r1, [pc, #836]	; (8000b34 <main+0x394>)
 80007ee:	48d2      	ldr	r0, [pc, #840]	; (8000b38 <main+0x398>)
 80007f0:	f7ff ff8c 	bl	800070c <UARTDMA_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */


	char random[20]; 				// create an initial file name, in case LTE won't get time fix
	itoa(rand(), random, 10);
 80007f4:	f003 fda6 	bl	8004344 <rand>
 80007f8:	f507 53e6 	add.w	r3, r7, #7360	; 0x1cc0
 80007fc:	220a      	movs	r2, #10
 80007fe:	4619      	mov	r1, r3
 8000800:	f003 fcda 	bl	80041b8 <itoa>
	strcat((char*)g_fileName, random);
 8000804:	f507 53e6 	add.w	r3, r7, #7360	; 0x1cc0
 8000808:	4619      	mov	r1, r3
 800080a:	48cc      	ldr	r0, [pc, #816]	; (8000b3c <main+0x39c>)
 800080c:	f003 fdd8 	bl	80043c0 <strcat>
	strcat((char*)g_fileName, ".txt\"\r\n");
 8000810:	48ca      	ldr	r0, [pc, #808]	; (8000b3c <main+0x39c>)
 8000812:	f7ff fcbd 	bl	8000190 <strlen>
 8000816:	4603      	mov	r3, r0
 8000818:	461a      	mov	r2, r3
 800081a:	4bc8      	ldr	r3, [pc, #800]	; (8000b3c <main+0x39c>)
 800081c:	4413      	add	r3, r2
 800081e:	49c8      	ldr	r1, [pc, #800]	; (8000b40 <main+0x3a0>)
 8000820:	461a      	mov	r2, r3
 8000822:	460b      	mov	r3, r1
 8000824:	cb03      	ldmia	r3!, {r0, r1}
 8000826:	6010      	str	r0, [r2, #0]
 8000828:	6051      	str	r1, [r2, #4]


	printf("\t\tFILE_RAND: %s\r\n", g_fileName);
 800082a:	49c4      	ldr	r1, [pc, #784]	; (8000b3c <main+0x39c>)
 800082c:	48c5      	ldr	r0, [pc, #788]	; (8000b44 <main+0x3a4>)
 800082e:	f003 fccd 	bl	80041cc <iprintf>


	// query, sample, dataSize, data


	uint8_t current_action = 0; // currently executed action
 8000832:	2300      	movs	r3, #0
 8000834:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8000838:	f102 0217 	add.w	r2, r2, #23
 800083c:	7013      	strb	r3, [r2, #0]

	uint8_t filename_time_set = 0; // flag to see if random file name was updated with LTE time
 800083e:	2300      	movs	r3, #0
 8000840:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8000844:	f102 0216 	add.w	r2, r2, #22
 8000848:	7013      	strb	r3, [r2, #0]
	//uint8_t transfer_status = 0;

	command action_list[255]; // list of actions to perform


	uint8_t startup = 0; // flag to see if we just reset the processor to check LTE modem - if it is On or Off
 800084a:	2300      	movs	r3, #0
 800084c:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8000850:	f102 0215 	add.w	r2, r2, #21
 8000854:	7013      	strb	r3, [r2, #0]

	int resolution = 0; // reduces amount of printf, helpful in case there's no delay between loops
 8000856:	2300      	movs	r3, #0
 8000858:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 800085c:	f102 0210 	add.w	r2, r2, #16
 8000860:	6013      	str	r3, [r2, #0]


	action_list[0] = LTE_sim_check_active;
 8000862:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8000866:	f6a3 431c 	subw	r3, r3, #3100	; 0xc1c
 800086a:	4ab7      	ldr	r2, [pc, #732]	; (8000b48 <main+0x3a8>)
 800086c:	461c      	mov	r4, r3
 800086e:	4615      	mov	r5, r2
 8000870:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000872:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000874:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000878:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[1] = LTE_disable_echo;
 800087c:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8000880:	f6a3 431c 	subw	r3, r3, #3100	; 0xc1c
 8000884:	4ab1      	ldr	r2, [pc, #708]	; (8000b4c <main+0x3ac>)
 8000886:	f103 041c 	add.w	r4, r3, #28
 800088a:	4615      	mov	r5, r2
 800088c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800088e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000890:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000894:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[2] = LTE_deactivate_gprs;
 8000898:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 800089c:	f6a3 431c 	subw	r3, r3, #3100	; 0xc1c
 80008a0:	4aab      	ldr	r2, [pc, #684]	; (8000b50 <main+0x3b0>)
 80008a2:	f103 0438 	add.w	r4, r3, #56	; 0x38
 80008a6:	4615      	mov	r5, r2
 80008a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[3] = LTE_attach_gprs;
 80008b4:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 80008b8:	f6a3 431c 	subw	r3, r3, #3100	; 0xc1c
 80008bc:	4aa5      	ldr	r2, [pc, #660]	; (8000b54 <main+0x3b4>)
 80008be:	f103 0454 	add.w	r4, r3, #84	; 0x54
 80008c2:	4615      	mov	r5, r2
 80008c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[4] = LTE_set_apn;
 80008d0:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 80008d4:	f6a3 431c 	subw	r3, r3, #3100	; 0xc1c
 80008d8:	4a9f      	ldr	r2, [pc, #636]	; (8000b58 <main+0x3b8>)
 80008da:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80008de:	4615      	mov	r5, r2
 80008e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[5] = LTE_gprs_up;
 80008ec:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 80008f0:	f6a3 431c 	subw	r3, r3, #3100	; 0xc1c
 80008f4:	4a99      	ldr	r2, [pc, #612]	; (8000b5c <main+0x3bc>)
 80008f6:	f103 048c 	add.w	r4, r3, #140	; 0x8c
 80008fa:	4615      	mov	r5, r2
 80008fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000900:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000904:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[6] = LTE_get_ip;
 8000908:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 800090c:	f6a3 431c 	subw	r3, r3, #3100	; 0xc1c
 8000910:	4a93      	ldr	r2, [pc, #588]	; (8000b60 <main+0x3c0>)
 8000912:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8000916:	4615      	mov	r5, r2
 8000918:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800091a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800091c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000920:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[7] = LTE_init_gps;
 8000924:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8000928:	f6a3 431c 	subw	r3, r3, #3100	; 0xc1c
 800092c:	4a8d      	ldr	r2, [pc, #564]	; (8000b64 <main+0x3c4>)
 800092e:	f103 04c4 	add.w	r4, r3, #196	; 0xc4
 8000932:	4615      	mov	r5, r2
 8000934:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000936:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000938:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800093c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[8] = LTE_reset_action;
 8000940:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8000944:	f6a3 431c 	subw	r3, r3, #3100	; 0xc1c
 8000948:	4a87      	ldr	r2, [pc, #540]	; (8000b68 <main+0x3c8>)
 800094a:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 800094e:	4615      	mov	r5, r2
 8000950:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000952:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000954:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000958:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[9] = LTE_bearer_1;
 800095c:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8000960:	f6a3 431c 	subw	r3, r3, #3100	; 0xc1c
 8000964:	4a81      	ldr	r2, [pc, #516]	; (8000b6c <main+0x3cc>)
 8000966:	f103 04fc 	add.w	r4, r3, #252	; 0xfc
 800096a:	4615      	mov	r5, r2
 800096c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800096e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000970:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000974:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[10] = LTE_bearer_2;
 8000978:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 800097c:	f6a3 431c 	subw	r3, r3, #3100	; 0xc1c
 8000980:	4a7b      	ldr	r2, [pc, #492]	; (8000b70 <main+0x3d0>)
 8000982:	f503 748c 	add.w	r4, r3, #280	; 0x118
 8000986:	4615      	mov	r5, r2
 8000988:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800098a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800098c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000990:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[11] = LTE_bearer_3;
 8000994:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8000998:	f6a3 431c 	subw	r3, r3, #3100	; 0xc1c
 800099c:	4a75      	ldr	r2, [pc, #468]	; (8000b74 <main+0x3d4>)
 800099e:	f503 749a 	add.w	r4, r3, #308	; 0x134
 80009a2:	4615      	mov	r5, r2
 80009a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[12] = LTE_set_dns;
 80009b0:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 80009b4:	f6a3 431c 	subw	r3, r3, #3100	; 0xc1c
 80009b8:	4a6f      	ldr	r2, [pc, #444]	; (8000b78 <main+0x3d8>)
 80009ba:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 80009be:	4615      	mov	r5, r2
 80009c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[13] = RAM_1_query;
 80009cc:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 80009d0:	f6a3 431c 	subw	r3, r3, #3100	; 0xc1c
 80009d4:	4a69      	ldr	r2, [pc, #420]	; (8000b7c <main+0x3dc>)
 80009d6:	f503 74b6 	add.w	r4, r3, #364	; 0x16c
 80009da:	4615      	mov	r5, r2
 80009dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[14] = RAM_1_query;/// WARNING ZOLICH RAM 2!!!!!!
 80009e8:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 80009ec:	f6a3 431c 	subw	r3, r3, #3100	; 0xc1c
 80009f0:	4a62      	ldr	r2, [pc, #392]	; (8000b7c <main+0x3dc>)
 80009f2:	f503 74c4 	add.w	r4, r3, #392	; 0x188
 80009f6:	4615      	mov	r5, r2
 80009f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a00:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[15] = LTE_get_position;
 8000a04:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8000a08:	f6a3 431c 	subw	r3, r3, #3100	; 0xc1c
 8000a0c:	4a5c      	ldr	r2, [pc, #368]	; (8000b80 <main+0x3e0>)
 8000a0e:	f503 74d2 	add.w	r4, r3, #420	; 0x1a4
 8000a12:	4615      	mov	r5, r2
 8000a14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a18:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[16] = LTE_get_time;
 8000a20:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8000a24:	f6a3 431c 	subw	r3, r3, #3100	; 0xc1c
 8000a28:	4a56      	ldr	r2, [pc, #344]	; (8000b84 <main+0x3e4>)
 8000a2a:	f503 74e0 	add.w	r4, r3, #448	; 0x1c0
 8000a2e:	4615      	mov	r5, r2
 8000a30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a34:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a38:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[17] = LTE_ftp_quit;
 8000a3c:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8000a40:	f6a3 431c 	subw	r3, r3, #3100	; 0xc1c
 8000a44:	4a50      	ldr	r2, [pc, #320]	; (8000b88 <main+0x3e8>)
 8000a46:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 8000a4a:	4615      	mov	r5, r2
 8000a4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a50:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[18] = LTE_ftp_bearer;
 8000a58:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8000a5c:	f6a3 431c 	subw	r3, r3, #3100	; 0xc1c
 8000a60:	4a4a      	ldr	r2, [pc, #296]	; (8000b8c <main+0x3ec>)
 8000a62:	f503 74fc 	add.w	r4, r3, #504	; 0x1f8
 8000a66:	4615      	mov	r5, r2
 8000a68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a6c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[19] = LTE_ftp_type_binary;
 8000a74:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8000a78:	f6a3 431c 	subw	r3, r3, #3100	; 0xc1c
 8000a7c:	4a44      	ldr	r2, [pc, #272]	; (8000b90 <main+0x3f0>)
 8000a7e:	f503 7405 	add.w	r4, r3, #532	; 0x214
 8000a82:	4615      	mov	r5, r2
 8000a84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a88:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[20] = LTE_ftp_append;
 8000a90:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8000a94:	f6a3 431c 	subw	r3, r3, #3100	; 0xc1c
 8000a98:	4a3e      	ldr	r2, [pc, #248]	; (8000b94 <main+0x3f4>)
 8000a9a:	f503 740c 	add.w	r4, r3, #560	; 0x230
 8000a9e:	4615      	mov	r5, r2
 8000aa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aa4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000aa8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[21] = LTE_ftp_ip;
 8000aac:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8000ab0:	f6a3 431c 	subw	r3, r3, #3100	; 0xc1c
 8000ab4:	4a38      	ldr	r2, [pc, #224]	; (8000b98 <main+0x3f8>)
 8000ab6:	f503 7413 	add.w	r4, r3, #588	; 0x24c
 8000aba:	4615      	mov	r5, r2
 8000abc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000abe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ac0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ac4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[22] = LTE_ftp_user;
 8000ac8:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8000acc:	f6a3 431c 	subw	r3, r3, #3100	; 0xc1c
 8000ad0:	4a32      	ldr	r2, [pc, #200]	; (8000b9c <main+0x3fc>)
 8000ad2:	f503 741a 	add.w	r4, r3, #616	; 0x268
 8000ad6:	4615      	mov	r5, r2
 8000ad8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ada:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000adc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ae0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[23] = LTE_ftp_pass;
 8000ae4:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8000ae8:	f6a3 431c 	subw	r3, r3, #3100	; 0xc1c
 8000aec:	4a2c      	ldr	r2, [pc, #176]	; (8000ba0 <main+0x400>)
 8000aee:	f503 7421 	add.w	r4, r3, #644	; 0x284
 8000af2:	4615      	mov	r5, r2
 8000af4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000af6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000af8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000afc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[24] = LTE_ftp_port;
 8000b00:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8000b04:	f6a3 431c 	subw	r3, r3, #3100	; 0xc1c
 8000b08:	4a26      	ldr	r2, [pc, #152]	; (8000ba4 <main+0x404>)
 8000b0a:	f503 7428 	add.w	r4, r3, #672	; 0x2a0
 8000b0e:	4615      	mov	r5, r2
 8000b10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b14:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[25] = LTE_ftp_path;
 8000b1c:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8000b20:	e042      	b.n	8000ba8 <main+0x408>
 8000b22:	bf00      	nop
 8000b24:	20002968 	.word	0x20002968
 8000b28:	200004b4 	.word	0x200004b4
 8000b2c:	20002920 	.word	0x20002920
 8000b30:	200010c0 	.word	0x200010c0
 8000b34:	200029b0 	.word	0x200029b0
 8000b38:	20001ccc 	.word	0x20001ccc
 8000b3c:	20000000 	.word	0x20000000
 8000b40:	080058c8 	.word	0x080058c8
 8000b44:	080058d0 	.word	0x080058d0
 8000b48:	2000008c 	.word	0x2000008c
 8000b4c:	200000a8 	.word	0x200000a8
 8000b50:	200000c4 	.word	0x200000c4
 8000b54:	200000e0 	.word	0x200000e0
 8000b58:	200000fc 	.word	0x200000fc
 8000b5c:	20000118 	.word	0x20000118
 8000b60:	20000134 	.word	0x20000134
 8000b64:	20000150 	.word	0x20000150
 8000b68:	2000039c 	.word	0x2000039c
 8000b6c:	200001a4 	.word	0x200001a4
 8000b70:	200001c0 	.word	0x200001c0
 8000b74:	200001dc 	.word	0x200001dc
 8000b78:	200001f8 	.word	0x200001f8
 8000b7c:	200003b8 	.word	0x200003b8
 8000b80:	2000016c 	.word	0x2000016c
 8000b84:	200002f4 	.word	0x200002f4
 8000b88:	20000188 	.word	0x20000188
 8000b8c:	20000214 	.word	0x20000214
 8000b90:	20000230 	.word	0x20000230
 8000b94:	2000024c 	.word	0x2000024c
 8000b98:	20000268 	.word	0x20000268
 8000b9c:	20000284 	.word	0x20000284
 8000ba0:	200002a0 	.word	0x200002a0
 8000ba4:	200002bc 	.word	0x200002bc
 8000ba8:	f6a3 431c 	subw	r3, r3, #3100	; 0xc1c
 8000bac:	4ad1      	ldr	r2, [pc, #836]	; (8000ef4 <main+0x754>)
 8000bae:	f503 742f 	add.w	r4, r3, #700	; 0x2bc
 8000bb2:	4615      	mov	r5, r2
 8000bb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bbc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[26] = LTE_ftp_filename;
 8000bc0:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8000bc4:	f6a3 431c 	subw	r3, r3, #3100	; 0xc1c
 8000bc8:	4acb      	ldr	r2, [pc, #812]	; (8000ef8 <main+0x758>)
 8000bca:	f503 7436 	add.w	r4, r3, #728	; 0x2d8
 8000bce:	4615      	mov	r5, r2
 8000bd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bd4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bd8:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[27] = LTE_ftp_start_put;
 8000bdc:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8000be0:	f6a3 431c 	subw	r3, r3, #3100	; 0xc1c
 8000be4:	4ac5      	ldr	r2, [pc, #788]	; (8000efc <main+0x75c>)
 8000be6:	f503 743d 	add.w	r4, r3, #756	; 0x2f4
 8000bea:	4615      	mov	r5, r2
 8000bec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bf0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bf4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[28] = LTE_ftp_put_data_size;
 8000bf8:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8000bfc:	f6a3 431c 	subw	r3, r3, #3100	; 0xc1c
 8000c00:	4abf      	ldr	r2, [pc, #764]	; (8000f00 <main+0x760>)
 8000c02:	f503 7444 	add.w	r4, r3, #784	; 0x310
 8000c06:	4615      	mov	r5, r2
 8000c08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c0c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c10:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[29] = LTE_ftp_put_data;
 8000c14:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8000c18:	f6a3 431c 	subw	r3, r3, #3100	; 0xc1c
 8000c1c:	4ab9      	ldr	r2, [pc, #740]	; (8000f04 <main+0x764>)
 8000c1e:	f503 744b 	add.w	r4, r3, #812	; 0x32c
 8000c22:	4615      	mov	r5, r2
 8000c24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}


	action_list[30] = LTE_ftp_put_RAM_1_data_size;
 8000c30:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8000c34:	f6a3 431c 	subw	r3, r3, #3100	; 0xc1c
 8000c38:	4ab3      	ldr	r2, [pc, #716]	; (8000f08 <main+0x768>)
 8000c3a:	f503 7452 	add.w	r4, r3, #840	; 0x348
 8000c3e:	4615      	mov	r5, r2
 8000c40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[31] = LTE_ftp_put_RAM_1_data;
 8000c4c:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8000c50:	f6a3 431c 	subw	r3, r3, #3100	; 0xc1c
 8000c54:	4aad      	ldr	r2, [pc, #692]	; (8000f0c <main+0x76c>)
 8000c56:	f503 7459 	add.w	r4, r3, #868	; 0x364
 8000c5a:	4615      	mov	r5, r2
 8000c5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c60:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c64:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[32] = LTE_ftp_put_RAM_1_data_size;   /// WARNING ZOLICH RAM 2!!!!!!
 8000c68:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8000c6c:	f6a3 431c 	subw	r3, r3, #3100	; 0xc1c
 8000c70:	4aa5      	ldr	r2, [pc, #660]	; (8000f08 <main+0x768>)
 8000c72:	f503 7460 	add.w	r4, r3, #896	; 0x380
 8000c76:	4615      	mov	r5, r2
 8000c78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c7c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c80:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[33] = LTE_ftp_put_RAM_1_data;
 8000c84:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8000c88:	f6a3 431c 	subw	r3, r3, #3100	; 0xc1c
 8000c8c:	4a9f      	ldr	r2, [pc, #636]	; (8000f0c <main+0x76c>)
 8000c8e:	f503 7467 	add.w	r4, r3, #924	; 0x39c
 8000c92:	4615      	mov	r5, r2
 8000c94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c98:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[34] = LTE_ftp_end_put;
 8000ca0:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8000ca4:	f6a3 431c 	subw	r3, r3, #3100	; 0xc1c
 8000ca8:	4a99      	ldr	r2, [pc, #612]	; (8000f10 <main+0x770>)
 8000caa:	f503 746e 	add.w	r4, r3, #952	; 0x3b8
 8000cae:	4615      	mov	r5, r2
 8000cb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cb4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cb8:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	// sample loop cycle below

	action_list[35] = RAM_1_sample;
 8000cbc:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8000cc0:	f6a3 431c 	subw	r3, r3, #3100	; 0xc1c
 8000cc4:	4a93      	ldr	r2, [pc, #588]	; (8000f14 <main+0x774>)
 8000cc6:	f503 7475 	add.w	r4, r3, #980	; 0x3d4
 8000cca:	4615      	mov	r5, r2
 8000ccc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cd0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cd4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[36] = RAM_1_sample;/// WARNING ZOLICH RAM 2!!!!!!
 8000cd8:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8000cdc:	f6a3 431c 	subw	r3, r3, #3100	; 0xc1c
 8000ce0:	4a8c      	ldr	r2, [pc, #560]	; (8000f14 <main+0x774>)
 8000ce2:	f503 747c 	add.w	r4, r3, #1008	; 0x3f0
 8000ce6:	4615      	mov	r5, r2
 8000ce8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cf0:	e884 0007 	stmia.w	r4, {r0, r1, r2}


	action_list[37] = LTE_get_position;
 8000cf4:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8000cf8:	f6a3 431c 	subw	r3, r3, #3100	; 0xc1c
 8000cfc:	4a86      	ldr	r2, [pc, #536]	; (8000f18 <main+0x778>)
 8000cfe:	f203 440c 	addw	r4, r3, #1036	; 0x40c
 8000d02:	4615      	mov	r5, r2
 8000d04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d08:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[38] = LTE_get_time;
 8000d10:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8000d14:	f6a3 431c 	subw	r3, r3, #3100	; 0xc1c
 8000d18:	4a80      	ldr	r2, [pc, #512]	; (8000f1c <main+0x77c>)
 8000d1a:	f503 6485 	add.w	r4, r3, #1064	; 0x428
 8000d1e:	4615      	mov	r5, r2
 8000d20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d24:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d28:	e884 0007 	stmia.w	r4, {r0, r1, r2}


	action_list[39] = LTE_ftp_start_put;
 8000d2c:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8000d30:	f6a3 431c 	subw	r3, r3, #3100	; 0xc1c
 8000d34:	4a71      	ldr	r2, [pc, #452]	; (8000efc <main+0x75c>)
 8000d36:	f203 4444 	addw	r4, r3, #1092	; 0x444
 8000d3a:	4615      	mov	r5, r2
 8000d3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d40:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[40] = LTE_ftp_put_data_size;
 8000d48:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8000d4c:	f6a3 431c 	subw	r3, r3, #3100	; 0xc1c
 8000d50:	4a6b      	ldr	r2, [pc, #428]	; (8000f00 <main+0x760>)
 8000d52:	f503 648c 	add.w	r4, r3, #1120	; 0x460
 8000d56:	4615      	mov	r5, r2
 8000d58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d5c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[41] = LTE_ftp_put_data;
 8000d64:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8000d68:	f6a3 431c 	subw	r3, r3, #3100	; 0xc1c
 8000d6c:	4a65      	ldr	r2, [pc, #404]	; (8000f04 <main+0x764>)
 8000d6e:	f203 447c 	addw	r4, r3, #1148	; 0x47c
 8000d72:	4615      	mov	r5, r2
 8000d74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d78:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[42] = LTE_ftp_put_RAM_1_data_size;
 8000d80:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8000d84:	f6a3 431c 	subw	r3, r3, #3100	; 0xc1c
 8000d88:	4a5f      	ldr	r2, [pc, #380]	; (8000f08 <main+0x768>)
 8000d8a:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8000d8e:	4615      	mov	r5, r2
 8000d90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d94:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[43] = LTE_ftp_put_RAM_1_data;
 8000d9c:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8000da0:	f6a3 431c 	subw	r3, r3, #3100	; 0xc1c
 8000da4:	4a59      	ldr	r2, [pc, #356]	; (8000f0c <main+0x76c>)
 8000da6:	f203 44b4 	addw	r4, r3, #1204	; 0x4b4
 8000daa:	4615      	mov	r5, r2
 8000dac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000db0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000db4:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[44] = LTE_ftp_put_RAM_1_data_size;   /// WARNING ZOLICH RAM 2!!!!!!
 8000db8:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8000dbc:	f6a3 431c 	subw	r3, r3, #3100	; 0xc1c
 8000dc0:	4a51      	ldr	r2, [pc, #324]	; (8000f08 <main+0x768>)
 8000dc2:	f503 649a 	add.w	r4, r3, #1232	; 0x4d0
 8000dc6:	4615      	mov	r5, r2
 8000dc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dcc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dd0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[45] = LTE_ftp_put_RAM_1_data;
 8000dd4:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8000dd8:	f6a3 431c 	subw	r3, r3, #3100	; 0xc1c
 8000ddc:	4a4b      	ldr	r2, [pc, #300]	; (8000f0c <main+0x76c>)
 8000dde:	f203 44ec 	addw	r4, r3, #1260	; 0x4ec
 8000de2:	4615      	mov	r5, r2
 8000de4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000de6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000de8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dec:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[46] = LTE_ftp_end_put;
 8000df0:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8000df4:	f6a3 431c 	subw	r3, r3, #3100	; 0xc1c
 8000df8:	4a45      	ldr	r2, [pc, #276]	; (8000f10 <main+0x770>)
 8000dfa:	f503 64a1 	add.w	r4, r3, #1288	; 0x508
 8000dfe:	4615      	mov	r5, r2
 8000e00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e04:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e08:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[47] = LTE_reset_action;
 8000e0c:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8000e10:	f6a3 431c 	subw	r3, r3, #3100	; 0xc1c
 8000e14:	4a42      	ldr	r2, [pc, #264]	; (8000f20 <main+0x780>)
 8000e16:	f203 5424 	addw	r4, r3, #1316	; 0x524
 8000e1a:	4615      	mov	r5, r2
 8000e1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e20:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e24:	e884 0007 	stmia.w	r4, {r0, r1, r2}


	uint8_t last_action = 47; // number of the last action we want to execute
 8000e28:	232f      	movs	r3, #47	; 0x2f
 8000e2a:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8000e2e:	f102 0203 	add.w	r2, r2, #3
 8000e32:	7013      	strb	r3, [r2, #0]
	uint8_t cycle_start_action = 35; // number of the last action we want to execute
 8000e34:	2323      	movs	r3, #35	; 0x23
 8000e36:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8000e3a:	f102 0202 	add.w	r2, r2, #2
 8000e3e:	7013      	strb	r3, [r2, #0]


	//uint8_t ftp_transfer_active = 0;


	Clear_Array(g_LTE_ParseBuffer, BUFFER_SIZE); // let's start with clean LTE buffer
 8000e40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e44:	4837      	ldr	r0, [pc, #220]	; (8000f24 <main+0x784>)
 8000e46:	f000 fe23 	bl	8001a90 <Clear_Array>


	hRAM_1_uart1dma5.UartTransferCompleted = 0;
 8000e4a:	4b37      	ldr	r3, [pc, #220]	; (8000f28 <main+0x788>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f883 2c09 	strb.w	r2, [r3, #3081]	; 0xc09
	hRAM_2_uart3dma3.UartTransferCompleted = 0;
 8000e52:	4b36      	ldr	r3, [pc, #216]	; (8000f2c <main+0x78c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	f883 2c09 	strb.w	r2, [r3, #3081]	; 0xc09

	while (1)
	{

		if(current_action > last_action){
 8000e5a:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8000e5e:	f103 0317 	add.w	r3, r3, #23
 8000e62:	781a      	ldrb	r2, [r3, #0]
 8000e64:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8000e68:	f103 0303 	add.w	r3, r3, #3
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d90e      	bls.n	8000e90 <main+0x6f0>
			Clear_Array(g_LTE_ParseBuffer, BUFFER_SIZE);
 8000e72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e76:	482b      	ldr	r0, [pc, #172]	; (8000f24 <main+0x784>)
 8000e78:	f000 fe0a 	bl	8001a90 <Clear_Array>
			current_action = cycle_start_action;
 8000e7c:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8000e80:	f103 0302 	add.w	r3, r3, #2
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8000e8a:	f102 0217 	add.w	r2, r2, #23
 8000e8e:	7013      	strb	r3, [r2, #0]
		}


		if((resolution % 50) == 0){
 8000e90:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8000e94:	f103 0310 	add.w	r3, r3, #16
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	4b25      	ldr	r3, [pc, #148]	; (8000f30 <main+0x790>)
 8000e9c:	fb83 1302 	smull	r1, r3, r3, r2
 8000ea0:	1119      	asrs	r1, r3, #4
 8000ea2:	17d3      	asrs	r3, r2, #31
 8000ea4:	1acb      	subs	r3, r1, r3
 8000ea6:	2132      	movs	r1, #50	; 0x32
 8000ea8:	fb01 f303 	mul.w	r3, r1, r3
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d108      	bne.n	8000ec4 <main+0x724>
			//printf("TRYING: >>%s<<\r\n", action_list[current_action].cmd);
			printf("TRYING: >>%d<<\r\n", current_action);
 8000eb2:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8000eb6:	f103 0317 	add.w	r3, r3, #23
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	481d      	ldr	r0, [pc, #116]	; (8000f34 <main+0x794>)
 8000ec0:	f003 f984 	bl	80041cc <iprintf>
		}

		enum State state = Do_Action(action_list[current_action], g_LTE_ParseBuffer);
 8000ec4:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8000ec8:	f103 0317 	add.w	r3, r3, #23
 8000ecc:	781a      	ldrb	r2, [r3, #0]
 8000ece:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8000ed2:	f6a3 411c 	subw	r1, r3, #3100	; 0xc1c
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	1a9b      	subs	r3, r3, r2
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	440b      	add	r3, r1
 8000ee0:	4a10      	ldr	r2, [pc, #64]	; (8000f24 <main+0x784>)
 8000ee2:	9203      	str	r2, [sp, #12]
 8000ee4:	466c      	mov	r4, sp
 8000ee6:	f103 0210 	add.w	r2, r3, #16
 8000eea:	ca07      	ldmia	r2, {r0, r1, r2}
 8000eec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000ef0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ef2:	e021      	b.n	8000f38 <main+0x798>
 8000ef4:	200002d8 	.word	0x200002d8
 8000ef8:	20000310 	.word	0x20000310
 8000efc:	2000032c 	.word	0x2000032c
 8000f00:	20000348 	.word	0x20000348
 8000f04:	20000364 	.word	0x20000364
 8000f08:	200003f0 	.word	0x200003f0
 8000f0c:	2000040c 	.word	0x2000040c
 8000f10:	20000380 	.word	0x20000380
 8000f14:	200003d4 	.word	0x200003d4
 8000f18:	2000016c 	.word	0x2000016c
 8000f1c:	200002f4 	.word	0x200002f4
 8000f20:	2000039c 	.word	0x2000039c
 8000f24:	20002ac4 	.word	0x20002ac4
 8000f28:	200010c0 	.word	0x200010c0
 8000f2c:	20001ccc 	.word	0x20001ccc
 8000f30:	51eb851f 	.word	0x51eb851f
 8000f34:	080058e4 	.word	0x080058e4
 8000f38:	f000 fe76 	bl	8001c28 <Do_Action>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8000f42:	f102 0201 	add.w	r2, r2, #1
 8000f46:	7013      	strb	r3, [r2, #0]
		resolution++;
 8000f48:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8000f4c:	f103 0310 	add.w	r3, r3, #16
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	3301      	adds	r3, #1
 8000f54:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8000f58:	f102 0210 	add.w	r2, r2, #16
 8000f5c:	6013      	str	r3, [r2, #0]

		//uint8_t query[] = { 0x23, 0x00, 0x00, 0x80, 0xB0, 0x00, 0x00, 0x01 };
		//uint8_t query[] = { 0x23, 0x00, 0x00, 0x00, 0xA8, 0x00, 0x81, 0x01 };

		switch (state){
 8000f5e:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8000f62:	f103 0301 	add.w	r3, r3, #1
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b05      	cmp	r3, #5
 8000f6a:	f200 8118 	bhi.w	800119e <main+0x9fe>
 8000f6e:	a201      	add	r2, pc, #4	; (adr r2, 8000f74 <main+0x7d4>)
 8000f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f74:	08001009 	.word	0x08001009
 8000f78:	0800119f 	.word	0x0800119f
 8000f7c:	08000f8d 	.word	0x08000f8d
 8000f80:	080010ff 	.word	0x080010ff
 8000f84:	0800102d 	.word	0x0800102d
 8000f88:	0800119f 	.word	0x0800119f
		case GOOD_ANSWER:
			//HAL_UART_Transmit(&huart1, query, SAMPLE_CMD_SIZE, 500);
			//HAL_UART_Transmit(&huart3, sam, SAMPLE_CMD_SIZE, 500);

			//printf("%s - %s\r\n", action_list[current_action].cmd, action_list[current_action].good_answer);
			printf("\tREPLY: >>%s<<\r\n", (char*)g_LTE_ParseBuffer);
 8000f8c:	498c      	ldr	r1, [pc, #560]	; (80011c0 <main+0xa20>)
 8000f8e:	488d      	ldr	r0, [pc, #564]	; (80011c4 <main+0xa24>)
 8000f90:	f003 f91c 	bl	80041cc <iprintf>
			Do_Action(LTE_reset_action, g_LTE_ParseBuffer);
 8000f94:	4b8c      	ldr	r3, [pc, #560]	; (80011c8 <main+0xa28>)
 8000f96:	4a8a      	ldr	r2, [pc, #552]	; (80011c0 <main+0xa20>)
 8000f98:	9203      	str	r2, [sp, #12]
 8000f9a:	466c      	mov	r4, sp
 8000f9c:	f103 0210 	add.w	r2, r3, #16
 8000fa0:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fa2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000fa6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fa8:	f000 fe3e 	bl	8001c28 <Do_Action>
			current_action++;
 8000fac:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8000fb0:	f103 0317 	add.w	r3, r3, #23
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8000fbc:	f102 0217 	add.w	r2, r2, #23
 8000fc0:	7013      	strb	r3, [r2, #0]
			HAL_Delay(action_list[current_action].timeout / 2);
 8000fc2:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8000fc6:	f103 0317 	add.w	r3, r3, #23
 8000fca:	781a      	ldrb	r2, [r3, #0]
 8000fcc:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8000fd0:	f6a3 411c 	subw	r1, r3, #3100	; 0xc1c
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	1a9b      	subs	r3, r3, r2
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	440b      	add	r3, r1
 8000fde:	330c      	adds	r3, #12
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	0fda      	lsrs	r2, r3, #31
 8000fe4:	4413      	add	r3, r2
 8000fe6:	105b      	asrs	r3, r3, #1
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f001 fa3b 	bl	8002464 <HAL_Delay>
			startup = 5;
 8000fee:	2305      	movs	r3, #5
 8000ff0:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8000ff4:	f102 0215 	add.w	r2, r2, #21
 8000ff8:	7013      	strb	r3, [r2, #0]
			resolution = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8001000:	f102 0210 	add.w	r2, r2, #16
 8001004:	6013      	str	r3, [r2, #0]
			break;
 8001006:	e0cb      	b.n	80011a0 <main+0xa00>
		case READY:
			//printf("%s - READY\r\n", action_list[current_action].cmd);
			//printf("BUFFER: >>%s<<\r\n", (char*)LTE_ParseBuffer);
			current_action++;
 8001008:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 800100c:	f103 0317 	add.w	r3, r3, #23
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	3301      	adds	r3, #1
 8001014:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8001018:	f102 0217 	add.w	r2, r2, #23
 800101c:	7013      	strb	r3, [r2, #0]
			resolution = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8001024:	f102 0210 	add.w	r2, r2, #16
 8001028:	6013      	str	r3, [r2, #0]
			break;
 800102a:	e0b9      	b.n	80011a0 <main+0xa00>
		case TIMEOUT:
			printf("%s - Timeout\r\n", action_list[current_action].cmd);
 800102c:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001030:	f103 0317 	add.w	r3, r3, #23
 8001034:	781a      	ldrb	r2, [r3, #0]
 8001036:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 800103a:	f6a3 411c 	subw	r1, r3, #3100	; 0xc1c
 800103e:	4613      	mov	r3, r2
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	1a9b      	subs	r3, r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	440b      	add	r3, r1
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4619      	mov	r1, r3
 800104c:	485f      	ldr	r0, [pc, #380]	; (80011cc <main+0xa2c>)
 800104e:	f003 f8bd 	bl	80041cc <iprintf>
			if(startup < 2){
 8001052:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001056:	f103 0315 	add.w	r3, r3, #21
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d822      	bhi.n	80010a6 <main+0x906>
				printf("INIT\r\n");
 8001060:	485b      	ldr	r0, [pc, #364]	; (80011d0 <main+0xa30>)
 8001062:	f003 f939 	bl	80042d8 <puts>
				printf("TURN ON\r\n");
 8001066:	485b      	ldr	r0, [pc, #364]	; (80011d4 <main+0xa34>)
 8001068:	f003 f936 	bl	80042d8 <puts>
				HAL_GPIO_WritePin(GPIOA,  GPIO_PIN_6, GPIO_PIN_SET);
 800106c:	2201      	movs	r2, #1
 800106e:	2140      	movs	r1, #64	; 0x40
 8001070:	4859      	ldr	r0, [pc, #356]	; (80011d8 <main+0xa38>)
 8001072:	f001 fdbb 	bl	8002bec <HAL_GPIO_WritePin>
				HAL_Delay(1500);
 8001076:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800107a:	f001 f9f3 	bl	8002464 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOA,  GPIO_PIN_6, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	2140      	movs	r1, #64	; 0x40
 8001082:	4855      	ldr	r0, [pc, #340]	; (80011d8 <main+0xa38>)
 8001084:	f001 fdb2 	bl	8002bec <HAL_GPIO_WritePin>
				HAL_Delay(5000);
 8001088:	f241 3088 	movw	r0, #5000	; 0x1388
 800108c:	f001 f9ea 	bl	8002464 <HAL_Delay>
				startup++;
 8001090:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001094:	f103 0315 	add.w	r3, r3, #21
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	3301      	adds	r3, #1
 800109c:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 80010a0:	f102 0215 	add.w	r2, r2, #21
 80010a4:	7013      	strb	r3, [r2, #0]
			}
			Do_Action(LTE_reset_action, (uint8_t*)g_LTE_ParseBuffer);
 80010a6:	4b48      	ldr	r3, [pc, #288]	; (80011c8 <main+0xa28>)
 80010a8:	4a45      	ldr	r2, [pc, #276]	; (80011c0 <main+0xa20>)
 80010aa:	9203      	str	r2, [sp, #12]
 80010ac:	466c      	mov	r4, sp
 80010ae:	f103 0210 	add.w	r2, r3, #16
 80010b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80010b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80010b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010ba:	f000 fdb5 	bl	8001c28 <Do_Action>

			HAL_Delay(action_list[current_action].timeout);
 80010be:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 80010c2:	f103 0317 	add.w	r3, r3, #23
 80010c6:	781a      	ldrb	r2, [r3, #0]
 80010c8:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 80010cc:	f6a3 411c 	subw	r1, r3, #3100	; 0xc1c
 80010d0:	4613      	mov	r3, r2
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	1a9b      	subs	r3, r3, r2
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	440b      	add	r3, r1
 80010da:	330c      	adds	r3, #12
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4618      	mov	r0, r3
 80010e0:	f001 f9c0 	bl	8002464 <HAL_Delay>
			current_action=0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 80010ea:	f102 0217 	add.w	r2, r2, #23
 80010ee:	7013      	strb	r3, [r2, #0]
			resolution = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 80010f6:	f102 0210 	add.w	r2, r2, #16
 80010fa:	6013      	str	r3, [r2, #0]
			break;
 80010fc:	e050      	b.n	80011a0 <main+0xa00>
		case BAD_ANSWER:
			printf("%s - %s\r\n", action_list[current_action].cmd, action_list[current_action].bad_answer);
 80010fe:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001102:	f103 0317 	add.w	r3, r3, #23
 8001106:	781a      	ldrb	r2, [r3, #0]
 8001108:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 800110c:	f6a3 411c 	subw	r1, r3, #3100	; 0xc1c
 8001110:	4613      	mov	r3, r2
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	1a9b      	subs	r3, r3, r2
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	440b      	add	r3, r1
 800111a:	6818      	ldr	r0, [r3, #0]
 800111c:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001120:	f103 0317 	add.w	r3, r3, #23
 8001124:	781a      	ldrb	r2, [r3, #0]
 8001126:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 800112a:	f6a3 411c 	subw	r1, r3, #3100	; 0xc1c
 800112e:	4613      	mov	r3, r2
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	1a9b      	subs	r3, r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	440b      	add	r3, r1
 8001138:	3310      	adds	r3, #16
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	4601      	mov	r1, r0
 8001140:	4826      	ldr	r0, [pc, #152]	; (80011dc <main+0xa3c>)
 8001142:	f003 f843 	bl	80041cc <iprintf>
			Do_Action(LTE_reset_action, (uint8_t*)g_LTE_ParseBuffer);
 8001146:	4b20      	ldr	r3, [pc, #128]	; (80011c8 <main+0xa28>)
 8001148:	4a1d      	ldr	r2, [pc, #116]	; (80011c0 <main+0xa20>)
 800114a:	9203      	str	r2, [sp, #12]
 800114c:	466c      	mov	r4, sp
 800114e:	f103 0210 	add.w	r2, r3, #16
 8001152:	ca07      	ldmia	r2, {r0, r1, r2}
 8001154:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001158:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800115a:	f000 fd65 	bl	8001c28 <Do_Action>
			HAL_Delay(action_list[current_action].timeout);
 800115e:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001162:	f103 0317 	add.w	r3, r3, #23
 8001166:	781a      	ldrb	r2, [r3, #0]
 8001168:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 800116c:	f6a3 411c 	subw	r1, r3, #3100	; 0xc1c
 8001170:	4613      	mov	r3, r2
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	1a9b      	subs	r3, r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	440b      	add	r3, r1
 800117a:	330c      	adds	r3, #12
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f001 f970 	bl	8002464 <HAL_Delay>
			startup = 5;
 8001184:	2305      	movs	r3, #5
 8001186:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 800118a:	f102 0215 	add.w	r2, r2, #21
 800118e:	7013      	strb	r3, [r2, #0]
			resolution = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8001196:	f102 0210 	add.w	r2, r2, #16
 800119a:	6013      	str	r3, [r2, #0]
			break;
 800119c:	e000      	b.n	80011a0 <main+0xa00>
		case FTP_ACTIVE:

			break;
		default:
			break;
 800119e:	bf00      	nop
		};


		if(hRAM_1_uart1dma5.UartTransferCompleted == 1)
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <main+0xa40>)
 80011a2:	f893 3c09 	ldrb.w	r3, [r3, #3081]	; 0xc09
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	f040 80bf 	bne.w	800132a <main+0xb8a>
		{
			printf("\t\t\t\tRAMSES_1\r\n");
 80011ac:	480d      	ldr	r0, [pc, #52]	; (80011e4 <main+0xa44>)
 80011ae:	f003 f893 	bl	80042d8 <puts>
			// remember about timeout


			int tmpByte;
			int count = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 80011b8:	f102 020c 	add.w	r2, r2, #12
 80011bc:	6013      	str	r3, [r2, #0]
			//uint8_t* LinePointer = g_RAM_1_data_latest;

			while((tmpByte = UARTDMA_GetCharFromBuffer(&hRAM_1_uart1dma5)) != -1){ // it use a feature that I read 8 bit data, so I can use 16bit negative to detect end of queue
 80011be:	e035      	b.n	800122c <main+0xa8c>
 80011c0:	20002ac4 	.word	0x20002ac4
 80011c4:	080058f8 	.word	0x080058f8
 80011c8:	2000039c 	.word	0x2000039c
 80011cc:	0800590c 	.word	0x0800590c
 80011d0:	0800591c 	.word	0x0800591c
 80011d4:	08005924 	.word	0x08005924
 80011d8:	40020000 	.word	0x40020000
 80011dc:	08005930 	.word	0x08005930
 80011e0:	200010c0 	.word	0x200010c0
 80011e4:	0800593c 	.word	0x0800593c
			//	*LinePointer = (uint8_t) tmpByte;
			//	LinePointer++;
				//printf("\t\t\t\tRAMSES_1: >>%c<<\r\n", (char)tmpByte);
				printf("\t\t\t\t\tRAMSES_1: >>%d<<\r\n", count);
 80011e8:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 80011ec:	f103 030c 	add.w	r3, r3, #12
 80011f0:	6819      	ldr	r1, [r3, #0]
 80011f2:	487a      	ldr	r0, [pc, #488]	; (80013dc <main+0xc3c>)
 80011f4:	f002 ffea 	bl	80041cc <iprintf>
				g_RAM_1_data_latest[count]= (uint8_t)tmpByte;
 80011f8:	f507 53e6 	add.w	r3, r7, #7360	; 0x1cc0
 80011fc:	f103 031c 	add.w	r3, r3, #28
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	b2d9      	uxtb	r1, r3
 8001204:	4a76      	ldr	r2, [pc, #472]	; (80013e0 <main+0xc40>)
 8001206:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 800120a:	f103 030c 	add.w	r3, r3, #12
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4413      	add	r3, r2
 8001212:	460a      	mov	r2, r1
 8001214:	701a      	strb	r2, [r3, #0]
				count++;
 8001216:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 800121a:	f103 030c 	add.w	r3, r3, #12
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	3301      	adds	r3, #1
 8001222:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8001226:	f102 020c 	add.w	r2, r2, #12
 800122a:	6013      	str	r3, [r2, #0]
			while((tmpByte = UARTDMA_GetCharFromBuffer(&hRAM_1_uart1dma5)) != -1){ // it use a feature that I read 8 bit data, so I can use 16bit negative to detect end of queue
 800122c:	486d      	ldr	r0, [pc, #436]	; (80013e4 <main+0xc44>)
 800122e:	f7ff f9f7 	bl	8000620 <UARTDMA_GetCharFromBuffer>
 8001232:	f507 53e6 	add.w	r3, r7, #7360	; 0x1cc0
 8001236:	f103 031c 	add.w	r3, r3, #28
 800123a:	6018      	str	r0, [r3, #0]
 800123c:	f507 53e6 	add.w	r3, r7, #7360	; 0x1cc0
 8001240:	f103 031c 	add.w	r3, r3, #28
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800124a:	d1cd      	bne.n	80011e8 <main+0xa48>
			}
			//g_RAM_1_data_latest[count]= '\0';
			printf("\t\t\t\tRAMSES_1: >>%d<<\r\n", count);
 800124c:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001250:	f103 030c 	add.w	r3, r3, #12
 8001254:	6819      	ldr	r1, [r3, #0]
 8001256:	4864      	ldr	r0, [pc, #400]	; (80013e8 <main+0xc48>)
 8001258:	f002 ffb8 	bl	80041cc <iprintf>

			g_RAM_1_data_size = count;
 800125c:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001260:	f103 030c 	add.w	r3, r3, #12
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	b29a      	uxth	r2, r3
 8001268:	4b60      	ldr	r3, [pc, #384]	; (80013ec <main+0xc4c>)
 800126a:	801a      	strh	r2, [r3, #0]

			char save[100] = "AT+FTPPUT=2,";
 800126c:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8001270:	f6a3 45f8 	subw	r5, r3, #3320	; 0xcf8
 8001274:	4b5e      	ldr	r3, [pc, #376]	; (80013f0 <main+0xc50>)
 8001276:	462c      	mov	r4, r5
 8001278:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800127a:	c407      	stmia	r4!, {r0, r1, r2}
 800127c:	7023      	strb	r3, [r4, #0]
 800127e:	f105 030d 	add.w	r3, r5, #13
 8001282:	2257      	movs	r2, #87	; 0x57
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f002 ff98 	bl	80041bc <memset>
			char len[10];
			itoa(g_RAM_1_data_size, len, 10);
 800128c:	4b57      	ldr	r3, [pc, #348]	; (80013ec <main+0xc4c>)
 800128e:	881b      	ldrh	r3, [r3, #0]
 8001290:	4618      	mov	r0, r3
 8001292:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001296:	3b08      	subs	r3, #8
 8001298:	220a      	movs	r2, #10
 800129a:	4619      	mov	r1, r3
 800129c:	f002 ff8c 	bl	80041b8 <itoa>
			strcat(save, len);
 80012a0:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 80012a4:	3a08      	subs	r2, #8
 80012a6:	f107 0318 	add.w	r3, r7, #24
 80012aa:	3b18      	subs	r3, #24
 80012ac:	4611      	mov	r1, r2
 80012ae:	4618      	mov	r0, r3
 80012b0:	f003 f886 	bl	80043c0 <strcat>
			strcat(save, "\r\n");
 80012b4:	f107 0318 	add.w	r3, r7, #24
 80012b8:	3b18      	subs	r3, #24
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7fe ff68 	bl	8000190 <strlen>
 80012c0:	4603      	mov	r3, r0
 80012c2:	461a      	mov	r2, r3
 80012c4:	f107 0318 	add.w	r3, r7, #24
 80012c8:	3b18      	subs	r3, #24
 80012ca:	4413      	add	r3, r2
 80012cc:	4a49      	ldr	r2, [pc, #292]	; (80013f4 <main+0xc54>)
 80012ce:	8811      	ldrh	r1, [r2, #0]
 80012d0:	7892      	ldrb	r2, [r2, #2]
 80012d2:	8019      	strh	r1, [r3, #0]
 80012d4:	709a      	strb	r2, [r3, #2]

			strcpy((char*)g_RAM_1_dataSize, save);
 80012d6:	f107 0318 	add.w	r3, r7, #24
 80012da:	3b18      	subs	r3, #24
 80012dc:	4619      	mov	r1, r3
 80012de:	4846      	ldr	r0, [pc, #280]	; (80013f8 <main+0xc58>)
 80012e0:	f003 f87d 	bl	80043de <strcpy>

			char save2[100] = "+FTPPUT: 2,";
 80012e4:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 80012e8:	f6a3 4394 	subw	r3, r3, #3220	; 0xc94
 80012ec:	4a43      	ldr	r2, [pc, #268]	; (80013fc <main+0xc5c>)
 80012ee:	461c      	mov	r4, r3
 80012f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80012f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80012f6:	330c      	adds	r3, #12
 80012f8:	2258      	movs	r2, #88	; 0x58
 80012fa:	2100      	movs	r1, #0
 80012fc:	4618      	mov	r0, r3
 80012fe:	f002 ff5d 	bl	80041bc <memset>
			strcat(save2, len);
 8001302:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8001306:	3a08      	subs	r2, #8
 8001308:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800130c:	3b14      	subs	r3, #20
 800130e:	4611      	mov	r1, r2
 8001310:	4618      	mov	r0, r3
 8001312:	f003 f855 	bl	80043c0 <strcat>

			strcpy((char*)g_RAM_1_dataSizeResponse, save2);
 8001316:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800131a:	3b14      	subs	r3, #20
 800131c:	4619      	mov	r1, r3
 800131e:	4838      	ldr	r0, [pc, #224]	; (8001400 <main+0xc60>)
 8001320:	f003 f85d 	bl	80043de <strcpy>

			g_RAM_1_data_ready = 1;
 8001324:	4b37      	ldr	r3, [pc, #220]	; (8001404 <main+0xc64>)
 8001326:	2201      	movs	r2, #1
 8001328:	701a      	strb	r2, [r3, #0]
		}

		if(hRAM_2_uart3dma3.UartTransferCompleted == 1)
 800132a:	4b37      	ldr	r3, [pc, #220]	; (8001408 <main+0xc68>)
 800132c:	f893 3c09 	ldrb.w	r3, [r3, #3081]	; 0xc09
 8001330:	2b01      	cmp	r3, #1
 8001332:	d102      	bne.n	800133a <main+0xb9a>
		{
			printf("\t\t\t\tRAMSES_2\r\n");
 8001334:	4835      	ldr	r0, [pc, #212]	; (800140c <main+0xc6c>)
 8001336:	f002 ffcf 	bl	80042d8 <puts>

		}


		if((g_RAM_1_timer + RAMSES_TIMEOUT) > HAL_GetTick()){
 800133a:	f001 f889 	bl	8002450 <HAL_GetTick>
			// RAMSES timeout
			// if no response, report timeout
		}
		if((g_RAM_2_timer + RAMSES_TIMEOUT) > HAL_GetTick()){
 800133e:	f001 f887 	bl	8002450 <HAL_GetTick>
			// RAMSES timeout
		}


		if(UARTDMA_IsDataReady(&hLTE_uart2dma6))
 8001342:	4833      	ldr	r0, [pc, #204]	; (8001410 <main+0xc70>)
 8001344:	f7ff f99b 	bl	800067e <UARTDMA_IsDataReady>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	f000 81cf 	beq.w	80016ee <main+0xf4e>
		{
			UARTDMA_GetLineFromBuffer(&hLTE_uart2dma6, (char*)g_LTE_ParseBuffer);
 8001350:	4930      	ldr	r1, [pc, #192]	; (8001414 <main+0xc74>)
 8001352:	482f      	ldr	r0, [pc, #188]	; (8001410 <main+0xc70>)
 8001354:	f7ff f9a4 	bl	80006a0 <UARTDMA_GetLineFromBuffer>
			printf("\tBUFFER: >>%s<<\r\n", (char*)g_LTE_ParseBuffer);
 8001358:	492e      	ldr	r1, [pc, #184]	; (8001414 <main+0xc74>)
 800135a:	482f      	ldr	r0, [pc, #188]	; (8001418 <main+0xc78>)
 800135c:	f002 ff36 	bl	80041cc <iprintf>

			// if message is time, update FTP filename
			char* ptr;
			if((ptr = strstr((char*)g_LTE_ParseBuffer, "+CCLK: ")) != NULL){
 8001360:	492e      	ldr	r1, [pc, #184]	; (800141c <main+0xc7c>)
 8001362:	482c      	ldr	r0, [pc, #176]	; (8001414 <main+0xc74>)
 8001364:	f003 f843 	bl	80043ee <strstr>
 8001368:	f507 53e6 	add.w	r3, r7, #7360	; 0x1cc0
 800136c:	f103 0318 	add.w	r3, r3, #24
 8001370:	6018      	str	r0, [r3, #0]
 8001372:	f507 53e6 	add.w	r3, r7, #7360	; 0x1cc0
 8001376:	f103 0318 	add.w	r3, r3, #24
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	f000 814a 	beq.w	8001616 <main+0xe76>
				printf("\t\tTIME: %s\r\n", (char*)g_LTE_ParseBuffer);
 8001382:	4924      	ldr	r1, [pc, #144]	; (8001414 <main+0xc74>)
 8001384:	4826      	ldr	r0, [pc, #152]	; (8001420 <main+0xc80>)
 8001386:	f002 ff21 	bl	80041cc <iprintf>

				strcat((char*)gps_data_latest,(char*)g_LTE_ParseBuffer); // append GPS data with LTE time
 800138a:	4922      	ldr	r1, [pc, #136]	; (8001414 <main+0xc74>)
 800138c:	4825      	ldr	r0, [pc, #148]	; (8001424 <main+0xc84>)
 800138e:	f003 f817 	bl	80043c0 <strcat>
				//strcat(gps_data_latest,"\r\n");

				printf("GPS BUFFER AT TIME: %s\r\n", gps_data_latest);
 8001392:	4924      	ldr	r1, [pc, #144]	; (8001424 <main+0xc84>)
 8001394:	4824      	ldr	r0, [pc, #144]	; (8001428 <main+0xc88>)
 8001396:	f002 ff19 	bl	80041cc <iprintf>

				if(filename_time_set == 0){ // it's the first time I receive, and I will set FTP file name based on it
 800139a:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 800139e:	f103 0316 	add.w	r3, r3, #22
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	f040 80d3 	bne.w	8001550 <main+0xdb0>


					filename_time_set = 1; // do not repeat
 80013aa:	2301      	movs	r3, #1
 80013ac:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 80013b0:	f102 0216 	add.w	r2, r2, #22
 80013b4:	7013      	strb	r3, [r2, #0]

					char* timeString = ptr+8;
 80013b6:	f507 53e6 	add.w	r3, r7, #7360	; 0x1cc0
 80013ba:	f103 0318 	add.w	r3, r3, #24
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	3308      	adds	r3, #8
 80013c2:	f507 52e6 	add.w	r2, r7, #7360	; 0x1cc0
 80013c6:	f102 0214 	add.w	r2, r2, #20
 80013ca:	6013      	str	r3, [r2, #0]

					for (int i = 0; i < strlen(timeString); i++)
 80013cc:	2300      	movs	r3, #0
 80013ce:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 80013d2:	f102 0208 	add.w	r2, r2, #8
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	e070      	b.n	80014bc <main+0xd1c>
 80013da:	bf00      	nop
 80013dc:	0800594c 	.word	0x0800594c
 80013e0:	200032c4 	.word	0x200032c4
 80013e4:	200010c0 	.word	0x200010c0
 80013e8:	08005964 	.word	0x08005964
 80013ec:	200036c4 	.word	0x200036c4
 80013f0:	08005a54 	.word	0x08005a54
 80013f4:	0800597c 	.word	0x0800597c
 80013f8:	20000064 	.word	0x20000064
 80013fc:	08005ab8 	.word	0x08005ab8
 8001400:	20000078 	.word	0x20000078
 8001404:	200036c6 	.word	0x200036c6
 8001408:	20001ccc 	.word	0x20001ccc
 800140c:	08005980 	.word	0x08005980
 8001410:	200004b4 	.word	0x200004b4
 8001414:	20002ac4 	.word	0x20002ac4
 8001418:	08005990 	.word	0x08005990
 800141c:	080059a4 	.word	0x080059a4
 8001420:	080059ac 	.word	0x080059ac
 8001424:	20002ec4 	.word	0x20002ec4
 8001428:	080059bc 	.word	0x080059bc
					{
						if ((timeString[i] > '9') || (timeString[i] < '0')){
 800142c:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001430:	f103 0308 	add.w	r3, r3, #8
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f507 52e6 	add.w	r2, r7, #7360	; 0x1cc0
 800143a:	f102 0214 	add.w	r2, r2, #20
 800143e:	6812      	ldr	r2, [r2, #0]
 8001440:	4413      	add	r3, r2
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b39      	cmp	r3, #57	; 0x39
 8001446:	d80d      	bhi.n	8001464 <main+0xcc4>
 8001448:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 800144c:	f103 0308 	add.w	r3, r3, #8
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f507 52e6 	add.w	r2, r7, #7360	; 0x1cc0
 8001456:	f102 0214 	add.w	r2, r2, #20
 800145a:	6812      	ldr	r2, [r2, #0]
 800145c:	4413      	add	r3, r2
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b2f      	cmp	r3, #47	; 0x2f
 8001462:	d80c      	bhi.n	800147e <main+0xcde>
							timeString[i] = '_';
 8001464:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001468:	f103 0308 	add.w	r3, r3, #8
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f507 52e6 	add.w	r2, r7, #7360	; 0x1cc0
 8001472:	f102 0214 	add.w	r2, r2, #20
 8001476:	6812      	ldr	r2, [r2, #0]
 8001478:	4413      	add	r3, r2
 800147a:	225f      	movs	r2, #95	; 0x5f
 800147c:	701a      	strb	r2, [r3, #0]
						}
						if(i>19){
 800147e:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001482:	f103 0308 	add.w	r3, r3, #8
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b13      	cmp	r3, #19
 800148a:	dd0c      	ble.n	80014a6 <main+0xd06>
							timeString[i] = '\0';
 800148c:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001490:	f103 0308 	add.w	r3, r3, #8
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f507 52e6 	add.w	r2, r7, #7360	; 0x1cc0
 800149a:	f102 0214 	add.w	r2, r2, #20
 800149e:	6812      	ldr	r2, [r2, #0]
 80014a0:	4413      	add	r3, r2
 80014a2:	2200      	movs	r2, #0
 80014a4:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < strlen(timeString); i++)
 80014a6:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 80014aa:	f103 0308 	add.w	r3, r3, #8
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	3301      	adds	r3, #1
 80014b2:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 80014b6:	f102 0208 	add.w	r2, r2, #8
 80014ba:	6013      	str	r3, [r2, #0]
 80014bc:	f507 53e6 	add.w	r3, r7, #7360	; 0x1cc0
 80014c0:	f103 0314 	add.w	r3, r3, #20
 80014c4:	6818      	ldr	r0, [r3, #0]
 80014c6:	f7fe fe63 	bl	8000190 <strlen>
 80014ca:	4602      	mov	r2, r0
 80014cc:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 80014d0:	f103 0308 	add.w	r3, r3, #8
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d8a8      	bhi.n	800142c <main+0xc8c>
						}
					}

					char fileNameLocal[60] = "AT+FTPPUTNAME=\"";
 80014da:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 80014de:	f6a3 4494 	subw	r4, r3, #3220	; 0xc94
 80014e2:	4b86      	ldr	r3, [pc, #536]	; (80016fc <main+0xf5c>)
 80014e4:	4625      	mov	r5, r4
 80014e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014e8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80014ec:	f104 0310 	add.w	r3, r4, #16
 80014f0:	222c      	movs	r2, #44	; 0x2c
 80014f2:	2100      	movs	r1, #0
 80014f4:	4618      	mov	r0, r3
 80014f6:	f002 fe61 	bl	80041bc <memset>
					strcat(fileNameLocal, timeString);
 80014fa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80014fe:	3b14      	subs	r3, #20
 8001500:	f507 52e6 	add.w	r2, r7, #7360	; 0x1cc0
 8001504:	f102 0214 	add.w	r2, r2, #20
 8001508:	6811      	ldr	r1, [r2, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f002 ff58 	bl	80043c0 <strcat>
					strcat(fileNameLocal, ".txt\"\r\n");
 8001510:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001514:	3b14      	subs	r3, #20
 8001516:	4618      	mov	r0, r3
 8001518:	f7fe fe3a 	bl	8000190 <strlen>
 800151c:	4603      	mov	r3, r0
 800151e:	461a      	mov	r2, r3
 8001520:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001524:	3b14      	subs	r3, #20
 8001526:	4413      	add	r3, r2
 8001528:	4975      	ldr	r1, [pc, #468]	; (8001700 <main+0xf60>)
 800152a:	461a      	mov	r2, r3
 800152c:	460b      	mov	r3, r1
 800152e:	cb03      	ldmia	r3!, {r0, r1}
 8001530:	6010      	str	r0, [r2, #0]
 8001532:	6051      	str	r1, [r2, #4]


					printf("\tFILENAME_TIME_CHANGE: %s\r\n", fileNameLocal);
 8001534:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001538:	3b14      	subs	r3, #20
 800153a:	4619      	mov	r1, r3
 800153c:	4871      	ldr	r0, [pc, #452]	; (8001704 <main+0xf64>)
 800153e:	f002 fe45 	bl	80041cc <iprintf>

					strcpy((char*)g_fileName, fileNameLocal);
 8001542:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001546:	3b14      	subs	r3, #20
 8001548:	4619      	mov	r1, r3
 800154a:	486f      	ldr	r0, [pc, #444]	; (8001708 <main+0xf68>)
 800154c:	f002 ff47 	bl	80043de <strcpy>

				}

				char save[100] = "AT+FTPPUT=2,";
 8001550:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8001554:	f6a3 45f8 	subw	r5, r3, #3320	; 0xcf8
 8001558:	4b6c      	ldr	r3, [pc, #432]	; (800170c <main+0xf6c>)
 800155a:	462c      	mov	r4, r5
 800155c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800155e:	c407      	stmia	r4!, {r0, r1, r2}
 8001560:	7023      	strb	r3, [r4, #0]
 8001562:	f105 030d 	add.w	r3, r5, #13
 8001566:	2257      	movs	r2, #87	; 0x57
 8001568:	2100      	movs	r1, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f002 fe26 	bl	80041bc <memset>
				char len[5];
				itoa(strlen((char*)gps_data_latest), len, 10);
 8001570:	4867      	ldr	r0, [pc, #412]	; (8001710 <main+0xf70>)
 8001572:	f7fe fe0d 	bl	8000190 <strlen>
 8001576:	4603      	mov	r3, r0
 8001578:	4618      	mov	r0, r3
 800157a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800157e:	3b10      	subs	r3, #16
 8001580:	220a      	movs	r2, #10
 8001582:	4619      	mov	r1, r3
 8001584:	f002 fe18 	bl	80041b8 <itoa>
				strcat(save, len);
 8001588:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 800158c:	3a10      	subs	r2, #16
 800158e:	f107 0318 	add.w	r3, r7, #24
 8001592:	3b18      	subs	r3, #24
 8001594:	4611      	mov	r1, r2
 8001596:	4618      	mov	r0, r3
 8001598:	f002 ff12 	bl	80043c0 <strcat>
				strcat(save, "\r\n");
 800159c:	f107 0318 	add.w	r3, r7, #24
 80015a0:	3b18      	subs	r3, #24
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7fe fdf4 	bl	8000190 <strlen>
 80015a8:	4603      	mov	r3, r0
 80015aa:	461a      	mov	r2, r3
 80015ac:	f107 0318 	add.w	r3, r7, #24
 80015b0:	3b18      	subs	r3, #24
 80015b2:	4413      	add	r3, r2
 80015b4:	4a57      	ldr	r2, [pc, #348]	; (8001714 <main+0xf74>)
 80015b6:	8811      	ldrh	r1, [r2, #0]
 80015b8:	7892      	ldrb	r2, [r2, #2]
 80015ba:	8019      	strh	r1, [r3, #0]
 80015bc:	709a      	strb	r2, [r3, #2]

				strcpy((char*)g_dataSize, save);
 80015be:	f107 0318 	add.w	r3, r7, #24
 80015c2:	3b18      	subs	r3, #24
 80015c4:	4619      	mov	r1, r3
 80015c6:	4854      	ldr	r0, [pc, #336]	; (8001718 <main+0xf78>)
 80015c8:	f002 ff09 	bl	80043de <strcpy>

				char save2[100] = "+FTPPUT: 2,";
 80015cc:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 80015d0:	f6a3 4394 	subw	r3, r3, #3220	; 0xc94
 80015d4:	4a51      	ldr	r2, [pc, #324]	; (800171c <main+0xf7c>)
 80015d6:	461c      	mov	r4, r3
 80015d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80015da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80015de:	330c      	adds	r3, #12
 80015e0:	2258      	movs	r2, #88	; 0x58
 80015e2:	2100      	movs	r1, #0
 80015e4:	4618      	mov	r0, r3
 80015e6:	f002 fde9 	bl	80041bc <memset>
				strcat(save2, len);
 80015ea:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 80015ee:	3a10      	subs	r2, #16
 80015f0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80015f4:	3b14      	subs	r3, #20
 80015f6:	4611      	mov	r1, r2
 80015f8:	4618      	mov	r0, r3
 80015fa:	f002 fee1 	bl	80043c0 <strcat>

				strcpy((char*)g_dataSizeResponse, save2);
 80015fe:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001602:	3b14      	subs	r3, #20
 8001604:	4619      	mov	r1, r3
 8001606:	4846      	ldr	r0, [pc, #280]	; (8001720 <main+0xf80>)
 8001608:	f002 fee9 	bl	80043de <strcpy>

				printf("\tASSERT_EXPECTED_REPLY: %s\r\n", g_dataSizeResponse);
 800160c:	4944      	ldr	r1, [pc, #272]	; (8001720 <main+0xf80>)
 800160e:	4845      	ldr	r0, [pc, #276]	; (8001724 <main+0xf84>)
 8001610:	f002 fddc 	bl	80041cc <iprintf>
 8001614:	e421      	b.n	8000e5a <main+0x6ba>
				//				}else{
				//					printf("\t\t\t\tCALLOC_FAIL_DATA");
				//				}


			}else if((ptr = strstr((char*)g_LTE_ParseBuffer, "+FTPPUT: 1,1,")) != NULL){ // else, if message is FTP server ready for data response
 8001616:	4944      	ldr	r1, [pc, #272]	; (8001728 <main+0xf88>)
 8001618:	4844      	ldr	r0, [pc, #272]	; (800172c <main+0xf8c>)
 800161a:	f002 fee8 	bl	80043ee <strstr>
 800161e:	f507 53e6 	add.w	r3, r7, #7360	; 0x1cc0
 8001622:	f103 0318 	add.w	r3, r3, #24
 8001626:	6018      	str	r0, [r3, #0]
 8001628:	f507 53e6 	add.w	r3, r7, #7360	; 0x1cc0
 800162c:	f103 0318 	add.w	r3, r3, #24
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d00e      	beq.n	8001654 <main+0xeb4>
				//ftp_transfer_active = 1;
				//transfer_status++;
				printf("FTP #: %d\r\n", atoi(ptr+13));
 8001636:	f507 53e6 	add.w	r3, r7, #7360	; 0x1cc0
 800163a:	f103 0318 	add.w	r3, r3, #24
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	330d      	adds	r3, #13
 8001642:	4618      	mov	r0, r3
 8001644:	f002 fd72 	bl	800412c <atoi>
 8001648:	4603      	mov	r3, r0
 800164a:	4619      	mov	r1, r3
 800164c:	4838      	ldr	r0, [pc, #224]	; (8001730 <main+0xf90>)
 800164e:	f002 fdbd 	bl	80041cc <iprintf>
 8001652:	e402      	b.n	8000e5a <main+0x6ba>
			}else if((ptr = strstr((char*)g_LTE_ParseBuffer, "+CGNSINF")) != NULL){ // save GPS data
 8001654:	4937      	ldr	r1, [pc, #220]	; (8001734 <main+0xf94>)
 8001656:	4835      	ldr	r0, [pc, #212]	; (800172c <main+0xf8c>)
 8001658:	f002 fec9 	bl	80043ee <strstr>
 800165c:	f507 53e6 	add.w	r3, r7, #7360	; 0x1cc0
 8001660:	f103 0318 	add.w	r3, r3, #24
 8001664:	6018      	str	r0, [r3, #0]
 8001666:	f507 53e6 	add.w	r3, r7, #7360	; 0x1cc0
 800166a:	f103 0318 	add.w	r3, r3, #24
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	f43f abf2 	beq.w	8000e5a <main+0x6ba>
				//ftp_transfer_active = 0;
				//transfer_status = 0; // I receive new GPS data, which means I don't transmit

				Clear_Array(gps_data_latest, BUFFER_SIZE); // clean old entries
 8001676:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800167a:	4825      	ldr	r0, [pc, #148]	; (8001710 <main+0xf70>)
 800167c:	f000 fa08 	bl	8001a90 <Clear_Array>

				gps_data_latest[0] = '#'; // preamble
 8001680:	4b23      	ldr	r3, [pc, #140]	; (8001710 <main+0xf70>)
 8001682:	2223      	movs	r2, #35	; 0x23
 8001684:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<strlen((char*)g_LTE_ParseBuffer)-1; i++){ // -1 because I added preamble
 8001686:	2300      	movs	r3, #0
 8001688:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 800168c:	f102 0204 	add.w	r2, r2, #4
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	e01a      	b.n	80016ca <main+0xf2a>
					gps_data_latest[i+1] = g_LTE_ParseBuffer[i];
 8001694:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001698:	f103 0304 	add.w	r3, r3, #4
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	3301      	adds	r3, #1
 80016a0:	4922      	ldr	r1, [pc, #136]	; (800172c <main+0xf8c>)
 80016a2:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 80016a6:	f102 0204 	add.w	r2, r2, #4
 80016aa:	6812      	ldr	r2, [r2, #0]
 80016ac:	440a      	add	r2, r1
 80016ae:	7811      	ldrb	r1, [r2, #0]
 80016b0:	4a17      	ldr	r2, [pc, #92]	; (8001710 <main+0xf70>)
 80016b2:	54d1      	strb	r1, [r2, r3]
				for(int i=0; i<strlen((char*)g_LTE_ParseBuffer)-1; i++){ // -1 because I added preamble
 80016b4:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 80016b8:	f103 0304 	add.w	r3, r3, #4
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	3301      	adds	r3, #1
 80016c0:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 80016c4:	f102 0204 	add.w	r2, r2, #4
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	4818      	ldr	r0, [pc, #96]	; (800172c <main+0xf8c>)
 80016cc:	f7fe fd60 	bl	8000190 <strlen>
 80016d0:	4603      	mov	r3, r0
 80016d2:	1e5a      	subs	r2, r3, #1
 80016d4:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 80016d8:	f103 0304 	add.w	r3, r3, #4
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d8d8      	bhi.n	8001694 <main+0xef4>
				//char fake[BUFFER_SIZE] = "+CGNSINF: 5109.0262308,N,11401.8407342,203522.00,A,5109.0262308,N,11401.8407342,W,0.004,133.4,130522,0.0,E,D*2B";
				//				for(int i=0; i<strlen(fake); i++){
				//					gps_data_latest[i] = fake[i];
				//				}

				printf("GPS DATA LOCKED: %s\r\n", gps_data_latest);
 80016e2:	490b      	ldr	r1, [pc, #44]	; (8001710 <main+0xf70>)
 80016e4:	4814      	ldr	r0, [pc, #80]	; (8001738 <main+0xf98>)
 80016e6:	f002 fd71 	bl	80041cc <iprintf>
 80016ea:	f7ff bbb6 	b.w	8000e5a <main+0x6ba>

			}

		}else{
			Clear_Array(g_LTE_ParseBuffer, BUFFER_SIZE);
 80016ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016f2:	480e      	ldr	r0, [pc, #56]	; (800172c <main+0xf8c>)
 80016f4:	f000 f9cc 	bl	8001a90 <Clear_Array>
	{
 80016f8:	f7ff bbaf 	b.w	8000e5a <main+0x6ba>
 80016fc:	08005b1c 	.word	0x08005b1c
 8001700:	080058c8 	.word	0x080058c8
 8001704:	080059d8 	.word	0x080059d8
 8001708:	20000000 	.word	0x20000000
 800170c:	08005a54 	.word	0x08005a54
 8001710:	20002ec4 	.word	0x20002ec4
 8001714:	0800597c 	.word	0x0800597c
 8001718:	2000003c 	.word	0x2000003c
 800171c:	08005ab8 	.word	0x08005ab8
 8001720:	20000050 	.word	0x20000050
 8001724:	080059f4 	.word	0x080059f4
 8001728:	08005a14 	.word	0x08005a14
 800172c:	20002ac4 	.word	0x20002ac4
 8001730:	08005a24 	.word	0x08005a24
 8001734:	08005a30 	.word	0x08005a30
 8001738:	08005a3c 	.word	0x08005a3c

0800173c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b092      	sub	sp, #72	; 0x48
 8001740:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	2234      	movs	r2, #52	; 0x34
 8001748:	2100      	movs	r1, #0
 800174a:	4618      	mov	r0, r3
 800174c:	f002 fd36 	bl	80041bc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001750:	463b      	mov	r3, r7
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	60da      	str	r2, [r3, #12]
 800175c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800175e:	4b1d      	ldr	r3, [pc, #116]	; (80017d4 <SystemClock_Config+0x98>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001766:	4a1b      	ldr	r2, [pc, #108]	; (80017d4 <SystemClock_Config+0x98>)
 8001768:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800176c:	6013      	str	r3, [r2, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800176e:	2302      	movs	r3, #2
 8001770:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001772:	2301      	movs	r3, #1
 8001774:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001776:	2310      	movs	r3, #16
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800177a:	2302      	movs	r3, #2
 800177c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800177e:	2300      	movs	r3, #0
 8001780:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001782:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001786:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001788:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800178c:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800178e:	f107 0314 	add.w	r3, r7, #20
 8001792:	4618      	mov	r0, r3
 8001794:	f001 fa42 	bl	8002c1c <HAL_RCC_OscConfig>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <SystemClock_Config+0x66>
	{
		Error_Handler();
 800179e:	f000 f957 	bl	8001a50 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017a2:	230f      	movs	r3, #15
 80017a4:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017a6:	2303      	movs	r3, #3
 80017a8:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017aa:	2300      	movs	r3, #0
 80017ac:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017b2:	2300      	movs	r3, #0
 80017b4:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80017b6:	463b      	mov	r3, r7
 80017b8:	2101      	movs	r1, #1
 80017ba:	4618      	mov	r0, r3
 80017bc:	f001 fd5e 	bl	800327c <HAL_RCC_ClockConfig>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <SystemClock_Config+0x8e>
	{
		Error_Handler();
 80017c6:	f000 f943 	bl	8001a50 <Error_Handler>
	}
}
 80017ca:	bf00      	nop
 80017cc:	3748      	adds	r7, #72	; 0x48
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40007000 	.word	0x40007000

080017d8 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 80017dc:	4b11      	ldr	r3, [pc, #68]	; (8001824 <MX_UART4_Init+0x4c>)
 80017de:	4a12      	ldr	r2, [pc, #72]	; (8001828 <MX_UART4_Init+0x50>)
 80017e0:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 80017e2:	4b10      	ldr	r3, [pc, #64]	; (8001824 <MX_UART4_Init+0x4c>)
 80017e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017e8:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80017ea:	4b0e      	ldr	r3, [pc, #56]	; (8001824 <MX_UART4_Init+0x4c>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 80017f0:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <MX_UART4_Init+0x4c>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 80017f6:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <MX_UART4_Init+0x4c>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 80017fc:	4b09      	ldr	r3, [pc, #36]	; (8001824 <MX_UART4_Init+0x4c>)
 80017fe:	220c      	movs	r2, #12
 8001800:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001802:	4b08      	ldr	r3, [pc, #32]	; (8001824 <MX_UART4_Init+0x4c>)
 8001804:	2200      	movs	r2, #0
 8001806:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001808:	4b06      	ldr	r3, [pc, #24]	; (8001824 <MX_UART4_Init+0x4c>)
 800180a:	2200      	movs	r2, #0
 800180c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK)
 800180e:	4805      	ldr	r0, [pc, #20]	; (8001824 <MX_UART4_Init+0x4c>)
 8001810:	f001 fffa 	bl	8003808 <HAL_UART_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_UART4_Init+0x46>
	{
		Error_Handler();
 800181a:	f000 f919 	bl	8001a50 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	200028d8 	.word	0x200028d8
 8001828:	40004c00 	.word	0x40004c00

0800182c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001830:	4b11      	ldr	r3, [pc, #68]	; (8001878 <MX_USART1_UART_Init+0x4c>)
 8001832:	4a12      	ldr	r2, [pc, #72]	; (800187c <MX_USART1_UART_Init+0x50>)
 8001834:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8001836:	4b10      	ldr	r3, [pc, #64]	; (8001878 <MX_USART1_UART_Init+0x4c>)
 8001838:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800183c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800183e:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <MX_USART1_UART_Init+0x4c>)
 8001840:	2200      	movs	r2, #0
 8001842:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001844:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <MX_USART1_UART_Init+0x4c>)
 8001846:	2200      	movs	r2, #0
 8001848:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800184a:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <MX_USART1_UART_Init+0x4c>)
 800184c:	2200      	movs	r2, #0
 800184e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001850:	4b09      	ldr	r3, [pc, #36]	; (8001878 <MX_USART1_UART_Init+0x4c>)
 8001852:	220c      	movs	r2, #12
 8001854:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001856:	4b08      	ldr	r3, [pc, #32]	; (8001878 <MX_USART1_UART_Init+0x4c>)
 8001858:	2200      	movs	r2, #0
 800185a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <MX_USART1_UART_Init+0x4c>)
 800185e:	2200      	movs	r2, #0
 8001860:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001862:	4805      	ldr	r0, [pc, #20]	; (8001878 <MX_USART1_UART_Init+0x4c>)
 8001864:	f001 ffd0 	bl	8003808 <HAL_UART_Init>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 800186e:	f000 f8ef 	bl	8001a50 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20002920 	.word	0x20002920
 800187c:	40013800 	.word	0x40013800

08001880 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001884:	4b11      	ldr	r3, [pc, #68]	; (80018cc <MX_USART2_UART_Init+0x4c>)
 8001886:	4a12      	ldr	r2, [pc, #72]	; (80018d0 <MX_USART2_UART_Init+0x50>)
 8001888:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 57600;
 800188a:	4b10      	ldr	r3, [pc, #64]	; (80018cc <MX_USART2_UART_Init+0x4c>)
 800188c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001890:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001892:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <MX_USART2_UART_Init+0x4c>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001898:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <MX_USART2_UART_Init+0x4c>)
 800189a:	2200      	movs	r2, #0
 800189c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800189e:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <MX_USART2_UART_Init+0x4c>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80018a4:	4b09      	ldr	r3, [pc, #36]	; (80018cc <MX_USART2_UART_Init+0x4c>)
 80018a6:	220c      	movs	r2, #12
 80018a8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018aa:	4b08      	ldr	r3, [pc, #32]	; (80018cc <MX_USART2_UART_Init+0x4c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <MX_USART2_UART_Init+0x4c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80018b6:	4805      	ldr	r0, [pc, #20]	; (80018cc <MX_USART2_UART_Init+0x4c>)
 80018b8:	f001 ffa6 	bl	8003808 <HAL_UART_Init>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 80018c2:	f000 f8c5 	bl	8001a50 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20002968 	.word	0x20002968
 80018d0:	40004400 	.word	0x40004400

080018d4 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <MX_USART3_UART_Init+0x4c>)
 80018da:	4a12      	ldr	r2, [pc, #72]	; (8001924 <MX_USART3_UART_Init+0x50>)
 80018dc:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <MX_USART3_UART_Init+0x4c>)
 80018e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018e4:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018e6:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <MX_USART3_UART_Init+0x4c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80018ec:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <MX_USART3_UART_Init+0x4c>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80018f2:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <MX_USART3_UART_Init+0x4c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80018f8:	4b09      	ldr	r3, [pc, #36]	; (8001920 <MX_USART3_UART_Init+0x4c>)
 80018fa:	220c      	movs	r2, #12
 80018fc:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018fe:	4b08      	ldr	r3, [pc, #32]	; (8001920 <MX_USART3_UART_Init+0x4c>)
 8001900:	2200      	movs	r2, #0
 8001902:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <MX_USART3_UART_Init+0x4c>)
 8001906:	2200      	movs	r2, #0
 8001908:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 800190a:	4805      	ldr	r0, [pc, #20]	; (8001920 <MX_USART3_UART_Init+0x4c>)
 800190c:	f001 ff7c 	bl	8003808 <HAL_UART_Init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 8001916:	f000 f89b 	bl	8001a50 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	200029b0 	.word	0x200029b0
 8001924:	40004800 	.word	0x40004800

08001928 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800192e:	4b14      	ldr	r3, [pc, #80]	; (8001980 <MX_DMA_Init+0x58>)
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	4a13      	ldr	r2, [pc, #76]	; (8001980 <MX_DMA_Init+0x58>)
 8001934:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001938:	61d3      	str	r3, [r2, #28]
 800193a:	4b11      	ldr	r3, [pc, #68]	; (8001980 <MX_DMA_Init+0x58>)
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001946:	2200      	movs	r2, #0
 8001948:	2100      	movs	r1, #0
 800194a:	200d      	movs	r0, #13
 800194c:	f000 fe83 	bl	8002656 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001950:	200d      	movs	r0, #13
 8001952:	f000 fe9c 	bl	800268e <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001956:	2200      	movs	r2, #0
 8001958:	2100      	movs	r1, #0
 800195a:	200f      	movs	r0, #15
 800195c:	f000 fe7b 	bl	8002656 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001960:	200f      	movs	r0, #15
 8001962:	f000 fe94 	bl	800268e <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001966:	2200      	movs	r2, #0
 8001968:	2100      	movs	r1, #0
 800196a:	2010      	movs	r0, #16
 800196c:	f000 fe73 	bl	8002656 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001970:	2010      	movs	r0, #16
 8001972:	f000 fe8c 	bl	800268e <HAL_NVIC_EnableIRQ>

}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40023800 	.word	0x40023800

08001984 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08a      	sub	sp, #40	; 0x28
 8001988:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198a:	f107 0314 	add.w	r3, r7, #20
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	605a      	str	r2, [r3, #4]
 8001994:	609a      	str	r2, [r3, #8]
 8001996:	60da      	str	r2, [r3, #12]
 8001998:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800199a:	4b2a      	ldr	r3, [pc, #168]	; (8001a44 <MX_GPIO_Init+0xc0>)
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	4a29      	ldr	r2, [pc, #164]	; (8001a44 <MX_GPIO_Init+0xc0>)
 80019a0:	f043 0304 	orr.w	r3, r3, #4
 80019a4:	61d3      	str	r3, [r2, #28]
 80019a6:	4b27      	ldr	r3, [pc, #156]	; (8001a44 <MX_GPIO_Init+0xc0>)
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	f003 0304 	and.w	r3, r3, #4
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80019b2:	4b24      	ldr	r3, [pc, #144]	; (8001a44 <MX_GPIO_Init+0xc0>)
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	4a23      	ldr	r2, [pc, #140]	; (8001a44 <MX_GPIO_Init+0xc0>)
 80019b8:	f043 0320 	orr.w	r3, r3, #32
 80019bc:	61d3      	str	r3, [r2, #28]
 80019be:	4b21      	ldr	r3, [pc, #132]	; (8001a44 <MX_GPIO_Init+0xc0>)
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	f003 0320 	and.w	r3, r3, #32
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80019ca:	4b1e      	ldr	r3, [pc, #120]	; (8001a44 <MX_GPIO_Init+0xc0>)
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	4a1d      	ldr	r2, [pc, #116]	; (8001a44 <MX_GPIO_Init+0xc0>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	61d3      	str	r3, [r2, #28]
 80019d6:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <MX_GPIO_Init+0xc0>)
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80019e2:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <MX_GPIO_Init+0xc0>)
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	4a17      	ldr	r2, [pc, #92]	; (8001a44 <MX_GPIO_Init+0xc0>)
 80019e8:	f043 0302 	orr.w	r3, r3, #2
 80019ec:	61d3      	str	r3, [r2, #28]
 80019ee:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <MX_GPIO_Init+0xc0>)
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2160      	movs	r1, #96	; 0x60
 80019fe:	4812      	ldr	r0, [pc, #72]	; (8001a48 <MX_GPIO_Init+0xc4>)
 8001a00:	f001 f8f4 	bl	8002bec <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001a04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a08:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a0a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a0e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a14:	f107 0314 	add.w	r3, r7, #20
 8001a18:	4619      	mov	r1, r3
 8001a1a:	480c      	ldr	r0, [pc, #48]	; (8001a4c <MX_GPIO_Init+0xc8>)
 8001a1c:	f000 ff56 	bl	80028cc <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin PA6 */
	GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
 8001a20:	2360      	movs	r3, #96	; 0x60
 8001a22:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a24:	2301      	movs	r3, #1
 8001a26:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a30:	f107 0314 	add.w	r3, r7, #20
 8001a34:	4619      	mov	r1, r3
 8001a36:	4804      	ldr	r0, [pc, #16]	; (8001a48 <MX_GPIO_Init+0xc4>)
 8001a38:	f000 ff48 	bl	80028cc <HAL_GPIO_Init>

}
 8001a3c:	bf00      	nop
 8001a3e:	3728      	adds	r7, #40	; 0x28
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40020000 	.word	0x40020000
 8001a4c:	40020800 	.word	0x40020800

08001a50 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a54:	b672      	cpsid	i
}
 8001a56:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001a58:	e7fe      	b.n	8001a58 <Error_Handler+0x8>
	...

08001a5c <Send_LTE>:

const uint8_t g_RAMSES_Query[] = { 0x23, 0x00, 0x00, 0x80, 0xB0, 0x00, 0x00, 0x01 };
const uint8_t g_RAMSES_Sample[] = { 0x23, 0x00, 0x00, 0x00, 0xA8, 0x00, 0x81, 0x01 };


void Send_LTE(uint8_t* cmd, uint16_t len){
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	460b      	mov	r3, r1
 8001a66:	807b      	strh	r3, [r7, #2]
	if (len == 0){ // lenghts of arrays of chars can be computed here
 8001a68:	887b      	ldrh	r3, [r7, #2]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d104      	bne.n	8001a78 <Send_LTE+0x1c>
		len = strlen((char*)cmd);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7fe fb8e 	bl	8000190 <strlen>
 8001a74:	4603      	mov	r3, r0
 8001a76:	807b      	strh	r3, [r7, #2]
	}
	//printf("%s, %d - SIZEOF\r\n", (char*)cmd, sizeof(cmd));
	//	strcat(cmd, "\r\n");
	//printf("%s, %d - SIZEOF\r\n", cmd, strlen(cmd));
	HAL_UART_Transmit(&huart2,cmd,len,250);
 8001a78:	887a      	ldrh	r2, [r7, #2]
 8001a7a:	23fa      	movs	r3, #250	; 0xfa
 8001a7c:	6879      	ldr	r1, [r7, #4]
 8001a7e:	4803      	ldr	r0, [pc, #12]	; (8001a8c <Send_LTE+0x30>)
 8001a80:	f001 ff12 	bl	80038a8 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart2,(uint8_t*)"\r\n",2,10);
}
 8001a84:	bf00      	nop
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20002968 	.word	0x20002968

08001a90 <Clear_Array>:

void Get_LTE_data(){
	UARTDMA_IsDataReady(&hLTE_uart2dma6);
}

void Clear_Array(uint8_t* array, unsigned int size) {
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < size; i++) {
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	e007      	b.n	8001ab0 <Clear_Array+0x20>
		array[i] = 0;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; i++) {
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	3301      	adds	r3, #1
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d8f3      	bhi.n	8001aa0 <Clear_Array+0x10>
	}
}
 8001ab8:	bf00      	nop
 8001aba:	bf00      	nop
 8001abc:	3714      	adds	r7, #20
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr

08001ac4 <Do_Action_RAMSES>:

enum State Do_Action_RAMSES(const command *cmd) {
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
	// DO RAMSES ACTION
	if (strcmp((char*)cmd->cmd, "RAMSES_1_2_SAMPLE") == 0)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4946      	ldr	r1, [pc, #280]	; (8001bec <Do_Action_RAMSES+0x128>)
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7fe fb52 	bl	800017c <strcmp>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d119      	bne.n	8001b12 <Do_Action_RAMSES+0x4e>
	{
		HAL_UART_Transmit(&huart1, g_RAMSES_Sample, SAMPLE_CMD_SIZE, 50);
 8001ade:	2332      	movs	r3, #50	; 0x32
 8001ae0:	2208      	movs	r2, #8
 8001ae2:	4943      	ldr	r1, [pc, #268]	; (8001bf0 <Do_Action_RAMSES+0x12c>)
 8001ae4:	4843      	ldr	r0, [pc, #268]	; (8001bf4 <Do_Action_RAMSES+0x130>)
 8001ae6:	f001 fedf 	bl	80038a8 <HAL_UART_Transmit>
		g_RAM_1_timer = HAL_GetTick();
 8001aea:	f000 fcb1 	bl	8002450 <HAL_GetTick>
 8001aee:	4603      	mov	r3, r0
 8001af0:	461a      	mov	r2, r3
 8001af2:	4b41      	ldr	r3, [pc, #260]	; (8001bf8 <Do_Action_RAMSES+0x134>)
 8001af4:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, g_RAMSES_Sample, SAMPLE_CMD_SIZE, 50);
 8001af6:	2332      	movs	r3, #50	; 0x32
 8001af8:	2208      	movs	r2, #8
 8001afa:	493d      	ldr	r1, [pc, #244]	; (8001bf0 <Do_Action_RAMSES+0x12c>)
 8001afc:	483f      	ldr	r0, [pc, #252]	; (8001bfc <Do_Action_RAMSES+0x138>)
 8001afe:	f001 fed3 	bl	80038a8 <HAL_UART_Transmit>
		g_RAM_2_timer = HAL_GetTick();
 8001b02:	f000 fca5 	bl	8002450 <HAL_GetTick>
 8001b06:	4603      	mov	r3, r0
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4b3d      	ldr	r3, [pc, #244]	; (8001c00 <Do_Action_RAMSES+0x13c>)
 8001b0c:	601a      	str	r2, [r3, #0]
		return READY;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	e068      	b.n	8001be4 <Do_Action_RAMSES+0x120>
	} else if (strcmp((char*)cmd->cmd, "RAMSES_1_SAMPLE") == 0)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	493b      	ldr	r1, [pc, #236]	; (8001c04 <Do_Action_RAMSES+0x140>)
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7fe fb2f 	bl	800017c <strcmp>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d110      	bne.n	8001b46 <Do_Action_RAMSES+0x82>
	{
		printf("\t\t\t\tRAMSES_1_SAMPLE\r\n");
 8001b24:	4838      	ldr	r0, [pc, #224]	; (8001c08 <Do_Action_RAMSES+0x144>)
 8001b26:	f002 fbd7 	bl	80042d8 <puts>
		HAL_UART_Transmit(&huart1, g_RAMSES_Sample, SAMPLE_CMD_SIZE, 50);
 8001b2a:	2332      	movs	r3, #50	; 0x32
 8001b2c:	2208      	movs	r2, #8
 8001b2e:	4930      	ldr	r1, [pc, #192]	; (8001bf0 <Do_Action_RAMSES+0x12c>)
 8001b30:	4830      	ldr	r0, [pc, #192]	; (8001bf4 <Do_Action_RAMSES+0x130>)
 8001b32:	f001 feb9 	bl	80038a8 <HAL_UART_Transmit>
		g_RAM_1_timer = HAL_GetTick();
 8001b36:	f000 fc8b 	bl	8002450 <HAL_GetTick>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	4b2e      	ldr	r3, [pc, #184]	; (8001bf8 <Do_Action_RAMSES+0x134>)
 8001b40:	601a      	str	r2, [r3, #0]
		return READY;
 8001b42:	2300      	movs	r3, #0
 8001b44:	e04e      	b.n	8001be4 <Do_Action_RAMSES+0x120>

	} else if (strcmp((char*)cmd->cmd, "RAMSES_2_SAMPLE") == 0)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4930      	ldr	r1, [pc, #192]	; (8001c0c <Do_Action_RAMSES+0x148>)
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7fe fb15 	bl	800017c <strcmp>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d110      	bne.n	8001b7a <Do_Action_RAMSES+0xb6>
	{
		printf("\t\t\t\tRAMSES_2_SAMPLE\r\n");
 8001b58:	482d      	ldr	r0, [pc, #180]	; (8001c10 <Do_Action_RAMSES+0x14c>)
 8001b5a:	f002 fbbd 	bl	80042d8 <puts>
		HAL_UART_Transmit(&huart3, g_RAMSES_Sample, SAMPLE_CMD_SIZE, 50);
 8001b5e:	2332      	movs	r3, #50	; 0x32
 8001b60:	2208      	movs	r2, #8
 8001b62:	4923      	ldr	r1, [pc, #140]	; (8001bf0 <Do_Action_RAMSES+0x12c>)
 8001b64:	4825      	ldr	r0, [pc, #148]	; (8001bfc <Do_Action_RAMSES+0x138>)
 8001b66:	f001 fe9f 	bl	80038a8 <HAL_UART_Transmit>
		g_RAM_2_timer = HAL_GetTick();
 8001b6a:	f000 fc71 	bl	8002450 <HAL_GetTick>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	461a      	mov	r2, r3
 8001b72:	4b23      	ldr	r3, [pc, #140]	; (8001c00 <Do_Action_RAMSES+0x13c>)
 8001b74:	601a      	str	r2, [r3, #0]
		return READY;
 8001b76:	2300      	movs	r3, #0
 8001b78:	e034      	b.n	8001be4 <Do_Action_RAMSES+0x120>

	} else if (strcmp((char*)cmd->cmd, "RAMSES_1_QUERY") == 0)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4925      	ldr	r1, [pc, #148]	; (8001c14 <Do_Action_RAMSES+0x150>)
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7fe fafb 	bl	800017c <strcmp>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d110      	bne.n	8001bae <Do_Action_RAMSES+0xea>
	{
		printf("\t\t\t\tRAMSES_1_QUERY\r\n");
 8001b8c:	4822      	ldr	r0, [pc, #136]	; (8001c18 <Do_Action_RAMSES+0x154>)
 8001b8e:	f002 fba3 	bl	80042d8 <puts>
		HAL_UART_Transmit(&huart1, g_RAMSES_Query, QUERY_CMD_SIZE, 50);
 8001b92:	2332      	movs	r3, #50	; 0x32
 8001b94:	2208      	movs	r2, #8
 8001b96:	4921      	ldr	r1, [pc, #132]	; (8001c1c <Do_Action_RAMSES+0x158>)
 8001b98:	4816      	ldr	r0, [pc, #88]	; (8001bf4 <Do_Action_RAMSES+0x130>)
 8001b9a:	f001 fe85 	bl	80038a8 <HAL_UART_Transmit>
		g_RAM_1_timer = HAL_GetTick();
 8001b9e:	f000 fc57 	bl	8002450 <HAL_GetTick>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4b14      	ldr	r3, [pc, #80]	; (8001bf8 <Do_Action_RAMSES+0x134>)
 8001ba8:	601a      	str	r2, [r3, #0]
		return READY;
 8001baa:	2300      	movs	r3, #0
 8001bac:	e01a      	b.n	8001be4 <Do_Action_RAMSES+0x120>
	} else if (strcmp((char*)cmd->cmd, "RAMSES_2_QUERY") == 0)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	491b      	ldr	r1, [pc, #108]	; (8001c20 <Do_Action_RAMSES+0x15c>)
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7fe fae1 	bl	800017c <strcmp>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d110      	bne.n	8001be2 <Do_Action_RAMSES+0x11e>
	{
		printf("\t\t\t\tRAMSES_2_QUERY\r\n");
 8001bc0:	4818      	ldr	r0, [pc, #96]	; (8001c24 <Do_Action_RAMSES+0x160>)
 8001bc2:	f002 fb89 	bl	80042d8 <puts>
		HAL_UART_Transmit(&huart3, g_RAMSES_Query, QUERY_CMD_SIZE, 50);
 8001bc6:	2332      	movs	r3, #50	; 0x32
 8001bc8:	2208      	movs	r2, #8
 8001bca:	4914      	ldr	r1, [pc, #80]	; (8001c1c <Do_Action_RAMSES+0x158>)
 8001bcc:	480b      	ldr	r0, [pc, #44]	; (8001bfc <Do_Action_RAMSES+0x138>)
 8001bce:	f001 fe6b 	bl	80038a8 <HAL_UART_Transmit>
		g_RAM_2_timer = HAL_GetTick();
 8001bd2:	f000 fc3d 	bl	8002450 <HAL_GetTick>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <Do_Action_RAMSES+0x13c>)
 8001bdc:	601a      	str	r2, [r3, #0]
		return READY;
 8001bde:	2300      	movs	r3, #0
 8001be0:	e000      	b.n	8001be4 <Do_Action_RAMSES+0x120>
	}

	return READY;
 8001be2:	2300      	movs	r3, #0
	// if send, check if there's data, if not check if timout has passed, if yes, send timeout, if not send data, CHECKING_ANSWER can be the mode to send while waiting

}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	08005b58 	.word	0x08005b58
 8001bf0:	08005c28 	.word	0x08005c28
 8001bf4:	20002920 	.word	0x20002920
 8001bf8:	200036c8 	.word	0x200036c8
 8001bfc:	200029b0 	.word	0x200029b0
 8001c00:	200036cc 	.word	0x200036cc
 8001c04:	08005b6c 	.word	0x08005b6c
 8001c08:	08005b7c 	.word	0x08005b7c
 8001c0c:	08005b94 	.word	0x08005b94
 8001c10:	08005ba4 	.word	0x08005ba4
 8001c14:	08005bbc 	.word	0x08005bbc
 8001c18:	08005bcc 	.word	0x08005bcc
 8001c1c:	08005c20 	.word	0x08005c20
 8001c20:	08005be0 	.word	0x08005be0
 8001c24:	08005bf0 	.word	0x08005bf0

08001c28 <Do_Action>:

enum State Do_Action(command cmd, uint8_t* uart_data){
 8001c28:	b084      	sub	sp, #16
 8001c2a:	b590      	push	{r4, r7, lr}
 8001c2c:	b085      	sub	sp, #20
 8001c2e:	af04      	add	r7, sp, #16
 8001c30:	f107 0410 	add.w	r4, r7, #16
 8001c34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	static enum State state = READY;
	static unsigned int retry;
	static int start_time;

	if(strstr((char*)cmd.cmd, "RAMSES") != NULL){ // DO RAMSES ACTION
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	4954      	ldr	r1, [pc, #336]	; (8001d8c <Do_Action+0x164>)
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f002 fbd6 	bl	80043ee <strstr>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d00a      	beq.n	8001c5e <Do_Action+0x36>
		state = Do_Action_RAMSES(&cmd);
 8001c48:	f107 0010 	add.w	r0, r7, #16
 8001c4c:	f7ff ff3a 	bl	8001ac4 <Do_Action_RAMSES>
 8001c50:	4603      	mov	r3, r0
 8001c52:	461a      	mov	r2, r3
 8001c54:	4b4e      	ldr	r3, [pc, #312]	; (8001d90 <Do_Action+0x168>)
 8001c56:	701a      	strb	r2, [r3, #0]
		return state;
 8001c58:	4b4d      	ldr	r3, [pc, #308]	; (8001d90 <Do_Action+0x168>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	e08f      	b.n	8001d7e <Do_Action+0x156>

	}else{ // DO LTE ACTION


		if(strcmp((char*)cmd.cmd, "RESET_ACTION") == 0){
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	494c      	ldr	r1, [pc, #304]	; (8001d94 <Do_Action+0x16c>)
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe fa8a 	bl	800017c <strcmp>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10d      	bne.n	8001c8a <Do_Action+0x62>
			Clear_Array(uart_data, BUFFER_SIZE);  // ZOLICH _ modified without test
 8001c6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c74:	f7ff ff0c 	bl	8001a90 <Clear_Array>
			retry = 0;
 8001c78:	4b47      	ldr	r3, [pc, #284]	; (8001d98 <Do_Action+0x170>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
			state = READY;
 8001c7e:	4b44      	ldr	r3, [pc, #272]	; (8001d90 <Do_Action+0x168>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	701a      	strb	r2, [r3, #0]
			return state;
 8001c84:	4b42      	ldr	r3, [pc, #264]	; (8001d90 <Do_Action+0x168>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	e079      	b.n	8001d7e <Do_Action+0x156>
		}

		if(state == READY){ 					// ready to send new command
 8001c8a:	4b41      	ldr	r3, [pc, #260]	; (8001d90 <Do_Action+0x168>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d119      	bne.n	8001cc6 <Do_Action+0x9e>
			start_time = HAL_GetTick();		// save send time
 8001c92:	f000 fbdd 	bl	8002450 <HAL_GetTick>
 8001c96:	4603      	mov	r3, r0
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4b40      	ldr	r3, [pc, #256]	; (8001d9c <Do_Action+0x174>)
 8001c9c:	601a      	str	r2, [r3, #0]
			state = CHECKING_ANSWER;			// notify that now we wait for a reply
 8001c9e:	4b3c      	ldr	r3, [pc, #240]	; (8001d90 <Do_Action+0x168>)
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	701a      	strb	r2, [r3, #0]
			retry = 0;
 8001ca4:	4b3c      	ldr	r3, [pc, #240]	; (8001d98 <Do_Action+0x170>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
			Clear_Array(uart_data, BUFFER_SIZE);  // ZOLICH _ modified without test
 8001caa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001cb0:	f7ff feee 	bl	8001a90 <Clear_Array>
			if(cmd.length != -1){
				Send_LTE(cmd.cmd, cmd.length);				// send new command
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	8aba      	ldrh	r2, [r7, #20]
 8001cb8:	4611      	mov	r1, r2
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff fece 	bl	8001a5c <Send_LTE>
			}else{
				printf("NO DATA TO TRANSFER, LENGTH -1, SKIPPING\r\n");
				state = READY;
			}
			return state;
 8001cc0:	4b33      	ldr	r3, [pc, #204]	; (8001d90 <Do_Action+0x168>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	e05b      	b.n	8001d7e <Do_Action+0x156>

		}else if(state == CHECKING_ANSWER){	// if we expect a reply now
 8001cc6:	4b32      	ldr	r3, [pc, #200]	; (8001d90 <Do_Action+0x168>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d155      	bne.n	8001d7a <Do_Action+0x152>

			if((start_time + cmd.timeout) < HAL_GetTick()){	// if we wait too long, report timeout
 8001cce:	69fa      	ldr	r2, [r7, #28]
 8001cd0:	4b32      	ldr	r3, [pc, #200]	; (8001d9c <Do_Action+0x174>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	461c      	mov	r4, r3
 8001cd8:	f000 fbba 	bl	8002450 <HAL_GetTick>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	429c      	cmp	r4, r3
 8001ce0:	d205      	bcs.n	8001cee <Do_Action+0xc6>
				state = TIMEOUT;
 8001ce2:	4b2b      	ldr	r3, [pc, #172]	; (8001d90 <Do_Action+0x168>)
 8001ce4:	2204      	movs	r2, #4
 8001ce6:	701a      	strb	r2, [r3, #0]
				return state;
 8001ce8:	4b29      	ldr	r3, [pc, #164]	; (8001d90 <Do_Action+0x168>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	e047      	b.n	8001d7e <Do_Action+0x156>
			}

			if((strcmp((char*)cmd.good_answer, (char*)uart_data) == 0) || strcmp((char*)cmd.good_answer, "ANY") == 0){ 		// if the reply is OK, return success
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7fe fa42 	bl	800017c <strcmp>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d007      	beq.n	8001d0e <Do_Action+0xe6>
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	4927      	ldr	r1, [pc, #156]	; (8001da0 <Do_Action+0x178>)
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7fe fa3a 	bl	800017c <strcmp>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d105      	bne.n	8001d1a <Do_Action+0xf2>
				state = GOOD_ANSWER;
 8001d0e:	4b20      	ldr	r3, [pc, #128]	; (8001d90 <Do_Action+0x168>)
 8001d10:	2202      	movs	r2, #2
 8001d12:	701a      	strb	r2, [r3, #0]
				return state;
 8001d14:	4b1e      	ldr	r3, [pc, #120]	; (8001d90 <Do_Action+0x168>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	e031      	b.n	8001d7e <Do_Action+0x156>
			}else if(strcmp((char*)cmd.bad_answer, (char*)uart_data) == 0){	// if the reply suggest an error...
 8001d1a:	6a3b      	ldr	r3, [r7, #32]
 8001d1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7fe fa2c 	bl	800017c <strcmp>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d127      	bne.n	8001d7a <Do_Action+0x152>
				state = BAD_ANSWER;
 8001d2a:	4b19      	ldr	r3, [pc, #100]	; (8001d90 <Do_Action+0x168>)
 8001d2c:	2203      	movs	r2, #3
 8001d2e:	701a      	strb	r2, [r3, #0]
				if(retry < cmd.retry_counter){				// retry if structure suggest that behaviour
 8001d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d32:	461a      	mov	r2, r3
 8001d34:	4b18      	ldr	r3, [pc, #96]	; (8001d98 <Do_Action+0x170>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d915      	bls.n	8001d68 <Do_Action+0x140>
					retry++;
 8001d3c:	4b16      	ldr	r3, [pc, #88]	; (8001d98 <Do_Action+0x170>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	3301      	adds	r3, #1
 8001d42:	4a15      	ldr	r2, [pc, #84]	; (8001d98 <Do_Action+0x170>)
 8001d44:	6013      	str	r3, [r2, #0]
					Do_Action(cmd, uart_data);
 8001d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d48:	9303      	str	r3, [sp, #12]
 8001d4a:	466c      	mov	r4, sp
 8001d4c:	f107 0320 	add.w	r3, r7, #32
 8001d50:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001d54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001d58:	f107 0310 	add.w	r3, r7, #16
 8001d5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d5e:	f7ff ff63 	bl	8001c28 <Do_Action>
				}else{										// if retries still give an error, or no replies suggested, report error
					retry = 0;
					state = BAD_ANSWER;
					return state;
				}
				return state;
 8001d62:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <Do_Action+0x168>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	e00a      	b.n	8001d7e <Do_Action+0x156>
					retry = 0;
 8001d68:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <Do_Action+0x170>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
					state = BAD_ANSWER;
 8001d6e:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <Do_Action+0x168>)
 8001d70:	2203      	movs	r2, #3
 8001d72:	701a      	strb	r2, [r3, #0]
					return state;
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <Do_Action+0x168>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	e001      	b.n	8001d7e <Do_Action+0x156>
			}
		}
	}

	return state;
 8001d7a:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <Do_Action+0x168>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3704      	adds	r7, #4
 8001d82:	46bd      	mov	sp, r7
 8001d84:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001d88:	b004      	add	sp, #16
 8001d8a:	4770      	bx	lr
 8001d8c:	08005c04 	.word	0x08005c04
 8001d90:	200036d0 	.word	0x200036d0
 8001d94:	08005c0c 	.word	0x08005c0c
 8001d98:	200036d4 	.word	0x200036d4
 8001d9c:	200036d8 	.word	0x200036d8
 8001da0:	08005c1c 	.word	0x08005c1c

08001da4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001daa:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <HAL_MspInit+0x5c>)
 8001dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dae:	4a14      	ldr	r2, [pc, #80]	; (8001e00 <HAL_MspInit+0x5c>)
 8001db0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001db4:	6253      	str	r3, [r2, #36]	; 0x24
 8001db6:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <HAL_MspInit+0x5c>)
 8001db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dc2:	4b0f      	ldr	r3, [pc, #60]	; (8001e00 <HAL_MspInit+0x5c>)
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
 8001dc6:	4a0e      	ldr	r2, [pc, #56]	; (8001e00 <HAL_MspInit+0x5c>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	6213      	str	r3, [r2, #32]
 8001dce:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <HAL_MspInit+0x5c>)
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	60bb      	str	r3, [r7, #8]
 8001dd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dda:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <HAL_MspInit+0x5c>)
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dde:	4a08      	ldr	r2, [pc, #32]	; (8001e00 <HAL_MspInit+0x5c>)
 8001de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de4:	6253      	str	r3, [r2, #36]	; 0x24
 8001de6:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <HAL_MspInit+0x5c>)
 8001de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dee:	607b      	str	r3, [r7, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001df2:	2007      	movs	r0, #7
 8001df4:	f000 fc24 	bl	8002640 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001df8:	bf00      	nop
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40023800 	.word	0x40023800

08001e04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b090      	sub	sp, #64	; 0x40
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a72      	ldr	r2, [pc, #456]	; (8001fec <HAL_UART_MspInit+0x1e8>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d129      	bne.n	8001e7a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001e26:	4b72      	ldr	r3, [pc, #456]	; (8001ff0 <HAL_UART_MspInit+0x1ec>)
 8001e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2a:	4a71      	ldr	r2, [pc, #452]	; (8001ff0 <HAL_UART_MspInit+0x1ec>)
 8001e2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e30:	6253      	str	r3, [r2, #36]	; 0x24
 8001e32:	4b6f      	ldr	r3, [pc, #444]	; (8001ff0 <HAL_UART_MspInit+0x1ec>)
 8001e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e3e:	4b6c      	ldr	r3, [pc, #432]	; (8001ff0 <HAL_UART_MspInit+0x1ec>)
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	4a6b      	ldr	r2, [pc, #428]	; (8001ff0 <HAL_UART_MspInit+0x1ec>)
 8001e44:	f043 0304 	orr.w	r3, r3, #4
 8001e48:	61d3      	str	r3, [r2, #28]
 8001e4a:	4b69      	ldr	r3, [pc, #420]	; (8001ff0 <HAL_UART_MspInit+0x1ec>)
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	f003 0304 	and.w	r3, r3, #4
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24
 8001e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e56:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e60:	2301      	movs	r3, #1
 8001e62:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e64:	2303      	movs	r3, #3
 8001e66:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001e68:	2308      	movs	r3, #8
 8001e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e70:	4619      	mov	r1, r3
 8001e72:	4860      	ldr	r0, [pc, #384]	; (8001ff4 <HAL_UART_MspInit+0x1f0>)
 8001e74:	f000 fd2a 	bl	80028cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e78:	e128      	b.n	80020cc <HAL_UART_MspInit+0x2c8>
  else if(huart->Instance==USART1)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a5e      	ldr	r2, [pc, #376]	; (8001ff8 <HAL_UART_MspInit+0x1f4>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d157      	bne.n	8001f34 <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e84:	4b5a      	ldr	r3, [pc, #360]	; (8001ff0 <HAL_UART_MspInit+0x1ec>)
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	4a59      	ldr	r2, [pc, #356]	; (8001ff0 <HAL_UART_MspInit+0x1ec>)
 8001e8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e8e:	6213      	str	r3, [r2, #32]
 8001e90:	4b57      	ldr	r3, [pc, #348]	; (8001ff0 <HAL_UART_MspInit+0x1ec>)
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e98:	623b      	str	r3, [r7, #32]
 8001e9a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9c:	4b54      	ldr	r3, [pc, #336]	; (8001ff0 <HAL_UART_MspInit+0x1ec>)
 8001e9e:	69db      	ldr	r3, [r3, #28]
 8001ea0:	4a53      	ldr	r2, [pc, #332]	; (8001ff0 <HAL_UART_MspInit+0x1ec>)
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	61d3      	str	r3, [r2, #28]
 8001ea8:	4b51      	ldr	r3, [pc, #324]	; (8001ff0 <HAL_UART_MspInit+0x1ec>)
 8001eaa:	69db      	ldr	r3, [r3, #28]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	61fb      	str	r3, [r7, #28]
 8001eb2:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001eb4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ec6:	2307      	movs	r3, #7
 8001ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ece:	4619      	mov	r1, r3
 8001ed0:	484a      	ldr	r0, [pc, #296]	; (8001ffc <HAL_UART_MspInit+0x1f8>)
 8001ed2:	f000 fcfb 	bl	80028cc <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001ed6:	4b4a      	ldr	r3, [pc, #296]	; (8002000 <HAL_UART_MspInit+0x1fc>)
 8001ed8:	4a4a      	ldr	r2, [pc, #296]	; (8002004 <HAL_UART_MspInit+0x200>)
 8001eda:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001edc:	4b48      	ldr	r3, [pc, #288]	; (8002000 <HAL_UART_MspInit+0x1fc>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ee2:	4b47      	ldr	r3, [pc, #284]	; (8002000 <HAL_UART_MspInit+0x1fc>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ee8:	4b45      	ldr	r3, [pc, #276]	; (8002000 <HAL_UART_MspInit+0x1fc>)
 8001eea:	2280      	movs	r2, #128	; 0x80
 8001eec:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001eee:	4b44      	ldr	r3, [pc, #272]	; (8002000 <HAL_UART_MspInit+0x1fc>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ef4:	4b42      	ldr	r3, [pc, #264]	; (8002000 <HAL_UART_MspInit+0x1fc>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001efa:	4b41      	ldr	r3, [pc, #260]	; (8002000 <HAL_UART_MspInit+0x1fc>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f00:	4b3f      	ldr	r3, [pc, #252]	; (8002000 <HAL_UART_MspInit+0x1fc>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001f06:	483e      	ldr	r0, [pc, #248]	; (8002000 <HAL_UART_MspInit+0x1fc>)
 8001f08:	f000 fbdc 	bl	80026c4 <HAL_DMA_Init>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <HAL_UART_MspInit+0x112>
      Error_Handler();
 8001f12:	f7ff fd9d 	bl	8001a50 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a39      	ldr	r2, [pc, #228]	; (8002000 <HAL_UART_MspInit+0x1fc>)
 8001f1a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f1c:	4a38      	ldr	r2, [pc, #224]	; (8002000 <HAL_UART_MspInit+0x1fc>)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f22:	2200      	movs	r2, #0
 8001f24:	2100      	movs	r1, #0
 8001f26:	2025      	movs	r0, #37	; 0x25
 8001f28:	f000 fb95 	bl	8002656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f2c:	2025      	movs	r0, #37	; 0x25
 8001f2e:	f000 fbae 	bl	800268e <HAL_NVIC_EnableIRQ>
}
 8001f32:	e0cb      	b.n	80020cc <HAL_UART_MspInit+0x2c8>
  else if(huart->Instance==USART2)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a33      	ldr	r2, [pc, #204]	; (8002008 <HAL_UART_MspInit+0x204>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d16a      	bne.n	8002014 <HAL_UART_MspInit+0x210>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f3e:	4b2c      	ldr	r3, [pc, #176]	; (8001ff0 <HAL_UART_MspInit+0x1ec>)
 8001f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f42:	4a2b      	ldr	r2, [pc, #172]	; (8001ff0 <HAL_UART_MspInit+0x1ec>)
 8001f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f48:	6253      	str	r3, [r2, #36]	; 0x24
 8001f4a:	4b29      	ldr	r3, [pc, #164]	; (8001ff0 <HAL_UART_MspInit+0x1ec>)
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f52:	61bb      	str	r3, [r7, #24]
 8001f54:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f56:	4b26      	ldr	r3, [pc, #152]	; (8001ff0 <HAL_UART_MspInit+0x1ec>)
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	4a25      	ldr	r2, [pc, #148]	; (8001ff0 <HAL_UART_MspInit+0x1ec>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	61d3      	str	r3, [r2, #28]
 8001f62:	4b23      	ldr	r3, [pc, #140]	; (8001ff0 <HAL_UART_MspInit+0x1ec>)
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	617b      	str	r3, [r7, #20]
 8001f6c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f6e:	230c      	movs	r3, #12
 8001f70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f72:	2302      	movs	r3, #2
 8001f74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f7e:	2307      	movs	r3, #7
 8001f80:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f86:	4619      	mov	r1, r3
 8001f88:	481c      	ldr	r0, [pc, #112]	; (8001ffc <HAL_UART_MspInit+0x1f8>)
 8001f8a:	f000 fc9f 	bl	80028cc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001f8e:	4b1f      	ldr	r3, [pc, #124]	; (800200c <HAL_UART_MspInit+0x208>)
 8001f90:	4a1f      	ldr	r2, [pc, #124]	; (8002010 <HAL_UART_MspInit+0x20c>)
 8001f92:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f94:	4b1d      	ldr	r3, [pc, #116]	; (800200c <HAL_UART_MspInit+0x208>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f9a:	4b1c      	ldr	r3, [pc, #112]	; (800200c <HAL_UART_MspInit+0x208>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fa0:	4b1a      	ldr	r3, [pc, #104]	; (800200c <HAL_UART_MspInit+0x208>)
 8001fa2:	2280      	movs	r2, #128	; 0x80
 8001fa4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fa6:	4b19      	ldr	r3, [pc, #100]	; (800200c <HAL_UART_MspInit+0x208>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fac:	4b17      	ldr	r3, [pc, #92]	; (800200c <HAL_UART_MspInit+0x208>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001fb2:	4b16      	ldr	r3, [pc, #88]	; (800200c <HAL_UART_MspInit+0x208>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001fb8:	4b14      	ldr	r3, [pc, #80]	; (800200c <HAL_UART_MspInit+0x208>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001fbe:	4813      	ldr	r0, [pc, #76]	; (800200c <HAL_UART_MspInit+0x208>)
 8001fc0:	f000 fb80 	bl	80026c4 <HAL_DMA_Init>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 8001fca:	f7ff fd41 	bl	8001a50 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a0e      	ldr	r2, [pc, #56]	; (800200c <HAL_UART_MspInit+0x208>)
 8001fd2:	63da      	str	r2, [r3, #60]	; 0x3c
 8001fd4:	4a0d      	ldr	r2, [pc, #52]	; (800200c <HAL_UART_MspInit+0x208>)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2100      	movs	r1, #0
 8001fde:	2026      	movs	r0, #38	; 0x26
 8001fe0:	f000 fb39 	bl	8002656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001fe4:	2026      	movs	r0, #38	; 0x26
 8001fe6:	f000 fb52 	bl	800268e <HAL_NVIC_EnableIRQ>
}
 8001fea:	e06f      	b.n	80020cc <HAL_UART_MspInit+0x2c8>
 8001fec:	40004c00 	.word	0x40004c00
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	40020800 	.word	0x40020800
 8001ff8:	40013800 	.word	0x40013800
 8001ffc:	40020000 	.word	0x40020000
 8002000:	200029f8 	.word	0x200029f8
 8002004:	40026058 	.word	0x40026058
 8002008:	40004400 	.word	0x40004400
 800200c:	20002a3c 	.word	0x20002a3c
 8002010:	4002606c 	.word	0x4002606c
  else if(huart->Instance==USART3)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a2e      	ldr	r2, [pc, #184]	; (80020d4 <HAL_UART_MspInit+0x2d0>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d156      	bne.n	80020cc <HAL_UART_MspInit+0x2c8>
    __HAL_RCC_USART3_CLK_ENABLE();
 800201e:	4b2e      	ldr	r3, [pc, #184]	; (80020d8 <HAL_UART_MspInit+0x2d4>)
 8002020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002022:	4a2d      	ldr	r2, [pc, #180]	; (80020d8 <HAL_UART_MspInit+0x2d4>)
 8002024:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002028:	6253      	str	r3, [r2, #36]	; 0x24
 800202a:	4b2b      	ldr	r3, [pc, #172]	; (80020d8 <HAL_UART_MspInit+0x2d4>)
 800202c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002032:	613b      	str	r3, [r7, #16]
 8002034:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002036:	4b28      	ldr	r3, [pc, #160]	; (80020d8 <HAL_UART_MspInit+0x2d4>)
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	4a27      	ldr	r2, [pc, #156]	; (80020d8 <HAL_UART_MspInit+0x2d4>)
 800203c:	f043 0302 	orr.w	r3, r3, #2
 8002040:	61d3      	str	r3, [r2, #28]
 8002042:	4b25      	ldr	r3, [pc, #148]	; (80020d8 <HAL_UART_MspInit+0x2d4>)
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800204e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002052:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002054:	2302      	movs	r3, #2
 8002056:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205c:	2303      	movs	r3, #3
 800205e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002060:	2307      	movs	r3, #7
 8002062:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002064:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002068:	4619      	mov	r1, r3
 800206a:	481c      	ldr	r0, [pc, #112]	; (80020dc <HAL_UART_MspInit+0x2d8>)
 800206c:	f000 fc2e 	bl	80028cc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8002070:	4b1b      	ldr	r3, [pc, #108]	; (80020e0 <HAL_UART_MspInit+0x2dc>)
 8002072:	4a1c      	ldr	r2, [pc, #112]	; (80020e4 <HAL_UART_MspInit+0x2e0>)
 8002074:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002076:	4b1a      	ldr	r3, [pc, #104]	; (80020e0 <HAL_UART_MspInit+0x2dc>)
 8002078:	2200      	movs	r2, #0
 800207a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800207c:	4b18      	ldr	r3, [pc, #96]	; (80020e0 <HAL_UART_MspInit+0x2dc>)
 800207e:	2200      	movs	r2, #0
 8002080:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002082:	4b17      	ldr	r3, [pc, #92]	; (80020e0 <HAL_UART_MspInit+0x2dc>)
 8002084:	2280      	movs	r2, #128	; 0x80
 8002086:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002088:	4b15      	ldr	r3, [pc, #84]	; (80020e0 <HAL_UART_MspInit+0x2dc>)
 800208a:	2200      	movs	r2, #0
 800208c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800208e:	4b14      	ldr	r3, [pc, #80]	; (80020e0 <HAL_UART_MspInit+0x2dc>)
 8002090:	2200      	movs	r2, #0
 8002092:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002094:	4b12      	ldr	r3, [pc, #72]	; (80020e0 <HAL_UART_MspInit+0x2dc>)
 8002096:	2200      	movs	r2, #0
 8002098:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800209a:	4b11      	ldr	r3, [pc, #68]	; (80020e0 <HAL_UART_MspInit+0x2dc>)
 800209c:	2200      	movs	r2, #0
 800209e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80020a0:	480f      	ldr	r0, [pc, #60]	; (80020e0 <HAL_UART_MspInit+0x2dc>)
 80020a2:	f000 fb0f 	bl	80026c4 <HAL_DMA_Init>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <HAL_UART_MspInit+0x2ac>
      Error_Handler();
 80020ac:	f7ff fcd0 	bl	8001a50 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a0b      	ldr	r2, [pc, #44]	; (80020e0 <HAL_UART_MspInit+0x2dc>)
 80020b4:	63da      	str	r2, [r3, #60]	; 0x3c
 80020b6:	4a0a      	ldr	r2, [pc, #40]	; (80020e0 <HAL_UART_MspInit+0x2dc>)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80020bc:	2200      	movs	r2, #0
 80020be:	2100      	movs	r1, #0
 80020c0:	2027      	movs	r0, #39	; 0x27
 80020c2:	f000 fac8 	bl	8002656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80020c6:	2027      	movs	r0, #39	; 0x27
 80020c8:	f000 fae1 	bl	800268e <HAL_NVIC_EnableIRQ>
}
 80020cc:	bf00      	nop
 80020ce:	3740      	adds	r7, #64	; 0x40
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40004800 	.word	0x40004800
 80020d8:	40023800 	.word	0x40023800
 80020dc:	40020400 	.word	0x40020400
 80020e0:	20002a80 	.word	0x20002a80
 80020e4:	40026030 	.word	0x40026030

080020e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020ec:	e7fe      	b.n	80020ec <NMI_Handler+0x4>

080020ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020ee:	b480      	push	{r7}
 80020f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020f2:	e7fe      	b.n	80020f2 <HardFault_Handler+0x4>

080020f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020f8:	e7fe      	b.n	80020f8 <MemManage_Handler+0x4>

080020fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020fa:	b480      	push	{r7}
 80020fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020fe:	e7fe      	b.n	80020fe <BusFault_Handler+0x4>

08002100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002104:	e7fe      	b.n	8002104 <UsageFault_Handler+0x4>

08002106 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002106:	b480      	push	{r7}
 8002108:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr

08002112 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002112:	b480      	push	{r7}
 8002114:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr

0800211e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	46bd      	mov	sp, r7
 8002126:	bc80      	pop	{r7}
 8002128:	4770      	bx	lr

0800212a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800212e:	f000 f97d 	bl	800242c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
	...

08002138 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */
	  UARTDMA_DmaIrqHandler(&hRAM_2_uart3dma3);
 800213c:	4802      	ldr	r0, [pc, #8]	; (8002148 <DMA1_Channel3_IRQHandler+0x10>)
 800213e:	f7fe f9de 	bl	80004fe <UARTDMA_DmaIrqHandler>
	  return;
 8002142:	bf00      	nop
  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	20001ccc 	.word	0x20001ccc

0800214c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */
	  UARTDMA_DmaIrqHandler(&hRAM_1_uart1dma5);
 8002150:	4802      	ldr	r0, [pc, #8]	; (800215c <DMA1_Channel5_IRQHandler+0x10>)
 8002152:	f7fe f9d4 	bl	80004fe <UARTDMA_DmaIrqHandler>
	  return;
 8002156:	bf00      	nop
  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	200010c0 	.word	0x200010c0

08002160 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
  UARTDMA_DmaIrqHandler(&hLTE_uart2dma6);
 8002164:	4802      	ldr	r0, [pc, #8]	; (8002170 <DMA1_Channel6_IRQHandler+0x10>)
 8002166:	f7fe f9ca 	bl	80004fe <UARTDMA_DmaIrqHandler>
  return;
 800216a:	bf00      	nop
  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	200004b4 	.word	0x200004b4

08002174 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	  UARTDMA_UartIrqHandler(&hRAM_1_uart1dma5);
 8002178:	4802      	ldr	r0, [pc, #8]	; (8002184 <USART1_IRQHandler+0x10>)
 800217a:	f7fe f995 	bl	80004a8 <UARTDMA_UartIrqHandler>
	  return;
 800217e:	bf00      	nop
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	200010c0 	.word	0x200010c0

08002188 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  UARTDMA_UartIrqHandler(&hLTE_uart2dma6);
 800218c:	4802      	ldr	r0, [pc, #8]	; (8002198 <USART2_IRQHandler+0x10>)
 800218e:	f7fe f98b 	bl	80004a8 <UARTDMA_UartIrqHandler>
  return;
 8002192:	bf00      	nop
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	200004b4 	.word	0x200004b4

0800219c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	  UARTDMA_UartIrqHandler(&hRAM_2_uart3dma3);
 80021a0:	4802      	ldr	r0, [pc, #8]	; (80021ac <USART3_IRQHandler+0x10>)
 80021a2:	f7fe f981 	bl	80004a8 <UARTDMA_UartIrqHandler>
	  return;
 80021a6:	bf00      	nop
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	20001ccc 	.word	0x20001ccc

080021b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  return 1;
 80021b4:	2301      	movs	r3, #1
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bc80      	pop	{r7}
 80021bc:	4770      	bx	lr

080021be <_kill>:

int _kill(int pid, int sig)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b082      	sub	sp, #8
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
 80021c6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021c8:	f001 ffb4 	bl	8004134 <__errno>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2216      	movs	r2, #22
 80021d0:	601a      	str	r2, [r3, #0]
  return -1;
 80021d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <_exit>:

void _exit (int status)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021e6:	f04f 31ff 	mov.w	r1, #4294967295
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7ff ffe7 	bl	80021be <_kill>
  while (1) {}    /* Make sure we hang here */
 80021f0:	e7fe      	b.n	80021f0 <_exit+0x12>

080021f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b086      	sub	sp, #24
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	60f8      	str	r0, [r7, #12]
 80021fa:	60b9      	str	r1, [r7, #8]
 80021fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
 8002202:	e00a      	b.n	800221a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002204:	f3af 8000 	nop.w
 8002208:	4601      	mov	r1, r0
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	1c5a      	adds	r2, r3, #1
 800220e:	60ba      	str	r2, [r7, #8]
 8002210:	b2ca      	uxtb	r2, r1
 8002212:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	3301      	adds	r3, #1
 8002218:	617b      	str	r3, [r7, #20]
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	429a      	cmp	r2, r3
 8002220:	dbf0      	blt.n	8002204 <_read+0x12>
  }

  return len;
 8002222:	687b      	ldr	r3, [r7, #4]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002238:	2300      	movs	r3, #0
 800223a:	617b      	str	r3, [r7, #20]
 800223c:	e009      	b.n	8002252 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	1c5a      	adds	r2, r3, #1
 8002242:	60ba      	str	r2, [r7, #8]
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f7fe fa98 	bl	800077c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	3301      	adds	r3, #1
 8002250:	617b      	str	r3, [r7, #20]
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	429a      	cmp	r2, r3
 8002258:	dbf1      	blt.n	800223e <_write+0x12>
  }
  return len;
 800225a:	687b      	ldr	r3, [r7, #4]
}
 800225c:	4618      	mov	r0, r3
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <_close>:

int _close(int file)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800226c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002270:	4618      	mov	r0, r3
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	bc80      	pop	{r7}
 8002278:	4770      	bx	lr

0800227a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800227a:	b480      	push	{r7}
 800227c:	b083      	sub	sp, #12
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
 8002282:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800228a:	605a      	str	r2, [r3, #4]
  return 0;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	bc80      	pop	{r7}
 8002296:	4770      	bx	lr

08002298 <_isatty>:

int _isatty(int file)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022a0:	2301      	movs	r3, #1
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr

080022ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr

080022c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022cc:	4a14      	ldr	r2, [pc, #80]	; (8002320 <_sbrk+0x5c>)
 80022ce:	4b15      	ldr	r3, [pc, #84]	; (8002324 <_sbrk+0x60>)
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022d8:	4b13      	ldr	r3, [pc, #76]	; (8002328 <_sbrk+0x64>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d102      	bne.n	80022e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022e0:	4b11      	ldr	r3, [pc, #68]	; (8002328 <_sbrk+0x64>)
 80022e2:	4a12      	ldr	r2, [pc, #72]	; (800232c <_sbrk+0x68>)
 80022e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022e6:	4b10      	ldr	r3, [pc, #64]	; (8002328 <_sbrk+0x64>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4413      	add	r3, r2
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d207      	bcs.n	8002304 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022f4:	f001 ff1e 	bl	8004134 <__errno>
 80022f8:	4603      	mov	r3, r0
 80022fa:	220c      	movs	r2, #12
 80022fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002302:	e009      	b.n	8002318 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002304:	4b08      	ldr	r3, [pc, #32]	; (8002328 <_sbrk+0x64>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800230a:	4b07      	ldr	r3, [pc, #28]	; (8002328 <_sbrk+0x64>)
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4413      	add	r3, r2
 8002312:	4a05      	ldr	r2, [pc, #20]	; (8002328 <_sbrk+0x64>)
 8002314:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002316:	68fb      	ldr	r3, [r7, #12]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3718      	adds	r7, #24
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20014000 	.word	0x20014000
 8002324:	00000400 	.word	0x00000400
 8002328:	200036dc 	.word	0x200036dc
 800232c:	200036f8 	.word	0x200036f8

08002330 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr

0800233c <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 800233c:	f7ff fff8 	bl	8002330 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002340:	480b      	ldr	r0, [pc, #44]	; (8002370 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002342:	490c      	ldr	r1, [pc, #48]	; (8002374 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002344:	4a0c      	ldr	r2, [pc, #48]	; (8002378 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002348:	e002      	b.n	8002350 <LoopCopyDataInit>

0800234a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800234a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800234c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800234e:	3304      	adds	r3, #4

08002350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002354:	d3f9      	bcc.n	800234a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002356:	4a09      	ldr	r2, [pc, #36]	; (800237c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002358:	4c09      	ldr	r4, [pc, #36]	; (8002380 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800235a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800235c:	e001      	b.n	8002362 <LoopFillZerobss>

0800235e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800235e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002360:	3204      	adds	r2, #4

08002362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002364:	d3fb      	bcc.n	800235e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002366:	f001 feeb 	bl	8004140 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800236a:	f7fe fa19 	bl	80007a0 <main>
  bx lr
 800236e:	4770      	bx	lr
  ldr r0, =_sdata
 8002370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002374:	20000498 	.word	0x20000498
  ldr r2, =_sidata
 8002378:	08005ed0 	.word	0x08005ed0
  ldr r2, =_sbss
 800237c:	20000498 	.word	0x20000498
  ldr r4, =_ebss
 8002380:	200036f4 	.word	0x200036f4

08002384 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002384:	e7fe      	b.n	8002384 <ADC1_IRQHandler>

08002386 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800238c:	2300      	movs	r3, #0
 800238e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002390:	2003      	movs	r0, #3
 8002392:	f000 f955 	bl	8002640 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002396:	2000      	movs	r0, #0
 8002398:	f000 f80e 	bl	80023b8 <HAL_InitTick>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d002      	beq.n	80023a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	71fb      	strb	r3, [r7, #7]
 80023a6:	e001      	b.n	80023ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023a8:	f7ff fcfc 	bl	8001da4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023ac:	79fb      	ldrb	r3, [r7, #7]
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
	...

080023b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023c0:	2300      	movs	r3, #0
 80023c2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80023c4:	4b16      	ldr	r3, [pc, #88]	; (8002420 <HAL_InitTick+0x68>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d022      	beq.n	8002412 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80023cc:	4b15      	ldr	r3, [pc, #84]	; (8002424 <HAL_InitTick+0x6c>)
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	4b13      	ldr	r3, [pc, #76]	; (8002420 <HAL_InitTick+0x68>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80023d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80023dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e0:	4618      	mov	r0, r3
 80023e2:	f000 f962 	bl	80026aa <HAL_SYSTICK_Config>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d10f      	bne.n	800240c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b0f      	cmp	r3, #15
 80023f0:	d809      	bhi.n	8002406 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023f2:	2200      	movs	r2, #0
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	f04f 30ff 	mov.w	r0, #4294967295
 80023fa:	f000 f92c 	bl	8002656 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023fe:	4a0a      	ldr	r2, [pc, #40]	; (8002428 <HAL_InitTick+0x70>)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6013      	str	r3, [r2, #0]
 8002404:	e007      	b.n	8002416 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	73fb      	strb	r3, [r7, #15]
 800240a:	e004      	b.n	8002416 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	73fb      	strb	r3, [r7, #15]
 8002410:	e001      	b.n	8002416 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002416:	7bfb      	ldrb	r3, [r7, #15]
}
 8002418:	4618      	mov	r0, r3
 800241a:	3710      	adds	r7, #16
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	20000430 	.word	0x20000430
 8002424:	20000428 	.word	0x20000428
 8002428:	2000042c 	.word	0x2000042c

0800242c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002430:	4b05      	ldr	r3, [pc, #20]	; (8002448 <HAL_IncTick+0x1c>)
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	4b05      	ldr	r3, [pc, #20]	; (800244c <HAL_IncTick+0x20>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4413      	add	r3, r2
 800243a:	4a03      	ldr	r2, [pc, #12]	; (8002448 <HAL_IncTick+0x1c>)
 800243c:	6013      	str	r3, [r2, #0]
}
 800243e:	bf00      	nop
 8002440:	46bd      	mov	sp, r7
 8002442:	bc80      	pop	{r7}
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	200036e0 	.word	0x200036e0
 800244c:	20000430 	.word	0x20000430

08002450 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  return uwTick;
 8002454:	4b02      	ldr	r3, [pc, #8]	; (8002460 <HAL_GetTick+0x10>)
 8002456:	681b      	ldr	r3, [r3, #0]
}
 8002458:	4618      	mov	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr
 8002460:	200036e0 	.word	0x200036e0

08002464 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800246c:	f7ff fff0 	bl	8002450 <HAL_GetTick>
 8002470:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800247c:	d004      	beq.n	8002488 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800247e:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <HAL_Delay+0x40>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	4413      	add	r3, r2
 8002486:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002488:	bf00      	nop
 800248a:	f7ff ffe1 	bl	8002450 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	429a      	cmp	r2, r3
 8002498:	d8f7      	bhi.n	800248a <HAL_Delay+0x26>
  {
  }
}
 800249a:	bf00      	nop
 800249c:	bf00      	nop
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	20000430 	.word	0x20000430

080024a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024b8:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <__NVIC_SetPriorityGrouping+0x44>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024c4:	4013      	ands	r3, r2
 80024c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024da:	4a04      	ldr	r2, [pc, #16]	; (80024ec <__NVIC_SetPriorityGrouping+0x44>)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	60d3      	str	r3, [r2, #12]
}
 80024e0:	bf00      	nop
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc80      	pop	{r7}
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	e000ed00 	.word	0xe000ed00

080024f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024f4:	4b04      	ldr	r3, [pc, #16]	; (8002508 <__NVIC_GetPriorityGrouping+0x18>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	0a1b      	lsrs	r3, r3, #8
 80024fa:	f003 0307 	and.w	r3, r3, #7
}
 80024fe:	4618      	mov	r0, r3
 8002500:	46bd      	mov	sp, r7
 8002502:	bc80      	pop	{r7}
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	e000ed00 	.word	0xe000ed00

0800250c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251a:	2b00      	cmp	r3, #0
 800251c:	db0b      	blt.n	8002536 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	f003 021f 	and.w	r2, r3, #31
 8002524:	4906      	ldr	r1, [pc, #24]	; (8002540 <__NVIC_EnableIRQ+0x34>)
 8002526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252a:	095b      	lsrs	r3, r3, #5
 800252c:	2001      	movs	r0, #1
 800252e:	fa00 f202 	lsl.w	r2, r0, r2
 8002532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr
 8002540:	e000e100 	.word	0xe000e100

08002544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	6039      	str	r1, [r7, #0]
 800254e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002554:	2b00      	cmp	r3, #0
 8002556:	db0a      	blt.n	800256e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	b2da      	uxtb	r2, r3
 800255c:	490c      	ldr	r1, [pc, #48]	; (8002590 <__NVIC_SetPriority+0x4c>)
 800255e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002562:	0112      	lsls	r2, r2, #4
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	440b      	add	r3, r1
 8002568:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800256c:	e00a      	b.n	8002584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	b2da      	uxtb	r2, r3
 8002572:	4908      	ldr	r1, [pc, #32]	; (8002594 <__NVIC_SetPriority+0x50>)
 8002574:	79fb      	ldrb	r3, [r7, #7]
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	3b04      	subs	r3, #4
 800257c:	0112      	lsls	r2, r2, #4
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	440b      	add	r3, r1
 8002582:	761a      	strb	r2, [r3, #24]
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	bc80      	pop	{r7}
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	e000e100 	.word	0xe000e100
 8002594:	e000ed00 	.word	0xe000ed00

08002598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002598:	b480      	push	{r7}
 800259a:	b089      	sub	sp, #36	; 0x24
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	f1c3 0307 	rsb	r3, r3, #7
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	bf28      	it	cs
 80025b6:	2304      	movcs	r3, #4
 80025b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	3304      	adds	r3, #4
 80025be:	2b06      	cmp	r3, #6
 80025c0:	d902      	bls.n	80025c8 <NVIC_EncodePriority+0x30>
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	3b03      	subs	r3, #3
 80025c6:	e000      	b.n	80025ca <NVIC_EncodePriority+0x32>
 80025c8:	2300      	movs	r3, #0
 80025ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025cc:	f04f 32ff 	mov.w	r2, #4294967295
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43da      	mvns	r2, r3
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	401a      	ands	r2, r3
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025e0:	f04f 31ff 	mov.w	r1, #4294967295
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ea:	43d9      	mvns	r1, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f0:	4313      	orrs	r3, r2
         );
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3724      	adds	r7, #36	; 0x24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr

080025fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	3b01      	subs	r3, #1
 8002608:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800260c:	d301      	bcc.n	8002612 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800260e:	2301      	movs	r3, #1
 8002610:	e00f      	b.n	8002632 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002612:	4a0a      	ldr	r2, [pc, #40]	; (800263c <SysTick_Config+0x40>)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3b01      	subs	r3, #1
 8002618:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800261a:	210f      	movs	r1, #15
 800261c:	f04f 30ff 	mov.w	r0, #4294967295
 8002620:	f7ff ff90 	bl	8002544 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002624:	4b05      	ldr	r3, [pc, #20]	; (800263c <SysTick_Config+0x40>)
 8002626:	2200      	movs	r2, #0
 8002628:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800262a:	4b04      	ldr	r3, [pc, #16]	; (800263c <SysTick_Config+0x40>)
 800262c:	2207      	movs	r2, #7
 800262e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	e000e010 	.word	0xe000e010

08002640 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f7ff ff2d 	bl	80024a8 <__NVIC_SetPriorityGrouping>
}
 800264e:	bf00      	nop
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b086      	sub	sp, #24
 800265a:	af00      	add	r7, sp, #0
 800265c:	4603      	mov	r3, r0
 800265e:	60b9      	str	r1, [r7, #8]
 8002660:	607a      	str	r2, [r7, #4]
 8002662:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002664:	2300      	movs	r3, #0
 8002666:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002668:	f7ff ff42 	bl	80024f0 <__NVIC_GetPriorityGrouping>
 800266c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	68b9      	ldr	r1, [r7, #8]
 8002672:	6978      	ldr	r0, [r7, #20]
 8002674:	f7ff ff90 	bl	8002598 <NVIC_EncodePriority>
 8002678:	4602      	mov	r2, r0
 800267a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800267e:	4611      	mov	r1, r2
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff ff5f 	bl	8002544 <__NVIC_SetPriority>
}
 8002686:	bf00      	nop
 8002688:	3718      	adds	r7, #24
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b082      	sub	sp, #8
 8002692:	af00      	add	r7, sp, #0
 8002694:	4603      	mov	r3, r0
 8002696:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff ff35 	bl	800250c <__NVIC_EnableIRQ>
}
 80026a2:	bf00      	nop
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b082      	sub	sp, #8
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7ff ffa2 	bl	80025fc <SysTick_Config>
 80026b8:	4603      	mov	r3, r0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
	...

080026c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e059      	b.n	800278a <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	461a      	mov	r2, r3
 80026dc:	4b2d      	ldr	r3, [pc, #180]	; (8002794 <HAL_DMA_Init+0xd0>)
 80026de:	429a      	cmp	r2, r3
 80026e0:	d80f      	bhi.n	8002702 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	461a      	mov	r2, r3
 80026e8:	4b2b      	ldr	r3, [pc, #172]	; (8002798 <HAL_DMA_Init+0xd4>)
 80026ea:	4413      	add	r3, r2
 80026ec:	4a2b      	ldr	r2, [pc, #172]	; (800279c <HAL_DMA_Init+0xd8>)
 80026ee:	fba2 2303 	umull	r2, r3, r2, r3
 80026f2:	091b      	lsrs	r3, r3, #4
 80026f4:	009a      	lsls	r2, r3, #2
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a28      	ldr	r2, [pc, #160]	; (80027a0 <HAL_DMA_Init+0xdc>)
 80026fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8002700:	e00e      	b.n	8002720 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	461a      	mov	r2, r3
 8002708:	4b26      	ldr	r3, [pc, #152]	; (80027a4 <HAL_DMA_Init+0xe0>)
 800270a:	4413      	add	r3, r2
 800270c:	4a23      	ldr	r2, [pc, #140]	; (800279c <HAL_DMA_Init+0xd8>)
 800270e:	fba2 2303 	umull	r2, r3, r2, r3
 8002712:	091b      	lsrs	r3, r3, #4
 8002714:	009a      	lsls	r2, r3, #2
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a22      	ldr	r2, [pc, #136]	; (80027a8 <HAL_DMA_Init+0xe4>)
 800271e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2202      	movs	r2, #2
 8002724:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800273a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002744:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002750:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800275c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	4313      	orrs	r3, r2
 8002768:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3714      	adds	r7, #20
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr
 8002794:	40026407 	.word	0x40026407
 8002798:	bffd9ff8 	.word	0xbffd9ff8
 800279c:	cccccccd 	.word	0xcccccccd
 80027a0:	40026000 	.word	0x40026000
 80027a4:	bffd9bf8 	.word	0xbffd9bf8
 80027a8:	40026400 	.word	0x40026400

080027ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
 80027b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027ba:	2300      	movs	r3, #0
 80027bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d101      	bne.n	80027cc <HAL_DMA_Start_IT+0x20>
 80027c8:	2302      	movs	r3, #2
 80027ca:	e04b      	b.n	8002864 <HAL_DMA_Start_IT+0xb8>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d13a      	bne.n	8002856 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2202      	movs	r2, #2
 80027e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 0201 	bic.w	r2, r2, #1
 80027fc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	68b9      	ldr	r1, [r7, #8]
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f000 f831 	bl	800286c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280e:	2b00      	cmp	r3, #0
 8002810:	d008      	beq.n	8002824 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f042 020e 	orr.w	r2, r2, #14
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	e00f      	b.n	8002844 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0204 	bic.w	r2, r2, #4
 8002832:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 020a 	orr.w	r2, r2, #10
 8002842:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f042 0201 	orr.w	r2, r2, #1
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	e005      	b.n	8002862 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800285e:	2302      	movs	r3, #2
 8002860:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002862:	7dfb      	ldrb	r3, [r7, #23]
}
 8002864:	4618      	mov	r0, r3
 8002866:	3718      	adds	r7, #24
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
 8002878:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	f003 021c 	and.w	r2, r3, #28
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002886:	2101      	movs	r1, #1
 8002888:	fa01 f202 	lsl.w	r2, r1, r2
 800288c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b10      	cmp	r3, #16
 800289c:	d108      	bne.n	80028b0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80028ae:	e007      	b.n	80028c0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68ba      	ldr	r2, [r7, #8]
 80028b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	60da      	str	r2, [r3, #12]
}
 80028c0:	bf00      	nop
 80028c2:	3714      	adds	r7, #20
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc80      	pop	{r7}
 80028c8:	4770      	bx	lr
	...

080028cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b087      	sub	sp, #28
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80028d6:	2300      	movs	r3, #0
 80028d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80028da:	2300      	movs	r3, #0
 80028dc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80028de:	2300      	movs	r3, #0
 80028e0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80028e2:	e160      	b.n	8002ba6 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	2101      	movs	r1, #1
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	fa01 f303 	lsl.w	r3, r1, r3
 80028f0:	4013      	ands	r3, r2
 80028f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 8152 	beq.w	8002ba0 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f003 0303 	and.w	r3, r3, #3
 8002904:	2b01      	cmp	r3, #1
 8002906:	d005      	beq.n	8002914 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002910:	2b02      	cmp	r3, #2
 8002912:	d130      	bne.n	8002976 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	2203      	movs	r2, #3
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	43db      	mvns	r3, r3
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	4013      	ands	r3, r2
 800292a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	68da      	ldr	r2, [r3, #12]
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	4313      	orrs	r3, r2
 800293c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800294a:	2201      	movs	r2, #1
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	43db      	mvns	r3, r3
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	4013      	ands	r3, r2
 8002958:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	091b      	lsrs	r3, r3, #4
 8002960:	f003 0201 	and.w	r2, r3, #1
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	4313      	orrs	r3, r2
 800296e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	2b03      	cmp	r3, #3
 8002980:	d017      	beq.n	80029b2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	2203      	movs	r2, #3
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	43db      	mvns	r3, r3
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	4013      	ands	r3, r2
 8002998:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	689a      	ldr	r2, [r3, #8]
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f003 0303 	and.w	r3, r3, #3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d123      	bne.n	8002a06 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	08da      	lsrs	r2, r3, #3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	3208      	adds	r2, #8
 80029c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029ca:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	220f      	movs	r2, #15
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	43db      	mvns	r3, r3
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	4013      	ands	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	691a      	ldr	r2, [r3, #16]
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	08da      	lsrs	r2, r3, #3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3208      	adds	r2, #8
 8002a00:	6939      	ldr	r1, [r7, #16]
 8002a02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	2203      	movs	r2, #3
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	43db      	mvns	r3, r3
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f003 0203 	and.w	r2, r3, #3
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 80ac 	beq.w	8002ba0 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a48:	4b5e      	ldr	r3, [pc, #376]	; (8002bc4 <HAL_GPIO_Init+0x2f8>)
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	4a5d      	ldr	r2, [pc, #372]	; (8002bc4 <HAL_GPIO_Init+0x2f8>)
 8002a4e:	f043 0301 	orr.w	r3, r3, #1
 8002a52:	6213      	str	r3, [r2, #32]
 8002a54:	4b5b      	ldr	r3, [pc, #364]	; (8002bc4 <HAL_GPIO_Init+0x2f8>)
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	60bb      	str	r3, [r7, #8]
 8002a5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002a60:	4a59      	ldr	r2, [pc, #356]	; (8002bc8 <HAL_GPIO_Init+0x2fc>)
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	089b      	lsrs	r3, r3, #2
 8002a66:	3302      	adds	r3, #2
 8002a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a6c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	f003 0303 	and.w	r3, r3, #3
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	220f      	movs	r2, #15
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	4013      	ands	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a51      	ldr	r2, [pc, #324]	; (8002bcc <HAL_GPIO_Init+0x300>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d025      	beq.n	8002ad8 <HAL_GPIO_Init+0x20c>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a50      	ldr	r2, [pc, #320]	; (8002bd0 <HAL_GPIO_Init+0x304>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d01f      	beq.n	8002ad4 <HAL_GPIO_Init+0x208>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a4f      	ldr	r2, [pc, #316]	; (8002bd4 <HAL_GPIO_Init+0x308>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d019      	beq.n	8002ad0 <HAL_GPIO_Init+0x204>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a4e      	ldr	r2, [pc, #312]	; (8002bd8 <HAL_GPIO_Init+0x30c>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d013      	beq.n	8002acc <HAL_GPIO_Init+0x200>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a4d      	ldr	r2, [pc, #308]	; (8002bdc <HAL_GPIO_Init+0x310>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d00d      	beq.n	8002ac8 <HAL_GPIO_Init+0x1fc>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a4c      	ldr	r2, [pc, #304]	; (8002be0 <HAL_GPIO_Init+0x314>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d007      	beq.n	8002ac4 <HAL_GPIO_Init+0x1f8>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a4b      	ldr	r2, [pc, #300]	; (8002be4 <HAL_GPIO_Init+0x318>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d101      	bne.n	8002ac0 <HAL_GPIO_Init+0x1f4>
 8002abc:	2306      	movs	r3, #6
 8002abe:	e00c      	b.n	8002ada <HAL_GPIO_Init+0x20e>
 8002ac0:	2307      	movs	r3, #7
 8002ac2:	e00a      	b.n	8002ada <HAL_GPIO_Init+0x20e>
 8002ac4:	2305      	movs	r3, #5
 8002ac6:	e008      	b.n	8002ada <HAL_GPIO_Init+0x20e>
 8002ac8:	2304      	movs	r3, #4
 8002aca:	e006      	b.n	8002ada <HAL_GPIO_Init+0x20e>
 8002acc:	2303      	movs	r3, #3
 8002ace:	e004      	b.n	8002ada <HAL_GPIO_Init+0x20e>
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	e002      	b.n	8002ada <HAL_GPIO_Init+0x20e>
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e000      	b.n	8002ada <HAL_GPIO_Init+0x20e>
 8002ad8:	2300      	movs	r3, #0
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	f002 0203 	and.w	r2, r2, #3
 8002ae0:	0092      	lsls	r2, r2, #2
 8002ae2:	4093      	lsls	r3, r2
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002aea:	4937      	ldr	r1, [pc, #220]	; (8002bc8 <HAL_GPIO_Init+0x2fc>)
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	089b      	lsrs	r3, r3, #2
 8002af0:	3302      	adds	r3, #2
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002af8:	4b3b      	ldr	r3, [pc, #236]	; (8002be8 <HAL_GPIO_Init+0x31c>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	43db      	mvns	r3, r3
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4013      	ands	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002b1c:	4a32      	ldr	r2, [pc, #200]	; (8002be8 <HAL_GPIO_Init+0x31c>)
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b22:	4b31      	ldr	r3, [pc, #196]	; (8002be8 <HAL_GPIO_Init+0x31c>)
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002b46:	4a28      	ldr	r2, [pc, #160]	; (8002be8 <HAL_GPIO_Init+0x31c>)
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b4c:	4b26      	ldr	r3, [pc, #152]	; (8002be8 <HAL_GPIO_Init+0x31c>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	43db      	mvns	r3, r3
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002b70:	4a1d      	ldr	r2, [pc, #116]	; (8002be8 <HAL_GPIO_Init+0x31c>)
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b76:	4b1c      	ldr	r3, [pc, #112]	; (8002be8 <HAL_GPIO_Init+0x31c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	43db      	mvns	r3, r3
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	4013      	ands	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002b9a:	4a13      	ldr	r2, [pc, #76]	; (8002be8 <HAL_GPIO_Init+0x31c>)
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f47f ae97 	bne.w	80028e4 <HAL_GPIO_Init+0x18>
  }
}
 8002bb6:	bf00      	nop
 8002bb8:	bf00      	nop
 8002bba:	371c      	adds	r7, #28
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bc80      	pop	{r7}
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	40010000 	.word	0x40010000
 8002bcc:	40020000 	.word	0x40020000
 8002bd0:	40020400 	.word	0x40020400
 8002bd4:	40020800 	.word	0x40020800
 8002bd8:	40020c00 	.word	0x40020c00
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	40021400 	.word	0x40021400
 8002be4:	40021800 	.word	0x40021800
 8002be8:	40010400 	.word	0x40010400

08002bec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	807b      	strh	r3, [r7, #2]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bfc:	787b      	ldrb	r3, [r7, #1]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c02:	887a      	ldrh	r2, [r7, #2]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002c08:	e003      	b.n	8002c12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002c0a:	887b      	ldrh	r3, [r7, #2]
 8002c0c:	041a      	lsls	r2, r3, #16
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	619a      	str	r2, [r3, #24]
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bc80      	pop	{r7}
 8002c1a:	4770      	bx	lr

08002c1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b088      	sub	sp, #32
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e31d      	b.n	800326a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c2e:	4b94      	ldr	r3, [pc, #592]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 030c 	and.w	r3, r3, #12
 8002c36:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c38:	4b91      	ldr	r3, [pc, #580]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c40:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d07b      	beq.n	8002d46 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	d006      	beq.n	8002c62 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	2b0c      	cmp	r3, #12
 8002c58:	d10f      	bne.n	8002c7a <HAL_RCC_OscConfig+0x5e>
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c60:	d10b      	bne.n	8002c7a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c62:	4b87      	ldr	r3, [pc, #540]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d06a      	beq.n	8002d44 <HAL_RCC_OscConfig+0x128>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d166      	bne.n	8002d44 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e2f7      	b.n	800326a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d106      	bne.n	8002c90 <HAL_RCC_OscConfig+0x74>
 8002c82:	4b7f      	ldr	r3, [pc, #508]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a7e      	ldr	r2, [pc, #504]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c8c:	6013      	str	r3, [r2, #0]
 8002c8e:	e02d      	b.n	8002cec <HAL_RCC_OscConfig+0xd0>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10c      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x96>
 8002c98:	4b79      	ldr	r3, [pc, #484]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a78      	ldr	r2, [pc, #480]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca2:	6013      	str	r3, [r2, #0]
 8002ca4:	4b76      	ldr	r3, [pc, #472]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a75      	ldr	r2, [pc, #468]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cae:	6013      	str	r3, [r2, #0]
 8002cb0:	e01c      	b.n	8002cec <HAL_RCC_OscConfig+0xd0>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b05      	cmp	r3, #5
 8002cb8:	d10c      	bne.n	8002cd4 <HAL_RCC_OscConfig+0xb8>
 8002cba:	4b71      	ldr	r3, [pc, #452]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a70      	ldr	r2, [pc, #448]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cc4:	6013      	str	r3, [r2, #0]
 8002cc6:	4b6e      	ldr	r3, [pc, #440]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a6d      	ldr	r2, [pc, #436]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd0:	6013      	str	r3, [r2, #0]
 8002cd2:	e00b      	b.n	8002cec <HAL_RCC_OscConfig+0xd0>
 8002cd4:	4b6a      	ldr	r3, [pc, #424]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a69      	ldr	r2, [pc, #420]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cde:	6013      	str	r3, [r2, #0]
 8002ce0:	4b67      	ldr	r3, [pc, #412]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a66      	ldr	r2, [pc, #408]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d013      	beq.n	8002d1c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf4:	f7ff fbac 	bl	8002450 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cfc:	f7ff fba8 	bl	8002450 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b64      	cmp	r3, #100	; 0x64
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e2ad      	b.n	800326a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d0e:	4b5c      	ldr	r3, [pc, #368]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0f0      	beq.n	8002cfc <HAL_RCC_OscConfig+0xe0>
 8002d1a:	e014      	b.n	8002d46 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1c:	f7ff fb98 	bl	8002450 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d24:	f7ff fb94 	bl	8002450 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b64      	cmp	r3, #100	; 0x64
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e299      	b.n	800326a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d36:	4b52      	ldr	r3, [pc, #328]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1f0      	bne.n	8002d24 <HAL_RCC_OscConfig+0x108>
 8002d42:	e000      	b.n	8002d46 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d05a      	beq.n	8002e08 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	2b04      	cmp	r3, #4
 8002d56:	d005      	beq.n	8002d64 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	2b0c      	cmp	r3, #12
 8002d5c:	d119      	bne.n	8002d92 <HAL_RCC_OscConfig+0x176>
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d116      	bne.n	8002d92 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d64:	4b46      	ldr	r3, [pc, #280]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d005      	beq.n	8002d7c <HAL_RCC_OscConfig+0x160>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d001      	beq.n	8002d7c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e276      	b.n	800326a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d7c:	4b40      	ldr	r3, [pc, #256]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	021b      	lsls	r3, r3, #8
 8002d8a:	493d      	ldr	r1, [pc, #244]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d90:	e03a      	b.n	8002e08 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d020      	beq.n	8002ddc <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d9a:	4b3a      	ldr	r3, [pc, #232]	; (8002e84 <HAL_RCC_OscConfig+0x268>)
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da0:	f7ff fb56 	bl	8002450 <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002da8:	f7ff fb52 	bl	8002450 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e257      	b.n	800326a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dba:	4b31      	ldr	r3, [pc, #196]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0f0      	beq.n	8002da8 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc6:	4b2e      	ldr	r3, [pc, #184]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	021b      	lsls	r3, r3, #8
 8002dd4:	492a      	ldr	r1, [pc, #168]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	604b      	str	r3, [r1, #4]
 8002dda:	e015      	b.n	8002e08 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ddc:	4b29      	ldr	r3, [pc, #164]	; (8002e84 <HAL_RCC_OscConfig+0x268>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de2:	f7ff fb35 	bl	8002450 <HAL_GetTick>
 8002de6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002de8:	e008      	b.n	8002dfc <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dea:	f7ff fb31 	bl	8002450 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e236      	b.n	800326a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002dfc:	4b20      	ldr	r3, [pc, #128]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1f0      	bne.n	8002dea <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0310 	and.w	r3, r3, #16
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 80b8 	beq.w	8002f86 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d170      	bne.n	8002efe <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e1c:	4b18      	ldr	r3, [pc, #96]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d005      	beq.n	8002e34 <HAL_RCC_OscConfig+0x218>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e21a      	b.n	800326a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a1a      	ldr	r2, [r3, #32]
 8002e38:	4b11      	ldr	r3, [pc, #68]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d921      	bls.n	8002e88 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f000 fc7d 	bl	8003748 <RCC_SetFlashLatencyFromMSIRange>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e208      	b.n	800326a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e58:	4b09      	ldr	r3, [pc, #36]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	4906      	ldr	r1, [pc, #24]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e6a:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	061b      	lsls	r3, r3, #24
 8002e78:	4901      	ldr	r1, [pc, #4]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	604b      	str	r3, [r1, #4]
 8002e7e:	e020      	b.n	8002ec2 <HAL_RCC_OscConfig+0x2a6>
 8002e80:	40023800 	.word	0x40023800
 8002e84:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e88:	4b99      	ldr	r3, [pc, #612]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	4996      	ldr	r1, [pc, #600]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e9a:	4b95      	ldr	r3, [pc, #596]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	061b      	lsls	r3, r3, #24
 8002ea8:	4991      	ldr	r1, [pc, #580]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 fc48 	bl	8003748 <RCC_SetFlashLatencyFromMSIRange>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e1d3      	b.n	800326a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	0b5b      	lsrs	r3, r3, #13
 8002ec8:	3301      	adds	r3, #1
 8002eca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002ed2:	4a87      	ldr	r2, [pc, #540]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 8002ed4:	6892      	ldr	r2, [r2, #8]
 8002ed6:	0912      	lsrs	r2, r2, #4
 8002ed8:	f002 020f 	and.w	r2, r2, #15
 8002edc:	4985      	ldr	r1, [pc, #532]	; (80030f4 <HAL_RCC_OscConfig+0x4d8>)
 8002ede:	5c8a      	ldrb	r2, [r1, r2]
 8002ee0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002ee2:	4a85      	ldr	r2, [pc, #532]	; (80030f8 <HAL_RCC_OscConfig+0x4dc>)
 8002ee4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ee6:	4b85      	ldr	r3, [pc, #532]	; (80030fc <HAL_RCC_OscConfig+0x4e0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff fa64 	bl	80023b8 <HAL_InitTick>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ef4:	7bfb      	ldrb	r3, [r7, #15]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d045      	beq.n	8002f86 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002efa:	7bfb      	ldrb	r3, [r7, #15]
 8002efc:	e1b5      	b.n	800326a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d029      	beq.n	8002f5a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f06:	4b7e      	ldr	r3, [pc, #504]	; (8003100 <HAL_RCC_OscConfig+0x4e4>)
 8002f08:	2201      	movs	r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0c:	f7ff faa0 	bl	8002450 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f14:	f7ff fa9c 	bl	8002450 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e1a1      	b.n	800326a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002f26:	4b72      	ldr	r3, [pc, #456]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0f0      	beq.n	8002f14 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f32:	4b6f      	ldr	r3, [pc, #444]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	496c      	ldr	r1, [pc, #432]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f44:	4b6a      	ldr	r3, [pc, #424]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	061b      	lsls	r3, r3, #24
 8002f52:	4967      	ldr	r1, [pc, #412]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	604b      	str	r3, [r1, #4]
 8002f58:	e015      	b.n	8002f86 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f5a:	4b69      	ldr	r3, [pc, #420]	; (8003100 <HAL_RCC_OscConfig+0x4e4>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f60:	f7ff fa76 	bl	8002450 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f68:	f7ff fa72 	bl	8002450 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e177      	b.n	800326a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002f7a:	4b5d      	ldr	r3, [pc, #372]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f0      	bne.n	8002f68 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0308 	and.w	r3, r3, #8
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d030      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d016      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f9a:	4b5a      	ldr	r3, [pc, #360]	; (8003104 <HAL_RCC_OscConfig+0x4e8>)
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa0:	f7ff fa56 	bl	8002450 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fa8:	f7ff fa52 	bl	8002450 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e157      	b.n	800326a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002fba:	4b4d      	ldr	r3, [pc, #308]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 8002fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0f0      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x38c>
 8002fc6:	e015      	b.n	8002ff4 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fc8:	4b4e      	ldr	r3, [pc, #312]	; (8003104 <HAL_RCC_OscConfig+0x4e8>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fce:	f7ff fa3f 	bl	8002450 <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002fd4:	e008      	b.n	8002fe8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fd6:	f7ff fa3b 	bl	8002450 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e140      	b.n	800326a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002fe8:	4b41      	ldr	r3, [pc, #260]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 8002fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1f0      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f000 80b5 	beq.w	800316c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003002:	2300      	movs	r3, #0
 8003004:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003006:	4b3a      	ldr	r3, [pc, #232]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10d      	bne.n	800302e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003012:	4b37      	ldr	r3, [pc, #220]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	4a36      	ldr	r2, [pc, #216]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 8003018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800301c:	6253      	str	r3, [r2, #36]	; 0x24
 800301e:	4b34      	ldr	r3, [pc, #208]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 8003020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003026:	60bb      	str	r3, [r7, #8]
 8003028:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800302a:	2301      	movs	r3, #1
 800302c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800302e:	4b36      	ldr	r3, [pc, #216]	; (8003108 <HAL_RCC_OscConfig+0x4ec>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003036:	2b00      	cmp	r3, #0
 8003038:	d118      	bne.n	800306c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800303a:	4b33      	ldr	r3, [pc, #204]	; (8003108 <HAL_RCC_OscConfig+0x4ec>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a32      	ldr	r2, [pc, #200]	; (8003108 <HAL_RCC_OscConfig+0x4ec>)
 8003040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003044:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003046:	f7ff fa03 	bl	8002450 <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800304c:	e008      	b.n	8003060 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800304e:	f7ff f9ff 	bl	8002450 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b64      	cmp	r3, #100	; 0x64
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e104      	b.n	800326a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003060:	4b29      	ldr	r3, [pc, #164]	; (8003108 <HAL_RCC_OscConfig+0x4ec>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003068:	2b00      	cmp	r3, #0
 800306a:	d0f0      	beq.n	800304e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d106      	bne.n	8003082 <HAL_RCC_OscConfig+0x466>
 8003074:	4b1e      	ldr	r3, [pc, #120]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 8003076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003078:	4a1d      	ldr	r2, [pc, #116]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 800307a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800307e:	6353      	str	r3, [r2, #52]	; 0x34
 8003080:	e02d      	b.n	80030de <HAL_RCC_OscConfig+0x4c2>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10c      	bne.n	80030a4 <HAL_RCC_OscConfig+0x488>
 800308a:	4b19      	ldr	r3, [pc, #100]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 800308c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800308e:	4a18      	ldr	r2, [pc, #96]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 8003090:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003094:	6353      	str	r3, [r2, #52]	; 0x34
 8003096:	4b16      	ldr	r3, [pc, #88]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 8003098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800309a:	4a15      	ldr	r2, [pc, #84]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 800309c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030a0:	6353      	str	r3, [r2, #52]	; 0x34
 80030a2:	e01c      	b.n	80030de <HAL_RCC_OscConfig+0x4c2>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	2b05      	cmp	r3, #5
 80030aa:	d10c      	bne.n	80030c6 <HAL_RCC_OscConfig+0x4aa>
 80030ac:	4b10      	ldr	r3, [pc, #64]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 80030ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030b0:	4a0f      	ldr	r2, [pc, #60]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 80030b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030b6:	6353      	str	r3, [r2, #52]	; 0x34
 80030b8:	4b0d      	ldr	r3, [pc, #52]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 80030ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030bc:	4a0c      	ldr	r2, [pc, #48]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 80030be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c2:	6353      	str	r3, [r2, #52]	; 0x34
 80030c4:	e00b      	b.n	80030de <HAL_RCC_OscConfig+0x4c2>
 80030c6:	4b0a      	ldr	r3, [pc, #40]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 80030c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ca:	4a09      	ldr	r2, [pc, #36]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 80030cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030d0:	6353      	str	r3, [r2, #52]	; 0x34
 80030d2:	4b07      	ldr	r3, [pc, #28]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 80030d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d6:	4a06      	ldr	r2, [pc, #24]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 80030d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030dc:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d024      	beq.n	8003130 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030e6:	f7ff f9b3 	bl	8002450 <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030ec:	e019      	b.n	8003122 <HAL_RCC_OscConfig+0x506>
 80030ee:	bf00      	nop
 80030f0:	40023800 	.word	0x40023800
 80030f4:	08005c3c 	.word	0x08005c3c
 80030f8:	20000428 	.word	0x20000428
 80030fc:	2000042c 	.word	0x2000042c
 8003100:	42470020 	.word	0x42470020
 8003104:	42470680 	.word	0x42470680
 8003108:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800310c:	f7ff f9a0 	bl	8002450 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	f241 3288 	movw	r2, #5000	; 0x1388
 800311a:	4293      	cmp	r3, r2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e0a3      	b.n	800326a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003122:	4b54      	ldr	r3, [pc, #336]	; (8003274 <HAL_RCC_OscConfig+0x658>)
 8003124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003126:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0ee      	beq.n	800310c <HAL_RCC_OscConfig+0x4f0>
 800312e:	e014      	b.n	800315a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003130:	f7ff f98e 	bl	8002450 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003136:	e00a      	b.n	800314e <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003138:	f7ff f98a 	bl	8002450 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	f241 3288 	movw	r2, #5000	; 0x1388
 8003146:	4293      	cmp	r3, r2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e08d      	b.n	800326a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800314e:	4b49      	ldr	r3, [pc, #292]	; (8003274 <HAL_RCC_OscConfig+0x658>)
 8003150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003152:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1ee      	bne.n	8003138 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800315a:	7ffb      	ldrb	r3, [r7, #31]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d105      	bne.n	800316c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003160:	4b44      	ldr	r3, [pc, #272]	; (8003274 <HAL_RCC_OscConfig+0x658>)
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	4a43      	ldr	r2, [pc, #268]	; (8003274 <HAL_RCC_OscConfig+0x658>)
 8003166:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800316a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003170:	2b00      	cmp	r3, #0
 8003172:	d079      	beq.n	8003268 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	2b0c      	cmp	r3, #12
 8003178:	d056      	beq.n	8003228 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	2b02      	cmp	r3, #2
 8003180:	d13b      	bne.n	80031fa <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003182:	4b3d      	ldr	r3, [pc, #244]	; (8003278 <HAL_RCC_OscConfig+0x65c>)
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003188:	f7ff f962 	bl	8002450 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003190:	f7ff f95e 	bl	8002450 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e063      	b.n	800326a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031a2:	4b34      	ldr	r3, [pc, #208]	; (8003274 <HAL_RCC_OscConfig+0x658>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1f0      	bne.n	8003190 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031ae:	4b31      	ldr	r3, [pc, #196]	; (8003274 <HAL_RCC_OscConfig+0x658>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031be:	4319      	orrs	r1, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c4:	430b      	orrs	r3, r1
 80031c6:	492b      	ldr	r1, [pc, #172]	; (8003274 <HAL_RCC_OscConfig+0x658>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031cc:	4b2a      	ldr	r3, [pc, #168]	; (8003278 <HAL_RCC_OscConfig+0x65c>)
 80031ce:	2201      	movs	r2, #1
 80031d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d2:	f7ff f93d 	bl	8002450 <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031d8:	e008      	b.n	80031ec <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031da:	f7ff f939 	bl	8002450 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e03e      	b.n	800326a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031ec:	4b21      	ldr	r3, [pc, #132]	; (8003274 <HAL_RCC_OscConfig+0x658>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0f0      	beq.n	80031da <HAL_RCC_OscConfig+0x5be>
 80031f8:	e036      	b.n	8003268 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031fa:	4b1f      	ldr	r3, [pc, #124]	; (8003278 <HAL_RCC_OscConfig+0x65c>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003200:	f7ff f926 	bl	8002450 <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003208:	f7ff f922 	bl	8002450 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e027      	b.n	800326a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800321a:	4b16      	ldr	r3, [pc, #88]	; (8003274 <HAL_RCC_OscConfig+0x658>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1f0      	bne.n	8003208 <HAL_RCC_OscConfig+0x5ec>
 8003226:	e01f      	b.n	8003268 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322c:	2b01      	cmp	r3, #1
 800322e:	d101      	bne.n	8003234 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e01a      	b.n	800326a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003234:	4b0f      	ldr	r3, [pc, #60]	; (8003274 <HAL_RCC_OscConfig+0x658>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003244:	429a      	cmp	r2, r3
 8003246:	d10d      	bne.n	8003264 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003252:	429a      	cmp	r2, r3
 8003254:	d106      	bne.n	8003264 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003260:	429a      	cmp	r2, r3
 8003262:	d001      	beq.n	8003268 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e000      	b.n	800326a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3720      	adds	r7, #32
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	40023800 	.word	0x40023800
 8003278:	42470060 	.word	0x42470060

0800327c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e11a      	b.n	80034c6 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003290:	4b8f      	ldr	r3, [pc, #572]	; (80034d0 <HAL_RCC_ClockConfig+0x254>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	429a      	cmp	r2, r3
 800329c:	d919      	bls.n	80032d2 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d105      	bne.n	80032b0 <HAL_RCC_ClockConfig+0x34>
 80032a4:	4b8a      	ldr	r3, [pc, #552]	; (80034d0 <HAL_RCC_ClockConfig+0x254>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a89      	ldr	r2, [pc, #548]	; (80034d0 <HAL_RCC_ClockConfig+0x254>)
 80032aa:	f043 0304 	orr.w	r3, r3, #4
 80032ae:	6013      	str	r3, [r2, #0]
 80032b0:	4b87      	ldr	r3, [pc, #540]	; (80034d0 <HAL_RCC_ClockConfig+0x254>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f023 0201 	bic.w	r2, r3, #1
 80032b8:	4985      	ldr	r1, [pc, #532]	; (80034d0 <HAL_RCC_ClockConfig+0x254>)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	4313      	orrs	r3, r2
 80032be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c0:	4b83      	ldr	r3, [pc, #524]	; (80034d0 <HAL_RCC_ClockConfig+0x254>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d001      	beq.n	80032d2 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e0f9      	b.n	80034c6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d008      	beq.n	80032f0 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032de:	4b7d      	ldr	r3, [pc, #500]	; (80034d4 <HAL_RCC_ClockConfig+0x258>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	497a      	ldr	r1, [pc, #488]	; (80034d4 <HAL_RCC_ClockConfig+0x258>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 808e 	beq.w	800341a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	2b02      	cmp	r3, #2
 8003304:	d107      	bne.n	8003316 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003306:	4b73      	ldr	r3, [pc, #460]	; (80034d4 <HAL_RCC_ClockConfig+0x258>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d121      	bne.n	8003356 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e0d7      	b.n	80034c6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b03      	cmp	r3, #3
 800331c:	d107      	bne.n	800332e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800331e:	4b6d      	ldr	r3, [pc, #436]	; (80034d4 <HAL_RCC_ClockConfig+0x258>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d115      	bne.n	8003356 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e0cb      	b.n	80034c6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d107      	bne.n	8003346 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003336:	4b67      	ldr	r3, [pc, #412]	; (80034d4 <HAL_RCC_ClockConfig+0x258>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d109      	bne.n	8003356 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e0bf      	b.n	80034c6 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003346:	4b63      	ldr	r3, [pc, #396]	; (80034d4 <HAL_RCC_ClockConfig+0x258>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e0b7      	b.n	80034c6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003356:	4b5f      	ldr	r3, [pc, #380]	; (80034d4 <HAL_RCC_ClockConfig+0x258>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f023 0203 	bic.w	r2, r3, #3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	495c      	ldr	r1, [pc, #368]	; (80034d4 <HAL_RCC_ClockConfig+0x258>)
 8003364:	4313      	orrs	r3, r2
 8003366:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003368:	f7ff f872 	bl	8002450 <HAL_GetTick>
 800336c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	2b02      	cmp	r3, #2
 8003374:	d112      	bne.n	800339c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003376:	e00a      	b.n	800338e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003378:	f7ff f86a 	bl	8002450 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	f241 3288 	movw	r2, #5000	; 0x1388
 8003386:	4293      	cmp	r3, r2
 8003388:	d901      	bls.n	800338e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e09b      	b.n	80034c6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800338e:	4b51      	ldr	r3, [pc, #324]	; (80034d4 <HAL_RCC_ClockConfig+0x258>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 030c 	and.w	r3, r3, #12
 8003396:	2b08      	cmp	r3, #8
 8003398:	d1ee      	bne.n	8003378 <HAL_RCC_ClockConfig+0xfc>
 800339a:	e03e      	b.n	800341a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b03      	cmp	r3, #3
 80033a2:	d112      	bne.n	80033ca <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033a4:	e00a      	b.n	80033bc <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033a6:	f7ff f853 	bl	8002450 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e084      	b.n	80034c6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033bc:	4b45      	ldr	r3, [pc, #276]	; (80034d4 <HAL_RCC_ClockConfig+0x258>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f003 030c 	and.w	r3, r3, #12
 80033c4:	2b0c      	cmp	r3, #12
 80033c6:	d1ee      	bne.n	80033a6 <HAL_RCC_ClockConfig+0x12a>
 80033c8:	e027      	b.n	800341a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d11d      	bne.n	800340e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80033d2:	e00a      	b.n	80033ea <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033d4:	f7ff f83c 	bl	8002450 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e06d      	b.n	80034c6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80033ea:	4b3a      	ldr	r3, [pc, #232]	; (80034d4 <HAL_RCC_ClockConfig+0x258>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f003 030c 	and.w	r3, r3, #12
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	d1ee      	bne.n	80033d4 <HAL_RCC_ClockConfig+0x158>
 80033f6:	e010      	b.n	800341a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033f8:	f7ff f82a 	bl	8002450 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	f241 3288 	movw	r2, #5000	; 0x1388
 8003406:	4293      	cmp	r3, r2
 8003408:	d901      	bls.n	800340e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e05b      	b.n	80034c6 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800340e:	4b31      	ldr	r3, [pc, #196]	; (80034d4 <HAL_RCC_ClockConfig+0x258>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 030c 	and.w	r3, r3, #12
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1ee      	bne.n	80033f8 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800341a:	4b2d      	ldr	r3, [pc, #180]	; (80034d0 <HAL_RCC_ClockConfig+0x254>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	429a      	cmp	r2, r3
 8003426:	d219      	bcs.n	800345c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d105      	bne.n	800343a <HAL_RCC_ClockConfig+0x1be>
 800342e:	4b28      	ldr	r3, [pc, #160]	; (80034d0 <HAL_RCC_ClockConfig+0x254>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a27      	ldr	r2, [pc, #156]	; (80034d0 <HAL_RCC_ClockConfig+0x254>)
 8003434:	f043 0304 	orr.w	r3, r3, #4
 8003438:	6013      	str	r3, [r2, #0]
 800343a:	4b25      	ldr	r3, [pc, #148]	; (80034d0 <HAL_RCC_ClockConfig+0x254>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f023 0201 	bic.w	r2, r3, #1
 8003442:	4923      	ldr	r1, [pc, #140]	; (80034d0 <HAL_RCC_ClockConfig+0x254>)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	4313      	orrs	r3, r2
 8003448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800344a:	4b21      	ldr	r3, [pc, #132]	; (80034d0 <HAL_RCC_ClockConfig+0x254>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	429a      	cmp	r2, r3
 8003456:	d001      	beq.n	800345c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e034      	b.n	80034c6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	d008      	beq.n	800347a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003468:	4b1a      	ldr	r3, [pc, #104]	; (80034d4 <HAL_RCC_ClockConfig+0x258>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	4917      	ldr	r1, [pc, #92]	; (80034d4 <HAL_RCC_ClockConfig+0x258>)
 8003476:	4313      	orrs	r3, r2
 8003478:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0308 	and.w	r3, r3, #8
 8003482:	2b00      	cmp	r3, #0
 8003484:	d009      	beq.n	800349a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003486:	4b13      	ldr	r3, [pc, #76]	; (80034d4 <HAL_RCC_ClockConfig+0x258>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	490f      	ldr	r1, [pc, #60]	; (80034d4 <HAL_RCC_ClockConfig+0x258>)
 8003496:	4313      	orrs	r3, r2
 8003498:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800349a:	f000 f823 	bl	80034e4 <HAL_RCC_GetSysClockFreq>
 800349e:	4602      	mov	r2, r0
 80034a0:	4b0c      	ldr	r3, [pc, #48]	; (80034d4 <HAL_RCC_ClockConfig+0x258>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	091b      	lsrs	r3, r3, #4
 80034a6:	f003 030f 	and.w	r3, r3, #15
 80034aa:	490b      	ldr	r1, [pc, #44]	; (80034d8 <HAL_RCC_ClockConfig+0x25c>)
 80034ac:	5ccb      	ldrb	r3, [r1, r3]
 80034ae:	fa22 f303 	lsr.w	r3, r2, r3
 80034b2:	4a0a      	ldr	r2, [pc, #40]	; (80034dc <HAL_RCC_ClockConfig+0x260>)
 80034b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80034b6:	4b0a      	ldr	r3, [pc, #40]	; (80034e0 <HAL_RCC_ClockConfig+0x264>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fe ff7c 	bl	80023b8 <HAL_InitTick>
 80034c0:	4603      	mov	r3, r0
 80034c2:	72fb      	strb	r3, [r7, #11]

  return status;
 80034c4:	7afb      	ldrb	r3, [r7, #11]
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	40023c00 	.word	0x40023c00
 80034d4:	40023800 	.word	0x40023800
 80034d8:	08005c3c 	.word	0x08005c3c
 80034dc:	20000428 	.word	0x20000428
 80034e0:	2000042c 	.word	0x2000042c

080034e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034e8:	b092      	sub	sp, #72	; 0x48
 80034ea:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80034ec:	4b79      	ldr	r3, [pc, #484]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034f4:	f003 030c 	and.w	r3, r3, #12
 80034f8:	2b0c      	cmp	r3, #12
 80034fa:	d00d      	beq.n	8003518 <HAL_RCC_GetSysClockFreq+0x34>
 80034fc:	2b0c      	cmp	r3, #12
 80034fe:	f200 80d5 	bhi.w	80036ac <HAL_RCC_GetSysClockFreq+0x1c8>
 8003502:	2b04      	cmp	r3, #4
 8003504:	d002      	beq.n	800350c <HAL_RCC_GetSysClockFreq+0x28>
 8003506:	2b08      	cmp	r3, #8
 8003508:	d003      	beq.n	8003512 <HAL_RCC_GetSysClockFreq+0x2e>
 800350a:	e0cf      	b.n	80036ac <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800350c:	4b72      	ldr	r3, [pc, #456]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800350e:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003510:	e0da      	b.n	80036c8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003512:	4b72      	ldr	r3, [pc, #456]	; (80036dc <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003514:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003516:	e0d7      	b.n	80036c8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800351a:	0c9b      	lsrs	r3, r3, #18
 800351c:	f003 020f 	and.w	r2, r3, #15
 8003520:	4b6f      	ldr	r3, [pc, #444]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003522:	5c9b      	ldrb	r3, [r3, r2]
 8003524:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003528:	0d9b      	lsrs	r3, r3, #22
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	3301      	adds	r3, #1
 8003530:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003532:	4b68      	ldr	r3, [pc, #416]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d05d      	beq.n	80035fa <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800353e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003540:	2200      	movs	r2, #0
 8003542:	4618      	mov	r0, r3
 8003544:	4611      	mov	r1, r2
 8003546:	4604      	mov	r4, r0
 8003548:	460d      	mov	r5, r1
 800354a:	4622      	mov	r2, r4
 800354c:	462b      	mov	r3, r5
 800354e:	f04f 0000 	mov.w	r0, #0
 8003552:	f04f 0100 	mov.w	r1, #0
 8003556:	0159      	lsls	r1, r3, #5
 8003558:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800355c:	0150      	lsls	r0, r2, #5
 800355e:	4602      	mov	r2, r0
 8003560:	460b      	mov	r3, r1
 8003562:	4621      	mov	r1, r4
 8003564:	1a51      	subs	r1, r2, r1
 8003566:	6139      	str	r1, [r7, #16]
 8003568:	4629      	mov	r1, r5
 800356a:	eb63 0301 	sbc.w	r3, r3, r1
 800356e:	617b      	str	r3, [r7, #20]
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	f04f 0300 	mov.w	r3, #0
 8003578:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800357c:	4659      	mov	r1, fp
 800357e:	018b      	lsls	r3, r1, #6
 8003580:	4651      	mov	r1, sl
 8003582:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003586:	4651      	mov	r1, sl
 8003588:	018a      	lsls	r2, r1, #6
 800358a:	46d4      	mov	ip, sl
 800358c:	ebb2 080c 	subs.w	r8, r2, ip
 8003590:	4659      	mov	r1, fp
 8003592:	eb63 0901 	sbc.w	r9, r3, r1
 8003596:	f04f 0200 	mov.w	r2, #0
 800359a:	f04f 0300 	mov.w	r3, #0
 800359e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035aa:	4690      	mov	r8, r2
 80035ac:	4699      	mov	r9, r3
 80035ae:	4623      	mov	r3, r4
 80035b0:	eb18 0303 	adds.w	r3, r8, r3
 80035b4:	60bb      	str	r3, [r7, #8]
 80035b6:	462b      	mov	r3, r5
 80035b8:	eb49 0303 	adc.w	r3, r9, r3
 80035bc:	60fb      	str	r3, [r7, #12]
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	f04f 0300 	mov.w	r3, #0
 80035c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80035ca:	4629      	mov	r1, r5
 80035cc:	024b      	lsls	r3, r1, #9
 80035ce:	4620      	mov	r0, r4
 80035d0:	4629      	mov	r1, r5
 80035d2:	4604      	mov	r4, r0
 80035d4:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80035d8:	4601      	mov	r1, r0
 80035da:	024a      	lsls	r2, r1, #9
 80035dc:	4610      	mov	r0, r2
 80035de:	4619      	mov	r1, r3
 80035e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035e2:	2200      	movs	r2, #0
 80035e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80035e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035ec:	f7fc fdd8 	bl	80001a0 <__aeabi_uldivmod>
 80035f0:	4602      	mov	r2, r0
 80035f2:	460b      	mov	r3, r1
 80035f4:	4613      	mov	r3, r2
 80035f6:	647b      	str	r3, [r7, #68]	; 0x44
 80035f8:	e055      	b.n	80036a6 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80035fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035fc:	2200      	movs	r2, #0
 80035fe:	623b      	str	r3, [r7, #32]
 8003600:	627a      	str	r2, [r7, #36]	; 0x24
 8003602:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003606:	4642      	mov	r2, r8
 8003608:	464b      	mov	r3, r9
 800360a:	f04f 0000 	mov.w	r0, #0
 800360e:	f04f 0100 	mov.w	r1, #0
 8003612:	0159      	lsls	r1, r3, #5
 8003614:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003618:	0150      	lsls	r0, r2, #5
 800361a:	4602      	mov	r2, r0
 800361c:	460b      	mov	r3, r1
 800361e:	46c4      	mov	ip, r8
 8003620:	ebb2 0a0c 	subs.w	sl, r2, ip
 8003624:	4640      	mov	r0, r8
 8003626:	4649      	mov	r1, r9
 8003628:	468c      	mov	ip, r1
 800362a:	eb63 0b0c 	sbc.w	fp, r3, ip
 800362e:	f04f 0200 	mov.w	r2, #0
 8003632:	f04f 0300 	mov.w	r3, #0
 8003636:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800363a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800363e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003642:	ebb2 040a 	subs.w	r4, r2, sl
 8003646:	eb63 050b 	sbc.w	r5, r3, fp
 800364a:	f04f 0200 	mov.w	r2, #0
 800364e:	f04f 0300 	mov.w	r3, #0
 8003652:	00eb      	lsls	r3, r5, #3
 8003654:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003658:	00e2      	lsls	r2, r4, #3
 800365a:	4614      	mov	r4, r2
 800365c:	461d      	mov	r5, r3
 800365e:	4603      	mov	r3, r0
 8003660:	18e3      	adds	r3, r4, r3
 8003662:	603b      	str	r3, [r7, #0]
 8003664:	460b      	mov	r3, r1
 8003666:	eb45 0303 	adc.w	r3, r5, r3
 800366a:	607b      	str	r3, [r7, #4]
 800366c:	f04f 0200 	mov.w	r2, #0
 8003670:	f04f 0300 	mov.w	r3, #0
 8003674:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003678:	4629      	mov	r1, r5
 800367a:	028b      	lsls	r3, r1, #10
 800367c:	4620      	mov	r0, r4
 800367e:	4629      	mov	r1, r5
 8003680:	4604      	mov	r4, r0
 8003682:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003686:	4601      	mov	r1, r0
 8003688:	028a      	lsls	r2, r1, #10
 800368a:	4610      	mov	r0, r2
 800368c:	4619      	mov	r1, r3
 800368e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003690:	2200      	movs	r2, #0
 8003692:	61bb      	str	r3, [r7, #24]
 8003694:	61fa      	str	r2, [r7, #28]
 8003696:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800369a:	f7fc fd81 	bl	80001a0 <__aeabi_uldivmod>
 800369e:	4602      	mov	r2, r0
 80036a0:	460b      	mov	r3, r1
 80036a2:	4613      	mov	r3, r2
 80036a4:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 80036a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036a8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80036aa:	e00d      	b.n	80036c8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80036ac:	4b09      	ldr	r3, [pc, #36]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	0b5b      	lsrs	r3, r3, #13
 80036b2:	f003 0307 	and.w	r3, r3, #7
 80036b6:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80036b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ba:	3301      	adds	r3, #1
 80036bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80036c6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3748      	adds	r7, #72	; 0x48
 80036ce:	46bd      	mov	sp, r7
 80036d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036d4:	40023800 	.word	0x40023800
 80036d8:	00f42400 	.word	0x00f42400
 80036dc:	007a1200 	.word	0x007a1200
 80036e0:	08005c30 	.word	0x08005c30

080036e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036e8:	4b02      	ldr	r3, [pc, #8]	; (80036f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80036ea:	681b      	ldr	r3, [r3, #0]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bc80      	pop	{r7}
 80036f2:	4770      	bx	lr
 80036f4:	20000428 	.word	0x20000428

080036f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036fc:	f7ff fff2 	bl	80036e4 <HAL_RCC_GetHCLKFreq>
 8003700:	4602      	mov	r2, r0
 8003702:	4b05      	ldr	r3, [pc, #20]	; (8003718 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	0a1b      	lsrs	r3, r3, #8
 8003708:	f003 0307 	and.w	r3, r3, #7
 800370c:	4903      	ldr	r1, [pc, #12]	; (800371c <HAL_RCC_GetPCLK1Freq+0x24>)
 800370e:	5ccb      	ldrb	r3, [r1, r3]
 8003710:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003714:	4618      	mov	r0, r3
 8003716:	bd80      	pop	{r7, pc}
 8003718:	40023800 	.word	0x40023800
 800371c:	08005c4c 	.word	0x08005c4c

08003720 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003724:	f7ff ffde 	bl	80036e4 <HAL_RCC_GetHCLKFreq>
 8003728:	4602      	mov	r2, r0
 800372a:	4b05      	ldr	r3, [pc, #20]	; (8003740 <HAL_RCC_GetPCLK2Freq+0x20>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	0adb      	lsrs	r3, r3, #11
 8003730:	f003 0307 	and.w	r3, r3, #7
 8003734:	4903      	ldr	r1, [pc, #12]	; (8003744 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003736:	5ccb      	ldrb	r3, [r1, r3]
 8003738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800373c:	4618      	mov	r0, r3
 800373e:	bd80      	pop	{r7, pc}
 8003740:	40023800 	.word	0x40023800
 8003744:	08005c4c 	.word	0x08005c4c

08003748 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003748:	b480      	push	{r7}
 800374a:	b087      	sub	sp, #28
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003750:	2300      	movs	r3, #0
 8003752:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003754:	4b29      	ldr	r3, [pc, #164]	; (80037fc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d12c      	bne.n	80037ba <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003760:	4b26      	ldr	r3, [pc, #152]	; (80037fc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d005      	beq.n	8003778 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800376c:	4b24      	ldr	r3, [pc, #144]	; (8003800 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003774:	617b      	str	r3, [r7, #20]
 8003776:	e016      	b.n	80037a6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003778:	4b20      	ldr	r3, [pc, #128]	; (80037fc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	4a1f      	ldr	r2, [pc, #124]	; (80037fc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800377e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003782:	6253      	str	r3, [r2, #36]	; 0x24
 8003784:	4b1d      	ldr	r3, [pc, #116]	; (80037fc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800378c:	60fb      	str	r3, [r7, #12]
 800378e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003790:	4b1b      	ldr	r3, [pc, #108]	; (8003800 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003798:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800379a:	4b18      	ldr	r3, [pc, #96]	; (80037fc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	4a17      	ldr	r2, [pc, #92]	; (80037fc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80037a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037a4:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80037ac:	d105      	bne.n	80037ba <RCC_SetFlashLatencyFromMSIRange+0x72>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80037b4:	d101      	bne.n	80037ba <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80037b6:	2301      	movs	r3, #1
 80037b8:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d105      	bne.n	80037cc <RCC_SetFlashLatencyFromMSIRange+0x84>
 80037c0:	4b10      	ldr	r3, [pc, #64]	; (8003804 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a0f      	ldr	r2, [pc, #60]	; (8003804 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037c6:	f043 0304 	orr.w	r3, r3, #4
 80037ca:	6013      	str	r3, [r2, #0]
 80037cc:	4b0d      	ldr	r3, [pc, #52]	; (8003804 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f023 0201 	bic.w	r2, r3, #1
 80037d4:	490b      	ldr	r1, [pc, #44]	; (8003804 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	4313      	orrs	r3, r2
 80037da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80037dc:	4b09      	ldr	r3, [pc, #36]	; (8003804 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d001      	beq.n	80037ee <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e000      	b.n	80037f0 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	371c      	adds	r7, #28
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bc80      	pop	{r7}
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	40023800 	.word	0x40023800
 8003800:	40007000 	.word	0x40007000
 8003804:	40023c00 	.word	0x40023c00

08003808 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e042      	b.n	80038a0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d106      	bne.n	8003834 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7fe fae8 	bl	8001e04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2224      	movs	r2, #36	; 0x24
 8003838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68da      	ldr	r2, [r3, #12]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800384a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 fb89 	bl	8003f64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	691a      	ldr	r2, [r3, #16]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003860:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	695a      	ldr	r2, [r3, #20]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003870:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68da      	ldr	r2, [r3, #12]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003880:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2220      	movs	r2, #32
 800388c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2220      	movs	r2, #32
 8003894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b08a      	sub	sp, #40	; 0x28
 80038ac:	af02      	add	r7, sp, #8
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	603b      	str	r3, [r7, #0]
 80038b4:	4613      	mov	r3, r2
 80038b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038b8:	2300      	movs	r3, #0
 80038ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b20      	cmp	r3, #32
 80038c6:	d16d      	bne.n	80039a4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d002      	beq.n	80038d4 <HAL_UART_Transmit+0x2c>
 80038ce:	88fb      	ldrh	r3, [r7, #6]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d101      	bne.n	80038d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e066      	b.n	80039a6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2221      	movs	r2, #33	; 0x21
 80038e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038e6:	f7fe fdb3 	bl	8002450 <HAL_GetTick>
 80038ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	88fa      	ldrh	r2, [r7, #6]
 80038f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	88fa      	ldrh	r2, [r7, #6]
 80038f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003900:	d108      	bne.n	8003914 <HAL_UART_Transmit+0x6c>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d104      	bne.n	8003914 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800390a:	2300      	movs	r3, #0
 800390c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	61bb      	str	r3, [r7, #24]
 8003912:	e003      	b.n	800391c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003918:	2300      	movs	r3, #0
 800391a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800391c:	e02a      	b.n	8003974 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	2200      	movs	r2, #0
 8003926:	2180      	movs	r1, #128	; 0x80
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 f989 	bl	8003c40 <UART_WaitOnFlagUntilTimeout>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e036      	b.n	80039a6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10b      	bne.n	8003956 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	881b      	ldrh	r3, [r3, #0]
 8003942:	461a      	mov	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800394c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	3302      	adds	r3, #2
 8003952:	61bb      	str	r3, [r7, #24]
 8003954:	e007      	b.n	8003966 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	781a      	ldrb	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	3301      	adds	r3, #1
 8003964:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800396a:	b29b      	uxth	r3, r3
 800396c:	3b01      	subs	r3, #1
 800396e:	b29a      	uxth	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003978:	b29b      	uxth	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1cf      	bne.n	800391e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	9300      	str	r3, [sp, #0]
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	2200      	movs	r2, #0
 8003986:	2140      	movs	r1, #64	; 0x40
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f000 f959 	bl	8003c40 <UART_WaitOnFlagUntilTimeout>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d001      	beq.n	8003998 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e006      	b.n	80039a6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2220      	movs	r2, #32
 800399c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80039a0:	2300      	movs	r3, #0
 80039a2:	e000      	b.n	80039a6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80039a4:	2302      	movs	r3, #2
  }
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3720      	adds	r7, #32
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b084      	sub	sp, #16
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	60f8      	str	r0, [r7, #12]
 80039b6:	60b9      	str	r1, [r7, #8]
 80039b8:	4613      	mov	r3, r2
 80039ba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	2b20      	cmp	r3, #32
 80039c6:	d112      	bne.n	80039ee <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <HAL_UART_Receive_DMA+0x26>
 80039ce:	88fb      	ldrh	r3, [r7, #6]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d101      	bne.n	80039d8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e00b      	b.n	80039f0 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80039de:	88fb      	ldrh	r3, [r7, #6]
 80039e0:	461a      	mov	r2, r3
 80039e2:	68b9      	ldr	r1, [r7, #8]
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 f999 	bl	8003d1c <UART_Start_Receive_DMA>
 80039ea:	4603      	mov	r3, r0
 80039ec:	e000      	b.n	80039f0 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80039ee:	2302      	movs	r3, #2
  }
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bc80      	pop	{r7}
 8003a08:	4770      	bx	lr

08003a0a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bc80      	pop	{r7}
 8003a1a:	4770      	bx	lr

08003a1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bc80      	pop	{r7}
 8003a2c:	4770      	bx	lr

08003a2e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b083      	sub	sp, #12
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
 8003a36:	460b      	mov	r3, r1
 8003a38:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr

08003a44 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b09c      	sub	sp, #112	; 0x70
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a50:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0320 	and.w	r3, r3, #32
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d172      	bne.n	8003b46 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a62:	2200      	movs	r2, #0
 8003a64:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	330c      	adds	r3, #12
 8003a6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a70:	e853 3f00 	ldrex	r3, [r3]
 8003a74:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	330c      	adds	r3, #12
 8003a84:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003a86:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a88:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a8a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a8e:	e841 2300 	strex	r3, r2, [r1]
 8003a92:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1e5      	bne.n	8003a66 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	3314      	adds	r3, #20
 8003aa0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa4:	e853 3f00 	ldrex	r3, [r3]
 8003aa8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aac:	f023 0301 	bic.w	r3, r3, #1
 8003ab0:	667b      	str	r3, [r7, #100]	; 0x64
 8003ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	3314      	adds	r3, #20
 8003ab8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003aba:	647a      	str	r2, [r7, #68]	; 0x44
 8003abc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003abe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ac0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ac2:	e841 2300 	strex	r3, r2, [r1]
 8003ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1e5      	bne.n	8003a9a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	3314      	adds	r3, #20
 8003ad4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	e853 3f00 	ldrex	r3, [r3]
 8003adc:	623b      	str	r3, [r7, #32]
   return(result);
 8003ade:	6a3b      	ldr	r3, [r7, #32]
 8003ae0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ae4:	663b      	str	r3, [r7, #96]	; 0x60
 8003ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	3314      	adds	r3, #20
 8003aec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003aee:	633a      	str	r2, [r7, #48]	; 0x30
 8003af0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003af4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003af6:	e841 2300 	strex	r3, r2, [r1]
 8003afa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1e5      	bne.n	8003ace <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b04:	2220      	movs	r2, #32
 8003b06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d119      	bne.n	8003b46 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	330c      	adds	r3, #12
 8003b18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	e853 3f00 	ldrex	r3, [r3]
 8003b20:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f023 0310 	bic.w	r3, r3, #16
 8003b28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	330c      	adds	r3, #12
 8003b30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003b32:	61fa      	str	r2, [r7, #28]
 8003b34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b36:	69b9      	ldr	r1, [r7, #24]
 8003b38:	69fa      	ldr	r2, [r7, #28]
 8003b3a:	e841 2300 	strex	r3, r2, [r1]
 8003b3e:	617b      	str	r3, [r7, #20]
   return(result);
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1e5      	bne.n	8003b12 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b48:	2200      	movs	r2, #0
 8003b4a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d106      	bne.n	8003b62 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b56:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b58:	4619      	mov	r1, r3
 8003b5a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003b5c:	f7ff ff67 	bl	8003a2e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003b60:	e002      	b.n	8003b68 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003b62:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003b64:	f7ff ff48 	bl	80039f8 <HAL_UART_RxCpltCallback>
}
 8003b68:	bf00      	nop
 8003b6a:	3770      	adds	r7, #112	; 0x70
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2201      	movs	r2, #1
 8003b82:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d108      	bne.n	8003b9e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b90:	085b      	lsrs	r3, r3, #1
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	4619      	mov	r1, r3
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f7ff ff49 	bl	8003a2e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003b9c:	e002      	b.n	8003ba4 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f7ff ff33 	bl	8003a0a <HAL_UART_RxHalfCpltCallback>
}
 8003ba4:	bf00      	nop
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc8:	2b80      	cmp	r3, #128	; 0x80
 8003bca:	bf0c      	ite	eq
 8003bcc:	2301      	moveq	r3, #1
 8003bce:	2300      	movne	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b21      	cmp	r3, #33	; 0x21
 8003bde:	d108      	bne.n	8003bf2 <UART_DMAError+0x46>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d005      	beq.n	8003bf2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	2200      	movs	r2, #0
 8003bea:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003bec:	68b8      	ldr	r0, [r7, #8]
 8003bee:	f000 f92f 	bl	8003e50 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfc:	2b40      	cmp	r3, #64	; 0x40
 8003bfe:	bf0c      	ite	eq
 8003c00:	2301      	moveq	r3, #1
 8003c02:	2300      	movne	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b22      	cmp	r3, #34	; 0x22
 8003c12:	d108      	bne.n	8003c26 <UART_DMAError+0x7a>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d005      	beq.n	8003c26 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003c20:	68b8      	ldr	r0, [r7, #8]
 8003c22:	f000 f93c 	bl	8003e9e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2a:	f043 0210 	orr.w	r2, r3, #16
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c32:	68b8      	ldr	r0, [r7, #8]
 8003c34:	f7ff fef2 	bl	8003a1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c38:	bf00      	nop
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b090      	sub	sp, #64	; 0x40
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	603b      	str	r3, [r7, #0]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c50:	e050      	b.n	8003cf4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c58:	d04c      	beq.n	8003cf4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d007      	beq.n	8003c70 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c60:	f7fe fbf6 	bl	8002450 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d241      	bcs.n	8003cf4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	330c      	adds	r3, #12
 8003c76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7a:	e853 3f00 	ldrex	r3, [r3]
 8003c7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c82:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	330c      	adds	r3, #12
 8003c8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c90:	637a      	str	r2, [r7, #52]	; 0x34
 8003c92:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c98:	e841 2300 	strex	r3, r2, [r1]
 8003c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1e5      	bne.n	8003c70 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	3314      	adds	r3, #20
 8003caa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	e853 3f00 	ldrex	r3, [r3]
 8003cb2:	613b      	str	r3, [r7, #16]
   return(result);
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	f023 0301 	bic.w	r3, r3, #1
 8003cba:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	3314      	adds	r3, #20
 8003cc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cc4:	623a      	str	r2, [r7, #32]
 8003cc6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc8:	69f9      	ldr	r1, [r7, #28]
 8003cca:	6a3a      	ldr	r2, [r7, #32]
 8003ccc:	e841 2300 	strex	r3, r2, [r1]
 8003cd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1e5      	bne.n	8003ca4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e00f      	b.n	8003d14 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	68ba      	ldr	r2, [r7, #8]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	bf0c      	ite	eq
 8003d04:	2301      	moveq	r3, #1
 8003d06:	2300      	movne	r3, #0
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	79fb      	ldrb	r3, [r7, #7]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d09f      	beq.n	8003c52 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3740      	adds	r7, #64	; 0x40
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b098      	sub	sp, #96	; 0x60
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	4613      	mov	r3, r2
 8003d28:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003d2a:	68ba      	ldr	r2, [r7, #8]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	88fa      	ldrh	r2, [r7, #6]
 8003d34:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2222      	movs	r2, #34	; 0x22
 8003d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d48:	4a3e      	ldr	r2, [pc, #248]	; (8003e44 <UART_Start_Receive_DMA+0x128>)
 8003d4a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d50:	4a3d      	ldr	r2, [pc, #244]	; (8003e48 <UART_Start_Receive_DMA+0x12c>)
 8003d52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d58:	4a3c      	ldr	r2, [pc, #240]	; (8003e4c <UART_Start_Receive_DMA+0x130>)
 8003d5a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d60:	2200      	movs	r2, #0
 8003d62:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003d64:	f107 0308 	add.w	r3, r7, #8
 8003d68:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	3304      	adds	r3, #4
 8003d74:	4619      	mov	r1, r3
 8003d76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	88fb      	ldrh	r3, [r7, #6]
 8003d7c:	f7fe fd16 	bl	80027ac <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003d80:	2300      	movs	r3, #0
 8003d82:	613b      	str	r3, [r7, #16]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	613b      	str	r3, [r7, #16]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	613b      	str	r3, [r7, #16]
 8003d94:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d019      	beq.n	8003dd2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	330c      	adds	r3, #12
 8003da4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003da8:	e853 3f00 	ldrex	r3, [r3]
 8003dac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003db4:	65bb      	str	r3, [r7, #88]	; 0x58
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	330c      	adds	r3, #12
 8003dbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003dbe:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003dc0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003dc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003dc6:	e841 2300 	strex	r3, r2, [r1]
 8003dca:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1e5      	bne.n	8003d9e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	3314      	adds	r3, #20
 8003dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ddc:	e853 3f00 	ldrex	r3, [r3]
 8003de0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de4:	f043 0301 	orr.w	r3, r3, #1
 8003de8:	657b      	str	r3, [r7, #84]	; 0x54
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	3314      	adds	r3, #20
 8003df0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003df2:	63ba      	str	r2, [r7, #56]	; 0x38
 8003df4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003df8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003dfa:	e841 2300 	strex	r3, r2, [r1]
 8003dfe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1e5      	bne.n	8003dd2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	3314      	adds	r3, #20
 8003e0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	e853 3f00 	ldrex	r3, [r3]
 8003e14:	617b      	str	r3, [r7, #20]
   return(result);
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e1c:	653b      	str	r3, [r7, #80]	; 0x50
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	3314      	adds	r3, #20
 8003e24:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003e26:	627a      	str	r2, [r7, #36]	; 0x24
 8003e28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2a:	6a39      	ldr	r1, [r7, #32]
 8003e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e2e:	e841 2300 	strex	r3, r2, [r1]
 8003e32:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1e5      	bne.n	8003e06 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3760      	adds	r7, #96	; 0x60
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	08003a45 	.word	0x08003a45
 8003e48:	08003b71 	.word	0x08003b71
 8003e4c:	08003bad 	.word	0x08003bad

08003e50 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b089      	sub	sp, #36	; 0x24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	330c      	adds	r3, #12
 8003e5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	e853 3f00 	ldrex	r3, [r3]
 8003e66:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003e6e:	61fb      	str	r3, [r7, #28]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	330c      	adds	r3, #12
 8003e76:	69fa      	ldr	r2, [r7, #28]
 8003e78:	61ba      	str	r2, [r7, #24]
 8003e7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7c:	6979      	ldr	r1, [r7, #20]
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	e841 2300 	strex	r3, r2, [r1]
 8003e84:	613b      	str	r3, [r7, #16]
   return(result);
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1e5      	bne.n	8003e58 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8003e94:	bf00      	nop
 8003e96:	3724      	adds	r7, #36	; 0x24
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bc80      	pop	{r7}
 8003e9c:	4770      	bx	lr

08003e9e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b095      	sub	sp, #84	; 0x54
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	330c      	adds	r3, #12
 8003eac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eb0:	e853 3f00 	ldrex	r3, [r3]
 8003eb4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ebc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	330c      	adds	r3, #12
 8003ec4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ec6:	643a      	str	r2, [r7, #64]	; 0x40
 8003ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ecc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ece:	e841 2300 	strex	r3, r2, [r1]
 8003ed2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1e5      	bne.n	8003ea6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	3314      	adds	r3, #20
 8003ee0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee2:	6a3b      	ldr	r3, [r7, #32]
 8003ee4:	e853 3f00 	ldrex	r3, [r3]
 8003ee8:	61fb      	str	r3, [r7, #28]
   return(result);
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	f023 0301 	bic.w	r3, r3, #1
 8003ef0:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	3314      	adds	r3, #20
 8003ef8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003efa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003efc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f02:	e841 2300 	strex	r3, r2, [r1]
 8003f06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1e5      	bne.n	8003eda <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d119      	bne.n	8003f4a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	330c      	adds	r3, #12
 8003f1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	e853 3f00 	ldrex	r3, [r3]
 8003f24:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	f023 0310 	bic.w	r3, r3, #16
 8003f2c:	647b      	str	r3, [r7, #68]	; 0x44
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	330c      	adds	r3, #12
 8003f34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f36:	61ba      	str	r2, [r7, #24]
 8003f38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3a:	6979      	ldr	r1, [r7, #20]
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	e841 2300 	strex	r3, r2, [r1]
 8003f42:	613b      	str	r3, [r7, #16]
   return(result);
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1e5      	bne.n	8003f16 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003f58:	bf00      	nop
 8003f5a:	3754      	adds	r7, #84	; 0x54
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bc80      	pop	{r7}
 8003f60:	4770      	bx	lr
	...

08003f64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68da      	ldr	r2, [r3, #12]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	689a      	ldr	r2, [r3, #8]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	431a      	orrs	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	431a      	orrs	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	69db      	ldr	r3, [r3, #28]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003fa4:	f023 030c 	bic.w	r3, r3, #12
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	6812      	ldr	r2, [r2, #0]
 8003fac:	68b9      	ldr	r1, [r7, #8]
 8003fae:	430b      	orrs	r3, r1
 8003fb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	699a      	ldr	r2, [r3, #24]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a55      	ldr	r2, [pc, #340]	; (8004124 <UART_SetConfig+0x1c0>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d103      	bne.n	8003fda <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003fd2:	f7ff fba5 	bl	8003720 <HAL_RCC_GetPCLK2Freq>
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	e002      	b.n	8003fe0 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003fda:	f7ff fb8d 	bl	80036f8 <HAL_RCC_GetPCLK1Freq>
 8003fde:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	69db      	ldr	r3, [r3, #28]
 8003fe4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fe8:	d14c      	bne.n	8004084 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	4613      	mov	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4413      	add	r3, r2
 8003ff2:	009a      	lsls	r2, r3, #2
 8003ff4:	441a      	add	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004000:	4a49      	ldr	r2, [pc, #292]	; (8004128 <UART_SetConfig+0x1c4>)
 8004002:	fba2 2303 	umull	r2, r3, r2, r3
 8004006:	095b      	lsrs	r3, r3, #5
 8004008:	0119      	lsls	r1, r3, #4
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	4613      	mov	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	009a      	lsls	r2, r3, #2
 8004014:	441a      	add	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004020:	4b41      	ldr	r3, [pc, #260]	; (8004128 <UART_SetConfig+0x1c4>)
 8004022:	fba3 0302 	umull	r0, r3, r3, r2
 8004026:	095b      	lsrs	r3, r3, #5
 8004028:	2064      	movs	r0, #100	; 0x64
 800402a:	fb00 f303 	mul.w	r3, r0, r3
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	00db      	lsls	r3, r3, #3
 8004032:	3332      	adds	r3, #50	; 0x32
 8004034:	4a3c      	ldr	r2, [pc, #240]	; (8004128 <UART_SetConfig+0x1c4>)
 8004036:	fba2 2303 	umull	r2, r3, r2, r3
 800403a:	095b      	lsrs	r3, r3, #5
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004042:	4419      	add	r1, r3
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	4613      	mov	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4413      	add	r3, r2
 800404c:	009a      	lsls	r2, r3, #2
 800404e:	441a      	add	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	fbb2 f2f3 	udiv	r2, r2, r3
 800405a:	4b33      	ldr	r3, [pc, #204]	; (8004128 <UART_SetConfig+0x1c4>)
 800405c:	fba3 0302 	umull	r0, r3, r3, r2
 8004060:	095b      	lsrs	r3, r3, #5
 8004062:	2064      	movs	r0, #100	; 0x64
 8004064:	fb00 f303 	mul.w	r3, r0, r3
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	00db      	lsls	r3, r3, #3
 800406c:	3332      	adds	r3, #50	; 0x32
 800406e:	4a2e      	ldr	r2, [pc, #184]	; (8004128 <UART_SetConfig+0x1c4>)
 8004070:	fba2 2303 	umull	r2, r3, r2, r3
 8004074:	095b      	lsrs	r3, r3, #5
 8004076:	f003 0207 	and.w	r2, r3, #7
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	440a      	add	r2, r1
 8004080:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004082:	e04a      	b.n	800411a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	4613      	mov	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	009a      	lsls	r2, r3, #2
 800408e:	441a      	add	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	fbb2 f3f3 	udiv	r3, r2, r3
 800409a:	4a23      	ldr	r2, [pc, #140]	; (8004128 <UART_SetConfig+0x1c4>)
 800409c:	fba2 2303 	umull	r2, r3, r2, r3
 80040a0:	095b      	lsrs	r3, r3, #5
 80040a2:	0119      	lsls	r1, r3, #4
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	4613      	mov	r3, r2
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	4413      	add	r3, r2
 80040ac:	009a      	lsls	r2, r3, #2
 80040ae:	441a      	add	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80040ba:	4b1b      	ldr	r3, [pc, #108]	; (8004128 <UART_SetConfig+0x1c4>)
 80040bc:	fba3 0302 	umull	r0, r3, r3, r2
 80040c0:	095b      	lsrs	r3, r3, #5
 80040c2:	2064      	movs	r0, #100	; 0x64
 80040c4:	fb00 f303 	mul.w	r3, r0, r3
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	011b      	lsls	r3, r3, #4
 80040cc:	3332      	adds	r3, #50	; 0x32
 80040ce:	4a16      	ldr	r2, [pc, #88]	; (8004128 <UART_SetConfig+0x1c4>)
 80040d0:	fba2 2303 	umull	r2, r3, r2, r3
 80040d4:	095b      	lsrs	r3, r3, #5
 80040d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040da:	4419      	add	r1, r3
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	4613      	mov	r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	4413      	add	r3, r2
 80040e4:	009a      	lsls	r2, r3, #2
 80040e6:	441a      	add	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80040f2:	4b0d      	ldr	r3, [pc, #52]	; (8004128 <UART_SetConfig+0x1c4>)
 80040f4:	fba3 0302 	umull	r0, r3, r3, r2
 80040f8:	095b      	lsrs	r3, r3, #5
 80040fa:	2064      	movs	r0, #100	; 0x64
 80040fc:	fb00 f303 	mul.w	r3, r0, r3
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	011b      	lsls	r3, r3, #4
 8004104:	3332      	adds	r3, #50	; 0x32
 8004106:	4a08      	ldr	r2, [pc, #32]	; (8004128 <UART_SetConfig+0x1c4>)
 8004108:	fba2 2303 	umull	r2, r3, r2, r3
 800410c:	095b      	lsrs	r3, r3, #5
 800410e:	f003 020f 	and.w	r2, r3, #15
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	440a      	add	r2, r1
 8004118:	609a      	str	r2, [r3, #8]
}
 800411a:	bf00      	nop
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	40013800 	.word	0x40013800
 8004128:	51eb851f 	.word	0x51eb851f

0800412c <atoi>:
 800412c:	220a      	movs	r2, #10
 800412e:	2100      	movs	r1, #0
 8004130:	f000 b9f0 	b.w	8004514 <strtol>

08004134 <__errno>:
 8004134:	4b01      	ldr	r3, [pc, #4]	; (800413c <__errno+0x8>)
 8004136:	6818      	ldr	r0, [r3, #0]
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	20000434 	.word	0x20000434

08004140 <__libc_init_array>:
 8004140:	b570      	push	{r4, r5, r6, lr}
 8004142:	2600      	movs	r6, #0
 8004144:	4d0c      	ldr	r5, [pc, #48]	; (8004178 <__libc_init_array+0x38>)
 8004146:	4c0d      	ldr	r4, [pc, #52]	; (800417c <__libc_init_array+0x3c>)
 8004148:	1b64      	subs	r4, r4, r5
 800414a:	10a4      	asrs	r4, r4, #2
 800414c:	42a6      	cmp	r6, r4
 800414e:	d109      	bne.n	8004164 <__libc_init_array+0x24>
 8004150:	f001 fa60 	bl	8005614 <_init>
 8004154:	2600      	movs	r6, #0
 8004156:	4d0a      	ldr	r5, [pc, #40]	; (8004180 <__libc_init_array+0x40>)
 8004158:	4c0a      	ldr	r4, [pc, #40]	; (8004184 <__libc_init_array+0x44>)
 800415a:	1b64      	subs	r4, r4, r5
 800415c:	10a4      	asrs	r4, r4, #2
 800415e:	42a6      	cmp	r6, r4
 8004160:	d105      	bne.n	800416e <__libc_init_array+0x2e>
 8004162:	bd70      	pop	{r4, r5, r6, pc}
 8004164:	f855 3b04 	ldr.w	r3, [r5], #4
 8004168:	4798      	blx	r3
 800416a:	3601      	adds	r6, #1
 800416c:	e7ee      	b.n	800414c <__libc_init_array+0xc>
 800416e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004172:	4798      	blx	r3
 8004174:	3601      	adds	r6, #1
 8004176:	e7f2      	b.n	800415e <__libc_init_array+0x1e>
 8004178:	08005ec8 	.word	0x08005ec8
 800417c:	08005ec8 	.word	0x08005ec8
 8004180:	08005ec8 	.word	0x08005ec8
 8004184:	08005ecc 	.word	0x08005ecc

08004188 <__itoa>:
 8004188:	1e93      	subs	r3, r2, #2
 800418a:	2b22      	cmp	r3, #34	; 0x22
 800418c:	b510      	push	{r4, lr}
 800418e:	460c      	mov	r4, r1
 8004190:	d904      	bls.n	800419c <__itoa+0x14>
 8004192:	2300      	movs	r3, #0
 8004194:	461c      	mov	r4, r3
 8004196:	700b      	strb	r3, [r1, #0]
 8004198:	4620      	mov	r0, r4
 800419a:	bd10      	pop	{r4, pc}
 800419c:	2a0a      	cmp	r2, #10
 800419e:	d109      	bne.n	80041b4 <__itoa+0x2c>
 80041a0:	2800      	cmp	r0, #0
 80041a2:	da07      	bge.n	80041b4 <__itoa+0x2c>
 80041a4:	232d      	movs	r3, #45	; 0x2d
 80041a6:	700b      	strb	r3, [r1, #0]
 80041a8:	2101      	movs	r1, #1
 80041aa:	4240      	negs	r0, r0
 80041ac:	4421      	add	r1, r4
 80041ae:	f000 f9d5 	bl	800455c <__utoa>
 80041b2:	e7f1      	b.n	8004198 <__itoa+0x10>
 80041b4:	2100      	movs	r1, #0
 80041b6:	e7f9      	b.n	80041ac <__itoa+0x24>

080041b8 <itoa>:
 80041b8:	f7ff bfe6 	b.w	8004188 <__itoa>

080041bc <memset>:
 80041bc:	4603      	mov	r3, r0
 80041be:	4402      	add	r2, r0
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d100      	bne.n	80041c6 <memset+0xa>
 80041c4:	4770      	bx	lr
 80041c6:	f803 1b01 	strb.w	r1, [r3], #1
 80041ca:	e7f9      	b.n	80041c0 <memset+0x4>

080041cc <iprintf>:
 80041cc:	b40f      	push	{r0, r1, r2, r3}
 80041ce:	4b0a      	ldr	r3, [pc, #40]	; (80041f8 <iprintf+0x2c>)
 80041d0:	b513      	push	{r0, r1, r4, lr}
 80041d2:	681c      	ldr	r4, [r3, #0]
 80041d4:	b124      	cbz	r4, 80041e0 <iprintf+0x14>
 80041d6:	69a3      	ldr	r3, [r4, #24]
 80041d8:	b913      	cbnz	r3, 80041e0 <iprintf+0x14>
 80041da:	4620      	mov	r0, r4
 80041dc:	f000 fbf4 	bl	80049c8 <__sinit>
 80041e0:	ab05      	add	r3, sp, #20
 80041e2:	4620      	mov	r0, r4
 80041e4:	9a04      	ldr	r2, [sp, #16]
 80041e6:	68a1      	ldr	r1, [r4, #8]
 80041e8:	9301      	str	r3, [sp, #4]
 80041ea:	f000 fe23 	bl	8004e34 <_vfiprintf_r>
 80041ee:	b002      	add	sp, #8
 80041f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041f4:	b004      	add	sp, #16
 80041f6:	4770      	bx	lr
 80041f8:	20000434 	.word	0x20000434

080041fc <_puts_r>:
 80041fc:	b570      	push	{r4, r5, r6, lr}
 80041fe:	460e      	mov	r6, r1
 8004200:	4605      	mov	r5, r0
 8004202:	b118      	cbz	r0, 800420c <_puts_r+0x10>
 8004204:	6983      	ldr	r3, [r0, #24]
 8004206:	b90b      	cbnz	r3, 800420c <_puts_r+0x10>
 8004208:	f000 fbde 	bl	80049c8 <__sinit>
 800420c:	69ab      	ldr	r3, [r5, #24]
 800420e:	68ac      	ldr	r4, [r5, #8]
 8004210:	b913      	cbnz	r3, 8004218 <_puts_r+0x1c>
 8004212:	4628      	mov	r0, r5
 8004214:	f000 fbd8 	bl	80049c8 <__sinit>
 8004218:	4b2c      	ldr	r3, [pc, #176]	; (80042cc <_puts_r+0xd0>)
 800421a:	429c      	cmp	r4, r3
 800421c:	d120      	bne.n	8004260 <_puts_r+0x64>
 800421e:	686c      	ldr	r4, [r5, #4]
 8004220:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004222:	07db      	lsls	r3, r3, #31
 8004224:	d405      	bmi.n	8004232 <_puts_r+0x36>
 8004226:	89a3      	ldrh	r3, [r4, #12]
 8004228:	0598      	lsls	r0, r3, #22
 800422a:	d402      	bmi.n	8004232 <_puts_r+0x36>
 800422c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800422e:	f000 fc8e 	bl	8004b4e <__retarget_lock_acquire_recursive>
 8004232:	89a3      	ldrh	r3, [r4, #12]
 8004234:	0719      	lsls	r1, r3, #28
 8004236:	d51d      	bpl.n	8004274 <_puts_r+0x78>
 8004238:	6923      	ldr	r3, [r4, #16]
 800423a:	b1db      	cbz	r3, 8004274 <_puts_r+0x78>
 800423c:	3e01      	subs	r6, #1
 800423e:	68a3      	ldr	r3, [r4, #8]
 8004240:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004244:	3b01      	subs	r3, #1
 8004246:	60a3      	str	r3, [r4, #8]
 8004248:	bb39      	cbnz	r1, 800429a <_puts_r+0x9e>
 800424a:	2b00      	cmp	r3, #0
 800424c:	da38      	bge.n	80042c0 <_puts_r+0xc4>
 800424e:	4622      	mov	r2, r4
 8004250:	210a      	movs	r1, #10
 8004252:	4628      	mov	r0, r5
 8004254:	f000 f9c4 	bl	80045e0 <__swbuf_r>
 8004258:	3001      	adds	r0, #1
 800425a:	d011      	beq.n	8004280 <_puts_r+0x84>
 800425c:	250a      	movs	r5, #10
 800425e:	e011      	b.n	8004284 <_puts_r+0x88>
 8004260:	4b1b      	ldr	r3, [pc, #108]	; (80042d0 <_puts_r+0xd4>)
 8004262:	429c      	cmp	r4, r3
 8004264:	d101      	bne.n	800426a <_puts_r+0x6e>
 8004266:	68ac      	ldr	r4, [r5, #8]
 8004268:	e7da      	b.n	8004220 <_puts_r+0x24>
 800426a:	4b1a      	ldr	r3, [pc, #104]	; (80042d4 <_puts_r+0xd8>)
 800426c:	429c      	cmp	r4, r3
 800426e:	bf08      	it	eq
 8004270:	68ec      	ldreq	r4, [r5, #12]
 8004272:	e7d5      	b.n	8004220 <_puts_r+0x24>
 8004274:	4621      	mov	r1, r4
 8004276:	4628      	mov	r0, r5
 8004278:	f000 fa04 	bl	8004684 <__swsetup_r>
 800427c:	2800      	cmp	r0, #0
 800427e:	d0dd      	beq.n	800423c <_puts_r+0x40>
 8004280:	f04f 35ff 	mov.w	r5, #4294967295
 8004284:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004286:	07da      	lsls	r2, r3, #31
 8004288:	d405      	bmi.n	8004296 <_puts_r+0x9a>
 800428a:	89a3      	ldrh	r3, [r4, #12]
 800428c:	059b      	lsls	r3, r3, #22
 800428e:	d402      	bmi.n	8004296 <_puts_r+0x9a>
 8004290:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004292:	f000 fc5d 	bl	8004b50 <__retarget_lock_release_recursive>
 8004296:	4628      	mov	r0, r5
 8004298:	bd70      	pop	{r4, r5, r6, pc}
 800429a:	2b00      	cmp	r3, #0
 800429c:	da04      	bge.n	80042a8 <_puts_r+0xac>
 800429e:	69a2      	ldr	r2, [r4, #24]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	dc06      	bgt.n	80042b2 <_puts_r+0xb6>
 80042a4:	290a      	cmp	r1, #10
 80042a6:	d004      	beq.n	80042b2 <_puts_r+0xb6>
 80042a8:	6823      	ldr	r3, [r4, #0]
 80042aa:	1c5a      	adds	r2, r3, #1
 80042ac:	6022      	str	r2, [r4, #0]
 80042ae:	7019      	strb	r1, [r3, #0]
 80042b0:	e7c5      	b.n	800423e <_puts_r+0x42>
 80042b2:	4622      	mov	r2, r4
 80042b4:	4628      	mov	r0, r5
 80042b6:	f000 f993 	bl	80045e0 <__swbuf_r>
 80042ba:	3001      	adds	r0, #1
 80042bc:	d1bf      	bne.n	800423e <_puts_r+0x42>
 80042be:	e7df      	b.n	8004280 <_puts_r+0x84>
 80042c0:	250a      	movs	r5, #10
 80042c2:	6823      	ldr	r3, [r4, #0]
 80042c4:	1c5a      	adds	r2, r3, #1
 80042c6:	6022      	str	r2, [r4, #0]
 80042c8:	701d      	strb	r5, [r3, #0]
 80042ca:	e7db      	b.n	8004284 <_puts_r+0x88>
 80042cc:	08005e4c 	.word	0x08005e4c
 80042d0:	08005e6c 	.word	0x08005e6c
 80042d4:	08005e2c 	.word	0x08005e2c

080042d8 <puts>:
 80042d8:	4b02      	ldr	r3, [pc, #8]	; (80042e4 <puts+0xc>)
 80042da:	4601      	mov	r1, r0
 80042dc:	6818      	ldr	r0, [r3, #0]
 80042de:	f7ff bf8d 	b.w	80041fc <_puts_r>
 80042e2:	bf00      	nop
 80042e4:	20000434 	.word	0x20000434

080042e8 <srand>:
 80042e8:	b538      	push	{r3, r4, r5, lr}
 80042ea:	4b10      	ldr	r3, [pc, #64]	; (800432c <srand+0x44>)
 80042ec:	4604      	mov	r4, r0
 80042ee:	681d      	ldr	r5, [r3, #0]
 80042f0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80042f2:	b9b3      	cbnz	r3, 8004322 <srand+0x3a>
 80042f4:	2018      	movs	r0, #24
 80042f6:	f000 fc91 	bl	8004c1c <malloc>
 80042fa:	4602      	mov	r2, r0
 80042fc:	63a8      	str	r0, [r5, #56]	; 0x38
 80042fe:	b920      	cbnz	r0, 800430a <srand+0x22>
 8004300:	2142      	movs	r1, #66	; 0x42
 8004302:	4b0b      	ldr	r3, [pc, #44]	; (8004330 <srand+0x48>)
 8004304:	480b      	ldr	r0, [pc, #44]	; (8004334 <srand+0x4c>)
 8004306:	f000 fa2b 	bl	8004760 <__assert_func>
 800430a:	490b      	ldr	r1, [pc, #44]	; (8004338 <srand+0x50>)
 800430c:	4b0b      	ldr	r3, [pc, #44]	; (800433c <srand+0x54>)
 800430e:	e9c0 1300 	strd	r1, r3, [r0]
 8004312:	4b0b      	ldr	r3, [pc, #44]	; (8004340 <srand+0x58>)
 8004314:	2100      	movs	r1, #0
 8004316:	6083      	str	r3, [r0, #8]
 8004318:	230b      	movs	r3, #11
 800431a:	8183      	strh	r3, [r0, #12]
 800431c:	2001      	movs	r0, #1
 800431e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004322:	2200      	movs	r2, #0
 8004324:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004326:	611c      	str	r4, [r3, #16]
 8004328:	615a      	str	r2, [r3, #20]
 800432a:	bd38      	pop	{r3, r4, r5, pc}
 800432c:	20000434 	.word	0x20000434
 8004330:	08005c58 	.word	0x08005c58
 8004334:	08005c6f 	.word	0x08005c6f
 8004338:	abcd330e 	.word	0xabcd330e
 800433c:	e66d1234 	.word	0xe66d1234
 8004340:	0005deec 	.word	0x0005deec

08004344 <rand>:
 8004344:	4b16      	ldr	r3, [pc, #88]	; (80043a0 <rand+0x5c>)
 8004346:	b510      	push	{r4, lr}
 8004348:	681c      	ldr	r4, [r3, #0]
 800434a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800434c:	b9b3      	cbnz	r3, 800437c <rand+0x38>
 800434e:	2018      	movs	r0, #24
 8004350:	f000 fc64 	bl	8004c1c <malloc>
 8004354:	4602      	mov	r2, r0
 8004356:	63a0      	str	r0, [r4, #56]	; 0x38
 8004358:	b920      	cbnz	r0, 8004364 <rand+0x20>
 800435a:	214e      	movs	r1, #78	; 0x4e
 800435c:	4b11      	ldr	r3, [pc, #68]	; (80043a4 <rand+0x60>)
 800435e:	4812      	ldr	r0, [pc, #72]	; (80043a8 <rand+0x64>)
 8004360:	f000 f9fe 	bl	8004760 <__assert_func>
 8004364:	4911      	ldr	r1, [pc, #68]	; (80043ac <rand+0x68>)
 8004366:	4b12      	ldr	r3, [pc, #72]	; (80043b0 <rand+0x6c>)
 8004368:	e9c0 1300 	strd	r1, r3, [r0]
 800436c:	4b11      	ldr	r3, [pc, #68]	; (80043b4 <rand+0x70>)
 800436e:	2100      	movs	r1, #0
 8004370:	6083      	str	r3, [r0, #8]
 8004372:	230b      	movs	r3, #11
 8004374:	8183      	strh	r3, [r0, #12]
 8004376:	2001      	movs	r0, #1
 8004378:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800437c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800437e:	4a0e      	ldr	r2, [pc, #56]	; (80043b8 <rand+0x74>)
 8004380:	6920      	ldr	r0, [r4, #16]
 8004382:	6963      	ldr	r3, [r4, #20]
 8004384:	4342      	muls	r2, r0
 8004386:	490d      	ldr	r1, [pc, #52]	; (80043bc <rand+0x78>)
 8004388:	fb01 2203 	mla	r2, r1, r3, r2
 800438c:	fba0 0101 	umull	r0, r1, r0, r1
 8004390:	1c43      	adds	r3, r0, #1
 8004392:	eb42 0001 	adc.w	r0, r2, r1
 8004396:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800439a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800439e:	bd10      	pop	{r4, pc}
 80043a0:	20000434 	.word	0x20000434
 80043a4:	08005c58 	.word	0x08005c58
 80043a8:	08005c6f 	.word	0x08005c6f
 80043ac:	abcd330e 	.word	0xabcd330e
 80043b0:	e66d1234 	.word	0xe66d1234
 80043b4:	0005deec 	.word	0x0005deec
 80043b8:	5851f42d 	.word	0x5851f42d
 80043bc:	4c957f2d 	.word	0x4c957f2d

080043c0 <strcat>:
 80043c0:	4602      	mov	r2, r0
 80043c2:	b510      	push	{r4, lr}
 80043c4:	7814      	ldrb	r4, [r2, #0]
 80043c6:	4613      	mov	r3, r2
 80043c8:	3201      	adds	r2, #1
 80043ca:	2c00      	cmp	r4, #0
 80043cc:	d1fa      	bne.n	80043c4 <strcat+0x4>
 80043ce:	3b01      	subs	r3, #1
 80043d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043d4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80043d8:	2a00      	cmp	r2, #0
 80043da:	d1f9      	bne.n	80043d0 <strcat+0x10>
 80043dc:	bd10      	pop	{r4, pc}

080043de <strcpy>:
 80043de:	4603      	mov	r3, r0
 80043e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043e4:	f803 2b01 	strb.w	r2, [r3], #1
 80043e8:	2a00      	cmp	r2, #0
 80043ea:	d1f9      	bne.n	80043e0 <strcpy+0x2>
 80043ec:	4770      	bx	lr

080043ee <strstr>:
 80043ee:	780a      	ldrb	r2, [r1, #0]
 80043f0:	b570      	push	{r4, r5, r6, lr}
 80043f2:	b96a      	cbnz	r2, 8004410 <strstr+0x22>
 80043f4:	bd70      	pop	{r4, r5, r6, pc}
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d109      	bne.n	800440e <strstr+0x20>
 80043fa:	460c      	mov	r4, r1
 80043fc:	4605      	mov	r5, r0
 80043fe:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004402:	2b00      	cmp	r3, #0
 8004404:	d0f6      	beq.n	80043f4 <strstr+0x6>
 8004406:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800440a:	429e      	cmp	r6, r3
 800440c:	d0f7      	beq.n	80043fe <strstr+0x10>
 800440e:	3001      	adds	r0, #1
 8004410:	7803      	ldrb	r3, [r0, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1ef      	bne.n	80043f6 <strstr+0x8>
 8004416:	4618      	mov	r0, r3
 8004418:	e7ec      	b.n	80043f4 <strstr+0x6>
	...

0800441c <_strtol_l.constprop.0>:
 800441c:	2b01      	cmp	r3, #1
 800441e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004422:	4680      	mov	r8, r0
 8004424:	d001      	beq.n	800442a <_strtol_l.constprop.0+0xe>
 8004426:	2b24      	cmp	r3, #36	; 0x24
 8004428:	d906      	bls.n	8004438 <_strtol_l.constprop.0+0x1c>
 800442a:	f7ff fe83 	bl	8004134 <__errno>
 800442e:	2316      	movs	r3, #22
 8004430:	6003      	str	r3, [r0, #0]
 8004432:	2000      	movs	r0, #0
 8004434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004438:	460d      	mov	r5, r1
 800443a:	4f35      	ldr	r7, [pc, #212]	; (8004510 <_strtol_l.constprop.0+0xf4>)
 800443c:	4628      	mov	r0, r5
 800443e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004442:	5de6      	ldrb	r6, [r4, r7]
 8004444:	f016 0608 	ands.w	r6, r6, #8
 8004448:	d1f8      	bne.n	800443c <_strtol_l.constprop.0+0x20>
 800444a:	2c2d      	cmp	r4, #45	; 0x2d
 800444c:	d12f      	bne.n	80044ae <_strtol_l.constprop.0+0x92>
 800444e:	2601      	movs	r6, #1
 8004450:	782c      	ldrb	r4, [r5, #0]
 8004452:	1c85      	adds	r5, r0, #2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d057      	beq.n	8004508 <_strtol_l.constprop.0+0xec>
 8004458:	2b10      	cmp	r3, #16
 800445a:	d109      	bne.n	8004470 <_strtol_l.constprop.0+0x54>
 800445c:	2c30      	cmp	r4, #48	; 0x30
 800445e:	d107      	bne.n	8004470 <_strtol_l.constprop.0+0x54>
 8004460:	7828      	ldrb	r0, [r5, #0]
 8004462:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004466:	2858      	cmp	r0, #88	; 0x58
 8004468:	d149      	bne.n	80044fe <_strtol_l.constprop.0+0xe2>
 800446a:	2310      	movs	r3, #16
 800446c:	786c      	ldrb	r4, [r5, #1]
 800446e:	3502      	adds	r5, #2
 8004470:	2700      	movs	r7, #0
 8004472:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8004476:	f10e 3eff 	add.w	lr, lr, #4294967295
 800447a:	fbbe f9f3 	udiv	r9, lr, r3
 800447e:	4638      	mov	r0, r7
 8004480:	fb03 ea19 	mls	sl, r3, r9, lr
 8004484:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004488:	f1bc 0f09 	cmp.w	ip, #9
 800448c:	d814      	bhi.n	80044b8 <_strtol_l.constprop.0+0x9c>
 800448e:	4664      	mov	r4, ip
 8004490:	42a3      	cmp	r3, r4
 8004492:	dd22      	ble.n	80044da <_strtol_l.constprop.0+0xbe>
 8004494:	2f00      	cmp	r7, #0
 8004496:	db1d      	blt.n	80044d4 <_strtol_l.constprop.0+0xb8>
 8004498:	4581      	cmp	r9, r0
 800449a:	d31b      	bcc.n	80044d4 <_strtol_l.constprop.0+0xb8>
 800449c:	d101      	bne.n	80044a2 <_strtol_l.constprop.0+0x86>
 800449e:	45a2      	cmp	sl, r4
 80044a0:	db18      	blt.n	80044d4 <_strtol_l.constprop.0+0xb8>
 80044a2:	2701      	movs	r7, #1
 80044a4:	fb00 4003 	mla	r0, r0, r3, r4
 80044a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80044ac:	e7ea      	b.n	8004484 <_strtol_l.constprop.0+0x68>
 80044ae:	2c2b      	cmp	r4, #43	; 0x2b
 80044b0:	bf04      	itt	eq
 80044b2:	782c      	ldrbeq	r4, [r5, #0]
 80044b4:	1c85      	addeq	r5, r0, #2
 80044b6:	e7cd      	b.n	8004454 <_strtol_l.constprop.0+0x38>
 80044b8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80044bc:	f1bc 0f19 	cmp.w	ip, #25
 80044c0:	d801      	bhi.n	80044c6 <_strtol_l.constprop.0+0xaa>
 80044c2:	3c37      	subs	r4, #55	; 0x37
 80044c4:	e7e4      	b.n	8004490 <_strtol_l.constprop.0+0x74>
 80044c6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80044ca:	f1bc 0f19 	cmp.w	ip, #25
 80044ce:	d804      	bhi.n	80044da <_strtol_l.constprop.0+0xbe>
 80044d0:	3c57      	subs	r4, #87	; 0x57
 80044d2:	e7dd      	b.n	8004490 <_strtol_l.constprop.0+0x74>
 80044d4:	f04f 37ff 	mov.w	r7, #4294967295
 80044d8:	e7e6      	b.n	80044a8 <_strtol_l.constprop.0+0x8c>
 80044da:	2f00      	cmp	r7, #0
 80044dc:	da07      	bge.n	80044ee <_strtol_l.constprop.0+0xd2>
 80044de:	2322      	movs	r3, #34	; 0x22
 80044e0:	4670      	mov	r0, lr
 80044e2:	f8c8 3000 	str.w	r3, [r8]
 80044e6:	2a00      	cmp	r2, #0
 80044e8:	d0a4      	beq.n	8004434 <_strtol_l.constprop.0+0x18>
 80044ea:	1e69      	subs	r1, r5, #1
 80044ec:	e005      	b.n	80044fa <_strtol_l.constprop.0+0xde>
 80044ee:	b106      	cbz	r6, 80044f2 <_strtol_l.constprop.0+0xd6>
 80044f0:	4240      	negs	r0, r0
 80044f2:	2a00      	cmp	r2, #0
 80044f4:	d09e      	beq.n	8004434 <_strtol_l.constprop.0+0x18>
 80044f6:	2f00      	cmp	r7, #0
 80044f8:	d1f7      	bne.n	80044ea <_strtol_l.constprop.0+0xce>
 80044fa:	6011      	str	r1, [r2, #0]
 80044fc:	e79a      	b.n	8004434 <_strtol_l.constprop.0+0x18>
 80044fe:	2430      	movs	r4, #48	; 0x30
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1b5      	bne.n	8004470 <_strtol_l.constprop.0+0x54>
 8004504:	2308      	movs	r3, #8
 8004506:	e7b3      	b.n	8004470 <_strtol_l.constprop.0+0x54>
 8004508:	2c30      	cmp	r4, #48	; 0x30
 800450a:	d0a9      	beq.n	8004460 <_strtol_l.constprop.0+0x44>
 800450c:	230a      	movs	r3, #10
 800450e:	e7af      	b.n	8004470 <_strtol_l.constprop.0+0x54>
 8004510:	08005d2c 	.word	0x08005d2c

08004514 <strtol>:
 8004514:	4613      	mov	r3, r2
 8004516:	460a      	mov	r2, r1
 8004518:	4601      	mov	r1, r0
 800451a:	4802      	ldr	r0, [pc, #8]	; (8004524 <strtol+0x10>)
 800451c:	6800      	ldr	r0, [r0, #0]
 800451e:	f7ff bf7d 	b.w	800441c <_strtol_l.constprop.0>
 8004522:	bf00      	nop
 8004524:	20000434 	.word	0x20000434

08004528 <time>:
 8004528:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800452a:	4b0b      	ldr	r3, [pc, #44]	; (8004558 <time+0x30>)
 800452c:	4604      	mov	r4, r0
 800452e:	2200      	movs	r2, #0
 8004530:	4669      	mov	r1, sp
 8004532:	6818      	ldr	r0, [r3, #0]
 8004534:	f000 faf8 	bl	8004b28 <_gettimeofday_r>
 8004538:	2800      	cmp	r0, #0
 800453a:	da05      	bge.n	8004548 <time+0x20>
 800453c:	f04f 32ff 	mov.w	r2, #4294967295
 8004540:	f04f 33ff 	mov.w	r3, #4294967295
 8004544:	e9cd 2300 	strd	r2, r3, [sp]
 8004548:	e9dd 0100 	ldrd	r0, r1, [sp]
 800454c:	b10c      	cbz	r4, 8004552 <time+0x2a>
 800454e:	e9c4 0100 	strd	r0, r1, [r4]
 8004552:	b004      	add	sp, #16
 8004554:	bd10      	pop	{r4, pc}
 8004556:	bf00      	nop
 8004558:	20000434 	.word	0x20000434

0800455c <__utoa>:
 800455c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800455e:	b08b      	sub	sp, #44	; 0x2c
 8004560:	4605      	mov	r5, r0
 8004562:	460b      	mov	r3, r1
 8004564:	466e      	mov	r6, sp
 8004566:	4c1d      	ldr	r4, [pc, #116]	; (80045dc <__utoa+0x80>)
 8004568:	f104 0c20 	add.w	ip, r4, #32
 800456c:	4637      	mov	r7, r6
 800456e:	6820      	ldr	r0, [r4, #0]
 8004570:	6861      	ldr	r1, [r4, #4]
 8004572:	3408      	adds	r4, #8
 8004574:	c703      	stmia	r7!, {r0, r1}
 8004576:	4564      	cmp	r4, ip
 8004578:	463e      	mov	r6, r7
 800457a:	d1f7      	bne.n	800456c <__utoa+0x10>
 800457c:	7921      	ldrb	r1, [r4, #4]
 800457e:	6820      	ldr	r0, [r4, #0]
 8004580:	7139      	strb	r1, [r7, #4]
 8004582:	1e91      	subs	r1, r2, #2
 8004584:	2922      	cmp	r1, #34	; 0x22
 8004586:	6038      	str	r0, [r7, #0]
 8004588:	f04f 0100 	mov.w	r1, #0
 800458c:	d904      	bls.n	8004598 <__utoa+0x3c>
 800458e:	7019      	strb	r1, [r3, #0]
 8004590:	460b      	mov	r3, r1
 8004592:	4618      	mov	r0, r3
 8004594:	b00b      	add	sp, #44	; 0x2c
 8004596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004598:	1e58      	subs	r0, r3, #1
 800459a:	4684      	mov	ip, r0
 800459c:	fbb5 f7f2 	udiv	r7, r5, r2
 80045a0:	fb02 5617 	mls	r6, r2, r7, r5
 80045a4:	3628      	adds	r6, #40	; 0x28
 80045a6:	446e      	add	r6, sp
 80045a8:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80045ac:	460c      	mov	r4, r1
 80045ae:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80045b2:	462e      	mov	r6, r5
 80045b4:	42b2      	cmp	r2, r6
 80045b6:	463d      	mov	r5, r7
 80045b8:	f101 0101 	add.w	r1, r1, #1
 80045bc:	d9ee      	bls.n	800459c <__utoa+0x40>
 80045be:	2200      	movs	r2, #0
 80045c0:	545a      	strb	r2, [r3, r1]
 80045c2:	1919      	adds	r1, r3, r4
 80045c4:	1aa5      	subs	r5, r4, r2
 80045c6:	42aa      	cmp	r2, r5
 80045c8:	dae3      	bge.n	8004592 <__utoa+0x36>
 80045ca:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80045ce:	780e      	ldrb	r6, [r1, #0]
 80045d0:	3201      	adds	r2, #1
 80045d2:	7006      	strb	r6, [r0, #0]
 80045d4:	f801 5901 	strb.w	r5, [r1], #-1
 80045d8:	e7f4      	b.n	80045c4 <__utoa+0x68>
 80045da:	bf00      	nop
 80045dc:	08005cca 	.word	0x08005cca

080045e0 <__swbuf_r>:
 80045e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045e2:	460e      	mov	r6, r1
 80045e4:	4614      	mov	r4, r2
 80045e6:	4605      	mov	r5, r0
 80045e8:	b118      	cbz	r0, 80045f2 <__swbuf_r+0x12>
 80045ea:	6983      	ldr	r3, [r0, #24]
 80045ec:	b90b      	cbnz	r3, 80045f2 <__swbuf_r+0x12>
 80045ee:	f000 f9eb 	bl	80049c8 <__sinit>
 80045f2:	4b21      	ldr	r3, [pc, #132]	; (8004678 <__swbuf_r+0x98>)
 80045f4:	429c      	cmp	r4, r3
 80045f6:	d12b      	bne.n	8004650 <__swbuf_r+0x70>
 80045f8:	686c      	ldr	r4, [r5, #4]
 80045fa:	69a3      	ldr	r3, [r4, #24]
 80045fc:	60a3      	str	r3, [r4, #8]
 80045fe:	89a3      	ldrh	r3, [r4, #12]
 8004600:	071a      	lsls	r2, r3, #28
 8004602:	d52f      	bpl.n	8004664 <__swbuf_r+0x84>
 8004604:	6923      	ldr	r3, [r4, #16]
 8004606:	b36b      	cbz	r3, 8004664 <__swbuf_r+0x84>
 8004608:	6923      	ldr	r3, [r4, #16]
 800460a:	6820      	ldr	r0, [r4, #0]
 800460c:	b2f6      	uxtb	r6, r6
 800460e:	1ac0      	subs	r0, r0, r3
 8004610:	6963      	ldr	r3, [r4, #20]
 8004612:	4637      	mov	r7, r6
 8004614:	4283      	cmp	r3, r0
 8004616:	dc04      	bgt.n	8004622 <__swbuf_r+0x42>
 8004618:	4621      	mov	r1, r4
 800461a:	4628      	mov	r0, r5
 800461c:	f000 f940 	bl	80048a0 <_fflush_r>
 8004620:	bb30      	cbnz	r0, 8004670 <__swbuf_r+0x90>
 8004622:	68a3      	ldr	r3, [r4, #8]
 8004624:	3001      	adds	r0, #1
 8004626:	3b01      	subs	r3, #1
 8004628:	60a3      	str	r3, [r4, #8]
 800462a:	6823      	ldr	r3, [r4, #0]
 800462c:	1c5a      	adds	r2, r3, #1
 800462e:	6022      	str	r2, [r4, #0]
 8004630:	701e      	strb	r6, [r3, #0]
 8004632:	6963      	ldr	r3, [r4, #20]
 8004634:	4283      	cmp	r3, r0
 8004636:	d004      	beq.n	8004642 <__swbuf_r+0x62>
 8004638:	89a3      	ldrh	r3, [r4, #12]
 800463a:	07db      	lsls	r3, r3, #31
 800463c:	d506      	bpl.n	800464c <__swbuf_r+0x6c>
 800463e:	2e0a      	cmp	r6, #10
 8004640:	d104      	bne.n	800464c <__swbuf_r+0x6c>
 8004642:	4621      	mov	r1, r4
 8004644:	4628      	mov	r0, r5
 8004646:	f000 f92b 	bl	80048a0 <_fflush_r>
 800464a:	b988      	cbnz	r0, 8004670 <__swbuf_r+0x90>
 800464c:	4638      	mov	r0, r7
 800464e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004650:	4b0a      	ldr	r3, [pc, #40]	; (800467c <__swbuf_r+0x9c>)
 8004652:	429c      	cmp	r4, r3
 8004654:	d101      	bne.n	800465a <__swbuf_r+0x7a>
 8004656:	68ac      	ldr	r4, [r5, #8]
 8004658:	e7cf      	b.n	80045fa <__swbuf_r+0x1a>
 800465a:	4b09      	ldr	r3, [pc, #36]	; (8004680 <__swbuf_r+0xa0>)
 800465c:	429c      	cmp	r4, r3
 800465e:	bf08      	it	eq
 8004660:	68ec      	ldreq	r4, [r5, #12]
 8004662:	e7ca      	b.n	80045fa <__swbuf_r+0x1a>
 8004664:	4621      	mov	r1, r4
 8004666:	4628      	mov	r0, r5
 8004668:	f000 f80c 	bl	8004684 <__swsetup_r>
 800466c:	2800      	cmp	r0, #0
 800466e:	d0cb      	beq.n	8004608 <__swbuf_r+0x28>
 8004670:	f04f 37ff 	mov.w	r7, #4294967295
 8004674:	e7ea      	b.n	800464c <__swbuf_r+0x6c>
 8004676:	bf00      	nop
 8004678:	08005e4c 	.word	0x08005e4c
 800467c:	08005e6c 	.word	0x08005e6c
 8004680:	08005e2c 	.word	0x08005e2c

08004684 <__swsetup_r>:
 8004684:	4b32      	ldr	r3, [pc, #200]	; (8004750 <__swsetup_r+0xcc>)
 8004686:	b570      	push	{r4, r5, r6, lr}
 8004688:	681d      	ldr	r5, [r3, #0]
 800468a:	4606      	mov	r6, r0
 800468c:	460c      	mov	r4, r1
 800468e:	b125      	cbz	r5, 800469a <__swsetup_r+0x16>
 8004690:	69ab      	ldr	r3, [r5, #24]
 8004692:	b913      	cbnz	r3, 800469a <__swsetup_r+0x16>
 8004694:	4628      	mov	r0, r5
 8004696:	f000 f997 	bl	80049c8 <__sinit>
 800469a:	4b2e      	ldr	r3, [pc, #184]	; (8004754 <__swsetup_r+0xd0>)
 800469c:	429c      	cmp	r4, r3
 800469e:	d10f      	bne.n	80046c0 <__swsetup_r+0x3c>
 80046a0:	686c      	ldr	r4, [r5, #4]
 80046a2:	89a3      	ldrh	r3, [r4, #12]
 80046a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80046a8:	0719      	lsls	r1, r3, #28
 80046aa:	d42c      	bmi.n	8004706 <__swsetup_r+0x82>
 80046ac:	06dd      	lsls	r5, r3, #27
 80046ae:	d411      	bmi.n	80046d4 <__swsetup_r+0x50>
 80046b0:	2309      	movs	r3, #9
 80046b2:	6033      	str	r3, [r6, #0]
 80046b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80046b8:	f04f 30ff 	mov.w	r0, #4294967295
 80046bc:	81a3      	strh	r3, [r4, #12]
 80046be:	e03e      	b.n	800473e <__swsetup_r+0xba>
 80046c0:	4b25      	ldr	r3, [pc, #148]	; (8004758 <__swsetup_r+0xd4>)
 80046c2:	429c      	cmp	r4, r3
 80046c4:	d101      	bne.n	80046ca <__swsetup_r+0x46>
 80046c6:	68ac      	ldr	r4, [r5, #8]
 80046c8:	e7eb      	b.n	80046a2 <__swsetup_r+0x1e>
 80046ca:	4b24      	ldr	r3, [pc, #144]	; (800475c <__swsetup_r+0xd8>)
 80046cc:	429c      	cmp	r4, r3
 80046ce:	bf08      	it	eq
 80046d0:	68ec      	ldreq	r4, [r5, #12]
 80046d2:	e7e6      	b.n	80046a2 <__swsetup_r+0x1e>
 80046d4:	0758      	lsls	r0, r3, #29
 80046d6:	d512      	bpl.n	80046fe <__swsetup_r+0x7a>
 80046d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046da:	b141      	cbz	r1, 80046ee <__swsetup_r+0x6a>
 80046dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046e0:	4299      	cmp	r1, r3
 80046e2:	d002      	beq.n	80046ea <__swsetup_r+0x66>
 80046e4:	4630      	mov	r0, r6
 80046e6:	f000 faa1 	bl	8004c2c <_free_r>
 80046ea:	2300      	movs	r3, #0
 80046ec:	6363      	str	r3, [r4, #52]	; 0x34
 80046ee:	89a3      	ldrh	r3, [r4, #12]
 80046f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80046f4:	81a3      	strh	r3, [r4, #12]
 80046f6:	2300      	movs	r3, #0
 80046f8:	6063      	str	r3, [r4, #4]
 80046fa:	6923      	ldr	r3, [r4, #16]
 80046fc:	6023      	str	r3, [r4, #0]
 80046fe:	89a3      	ldrh	r3, [r4, #12]
 8004700:	f043 0308 	orr.w	r3, r3, #8
 8004704:	81a3      	strh	r3, [r4, #12]
 8004706:	6923      	ldr	r3, [r4, #16]
 8004708:	b94b      	cbnz	r3, 800471e <__swsetup_r+0x9a>
 800470a:	89a3      	ldrh	r3, [r4, #12]
 800470c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004714:	d003      	beq.n	800471e <__swsetup_r+0x9a>
 8004716:	4621      	mov	r1, r4
 8004718:	4630      	mov	r0, r6
 800471a:	f000 fa3f 	bl	8004b9c <__smakebuf_r>
 800471e:	89a0      	ldrh	r0, [r4, #12]
 8004720:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004724:	f010 0301 	ands.w	r3, r0, #1
 8004728:	d00a      	beq.n	8004740 <__swsetup_r+0xbc>
 800472a:	2300      	movs	r3, #0
 800472c:	60a3      	str	r3, [r4, #8]
 800472e:	6963      	ldr	r3, [r4, #20]
 8004730:	425b      	negs	r3, r3
 8004732:	61a3      	str	r3, [r4, #24]
 8004734:	6923      	ldr	r3, [r4, #16]
 8004736:	b943      	cbnz	r3, 800474a <__swsetup_r+0xc6>
 8004738:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800473c:	d1ba      	bne.n	80046b4 <__swsetup_r+0x30>
 800473e:	bd70      	pop	{r4, r5, r6, pc}
 8004740:	0781      	lsls	r1, r0, #30
 8004742:	bf58      	it	pl
 8004744:	6963      	ldrpl	r3, [r4, #20]
 8004746:	60a3      	str	r3, [r4, #8]
 8004748:	e7f4      	b.n	8004734 <__swsetup_r+0xb0>
 800474a:	2000      	movs	r0, #0
 800474c:	e7f7      	b.n	800473e <__swsetup_r+0xba>
 800474e:	bf00      	nop
 8004750:	20000434 	.word	0x20000434
 8004754:	08005e4c 	.word	0x08005e4c
 8004758:	08005e6c 	.word	0x08005e6c
 800475c:	08005e2c 	.word	0x08005e2c

08004760 <__assert_func>:
 8004760:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004762:	4614      	mov	r4, r2
 8004764:	461a      	mov	r2, r3
 8004766:	4b09      	ldr	r3, [pc, #36]	; (800478c <__assert_func+0x2c>)
 8004768:	4605      	mov	r5, r0
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68d8      	ldr	r0, [r3, #12]
 800476e:	b14c      	cbz	r4, 8004784 <__assert_func+0x24>
 8004770:	4b07      	ldr	r3, [pc, #28]	; (8004790 <__assert_func+0x30>)
 8004772:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004776:	9100      	str	r1, [sp, #0]
 8004778:	462b      	mov	r3, r5
 800477a:	4906      	ldr	r1, [pc, #24]	; (8004794 <__assert_func+0x34>)
 800477c:	f000 f9a2 	bl	8004ac4 <fiprintf>
 8004780:	f000 fe84 	bl	800548c <abort>
 8004784:	4b04      	ldr	r3, [pc, #16]	; (8004798 <__assert_func+0x38>)
 8004786:	461c      	mov	r4, r3
 8004788:	e7f3      	b.n	8004772 <__assert_func+0x12>
 800478a:	bf00      	nop
 800478c:	20000434 	.word	0x20000434
 8004790:	08005cef 	.word	0x08005cef
 8004794:	08005cfc 	.word	0x08005cfc
 8004798:	08005d2a 	.word	0x08005d2a

0800479c <__sflush_r>:
 800479c:	898a      	ldrh	r2, [r1, #12]
 800479e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a0:	4605      	mov	r5, r0
 80047a2:	0710      	lsls	r0, r2, #28
 80047a4:	460c      	mov	r4, r1
 80047a6:	d457      	bmi.n	8004858 <__sflush_r+0xbc>
 80047a8:	684b      	ldr	r3, [r1, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	dc04      	bgt.n	80047b8 <__sflush_r+0x1c>
 80047ae:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	dc01      	bgt.n	80047b8 <__sflush_r+0x1c>
 80047b4:	2000      	movs	r0, #0
 80047b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047ba:	2e00      	cmp	r6, #0
 80047bc:	d0fa      	beq.n	80047b4 <__sflush_r+0x18>
 80047be:	2300      	movs	r3, #0
 80047c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80047c4:	682f      	ldr	r7, [r5, #0]
 80047c6:	602b      	str	r3, [r5, #0]
 80047c8:	d032      	beq.n	8004830 <__sflush_r+0x94>
 80047ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80047cc:	89a3      	ldrh	r3, [r4, #12]
 80047ce:	075a      	lsls	r2, r3, #29
 80047d0:	d505      	bpl.n	80047de <__sflush_r+0x42>
 80047d2:	6863      	ldr	r3, [r4, #4]
 80047d4:	1ac0      	subs	r0, r0, r3
 80047d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80047d8:	b10b      	cbz	r3, 80047de <__sflush_r+0x42>
 80047da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047dc:	1ac0      	subs	r0, r0, r3
 80047de:	2300      	movs	r3, #0
 80047e0:	4602      	mov	r2, r0
 80047e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047e4:	4628      	mov	r0, r5
 80047e6:	6a21      	ldr	r1, [r4, #32]
 80047e8:	47b0      	blx	r6
 80047ea:	1c43      	adds	r3, r0, #1
 80047ec:	89a3      	ldrh	r3, [r4, #12]
 80047ee:	d106      	bne.n	80047fe <__sflush_r+0x62>
 80047f0:	6829      	ldr	r1, [r5, #0]
 80047f2:	291d      	cmp	r1, #29
 80047f4:	d82c      	bhi.n	8004850 <__sflush_r+0xb4>
 80047f6:	4a29      	ldr	r2, [pc, #164]	; (800489c <__sflush_r+0x100>)
 80047f8:	40ca      	lsrs	r2, r1
 80047fa:	07d6      	lsls	r6, r2, #31
 80047fc:	d528      	bpl.n	8004850 <__sflush_r+0xb4>
 80047fe:	2200      	movs	r2, #0
 8004800:	6062      	str	r2, [r4, #4]
 8004802:	6922      	ldr	r2, [r4, #16]
 8004804:	04d9      	lsls	r1, r3, #19
 8004806:	6022      	str	r2, [r4, #0]
 8004808:	d504      	bpl.n	8004814 <__sflush_r+0x78>
 800480a:	1c42      	adds	r2, r0, #1
 800480c:	d101      	bne.n	8004812 <__sflush_r+0x76>
 800480e:	682b      	ldr	r3, [r5, #0]
 8004810:	b903      	cbnz	r3, 8004814 <__sflush_r+0x78>
 8004812:	6560      	str	r0, [r4, #84]	; 0x54
 8004814:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004816:	602f      	str	r7, [r5, #0]
 8004818:	2900      	cmp	r1, #0
 800481a:	d0cb      	beq.n	80047b4 <__sflush_r+0x18>
 800481c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004820:	4299      	cmp	r1, r3
 8004822:	d002      	beq.n	800482a <__sflush_r+0x8e>
 8004824:	4628      	mov	r0, r5
 8004826:	f000 fa01 	bl	8004c2c <_free_r>
 800482a:	2000      	movs	r0, #0
 800482c:	6360      	str	r0, [r4, #52]	; 0x34
 800482e:	e7c2      	b.n	80047b6 <__sflush_r+0x1a>
 8004830:	6a21      	ldr	r1, [r4, #32]
 8004832:	2301      	movs	r3, #1
 8004834:	4628      	mov	r0, r5
 8004836:	47b0      	blx	r6
 8004838:	1c41      	adds	r1, r0, #1
 800483a:	d1c7      	bne.n	80047cc <__sflush_r+0x30>
 800483c:	682b      	ldr	r3, [r5, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d0c4      	beq.n	80047cc <__sflush_r+0x30>
 8004842:	2b1d      	cmp	r3, #29
 8004844:	d001      	beq.n	800484a <__sflush_r+0xae>
 8004846:	2b16      	cmp	r3, #22
 8004848:	d101      	bne.n	800484e <__sflush_r+0xb2>
 800484a:	602f      	str	r7, [r5, #0]
 800484c:	e7b2      	b.n	80047b4 <__sflush_r+0x18>
 800484e:	89a3      	ldrh	r3, [r4, #12]
 8004850:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004854:	81a3      	strh	r3, [r4, #12]
 8004856:	e7ae      	b.n	80047b6 <__sflush_r+0x1a>
 8004858:	690f      	ldr	r7, [r1, #16]
 800485a:	2f00      	cmp	r7, #0
 800485c:	d0aa      	beq.n	80047b4 <__sflush_r+0x18>
 800485e:	0793      	lsls	r3, r2, #30
 8004860:	bf18      	it	ne
 8004862:	2300      	movne	r3, #0
 8004864:	680e      	ldr	r6, [r1, #0]
 8004866:	bf08      	it	eq
 8004868:	694b      	ldreq	r3, [r1, #20]
 800486a:	1bf6      	subs	r6, r6, r7
 800486c:	600f      	str	r7, [r1, #0]
 800486e:	608b      	str	r3, [r1, #8]
 8004870:	2e00      	cmp	r6, #0
 8004872:	dd9f      	ble.n	80047b4 <__sflush_r+0x18>
 8004874:	4633      	mov	r3, r6
 8004876:	463a      	mov	r2, r7
 8004878:	4628      	mov	r0, r5
 800487a:	6a21      	ldr	r1, [r4, #32]
 800487c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004880:	47e0      	blx	ip
 8004882:	2800      	cmp	r0, #0
 8004884:	dc06      	bgt.n	8004894 <__sflush_r+0xf8>
 8004886:	89a3      	ldrh	r3, [r4, #12]
 8004888:	f04f 30ff 	mov.w	r0, #4294967295
 800488c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004890:	81a3      	strh	r3, [r4, #12]
 8004892:	e790      	b.n	80047b6 <__sflush_r+0x1a>
 8004894:	4407      	add	r7, r0
 8004896:	1a36      	subs	r6, r6, r0
 8004898:	e7ea      	b.n	8004870 <__sflush_r+0xd4>
 800489a:	bf00      	nop
 800489c:	20400001 	.word	0x20400001

080048a0 <_fflush_r>:
 80048a0:	b538      	push	{r3, r4, r5, lr}
 80048a2:	690b      	ldr	r3, [r1, #16]
 80048a4:	4605      	mov	r5, r0
 80048a6:	460c      	mov	r4, r1
 80048a8:	b913      	cbnz	r3, 80048b0 <_fflush_r+0x10>
 80048aa:	2500      	movs	r5, #0
 80048ac:	4628      	mov	r0, r5
 80048ae:	bd38      	pop	{r3, r4, r5, pc}
 80048b0:	b118      	cbz	r0, 80048ba <_fflush_r+0x1a>
 80048b2:	6983      	ldr	r3, [r0, #24]
 80048b4:	b90b      	cbnz	r3, 80048ba <_fflush_r+0x1a>
 80048b6:	f000 f887 	bl	80049c8 <__sinit>
 80048ba:	4b14      	ldr	r3, [pc, #80]	; (800490c <_fflush_r+0x6c>)
 80048bc:	429c      	cmp	r4, r3
 80048be:	d11b      	bne.n	80048f8 <_fflush_r+0x58>
 80048c0:	686c      	ldr	r4, [r5, #4]
 80048c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d0ef      	beq.n	80048aa <_fflush_r+0xa>
 80048ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80048cc:	07d0      	lsls	r0, r2, #31
 80048ce:	d404      	bmi.n	80048da <_fflush_r+0x3a>
 80048d0:	0599      	lsls	r1, r3, #22
 80048d2:	d402      	bmi.n	80048da <_fflush_r+0x3a>
 80048d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048d6:	f000 f93a 	bl	8004b4e <__retarget_lock_acquire_recursive>
 80048da:	4628      	mov	r0, r5
 80048dc:	4621      	mov	r1, r4
 80048de:	f7ff ff5d 	bl	800479c <__sflush_r>
 80048e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048e4:	4605      	mov	r5, r0
 80048e6:	07da      	lsls	r2, r3, #31
 80048e8:	d4e0      	bmi.n	80048ac <_fflush_r+0xc>
 80048ea:	89a3      	ldrh	r3, [r4, #12]
 80048ec:	059b      	lsls	r3, r3, #22
 80048ee:	d4dd      	bmi.n	80048ac <_fflush_r+0xc>
 80048f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048f2:	f000 f92d 	bl	8004b50 <__retarget_lock_release_recursive>
 80048f6:	e7d9      	b.n	80048ac <_fflush_r+0xc>
 80048f8:	4b05      	ldr	r3, [pc, #20]	; (8004910 <_fflush_r+0x70>)
 80048fa:	429c      	cmp	r4, r3
 80048fc:	d101      	bne.n	8004902 <_fflush_r+0x62>
 80048fe:	68ac      	ldr	r4, [r5, #8]
 8004900:	e7df      	b.n	80048c2 <_fflush_r+0x22>
 8004902:	4b04      	ldr	r3, [pc, #16]	; (8004914 <_fflush_r+0x74>)
 8004904:	429c      	cmp	r4, r3
 8004906:	bf08      	it	eq
 8004908:	68ec      	ldreq	r4, [r5, #12]
 800490a:	e7da      	b.n	80048c2 <_fflush_r+0x22>
 800490c:	08005e4c 	.word	0x08005e4c
 8004910:	08005e6c 	.word	0x08005e6c
 8004914:	08005e2c 	.word	0x08005e2c

08004918 <std>:
 8004918:	2300      	movs	r3, #0
 800491a:	b510      	push	{r4, lr}
 800491c:	4604      	mov	r4, r0
 800491e:	e9c0 3300 	strd	r3, r3, [r0]
 8004922:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004926:	6083      	str	r3, [r0, #8]
 8004928:	8181      	strh	r1, [r0, #12]
 800492a:	6643      	str	r3, [r0, #100]	; 0x64
 800492c:	81c2      	strh	r2, [r0, #14]
 800492e:	6183      	str	r3, [r0, #24]
 8004930:	4619      	mov	r1, r3
 8004932:	2208      	movs	r2, #8
 8004934:	305c      	adds	r0, #92	; 0x5c
 8004936:	f7ff fc41 	bl	80041bc <memset>
 800493a:	4b05      	ldr	r3, [pc, #20]	; (8004950 <std+0x38>)
 800493c:	6224      	str	r4, [r4, #32]
 800493e:	6263      	str	r3, [r4, #36]	; 0x24
 8004940:	4b04      	ldr	r3, [pc, #16]	; (8004954 <std+0x3c>)
 8004942:	62a3      	str	r3, [r4, #40]	; 0x28
 8004944:	4b04      	ldr	r3, [pc, #16]	; (8004958 <std+0x40>)
 8004946:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004948:	4b04      	ldr	r3, [pc, #16]	; (800495c <std+0x44>)
 800494a:	6323      	str	r3, [r4, #48]	; 0x30
 800494c:	bd10      	pop	{r4, pc}
 800494e:	bf00      	nop
 8004950:	080053e1 	.word	0x080053e1
 8004954:	08005403 	.word	0x08005403
 8004958:	0800543b 	.word	0x0800543b
 800495c:	0800545f 	.word	0x0800545f

08004960 <_cleanup_r>:
 8004960:	4901      	ldr	r1, [pc, #4]	; (8004968 <_cleanup_r+0x8>)
 8004962:	f000 b8c1 	b.w	8004ae8 <_fwalk_reent>
 8004966:	bf00      	nop
 8004968:	080048a1 	.word	0x080048a1

0800496c <__sfmoreglue>:
 800496c:	2268      	movs	r2, #104	; 0x68
 800496e:	b570      	push	{r4, r5, r6, lr}
 8004970:	1e4d      	subs	r5, r1, #1
 8004972:	4355      	muls	r5, r2
 8004974:	460e      	mov	r6, r1
 8004976:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800497a:	f000 f9bf 	bl	8004cfc <_malloc_r>
 800497e:	4604      	mov	r4, r0
 8004980:	b140      	cbz	r0, 8004994 <__sfmoreglue+0x28>
 8004982:	2100      	movs	r1, #0
 8004984:	e9c0 1600 	strd	r1, r6, [r0]
 8004988:	300c      	adds	r0, #12
 800498a:	60a0      	str	r0, [r4, #8]
 800498c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004990:	f7ff fc14 	bl	80041bc <memset>
 8004994:	4620      	mov	r0, r4
 8004996:	bd70      	pop	{r4, r5, r6, pc}

08004998 <__sfp_lock_acquire>:
 8004998:	4801      	ldr	r0, [pc, #4]	; (80049a0 <__sfp_lock_acquire+0x8>)
 800499a:	f000 b8d8 	b.w	8004b4e <__retarget_lock_acquire_recursive>
 800499e:	bf00      	nop
 80049a0:	200036e5 	.word	0x200036e5

080049a4 <__sfp_lock_release>:
 80049a4:	4801      	ldr	r0, [pc, #4]	; (80049ac <__sfp_lock_release+0x8>)
 80049a6:	f000 b8d3 	b.w	8004b50 <__retarget_lock_release_recursive>
 80049aa:	bf00      	nop
 80049ac:	200036e5 	.word	0x200036e5

080049b0 <__sinit_lock_acquire>:
 80049b0:	4801      	ldr	r0, [pc, #4]	; (80049b8 <__sinit_lock_acquire+0x8>)
 80049b2:	f000 b8cc 	b.w	8004b4e <__retarget_lock_acquire_recursive>
 80049b6:	bf00      	nop
 80049b8:	200036e6 	.word	0x200036e6

080049bc <__sinit_lock_release>:
 80049bc:	4801      	ldr	r0, [pc, #4]	; (80049c4 <__sinit_lock_release+0x8>)
 80049be:	f000 b8c7 	b.w	8004b50 <__retarget_lock_release_recursive>
 80049c2:	bf00      	nop
 80049c4:	200036e6 	.word	0x200036e6

080049c8 <__sinit>:
 80049c8:	b510      	push	{r4, lr}
 80049ca:	4604      	mov	r4, r0
 80049cc:	f7ff fff0 	bl	80049b0 <__sinit_lock_acquire>
 80049d0:	69a3      	ldr	r3, [r4, #24]
 80049d2:	b11b      	cbz	r3, 80049dc <__sinit+0x14>
 80049d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049d8:	f7ff bff0 	b.w	80049bc <__sinit_lock_release>
 80049dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80049e0:	6523      	str	r3, [r4, #80]	; 0x50
 80049e2:	4b13      	ldr	r3, [pc, #76]	; (8004a30 <__sinit+0x68>)
 80049e4:	4a13      	ldr	r2, [pc, #76]	; (8004a34 <__sinit+0x6c>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80049ea:	42a3      	cmp	r3, r4
 80049ec:	bf08      	it	eq
 80049ee:	2301      	moveq	r3, #1
 80049f0:	4620      	mov	r0, r4
 80049f2:	bf08      	it	eq
 80049f4:	61a3      	streq	r3, [r4, #24]
 80049f6:	f000 f81f 	bl	8004a38 <__sfp>
 80049fa:	6060      	str	r0, [r4, #4]
 80049fc:	4620      	mov	r0, r4
 80049fe:	f000 f81b 	bl	8004a38 <__sfp>
 8004a02:	60a0      	str	r0, [r4, #8]
 8004a04:	4620      	mov	r0, r4
 8004a06:	f000 f817 	bl	8004a38 <__sfp>
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	2104      	movs	r1, #4
 8004a0e:	60e0      	str	r0, [r4, #12]
 8004a10:	6860      	ldr	r0, [r4, #4]
 8004a12:	f7ff ff81 	bl	8004918 <std>
 8004a16:	2201      	movs	r2, #1
 8004a18:	2109      	movs	r1, #9
 8004a1a:	68a0      	ldr	r0, [r4, #8]
 8004a1c:	f7ff ff7c 	bl	8004918 <std>
 8004a20:	2202      	movs	r2, #2
 8004a22:	2112      	movs	r1, #18
 8004a24:	68e0      	ldr	r0, [r4, #12]
 8004a26:	f7ff ff77 	bl	8004918 <std>
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	61a3      	str	r3, [r4, #24]
 8004a2e:	e7d1      	b.n	80049d4 <__sinit+0xc>
 8004a30:	08005c54 	.word	0x08005c54
 8004a34:	08004961 	.word	0x08004961

08004a38 <__sfp>:
 8004a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a3a:	4607      	mov	r7, r0
 8004a3c:	f7ff ffac 	bl	8004998 <__sfp_lock_acquire>
 8004a40:	4b1e      	ldr	r3, [pc, #120]	; (8004abc <__sfp+0x84>)
 8004a42:	681e      	ldr	r6, [r3, #0]
 8004a44:	69b3      	ldr	r3, [r6, #24]
 8004a46:	b913      	cbnz	r3, 8004a4e <__sfp+0x16>
 8004a48:	4630      	mov	r0, r6
 8004a4a:	f7ff ffbd 	bl	80049c8 <__sinit>
 8004a4e:	3648      	adds	r6, #72	; 0x48
 8004a50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004a54:	3b01      	subs	r3, #1
 8004a56:	d503      	bpl.n	8004a60 <__sfp+0x28>
 8004a58:	6833      	ldr	r3, [r6, #0]
 8004a5a:	b30b      	cbz	r3, 8004aa0 <__sfp+0x68>
 8004a5c:	6836      	ldr	r6, [r6, #0]
 8004a5e:	e7f7      	b.n	8004a50 <__sfp+0x18>
 8004a60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004a64:	b9d5      	cbnz	r5, 8004a9c <__sfp+0x64>
 8004a66:	4b16      	ldr	r3, [pc, #88]	; (8004ac0 <__sfp+0x88>)
 8004a68:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004a6c:	60e3      	str	r3, [r4, #12]
 8004a6e:	6665      	str	r5, [r4, #100]	; 0x64
 8004a70:	f000 f86c 	bl	8004b4c <__retarget_lock_init_recursive>
 8004a74:	f7ff ff96 	bl	80049a4 <__sfp_lock_release>
 8004a78:	2208      	movs	r2, #8
 8004a7a:	4629      	mov	r1, r5
 8004a7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004a80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004a84:	6025      	str	r5, [r4, #0]
 8004a86:	61a5      	str	r5, [r4, #24]
 8004a88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004a8c:	f7ff fb96 	bl	80041bc <memset>
 8004a90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004a94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004a98:	4620      	mov	r0, r4
 8004a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a9c:	3468      	adds	r4, #104	; 0x68
 8004a9e:	e7d9      	b.n	8004a54 <__sfp+0x1c>
 8004aa0:	2104      	movs	r1, #4
 8004aa2:	4638      	mov	r0, r7
 8004aa4:	f7ff ff62 	bl	800496c <__sfmoreglue>
 8004aa8:	4604      	mov	r4, r0
 8004aaa:	6030      	str	r0, [r6, #0]
 8004aac:	2800      	cmp	r0, #0
 8004aae:	d1d5      	bne.n	8004a5c <__sfp+0x24>
 8004ab0:	f7ff ff78 	bl	80049a4 <__sfp_lock_release>
 8004ab4:	230c      	movs	r3, #12
 8004ab6:	603b      	str	r3, [r7, #0]
 8004ab8:	e7ee      	b.n	8004a98 <__sfp+0x60>
 8004aba:	bf00      	nop
 8004abc:	08005c54 	.word	0x08005c54
 8004ac0:	ffff0001 	.word	0xffff0001

08004ac4 <fiprintf>:
 8004ac4:	b40e      	push	{r1, r2, r3}
 8004ac6:	b503      	push	{r0, r1, lr}
 8004ac8:	4601      	mov	r1, r0
 8004aca:	ab03      	add	r3, sp, #12
 8004acc:	4805      	ldr	r0, [pc, #20]	; (8004ae4 <fiprintf+0x20>)
 8004ace:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ad2:	6800      	ldr	r0, [r0, #0]
 8004ad4:	9301      	str	r3, [sp, #4]
 8004ad6:	f000 f9ad 	bl	8004e34 <_vfiprintf_r>
 8004ada:	b002      	add	sp, #8
 8004adc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ae0:	b003      	add	sp, #12
 8004ae2:	4770      	bx	lr
 8004ae4:	20000434 	.word	0x20000434

08004ae8 <_fwalk_reent>:
 8004ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004aec:	4606      	mov	r6, r0
 8004aee:	4688      	mov	r8, r1
 8004af0:	2700      	movs	r7, #0
 8004af2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004af6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004afa:	f1b9 0901 	subs.w	r9, r9, #1
 8004afe:	d505      	bpl.n	8004b0c <_fwalk_reent+0x24>
 8004b00:	6824      	ldr	r4, [r4, #0]
 8004b02:	2c00      	cmp	r4, #0
 8004b04:	d1f7      	bne.n	8004af6 <_fwalk_reent+0xe>
 8004b06:	4638      	mov	r0, r7
 8004b08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b0c:	89ab      	ldrh	r3, [r5, #12]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d907      	bls.n	8004b22 <_fwalk_reent+0x3a>
 8004b12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b16:	3301      	adds	r3, #1
 8004b18:	d003      	beq.n	8004b22 <_fwalk_reent+0x3a>
 8004b1a:	4629      	mov	r1, r5
 8004b1c:	4630      	mov	r0, r6
 8004b1e:	47c0      	blx	r8
 8004b20:	4307      	orrs	r7, r0
 8004b22:	3568      	adds	r5, #104	; 0x68
 8004b24:	e7e9      	b.n	8004afa <_fwalk_reent+0x12>
	...

08004b28 <_gettimeofday_r>:
 8004b28:	b538      	push	{r3, r4, r5, lr}
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	4d06      	ldr	r5, [pc, #24]	; (8004b48 <_gettimeofday_r+0x20>)
 8004b2e:	4604      	mov	r4, r0
 8004b30:	4608      	mov	r0, r1
 8004b32:	4611      	mov	r1, r2
 8004b34:	602b      	str	r3, [r5, #0]
 8004b36:	f000 fd65 	bl	8005604 <_gettimeofday>
 8004b3a:	1c43      	adds	r3, r0, #1
 8004b3c:	d102      	bne.n	8004b44 <_gettimeofday_r+0x1c>
 8004b3e:	682b      	ldr	r3, [r5, #0]
 8004b40:	b103      	cbz	r3, 8004b44 <_gettimeofday_r+0x1c>
 8004b42:	6023      	str	r3, [r4, #0]
 8004b44:	bd38      	pop	{r3, r4, r5, pc}
 8004b46:	bf00      	nop
 8004b48:	200036f0 	.word	0x200036f0

08004b4c <__retarget_lock_init_recursive>:
 8004b4c:	4770      	bx	lr

08004b4e <__retarget_lock_acquire_recursive>:
 8004b4e:	4770      	bx	lr

08004b50 <__retarget_lock_release_recursive>:
 8004b50:	4770      	bx	lr

08004b52 <__swhatbuf_r>:
 8004b52:	b570      	push	{r4, r5, r6, lr}
 8004b54:	460e      	mov	r6, r1
 8004b56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b5a:	4614      	mov	r4, r2
 8004b5c:	2900      	cmp	r1, #0
 8004b5e:	461d      	mov	r5, r3
 8004b60:	b096      	sub	sp, #88	; 0x58
 8004b62:	da08      	bge.n	8004b76 <__swhatbuf_r+0x24>
 8004b64:	2200      	movs	r2, #0
 8004b66:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004b6a:	602a      	str	r2, [r5, #0]
 8004b6c:	061a      	lsls	r2, r3, #24
 8004b6e:	d410      	bmi.n	8004b92 <__swhatbuf_r+0x40>
 8004b70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b74:	e00e      	b.n	8004b94 <__swhatbuf_r+0x42>
 8004b76:	466a      	mov	r2, sp
 8004b78:	f000 fca0 	bl	80054bc <_fstat_r>
 8004b7c:	2800      	cmp	r0, #0
 8004b7e:	dbf1      	blt.n	8004b64 <__swhatbuf_r+0x12>
 8004b80:	9a01      	ldr	r2, [sp, #4]
 8004b82:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004b86:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004b8a:	425a      	negs	r2, r3
 8004b8c:	415a      	adcs	r2, r3
 8004b8e:	602a      	str	r2, [r5, #0]
 8004b90:	e7ee      	b.n	8004b70 <__swhatbuf_r+0x1e>
 8004b92:	2340      	movs	r3, #64	; 0x40
 8004b94:	2000      	movs	r0, #0
 8004b96:	6023      	str	r3, [r4, #0]
 8004b98:	b016      	add	sp, #88	; 0x58
 8004b9a:	bd70      	pop	{r4, r5, r6, pc}

08004b9c <__smakebuf_r>:
 8004b9c:	898b      	ldrh	r3, [r1, #12]
 8004b9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ba0:	079d      	lsls	r5, r3, #30
 8004ba2:	4606      	mov	r6, r0
 8004ba4:	460c      	mov	r4, r1
 8004ba6:	d507      	bpl.n	8004bb8 <__smakebuf_r+0x1c>
 8004ba8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004bac:	6023      	str	r3, [r4, #0]
 8004bae:	6123      	str	r3, [r4, #16]
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	6163      	str	r3, [r4, #20]
 8004bb4:	b002      	add	sp, #8
 8004bb6:	bd70      	pop	{r4, r5, r6, pc}
 8004bb8:	466a      	mov	r2, sp
 8004bba:	ab01      	add	r3, sp, #4
 8004bbc:	f7ff ffc9 	bl	8004b52 <__swhatbuf_r>
 8004bc0:	9900      	ldr	r1, [sp, #0]
 8004bc2:	4605      	mov	r5, r0
 8004bc4:	4630      	mov	r0, r6
 8004bc6:	f000 f899 	bl	8004cfc <_malloc_r>
 8004bca:	b948      	cbnz	r0, 8004be0 <__smakebuf_r+0x44>
 8004bcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bd0:	059a      	lsls	r2, r3, #22
 8004bd2:	d4ef      	bmi.n	8004bb4 <__smakebuf_r+0x18>
 8004bd4:	f023 0303 	bic.w	r3, r3, #3
 8004bd8:	f043 0302 	orr.w	r3, r3, #2
 8004bdc:	81a3      	strh	r3, [r4, #12]
 8004bde:	e7e3      	b.n	8004ba8 <__smakebuf_r+0xc>
 8004be0:	4b0d      	ldr	r3, [pc, #52]	; (8004c18 <__smakebuf_r+0x7c>)
 8004be2:	62b3      	str	r3, [r6, #40]	; 0x28
 8004be4:	89a3      	ldrh	r3, [r4, #12]
 8004be6:	6020      	str	r0, [r4, #0]
 8004be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bec:	81a3      	strh	r3, [r4, #12]
 8004bee:	9b00      	ldr	r3, [sp, #0]
 8004bf0:	6120      	str	r0, [r4, #16]
 8004bf2:	6163      	str	r3, [r4, #20]
 8004bf4:	9b01      	ldr	r3, [sp, #4]
 8004bf6:	b15b      	cbz	r3, 8004c10 <__smakebuf_r+0x74>
 8004bf8:	4630      	mov	r0, r6
 8004bfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bfe:	f000 fc6f 	bl	80054e0 <_isatty_r>
 8004c02:	b128      	cbz	r0, 8004c10 <__smakebuf_r+0x74>
 8004c04:	89a3      	ldrh	r3, [r4, #12]
 8004c06:	f023 0303 	bic.w	r3, r3, #3
 8004c0a:	f043 0301 	orr.w	r3, r3, #1
 8004c0e:	81a3      	strh	r3, [r4, #12]
 8004c10:	89a0      	ldrh	r0, [r4, #12]
 8004c12:	4305      	orrs	r5, r0
 8004c14:	81a5      	strh	r5, [r4, #12]
 8004c16:	e7cd      	b.n	8004bb4 <__smakebuf_r+0x18>
 8004c18:	08004961 	.word	0x08004961

08004c1c <malloc>:
 8004c1c:	4b02      	ldr	r3, [pc, #8]	; (8004c28 <malloc+0xc>)
 8004c1e:	4601      	mov	r1, r0
 8004c20:	6818      	ldr	r0, [r3, #0]
 8004c22:	f000 b86b 	b.w	8004cfc <_malloc_r>
 8004c26:	bf00      	nop
 8004c28:	20000434 	.word	0x20000434

08004c2c <_free_r>:
 8004c2c:	b538      	push	{r3, r4, r5, lr}
 8004c2e:	4605      	mov	r5, r0
 8004c30:	2900      	cmp	r1, #0
 8004c32:	d040      	beq.n	8004cb6 <_free_r+0x8a>
 8004c34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c38:	1f0c      	subs	r4, r1, #4
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	bfb8      	it	lt
 8004c3e:	18e4      	addlt	r4, r4, r3
 8004c40:	f000 fc7e 	bl	8005540 <__malloc_lock>
 8004c44:	4a1c      	ldr	r2, [pc, #112]	; (8004cb8 <_free_r+0x8c>)
 8004c46:	6813      	ldr	r3, [r2, #0]
 8004c48:	b933      	cbnz	r3, 8004c58 <_free_r+0x2c>
 8004c4a:	6063      	str	r3, [r4, #4]
 8004c4c:	6014      	str	r4, [r2, #0]
 8004c4e:	4628      	mov	r0, r5
 8004c50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c54:	f000 bc7a 	b.w	800554c <__malloc_unlock>
 8004c58:	42a3      	cmp	r3, r4
 8004c5a:	d908      	bls.n	8004c6e <_free_r+0x42>
 8004c5c:	6820      	ldr	r0, [r4, #0]
 8004c5e:	1821      	adds	r1, r4, r0
 8004c60:	428b      	cmp	r3, r1
 8004c62:	bf01      	itttt	eq
 8004c64:	6819      	ldreq	r1, [r3, #0]
 8004c66:	685b      	ldreq	r3, [r3, #4]
 8004c68:	1809      	addeq	r1, r1, r0
 8004c6a:	6021      	streq	r1, [r4, #0]
 8004c6c:	e7ed      	b.n	8004c4a <_free_r+0x1e>
 8004c6e:	461a      	mov	r2, r3
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	b10b      	cbz	r3, 8004c78 <_free_r+0x4c>
 8004c74:	42a3      	cmp	r3, r4
 8004c76:	d9fa      	bls.n	8004c6e <_free_r+0x42>
 8004c78:	6811      	ldr	r1, [r2, #0]
 8004c7a:	1850      	adds	r0, r2, r1
 8004c7c:	42a0      	cmp	r0, r4
 8004c7e:	d10b      	bne.n	8004c98 <_free_r+0x6c>
 8004c80:	6820      	ldr	r0, [r4, #0]
 8004c82:	4401      	add	r1, r0
 8004c84:	1850      	adds	r0, r2, r1
 8004c86:	4283      	cmp	r3, r0
 8004c88:	6011      	str	r1, [r2, #0]
 8004c8a:	d1e0      	bne.n	8004c4e <_free_r+0x22>
 8004c8c:	6818      	ldr	r0, [r3, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	4401      	add	r1, r0
 8004c92:	6011      	str	r1, [r2, #0]
 8004c94:	6053      	str	r3, [r2, #4]
 8004c96:	e7da      	b.n	8004c4e <_free_r+0x22>
 8004c98:	d902      	bls.n	8004ca0 <_free_r+0x74>
 8004c9a:	230c      	movs	r3, #12
 8004c9c:	602b      	str	r3, [r5, #0]
 8004c9e:	e7d6      	b.n	8004c4e <_free_r+0x22>
 8004ca0:	6820      	ldr	r0, [r4, #0]
 8004ca2:	1821      	adds	r1, r4, r0
 8004ca4:	428b      	cmp	r3, r1
 8004ca6:	bf01      	itttt	eq
 8004ca8:	6819      	ldreq	r1, [r3, #0]
 8004caa:	685b      	ldreq	r3, [r3, #4]
 8004cac:	1809      	addeq	r1, r1, r0
 8004cae:	6021      	streq	r1, [r4, #0]
 8004cb0:	6063      	str	r3, [r4, #4]
 8004cb2:	6054      	str	r4, [r2, #4]
 8004cb4:	e7cb      	b.n	8004c4e <_free_r+0x22>
 8004cb6:	bd38      	pop	{r3, r4, r5, pc}
 8004cb8:	200036e8 	.word	0x200036e8

08004cbc <sbrk_aligned>:
 8004cbc:	b570      	push	{r4, r5, r6, lr}
 8004cbe:	4e0e      	ldr	r6, [pc, #56]	; (8004cf8 <sbrk_aligned+0x3c>)
 8004cc0:	460c      	mov	r4, r1
 8004cc2:	6831      	ldr	r1, [r6, #0]
 8004cc4:	4605      	mov	r5, r0
 8004cc6:	b911      	cbnz	r1, 8004cce <sbrk_aligned+0x12>
 8004cc8:	f000 fb7a 	bl	80053c0 <_sbrk_r>
 8004ccc:	6030      	str	r0, [r6, #0]
 8004cce:	4621      	mov	r1, r4
 8004cd0:	4628      	mov	r0, r5
 8004cd2:	f000 fb75 	bl	80053c0 <_sbrk_r>
 8004cd6:	1c43      	adds	r3, r0, #1
 8004cd8:	d00a      	beq.n	8004cf0 <sbrk_aligned+0x34>
 8004cda:	1cc4      	adds	r4, r0, #3
 8004cdc:	f024 0403 	bic.w	r4, r4, #3
 8004ce0:	42a0      	cmp	r0, r4
 8004ce2:	d007      	beq.n	8004cf4 <sbrk_aligned+0x38>
 8004ce4:	1a21      	subs	r1, r4, r0
 8004ce6:	4628      	mov	r0, r5
 8004ce8:	f000 fb6a 	bl	80053c0 <_sbrk_r>
 8004cec:	3001      	adds	r0, #1
 8004cee:	d101      	bne.n	8004cf4 <sbrk_aligned+0x38>
 8004cf0:	f04f 34ff 	mov.w	r4, #4294967295
 8004cf4:	4620      	mov	r0, r4
 8004cf6:	bd70      	pop	{r4, r5, r6, pc}
 8004cf8:	200036ec 	.word	0x200036ec

08004cfc <_malloc_r>:
 8004cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d00:	1ccd      	adds	r5, r1, #3
 8004d02:	f025 0503 	bic.w	r5, r5, #3
 8004d06:	3508      	adds	r5, #8
 8004d08:	2d0c      	cmp	r5, #12
 8004d0a:	bf38      	it	cc
 8004d0c:	250c      	movcc	r5, #12
 8004d0e:	2d00      	cmp	r5, #0
 8004d10:	4607      	mov	r7, r0
 8004d12:	db01      	blt.n	8004d18 <_malloc_r+0x1c>
 8004d14:	42a9      	cmp	r1, r5
 8004d16:	d905      	bls.n	8004d24 <_malloc_r+0x28>
 8004d18:	230c      	movs	r3, #12
 8004d1a:	2600      	movs	r6, #0
 8004d1c:	603b      	str	r3, [r7, #0]
 8004d1e:	4630      	mov	r0, r6
 8004d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d24:	4e2e      	ldr	r6, [pc, #184]	; (8004de0 <_malloc_r+0xe4>)
 8004d26:	f000 fc0b 	bl	8005540 <__malloc_lock>
 8004d2a:	6833      	ldr	r3, [r6, #0]
 8004d2c:	461c      	mov	r4, r3
 8004d2e:	bb34      	cbnz	r4, 8004d7e <_malloc_r+0x82>
 8004d30:	4629      	mov	r1, r5
 8004d32:	4638      	mov	r0, r7
 8004d34:	f7ff ffc2 	bl	8004cbc <sbrk_aligned>
 8004d38:	1c43      	adds	r3, r0, #1
 8004d3a:	4604      	mov	r4, r0
 8004d3c:	d14d      	bne.n	8004dda <_malloc_r+0xde>
 8004d3e:	6834      	ldr	r4, [r6, #0]
 8004d40:	4626      	mov	r6, r4
 8004d42:	2e00      	cmp	r6, #0
 8004d44:	d140      	bne.n	8004dc8 <_malloc_r+0xcc>
 8004d46:	6823      	ldr	r3, [r4, #0]
 8004d48:	4631      	mov	r1, r6
 8004d4a:	4638      	mov	r0, r7
 8004d4c:	eb04 0803 	add.w	r8, r4, r3
 8004d50:	f000 fb36 	bl	80053c0 <_sbrk_r>
 8004d54:	4580      	cmp	r8, r0
 8004d56:	d13a      	bne.n	8004dce <_malloc_r+0xd2>
 8004d58:	6821      	ldr	r1, [r4, #0]
 8004d5a:	3503      	adds	r5, #3
 8004d5c:	1a6d      	subs	r5, r5, r1
 8004d5e:	f025 0503 	bic.w	r5, r5, #3
 8004d62:	3508      	adds	r5, #8
 8004d64:	2d0c      	cmp	r5, #12
 8004d66:	bf38      	it	cc
 8004d68:	250c      	movcc	r5, #12
 8004d6a:	4638      	mov	r0, r7
 8004d6c:	4629      	mov	r1, r5
 8004d6e:	f7ff ffa5 	bl	8004cbc <sbrk_aligned>
 8004d72:	3001      	adds	r0, #1
 8004d74:	d02b      	beq.n	8004dce <_malloc_r+0xd2>
 8004d76:	6823      	ldr	r3, [r4, #0]
 8004d78:	442b      	add	r3, r5
 8004d7a:	6023      	str	r3, [r4, #0]
 8004d7c:	e00e      	b.n	8004d9c <_malloc_r+0xa0>
 8004d7e:	6822      	ldr	r2, [r4, #0]
 8004d80:	1b52      	subs	r2, r2, r5
 8004d82:	d41e      	bmi.n	8004dc2 <_malloc_r+0xc6>
 8004d84:	2a0b      	cmp	r2, #11
 8004d86:	d916      	bls.n	8004db6 <_malloc_r+0xba>
 8004d88:	1961      	adds	r1, r4, r5
 8004d8a:	42a3      	cmp	r3, r4
 8004d8c:	6025      	str	r5, [r4, #0]
 8004d8e:	bf18      	it	ne
 8004d90:	6059      	strne	r1, [r3, #4]
 8004d92:	6863      	ldr	r3, [r4, #4]
 8004d94:	bf08      	it	eq
 8004d96:	6031      	streq	r1, [r6, #0]
 8004d98:	5162      	str	r2, [r4, r5]
 8004d9a:	604b      	str	r3, [r1, #4]
 8004d9c:	4638      	mov	r0, r7
 8004d9e:	f104 060b 	add.w	r6, r4, #11
 8004da2:	f000 fbd3 	bl	800554c <__malloc_unlock>
 8004da6:	f026 0607 	bic.w	r6, r6, #7
 8004daa:	1d23      	adds	r3, r4, #4
 8004dac:	1af2      	subs	r2, r6, r3
 8004dae:	d0b6      	beq.n	8004d1e <_malloc_r+0x22>
 8004db0:	1b9b      	subs	r3, r3, r6
 8004db2:	50a3      	str	r3, [r4, r2]
 8004db4:	e7b3      	b.n	8004d1e <_malloc_r+0x22>
 8004db6:	6862      	ldr	r2, [r4, #4]
 8004db8:	42a3      	cmp	r3, r4
 8004dba:	bf0c      	ite	eq
 8004dbc:	6032      	streq	r2, [r6, #0]
 8004dbe:	605a      	strne	r2, [r3, #4]
 8004dc0:	e7ec      	b.n	8004d9c <_malloc_r+0xa0>
 8004dc2:	4623      	mov	r3, r4
 8004dc4:	6864      	ldr	r4, [r4, #4]
 8004dc6:	e7b2      	b.n	8004d2e <_malloc_r+0x32>
 8004dc8:	4634      	mov	r4, r6
 8004dca:	6876      	ldr	r6, [r6, #4]
 8004dcc:	e7b9      	b.n	8004d42 <_malloc_r+0x46>
 8004dce:	230c      	movs	r3, #12
 8004dd0:	4638      	mov	r0, r7
 8004dd2:	603b      	str	r3, [r7, #0]
 8004dd4:	f000 fbba 	bl	800554c <__malloc_unlock>
 8004dd8:	e7a1      	b.n	8004d1e <_malloc_r+0x22>
 8004dda:	6025      	str	r5, [r4, #0]
 8004ddc:	e7de      	b.n	8004d9c <_malloc_r+0xa0>
 8004dde:	bf00      	nop
 8004de0:	200036e8 	.word	0x200036e8

08004de4 <__sfputc_r>:
 8004de4:	6893      	ldr	r3, [r2, #8]
 8004de6:	b410      	push	{r4}
 8004de8:	3b01      	subs	r3, #1
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	6093      	str	r3, [r2, #8]
 8004dee:	da07      	bge.n	8004e00 <__sfputc_r+0x1c>
 8004df0:	6994      	ldr	r4, [r2, #24]
 8004df2:	42a3      	cmp	r3, r4
 8004df4:	db01      	blt.n	8004dfa <__sfputc_r+0x16>
 8004df6:	290a      	cmp	r1, #10
 8004df8:	d102      	bne.n	8004e00 <__sfputc_r+0x1c>
 8004dfa:	bc10      	pop	{r4}
 8004dfc:	f7ff bbf0 	b.w	80045e0 <__swbuf_r>
 8004e00:	6813      	ldr	r3, [r2, #0]
 8004e02:	1c58      	adds	r0, r3, #1
 8004e04:	6010      	str	r0, [r2, #0]
 8004e06:	7019      	strb	r1, [r3, #0]
 8004e08:	4608      	mov	r0, r1
 8004e0a:	bc10      	pop	{r4}
 8004e0c:	4770      	bx	lr

08004e0e <__sfputs_r>:
 8004e0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e10:	4606      	mov	r6, r0
 8004e12:	460f      	mov	r7, r1
 8004e14:	4614      	mov	r4, r2
 8004e16:	18d5      	adds	r5, r2, r3
 8004e18:	42ac      	cmp	r4, r5
 8004e1a:	d101      	bne.n	8004e20 <__sfputs_r+0x12>
 8004e1c:	2000      	movs	r0, #0
 8004e1e:	e007      	b.n	8004e30 <__sfputs_r+0x22>
 8004e20:	463a      	mov	r2, r7
 8004e22:	4630      	mov	r0, r6
 8004e24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e28:	f7ff ffdc 	bl	8004de4 <__sfputc_r>
 8004e2c:	1c43      	adds	r3, r0, #1
 8004e2e:	d1f3      	bne.n	8004e18 <__sfputs_r+0xa>
 8004e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004e34 <_vfiprintf_r>:
 8004e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e38:	460d      	mov	r5, r1
 8004e3a:	4614      	mov	r4, r2
 8004e3c:	4698      	mov	r8, r3
 8004e3e:	4606      	mov	r6, r0
 8004e40:	b09d      	sub	sp, #116	; 0x74
 8004e42:	b118      	cbz	r0, 8004e4c <_vfiprintf_r+0x18>
 8004e44:	6983      	ldr	r3, [r0, #24]
 8004e46:	b90b      	cbnz	r3, 8004e4c <_vfiprintf_r+0x18>
 8004e48:	f7ff fdbe 	bl	80049c8 <__sinit>
 8004e4c:	4b89      	ldr	r3, [pc, #548]	; (8005074 <_vfiprintf_r+0x240>)
 8004e4e:	429d      	cmp	r5, r3
 8004e50:	d11b      	bne.n	8004e8a <_vfiprintf_r+0x56>
 8004e52:	6875      	ldr	r5, [r6, #4]
 8004e54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e56:	07d9      	lsls	r1, r3, #31
 8004e58:	d405      	bmi.n	8004e66 <_vfiprintf_r+0x32>
 8004e5a:	89ab      	ldrh	r3, [r5, #12]
 8004e5c:	059a      	lsls	r2, r3, #22
 8004e5e:	d402      	bmi.n	8004e66 <_vfiprintf_r+0x32>
 8004e60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e62:	f7ff fe74 	bl	8004b4e <__retarget_lock_acquire_recursive>
 8004e66:	89ab      	ldrh	r3, [r5, #12]
 8004e68:	071b      	lsls	r3, r3, #28
 8004e6a:	d501      	bpl.n	8004e70 <_vfiprintf_r+0x3c>
 8004e6c:	692b      	ldr	r3, [r5, #16]
 8004e6e:	b9eb      	cbnz	r3, 8004eac <_vfiprintf_r+0x78>
 8004e70:	4629      	mov	r1, r5
 8004e72:	4630      	mov	r0, r6
 8004e74:	f7ff fc06 	bl	8004684 <__swsetup_r>
 8004e78:	b1c0      	cbz	r0, 8004eac <_vfiprintf_r+0x78>
 8004e7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e7c:	07dc      	lsls	r4, r3, #31
 8004e7e:	d50e      	bpl.n	8004e9e <_vfiprintf_r+0x6a>
 8004e80:	f04f 30ff 	mov.w	r0, #4294967295
 8004e84:	b01d      	add	sp, #116	; 0x74
 8004e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e8a:	4b7b      	ldr	r3, [pc, #492]	; (8005078 <_vfiprintf_r+0x244>)
 8004e8c:	429d      	cmp	r5, r3
 8004e8e:	d101      	bne.n	8004e94 <_vfiprintf_r+0x60>
 8004e90:	68b5      	ldr	r5, [r6, #8]
 8004e92:	e7df      	b.n	8004e54 <_vfiprintf_r+0x20>
 8004e94:	4b79      	ldr	r3, [pc, #484]	; (800507c <_vfiprintf_r+0x248>)
 8004e96:	429d      	cmp	r5, r3
 8004e98:	bf08      	it	eq
 8004e9a:	68f5      	ldreq	r5, [r6, #12]
 8004e9c:	e7da      	b.n	8004e54 <_vfiprintf_r+0x20>
 8004e9e:	89ab      	ldrh	r3, [r5, #12]
 8004ea0:	0598      	lsls	r0, r3, #22
 8004ea2:	d4ed      	bmi.n	8004e80 <_vfiprintf_r+0x4c>
 8004ea4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ea6:	f7ff fe53 	bl	8004b50 <__retarget_lock_release_recursive>
 8004eaa:	e7e9      	b.n	8004e80 <_vfiprintf_r+0x4c>
 8004eac:	2300      	movs	r3, #0
 8004eae:	9309      	str	r3, [sp, #36]	; 0x24
 8004eb0:	2320      	movs	r3, #32
 8004eb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004eb6:	2330      	movs	r3, #48	; 0x30
 8004eb8:	f04f 0901 	mov.w	r9, #1
 8004ebc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ec0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005080 <_vfiprintf_r+0x24c>
 8004ec4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ec8:	4623      	mov	r3, r4
 8004eca:	469a      	mov	sl, r3
 8004ecc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ed0:	b10a      	cbz	r2, 8004ed6 <_vfiprintf_r+0xa2>
 8004ed2:	2a25      	cmp	r2, #37	; 0x25
 8004ed4:	d1f9      	bne.n	8004eca <_vfiprintf_r+0x96>
 8004ed6:	ebba 0b04 	subs.w	fp, sl, r4
 8004eda:	d00b      	beq.n	8004ef4 <_vfiprintf_r+0xc0>
 8004edc:	465b      	mov	r3, fp
 8004ede:	4622      	mov	r2, r4
 8004ee0:	4629      	mov	r1, r5
 8004ee2:	4630      	mov	r0, r6
 8004ee4:	f7ff ff93 	bl	8004e0e <__sfputs_r>
 8004ee8:	3001      	adds	r0, #1
 8004eea:	f000 80aa 	beq.w	8005042 <_vfiprintf_r+0x20e>
 8004eee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ef0:	445a      	add	r2, fp
 8004ef2:	9209      	str	r2, [sp, #36]	; 0x24
 8004ef4:	f89a 3000 	ldrb.w	r3, [sl]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f000 80a2 	beq.w	8005042 <_vfiprintf_r+0x20e>
 8004efe:	2300      	movs	r3, #0
 8004f00:	f04f 32ff 	mov.w	r2, #4294967295
 8004f04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f08:	f10a 0a01 	add.w	sl, sl, #1
 8004f0c:	9304      	str	r3, [sp, #16]
 8004f0e:	9307      	str	r3, [sp, #28]
 8004f10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f14:	931a      	str	r3, [sp, #104]	; 0x68
 8004f16:	4654      	mov	r4, sl
 8004f18:	2205      	movs	r2, #5
 8004f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f1e:	4858      	ldr	r0, [pc, #352]	; (8005080 <_vfiprintf_r+0x24c>)
 8004f20:	f000 fb00 	bl	8005524 <memchr>
 8004f24:	9a04      	ldr	r2, [sp, #16]
 8004f26:	b9d8      	cbnz	r0, 8004f60 <_vfiprintf_r+0x12c>
 8004f28:	06d1      	lsls	r1, r2, #27
 8004f2a:	bf44      	itt	mi
 8004f2c:	2320      	movmi	r3, #32
 8004f2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f32:	0713      	lsls	r3, r2, #28
 8004f34:	bf44      	itt	mi
 8004f36:	232b      	movmi	r3, #43	; 0x2b
 8004f38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f3c:	f89a 3000 	ldrb.w	r3, [sl]
 8004f40:	2b2a      	cmp	r3, #42	; 0x2a
 8004f42:	d015      	beq.n	8004f70 <_vfiprintf_r+0x13c>
 8004f44:	4654      	mov	r4, sl
 8004f46:	2000      	movs	r0, #0
 8004f48:	f04f 0c0a 	mov.w	ip, #10
 8004f4c:	9a07      	ldr	r2, [sp, #28]
 8004f4e:	4621      	mov	r1, r4
 8004f50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f54:	3b30      	subs	r3, #48	; 0x30
 8004f56:	2b09      	cmp	r3, #9
 8004f58:	d94e      	bls.n	8004ff8 <_vfiprintf_r+0x1c4>
 8004f5a:	b1b0      	cbz	r0, 8004f8a <_vfiprintf_r+0x156>
 8004f5c:	9207      	str	r2, [sp, #28]
 8004f5e:	e014      	b.n	8004f8a <_vfiprintf_r+0x156>
 8004f60:	eba0 0308 	sub.w	r3, r0, r8
 8004f64:	fa09 f303 	lsl.w	r3, r9, r3
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	46a2      	mov	sl, r4
 8004f6c:	9304      	str	r3, [sp, #16]
 8004f6e:	e7d2      	b.n	8004f16 <_vfiprintf_r+0xe2>
 8004f70:	9b03      	ldr	r3, [sp, #12]
 8004f72:	1d19      	adds	r1, r3, #4
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	9103      	str	r1, [sp, #12]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	bfbb      	ittet	lt
 8004f7c:	425b      	neglt	r3, r3
 8004f7e:	f042 0202 	orrlt.w	r2, r2, #2
 8004f82:	9307      	strge	r3, [sp, #28]
 8004f84:	9307      	strlt	r3, [sp, #28]
 8004f86:	bfb8      	it	lt
 8004f88:	9204      	strlt	r2, [sp, #16]
 8004f8a:	7823      	ldrb	r3, [r4, #0]
 8004f8c:	2b2e      	cmp	r3, #46	; 0x2e
 8004f8e:	d10c      	bne.n	8004faa <_vfiprintf_r+0x176>
 8004f90:	7863      	ldrb	r3, [r4, #1]
 8004f92:	2b2a      	cmp	r3, #42	; 0x2a
 8004f94:	d135      	bne.n	8005002 <_vfiprintf_r+0x1ce>
 8004f96:	9b03      	ldr	r3, [sp, #12]
 8004f98:	3402      	adds	r4, #2
 8004f9a:	1d1a      	adds	r2, r3, #4
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	9203      	str	r2, [sp, #12]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	bfb8      	it	lt
 8004fa4:	f04f 33ff 	movlt.w	r3, #4294967295
 8004fa8:	9305      	str	r3, [sp, #20]
 8004faa:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005084 <_vfiprintf_r+0x250>
 8004fae:	2203      	movs	r2, #3
 8004fb0:	4650      	mov	r0, sl
 8004fb2:	7821      	ldrb	r1, [r4, #0]
 8004fb4:	f000 fab6 	bl	8005524 <memchr>
 8004fb8:	b140      	cbz	r0, 8004fcc <_vfiprintf_r+0x198>
 8004fba:	2340      	movs	r3, #64	; 0x40
 8004fbc:	eba0 000a 	sub.w	r0, r0, sl
 8004fc0:	fa03 f000 	lsl.w	r0, r3, r0
 8004fc4:	9b04      	ldr	r3, [sp, #16]
 8004fc6:	3401      	adds	r4, #1
 8004fc8:	4303      	orrs	r3, r0
 8004fca:	9304      	str	r3, [sp, #16]
 8004fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fd0:	2206      	movs	r2, #6
 8004fd2:	482d      	ldr	r0, [pc, #180]	; (8005088 <_vfiprintf_r+0x254>)
 8004fd4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004fd8:	f000 faa4 	bl	8005524 <memchr>
 8004fdc:	2800      	cmp	r0, #0
 8004fde:	d03f      	beq.n	8005060 <_vfiprintf_r+0x22c>
 8004fe0:	4b2a      	ldr	r3, [pc, #168]	; (800508c <_vfiprintf_r+0x258>)
 8004fe2:	bb1b      	cbnz	r3, 800502c <_vfiprintf_r+0x1f8>
 8004fe4:	9b03      	ldr	r3, [sp, #12]
 8004fe6:	3307      	adds	r3, #7
 8004fe8:	f023 0307 	bic.w	r3, r3, #7
 8004fec:	3308      	adds	r3, #8
 8004fee:	9303      	str	r3, [sp, #12]
 8004ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ff2:	443b      	add	r3, r7
 8004ff4:	9309      	str	r3, [sp, #36]	; 0x24
 8004ff6:	e767      	b.n	8004ec8 <_vfiprintf_r+0x94>
 8004ff8:	460c      	mov	r4, r1
 8004ffa:	2001      	movs	r0, #1
 8004ffc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005000:	e7a5      	b.n	8004f4e <_vfiprintf_r+0x11a>
 8005002:	2300      	movs	r3, #0
 8005004:	f04f 0c0a 	mov.w	ip, #10
 8005008:	4619      	mov	r1, r3
 800500a:	3401      	adds	r4, #1
 800500c:	9305      	str	r3, [sp, #20]
 800500e:	4620      	mov	r0, r4
 8005010:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005014:	3a30      	subs	r2, #48	; 0x30
 8005016:	2a09      	cmp	r2, #9
 8005018:	d903      	bls.n	8005022 <_vfiprintf_r+0x1ee>
 800501a:	2b00      	cmp	r3, #0
 800501c:	d0c5      	beq.n	8004faa <_vfiprintf_r+0x176>
 800501e:	9105      	str	r1, [sp, #20]
 8005020:	e7c3      	b.n	8004faa <_vfiprintf_r+0x176>
 8005022:	4604      	mov	r4, r0
 8005024:	2301      	movs	r3, #1
 8005026:	fb0c 2101 	mla	r1, ip, r1, r2
 800502a:	e7f0      	b.n	800500e <_vfiprintf_r+0x1da>
 800502c:	ab03      	add	r3, sp, #12
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	462a      	mov	r2, r5
 8005032:	4630      	mov	r0, r6
 8005034:	4b16      	ldr	r3, [pc, #88]	; (8005090 <_vfiprintf_r+0x25c>)
 8005036:	a904      	add	r1, sp, #16
 8005038:	f3af 8000 	nop.w
 800503c:	4607      	mov	r7, r0
 800503e:	1c78      	adds	r0, r7, #1
 8005040:	d1d6      	bne.n	8004ff0 <_vfiprintf_r+0x1bc>
 8005042:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005044:	07d9      	lsls	r1, r3, #31
 8005046:	d405      	bmi.n	8005054 <_vfiprintf_r+0x220>
 8005048:	89ab      	ldrh	r3, [r5, #12]
 800504a:	059a      	lsls	r2, r3, #22
 800504c:	d402      	bmi.n	8005054 <_vfiprintf_r+0x220>
 800504e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005050:	f7ff fd7e 	bl	8004b50 <__retarget_lock_release_recursive>
 8005054:	89ab      	ldrh	r3, [r5, #12]
 8005056:	065b      	lsls	r3, r3, #25
 8005058:	f53f af12 	bmi.w	8004e80 <_vfiprintf_r+0x4c>
 800505c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800505e:	e711      	b.n	8004e84 <_vfiprintf_r+0x50>
 8005060:	ab03      	add	r3, sp, #12
 8005062:	9300      	str	r3, [sp, #0]
 8005064:	462a      	mov	r2, r5
 8005066:	4630      	mov	r0, r6
 8005068:	4b09      	ldr	r3, [pc, #36]	; (8005090 <_vfiprintf_r+0x25c>)
 800506a:	a904      	add	r1, sp, #16
 800506c:	f000 f882 	bl	8005174 <_printf_i>
 8005070:	e7e4      	b.n	800503c <_vfiprintf_r+0x208>
 8005072:	bf00      	nop
 8005074:	08005e4c 	.word	0x08005e4c
 8005078:	08005e6c 	.word	0x08005e6c
 800507c:	08005e2c 	.word	0x08005e2c
 8005080:	08005e8c 	.word	0x08005e8c
 8005084:	08005e92 	.word	0x08005e92
 8005088:	08005e96 	.word	0x08005e96
 800508c:	00000000 	.word	0x00000000
 8005090:	08004e0f 	.word	0x08004e0f

08005094 <_printf_common>:
 8005094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005098:	4616      	mov	r6, r2
 800509a:	4699      	mov	r9, r3
 800509c:	688a      	ldr	r2, [r1, #8]
 800509e:	690b      	ldr	r3, [r1, #16]
 80050a0:	4607      	mov	r7, r0
 80050a2:	4293      	cmp	r3, r2
 80050a4:	bfb8      	it	lt
 80050a6:	4613      	movlt	r3, r2
 80050a8:	6033      	str	r3, [r6, #0]
 80050aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050ae:	460c      	mov	r4, r1
 80050b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050b4:	b10a      	cbz	r2, 80050ba <_printf_common+0x26>
 80050b6:	3301      	adds	r3, #1
 80050b8:	6033      	str	r3, [r6, #0]
 80050ba:	6823      	ldr	r3, [r4, #0]
 80050bc:	0699      	lsls	r1, r3, #26
 80050be:	bf42      	ittt	mi
 80050c0:	6833      	ldrmi	r3, [r6, #0]
 80050c2:	3302      	addmi	r3, #2
 80050c4:	6033      	strmi	r3, [r6, #0]
 80050c6:	6825      	ldr	r5, [r4, #0]
 80050c8:	f015 0506 	ands.w	r5, r5, #6
 80050cc:	d106      	bne.n	80050dc <_printf_common+0x48>
 80050ce:	f104 0a19 	add.w	sl, r4, #25
 80050d2:	68e3      	ldr	r3, [r4, #12]
 80050d4:	6832      	ldr	r2, [r6, #0]
 80050d6:	1a9b      	subs	r3, r3, r2
 80050d8:	42ab      	cmp	r3, r5
 80050da:	dc28      	bgt.n	800512e <_printf_common+0x9a>
 80050dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80050e0:	1e13      	subs	r3, r2, #0
 80050e2:	6822      	ldr	r2, [r4, #0]
 80050e4:	bf18      	it	ne
 80050e6:	2301      	movne	r3, #1
 80050e8:	0692      	lsls	r2, r2, #26
 80050ea:	d42d      	bmi.n	8005148 <_printf_common+0xb4>
 80050ec:	4649      	mov	r1, r9
 80050ee:	4638      	mov	r0, r7
 80050f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050f4:	47c0      	blx	r8
 80050f6:	3001      	adds	r0, #1
 80050f8:	d020      	beq.n	800513c <_printf_common+0xa8>
 80050fa:	6823      	ldr	r3, [r4, #0]
 80050fc:	68e5      	ldr	r5, [r4, #12]
 80050fe:	f003 0306 	and.w	r3, r3, #6
 8005102:	2b04      	cmp	r3, #4
 8005104:	bf18      	it	ne
 8005106:	2500      	movne	r5, #0
 8005108:	6832      	ldr	r2, [r6, #0]
 800510a:	f04f 0600 	mov.w	r6, #0
 800510e:	68a3      	ldr	r3, [r4, #8]
 8005110:	bf08      	it	eq
 8005112:	1aad      	subeq	r5, r5, r2
 8005114:	6922      	ldr	r2, [r4, #16]
 8005116:	bf08      	it	eq
 8005118:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800511c:	4293      	cmp	r3, r2
 800511e:	bfc4      	itt	gt
 8005120:	1a9b      	subgt	r3, r3, r2
 8005122:	18ed      	addgt	r5, r5, r3
 8005124:	341a      	adds	r4, #26
 8005126:	42b5      	cmp	r5, r6
 8005128:	d11a      	bne.n	8005160 <_printf_common+0xcc>
 800512a:	2000      	movs	r0, #0
 800512c:	e008      	b.n	8005140 <_printf_common+0xac>
 800512e:	2301      	movs	r3, #1
 8005130:	4652      	mov	r2, sl
 8005132:	4649      	mov	r1, r9
 8005134:	4638      	mov	r0, r7
 8005136:	47c0      	blx	r8
 8005138:	3001      	adds	r0, #1
 800513a:	d103      	bne.n	8005144 <_printf_common+0xb0>
 800513c:	f04f 30ff 	mov.w	r0, #4294967295
 8005140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005144:	3501      	adds	r5, #1
 8005146:	e7c4      	b.n	80050d2 <_printf_common+0x3e>
 8005148:	2030      	movs	r0, #48	; 0x30
 800514a:	18e1      	adds	r1, r4, r3
 800514c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005150:	1c5a      	adds	r2, r3, #1
 8005152:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005156:	4422      	add	r2, r4
 8005158:	3302      	adds	r3, #2
 800515a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800515e:	e7c5      	b.n	80050ec <_printf_common+0x58>
 8005160:	2301      	movs	r3, #1
 8005162:	4622      	mov	r2, r4
 8005164:	4649      	mov	r1, r9
 8005166:	4638      	mov	r0, r7
 8005168:	47c0      	blx	r8
 800516a:	3001      	adds	r0, #1
 800516c:	d0e6      	beq.n	800513c <_printf_common+0xa8>
 800516e:	3601      	adds	r6, #1
 8005170:	e7d9      	b.n	8005126 <_printf_common+0x92>
	...

08005174 <_printf_i>:
 8005174:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005178:	7e0f      	ldrb	r7, [r1, #24]
 800517a:	4691      	mov	r9, r2
 800517c:	2f78      	cmp	r7, #120	; 0x78
 800517e:	4680      	mov	r8, r0
 8005180:	460c      	mov	r4, r1
 8005182:	469a      	mov	sl, r3
 8005184:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005186:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800518a:	d807      	bhi.n	800519c <_printf_i+0x28>
 800518c:	2f62      	cmp	r7, #98	; 0x62
 800518e:	d80a      	bhi.n	80051a6 <_printf_i+0x32>
 8005190:	2f00      	cmp	r7, #0
 8005192:	f000 80d9 	beq.w	8005348 <_printf_i+0x1d4>
 8005196:	2f58      	cmp	r7, #88	; 0x58
 8005198:	f000 80a4 	beq.w	80052e4 <_printf_i+0x170>
 800519c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80051a4:	e03a      	b.n	800521c <_printf_i+0xa8>
 80051a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80051aa:	2b15      	cmp	r3, #21
 80051ac:	d8f6      	bhi.n	800519c <_printf_i+0x28>
 80051ae:	a101      	add	r1, pc, #4	; (adr r1, 80051b4 <_printf_i+0x40>)
 80051b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80051b4:	0800520d 	.word	0x0800520d
 80051b8:	08005221 	.word	0x08005221
 80051bc:	0800519d 	.word	0x0800519d
 80051c0:	0800519d 	.word	0x0800519d
 80051c4:	0800519d 	.word	0x0800519d
 80051c8:	0800519d 	.word	0x0800519d
 80051cc:	08005221 	.word	0x08005221
 80051d0:	0800519d 	.word	0x0800519d
 80051d4:	0800519d 	.word	0x0800519d
 80051d8:	0800519d 	.word	0x0800519d
 80051dc:	0800519d 	.word	0x0800519d
 80051e0:	0800532f 	.word	0x0800532f
 80051e4:	08005251 	.word	0x08005251
 80051e8:	08005311 	.word	0x08005311
 80051ec:	0800519d 	.word	0x0800519d
 80051f0:	0800519d 	.word	0x0800519d
 80051f4:	08005351 	.word	0x08005351
 80051f8:	0800519d 	.word	0x0800519d
 80051fc:	08005251 	.word	0x08005251
 8005200:	0800519d 	.word	0x0800519d
 8005204:	0800519d 	.word	0x0800519d
 8005208:	08005319 	.word	0x08005319
 800520c:	682b      	ldr	r3, [r5, #0]
 800520e:	1d1a      	adds	r2, r3, #4
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	602a      	str	r2, [r5, #0]
 8005214:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005218:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800521c:	2301      	movs	r3, #1
 800521e:	e0a4      	b.n	800536a <_printf_i+0x1f6>
 8005220:	6820      	ldr	r0, [r4, #0]
 8005222:	6829      	ldr	r1, [r5, #0]
 8005224:	0606      	lsls	r6, r0, #24
 8005226:	f101 0304 	add.w	r3, r1, #4
 800522a:	d50a      	bpl.n	8005242 <_printf_i+0xce>
 800522c:	680e      	ldr	r6, [r1, #0]
 800522e:	602b      	str	r3, [r5, #0]
 8005230:	2e00      	cmp	r6, #0
 8005232:	da03      	bge.n	800523c <_printf_i+0xc8>
 8005234:	232d      	movs	r3, #45	; 0x2d
 8005236:	4276      	negs	r6, r6
 8005238:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800523c:	230a      	movs	r3, #10
 800523e:	485e      	ldr	r0, [pc, #376]	; (80053b8 <_printf_i+0x244>)
 8005240:	e019      	b.n	8005276 <_printf_i+0x102>
 8005242:	680e      	ldr	r6, [r1, #0]
 8005244:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005248:	602b      	str	r3, [r5, #0]
 800524a:	bf18      	it	ne
 800524c:	b236      	sxthne	r6, r6
 800524e:	e7ef      	b.n	8005230 <_printf_i+0xbc>
 8005250:	682b      	ldr	r3, [r5, #0]
 8005252:	6820      	ldr	r0, [r4, #0]
 8005254:	1d19      	adds	r1, r3, #4
 8005256:	6029      	str	r1, [r5, #0]
 8005258:	0601      	lsls	r1, r0, #24
 800525a:	d501      	bpl.n	8005260 <_printf_i+0xec>
 800525c:	681e      	ldr	r6, [r3, #0]
 800525e:	e002      	b.n	8005266 <_printf_i+0xf2>
 8005260:	0646      	lsls	r6, r0, #25
 8005262:	d5fb      	bpl.n	800525c <_printf_i+0xe8>
 8005264:	881e      	ldrh	r6, [r3, #0]
 8005266:	2f6f      	cmp	r7, #111	; 0x6f
 8005268:	bf0c      	ite	eq
 800526a:	2308      	moveq	r3, #8
 800526c:	230a      	movne	r3, #10
 800526e:	4852      	ldr	r0, [pc, #328]	; (80053b8 <_printf_i+0x244>)
 8005270:	2100      	movs	r1, #0
 8005272:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005276:	6865      	ldr	r5, [r4, #4]
 8005278:	2d00      	cmp	r5, #0
 800527a:	bfa8      	it	ge
 800527c:	6821      	ldrge	r1, [r4, #0]
 800527e:	60a5      	str	r5, [r4, #8]
 8005280:	bfa4      	itt	ge
 8005282:	f021 0104 	bicge.w	r1, r1, #4
 8005286:	6021      	strge	r1, [r4, #0]
 8005288:	b90e      	cbnz	r6, 800528e <_printf_i+0x11a>
 800528a:	2d00      	cmp	r5, #0
 800528c:	d04d      	beq.n	800532a <_printf_i+0x1b6>
 800528e:	4615      	mov	r5, r2
 8005290:	fbb6 f1f3 	udiv	r1, r6, r3
 8005294:	fb03 6711 	mls	r7, r3, r1, r6
 8005298:	5dc7      	ldrb	r7, [r0, r7]
 800529a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800529e:	4637      	mov	r7, r6
 80052a0:	42bb      	cmp	r3, r7
 80052a2:	460e      	mov	r6, r1
 80052a4:	d9f4      	bls.n	8005290 <_printf_i+0x11c>
 80052a6:	2b08      	cmp	r3, #8
 80052a8:	d10b      	bne.n	80052c2 <_printf_i+0x14e>
 80052aa:	6823      	ldr	r3, [r4, #0]
 80052ac:	07de      	lsls	r6, r3, #31
 80052ae:	d508      	bpl.n	80052c2 <_printf_i+0x14e>
 80052b0:	6923      	ldr	r3, [r4, #16]
 80052b2:	6861      	ldr	r1, [r4, #4]
 80052b4:	4299      	cmp	r1, r3
 80052b6:	bfde      	ittt	le
 80052b8:	2330      	movle	r3, #48	; 0x30
 80052ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 80052be:	f105 35ff 	addle.w	r5, r5, #4294967295
 80052c2:	1b52      	subs	r2, r2, r5
 80052c4:	6122      	str	r2, [r4, #16]
 80052c6:	464b      	mov	r3, r9
 80052c8:	4621      	mov	r1, r4
 80052ca:	4640      	mov	r0, r8
 80052cc:	f8cd a000 	str.w	sl, [sp]
 80052d0:	aa03      	add	r2, sp, #12
 80052d2:	f7ff fedf 	bl	8005094 <_printf_common>
 80052d6:	3001      	adds	r0, #1
 80052d8:	d14c      	bne.n	8005374 <_printf_i+0x200>
 80052da:	f04f 30ff 	mov.w	r0, #4294967295
 80052de:	b004      	add	sp, #16
 80052e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052e4:	4834      	ldr	r0, [pc, #208]	; (80053b8 <_printf_i+0x244>)
 80052e6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80052ea:	6829      	ldr	r1, [r5, #0]
 80052ec:	6823      	ldr	r3, [r4, #0]
 80052ee:	f851 6b04 	ldr.w	r6, [r1], #4
 80052f2:	6029      	str	r1, [r5, #0]
 80052f4:	061d      	lsls	r5, r3, #24
 80052f6:	d514      	bpl.n	8005322 <_printf_i+0x1ae>
 80052f8:	07df      	lsls	r7, r3, #31
 80052fa:	bf44      	itt	mi
 80052fc:	f043 0320 	orrmi.w	r3, r3, #32
 8005300:	6023      	strmi	r3, [r4, #0]
 8005302:	b91e      	cbnz	r6, 800530c <_printf_i+0x198>
 8005304:	6823      	ldr	r3, [r4, #0]
 8005306:	f023 0320 	bic.w	r3, r3, #32
 800530a:	6023      	str	r3, [r4, #0]
 800530c:	2310      	movs	r3, #16
 800530e:	e7af      	b.n	8005270 <_printf_i+0xfc>
 8005310:	6823      	ldr	r3, [r4, #0]
 8005312:	f043 0320 	orr.w	r3, r3, #32
 8005316:	6023      	str	r3, [r4, #0]
 8005318:	2378      	movs	r3, #120	; 0x78
 800531a:	4828      	ldr	r0, [pc, #160]	; (80053bc <_printf_i+0x248>)
 800531c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005320:	e7e3      	b.n	80052ea <_printf_i+0x176>
 8005322:	0659      	lsls	r1, r3, #25
 8005324:	bf48      	it	mi
 8005326:	b2b6      	uxthmi	r6, r6
 8005328:	e7e6      	b.n	80052f8 <_printf_i+0x184>
 800532a:	4615      	mov	r5, r2
 800532c:	e7bb      	b.n	80052a6 <_printf_i+0x132>
 800532e:	682b      	ldr	r3, [r5, #0]
 8005330:	6826      	ldr	r6, [r4, #0]
 8005332:	1d18      	adds	r0, r3, #4
 8005334:	6961      	ldr	r1, [r4, #20]
 8005336:	6028      	str	r0, [r5, #0]
 8005338:	0635      	lsls	r5, r6, #24
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	d501      	bpl.n	8005342 <_printf_i+0x1ce>
 800533e:	6019      	str	r1, [r3, #0]
 8005340:	e002      	b.n	8005348 <_printf_i+0x1d4>
 8005342:	0670      	lsls	r0, r6, #25
 8005344:	d5fb      	bpl.n	800533e <_printf_i+0x1ca>
 8005346:	8019      	strh	r1, [r3, #0]
 8005348:	2300      	movs	r3, #0
 800534a:	4615      	mov	r5, r2
 800534c:	6123      	str	r3, [r4, #16]
 800534e:	e7ba      	b.n	80052c6 <_printf_i+0x152>
 8005350:	682b      	ldr	r3, [r5, #0]
 8005352:	2100      	movs	r1, #0
 8005354:	1d1a      	adds	r2, r3, #4
 8005356:	602a      	str	r2, [r5, #0]
 8005358:	681d      	ldr	r5, [r3, #0]
 800535a:	6862      	ldr	r2, [r4, #4]
 800535c:	4628      	mov	r0, r5
 800535e:	f000 f8e1 	bl	8005524 <memchr>
 8005362:	b108      	cbz	r0, 8005368 <_printf_i+0x1f4>
 8005364:	1b40      	subs	r0, r0, r5
 8005366:	6060      	str	r0, [r4, #4]
 8005368:	6863      	ldr	r3, [r4, #4]
 800536a:	6123      	str	r3, [r4, #16]
 800536c:	2300      	movs	r3, #0
 800536e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005372:	e7a8      	b.n	80052c6 <_printf_i+0x152>
 8005374:	462a      	mov	r2, r5
 8005376:	4649      	mov	r1, r9
 8005378:	4640      	mov	r0, r8
 800537a:	6923      	ldr	r3, [r4, #16]
 800537c:	47d0      	blx	sl
 800537e:	3001      	adds	r0, #1
 8005380:	d0ab      	beq.n	80052da <_printf_i+0x166>
 8005382:	6823      	ldr	r3, [r4, #0]
 8005384:	079b      	lsls	r3, r3, #30
 8005386:	d413      	bmi.n	80053b0 <_printf_i+0x23c>
 8005388:	68e0      	ldr	r0, [r4, #12]
 800538a:	9b03      	ldr	r3, [sp, #12]
 800538c:	4298      	cmp	r0, r3
 800538e:	bfb8      	it	lt
 8005390:	4618      	movlt	r0, r3
 8005392:	e7a4      	b.n	80052de <_printf_i+0x16a>
 8005394:	2301      	movs	r3, #1
 8005396:	4632      	mov	r2, r6
 8005398:	4649      	mov	r1, r9
 800539a:	4640      	mov	r0, r8
 800539c:	47d0      	blx	sl
 800539e:	3001      	adds	r0, #1
 80053a0:	d09b      	beq.n	80052da <_printf_i+0x166>
 80053a2:	3501      	adds	r5, #1
 80053a4:	68e3      	ldr	r3, [r4, #12]
 80053a6:	9903      	ldr	r1, [sp, #12]
 80053a8:	1a5b      	subs	r3, r3, r1
 80053aa:	42ab      	cmp	r3, r5
 80053ac:	dcf2      	bgt.n	8005394 <_printf_i+0x220>
 80053ae:	e7eb      	b.n	8005388 <_printf_i+0x214>
 80053b0:	2500      	movs	r5, #0
 80053b2:	f104 0619 	add.w	r6, r4, #25
 80053b6:	e7f5      	b.n	80053a4 <_printf_i+0x230>
 80053b8:	08005e9d 	.word	0x08005e9d
 80053bc:	08005eae 	.word	0x08005eae

080053c0 <_sbrk_r>:
 80053c0:	b538      	push	{r3, r4, r5, lr}
 80053c2:	2300      	movs	r3, #0
 80053c4:	4d05      	ldr	r5, [pc, #20]	; (80053dc <_sbrk_r+0x1c>)
 80053c6:	4604      	mov	r4, r0
 80053c8:	4608      	mov	r0, r1
 80053ca:	602b      	str	r3, [r5, #0]
 80053cc:	f7fc ff7a 	bl	80022c4 <_sbrk>
 80053d0:	1c43      	adds	r3, r0, #1
 80053d2:	d102      	bne.n	80053da <_sbrk_r+0x1a>
 80053d4:	682b      	ldr	r3, [r5, #0]
 80053d6:	b103      	cbz	r3, 80053da <_sbrk_r+0x1a>
 80053d8:	6023      	str	r3, [r4, #0]
 80053da:	bd38      	pop	{r3, r4, r5, pc}
 80053dc:	200036f0 	.word	0x200036f0

080053e0 <__sread>:
 80053e0:	b510      	push	{r4, lr}
 80053e2:	460c      	mov	r4, r1
 80053e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053e8:	f000 f8b6 	bl	8005558 <_read_r>
 80053ec:	2800      	cmp	r0, #0
 80053ee:	bfab      	itete	ge
 80053f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80053f2:	89a3      	ldrhlt	r3, [r4, #12]
 80053f4:	181b      	addge	r3, r3, r0
 80053f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80053fa:	bfac      	ite	ge
 80053fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80053fe:	81a3      	strhlt	r3, [r4, #12]
 8005400:	bd10      	pop	{r4, pc}

08005402 <__swrite>:
 8005402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005406:	461f      	mov	r7, r3
 8005408:	898b      	ldrh	r3, [r1, #12]
 800540a:	4605      	mov	r5, r0
 800540c:	05db      	lsls	r3, r3, #23
 800540e:	460c      	mov	r4, r1
 8005410:	4616      	mov	r6, r2
 8005412:	d505      	bpl.n	8005420 <__swrite+0x1e>
 8005414:	2302      	movs	r3, #2
 8005416:	2200      	movs	r2, #0
 8005418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800541c:	f000 f870 	bl	8005500 <_lseek_r>
 8005420:	89a3      	ldrh	r3, [r4, #12]
 8005422:	4632      	mov	r2, r6
 8005424:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005428:	81a3      	strh	r3, [r4, #12]
 800542a:	4628      	mov	r0, r5
 800542c:	463b      	mov	r3, r7
 800542e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005432:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005436:	f000 b817 	b.w	8005468 <_write_r>

0800543a <__sseek>:
 800543a:	b510      	push	{r4, lr}
 800543c:	460c      	mov	r4, r1
 800543e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005442:	f000 f85d 	bl	8005500 <_lseek_r>
 8005446:	1c43      	adds	r3, r0, #1
 8005448:	89a3      	ldrh	r3, [r4, #12]
 800544a:	bf15      	itete	ne
 800544c:	6560      	strne	r0, [r4, #84]	; 0x54
 800544e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005452:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005456:	81a3      	strheq	r3, [r4, #12]
 8005458:	bf18      	it	ne
 800545a:	81a3      	strhne	r3, [r4, #12]
 800545c:	bd10      	pop	{r4, pc}

0800545e <__sclose>:
 800545e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005462:	f000 b81b 	b.w	800549c <_close_r>
	...

08005468 <_write_r>:
 8005468:	b538      	push	{r3, r4, r5, lr}
 800546a:	4604      	mov	r4, r0
 800546c:	4608      	mov	r0, r1
 800546e:	4611      	mov	r1, r2
 8005470:	2200      	movs	r2, #0
 8005472:	4d05      	ldr	r5, [pc, #20]	; (8005488 <_write_r+0x20>)
 8005474:	602a      	str	r2, [r5, #0]
 8005476:	461a      	mov	r2, r3
 8005478:	f7fc fed8 	bl	800222c <_write>
 800547c:	1c43      	adds	r3, r0, #1
 800547e:	d102      	bne.n	8005486 <_write_r+0x1e>
 8005480:	682b      	ldr	r3, [r5, #0]
 8005482:	b103      	cbz	r3, 8005486 <_write_r+0x1e>
 8005484:	6023      	str	r3, [r4, #0]
 8005486:	bd38      	pop	{r3, r4, r5, pc}
 8005488:	200036f0 	.word	0x200036f0

0800548c <abort>:
 800548c:	2006      	movs	r0, #6
 800548e:	b508      	push	{r3, lr}
 8005490:	f000 f89c 	bl	80055cc <raise>
 8005494:	2001      	movs	r0, #1
 8005496:	f7fc fea2 	bl	80021de <_exit>
	...

0800549c <_close_r>:
 800549c:	b538      	push	{r3, r4, r5, lr}
 800549e:	2300      	movs	r3, #0
 80054a0:	4d05      	ldr	r5, [pc, #20]	; (80054b8 <_close_r+0x1c>)
 80054a2:	4604      	mov	r4, r0
 80054a4:	4608      	mov	r0, r1
 80054a6:	602b      	str	r3, [r5, #0]
 80054a8:	f7fc fedc 	bl	8002264 <_close>
 80054ac:	1c43      	adds	r3, r0, #1
 80054ae:	d102      	bne.n	80054b6 <_close_r+0x1a>
 80054b0:	682b      	ldr	r3, [r5, #0]
 80054b2:	b103      	cbz	r3, 80054b6 <_close_r+0x1a>
 80054b4:	6023      	str	r3, [r4, #0]
 80054b6:	bd38      	pop	{r3, r4, r5, pc}
 80054b8:	200036f0 	.word	0x200036f0

080054bc <_fstat_r>:
 80054bc:	b538      	push	{r3, r4, r5, lr}
 80054be:	2300      	movs	r3, #0
 80054c0:	4d06      	ldr	r5, [pc, #24]	; (80054dc <_fstat_r+0x20>)
 80054c2:	4604      	mov	r4, r0
 80054c4:	4608      	mov	r0, r1
 80054c6:	4611      	mov	r1, r2
 80054c8:	602b      	str	r3, [r5, #0]
 80054ca:	f7fc fed6 	bl	800227a <_fstat>
 80054ce:	1c43      	adds	r3, r0, #1
 80054d0:	d102      	bne.n	80054d8 <_fstat_r+0x1c>
 80054d2:	682b      	ldr	r3, [r5, #0]
 80054d4:	b103      	cbz	r3, 80054d8 <_fstat_r+0x1c>
 80054d6:	6023      	str	r3, [r4, #0]
 80054d8:	bd38      	pop	{r3, r4, r5, pc}
 80054da:	bf00      	nop
 80054dc:	200036f0 	.word	0x200036f0

080054e0 <_isatty_r>:
 80054e0:	b538      	push	{r3, r4, r5, lr}
 80054e2:	2300      	movs	r3, #0
 80054e4:	4d05      	ldr	r5, [pc, #20]	; (80054fc <_isatty_r+0x1c>)
 80054e6:	4604      	mov	r4, r0
 80054e8:	4608      	mov	r0, r1
 80054ea:	602b      	str	r3, [r5, #0]
 80054ec:	f7fc fed4 	bl	8002298 <_isatty>
 80054f0:	1c43      	adds	r3, r0, #1
 80054f2:	d102      	bne.n	80054fa <_isatty_r+0x1a>
 80054f4:	682b      	ldr	r3, [r5, #0]
 80054f6:	b103      	cbz	r3, 80054fa <_isatty_r+0x1a>
 80054f8:	6023      	str	r3, [r4, #0]
 80054fa:	bd38      	pop	{r3, r4, r5, pc}
 80054fc:	200036f0 	.word	0x200036f0

08005500 <_lseek_r>:
 8005500:	b538      	push	{r3, r4, r5, lr}
 8005502:	4604      	mov	r4, r0
 8005504:	4608      	mov	r0, r1
 8005506:	4611      	mov	r1, r2
 8005508:	2200      	movs	r2, #0
 800550a:	4d05      	ldr	r5, [pc, #20]	; (8005520 <_lseek_r+0x20>)
 800550c:	602a      	str	r2, [r5, #0]
 800550e:	461a      	mov	r2, r3
 8005510:	f7fc fecc 	bl	80022ac <_lseek>
 8005514:	1c43      	adds	r3, r0, #1
 8005516:	d102      	bne.n	800551e <_lseek_r+0x1e>
 8005518:	682b      	ldr	r3, [r5, #0]
 800551a:	b103      	cbz	r3, 800551e <_lseek_r+0x1e>
 800551c:	6023      	str	r3, [r4, #0]
 800551e:	bd38      	pop	{r3, r4, r5, pc}
 8005520:	200036f0 	.word	0x200036f0

08005524 <memchr>:
 8005524:	4603      	mov	r3, r0
 8005526:	b510      	push	{r4, lr}
 8005528:	b2c9      	uxtb	r1, r1
 800552a:	4402      	add	r2, r0
 800552c:	4293      	cmp	r3, r2
 800552e:	4618      	mov	r0, r3
 8005530:	d101      	bne.n	8005536 <memchr+0x12>
 8005532:	2000      	movs	r0, #0
 8005534:	e003      	b.n	800553e <memchr+0x1a>
 8005536:	7804      	ldrb	r4, [r0, #0]
 8005538:	3301      	adds	r3, #1
 800553a:	428c      	cmp	r4, r1
 800553c:	d1f6      	bne.n	800552c <memchr+0x8>
 800553e:	bd10      	pop	{r4, pc}

08005540 <__malloc_lock>:
 8005540:	4801      	ldr	r0, [pc, #4]	; (8005548 <__malloc_lock+0x8>)
 8005542:	f7ff bb04 	b.w	8004b4e <__retarget_lock_acquire_recursive>
 8005546:	bf00      	nop
 8005548:	200036e4 	.word	0x200036e4

0800554c <__malloc_unlock>:
 800554c:	4801      	ldr	r0, [pc, #4]	; (8005554 <__malloc_unlock+0x8>)
 800554e:	f7ff baff 	b.w	8004b50 <__retarget_lock_release_recursive>
 8005552:	bf00      	nop
 8005554:	200036e4 	.word	0x200036e4

08005558 <_read_r>:
 8005558:	b538      	push	{r3, r4, r5, lr}
 800555a:	4604      	mov	r4, r0
 800555c:	4608      	mov	r0, r1
 800555e:	4611      	mov	r1, r2
 8005560:	2200      	movs	r2, #0
 8005562:	4d05      	ldr	r5, [pc, #20]	; (8005578 <_read_r+0x20>)
 8005564:	602a      	str	r2, [r5, #0]
 8005566:	461a      	mov	r2, r3
 8005568:	f7fc fe43 	bl	80021f2 <_read>
 800556c:	1c43      	adds	r3, r0, #1
 800556e:	d102      	bne.n	8005576 <_read_r+0x1e>
 8005570:	682b      	ldr	r3, [r5, #0]
 8005572:	b103      	cbz	r3, 8005576 <_read_r+0x1e>
 8005574:	6023      	str	r3, [r4, #0]
 8005576:	bd38      	pop	{r3, r4, r5, pc}
 8005578:	200036f0 	.word	0x200036f0

0800557c <_raise_r>:
 800557c:	291f      	cmp	r1, #31
 800557e:	b538      	push	{r3, r4, r5, lr}
 8005580:	4604      	mov	r4, r0
 8005582:	460d      	mov	r5, r1
 8005584:	d904      	bls.n	8005590 <_raise_r+0x14>
 8005586:	2316      	movs	r3, #22
 8005588:	6003      	str	r3, [r0, #0]
 800558a:	f04f 30ff 	mov.w	r0, #4294967295
 800558e:	bd38      	pop	{r3, r4, r5, pc}
 8005590:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005592:	b112      	cbz	r2, 800559a <_raise_r+0x1e>
 8005594:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005598:	b94b      	cbnz	r3, 80055ae <_raise_r+0x32>
 800559a:	4620      	mov	r0, r4
 800559c:	f000 f830 	bl	8005600 <_getpid_r>
 80055a0:	462a      	mov	r2, r5
 80055a2:	4601      	mov	r1, r0
 80055a4:	4620      	mov	r0, r4
 80055a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055aa:	f000 b817 	b.w	80055dc <_kill_r>
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d00a      	beq.n	80055c8 <_raise_r+0x4c>
 80055b2:	1c59      	adds	r1, r3, #1
 80055b4:	d103      	bne.n	80055be <_raise_r+0x42>
 80055b6:	2316      	movs	r3, #22
 80055b8:	6003      	str	r3, [r0, #0]
 80055ba:	2001      	movs	r0, #1
 80055bc:	e7e7      	b.n	800558e <_raise_r+0x12>
 80055be:	2400      	movs	r4, #0
 80055c0:	4628      	mov	r0, r5
 80055c2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80055c6:	4798      	blx	r3
 80055c8:	2000      	movs	r0, #0
 80055ca:	e7e0      	b.n	800558e <_raise_r+0x12>

080055cc <raise>:
 80055cc:	4b02      	ldr	r3, [pc, #8]	; (80055d8 <raise+0xc>)
 80055ce:	4601      	mov	r1, r0
 80055d0:	6818      	ldr	r0, [r3, #0]
 80055d2:	f7ff bfd3 	b.w	800557c <_raise_r>
 80055d6:	bf00      	nop
 80055d8:	20000434 	.word	0x20000434

080055dc <_kill_r>:
 80055dc:	b538      	push	{r3, r4, r5, lr}
 80055de:	2300      	movs	r3, #0
 80055e0:	4d06      	ldr	r5, [pc, #24]	; (80055fc <_kill_r+0x20>)
 80055e2:	4604      	mov	r4, r0
 80055e4:	4608      	mov	r0, r1
 80055e6:	4611      	mov	r1, r2
 80055e8:	602b      	str	r3, [r5, #0]
 80055ea:	f7fc fde8 	bl	80021be <_kill>
 80055ee:	1c43      	adds	r3, r0, #1
 80055f0:	d102      	bne.n	80055f8 <_kill_r+0x1c>
 80055f2:	682b      	ldr	r3, [r5, #0]
 80055f4:	b103      	cbz	r3, 80055f8 <_kill_r+0x1c>
 80055f6:	6023      	str	r3, [r4, #0]
 80055f8:	bd38      	pop	{r3, r4, r5, pc}
 80055fa:	bf00      	nop
 80055fc:	200036f0 	.word	0x200036f0

08005600 <_getpid_r>:
 8005600:	f7fc bdd6 	b.w	80021b0 <_getpid>

08005604 <_gettimeofday>:
 8005604:	2258      	movs	r2, #88	; 0x58
 8005606:	4b02      	ldr	r3, [pc, #8]	; (8005610 <_gettimeofday+0xc>)
 8005608:	f04f 30ff 	mov.w	r0, #4294967295
 800560c:	601a      	str	r2, [r3, #0]
 800560e:	4770      	bx	lr
 8005610:	200036f0 	.word	0x200036f0

08005614 <_init>:
 8005614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005616:	bf00      	nop
 8005618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800561a:	bc08      	pop	{r3}
 800561c:	469e      	mov	lr, r3
 800561e:	4770      	bx	lr

08005620 <_fini>:
 8005620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005622:	bf00      	nop
 8005624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005626:	bc08      	pop	{r3}
 8005628:	469e      	mov	lr, r3
 800562a:	4770      	bx	lr
