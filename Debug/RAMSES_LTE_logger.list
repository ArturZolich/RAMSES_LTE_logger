
RAMSES_LTE_logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bb4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ec  08005cf0  08005cf0  00015cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064dc  080064dc  00020400  2**0
                  CONTENTS
  4 .ARM          00000008  080064dc  080064dc  000164dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064e4  080064e4  00020400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064e4  080064e4  000164e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064e8  080064e8  000164e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000400  20000000  080064ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002858  20000400  080068ec  00020400  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002c58  080068ec  00022c58  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020400  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a56b  00000000  00000000  00020429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001df4  00000000  00000000  0002a994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000830  00000000  00000000  0002c788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000778  00000000  00000000  0002cfb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016832  00000000  00000000  0002d730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a64f  00000000  00000000  00043f62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086811  00000000  00000000  0004e5b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d4dc2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c58  00000000  00000000  000d4e14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  000d7a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000d7a90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000400 	.word	0x20000400
 8000158:	00000000 	.word	0x00000000
 800015c:	08005cd8 	.word	0x08005cd8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000404 	.word	0x20000404
 8000178:	08005cd8 	.word	0x08005cd8

0800017c <strcmp>:
 800017c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000180:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000184:	2a01      	cmp	r2, #1
 8000186:	bf28      	it	cs
 8000188:	429a      	cmpcs	r2, r3
 800018a:	d0f7      	beq.n	800017c <strcmp>
 800018c:	1ad0      	subs	r0, r2, r3
 800018e:	4770      	bx	lr

08000190 <strlen>:
 8000190:	4603      	mov	r3, r0
 8000192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000196:	2a00      	cmp	r2, #0
 8000198:	d1fb      	bne.n	8000192 <strlen+0x2>
 800019a:	1a18      	subs	r0, r3, r0
 800019c:	3801      	subs	r0, #1
 800019e:	4770      	bx	lr

080001a0 <__aeabi_uldivmod>:
 80001a0:	b953      	cbnz	r3, 80001b8 <__aeabi_uldivmod+0x18>
 80001a2:	b94a      	cbnz	r2, 80001b8 <__aeabi_uldivmod+0x18>
 80001a4:	2900      	cmp	r1, #0
 80001a6:	bf08      	it	eq
 80001a8:	2800      	cmpeq	r0, #0
 80001aa:	bf1c      	itt	ne
 80001ac:	f04f 31ff 	movne.w	r1, #4294967295
 80001b0:	f04f 30ff 	movne.w	r0, #4294967295
 80001b4:	f000 b976 	b.w	80004a4 <__aeabi_idiv0>
 80001b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001c0:	f000 f806 	bl	80001d0 <__udivmoddi4>
 80001c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001cc:	b004      	add	sp, #16
 80001ce:	4770      	bx	lr

080001d0 <__udivmoddi4>:
 80001d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001d4:	9e08      	ldr	r6, [sp, #32]
 80001d6:	460d      	mov	r5, r1
 80001d8:	4604      	mov	r4, r0
 80001da:	4688      	mov	r8, r1
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d14d      	bne.n	800027c <__udivmoddi4+0xac>
 80001e0:	428a      	cmp	r2, r1
 80001e2:	4694      	mov	ip, r2
 80001e4:	d968      	bls.n	80002b8 <__udivmoddi4+0xe8>
 80001e6:	fab2 f282 	clz	r2, r2
 80001ea:	b152      	cbz	r2, 8000202 <__udivmoddi4+0x32>
 80001ec:	fa01 f302 	lsl.w	r3, r1, r2
 80001f0:	f1c2 0120 	rsb	r1, r2, #32
 80001f4:	fa20 f101 	lsr.w	r1, r0, r1
 80001f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80001fc:	ea41 0803 	orr.w	r8, r1, r3
 8000200:	4094      	lsls	r4, r2
 8000202:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000206:	fbb8 f7f1 	udiv	r7, r8, r1
 800020a:	fa1f fe8c 	uxth.w	lr, ip
 800020e:	fb01 8817 	mls	r8, r1, r7, r8
 8000212:	fb07 f00e 	mul.w	r0, r7, lr
 8000216:	0c23      	lsrs	r3, r4, #16
 8000218:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800021c:	4298      	cmp	r0, r3
 800021e:	d90a      	bls.n	8000236 <__udivmoddi4+0x66>
 8000220:	eb1c 0303 	adds.w	r3, ip, r3
 8000224:	f107 35ff 	add.w	r5, r7, #4294967295
 8000228:	f080 811e 	bcs.w	8000468 <__udivmoddi4+0x298>
 800022c:	4298      	cmp	r0, r3
 800022e:	f240 811b 	bls.w	8000468 <__udivmoddi4+0x298>
 8000232:	3f02      	subs	r7, #2
 8000234:	4463      	add	r3, ip
 8000236:	1a1b      	subs	r3, r3, r0
 8000238:	fbb3 f0f1 	udiv	r0, r3, r1
 800023c:	fb01 3310 	mls	r3, r1, r0, r3
 8000240:	fb00 fe0e 	mul.w	lr, r0, lr
 8000244:	b2a4      	uxth	r4, r4
 8000246:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800024a:	45a6      	cmp	lr, r4
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x94>
 800024e:	eb1c 0404 	adds.w	r4, ip, r4
 8000252:	f100 33ff 	add.w	r3, r0, #4294967295
 8000256:	f080 8109 	bcs.w	800046c <__udivmoddi4+0x29c>
 800025a:	45a6      	cmp	lr, r4
 800025c:	f240 8106 	bls.w	800046c <__udivmoddi4+0x29c>
 8000260:	4464      	add	r4, ip
 8000262:	3802      	subs	r0, #2
 8000264:	2100      	movs	r1, #0
 8000266:	eba4 040e 	sub.w	r4, r4, lr
 800026a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800026e:	b11e      	cbz	r6, 8000278 <__udivmoddi4+0xa8>
 8000270:	2300      	movs	r3, #0
 8000272:	40d4      	lsrs	r4, r2
 8000274:	e9c6 4300 	strd	r4, r3, [r6]
 8000278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027c:	428b      	cmp	r3, r1
 800027e:	d908      	bls.n	8000292 <__udivmoddi4+0xc2>
 8000280:	2e00      	cmp	r6, #0
 8000282:	f000 80ee 	beq.w	8000462 <__udivmoddi4+0x292>
 8000286:	2100      	movs	r1, #0
 8000288:	e9c6 0500 	strd	r0, r5, [r6]
 800028c:	4608      	mov	r0, r1
 800028e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000292:	fab3 f183 	clz	r1, r3
 8000296:	2900      	cmp	r1, #0
 8000298:	d14a      	bne.n	8000330 <__udivmoddi4+0x160>
 800029a:	42ab      	cmp	r3, r5
 800029c:	d302      	bcc.n	80002a4 <__udivmoddi4+0xd4>
 800029e:	4282      	cmp	r2, r0
 80002a0:	f200 80fc 	bhi.w	800049c <__udivmoddi4+0x2cc>
 80002a4:	1a84      	subs	r4, r0, r2
 80002a6:	eb65 0303 	sbc.w	r3, r5, r3
 80002aa:	2001      	movs	r0, #1
 80002ac:	4698      	mov	r8, r3
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	d0e2      	beq.n	8000278 <__udivmoddi4+0xa8>
 80002b2:	e9c6 4800 	strd	r4, r8, [r6]
 80002b6:	e7df      	b.n	8000278 <__udivmoddi4+0xa8>
 80002b8:	b902      	cbnz	r2, 80002bc <__udivmoddi4+0xec>
 80002ba:	deff      	udf	#255	; 0xff
 80002bc:	fab2 f282 	clz	r2, r2
 80002c0:	2a00      	cmp	r2, #0
 80002c2:	f040 8091 	bne.w	80003e8 <__udivmoddi4+0x218>
 80002c6:	eba1 000c 	sub.w	r0, r1, ip
 80002ca:	2101      	movs	r1, #1
 80002cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d0:	fa1f fe8c 	uxth.w	lr, ip
 80002d4:	fbb0 f3f7 	udiv	r3, r0, r7
 80002d8:	fb07 0013 	mls	r0, r7, r3, r0
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002e2:	fb0e f003 	mul.w	r0, lr, r3
 80002e6:	42a8      	cmp	r0, r5
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0x12c>
 80002ea:	eb1c 0505 	adds.w	r5, ip, r5
 80002ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x12a>
 80002f4:	42a8      	cmp	r0, r5
 80002f6:	f200 80ce 	bhi.w	8000496 <__udivmoddi4+0x2c6>
 80002fa:	4643      	mov	r3, r8
 80002fc:	1a2d      	subs	r5, r5, r0
 80002fe:	fbb5 f0f7 	udiv	r0, r5, r7
 8000302:	fb07 5510 	mls	r5, r7, r0, r5
 8000306:	fb0e fe00 	mul.w	lr, lr, r0
 800030a:	b2a4      	uxth	r4, r4
 800030c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000310:	45a6      	cmp	lr, r4
 8000312:	d908      	bls.n	8000326 <__udivmoddi4+0x156>
 8000314:	eb1c 0404 	adds.w	r4, ip, r4
 8000318:	f100 35ff 	add.w	r5, r0, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x154>
 800031e:	45a6      	cmp	lr, r4
 8000320:	f200 80b6 	bhi.w	8000490 <__udivmoddi4+0x2c0>
 8000324:	4628      	mov	r0, r5
 8000326:	eba4 040e 	sub.w	r4, r4, lr
 800032a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800032e:	e79e      	b.n	800026e <__udivmoddi4+0x9e>
 8000330:	f1c1 0720 	rsb	r7, r1, #32
 8000334:	408b      	lsls	r3, r1
 8000336:	fa22 fc07 	lsr.w	ip, r2, r7
 800033a:	ea4c 0c03 	orr.w	ip, ip, r3
 800033e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000342:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000346:	fbba f8f9 	udiv	r8, sl, r9
 800034a:	fa20 f307 	lsr.w	r3, r0, r7
 800034e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000352:	408d      	lsls	r5, r1
 8000354:	fa1f fe8c 	uxth.w	lr, ip
 8000358:	431d      	orrs	r5, r3
 800035a:	fa00 f301 	lsl.w	r3, r0, r1
 800035e:	fb08 f00e 	mul.w	r0, r8, lr
 8000362:	0c2c      	lsrs	r4, r5, #16
 8000364:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000368:	42a0      	cmp	r0, r4
 800036a:	fa02 f201 	lsl.w	r2, r2, r1
 800036e:	d90b      	bls.n	8000388 <__udivmoddi4+0x1b8>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f108 3aff 	add.w	sl, r8, #4294967295
 8000378:	f080 8088 	bcs.w	800048c <__udivmoddi4+0x2bc>
 800037c:	42a0      	cmp	r0, r4
 800037e:	f240 8085 	bls.w	800048c <__udivmoddi4+0x2bc>
 8000382:	f1a8 0802 	sub.w	r8, r8, #2
 8000386:	4464      	add	r4, ip
 8000388:	1a24      	subs	r4, r4, r0
 800038a:	fbb4 f0f9 	udiv	r0, r4, r9
 800038e:	fb09 4410 	mls	r4, r9, r0, r4
 8000392:	fb00 fe0e 	mul.w	lr, r0, lr
 8000396:	b2ad      	uxth	r5, r5
 8000398:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800039c:	45a6      	cmp	lr, r4
 800039e:	d908      	bls.n	80003b2 <__udivmoddi4+0x1e2>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f100 35ff 	add.w	r5, r0, #4294967295
 80003a8:	d26c      	bcs.n	8000484 <__udivmoddi4+0x2b4>
 80003aa:	45a6      	cmp	lr, r4
 80003ac:	d96a      	bls.n	8000484 <__udivmoddi4+0x2b4>
 80003ae:	3802      	subs	r0, #2
 80003b0:	4464      	add	r4, ip
 80003b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003b6:	fba0 9502 	umull	r9, r5, r0, r2
 80003ba:	eba4 040e 	sub.w	r4, r4, lr
 80003be:	42ac      	cmp	r4, r5
 80003c0:	46c8      	mov	r8, r9
 80003c2:	46ae      	mov	lr, r5
 80003c4:	d356      	bcc.n	8000474 <__udivmoddi4+0x2a4>
 80003c6:	d053      	beq.n	8000470 <__udivmoddi4+0x2a0>
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d069      	beq.n	80004a0 <__udivmoddi4+0x2d0>
 80003cc:	ebb3 0208 	subs.w	r2, r3, r8
 80003d0:	eb64 040e 	sbc.w	r4, r4, lr
 80003d4:	fa22 f301 	lsr.w	r3, r2, r1
 80003d8:	fa04 f707 	lsl.w	r7, r4, r7
 80003dc:	431f      	orrs	r7, r3
 80003de:	40cc      	lsrs	r4, r1
 80003e0:	e9c6 7400 	strd	r7, r4, [r6]
 80003e4:	2100      	movs	r1, #0
 80003e6:	e747      	b.n	8000278 <__udivmoddi4+0xa8>
 80003e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ec:	f1c2 0120 	rsb	r1, r2, #32
 80003f0:	fa25 f301 	lsr.w	r3, r5, r1
 80003f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f8:	fa20 f101 	lsr.w	r1, r0, r1
 80003fc:	4095      	lsls	r5, r2
 80003fe:	430d      	orrs	r5, r1
 8000400:	fbb3 f1f7 	udiv	r1, r3, r7
 8000404:	fb07 3311 	mls	r3, r7, r1, r3
 8000408:	fa1f fe8c 	uxth.w	lr, ip
 800040c:	0c28      	lsrs	r0, r5, #16
 800040e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000412:	fb01 f30e 	mul.w	r3, r1, lr
 8000416:	4283      	cmp	r3, r0
 8000418:	fa04 f402 	lsl.w	r4, r4, r2
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x260>
 800041e:	eb1c 0000 	adds.w	r0, ip, r0
 8000422:	f101 38ff 	add.w	r8, r1, #4294967295
 8000426:	d22f      	bcs.n	8000488 <__udivmoddi4+0x2b8>
 8000428:	4283      	cmp	r3, r0
 800042a:	d92d      	bls.n	8000488 <__udivmoddi4+0x2b8>
 800042c:	3902      	subs	r1, #2
 800042e:	4460      	add	r0, ip
 8000430:	1ac0      	subs	r0, r0, r3
 8000432:	fbb0 f3f7 	udiv	r3, r0, r7
 8000436:	fb07 0013 	mls	r0, r7, r3, r0
 800043a:	b2ad      	uxth	r5, r5
 800043c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000440:	fb03 f00e 	mul.w	r0, r3, lr
 8000444:	42a8      	cmp	r0, r5
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x28a>
 8000448:	eb1c 0505 	adds.w	r5, ip, r5
 800044c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000450:	d216      	bcs.n	8000480 <__udivmoddi4+0x2b0>
 8000452:	42a8      	cmp	r0, r5
 8000454:	d914      	bls.n	8000480 <__udivmoddi4+0x2b0>
 8000456:	3b02      	subs	r3, #2
 8000458:	4465      	add	r5, ip
 800045a:	1a28      	subs	r0, r5, r0
 800045c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000460:	e738      	b.n	80002d4 <__udivmoddi4+0x104>
 8000462:	4631      	mov	r1, r6
 8000464:	4630      	mov	r0, r6
 8000466:	e707      	b.n	8000278 <__udivmoddi4+0xa8>
 8000468:	462f      	mov	r7, r5
 800046a:	e6e4      	b.n	8000236 <__udivmoddi4+0x66>
 800046c:	4618      	mov	r0, r3
 800046e:	e6f9      	b.n	8000264 <__udivmoddi4+0x94>
 8000470:	454b      	cmp	r3, r9
 8000472:	d2a9      	bcs.n	80003c8 <__udivmoddi4+0x1f8>
 8000474:	ebb9 0802 	subs.w	r8, r9, r2
 8000478:	eb65 0e0c 	sbc.w	lr, r5, ip
 800047c:	3801      	subs	r0, #1
 800047e:	e7a3      	b.n	80003c8 <__udivmoddi4+0x1f8>
 8000480:	4643      	mov	r3, r8
 8000482:	e7ea      	b.n	800045a <__udivmoddi4+0x28a>
 8000484:	4628      	mov	r0, r5
 8000486:	e794      	b.n	80003b2 <__udivmoddi4+0x1e2>
 8000488:	4641      	mov	r1, r8
 800048a:	e7d1      	b.n	8000430 <__udivmoddi4+0x260>
 800048c:	46d0      	mov	r8, sl
 800048e:	e77b      	b.n	8000388 <__udivmoddi4+0x1b8>
 8000490:	4464      	add	r4, ip
 8000492:	3802      	subs	r0, #2
 8000494:	e747      	b.n	8000326 <__udivmoddi4+0x156>
 8000496:	3b02      	subs	r3, #2
 8000498:	4465      	add	r5, ip
 800049a:	e72f      	b.n	80002fc <__udivmoddi4+0x12c>
 800049c:	4608      	mov	r0, r1
 800049e:	e706      	b.n	80002ae <__udivmoddi4+0xde>
 80004a0:	4631      	mov	r1, r6
 80004a2:	e6e9      	b.n	8000278 <__udivmoddi4+0xa8>

080004a4 <__aeabi_idiv0>:
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop

080004a8 <UARTDMA_UartIrqHandler>:
#include "string.h"
#include "scheduler.h"


void UARTDMA_UartIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
	if(huartdma->huart->Instance->SR & UART_FLAG_IDLE)       // Check if Idle flag is set
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	f003 0310 	and.w	r3, r3, #16
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d01a      	beq.n	80004f6 <UARTDMA_UartIrqHandler+0x4e>
	{

		volatile uint32_t tmp;
		tmp = huartdma->huart->Instance->SR;                      // Read status register
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	60fb      	str	r3, [r7, #12]
		tmp = huartdma->huart->Instance->DR;                      // Read data register
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	685b      	ldr	r3, [r3, #4]
 80004d2:	60fb      	str	r3, [r7, #12]
		huartdma->huart->hdmarx->Instance->CCR &= ~DMA_CCR_EN; 	  // Disable DMA - it will force Transfer Complete interrupt if it's enabled
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	f022 0201 	bic.w	r2, r2, #1
 80004ea:	601a      	str	r2, [r3, #0]
																  // BUT! It's only for DMA Streams(i.e F4), not for Channels like there in F103!
		tmp = tmp; // For unused warning
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	60fb      	str	r3, [r7, #12]
		UARTDMA_DmaIrqHandler(huartdma); // Since DMA IRQ won't start independently for Channels, we have to handle it manually
 80004f0:	6878      	ldr	r0, [r7, #4]
 80004f2:	f000 f804 	bl	80004fe <UARTDMA_DmaIrqHandler>
	}
}
 80004f6:	bf00      	nop
 80004f8:	3710      	adds	r7, #16
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <UARTDMA_DmaIrqHandler>:

void UARTDMA_DmaIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 80004fe:	b480      	push	{r7}
 8000500:	b089      	sub	sp, #36	; 0x24
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
	{
		__IO uint32_t ISR;   // DMA interrupt status register
		__IO uint32_t IFCR;  // DMA interrupt flag clear register
	} DMA_Base_Registers;

	DMA_Base_Registers *DmaRegisters = (DMA_Base_Registers *) huartdma->huart->hdmarx->DmaBaseAddress; // Take registers base address
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800050c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800050e:	61bb      	str	r3, [r7, #24]

	if (__HAL_DMA_GET_IT_SOURCE(huartdma->huart->hdmarx, DMA_IT_TC) != RESET) // Check if interrupt source is Transfer Complete
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f003 0302 	and.w	r3, r3, #2
 800051e:	2b00      	cmp	r3, #0
 8000520:	d079      	beq.n	8000616 <UARTDMA_DmaIrqHandler+0x118>
	{
		DmaRegisters->IFCR = DMA_IFCR_CTCIF1 << huartdma->huart->hdmarx->ChannelIndex;	// Clear Transfer Complete flag
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052a:	2202      	movs	r2, #2
 800052c:	409a      	lsls	r2, r3
 800052e:	69bb      	ldr	r3, [r7, #24]
 8000530:	605a      	str	r2, [r3, #4]

		Length = DMA_RX_BUFFER_SIZE - huartdma->huart->hdmarx->Instance->CNDTR; // Get the Length of transfered data
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8000540:	617b      	str	r3, [r7, #20]

		UartBufferPointer = huartdma->UART_Buffer;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8000548:	613b      	str	r3, [r7, #16]
		DmaBufferPointer = 	huartdma->DMA_RX_Buffer;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	3304      	adds	r3, #4
 800054e:	60fb      	str	r3, [r7, #12]

		// Write received data for UART main buffer - circular buffer
		for(i = 0; i < Length; i++)
 8000550:	2300      	movs	r3, #0
 8000552:	83fb      	strh	r3, [r7, #30]
 8000554:	e035      	b.n	80005c2 <UARTDMA_DmaIrqHandler+0xc4>
		{
			TempHead = (huartdma->UartBufferHead + 1) % UART_BUFFER_SIZE;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	f8b3 3c04 	ldrh.w	r3, [r3, #3076]	; 0xc04
 800055c:	3301      	adds	r3, #1
 800055e:	425a      	negs	r2, r3
 8000560:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000564:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000568:	bf58      	it	pl
 800056a:	4253      	negpl	r3, r2
 800056c:	817b      	strh	r3, [r7, #10]
			if(TempHead == huartdma->UartBufferTail)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 8000574:	897a      	ldrh	r2, [r7, #10]
 8000576:	429a      	cmp	r2, r3
 8000578:	d106      	bne.n	8000588 <UARTDMA_DmaIrqHandler+0x8a>
			{
				huartdma->UartBufferHead = huartdma->UartBufferTail;	// No room for new data
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	f8b3 2c06 	ldrh.w	r2, [r3, #3078]	; 0xc06
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	f8a3 2c04 	strh.w	r2, [r3, #3076]	; 0xc04
 8000586:	e019      	b.n	80005bc <UARTDMA_DmaIrqHandler+0xbe>
			}
			else
			{
				UartBufferPointer[TempHead] = DmaBufferPointer[i];
 8000588:	8bfb      	ldrh	r3, [r7, #30]
 800058a:	68fa      	ldr	r2, [r7, #12]
 800058c:	441a      	add	r2, r3
 800058e:	897b      	ldrh	r3, [r7, #10]
 8000590:	6939      	ldr	r1, [r7, #16]
 8000592:	440b      	add	r3, r1
 8000594:	7812      	ldrb	r2, [r2, #0]
 8000596:	701a      	strb	r2, [r3, #0]
				if(UartBufferPointer[TempHead] == '\n')
 8000598:	897b      	ldrh	r3, [r7, #10]
 800059a:	693a      	ldr	r2, [r7, #16]
 800059c:	4413      	add	r3, r2
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b0a      	cmp	r3, #10
 80005a2:	d107      	bne.n	80005b4 <UARTDMA_DmaIrqHandler+0xb6>
				{
					huartdma->UartBufferLines++;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f893 3c08 	ldrb.w	r3, [r3, #3080]	; 0xc08
 80005aa:	3301      	adds	r3, #1
 80005ac:	b2da      	uxtb	r2, r3
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	f883 2c08 	strb.w	r2, [r3, #3080]	; 0xc08
				}
				huartdma->UartBufferHead = TempHead;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	897a      	ldrh	r2, [r7, #10]
 80005b8:	f8a3 2c04 	strh.w	r2, [r3, #3076]	; 0xc04
		for(i = 0; i < Length; i++)
 80005bc:	8bfb      	ldrh	r3, [r7, #30]
 80005be:	3301      	adds	r3, #1
 80005c0:	83fb      	strh	r3, [r7, #30]
 80005c2:	8bfb      	ldrh	r3, [r7, #30]
 80005c4:	697a      	ldr	r2, [r7, #20]
 80005c6:	429a      	cmp	r2, r3
 80005c8:	d8c5      	bhi.n	8000556 <UARTDMA_DmaIrqHandler+0x58>
			}
		}

		huartdma->UartTransferCompleted = 1;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2201      	movs	r2, #1
 80005ce:	f883 2c09 	strb.w	r2, [r3, #3081]	; 0xc09


		DmaRegisters->IFCR = 0x0FU << huartdma->huart->hdmarx->ChannelIndex; 		// Clear all interrupts
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005da:	220f      	movs	r2, #15
 80005dc:	409a      	lsls	r2, r3
 80005de:	69bb      	ldr	r3, [r7, #24]
 80005e0:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CMAR = (uint32_t) huartdma->DMA_RX_Buffer; // Set memory address for DMA again
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	1d1a      	adds	r2, r3, #4
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	60da      	str	r2, [r3, #12]
		huartdma->huart->hdmarx->Instance->CNDTR = DMA_RX_BUFFER_SIZE; // Set number of bytes to receive
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005fc:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CCR |= DMA_CCR_EN;            	// Start DMA transfer
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f042 0201 	orr.w	r2, r2, #1
 8000614:	601a      	str	r2, [r3, #0]
	}
}
 8000616:	bf00      	nop
 8000618:	3724      	adds	r7, #36	; 0x24
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr

08000620 <UARTDMA_GetCharFromBuffer>:

int UARTDMA_GetCharFromBuffer(UARTDMA_HandleTypeDef *huartdma)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	if(huartdma->UartBufferHead == huartdma->UartBufferTail)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	f8b3 2c04 	ldrh.w	r2, [r3, #3076]	; 0xc04
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 8000634:	429a      	cmp	r2, r3
 8000636:	d106      	bne.n	8000646 <UARTDMA_GetCharFromBuffer+0x26>
	{
		huartdma->UartTransferCompleted = 0;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	2200      	movs	r2, #0
 800063c:	f883 2c09 	strb.w	r2, [r3, #3081]	; 0xc09
		return -1; // error - no char to return
 8000640:	f04f 33ff 	mov.w	r3, #4294967295
 8000644:	e016      	b.n	8000674 <UARTDMA_GetCharFromBuffer+0x54>
	}
	huartdma->UartBufferTail = (huartdma->UartBufferTail + 1) % UART_BUFFER_SIZE;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 800064c:	3301      	adds	r3, #1
 800064e:	425a      	negs	r2, r3
 8000650:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000654:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000658:	bf58      	it	pl
 800065a:	4253      	negpl	r3, r2
 800065c:	b29a      	uxth	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	f8a3 2c06 	strh.w	r2, [r3, #3078]	; 0xc06

	return huartdma->UART_Buffer[huartdma->UartBufferTail];
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 800066a:	461a      	mov	r2, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4413      	add	r3, r2
 8000670:	f893 3404 	ldrb.w	r3, [r3, #1028]	; 0x404
}
 8000674:	4618      	mov	r0, r3
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	bc80      	pop	{r7}
 800067c:	4770      	bx	lr

0800067e <UARTDMA_IsDataReady>:

uint8_t UARTDMA_IsDataReady(UARTDMA_HandleTypeDef *huartdma)
{
 800067e:	b480      	push	{r7}
 8000680:	b083      	sub	sp, #12
 8000682:	af00      	add	r7, sp, #0
 8000684:	6078      	str	r0, [r7, #4]
	if(huartdma->UartBufferLines)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	f893 3c08 	ldrb.w	r3, [r3, #3080]	; 0xc08
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <UARTDMA_IsDataReady+0x16>
		return 1;
 8000690:	2301      	movs	r3, #1
 8000692:	e000      	b.n	8000696 <UARTDMA_IsDataReady+0x18>
	else
		return 0;
 8000694:	2300      	movs	r3, #0
}
 8000696:	4618      	mov	r0, r3
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr

080006a0 <UARTDMA_GetLineFromBuffer>:

int UARTDMA_GetLineFromBuffer(UARTDMA_HandleTypeDef *huartdma, char *OutBuffer)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	6039      	str	r1, [r7, #0]
	char TempChar;
	char* LinePointer = OutBuffer;
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	60fb      	str	r3, [r7, #12]
	if(huartdma->UartBufferLines)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	f893 3c08 	ldrb.w	r3, [r3, #3080]	; 0xc08
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d024      	beq.n	8000702 <UARTDMA_GetLineFromBuffer+0x62>
	{
		while((TempChar = UARTDMA_GetCharFromBuffer(huartdma)))
 80006b8:	e00e      	b.n	80006d8 <UARTDMA_GetLineFromBuffer+0x38>
		{
			if(TempChar == '\n')
 80006ba:	7afb      	ldrb	r3, [r7, #11]
 80006bc:	2b0a      	cmp	r3, #10
 80006be:	d014      	beq.n	80006ea <UARTDMA_GetLineFromBuffer+0x4a>
			{
				break;
			}
			if((TempChar != '\n') && (TempChar != '\r')){
 80006c0:	7afb      	ldrb	r3, [r7, #11]
 80006c2:	2b0a      	cmp	r3, #10
 80006c4:	d008      	beq.n	80006d8 <UARTDMA_GetLineFromBuffer+0x38>
 80006c6:	7afb      	ldrb	r3, [r7, #11]
 80006c8:	2b0d      	cmp	r3, #13
 80006ca:	d005      	beq.n	80006d8 <UARTDMA_GetLineFromBuffer+0x38>
				*LinePointer = TempChar;
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	7afa      	ldrb	r2, [r7, #11]
 80006d0:	701a      	strb	r2, [r3, #0]
				LinePointer++;
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	3301      	adds	r3, #1
 80006d6:	60fb      	str	r3, [r7, #12]
		while((TempChar = UARTDMA_GetCharFromBuffer(huartdma)))
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f7ff ffa1 	bl	8000620 <UARTDMA_GetCharFromBuffer>
 80006de:	4603      	mov	r3, r0
 80006e0:	72fb      	strb	r3, [r7, #11]
 80006e2:	7afb      	ldrb	r3, [r7, #11]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d1e8      	bne.n	80006ba <UARTDMA_GetLineFromBuffer+0x1a>
 80006e8:	e000      	b.n	80006ec <UARTDMA_GetLineFromBuffer+0x4c>
				break;
 80006ea:	bf00      	nop
			}
		}
		*LinePointer = 0; // end of cstring
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	2200      	movs	r2, #0
 80006f0:	701a      	strb	r2, [r3, #0]
		huartdma->UartBufferLines--; // decrement line counter
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	f893 3c08 	ldrb.w	r3, [r3, #3080]	; 0xc08
 80006f8:	3b01      	subs	r3, #1
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	f883 2c08 	strb.w	r2, [r3, #3080]	; 0xc08
	}
	return 0;
 8000702:	2300      	movs	r3, #0
}
 8000704:	4618      	mov	r0, r3
 8000706:	3710      	adds	r7, #16
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <UARTDMA_Init>:

void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
	huartdma->huart = huart;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	683a      	ldr	r2, [r7, #0]
 800071a:	601a      	str	r2, [r3, #0]

	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	68da      	ldr	r2, [r3, #12]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f042 0210 	orr.w	r2, r2, #16
 800072e:	60da      	str	r2, [r3, #12]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f042 0202 	orr.w	r2, r2, #2
 8000746:	601a      	str	r2, [r3, #0]

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	6818      	ldr	r0, [r3, #0]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	3304      	adds	r3, #4
 8000750:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000754:	4619      	mov	r1, r3
 8000756:	f003 f8b8 	bl	80038ca <HAL_UART_Receive_DMA>

	huartdma->huart->hdmarx->Instance->CCR &= ~DMA_CCR_HTIE; // Disable DMA Half Complete interrupt
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f022 0204 	bic.w	r2, r2, #4
 8000770:	601a      	str	r2, [r3, #0]
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000784:	1d39      	adds	r1, r7, #4
 8000786:	f04f 33ff 	mov.w	r3, #4294967295
 800078a:	2201      	movs	r2, #1
 800078c:	4803      	ldr	r0, [pc, #12]	; (800079c <__io_putchar+0x20>)
 800078e:	f003 f819 	bl	80037c4 <HAL_UART_Transmit>
	return ch;
 8000792:	687b      	ldr	r3, [r7, #4]
}
 8000794:	4618      	mov	r0, r3
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20002888 	.word	0x20002888

080007a0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80007a0:	b5b0      	push	{r4, r5, r7, lr}
 80007a2:	f5ad 5de7 	sub.w	sp, sp, #7392	; 0x1ce0
 80007a6:	b086      	sub	sp, #24
 80007a8:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80007aa:	f001 fc4e 	bl	800204a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80007ae:	f000 fe3b 	bl	8001428 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */

	srand(time(NULL));
 80007b2:	2000      	movs	r0, #0
 80007b4:	f004 fa1a 	bl	8004bec <time>
 80007b8:	4602      	mov	r2, r0
 80007ba:	460b      	mov	r3, r1
 80007bc:	4613      	mov	r3, r2
 80007be:	4618      	mov	r0, r3
 80007c0:	f004 f8f4 	bl	80049ac <srand>

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80007c4:	f000 ff54 	bl	8001670 <MX_GPIO_Init>
	MX_DMA_Init();
 80007c8:	f000 ff24 	bl	8001614 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80007cc:	f000 fece 	bl	800156c <MX_USART2_UART_Init>
	MX_UART4_Init();
 80007d0:	f000 fe78 	bl	80014c4 <MX_UART4_Init>
	MX_USART1_UART_Init();
 80007d4:	f000 fea0 	bl	8001518 <MX_USART1_UART_Init>
	MX_USART3_UART_Init();
 80007d8:	f000 fef2 	bl	80015c0 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	UARTDMA_Init(&hLTE_uart2dma6, &huart2); // receives LTE modem serial
 80007dc:	49d1      	ldr	r1, [pc, #836]	; (8000b24 <main+0x384>)
 80007de:	48d2      	ldr	r0, [pc, #840]	; (8000b28 <main+0x388>)
 80007e0:	f7ff ff94 	bl	800070c <UARTDMA_Init>
	UARTDMA_Init(&hRAM_1_uart1dma5, &huart1); // receives RAMSES 1 serial
 80007e4:	49d1      	ldr	r1, [pc, #836]	; (8000b2c <main+0x38c>)
 80007e6:	48d2      	ldr	r0, [pc, #840]	; (8000b30 <main+0x390>)
 80007e8:	f7ff ff90 	bl	800070c <UARTDMA_Init>
	UARTDMA_Init(&hRAM_2_uart3dma3, &huart3); // receives RAMSES 2 serial
 80007ec:	49d1      	ldr	r1, [pc, #836]	; (8000b34 <main+0x394>)
 80007ee:	48d2      	ldr	r0, [pc, #840]	; (8000b38 <main+0x398>)
 80007f0:	f7ff ff8c 	bl	800070c <UARTDMA_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */


	char random[20]; 				// create an initial file name, in case LTE won't get time fix
	itoa(rand(), random, 10);
 80007f4:	f004 f908 	bl	8004a08 <rand>
 80007f8:	f507 53e5 	add.w	r3, r7, #7328	; 0x1ca0
 80007fc:	f103 0318 	add.w	r3, r3, #24
 8000800:	220a      	movs	r2, #10
 8000802:	4619      	mov	r1, r3
 8000804:	f004 f83a 	bl	800487c <itoa>
	strcat((char*)g_fileName, random);
 8000808:	f507 53e5 	add.w	r3, r7, #7328	; 0x1ca0
 800080c:	f103 0318 	add.w	r3, r3, #24
 8000810:	4619      	mov	r1, r3
 8000812:	48ca      	ldr	r0, [pc, #808]	; (8000b3c <main+0x39c>)
 8000814:	f004 f936 	bl	8004a84 <strcat>
	strcat((char*)g_fileName, ".txt\"\r\n");
 8000818:	48c8      	ldr	r0, [pc, #800]	; (8000b3c <main+0x39c>)
 800081a:	f7ff fcb9 	bl	8000190 <strlen>
 800081e:	4603      	mov	r3, r0
 8000820:	461a      	mov	r2, r3
 8000822:	4bc6      	ldr	r3, [pc, #792]	; (8000b3c <main+0x39c>)
 8000824:	4413      	add	r3, r2
 8000826:	49c6      	ldr	r1, [pc, #792]	; (8000b40 <main+0x3a0>)
 8000828:	461a      	mov	r2, r3
 800082a:	460b      	mov	r3, r1
 800082c:	cb03      	ldmia	r3!, {r0, r1}
 800082e:	6010      	str	r0, [r2, #0]
 8000830:	6051      	str	r1, [r2, #4]


	printf("\t\tFILE_RAND: %s\r\n", g_fileName);
 8000832:	49c2      	ldr	r1, [pc, #776]	; (8000b3c <main+0x39c>)
 8000834:	48c3      	ldr	r0, [pc, #780]	; (8000b44 <main+0x3a4>)
 8000836:	f004 f82b 	bl	8004890 <iprintf>


	// query, sample, dataSize, data


	uint8_t current_action = 0; // currently executed action
 800083a:	2300      	movs	r3, #0
 800083c:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8000840:	f102 0207 	add.w	r2, r2, #7
 8000844:	7013      	strb	r3, [r2, #0]

	uint8_t filename_time_set = 0; // flag to see if random file name was updated with LTE time
 8000846:	2300      	movs	r3, #0
 8000848:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 800084c:	f102 0206 	add.w	r2, r2, #6
 8000850:	7013      	strb	r3, [r2, #0]

	//uint8_t transfer_status = 0;

	command action_list[255]; // list of actions to perform

	uint8_t last_action = 34; // number of the last action we want to execute
 8000852:	2322      	movs	r3, #34	; 0x22
 8000854:	f507 52e6 	add.w	r2, r7, #7360	; 0x1cc0
 8000858:	f102 0217 	add.w	r2, r2, #23
 800085c:	7013      	strb	r3, [r2, #0]

	uint8_t startup = 0; // flag to see if we just reset the processor to check LTE modem - if it is On or Off
 800085e:	2300      	movs	r3, #0
 8000860:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8000864:	f102 0205 	add.w	r2, r2, #5
 8000868:	7013      	strb	r3, [r2, #0]

	int resolution = 0; // reduces amount of printf, helpful in case there's no delay between loops
 800086a:	2300      	movs	r3, #0
 800086c:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8000870:	6013      	str	r3, [r2, #0]


	action_list[0] = LTE_sim_check_active;
 8000872:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8000876:	f6a3 4314 	subw	r3, r3, #3092	; 0xc14
 800087a:	4ab3      	ldr	r2, [pc, #716]	; (8000b48 <main+0x3a8>)
 800087c:	461c      	mov	r4, r3
 800087e:	4615      	mov	r5, r2
 8000880:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000882:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000884:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000888:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[1] = LTE_disable_echo;
 800088c:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8000890:	f6a3 4314 	subw	r3, r3, #3092	; 0xc14
 8000894:	4aad      	ldr	r2, [pc, #692]	; (8000b4c <main+0x3ac>)
 8000896:	f103 041c 	add.w	r4, r3, #28
 800089a:	4615      	mov	r5, r2
 800089c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800089e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[2] = LTE_deactivate_gprs;
 80008a8:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 80008ac:	f6a3 4314 	subw	r3, r3, #3092	; 0xc14
 80008b0:	4aa7      	ldr	r2, [pc, #668]	; (8000b50 <main+0x3b0>)
 80008b2:	f103 0438 	add.w	r4, r3, #56	; 0x38
 80008b6:	4615      	mov	r5, r2
 80008b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[3] = LTE_attach_gprs;
 80008c4:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 80008c8:	f6a3 4314 	subw	r3, r3, #3092	; 0xc14
 80008cc:	4aa1      	ldr	r2, [pc, #644]	; (8000b54 <main+0x3b4>)
 80008ce:	f103 0454 	add.w	r4, r3, #84	; 0x54
 80008d2:	4615      	mov	r5, r2
 80008d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[4] = LTE_set_apn;
 80008e0:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 80008e4:	f6a3 4314 	subw	r3, r3, #3092	; 0xc14
 80008e8:	4a9b      	ldr	r2, [pc, #620]	; (8000b58 <main+0x3b8>)
 80008ea:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80008ee:	4615      	mov	r5, r2
 80008f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[5] = LTE_gprs_up;
 80008fc:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8000900:	f6a3 4314 	subw	r3, r3, #3092	; 0xc14
 8000904:	4a95      	ldr	r2, [pc, #596]	; (8000b5c <main+0x3bc>)
 8000906:	f103 048c 	add.w	r4, r3, #140	; 0x8c
 800090a:	4615      	mov	r5, r2
 800090c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800090e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000910:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000914:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[6] = LTE_get_ip;
 8000918:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 800091c:	f6a3 4314 	subw	r3, r3, #3092	; 0xc14
 8000920:	4a8f      	ldr	r2, [pc, #572]	; (8000b60 <main+0x3c0>)
 8000922:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8000926:	4615      	mov	r5, r2
 8000928:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800092a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800092c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000930:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[7] = LTE_init_gps;
 8000934:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8000938:	f6a3 4314 	subw	r3, r3, #3092	; 0xc14
 800093c:	4a89      	ldr	r2, [pc, #548]	; (8000b64 <main+0x3c4>)
 800093e:	f103 04c4 	add.w	r4, r3, #196	; 0xc4
 8000942:	4615      	mov	r5, r2
 8000944:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000946:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000948:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800094c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[8] = LTE_reset_action;
 8000950:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8000954:	f6a3 4314 	subw	r3, r3, #3092	; 0xc14
 8000958:	4a83      	ldr	r2, [pc, #524]	; (8000b68 <main+0x3c8>)
 800095a:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 800095e:	4615      	mov	r5, r2
 8000960:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000962:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000964:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000968:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[9] = LTE_bearer_1;
 800096c:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8000970:	f6a3 4314 	subw	r3, r3, #3092	; 0xc14
 8000974:	4a7d      	ldr	r2, [pc, #500]	; (8000b6c <main+0x3cc>)
 8000976:	f103 04fc 	add.w	r4, r3, #252	; 0xfc
 800097a:	4615      	mov	r5, r2
 800097c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800097e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000980:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000984:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[10] = LTE_bearer_2;
 8000988:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 800098c:	f6a3 4314 	subw	r3, r3, #3092	; 0xc14
 8000990:	4a77      	ldr	r2, [pc, #476]	; (8000b70 <main+0x3d0>)
 8000992:	f503 748c 	add.w	r4, r3, #280	; 0x118
 8000996:	4615      	mov	r5, r2
 8000998:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800099a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800099c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[11] = LTE_bearer_3;
 80009a4:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 80009a8:	f6a3 4314 	subw	r3, r3, #3092	; 0xc14
 80009ac:	4a71      	ldr	r2, [pc, #452]	; (8000b74 <main+0x3d4>)
 80009ae:	f503 749a 	add.w	r4, r3, #308	; 0x134
 80009b2:	4615      	mov	r5, r2
 80009b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[12] = LTE_set_dns;
 80009c0:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 80009c4:	f6a3 4314 	subw	r3, r3, #3092	; 0xc14
 80009c8:	4a6b      	ldr	r2, [pc, #428]	; (8000b78 <main+0x3d8>)
 80009ca:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 80009ce:	4615      	mov	r5, r2
 80009d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	// action_list[] = LTE_ftp_put_RAM_2_data_size;

	// action_list[] = RAM_1_send_LTE;
	// action_list[] = RAM_2_send_LTE;

	action_list[13] = LTE_get_position;
 80009dc:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 80009e0:	f6a3 4314 	subw	r3, r3, #3092	; 0xc14
 80009e4:	4a65      	ldr	r2, [pc, #404]	; (8000b7c <main+0x3dc>)
 80009e6:	f503 74b6 	add.w	r4, r3, #364	; 0x16c
 80009ea:	4615      	mov	r5, r2
 80009ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[14] = LTE_get_time;
 80009f8:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 80009fc:	f6a3 4314 	subw	r3, r3, #3092	; 0xc14
 8000a00:	4a5f      	ldr	r2, [pc, #380]	; (8000b80 <main+0x3e0>)
 8000a02:	f503 74c4 	add.w	r4, r3, #392	; 0x188
 8000a06:	4615      	mov	r5, r2
 8000a08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a0c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a10:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[15] = LTE_ftp_quit;
 8000a14:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8000a18:	f6a3 4314 	subw	r3, r3, #3092	; 0xc14
 8000a1c:	4a59      	ldr	r2, [pc, #356]	; (8000b84 <main+0x3e4>)
 8000a1e:	f503 74d2 	add.w	r4, r3, #420	; 0x1a4
 8000a22:	4615      	mov	r5, r2
 8000a24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[16] = LTE_ftp_bearer;
 8000a30:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8000a34:	f6a3 4314 	subw	r3, r3, #3092	; 0xc14
 8000a38:	4a53      	ldr	r2, [pc, #332]	; (8000b88 <main+0x3e8>)
 8000a3a:	f503 74e0 	add.w	r4, r3, #448	; 0x1c0
 8000a3e:	4615      	mov	r5, r2
 8000a40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[17] = LTE_ftp_type_binary;
 8000a4c:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8000a50:	f6a3 4314 	subw	r3, r3, #3092	; 0xc14
 8000a54:	4a4d      	ldr	r2, [pc, #308]	; (8000b8c <main+0x3ec>)
 8000a56:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 8000a5a:	4615      	mov	r5, r2
 8000a5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a60:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a64:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[18] = LTE_ftp_append;
 8000a68:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8000a6c:	f6a3 4314 	subw	r3, r3, #3092	; 0xc14
 8000a70:	4a47      	ldr	r2, [pc, #284]	; (8000b90 <main+0x3f0>)
 8000a72:	f503 74fc 	add.w	r4, r3, #504	; 0x1f8
 8000a76:	4615      	mov	r5, r2
 8000a78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a7c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a80:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[19] = LTE_ftp_ip;
 8000a84:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8000a88:	f6a3 4314 	subw	r3, r3, #3092	; 0xc14
 8000a8c:	4a41      	ldr	r2, [pc, #260]	; (8000b94 <main+0x3f4>)
 8000a8e:	f503 7405 	add.w	r4, r3, #532	; 0x214
 8000a92:	4615      	mov	r5, r2
 8000a94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a98:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[20] = LTE_ftp_user;
 8000aa0:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8000aa4:	f6a3 4314 	subw	r3, r3, #3092	; 0xc14
 8000aa8:	4a3b      	ldr	r2, [pc, #236]	; (8000b98 <main+0x3f8>)
 8000aaa:	f503 740c 	add.w	r4, r3, #560	; 0x230
 8000aae:	4615      	mov	r5, r2
 8000ab0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ab2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ab4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ab8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[21] = LTE_ftp_pass;
 8000abc:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8000ac0:	f6a3 4314 	subw	r3, r3, #3092	; 0xc14
 8000ac4:	4a35      	ldr	r2, [pc, #212]	; (8000b9c <main+0x3fc>)
 8000ac6:	f503 7413 	add.w	r4, r3, #588	; 0x24c
 8000aca:	4615      	mov	r5, r2
 8000acc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ad0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ad4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[22] = LTE_ftp_port;
 8000ad8:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8000adc:	f6a3 4314 	subw	r3, r3, #3092	; 0xc14
 8000ae0:	4a2f      	ldr	r2, [pc, #188]	; (8000ba0 <main+0x400>)
 8000ae2:	f503 741a 	add.w	r4, r3, #616	; 0x268
 8000ae6:	4615      	mov	r5, r2
 8000ae8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000af0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[23] = LTE_ftp_path;
 8000af4:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8000af8:	f6a3 4314 	subw	r3, r3, #3092	; 0xc14
 8000afc:	4a29      	ldr	r2, [pc, #164]	; (8000ba4 <main+0x404>)
 8000afe:	f503 7421 	add.w	r4, r3, #644	; 0x284
 8000b02:	4615      	mov	r5, r2
 8000b04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b08:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[24] = LTE_ftp_filename;
 8000b10:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8000b14:	f6a3 4314 	subw	r3, r3, #3092	; 0xc14
 8000b18:	4a23      	ldr	r2, [pc, #140]	; (8000ba8 <main+0x408>)
 8000b1a:	f503 7428 	add.w	r4, r3, #672	; 0x2a0
 8000b1e:	4615      	mov	r5, r2
 8000b20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b22:	e043      	b.n	8000bac <main+0x40c>
 8000b24:	200028d0 	.word	0x200028d0
 8000b28:	2000041c 	.word	0x2000041c
 8000b2c:	20002888 	.word	0x20002888
 8000b30:	20001028 	.word	0x20001028
 8000b34:	20002918 	.word	0x20002918
 8000b38:	20001c34 	.word	0x20001c34
 8000b3c:	20000000 	.word	0x20000000
 8000b40:	08005f8c 	.word	0x08005f8c
 8000b44:	08005f94 	.word	0x08005f94
 8000b48:	20000064 	.word	0x20000064
 8000b4c:	20000080 	.word	0x20000080
 8000b50:	2000009c 	.word	0x2000009c
 8000b54:	200000b8 	.word	0x200000b8
 8000b58:	200000d4 	.word	0x200000d4
 8000b5c:	200000f0 	.word	0x200000f0
 8000b60:	2000010c 	.word	0x2000010c
 8000b64:	20000128 	.word	0x20000128
 8000b68:	20000374 	.word	0x20000374
 8000b6c:	2000017c 	.word	0x2000017c
 8000b70:	20000198 	.word	0x20000198
 8000b74:	200001b4 	.word	0x200001b4
 8000b78:	200001d0 	.word	0x200001d0
 8000b7c:	20000144 	.word	0x20000144
 8000b80:	200002cc 	.word	0x200002cc
 8000b84:	20000160 	.word	0x20000160
 8000b88:	200001ec 	.word	0x200001ec
 8000b8c:	20000208 	.word	0x20000208
 8000b90:	20000224 	.word	0x20000224
 8000b94:	20000240 	.word	0x20000240
 8000b98:	2000025c 	.word	0x2000025c
 8000b9c:	20000278 	.word	0x20000278
 8000ba0:	20000294 	.word	0x20000294
 8000ba4:	200002b0 	.word	0x200002b0
 8000ba8:	200002e8 	.word	0x200002e8
 8000bac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bb2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[25] = LTE_ftp_start_put;
 8000bb6:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8000bba:	f6a3 4314 	subw	r3, r3, #3092	; 0xc14
 8000bbe:	4ac0      	ldr	r2, [pc, #768]	; (8000ec0 <main+0x720>)
 8000bc0:	f503 742f 	add.w	r4, r3, #700	; 0x2bc
 8000bc4:	4615      	mov	r5, r2
 8000bc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[26] = LTE_ftp_put_data_size;
 8000bd2:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8000bd6:	f6a3 4314 	subw	r3, r3, #3092	; 0xc14
 8000bda:	4aba      	ldr	r2, [pc, #744]	; (8000ec4 <main+0x724>)
 8000bdc:	f503 7436 	add.w	r4, r3, #728	; 0x2d8
 8000be0:	4615      	mov	r5, r2
 8000be2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000be4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[27] = LTE_ftp_put_data;
 8000bee:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8000bf2:	f6a3 4314 	subw	r3, r3, #3092	; 0xc14
 8000bf6:	4ab4      	ldr	r2, [pc, #720]	; (8000ec8 <main+0x728>)
 8000bf8:	f503 743d 	add.w	r4, r3, #756	; 0x2f4
 8000bfc:	4615      	mov	r5, r2
 8000bfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[28] = LTE_ftp_end_put;
 8000c0a:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8000c0e:	f6a3 4314 	subw	r3, r3, #3092	; 0xc14
 8000c12:	4aae      	ldr	r2, [pc, #696]	; (8000ecc <main+0x72c>)
 8000c14:	f503 7444 	add.w	r4, r3, #784	; 0x310
 8000c18:	4615      	mov	r5, r2
 8000c1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c1e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c22:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[29] = LTE_get_position;
 8000c26:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8000c2a:	f6a3 4314 	subw	r3, r3, #3092	; 0xc14
 8000c2e:	4aa8      	ldr	r2, [pc, #672]	; (8000ed0 <main+0x730>)
 8000c30:	f503 744b 	add.w	r4, r3, #812	; 0x32c
 8000c34:	4615      	mov	r5, r2
 8000c36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c3a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[30] = LTE_get_time;
 8000c42:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8000c46:	f6a3 4314 	subw	r3, r3, #3092	; 0xc14
 8000c4a:	4aa2      	ldr	r2, [pc, #648]	; (8000ed4 <main+0x734>)
 8000c4c:	f503 7452 	add.w	r4, r3, #840	; 0x348
 8000c50:	4615      	mov	r5, r2
 8000c52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c56:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[31] = LTE_ftp_start_put;
 8000c5e:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8000c62:	f6a3 4314 	subw	r3, r3, #3092	; 0xc14
 8000c66:	4a96      	ldr	r2, [pc, #600]	; (8000ec0 <main+0x720>)
 8000c68:	f503 7459 	add.w	r4, r3, #868	; 0x364
 8000c6c:	4615      	mov	r5, r2
 8000c6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c72:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[32] = LTE_ftp_put_data_size;
 8000c7a:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8000c7e:	f6a3 4314 	subw	r3, r3, #3092	; 0xc14
 8000c82:	4a90      	ldr	r2, [pc, #576]	; (8000ec4 <main+0x724>)
 8000c84:	f503 7460 	add.w	r4, r3, #896	; 0x380
 8000c88:	4615      	mov	r5, r2
 8000c8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c8e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[33] = LTE_ftp_put_data;
 8000c96:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8000c9a:	f6a3 4314 	subw	r3, r3, #3092	; 0xc14
 8000c9e:	4a8a      	ldr	r2, [pc, #552]	; (8000ec8 <main+0x728>)
 8000ca0:	f503 7467 	add.w	r4, r3, #924	; 0x39c
 8000ca4:	4615      	mov	r5, r2
 8000ca6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ca8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000caa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[34] = LTE_ftp_end_put;
 8000cb2:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8000cb6:	f6a3 4314 	subw	r3, r3, #3092	; 0xc14
 8000cba:	4a84      	ldr	r2, [pc, #528]	; (8000ecc <main+0x72c>)
 8000cbc:	f503 746e 	add.w	r4, r3, #952	; 0x3b8
 8000cc0:	4615      	mov	r5, r2
 8000cc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cc6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cca:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[35] = LTE_reset_action;
 8000cce:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8000cd2:	f6a3 4314 	subw	r3, r3, #3092	; 0xc14
 8000cd6:	4a80      	ldr	r2, [pc, #512]	; (8000ed8 <main+0x738>)
 8000cd8:	f503 7475 	add.w	r4, r3, #980	; 0x3d4
 8000cdc:	4615      	mov	r5, r2
 8000cde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ce0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ce2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ce6:	e884 0007 	stmia.w	r4, {r0, r1, r2}


	//uint8_t ftp_transfer_active = 0;


	Clear_Array(g_LTE_ParseBuffer, BUFFER_SIZE); // let's start with clean LTE buffer
 8000cea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cee:	487b      	ldr	r0, [pc, #492]	; (8000edc <main+0x73c>)
 8000cf0:	f000 fd44 	bl	800177c <Clear_Array>

	while (1)
	{

		if(current_action > last_action){
 8000cf4:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8000cf8:	f103 0307 	add.w	r3, r3, #7
 8000cfc:	781a      	ldrb	r2, [r3, #0]
 8000cfe:	f507 53e6 	add.w	r3, r7, #7360	; 0x1cc0
 8000d02:	f103 0317 	add.w	r3, r3, #23
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d90a      	bls.n	8000d22 <main+0x582>
			Clear_Array(g_LTE_ParseBuffer, BUFFER_SIZE);
 8000d0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d10:	4872      	ldr	r0, [pc, #456]	; (8000edc <main+0x73c>)
 8000d12:	f000 fd33 	bl	800177c <Clear_Array>
			current_action = 29;
 8000d16:	231d      	movs	r3, #29
 8000d18:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8000d1c:	f102 0207 	add.w	r2, r2, #7
 8000d20:	7013      	strb	r3, [r2, #0]
		}


		if((resolution % 50) == 0){
 8000d22:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4b6d      	ldr	r3, [pc, #436]	; (8000ee0 <main+0x740>)
 8000d2a:	fb83 1302 	smull	r1, r3, r3, r2
 8000d2e:	1119      	asrs	r1, r3, #4
 8000d30:	17d3      	asrs	r3, r2, #31
 8000d32:	1acb      	subs	r3, r1, r3
 8000d34:	2132      	movs	r1, #50	; 0x32
 8000d36:	fb01 f303 	mul.w	r3, r1, r3
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d112      	bne.n	8000d66 <main+0x5c6>
			printf("TRYING: >>%s<<\r\n", action_list[current_action].cmd);
 8000d40:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8000d44:	f103 0307 	add.w	r3, r3, #7
 8000d48:	781a      	ldrb	r2, [r3, #0]
 8000d4a:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8000d4e:	f6a3 4114 	subw	r1, r3, #3092	; 0xc14
 8000d52:	4613      	mov	r3, r2
 8000d54:	00db      	lsls	r3, r3, #3
 8000d56:	1a9b      	subs	r3, r3, r2
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	440b      	add	r3, r1
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4860      	ldr	r0, [pc, #384]	; (8000ee4 <main+0x744>)
 8000d62:	f003 fd95 	bl	8004890 <iprintf>
		}

		enum State state = Do_Action(action_list[current_action], g_LTE_ParseBuffer);
 8000d66:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8000d6a:	f103 0307 	add.w	r3, r3, #7
 8000d6e:	781a      	ldrb	r2, [r3, #0]
 8000d70:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8000d74:	f6a3 4114 	subw	r1, r3, #3092	; 0xc14
 8000d78:	4613      	mov	r3, r2
 8000d7a:	00db      	lsls	r3, r3, #3
 8000d7c:	1a9b      	subs	r3, r3, r2
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	440b      	add	r3, r1
 8000d82:	4a56      	ldr	r2, [pc, #344]	; (8000edc <main+0x73c>)
 8000d84:	9203      	str	r2, [sp, #12]
 8000d86:	466c      	mov	r4, sp
 8000d88:	f103 0210 	add.w	r2, r3, #16
 8000d8c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000d92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d94:	f000 fdaa 	bl	80018ec <Do_Action>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	f507 52e6 	add.w	r2, r7, #7360	; 0x1cc0
 8000d9e:	f102 0216 	add.w	r2, r2, #22
 8000da2:	7013      	strb	r3, [r2, #0]
		resolution++;
 8000da4:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	3301      	adds	r3, #1
 8000dac:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8000db0:	6013      	str	r3, [r2, #0]

		switch (state){
 8000db2:	f507 53e6 	add.w	r3, r7, #7360	; 0x1cc0
 8000db6:	f103 0316 	add.w	r3, r3, #22
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b05      	cmp	r3, #5
 8000dbe:	f200 814c 	bhi.w	800105a <main+0x8ba>
 8000dc2:	a201      	add	r2, pc, #4	; (adr r2, 8000dc8 <main+0x628>)
 8000dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc8:	08000ea1 	.word	0x08000ea1
 8000dcc:	0800105b 	.word	0x0800105b
 8000dd0:	08000de1 	.word	0x08000de1
 8000dd4:	08000fbf 	.word	0x08000fbf
 8000dd8:	08000ef1 	.word	0x08000ef1
 8000ddc:	0800105b 	.word	0x0800105b
		case GOOD_ANSWER:
			printf("%s - %s\r\n", action_list[current_action].cmd, action_list[current_action].good_answer);
 8000de0:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8000de4:	f103 0307 	add.w	r3, r3, #7
 8000de8:	781a      	ldrb	r2, [r3, #0]
 8000dea:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8000dee:	f6a3 4114 	subw	r1, r3, #3092	; 0xc14
 8000df2:	4613      	mov	r3, r2
 8000df4:	00db      	lsls	r3, r3, #3
 8000df6:	1a9b      	subs	r3, r3, r2
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	440b      	add	r3, r1
 8000dfc:	6818      	ldr	r0, [r3, #0]
 8000dfe:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8000e02:	f103 0307 	add.w	r3, r3, #7
 8000e06:	781a      	ldrb	r2, [r3, #0]
 8000e08:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8000e0c:	f6a3 4114 	subw	r1, r3, #3092	; 0xc14
 8000e10:	4613      	mov	r3, r2
 8000e12:	00db      	lsls	r3, r3, #3
 8000e14:	1a9b      	subs	r3, r3, r2
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	440b      	add	r3, r1
 8000e1a:	3308      	adds	r3, #8
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	461a      	mov	r2, r3
 8000e20:	4601      	mov	r1, r0
 8000e22:	4831      	ldr	r0, [pc, #196]	; (8000ee8 <main+0x748>)
 8000e24:	f003 fd34 	bl	8004890 <iprintf>
			printf("\tREPLY: >>%s<<\r\n", (char*)g_LTE_ParseBuffer);
 8000e28:	492c      	ldr	r1, [pc, #176]	; (8000edc <main+0x73c>)
 8000e2a:	4830      	ldr	r0, [pc, #192]	; (8000eec <main+0x74c>)
 8000e2c:	f003 fd30 	bl	8004890 <iprintf>
			Do_Action(LTE_reset_action, g_LTE_ParseBuffer);
 8000e30:	4b29      	ldr	r3, [pc, #164]	; (8000ed8 <main+0x738>)
 8000e32:	4a2a      	ldr	r2, [pc, #168]	; (8000edc <main+0x73c>)
 8000e34:	9203      	str	r2, [sp, #12]
 8000e36:	466c      	mov	r4, sp
 8000e38:	f103 0210 	add.w	r2, r3, #16
 8000e3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000e42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e44:	f000 fd52 	bl	80018ec <Do_Action>
			current_action++;
 8000e48:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8000e4c:	f103 0307 	add.w	r3, r3, #7
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	3301      	adds	r3, #1
 8000e54:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8000e58:	f102 0207 	add.w	r2, r2, #7
 8000e5c:	7013      	strb	r3, [r2, #0]
			HAL_Delay(action_list[current_action].timeout / 2);
 8000e5e:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8000e62:	f103 0307 	add.w	r3, r3, #7
 8000e66:	781a      	ldrb	r2, [r3, #0]
 8000e68:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8000e6c:	f6a3 4114 	subw	r1, r3, #3092	; 0xc14
 8000e70:	4613      	mov	r3, r2
 8000e72:	00db      	lsls	r3, r3, #3
 8000e74:	1a9b      	subs	r3, r3, r2
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	440b      	add	r3, r1
 8000e7a:	330c      	adds	r3, #12
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	0fda      	lsrs	r2, r3, #31
 8000e80:	4413      	add	r3, r2
 8000e82:	105b      	asrs	r3, r3, #1
 8000e84:	4618      	mov	r0, r3
 8000e86:	f001 f94f 	bl	8002128 <HAL_Delay>
			startup = 5;
 8000e8a:	2305      	movs	r3, #5
 8000e8c:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8000e90:	f102 0205 	add.w	r2, r2, #5
 8000e94:	7013      	strb	r3, [r2, #0]
			resolution = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8000e9c:	6013      	str	r3, [r2, #0]
			break;
 8000e9e:	e0dd      	b.n	800105c <main+0x8bc>
		case READY:
			//printf("%s - READY\r\n", action_list[current_action].cmd);
			//printf("BUFFER: >>%s<<\r\n", (char*)LTE_ParseBuffer);
			current_action++;
 8000ea0:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8000ea4:	f103 0307 	add.w	r3, r3, #7
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8000eb0:	f102 0207 	add.w	r2, r2, #7
 8000eb4:	7013      	strb	r3, [r2, #0]
			resolution = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8000ebc:	6013      	str	r3, [r2, #0]
			break;
 8000ebe:	e0cd      	b.n	800105c <main+0x8bc>
 8000ec0:	20000304 	.word	0x20000304
 8000ec4:	20000320 	.word	0x20000320
 8000ec8:	2000033c 	.word	0x2000033c
 8000ecc:	20000358 	.word	0x20000358
 8000ed0:	20000144 	.word	0x20000144
 8000ed4:	200002cc 	.word	0x200002cc
 8000ed8:	20000374 	.word	0x20000374
 8000edc:	20002a2c 	.word	0x20002a2c
 8000ee0:	51eb851f 	.word	0x51eb851f
 8000ee4:	08005fa8 	.word	0x08005fa8
 8000ee8:	08005fbc 	.word	0x08005fbc
 8000eec:	08005fc8 	.word	0x08005fc8
		case TIMEOUT:
			printf("%s - Timeout\r\n", action_list[current_action].cmd);
 8000ef0:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8000ef4:	f103 0307 	add.w	r3, r3, #7
 8000ef8:	781a      	ldrb	r2, [r3, #0]
 8000efa:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8000efe:	f6a3 4114 	subw	r1, r3, #3092	; 0xc14
 8000f02:	4613      	mov	r3, r2
 8000f04:	00db      	lsls	r3, r3, #3
 8000f06:	1a9b      	subs	r3, r3, r2
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	440b      	add	r3, r1
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4878      	ldr	r0, [pc, #480]	; (80010f4 <main+0x954>)
 8000f12:	f003 fcbd 	bl	8004890 <iprintf>
			if(startup < 2){
 8000f16:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8000f1a:	f103 0305 	add.w	r3, r3, #5
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d822      	bhi.n	8000f6a <main+0x7ca>
				printf("INIT\r\n");
 8000f24:	4874      	ldr	r0, [pc, #464]	; (80010f8 <main+0x958>)
 8000f26:	f003 fd39 	bl	800499c <puts>
				printf("TURN ON\r\n");
 8000f2a:	4874      	ldr	r0, [pc, #464]	; (80010fc <main+0x95c>)
 8000f2c:	f003 fd36 	bl	800499c <puts>
				HAL_GPIO_WritePin(GPIOA,  GPIO_PIN_6, GPIO_PIN_SET);
 8000f30:	2201      	movs	r2, #1
 8000f32:	2140      	movs	r1, #64	; 0x40
 8000f34:	4872      	ldr	r0, [pc, #456]	; (8001100 <main+0x960>)
 8000f36:	f001 fde7 	bl	8002b08 <HAL_GPIO_WritePin>
				HAL_Delay(1500);
 8000f3a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000f3e:	f001 f8f3 	bl	8002128 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOA,  GPIO_PIN_6, GPIO_PIN_RESET);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2140      	movs	r1, #64	; 0x40
 8000f46:	486e      	ldr	r0, [pc, #440]	; (8001100 <main+0x960>)
 8000f48:	f001 fdde 	bl	8002b08 <HAL_GPIO_WritePin>
				HAL_Delay(5000);
 8000f4c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f50:	f001 f8ea 	bl	8002128 <HAL_Delay>
				startup++;
 8000f54:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8000f58:	f103 0305 	add.w	r3, r3, #5
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8000f64:	f102 0205 	add.w	r2, r2, #5
 8000f68:	7013      	strb	r3, [r2, #0]
			}
			Do_Action(LTE_reset_action, (uint8_t*)g_LTE_ParseBuffer);
 8000f6a:	4b66      	ldr	r3, [pc, #408]	; (8001104 <main+0x964>)
 8000f6c:	4a66      	ldr	r2, [pc, #408]	; (8001108 <main+0x968>)
 8000f6e:	9203      	str	r2, [sp, #12]
 8000f70:	466c      	mov	r4, sp
 8000f72:	f103 0210 	add.w	r2, r3, #16
 8000f76:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000f7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f7e:	f000 fcb5 	bl	80018ec <Do_Action>

			HAL_Delay(action_list[current_action].timeout);
 8000f82:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8000f86:	f103 0307 	add.w	r3, r3, #7
 8000f8a:	781a      	ldrb	r2, [r3, #0]
 8000f8c:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8000f90:	f6a3 4114 	subw	r1, r3, #3092	; 0xc14
 8000f94:	4613      	mov	r3, r2
 8000f96:	00db      	lsls	r3, r3, #3
 8000f98:	1a9b      	subs	r3, r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	440b      	add	r3, r1
 8000f9e:	330c      	adds	r3, #12
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f001 f8c0 	bl	8002128 <HAL_Delay>
			current_action=0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8000fae:	f102 0207 	add.w	r2, r2, #7
 8000fb2:	7013      	strb	r3, [r2, #0]
			resolution = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8000fba:	6013      	str	r3, [r2, #0]
			break;
 8000fbc:	e04e      	b.n	800105c <main+0x8bc>
		case BAD_ANSWER:
			printf("%s - %s\r\n", action_list[current_action].cmd, action_list[current_action].bad_answer);
 8000fbe:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8000fc2:	f103 0307 	add.w	r3, r3, #7
 8000fc6:	781a      	ldrb	r2, [r3, #0]
 8000fc8:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8000fcc:	f6a3 4114 	subw	r1, r3, #3092	; 0xc14
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	00db      	lsls	r3, r3, #3
 8000fd4:	1a9b      	subs	r3, r3, r2
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	440b      	add	r3, r1
 8000fda:	6818      	ldr	r0, [r3, #0]
 8000fdc:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8000fe0:	f103 0307 	add.w	r3, r3, #7
 8000fe4:	781a      	ldrb	r2, [r3, #0]
 8000fe6:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8000fea:	f6a3 4114 	subw	r1, r3, #3092	; 0xc14
 8000fee:	4613      	mov	r3, r2
 8000ff0:	00db      	lsls	r3, r3, #3
 8000ff2:	1a9b      	subs	r3, r3, r2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	440b      	add	r3, r1
 8000ff8:	3310      	adds	r3, #16
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4601      	mov	r1, r0
 8001000:	4842      	ldr	r0, [pc, #264]	; (800110c <main+0x96c>)
 8001002:	f003 fc45 	bl	8004890 <iprintf>
			Do_Action(LTE_reset_action, (uint8_t*)g_LTE_ParseBuffer);
 8001006:	4b3f      	ldr	r3, [pc, #252]	; (8001104 <main+0x964>)
 8001008:	4a3f      	ldr	r2, [pc, #252]	; (8001108 <main+0x968>)
 800100a:	9203      	str	r2, [sp, #12]
 800100c:	466c      	mov	r4, sp
 800100e:	f103 0210 	add.w	r2, r3, #16
 8001012:	ca07      	ldmia	r2, {r0, r1, r2}
 8001014:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001018:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800101a:	f000 fc67 	bl	80018ec <Do_Action>
			HAL_Delay(action_list[current_action].timeout);
 800101e:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001022:	f103 0307 	add.w	r3, r3, #7
 8001026:	781a      	ldrb	r2, [r3, #0]
 8001028:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 800102c:	f6a3 4114 	subw	r1, r3, #3092	; 0xc14
 8001030:	4613      	mov	r3, r2
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	1a9b      	subs	r3, r3, r2
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	440b      	add	r3, r1
 800103a:	330c      	adds	r3, #12
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4618      	mov	r0, r3
 8001040:	f001 f872 	bl	8002128 <HAL_Delay>
			startup = 5;
 8001044:	2305      	movs	r3, #5
 8001046:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 800104a:	f102 0205 	add.w	r2, r2, #5
 800104e:	7013      	strb	r3, [r2, #0]
			resolution = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8001056:	6013      	str	r3, [r2, #0]
			break;
 8001058:	e000      	b.n	800105c <main+0x8bc>
		case FTP_ACTIVE:

			break;
		default:
			break;
 800105a:	bf00      	nop
		if(hRAM_2_uart3dma3.UartTransferCompleted)
		{

		}

		if(UARTDMA_IsDataReady(&hLTE_uart2dma6))
 800105c:	482c      	ldr	r0, [pc, #176]	; (8001110 <main+0x970>)
 800105e:	f7ff fb0e 	bl	800067e <UARTDMA_IsDataReady>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	f000 81b8 	beq.w	80013da <main+0xc3a>
		{
			UARTDMA_GetLineFromBuffer(&hLTE_uart2dma6, (char*)g_LTE_ParseBuffer);
 800106a:	4927      	ldr	r1, [pc, #156]	; (8001108 <main+0x968>)
 800106c:	4828      	ldr	r0, [pc, #160]	; (8001110 <main+0x970>)
 800106e:	f7ff fb17 	bl	80006a0 <UARTDMA_GetLineFromBuffer>
			printf("\tBUFFER: >>%s<<\r\n", (char*)g_LTE_ParseBuffer);
 8001072:	4925      	ldr	r1, [pc, #148]	; (8001108 <main+0x968>)
 8001074:	4827      	ldr	r0, [pc, #156]	; (8001114 <main+0x974>)
 8001076:	f003 fc0b 	bl	8004890 <iprintf>

			// if message is time, update FTP filename
			char* ptr;
			if((ptr = strstr((char*)g_LTE_ParseBuffer, "+CCLK: ")) != NULL){
 800107a:	4927      	ldr	r1, [pc, #156]	; (8001118 <main+0x978>)
 800107c:	4822      	ldr	r0, [pc, #136]	; (8001108 <main+0x968>)
 800107e:	f003 fd18 	bl	8004ab2 <strstr>
 8001082:	f507 53e6 	add.w	r3, r7, #7360	; 0x1cc0
 8001086:	f103 0310 	add.w	r3, r3, #16
 800108a:	6018      	str	r0, [r3, #0]
 800108c:	f507 53e6 	add.w	r3, r7, #7360	; 0x1cc0
 8001090:	f103 0310 	add.w	r3, r3, #16
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	f000 8134 	beq.w	8001304 <main+0xb64>
				printf("\t\tTIME: %s\r\n", (char*)g_LTE_ParseBuffer);
 800109c:	491a      	ldr	r1, [pc, #104]	; (8001108 <main+0x968>)
 800109e:	481f      	ldr	r0, [pc, #124]	; (800111c <main+0x97c>)
 80010a0:	f003 fbf6 	bl	8004890 <iprintf>

				strcat((char*)gps_data_latest,(char*)g_LTE_ParseBuffer); // append GPS data with LTE time
 80010a4:	4918      	ldr	r1, [pc, #96]	; (8001108 <main+0x968>)
 80010a6:	481e      	ldr	r0, [pc, #120]	; (8001120 <main+0x980>)
 80010a8:	f003 fcec 	bl	8004a84 <strcat>
				//strcat(gps_data_latest,"\r\n");

				printf("GPS BUFFER AT TIME: %s\r\n", gps_data_latest);
 80010ac:	491c      	ldr	r1, [pc, #112]	; (8001120 <main+0x980>)
 80010ae:	481d      	ldr	r0, [pc, #116]	; (8001124 <main+0x984>)
 80010b0:	f003 fbee 	bl	8004890 <iprintf>

				if(filename_time_set == 0){ // it's the first time I receive, and I will set FTP file name based on it
 80010b4:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 80010b8:	f103 0306 	add.w	r3, r3, #6
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	f040 80bf 	bne.w	8001242 <main+0xaa2>


					filename_time_set = 1; // do not repeat
 80010c4:	2301      	movs	r3, #1
 80010c6:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 80010ca:	f102 0206 	add.w	r2, r2, #6
 80010ce:	7013      	strb	r3, [r2, #0]

					char* timeString = ptr+8;
 80010d0:	f507 53e6 	add.w	r3, r7, #7360	; 0x1cc0
 80010d4:	f103 0310 	add.w	r3, r3, #16
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	3308      	adds	r3, #8
 80010dc:	f507 52e6 	add.w	r2, r7, #7360	; 0x1cc0
 80010e0:	f102 020c 	add.w	r2, r2, #12
 80010e4:	6013      	str	r3, [r2, #0]

					for (int i = 0; i < strlen(timeString); i++)
 80010e6:	2300      	movs	r3, #0
 80010e8:	f507 52e6 	add.w	r2, r7, #7360	; 0x1cc0
 80010ec:	f102 021c 	add.w	r2, r2, #28
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	e061      	b.n	80011b8 <main+0xa18>
 80010f4:	08005fdc 	.word	0x08005fdc
 80010f8:	08005fec 	.word	0x08005fec
 80010fc:	08005ff4 	.word	0x08005ff4
 8001100:	40020000 	.word	0x40020000
 8001104:	20000374 	.word	0x20000374
 8001108:	20002a2c 	.word	0x20002a2c
 800110c:	08005fbc 	.word	0x08005fbc
 8001110:	2000041c 	.word	0x2000041c
 8001114:	08006000 	.word	0x08006000
 8001118:	08006014 	.word	0x08006014
 800111c:	0800601c 	.word	0x0800601c
 8001120:	20002b2c 	.word	0x20002b2c
 8001124:	0800602c 	.word	0x0800602c
					{
						if ((timeString[i] > '9') || (timeString[i] < '0')){
 8001128:	f507 53e6 	add.w	r3, r7, #7360	; 0x1cc0
 800112c:	f103 031c 	add.w	r3, r3, #28
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f507 52e6 	add.w	r2, r7, #7360	; 0x1cc0
 8001136:	f102 020c 	add.w	r2, r2, #12
 800113a:	6812      	ldr	r2, [r2, #0]
 800113c:	4413      	add	r3, r2
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b39      	cmp	r3, #57	; 0x39
 8001142:	d80d      	bhi.n	8001160 <main+0x9c0>
 8001144:	f507 53e6 	add.w	r3, r7, #7360	; 0x1cc0
 8001148:	f103 031c 	add.w	r3, r3, #28
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f507 52e6 	add.w	r2, r7, #7360	; 0x1cc0
 8001152:	f102 020c 	add.w	r2, r2, #12
 8001156:	6812      	ldr	r2, [r2, #0]
 8001158:	4413      	add	r3, r2
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b2f      	cmp	r3, #47	; 0x2f
 800115e:	d80c      	bhi.n	800117a <main+0x9da>
							timeString[i] = '_';
 8001160:	f507 53e6 	add.w	r3, r7, #7360	; 0x1cc0
 8001164:	f103 031c 	add.w	r3, r3, #28
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f507 52e6 	add.w	r2, r7, #7360	; 0x1cc0
 800116e:	f102 020c 	add.w	r2, r2, #12
 8001172:	6812      	ldr	r2, [r2, #0]
 8001174:	4413      	add	r3, r2
 8001176:	225f      	movs	r2, #95	; 0x5f
 8001178:	701a      	strb	r2, [r3, #0]
						}
						if(i>19){
 800117a:	f507 53e6 	add.w	r3, r7, #7360	; 0x1cc0
 800117e:	f103 031c 	add.w	r3, r3, #28
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b13      	cmp	r3, #19
 8001186:	dd0c      	ble.n	80011a2 <main+0xa02>
							timeString[i] = '\0';
 8001188:	f507 53e6 	add.w	r3, r7, #7360	; 0x1cc0
 800118c:	f103 031c 	add.w	r3, r3, #28
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f507 52e6 	add.w	r2, r7, #7360	; 0x1cc0
 8001196:	f102 020c 	add.w	r2, r2, #12
 800119a:	6812      	ldr	r2, [r2, #0]
 800119c:	4413      	add	r3, r2
 800119e:	2200      	movs	r2, #0
 80011a0:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < strlen(timeString); i++)
 80011a2:	f507 53e6 	add.w	r3, r7, #7360	; 0x1cc0
 80011a6:	f103 031c 	add.w	r3, r3, #28
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	3301      	adds	r3, #1
 80011ae:	f507 52e6 	add.w	r2, r7, #7360	; 0x1cc0
 80011b2:	f102 021c 	add.w	r2, r2, #28
 80011b6:	6013      	str	r3, [r2, #0]
 80011b8:	f507 53e6 	add.w	r3, r7, #7360	; 0x1cc0
 80011bc:	f103 030c 	add.w	r3, r3, #12
 80011c0:	6818      	ldr	r0, [r3, #0]
 80011c2:	f7fe ffe5 	bl	8000190 <strlen>
 80011c6:	4602      	mov	r2, r0
 80011c8:	f507 53e6 	add.w	r3, r7, #7360	; 0x1cc0
 80011cc:	f103 031c 	add.w	r3, r3, #28
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d8a8      	bhi.n	8001128 <main+0x988>
						}
					}

					char fileNameLocal[60] = "AT+FTPPUTNAME=\"";
 80011d6:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 80011da:	f5a3 6448 	sub.w	r4, r3, #3200	; 0xc80
 80011de:	4b82      	ldr	r3, [pc, #520]	; (80013e8 <main+0xc48>)
 80011e0:	4625      	mov	r5, r4
 80011e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011e4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80011e8:	f104 0310 	add.w	r3, r4, #16
 80011ec:	222c      	movs	r2, #44	; 0x2c
 80011ee:	2100      	movs	r1, #0
 80011f0:	4618      	mov	r0, r3
 80011f2:	f003 fb45 	bl	8004880 <memset>
					strcat(fileNameLocal, timeString);
 80011f6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80011fa:	f507 52e6 	add.w	r2, r7, #7360	; 0x1cc0
 80011fe:	f102 020c 	add.w	r2, r2, #12
 8001202:	6811      	ldr	r1, [r2, #0]
 8001204:	4618      	mov	r0, r3
 8001206:	f003 fc3d 	bl	8004a84 <strcat>
					strcat(fileNameLocal, ".txt\"\r\n");
 800120a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800120e:	4618      	mov	r0, r3
 8001210:	f7fe ffbe 	bl	8000190 <strlen>
 8001214:	4603      	mov	r3, r0
 8001216:	461a      	mov	r2, r3
 8001218:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800121c:	4413      	add	r3, r2
 800121e:	4973      	ldr	r1, [pc, #460]	; (80013ec <main+0xc4c>)
 8001220:	461a      	mov	r2, r3
 8001222:	460b      	mov	r3, r1
 8001224:	cb03      	ldmia	r3!, {r0, r1}
 8001226:	6010      	str	r0, [r2, #0]
 8001228:	6051      	str	r1, [r2, #4]


					printf("\tFILENAME_TIME_CHANGE: %s\r\n", fileNameLocal);
 800122a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800122e:	4619      	mov	r1, r3
 8001230:	486f      	ldr	r0, [pc, #444]	; (80013f0 <main+0xc50>)
 8001232:	f003 fb2d 	bl	8004890 <iprintf>

					strcpy((char*)g_fileName, fileNameLocal);
 8001236:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800123a:	4619      	mov	r1, r3
 800123c:	486d      	ldr	r0, [pc, #436]	; (80013f4 <main+0xc54>)
 800123e:	f003 fc30 	bl	8004aa2 <strcpy>

				}

				char save[100] = "AT+FTPPUT=2,";
 8001242:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8001246:	f6a3 45e4 	subw	r5, r3, #3300	; 0xce4
 800124a:	4b6b      	ldr	r3, [pc, #428]	; (80013f8 <main+0xc58>)
 800124c:	462c      	mov	r4, r5
 800124e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001250:	c407      	stmia	r4!, {r0, r1, r2}
 8001252:	7023      	strb	r3, [r4, #0]
 8001254:	f105 030d 	add.w	r3, r5, #13
 8001258:	2257      	movs	r2, #87	; 0x57
 800125a:	2100      	movs	r1, #0
 800125c:	4618      	mov	r0, r3
 800125e:	f003 fb0f 	bl	8004880 <memset>
				char len[5];
				itoa(strlen((char*)gps_data_latest), len, 10);
 8001262:	4866      	ldr	r0, [pc, #408]	; (80013fc <main+0xc5c>)
 8001264:	f7fe ff94 	bl	8000190 <strlen>
 8001268:	4603      	mov	r3, r0
 800126a:	4618      	mov	r0, r3
 800126c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001270:	3b1c      	subs	r3, #28
 8001272:	220a      	movs	r2, #10
 8001274:	4619      	mov	r1, r3
 8001276:	f003 fb01 	bl	800487c <itoa>
				strcat(save, len);
 800127a:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 800127e:	3a1c      	subs	r2, #28
 8001280:	f107 0308 	add.w	r3, r7, #8
 8001284:	3b04      	subs	r3, #4
 8001286:	4611      	mov	r1, r2
 8001288:	4618      	mov	r0, r3
 800128a:	f003 fbfb 	bl	8004a84 <strcat>
				strcat(save, "\r\n");
 800128e:	f107 0308 	add.w	r3, r7, #8
 8001292:	3b04      	subs	r3, #4
 8001294:	4618      	mov	r0, r3
 8001296:	f7fe ff7b 	bl	8000190 <strlen>
 800129a:	4603      	mov	r3, r0
 800129c:	461a      	mov	r2, r3
 800129e:	f107 0308 	add.w	r3, r7, #8
 80012a2:	3b04      	subs	r3, #4
 80012a4:	4413      	add	r3, r2
 80012a6:	4a56      	ldr	r2, [pc, #344]	; (8001400 <main+0xc60>)
 80012a8:	8811      	ldrh	r1, [r2, #0]
 80012aa:	7892      	ldrb	r2, [r2, #2]
 80012ac:	8019      	strh	r1, [r3, #0]
 80012ae:	709a      	strb	r2, [r3, #2]

				strcpy((char*)g_dataSize, save);
 80012b0:	f107 0308 	add.w	r3, r7, #8
 80012b4:	3b04      	subs	r3, #4
 80012b6:	4619      	mov	r1, r3
 80012b8:	4852      	ldr	r0, [pc, #328]	; (8001404 <main+0xc64>)
 80012ba:	f003 fbf2 	bl	8004aa2 <strcpy>

				char save2[100] = "+FTPPUT: 2,";
 80012be:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 80012c2:	f5a3 6348 	sub.w	r3, r3, #3200	; 0xc80
 80012c6:	4a50      	ldr	r2, [pc, #320]	; (8001408 <main+0xc68>)
 80012c8:	461c      	mov	r4, r3
 80012ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80012cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80012d0:	330c      	adds	r3, #12
 80012d2:	2258      	movs	r2, #88	; 0x58
 80012d4:	2100      	movs	r1, #0
 80012d6:	4618      	mov	r0, r3
 80012d8:	f003 fad2 	bl	8004880 <memset>
				strcat(save2, len);
 80012dc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80012e0:	3b1c      	subs	r3, #28
 80012e2:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80012e6:	4619      	mov	r1, r3
 80012e8:	4610      	mov	r0, r2
 80012ea:	f003 fbcb 	bl	8004a84 <strcat>

				strcpy((char*)g_dataSizeResponse, save2);
 80012ee:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80012f2:	4619      	mov	r1, r3
 80012f4:	4845      	ldr	r0, [pc, #276]	; (800140c <main+0xc6c>)
 80012f6:	f003 fbd4 	bl	8004aa2 <strcpy>

				printf("\tASSERT_EXPECTED_REPLY: %s\r\n", g_dataSizeResponse);
 80012fa:	4944      	ldr	r1, [pc, #272]	; (800140c <main+0xc6c>)
 80012fc:	4844      	ldr	r0, [pc, #272]	; (8001410 <main+0xc70>)
 80012fe:	f003 fac7 	bl	8004890 <iprintf>
 8001302:	e4f7      	b.n	8000cf4 <main+0x554>
				//				}else{
				//					printf("\t\t\t\tCALLOC_FAIL_DATA");
				//				}


			}else if((ptr = strstr((char*)g_LTE_ParseBuffer, "+FTPPUT: 1,1,")) != NULL){ // else, if message is FTP server ready for data response
 8001304:	4943      	ldr	r1, [pc, #268]	; (8001414 <main+0xc74>)
 8001306:	4844      	ldr	r0, [pc, #272]	; (8001418 <main+0xc78>)
 8001308:	f003 fbd3 	bl	8004ab2 <strstr>
 800130c:	f507 53e6 	add.w	r3, r7, #7360	; 0x1cc0
 8001310:	f103 0310 	add.w	r3, r3, #16
 8001314:	6018      	str	r0, [r3, #0]
 8001316:	f507 53e6 	add.w	r3, r7, #7360	; 0x1cc0
 800131a:	f103 0310 	add.w	r3, r3, #16
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d00e      	beq.n	8001342 <main+0xba2>
				//ftp_transfer_active = 1;
				//transfer_status++;
				printf("FTP #: %d\r\n", atoi(ptr+13));
 8001324:	f507 53e6 	add.w	r3, r7, #7360	; 0x1cc0
 8001328:	f103 0310 	add.w	r3, r3, #16
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	330d      	adds	r3, #13
 8001330:	4618      	mov	r0, r3
 8001332:	f003 fa5d 	bl	80047f0 <atoi>
 8001336:	4603      	mov	r3, r0
 8001338:	4619      	mov	r1, r3
 800133a:	4838      	ldr	r0, [pc, #224]	; (800141c <main+0xc7c>)
 800133c:	f003 faa8 	bl	8004890 <iprintf>
 8001340:	e4d8      	b.n	8000cf4 <main+0x554>
			}else if((ptr = strstr((char*)g_LTE_ParseBuffer, "+CGNSINF")) != NULL){ // save GPS data
 8001342:	4937      	ldr	r1, [pc, #220]	; (8001420 <main+0xc80>)
 8001344:	4834      	ldr	r0, [pc, #208]	; (8001418 <main+0xc78>)
 8001346:	f003 fbb4 	bl	8004ab2 <strstr>
 800134a:	f507 53e6 	add.w	r3, r7, #7360	; 0x1cc0
 800134e:	f103 0310 	add.w	r3, r3, #16
 8001352:	6018      	str	r0, [r3, #0]
 8001354:	f507 53e6 	add.w	r3, r7, #7360	; 0x1cc0
 8001358:	f103 0310 	add.w	r3, r3, #16
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	f43f acc8 	beq.w	8000cf4 <main+0x554>
				//ftp_transfer_active = 0;
				//transfer_status = 0; // I receive new GPS data, which means I don't transmit

				Clear_Array(gps_data_latest, BUFFER_SIZE); // clean old entries
 8001364:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001368:	4824      	ldr	r0, [pc, #144]	; (80013fc <main+0xc5c>)
 800136a:	f000 fa07 	bl	800177c <Clear_Array>

				gps_data_latest[0] = '#'; // preamble
 800136e:	4b23      	ldr	r3, [pc, #140]	; (80013fc <main+0xc5c>)
 8001370:	2223      	movs	r2, #35	; 0x23
 8001372:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<strlen((char*)g_LTE_ParseBuffer)-1; i++){ // -1 because I added preamble
 8001374:	2300      	movs	r3, #0
 8001376:	f507 52e6 	add.w	r2, r7, #7360	; 0x1cc0
 800137a:	f102 0218 	add.w	r2, r2, #24
 800137e:	6013      	str	r3, [r2, #0]
 8001380:	e01a      	b.n	80013b8 <main+0xc18>
					gps_data_latest[i+1] = g_LTE_ParseBuffer[i];
 8001382:	f507 53e6 	add.w	r3, r7, #7360	; 0x1cc0
 8001386:	f103 0318 	add.w	r3, r3, #24
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	3301      	adds	r3, #1
 800138e:	4922      	ldr	r1, [pc, #136]	; (8001418 <main+0xc78>)
 8001390:	f507 52e6 	add.w	r2, r7, #7360	; 0x1cc0
 8001394:	f102 0218 	add.w	r2, r2, #24
 8001398:	6812      	ldr	r2, [r2, #0]
 800139a:	440a      	add	r2, r1
 800139c:	7811      	ldrb	r1, [r2, #0]
 800139e:	4a17      	ldr	r2, [pc, #92]	; (80013fc <main+0xc5c>)
 80013a0:	54d1      	strb	r1, [r2, r3]
				for(int i=0; i<strlen((char*)g_LTE_ParseBuffer)-1; i++){ // -1 because I added preamble
 80013a2:	f507 53e6 	add.w	r3, r7, #7360	; 0x1cc0
 80013a6:	f103 0318 	add.w	r3, r3, #24
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	3301      	adds	r3, #1
 80013ae:	f507 52e6 	add.w	r2, r7, #7360	; 0x1cc0
 80013b2:	f102 0218 	add.w	r2, r2, #24
 80013b6:	6013      	str	r3, [r2, #0]
 80013b8:	4817      	ldr	r0, [pc, #92]	; (8001418 <main+0xc78>)
 80013ba:	f7fe fee9 	bl	8000190 <strlen>
 80013be:	4603      	mov	r3, r0
 80013c0:	1e5a      	subs	r2, r3, #1
 80013c2:	f507 53e6 	add.w	r3, r7, #7360	; 0x1cc0
 80013c6:	f103 0318 	add.w	r3, r3, #24
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d8d8      	bhi.n	8001382 <main+0xbe2>
				//char fake[BUFFER_SIZE] = "+CGNSINF: 5109.0262308,N,11401.8407342,203522.00,A,5109.0262308,N,11401.8407342,W,0.004,133.4,130522,0.0,E,D*2B";
				//				for(int i=0; i<strlen(fake); i++){
				//					gps_data_latest[i] = fake[i];
				//				}

				printf("GPS DATA LOCKED: %s\r\n", gps_data_latest);
 80013d0:	490a      	ldr	r1, [pc, #40]	; (80013fc <main+0xc5c>)
 80013d2:	4814      	ldr	r0, [pc, #80]	; (8001424 <main+0xc84>)
 80013d4:	f003 fa5c 	bl	8004890 <iprintf>
 80013d8:	e48c      	b.n	8000cf4 <main+0x554>

			}

		}else{
			Clear_Array(g_LTE_ParseBuffer, BUFFER_SIZE);
 80013da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013de:	480e      	ldr	r0, [pc, #56]	; (8001418 <main+0xc78>)
 80013e0:	f000 f9cc 	bl	800177c <Clear_Array>
	{
 80013e4:	e486      	b.n	8000cf4 <main+0x554>
 80013e6:	bf00      	nop
 80013e8:	080060c8 	.word	0x080060c8
 80013ec:	08005f8c 	.word	0x08005f8c
 80013f0:	08006048 	.word	0x08006048
 80013f4:	20000000 	.word	0x20000000
 80013f8:	08006104 	.word	0x08006104
 80013fc:	20002b2c 	.word	0x20002b2c
 8001400:	08006064 	.word	0x08006064
 8001404:	2000003c 	.word	0x2000003c
 8001408:	08006168 	.word	0x08006168
 800140c:	20000050 	.word	0x20000050
 8001410:	08006068 	.word	0x08006068
 8001414:	08006088 	.word	0x08006088
 8001418:	20002a2c 	.word	0x20002a2c
 800141c:	08006098 	.word	0x08006098
 8001420:	080060a4 	.word	0x080060a4
 8001424:	080060b0 	.word	0x080060b0

08001428 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b092      	sub	sp, #72	; 0x48
 800142c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800142e:	f107 0314 	add.w	r3, r7, #20
 8001432:	2234      	movs	r2, #52	; 0x34
 8001434:	2100      	movs	r1, #0
 8001436:	4618      	mov	r0, r3
 8001438:	f003 fa22 	bl	8004880 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800143c:	463b      	mov	r3, r7
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
 8001448:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800144a:	4b1d      	ldr	r3, [pc, #116]	; (80014c0 <SystemClock_Config+0x98>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001452:	4a1b      	ldr	r2, [pc, #108]	; (80014c0 <SystemClock_Config+0x98>)
 8001454:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001458:	6013      	str	r3, [r2, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800145a:	2302      	movs	r3, #2
 800145c:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800145e:	2301      	movs	r3, #1
 8001460:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001462:	2310      	movs	r3, #16
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001466:	2302      	movs	r3, #2
 8001468:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800146a:	2300      	movs	r3, #0
 800146c:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800146e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001472:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001474:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001478:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	4618      	mov	r0, r3
 8001480:	f001 fb5a 	bl	8002b38 <HAL_RCC_OscConfig>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <SystemClock_Config+0x66>
	{
		Error_Handler();
 800148a:	f000 f957 	bl	800173c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800148e:	230f      	movs	r3, #15
 8001490:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001492:	2303      	movs	r3, #3
 8001494:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001496:	2300      	movs	r3, #0
 8001498:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014a2:	463b      	mov	r3, r7
 80014a4:	2101      	movs	r1, #1
 80014a6:	4618      	mov	r0, r3
 80014a8:	f001 fe76 	bl	8003198 <HAL_RCC_ClockConfig>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <SystemClock_Config+0x8e>
	{
		Error_Handler();
 80014b2:	f000 f943 	bl	800173c <Error_Handler>
	}
}
 80014b6:	bf00      	nop
 80014b8:	3748      	adds	r7, #72	; 0x48
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40007000 	.word	0x40007000

080014c4 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 80014c8:	4b11      	ldr	r3, [pc, #68]	; (8001510 <MX_UART4_Init+0x4c>)
 80014ca:	4a12      	ldr	r2, [pc, #72]	; (8001514 <MX_UART4_Init+0x50>)
 80014cc:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 80014ce:	4b10      	ldr	r3, [pc, #64]	; (8001510 <MX_UART4_Init+0x4c>)
 80014d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014d4:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <MX_UART4_Init+0x4c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <MX_UART4_Init+0x4c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <MX_UART4_Init+0x4c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <MX_UART4_Init+0x4c>)
 80014ea:	220c      	movs	r2, #12
 80014ec:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ee:	4b08      	ldr	r3, [pc, #32]	; (8001510 <MX_UART4_Init+0x4c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <MX_UART4_Init+0x4c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK)
 80014fa:	4805      	ldr	r0, [pc, #20]	; (8001510 <MX_UART4_Init+0x4c>)
 80014fc:	f002 f912 	bl	8003724 <HAL_UART_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_UART4_Init+0x46>
	{
		Error_Handler();
 8001506:	f000 f919 	bl	800173c <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20002840 	.word	0x20002840
 8001514:	40004c00 	.word	0x40004c00

08001518 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800151c:	4b11      	ldr	r3, [pc, #68]	; (8001564 <MX_USART1_UART_Init+0x4c>)
 800151e:	4a12      	ldr	r2, [pc, #72]	; (8001568 <MX_USART1_UART_Init+0x50>)
 8001520:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001522:	4b10      	ldr	r3, [pc, #64]	; (8001564 <MX_USART1_UART_Init+0x4c>)
 8001524:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001528:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800152a:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <MX_USART1_UART_Init+0x4c>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <MX_USART1_UART_Init+0x4c>)
 8001532:	2200      	movs	r2, #0
 8001534:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001536:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <MX_USART1_UART_Init+0x4c>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800153c:	4b09      	ldr	r3, [pc, #36]	; (8001564 <MX_USART1_UART_Init+0x4c>)
 800153e:	220c      	movs	r2, #12
 8001540:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001542:	4b08      	ldr	r3, [pc, #32]	; (8001564 <MX_USART1_UART_Init+0x4c>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <MX_USART1_UART_Init+0x4c>)
 800154a:	2200      	movs	r2, #0
 800154c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800154e:	4805      	ldr	r0, [pc, #20]	; (8001564 <MX_USART1_UART_Init+0x4c>)
 8001550:	f002 f8e8 	bl	8003724 <HAL_UART_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 800155a:	f000 f8ef 	bl	800173c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20002888 	.word	0x20002888
 8001568:	40013800 	.word	0x40013800

0800156c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001570:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <MX_USART2_UART_Init+0x4c>)
 8001572:	4a12      	ldr	r2, [pc, #72]	; (80015bc <MX_USART2_UART_Init+0x50>)
 8001574:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 57600;
 8001576:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <MX_USART2_UART_Init+0x4c>)
 8001578:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800157c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <MX_USART2_UART_Init+0x4c>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <MX_USART2_UART_Init+0x4c>)
 8001586:	2200      	movs	r2, #0
 8001588:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800158a:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <MX_USART2_UART_Init+0x4c>)
 800158c:	2200      	movs	r2, #0
 800158e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001590:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <MX_USART2_UART_Init+0x4c>)
 8001592:	220c      	movs	r2, #12
 8001594:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001596:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <MX_USART2_UART_Init+0x4c>)
 8001598:	2200      	movs	r2, #0
 800159a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <MX_USART2_UART_Init+0x4c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80015a2:	4805      	ldr	r0, [pc, #20]	; (80015b8 <MX_USART2_UART_Init+0x4c>)
 80015a4:	f002 f8be 	bl	8003724 <HAL_UART_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 80015ae:	f000 f8c5 	bl	800173c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	200028d0 	.word	0x200028d0
 80015bc:	40004400 	.word	0x40004400

080015c0 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80015c4:	4b11      	ldr	r3, [pc, #68]	; (800160c <MX_USART3_UART_Init+0x4c>)
 80015c6:	4a12      	ldr	r2, [pc, #72]	; (8001610 <MX_USART3_UART_Init+0x50>)
 80015c8:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80015ca:	4b10      	ldr	r3, [pc, #64]	; (800160c <MX_USART3_UART_Init+0x4c>)
 80015cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015d0:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015d2:	4b0e      	ldr	r3, [pc, #56]	; (800160c <MX_USART3_UART_Init+0x4c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80015d8:	4b0c      	ldr	r3, [pc, #48]	; (800160c <MX_USART3_UART_Init+0x4c>)
 80015da:	2200      	movs	r2, #0
 80015dc:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80015de:	4b0b      	ldr	r3, [pc, #44]	; (800160c <MX_USART3_UART_Init+0x4c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80015e4:	4b09      	ldr	r3, [pc, #36]	; (800160c <MX_USART3_UART_Init+0x4c>)
 80015e6:	220c      	movs	r2, #12
 80015e8:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ea:	4b08      	ldr	r3, [pc, #32]	; (800160c <MX_USART3_UART_Init+0x4c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <MX_USART3_UART_Init+0x4c>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80015f6:	4805      	ldr	r0, [pc, #20]	; (800160c <MX_USART3_UART_Init+0x4c>)
 80015f8:	f002 f894 	bl	8003724 <HAL_UART_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 8001602:	f000 f89b 	bl	800173c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20002918 	.word	0x20002918
 8001610:	40004800 	.word	0x40004800

08001614 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800161a:	4b14      	ldr	r3, [pc, #80]	; (800166c <MX_DMA_Init+0x58>)
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	4a13      	ldr	r2, [pc, #76]	; (800166c <MX_DMA_Init+0x58>)
 8001620:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001624:	61d3      	str	r3, [r2, #28]
 8001626:	4b11      	ldr	r3, [pc, #68]	; (800166c <MX_DMA_Init+0x58>)
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800162e:	607b      	str	r3, [r7, #4]
 8001630:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	2100      	movs	r1, #0
 8001636:	200d      	movs	r0, #13
 8001638:	f000 fe6f 	bl	800231a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800163c:	200d      	movs	r0, #13
 800163e:	f000 fe88 	bl	8002352 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001642:	2200      	movs	r2, #0
 8001644:	2100      	movs	r1, #0
 8001646:	200f      	movs	r0, #15
 8001648:	f000 fe67 	bl	800231a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800164c:	200f      	movs	r0, #15
 800164e:	f000 fe80 	bl	8002352 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2100      	movs	r1, #0
 8001656:	2010      	movs	r0, #16
 8001658:	f000 fe5f 	bl	800231a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800165c:	2010      	movs	r0, #16
 800165e:	f000 fe78 	bl	8002352 <HAL_NVIC_EnableIRQ>

}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40023800 	.word	0x40023800

08001670 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08a      	sub	sp, #40	; 0x28
 8001674:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001676:	f107 0314 	add.w	r3, r7, #20
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	609a      	str	r2, [r3, #8]
 8001682:	60da      	str	r2, [r3, #12]
 8001684:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001686:	4b2a      	ldr	r3, [pc, #168]	; (8001730 <MX_GPIO_Init+0xc0>)
 8001688:	69db      	ldr	r3, [r3, #28]
 800168a:	4a29      	ldr	r2, [pc, #164]	; (8001730 <MX_GPIO_Init+0xc0>)
 800168c:	f043 0304 	orr.w	r3, r3, #4
 8001690:	61d3      	str	r3, [r2, #28]
 8001692:	4b27      	ldr	r3, [pc, #156]	; (8001730 <MX_GPIO_Init+0xc0>)
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	f003 0304 	and.w	r3, r3, #4
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800169e:	4b24      	ldr	r3, [pc, #144]	; (8001730 <MX_GPIO_Init+0xc0>)
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	4a23      	ldr	r2, [pc, #140]	; (8001730 <MX_GPIO_Init+0xc0>)
 80016a4:	f043 0320 	orr.w	r3, r3, #32
 80016a8:	61d3      	str	r3, [r2, #28]
 80016aa:	4b21      	ldr	r3, [pc, #132]	; (8001730 <MX_GPIO_Init+0xc0>)
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	f003 0320 	and.w	r3, r3, #32
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80016b6:	4b1e      	ldr	r3, [pc, #120]	; (8001730 <MX_GPIO_Init+0xc0>)
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	4a1d      	ldr	r2, [pc, #116]	; (8001730 <MX_GPIO_Init+0xc0>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	61d3      	str	r3, [r2, #28]
 80016c2:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <MX_GPIO_Init+0xc0>)
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	60bb      	str	r3, [r7, #8]
 80016cc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80016ce:	4b18      	ldr	r3, [pc, #96]	; (8001730 <MX_GPIO_Init+0xc0>)
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	4a17      	ldr	r2, [pc, #92]	; (8001730 <MX_GPIO_Init+0xc0>)
 80016d4:	f043 0302 	orr.w	r3, r3, #2
 80016d8:	61d3      	str	r3, [r2, #28]
 80016da:	4b15      	ldr	r3, [pc, #84]	; (8001730 <MX_GPIO_Init+0xc0>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 80016e6:	2200      	movs	r2, #0
 80016e8:	2160      	movs	r1, #96	; 0x60
 80016ea:	4812      	ldr	r0, [pc, #72]	; (8001734 <MX_GPIO_Init+0xc4>)
 80016ec:	f001 fa0c 	bl	8002b08 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80016f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016f4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016fa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	4619      	mov	r1, r3
 8001706:	480c      	ldr	r0, [pc, #48]	; (8001738 <MX_GPIO_Init+0xc8>)
 8001708:	f001 f86e 	bl	80027e8 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin PA6 */
	GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
 800170c:	2360      	movs	r3, #96	; 0x60
 800170e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001710:	2301      	movs	r3, #1
 8001712:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001718:	2300      	movs	r3, #0
 800171a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	4619      	mov	r1, r3
 8001722:	4804      	ldr	r0, [pc, #16]	; (8001734 <MX_GPIO_Init+0xc4>)
 8001724:	f001 f860 	bl	80027e8 <HAL_GPIO_Init>

}
 8001728:	bf00      	nop
 800172a:	3728      	adds	r7, #40	; 0x28
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40023800 	.word	0x40023800
 8001734:	40020000 	.word	0x40020000
 8001738:	40020800 	.word	0x40020800

0800173c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001740:	b672      	cpsid	i
}
 8001742:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001744:	e7fe      	b.n	8001744 <Error_Handler+0x8>
	...

08001748 <Send_LTE>:

const uint8_t g_RAMSES_Query[] = { 0x23, 0x00, 0x00, 0x80, 0xB0, 0x00, 0x00, 0x01 };
const uint8_t g_RAMSES_Sample[] = { 0x23, 0x00, 0x00, 0x00, 0xA8, 0x00, 0x81, 0x01 };


void Send_LTE(uint8_t* cmd, uint16_t len){
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	460b      	mov	r3, r1
 8001752:	807b      	strh	r3, [r7, #2]
	if (len == 0){ // lenghts of arrays of chars can be computed here
 8001754:	887b      	ldrh	r3, [r7, #2]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d104      	bne.n	8001764 <Send_LTE+0x1c>
		len = strlen((char*)cmd);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7fe fd18 	bl	8000190 <strlen>
 8001760:	4603      	mov	r3, r0
 8001762:	807b      	strh	r3, [r7, #2]
	}
	//printf("%s, %d - SIZEOF\r\n", (char*)cmd, sizeof(cmd));
	//	strcat(cmd, "\r\n");
	//printf("%s, %d - SIZEOF\r\n", cmd, strlen(cmd));
	HAL_UART_Transmit(&huart2,cmd,len,250);
 8001764:	887a      	ldrh	r2, [r7, #2]
 8001766:	23fa      	movs	r3, #250	; 0xfa
 8001768:	6879      	ldr	r1, [r7, #4]
 800176a:	4803      	ldr	r0, [pc, #12]	; (8001778 <Send_LTE+0x30>)
 800176c:	f002 f82a 	bl	80037c4 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart2,(uint8_t*)"\r\n",2,10);
}
 8001770:	bf00      	nop
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	200028d0 	.word	0x200028d0

0800177c <Clear_Array>:

void Get_LTE_data(){
	UARTDMA_IsDataReady(&hLTE_uart2dma6);
}

void Clear_Array(uint8_t* array, unsigned int size) {
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < size; i++) {
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	e007      	b.n	800179c <Clear_Array+0x20>
		array[i] = 0;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	4413      	add	r3, r2
 8001792:	2200      	movs	r2, #0
 8001794:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; i++) {
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	3301      	adds	r3, #1
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d8f3      	bhi.n	800178c <Clear_Array+0x10>
	}
}
 80017a4:	bf00      	nop
 80017a6:	bf00      	nop
 80017a8:	3714      	adds	r7, #20
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr

080017b0 <Do_Action_RAMSES>:

enum State Do_Action_RAMSES(const command *cmd) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	// DO RAMSES ACTION
	if (strcmp((char*)cmd->cmd, "RAMSES_1_2_SAMPLE") == 0)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4940      	ldr	r1, [pc, #256]	; (80018c0 <Do_Action_RAMSES+0x110>)
 80017be:	4618      	mov	r0, r3
 80017c0:	f7fe fcdc 	bl	800017c <strcmp>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d119      	bne.n	80017fe <Do_Action_RAMSES+0x4e>
	{
		HAL_UART_Transmit(&huart1, g_RAMSES_Sample, SAMPLE_CMD_SIZE, 10);
 80017ca:	230a      	movs	r3, #10
 80017cc:	2208      	movs	r2, #8
 80017ce:	493d      	ldr	r1, [pc, #244]	; (80018c4 <Do_Action_RAMSES+0x114>)
 80017d0:	483d      	ldr	r0, [pc, #244]	; (80018c8 <Do_Action_RAMSES+0x118>)
 80017d2:	f001 fff7 	bl	80037c4 <HAL_UART_Transmit>
		g_RAM_1_timer = HAL_GetTick();
 80017d6:	f000 fc9d 	bl	8002114 <HAL_GetTick>
 80017da:	4603      	mov	r3, r0
 80017dc:	461a      	mov	r2, r3
 80017de:	4b3b      	ldr	r3, [pc, #236]	; (80018cc <Do_Action_RAMSES+0x11c>)
 80017e0:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, g_RAMSES_Sample, SAMPLE_CMD_SIZE, 10);
 80017e2:	230a      	movs	r3, #10
 80017e4:	2208      	movs	r2, #8
 80017e6:	4937      	ldr	r1, [pc, #220]	; (80018c4 <Do_Action_RAMSES+0x114>)
 80017e8:	4839      	ldr	r0, [pc, #228]	; (80018d0 <Do_Action_RAMSES+0x120>)
 80017ea:	f001 ffeb 	bl	80037c4 <HAL_UART_Transmit>
		g_RAM_2_timer = HAL_GetTick();
 80017ee:	f000 fc91 	bl	8002114 <HAL_GetTick>
 80017f2:	4603      	mov	r3, r0
 80017f4:	461a      	mov	r2, r3
 80017f6:	4b37      	ldr	r3, [pc, #220]	; (80018d4 <Do_Action_RAMSES+0x124>)
 80017f8:	601a      	str	r2, [r3, #0]
		return READY;
 80017fa:	2300      	movs	r3, #0
 80017fc:	e05c      	b.n	80018b8 <Do_Action_RAMSES+0x108>
	} else if (strcmp((char*)cmd->cmd, "RAMSES_1_SAMPLE") == 0)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4935      	ldr	r1, [pc, #212]	; (80018d8 <Do_Action_RAMSES+0x128>)
 8001804:	4618      	mov	r0, r3
 8001806:	f7fe fcb9 	bl	800017c <strcmp>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d10d      	bne.n	800182c <Do_Action_RAMSES+0x7c>
	{
		HAL_UART_Transmit(&huart1, g_RAMSES_Sample, SAMPLE_CMD_SIZE, 10);
 8001810:	230a      	movs	r3, #10
 8001812:	2208      	movs	r2, #8
 8001814:	492b      	ldr	r1, [pc, #172]	; (80018c4 <Do_Action_RAMSES+0x114>)
 8001816:	482c      	ldr	r0, [pc, #176]	; (80018c8 <Do_Action_RAMSES+0x118>)
 8001818:	f001 ffd4 	bl	80037c4 <HAL_UART_Transmit>
		g_RAM_1_timer = HAL_GetTick();
 800181c:	f000 fc7a 	bl	8002114 <HAL_GetTick>
 8001820:	4603      	mov	r3, r0
 8001822:	461a      	mov	r2, r3
 8001824:	4b29      	ldr	r3, [pc, #164]	; (80018cc <Do_Action_RAMSES+0x11c>)
 8001826:	601a      	str	r2, [r3, #0]
		return READY;
 8001828:	2300      	movs	r3, #0
 800182a:	e045      	b.n	80018b8 <Do_Action_RAMSES+0x108>

	} else if (strcmp((char*)cmd->cmd, "RAMSES_2_SAMPLE") == 0)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	492a      	ldr	r1, [pc, #168]	; (80018dc <Do_Action_RAMSES+0x12c>)
 8001832:	4618      	mov	r0, r3
 8001834:	f7fe fca2 	bl	800017c <strcmp>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d10d      	bne.n	800185a <Do_Action_RAMSES+0xaa>
	{
		HAL_UART_Transmit(&huart3, g_RAMSES_Sample, SAMPLE_CMD_SIZE, 10);
 800183e:	230a      	movs	r3, #10
 8001840:	2208      	movs	r2, #8
 8001842:	4920      	ldr	r1, [pc, #128]	; (80018c4 <Do_Action_RAMSES+0x114>)
 8001844:	4822      	ldr	r0, [pc, #136]	; (80018d0 <Do_Action_RAMSES+0x120>)
 8001846:	f001 ffbd 	bl	80037c4 <HAL_UART_Transmit>
		g_RAM_2_timer = HAL_GetTick();
 800184a:	f000 fc63 	bl	8002114 <HAL_GetTick>
 800184e:	4603      	mov	r3, r0
 8001850:	461a      	mov	r2, r3
 8001852:	4b20      	ldr	r3, [pc, #128]	; (80018d4 <Do_Action_RAMSES+0x124>)
 8001854:	601a      	str	r2, [r3, #0]
		return READY;
 8001856:	2300      	movs	r3, #0
 8001858:	e02e      	b.n	80018b8 <Do_Action_RAMSES+0x108>

	} else if (strcmp((char*)cmd->cmd, "RAMSES_1_QUERY") == 0)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4920      	ldr	r1, [pc, #128]	; (80018e0 <Do_Action_RAMSES+0x130>)
 8001860:	4618      	mov	r0, r3
 8001862:	f7fe fc8b 	bl	800017c <strcmp>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d10d      	bne.n	8001888 <Do_Action_RAMSES+0xd8>
	{
		HAL_UART_Transmit(&huart1, g_RAMSES_Query, QUERY_CMD_SIZE, 10);
 800186c:	230a      	movs	r3, #10
 800186e:	2208      	movs	r2, #8
 8001870:	491c      	ldr	r1, [pc, #112]	; (80018e4 <Do_Action_RAMSES+0x134>)
 8001872:	4815      	ldr	r0, [pc, #84]	; (80018c8 <Do_Action_RAMSES+0x118>)
 8001874:	f001 ffa6 	bl	80037c4 <HAL_UART_Transmit>
		g_RAM_1_timer = HAL_GetTick();
 8001878:	f000 fc4c 	bl	8002114 <HAL_GetTick>
 800187c:	4603      	mov	r3, r0
 800187e:	461a      	mov	r2, r3
 8001880:	4b12      	ldr	r3, [pc, #72]	; (80018cc <Do_Action_RAMSES+0x11c>)
 8001882:	601a      	str	r2, [r3, #0]
		return READY;
 8001884:	2300      	movs	r3, #0
 8001886:	e017      	b.n	80018b8 <Do_Action_RAMSES+0x108>
	} else if (strcmp((char*)cmd->cmd, "RAMSES_2_QUERY") == 0)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4916      	ldr	r1, [pc, #88]	; (80018e8 <Do_Action_RAMSES+0x138>)
 800188e:	4618      	mov	r0, r3
 8001890:	f7fe fc74 	bl	800017c <strcmp>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d10d      	bne.n	80018b6 <Do_Action_RAMSES+0x106>
	{
		HAL_UART_Transmit(&huart3, g_RAMSES_Query, QUERY_CMD_SIZE, 10);
 800189a:	230a      	movs	r3, #10
 800189c:	2208      	movs	r2, #8
 800189e:	4911      	ldr	r1, [pc, #68]	; (80018e4 <Do_Action_RAMSES+0x134>)
 80018a0:	480b      	ldr	r0, [pc, #44]	; (80018d0 <Do_Action_RAMSES+0x120>)
 80018a2:	f001 ff8f 	bl	80037c4 <HAL_UART_Transmit>
		g_RAM_2_timer = HAL_GetTick();
 80018a6:	f000 fc35 	bl	8002114 <HAL_GetTick>
 80018aa:	4603      	mov	r3, r0
 80018ac:	461a      	mov	r2, r3
 80018ae:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <Do_Action_RAMSES+0x124>)
 80018b0:	601a      	str	r2, [r3, #0]
		return READY;
 80018b2:	2300      	movs	r3, #0
 80018b4:	e000      	b.n	80018b8 <Do_Action_RAMSES+0x108>
	}

	return READY;
 80018b6:	2300      	movs	r3, #0
	// if send, check if there's data, if not check if timout has passed, if yes, send timeout, if not send data, CHECKING_ANSWER can be the mode to send while waiting

}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	080061cc 	.word	0x080061cc
 80018c4:	08006244 	.word	0x08006244
 80018c8:	20002888 	.word	0x20002888
 80018cc:	20002c2c 	.word	0x20002c2c
 80018d0:	20002918 	.word	0x20002918
 80018d4:	20002c30 	.word	0x20002c30
 80018d8:	080061e0 	.word	0x080061e0
 80018dc:	080061f0 	.word	0x080061f0
 80018e0:	08006200 	.word	0x08006200
 80018e4:	0800623c 	.word	0x0800623c
 80018e8:	08006210 	.word	0x08006210

080018ec <Do_Action>:

enum State Do_Action(command cmd, uint8_t* uart_data){
 80018ec:	b084      	sub	sp, #16
 80018ee:	b590      	push	{r4, r7, lr}
 80018f0:	b085      	sub	sp, #20
 80018f2:	af04      	add	r7, sp, #16
 80018f4:	f107 0410 	add.w	r4, r7, #16
 80018f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	static enum State state = READY;
	static unsigned int retry;
	static int start_time;

	if(strstr((char*)uart_data, "RAMSES") != NULL){ // DO RAMSES ACTION
 80018fc:	4954      	ldr	r1, [pc, #336]	; (8001a50 <Do_Action+0x164>)
 80018fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001900:	f003 f8d7 	bl	8004ab2 <strstr>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d00a      	beq.n	8001920 <Do_Action+0x34>
		state = Do_Action_RAMSES(&cmd);
 800190a:	f107 0010 	add.w	r0, r7, #16
 800190e:	f7ff ff4f 	bl	80017b0 <Do_Action_RAMSES>
 8001912:	4603      	mov	r3, r0
 8001914:	461a      	mov	r2, r3
 8001916:	4b4f      	ldr	r3, [pc, #316]	; (8001a54 <Do_Action+0x168>)
 8001918:	701a      	strb	r2, [r3, #0]
		return state;
 800191a:	4b4e      	ldr	r3, [pc, #312]	; (8001a54 <Do_Action+0x168>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	e08f      	b.n	8001a40 <Do_Action+0x154>

	}else{ // DO LTE ACTION


		if(strcmp((char*)cmd.cmd, "RESET_ACTION") == 0){
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	494d      	ldr	r1, [pc, #308]	; (8001a58 <Do_Action+0x16c>)
 8001924:	4618      	mov	r0, r3
 8001926:	f7fe fc29 	bl	800017c <strcmp>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d10d      	bne.n	800194c <Do_Action+0x60>
			Clear_Array(uart_data, BUFFER_SIZE);  // ZOLICH _ modified without test
 8001930:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001934:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001936:	f7ff ff21 	bl	800177c <Clear_Array>
			retry = 0;
 800193a:	4b48      	ldr	r3, [pc, #288]	; (8001a5c <Do_Action+0x170>)
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
			state = READY;
 8001940:	4b44      	ldr	r3, [pc, #272]	; (8001a54 <Do_Action+0x168>)
 8001942:	2200      	movs	r2, #0
 8001944:	701a      	strb	r2, [r3, #0]
			return state;
 8001946:	4b43      	ldr	r3, [pc, #268]	; (8001a54 <Do_Action+0x168>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	e079      	b.n	8001a40 <Do_Action+0x154>
		}

		if(state == READY){ 					// ready to send new command
 800194c:	4b41      	ldr	r3, [pc, #260]	; (8001a54 <Do_Action+0x168>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d119      	bne.n	8001988 <Do_Action+0x9c>
			start_time = HAL_GetTick();		// save send time
 8001954:	f000 fbde 	bl	8002114 <HAL_GetTick>
 8001958:	4603      	mov	r3, r0
 800195a:	461a      	mov	r2, r3
 800195c:	4b40      	ldr	r3, [pc, #256]	; (8001a60 <Do_Action+0x174>)
 800195e:	601a      	str	r2, [r3, #0]
			state = CHECKING_ANSWER;			// notify that now we wait for a reply
 8001960:	4b3c      	ldr	r3, [pc, #240]	; (8001a54 <Do_Action+0x168>)
 8001962:	2201      	movs	r2, #1
 8001964:	701a      	strb	r2, [r3, #0]
			retry = 0;
 8001966:	4b3d      	ldr	r3, [pc, #244]	; (8001a5c <Do_Action+0x170>)
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
			Clear_Array(uart_data, BUFFER_SIZE);  // ZOLICH _ modified without test
 800196c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001970:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001972:	f7ff ff03 	bl	800177c <Clear_Array>
			Send_LTE(cmd.cmd, cmd.length);				// send new command
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	8aba      	ldrh	r2, [r7, #20]
 800197a:	4611      	mov	r1, r2
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff fee3 	bl	8001748 <Send_LTE>
			return state;
 8001982:	4b34      	ldr	r3, [pc, #208]	; (8001a54 <Do_Action+0x168>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	e05b      	b.n	8001a40 <Do_Action+0x154>

		}else if(state == CHECKING_ANSWER){	// if we expect a reply now
 8001988:	4b32      	ldr	r3, [pc, #200]	; (8001a54 <Do_Action+0x168>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d155      	bne.n	8001a3c <Do_Action+0x150>

			if((start_time + cmd.timeout) < HAL_GetTick()){	// if we wait too long, report timeout
 8001990:	69fa      	ldr	r2, [r7, #28]
 8001992:	4b33      	ldr	r3, [pc, #204]	; (8001a60 <Do_Action+0x174>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4413      	add	r3, r2
 8001998:	461c      	mov	r4, r3
 800199a:	f000 fbbb 	bl	8002114 <HAL_GetTick>
 800199e:	4603      	mov	r3, r0
 80019a0:	429c      	cmp	r4, r3
 80019a2:	d205      	bcs.n	80019b0 <Do_Action+0xc4>
				state = TIMEOUT;
 80019a4:	4b2b      	ldr	r3, [pc, #172]	; (8001a54 <Do_Action+0x168>)
 80019a6:	2204      	movs	r2, #4
 80019a8:	701a      	strb	r2, [r3, #0]
				return state;
 80019aa:	4b2a      	ldr	r3, [pc, #168]	; (8001a54 <Do_Action+0x168>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	e047      	b.n	8001a40 <Do_Action+0x154>
			}

			if((strcmp((char*)cmd.good_answer, (char*)uart_data) == 0) || strcmp((char*)cmd.good_answer, "ANY") == 0){ 		// if the reply is OK, return success
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7fe fbe1 	bl	800017c <strcmp>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d007      	beq.n	80019d0 <Do_Action+0xe4>
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	4928      	ldr	r1, [pc, #160]	; (8001a64 <Do_Action+0x178>)
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7fe fbd9 	bl	800017c <strcmp>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d105      	bne.n	80019dc <Do_Action+0xf0>
				state = GOOD_ANSWER;
 80019d0:	4b20      	ldr	r3, [pc, #128]	; (8001a54 <Do_Action+0x168>)
 80019d2:	2202      	movs	r2, #2
 80019d4:	701a      	strb	r2, [r3, #0]
				return state;
 80019d6:	4b1f      	ldr	r3, [pc, #124]	; (8001a54 <Do_Action+0x168>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	e031      	b.n	8001a40 <Do_Action+0x154>
			}else if(strcmp((char*)cmd.bad_answer, (char*)uart_data) == 0){	// if the reply suggest an error...
 80019dc:	6a3b      	ldr	r3, [r7, #32]
 80019de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe fbcb 	bl	800017c <strcmp>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d127      	bne.n	8001a3c <Do_Action+0x150>
				state = BAD_ANSWER;
 80019ec:	4b19      	ldr	r3, [pc, #100]	; (8001a54 <Do_Action+0x168>)
 80019ee:	2203      	movs	r2, #3
 80019f0:	701a      	strb	r2, [r3, #0]
				if(retry < cmd.retry_counter){				// retry if structure suggest that behaviour
 80019f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f4:	461a      	mov	r2, r3
 80019f6:	4b19      	ldr	r3, [pc, #100]	; (8001a5c <Do_Action+0x170>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d915      	bls.n	8001a2a <Do_Action+0x13e>
					retry++;
 80019fe:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <Do_Action+0x170>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	3301      	adds	r3, #1
 8001a04:	4a15      	ldr	r2, [pc, #84]	; (8001a5c <Do_Action+0x170>)
 8001a06:	6013      	str	r3, [r2, #0]
					Do_Action(cmd, uart_data);
 8001a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a0a:	9303      	str	r3, [sp, #12]
 8001a0c:	466c      	mov	r4, sp
 8001a0e:	f107 0320 	add.w	r3, r7, #32
 8001a12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001a1a:	f107 0310 	add.w	r3, r7, #16
 8001a1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a20:	f7ff ff64 	bl	80018ec <Do_Action>
				}else{										// if retries still give an error, or no replies suggested, report error
					retry = 0;
					state = BAD_ANSWER;
					return state;
				}
				return state;
 8001a24:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <Do_Action+0x168>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	e00a      	b.n	8001a40 <Do_Action+0x154>
					retry = 0;
 8001a2a:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <Do_Action+0x170>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
					state = BAD_ANSWER;
 8001a30:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <Do_Action+0x168>)
 8001a32:	2203      	movs	r2, #3
 8001a34:	701a      	strb	r2, [r3, #0]
					return state;
 8001a36:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <Do_Action+0x168>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	e001      	b.n	8001a40 <Do_Action+0x154>
			}
		}
	}

	return state;
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <Do_Action+0x168>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3704      	adds	r7, #4
 8001a44:	46bd      	mov	sp, r7
 8001a46:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001a4a:	b004      	add	sp, #16
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	08006220 	.word	0x08006220
 8001a54:	20002c34 	.word	0x20002c34
 8001a58:	08006228 	.word	0x08006228
 8001a5c:	20002c38 	.word	0x20002c38
 8001a60:	20002c3c 	.word	0x20002c3c
 8001a64:	08006238 	.word	0x08006238

08001a68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001a6e:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <HAL_MspInit+0x5c>)
 8001a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a72:	4a14      	ldr	r2, [pc, #80]	; (8001ac4 <HAL_MspInit+0x5c>)
 8001a74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001a78:	6253      	str	r3, [r2, #36]	; 0x24
 8001a7a:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <HAL_MspInit+0x5c>)
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a86:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <HAL_MspInit+0x5c>)
 8001a88:	6a1b      	ldr	r3, [r3, #32]
 8001a8a:	4a0e      	ldr	r2, [pc, #56]	; (8001ac4 <HAL_MspInit+0x5c>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	6213      	str	r3, [r2, #32]
 8001a92:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <HAL_MspInit+0x5c>)
 8001a94:	6a1b      	ldr	r3, [r3, #32]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a9e:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <HAL_MspInit+0x5c>)
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa2:	4a08      	ldr	r2, [pc, #32]	; (8001ac4 <HAL_MspInit+0x5c>)
 8001aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa8:	6253      	str	r3, [r2, #36]	; 0x24
 8001aaa:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <HAL_MspInit+0x5c>)
 8001aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab2:	607b      	str	r3, [r7, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ab6:	2007      	movs	r0, #7
 8001ab8:	f000 fc24 	bl	8002304 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001abc:	bf00      	nop
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40023800 	.word	0x40023800

08001ac8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b090      	sub	sp, #64	; 0x40
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	60da      	str	r2, [r3, #12]
 8001ade:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a72      	ldr	r2, [pc, #456]	; (8001cb0 <HAL_UART_MspInit+0x1e8>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d129      	bne.n	8001b3e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001aea:	4b72      	ldr	r3, [pc, #456]	; (8001cb4 <HAL_UART_MspInit+0x1ec>)
 8001aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aee:	4a71      	ldr	r2, [pc, #452]	; (8001cb4 <HAL_UART_MspInit+0x1ec>)
 8001af0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001af4:	6253      	str	r3, [r2, #36]	; 0x24
 8001af6:	4b6f      	ldr	r3, [pc, #444]	; (8001cb4 <HAL_UART_MspInit+0x1ec>)
 8001af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001afe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b00:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b02:	4b6c      	ldr	r3, [pc, #432]	; (8001cb4 <HAL_UART_MspInit+0x1ec>)
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	4a6b      	ldr	r2, [pc, #428]	; (8001cb4 <HAL_UART_MspInit+0x1ec>)
 8001b08:	f043 0304 	orr.w	r3, r3, #4
 8001b0c:	61d3      	str	r3, [r2, #28]
 8001b0e:	4b69      	ldr	r3, [pc, #420]	; (8001cb4 <HAL_UART_MspInit+0x1ec>)
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	f003 0304 	and.w	r3, r3, #4
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b1a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b20:	2302      	movs	r3, #2
 8001b22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b24:	2301      	movs	r3, #1
 8001b26:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001b2c:	2308      	movs	r3, #8
 8001b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b34:	4619      	mov	r1, r3
 8001b36:	4860      	ldr	r0, [pc, #384]	; (8001cb8 <HAL_UART_MspInit+0x1f0>)
 8001b38:	f000 fe56 	bl	80027e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b3c:	e128      	b.n	8001d90 <HAL_UART_MspInit+0x2c8>
  else if(huart->Instance==USART1)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a5e      	ldr	r2, [pc, #376]	; (8001cbc <HAL_UART_MspInit+0x1f4>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d157      	bne.n	8001bf8 <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b48:	4b5a      	ldr	r3, [pc, #360]	; (8001cb4 <HAL_UART_MspInit+0x1ec>)
 8001b4a:	6a1b      	ldr	r3, [r3, #32]
 8001b4c:	4a59      	ldr	r2, [pc, #356]	; (8001cb4 <HAL_UART_MspInit+0x1ec>)
 8001b4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b52:	6213      	str	r3, [r2, #32]
 8001b54:	4b57      	ldr	r3, [pc, #348]	; (8001cb4 <HAL_UART_MspInit+0x1ec>)
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b5c:	623b      	str	r3, [r7, #32]
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b60:	4b54      	ldr	r3, [pc, #336]	; (8001cb4 <HAL_UART_MspInit+0x1ec>)
 8001b62:	69db      	ldr	r3, [r3, #28]
 8001b64:	4a53      	ldr	r2, [pc, #332]	; (8001cb4 <HAL_UART_MspInit+0x1ec>)
 8001b66:	f043 0301 	orr.w	r3, r3, #1
 8001b6a:	61d3      	str	r3, [r2, #28]
 8001b6c:	4b51      	ldr	r3, [pc, #324]	; (8001cb4 <HAL_UART_MspInit+0x1ec>)
 8001b6e:	69db      	ldr	r3, [r3, #28]
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	61fb      	str	r3, [r7, #28]
 8001b76:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b78:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b86:	2303      	movs	r3, #3
 8001b88:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b8a:	2307      	movs	r3, #7
 8001b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b92:	4619      	mov	r1, r3
 8001b94:	484a      	ldr	r0, [pc, #296]	; (8001cc0 <HAL_UART_MspInit+0x1f8>)
 8001b96:	f000 fe27 	bl	80027e8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001b9a:	4b4a      	ldr	r3, [pc, #296]	; (8001cc4 <HAL_UART_MspInit+0x1fc>)
 8001b9c:	4a4a      	ldr	r2, [pc, #296]	; (8001cc8 <HAL_UART_MspInit+0x200>)
 8001b9e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ba0:	4b48      	ldr	r3, [pc, #288]	; (8001cc4 <HAL_UART_MspInit+0x1fc>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ba6:	4b47      	ldr	r3, [pc, #284]	; (8001cc4 <HAL_UART_MspInit+0x1fc>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bac:	4b45      	ldr	r3, [pc, #276]	; (8001cc4 <HAL_UART_MspInit+0x1fc>)
 8001bae:	2280      	movs	r2, #128	; 0x80
 8001bb0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bb2:	4b44      	ldr	r3, [pc, #272]	; (8001cc4 <HAL_UART_MspInit+0x1fc>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bb8:	4b42      	ldr	r3, [pc, #264]	; (8001cc4 <HAL_UART_MspInit+0x1fc>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001bbe:	4b41      	ldr	r3, [pc, #260]	; (8001cc4 <HAL_UART_MspInit+0x1fc>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001bc4:	4b3f      	ldr	r3, [pc, #252]	; (8001cc4 <HAL_UART_MspInit+0x1fc>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001bca:	483e      	ldr	r0, [pc, #248]	; (8001cc4 <HAL_UART_MspInit+0x1fc>)
 8001bcc:	f000 fbdc 	bl	8002388 <HAL_DMA_Init>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_UART_MspInit+0x112>
      Error_Handler();
 8001bd6:	f7ff fdb1 	bl	800173c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a39      	ldr	r2, [pc, #228]	; (8001cc4 <HAL_UART_MspInit+0x1fc>)
 8001bde:	63da      	str	r2, [r3, #60]	; 0x3c
 8001be0:	4a38      	ldr	r2, [pc, #224]	; (8001cc4 <HAL_UART_MspInit+0x1fc>)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001be6:	2200      	movs	r2, #0
 8001be8:	2100      	movs	r1, #0
 8001bea:	2025      	movs	r0, #37	; 0x25
 8001bec:	f000 fb95 	bl	800231a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001bf0:	2025      	movs	r0, #37	; 0x25
 8001bf2:	f000 fbae 	bl	8002352 <HAL_NVIC_EnableIRQ>
}
 8001bf6:	e0cb      	b.n	8001d90 <HAL_UART_MspInit+0x2c8>
  else if(huart->Instance==USART2)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a33      	ldr	r2, [pc, #204]	; (8001ccc <HAL_UART_MspInit+0x204>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d16a      	bne.n	8001cd8 <HAL_UART_MspInit+0x210>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c02:	4b2c      	ldr	r3, [pc, #176]	; (8001cb4 <HAL_UART_MspInit+0x1ec>)
 8001c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c06:	4a2b      	ldr	r2, [pc, #172]	; (8001cb4 <HAL_UART_MspInit+0x1ec>)
 8001c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c0c:	6253      	str	r3, [r2, #36]	; 0x24
 8001c0e:	4b29      	ldr	r3, [pc, #164]	; (8001cb4 <HAL_UART_MspInit+0x1ec>)
 8001c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c16:	61bb      	str	r3, [r7, #24]
 8001c18:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1a:	4b26      	ldr	r3, [pc, #152]	; (8001cb4 <HAL_UART_MspInit+0x1ec>)
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	4a25      	ldr	r2, [pc, #148]	; (8001cb4 <HAL_UART_MspInit+0x1ec>)
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	61d3      	str	r3, [r2, #28]
 8001c26:	4b23      	ldr	r3, [pc, #140]	; (8001cb4 <HAL_UART_MspInit+0x1ec>)
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	617b      	str	r3, [r7, #20]
 8001c30:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c32:	230c      	movs	r3, #12
 8001c34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c36:	2302      	movs	r3, #2
 8001c38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c42:	2307      	movs	r3, #7
 8001c44:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	481c      	ldr	r0, [pc, #112]	; (8001cc0 <HAL_UART_MspInit+0x1f8>)
 8001c4e:	f000 fdcb 	bl	80027e8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001c52:	4b1f      	ldr	r3, [pc, #124]	; (8001cd0 <HAL_UART_MspInit+0x208>)
 8001c54:	4a1f      	ldr	r2, [pc, #124]	; (8001cd4 <HAL_UART_MspInit+0x20c>)
 8001c56:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c58:	4b1d      	ldr	r3, [pc, #116]	; (8001cd0 <HAL_UART_MspInit+0x208>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c5e:	4b1c      	ldr	r3, [pc, #112]	; (8001cd0 <HAL_UART_MspInit+0x208>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c64:	4b1a      	ldr	r3, [pc, #104]	; (8001cd0 <HAL_UART_MspInit+0x208>)
 8001c66:	2280      	movs	r2, #128	; 0x80
 8001c68:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c6a:	4b19      	ldr	r3, [pc, #100]	; (8001cd0 <HAL_UART_MspInit+0x208>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c70:	4b17      	ldr	r3, [pc, #92]	; (8001cd0 <HAL_UART_MspInit+0x208>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001c76:	4b16      	ldr	r3, [pc, #88]	; (8001cd0 <HAL_UART_MspInit+0x208>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c7c:	4b14      	ldr	r3, [pc, #80]	; (8001cd0 <HAL_UART_MspInit+0x208>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001c82:	4813      	ldr	r0, [pc, #76]	; (8001cd0 <HAL_UART_MspInit+0x208>)
 8001c84:	f000 fb80 	bl	8002388 <HAL_DMA_Init>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 8001c8e:	f7ff fd55 	bl	800173c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a0e      	ldr	r2, [pc, #56]	; (8001cd0 <HAL_UART_MspInit+0x208>)
 8001c96:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c98:	4a0d      	ldr	r2, [pc, #52]	; (8001cd0 <HAL_UART_MspInit+0x208>)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	2026      	movs	r0, #38	; 0x26
 8001ca4:	f000 fb39 	bl	800231a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ca8:	2026      	movs	r0, #38	; 0x26
 8001caa:	f000 fb52 	bl	8002352 <HAL_NVIC_EnableIRQ>
}
 8001cae:	e06f      	b.n	8001d90 <HAL_UART_MspInit+0x2c8>
 8001cb0:	40004c00 	.word	0x40004c00
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	40020800 	.word	0x40020800
 8001cbc:	40013800 	.word	0x40013800
 8001cc0:	40020000 	.word	0x40020000
 8001cc4:	20002960 	.word	0x20002960
 8001cc8:	40026058 	.word	0x40026058
 8001ccc:	40004400 	.word	0x40004400
 8001cd0:	200029a4 	.word	0x200029a4
 8001cd4:	4002606c 	.word	0x4002606c
  else if(huart->Instance==USART3)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a2e      	ldr	r2, [pc, #184]	; (8001d98 <HAL_UART_MspInit+0x2d0>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d156      	bne.n	8001d90 <HAL_UART_MspInit+0x2c8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ce2:	4b2e      	ldr	r3, [pc, #184]	; (8001d9c <HAL_UART_MspInit+0x2d4>)
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce6:	4a2d      	ldr	r2, [pc, #180]	; (8001d9c <HAL_UART_MspInit+0x2d4>)
 8001ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cec:	6253      	str	r3, [r2, #36]	; 0x24
 8001cee:	4b2b      	ldr	r3, [pc, #172]	; (8001d9c <HAL_UART_MspInit+0x2d4>)
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cf6:	613b      	str	r3, [r7, #16]
 8001cf8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cfa:	4b28      	ldr	r3, [pc, #160]	; (8001d9c <HAL_UART_MspInit+0x2d4>)
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	4a27      	ldr	r2, [pc, #156]	; (8001d9c <HAL_UART_MspInit+0x2d4>)
 8001d00:	f043 0302 	orr.w	r3, r3, #2
 8001d04:	61d3      	str	r3, [r2, #28]
 8001d06:	4b25      	ldr	r3, [pc, #148]	; (8001d9c <HAL_UART_MspInit+0x2d4>)
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d12:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d20:	2303      	movs	r3, #3
 8001d22:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d24:	2307      	movs	r3, #7
 8001d26:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	481c      	ldr	r0, [pc, #112]	; (8001da0 <HAL_UART_MspInit+0x2d8>)
 8001d30:	f000 fd5a 	bl	80027e8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8001d34:	4b1b      	ldr	r3, [pc, #108]	; (8001da4 <HAL_UART_MspInit+0x2dc>)
 8001d36:	4a1c      	ldr	r2, [pc, #112]	; (8001da8 <HAL_UART_MspInit+0x2e0>)
 8001d38:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d3a:	4b1a      	ldr	r3, [pc, #104]	; (8001da4 <HAL_UART_MspInit+0x2dc>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d40:	4b18      	ldr	r3, [pc, #96]	; (8001da4 <HAL_UART_MspInit+0x2dc>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d46:	4b17      	ldr	r3, [pc, #92]	; (8001da4 <HAL_UART_MspInit+0x2dc>)
 8001d48:	2280      	movs	r2, #128	; 0x80
 8001d4a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d4c:	4b15      	ldr	r3, [pc, #84]	; (8001da4 <HAL_UART_MspInit+0x2dc>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d52:	4b14      	ldr	r3, [pc, #80]	; (8001da4 <HAL_UART_MspInit+0x2dc>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001d58:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <HAL_UART_MspInit+0x2dc>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d5e:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <HAL_UART_MspInit+0x2dc>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001d64:	480f      	ldr	r0, [pc, #60]	; (8001da4 <HAL_UART_MspInit+0x2dc>)
 8001d66:	f000 fb0f 	bl	8002388 <HAL_DMA_Init>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <HAL_UART_MspInit+0x2ac>
      Error_Handler();
 8001d70:	f7ff fce4 	bl	800173c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a0b      	ldr	r2, [pc, #44]	; (8001da4 <HAL_UART_MspInit+0x2dc>)
 8001d78:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d7a:	4a0a      	ldr	r2, [pc, #40]	; (8001da4 <HAL_UART_MspInit+0x2dc>)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001d80:	2200      	movs	r2, #0
 8001d82:	2100      	movs	r1, #0
 8001d84:	2027      	movs	r0, #39	; 0x27
 8001d86:	f000 fac8 	bl	800231a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001d8a:	2027      	movs	r0, #39	; 0x27
 8001d8c:	f000 fae1 	bl	8002352 <HAL_NVIC_EnableIRQ>
}
 8001d90:	bf00      	nop
 8001d92:	3740      	adds	r7, #64	; 0x40
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40004800 	.word	0x40004800
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40020400 	.word	0x40020400
 8001da4:	200029e8 	.word	0x200029e8
 8001da8:	40026030 	.word	0x40026030

08001dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001db0:	e7fe      	b.n	8001db0 <NMI_Handler+0x4>

08001db2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001db2:	b480      	push	{r7}
 8001db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001db6:	e7fe      	b.n	8001db6 <HardFault_Handler+0x4>

08001db8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dbc:	e7fe      	b.n	8001dbc <MemManage_Handler+0x4>

08001dbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dc2:	e7fe      	b.n	8001dc2 <BusFault_Handler+0x4>

08001dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dc8:	e7fe      	b.n	8001dc8 <UsageFault_Handler+0x4>

08001dca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr

08001dd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bc80      	pop	{r7}
 8001de0:	4770      	bx	lr

08001de2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001de2:	b480      	push	{r7}
 8001de4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr

08001dee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001df2:	f000 f97d 	bl	80020f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001e00:	4802      	ldr	r0, [pc, #8]	; (8001e0c <DMA1_Channel3_IRQHandler+0x10>)
 8001e02:	f000 fc13 	bl	800262c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	200029e8 	.word	0x200029e8

08001e10 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001e14:	4802      	ldr	r0, [pc, #8]	; (8001e20 <DMA1_Channel5_IRQHandler+0x10>)
 8001e16:	f000 fc09 	bl	800262c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20002960 	.word	0x20002960

08001e24 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
  UARTDMA_DmaIrqHandler(&hLTE_uart2dma6);
 8001e28:	4802      	ldr	r0, [pc, #8]	; (8001e34 <DMA1_Channel6_IRQHandler+0x10>)
 8001e2a:	f7fe fb68 	bl	80004fe <UARTDMA_DmaIrqHandler>
  return;
 8001e2e:	bf00      	nop
  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	2000041c 	.word	0x2000041c

08001e38 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e3c:	4802      	ldr	r0, [pc, #8]	; (8001e48 <USART1_IRQHandler+0x10>)
 8001e3e:	f001 fd69 	bl	8003914 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20002888 	.word	0x20002888

08001e4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  UARTDMA_UartIrqHandler(&hLTE_uart2dma6);
 8001e50:	4802      	ldr	r0, [pc, #8]	; (8001e5c <USART2_IRQHandler+0x10>)
 8001e52:	f7fe fb29 	bl	80004a8 <UARTDMA_UartIrqHandler>
  return;
 8001e56:	bf00      	nop
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	2000041c 	.word	0x2000041c

08001e60 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e64:	4802      	ldr	r0, [pc, #8]	; (8001e70 <USART3_IRQHandler+0x10>)
 8001e66:	f001 fd55 	bl	8003914 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20002918 	.word	0x20002918

08001e74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  return 1;
 8001e78:	2301      	movs	r3, #1
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bc80      	pop	{r7}
 8001e80:	4770      	bx	lr

08001e82 <_kill>:

int _kill(int pid, int sig)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
 8001e8a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e8c:	f002 fcb4 	bl	80047f8 <__errno>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2216      	movs	r2, #22
 8001e94:	601a      	str	r2, [r3, #0]
  return -1;
 8001e96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <_exit>:

void _exit (int status)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001eaa:	f04f 31ff 	mov.w	r1, #4294967295
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7ff ffe7 	bl	8001e82 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001eb4:	e7fe      	b.n	8001eb4 <_exit+0x12>

08001eb6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b086      	sub	sp, #24
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	60f8      	str	r0, [r7, #12]
 8001ebe:	60b9      	str	r1, [r7, #8]
 8001ec0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]
 8001ec6:	e00a      	b.n	8001ede <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ec8:	f3af 8000 	nop.w
 8001ecc:	4601      	mov	r1, r0
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	1c5a      	adds	r2, r3, #1
 8001ed2:	60ba      	str	r2, [r7, #8]
 8001ed4:	b2ca      	uxtb	r2, r1
 8001ed6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	3301      	adds	r3, #1
 8001edc:	617b      	str	r3, [r7, #20]
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	dbf0      	blt.n	8001ec8 <_read+0x12>
  }

  return len;
 8001ee6:	687b      	ldr	r3, [r7, #4]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001efc:	2300      	movs	r3, #0
 8001efe:	617b      	str	r3, [r7, #20]
 8001f00:	e009      	b.n	8001f16 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	1c5a      	adds	r2, r3, #1
 8001f06:	60ba      	str	r2, [r7, #8]
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7fe fc36 	bl	800077c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	3301      	adds	r3, #1
 8001f14:	617b      	str	r3, [r7, #20]
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	dbf1      	blt.n	8001f02 <_write+0x12>
  }
  return len;
 8001f1e:	687b      	ldr	r3, [r7, #4]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3718      	adds	r7, #24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <_close>:

int _close(int file)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bc80      	pop	{r7}
 8001f3c:	4770      	bx	lr

08001f3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
 8001f46:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f4e:	605a      	str	r2, [r3, #4]
  return 0;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr

08001f5c <_isatty>:

int _isatty(int file)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f64:	2301      	movs	r3, #1
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr

08001f70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr

08001f88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f90:	4a14      	ldr	r2, [pc, #80]	; (8001fe4 <_sbrk+0x5c>)
 8001f92:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <_sbrk+0x60>)
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f9c:	4b13      	ldr	r3, [pc, #76]	; (8001fec <_sbrk+0x64>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d102      	bne.n	8001faa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fa4:	4b11      	ldr	r3, [pc, #68]	; (8001fec <_sbrk+0x64>)
 8001fa6:	4a12      	ldr	r2, [pc, #72]	; (8001ff0 <_sbrk+0x68>)
 8001fa8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001faa:	4b10      	ldr	r3, [pc, #64]	; (8001fec <_sbrk+0x64>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d207      	bcs.n	8001fc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fb8:	f002 fc1e 	bl	80047f8 <__errno>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	220c      	movs	r2, #12
 8001fc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc6:	e009      	b.n	8001fdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fc8:	4b08      	ldr	r3, [pc, #32]	; (8001fec <_sbrk+0x64>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fce:	4b07      	ldr	r3, [pc, #28]	; (8001fec <_sbrk+0x64>)
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	4a05      	ldr	r2, [pc, #20]	; (8001fec <_sbrk+0x64>)
 8001fd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fda:	68fb      	ldr	r3, [r7, #12]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3718      	adds	r7, #24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	20014000 	.word	0x20014000
 8001fe8:	00000400 	.word	0x00000400
 8001fec:	20002c40 	.word	0x20002c40
 8001ff0:	20002c58 	.word	0x20002c58

08001ff4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ff8:	bf00      	nop
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr

08002000 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8002000:	f7ff fff8 	bl	8001ff4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002004:	480b      	ldr	r0, [pc, #44]	; (8002034 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002006:	490c      	ldr	r1, [pc, #48]	; (8002038 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002008:	4a0c      	ldr	r2, [pc, #48]	; (800203c <LoopFillZerobss+0x16>)
  movs r3, #0
 800200a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800200c:	e002      	b.n	8002014 <LoopCopyDataInit>

0800200e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800200e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002012:	3304      	adds	r3, #4

08002014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002018:	d3f9      	bcc.n	800200e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800201a:	4a09      	ldr	r2, [pc, #36]	; (8002040 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800201c:	4c09      	ldr	r4, [pc, #36]	; (8002044 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800201e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002020:	e001      	b.n	8002026 <LoopFillZerobss>

08002022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002024:	3204      	adds	r2, #4

08002026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002028:	d3fb      	bcc.n	8002022 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800202a:	f002 fbeb 	bl	8004804 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800202e:	f7fe fbb7 	bl	80007a0 <main>
  bx lr
 8002032:	4770      	bx	lr
  ldr r0, =_sdata
 8002034:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002038:	20000400 	.word	0x20000400
  ldr r2, =_sidata
 800203c:	080064ec 	.word	0x080064ec
  ldr r2, =_sbss
 8002040:	20000400 	.word	0x20000400
  ldr r4, =_ebss
 8002044:	20002c58 	.word	0x20002c58

08002048 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002048:	e7fe      	b.n	8002048 <ADC1_IRQHandler>

0800204a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b082      	sub	sp, #8
 800204e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002050:	2300      	movs	r3, #0
 8002052:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002054:	2003      	movs	r0, #3
 8002056:	f000 f955 	bl	8002304 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800205a:	2000      	movs	r0, #0
 800205c:	f000 f80e 	bl	800207c <HAL_InitTick>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d002      	beq.n	800206c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	71fb      	strb	r3, [r7, #7]
 800206a:	e001      	b.n	8002070 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800206c:	f7ff fcfc 	bl	8001a68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002070:	79fb      	ldrb	r3, [r7, #7]
}
 8002072:	4618      	mov	r0, r3
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
	...

0800207c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002084:	2300      	movs	r3, #0
 8002086:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002088:	4b16      	ldr	r3, [pc, #88]	; (80020e4 <HAL_InitTick+0x68>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d022      	beq.n	80020d6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002090:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <HAL_InitTick+0x6c>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	4b13      	ldr	r3, [pc, #76]	; (80020e4 <HAL_InitTick+0x68>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800209c:	fbb1 f3f3 	udiv	r3, r1, r3
 80020a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a4:	4618      	mov	r0, r3
 80020a6:	f000 f962 	bl	800236e <HAL_SYSTICK_Config>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d10f      	bne.n	80020d0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b0f      	cmp	r3, #15
 80020b4:	d809      	bhi.n	80020ca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020b6:	2200      	movs	r2, #0
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	f04f 30ff 	mov.w	r0, #4294967295
 80020be:	f000 f92c 	bl	800231a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020c2:	4a0a      	ldr	r2, [pc, #40]	; (80020ec <HAL_InitTick+0x70>)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6013      	str	r3, [r2, #0]
 80020c8:	e007      	b.n	80020da <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	73fb      	strb	r3, [r7, #15]
 80020ce:	e004      	b.n	80020da <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	73fb      	strb	r3, [r7, #15]
 80020d4:	e001      	b.n	80020da <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020da:	7bfb      	ldrb	r3, [r7, #15]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	20000398 	.word	0x20000398
 80020e8:	20000390 	.word	0x20000390
 80020ec:	20000394 	.word	0x20000394

080020f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020f4:	4b05      	ldr	r3, [pc, #20]	; (800210c <HAL_IncTick+0x1c>)
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	4b05      	ldr	r3, [pc, #20]	; (8002110 <HAL_IncTick+0x20>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4413      	add	r3, r2
 80020fe:	4a03      	ldr	r2, [pc, #12]	; (800210c <HAL_IncTick+0x1c>)
 8002100:	6013      	str	r3, [r2, #0]
}
 8002102:	bf00      	nop
 8002104:	46bd      	mov	sp, r7
 8002106:	bc80      	pop	{r7}
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	20002c44 	.word	0x20002c44
 8002110:	20000398 	.word	0x20000398

08002114 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  return uwTick;
 8002118:	4b02      	ldr	r3, [pc, #8]	; (8002124 <HAL_GetTick+0x10>)
 800211a:	681b      	ldr	r3, [r3, #0]
}
 800211c:	4618      	mov	r0, r3
 800211e:	46bd      	mov	sp, r7
 8002120:	bc80      	pop	{r7}
 8002122:	4770      	bx	lr
 8002124:	20002c44 	.word	0x20002c44

08002128 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002130:	f7ff fff0 	bl	8002114 <HAL_GetTick>
 8002134:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002140:	d004      	beq.n	800214c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002142:	4b09      	ldr	r3, [pc, #36]	; (8002168 <HAL_Delay+0x40>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	4413      	add	r3, r2
 800214a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800214c:	bf00      	nop
 800214e:	f7ff ffe1 	bl	8002114 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	429a      	cmp	r2, r3
 800215c:	d8f7      	bhi.n	800214e <HAL_Delay+0x26>
  {
  }
}
 800215e:	bf00      	nop
 8002160:	bf00      	nop
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	20000398 	.word	0x20000398

0800216c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800217c:	4b0c      	ldr	r3, [pc, #48]	; (80021b0 <__NVIC_SetPriorityGrouping+0x44>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002182:	68ba      	ldr	r2, [r7, #8]
 8002184:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002188:	4013      	ands	r3, r2
 800218a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002194:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800219c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800219e:	4a04      	ldr	r2, [pc, #16]	; (80021b0 <__NVIC_SetPriorityGrouping+0x44>)
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	60d3      	str	r3, [r2, #12]
}
 80021a4:	bf00      	nop
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc80      	pop	{r7}
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021b8:	4b04      	ldr	r3, [pc, #16]	; (80021cc <__NVIC_GetPriorityGrouping+0x18>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	0a1b      	lsrs	r3, r3, #8
 80021be:	f003 0307 	and.w	r3, r3, #7
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	e000ed00 	.word	0xe000ed00

080021d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	db0b      	blt.n	80021fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021e2:	79fb      	ldrb	r3, [r7, #7]
 80021e4:	f003 021f 	and.w	r2, r3, #31
 80021e8:	4906      	ldr	r1, [pc, #24]	; (8002204 <__NVIC_EnableIRQ+0x34>)
 80021ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ee:	095b      	lsrs	r3, r3, #5
 80021f0:	2001      	movs	r0, #1
 80021f2:	fa00 f202 	lsl.w	r2, r0, r2
 80021f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr
 8002204:	e000e100 	.word	0xe000e100

08002208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	6039      	str	r1, [r7, #0]
 8002212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002218:	2b00      	cmp	r3, #0
 800221a:	db0a      	blt.n	8002232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	b2da      	uxtb	r2, r3
 8002220:	490c      	ldr	r1, [pc, #48]	; (8002254 <__NVIC_SetPriority+0x4c>)
 8002222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002226:	0112      	lsls	r2, r2, #4
 8002228:	b2d2      	uxtb	r2, r2
 800222a:	440b      	add	r3, r1
 800222c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002230:	e00a      	b.n	8002248 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	b2da      	uxtb	r2, r3
 8002236:	4908      	ldr	r1, [pc, #32]	; (8002258 <__NVIC_SetPriority+0x50>)
 8002238:	79fb      	ldrb	r3, [r7, #7]
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	3b04      	subs	r3, #4
 8002240:	0112      	lsls	r2, r2, #4
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	440b      	add	r3, r1
 8002246:	761a      	strb	r2, [r3, #24]
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	e000e100 	.word	0xe000e100
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800225c:	b480      	push	{r7}
 800225e:	b089      	sub	sp, #36	; 0x24
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	f1c3 0307 	rsb	r3, r3, #7
 8002276:	2b04      	cmp	r3, #4
 8002278:	bf28      	it	cs
 800227a:	2304      	movcs	r3, #4
 800227c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	3304      	adds	r3, #4
 8002282:	2b06      	cmp	r3, #6
 8002284:	d902      	bls.n	800228c <NVIC_EncodePriority+0x30>
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	3b03      	subs	r3, #3
 800228a:	e000      	b.n	800228e <NVIC_EncodePriority+0x32>
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002290:	f04f 32ff 	mov.w	r2, #4294967295
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43da      	mvns	r2, r3
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	401a      	ands	r2, r3
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022a4:	f04f 31ff 	mov.w	r1, #4294967295
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	fa01 f303 	lsl.w	r3, r1, r3
 80022ae:	43d9      	mvns	r1, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b4:	4313      	orrs	r3, r2
         );
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3724      	adds	r7, #36	; 0x24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr

080022c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3b01      	subs	r3, #1
 80022cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022d0:	d301      	bcc.n	80022d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022d2:	2301      	movs	r3, #1
 80022d4:	e00f      	b.n	80022f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022d6:	4a0a      	ldr	r2, [pc, #40]	; (8002300 <SysTick_Config+0x40>)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3b01      	subs	r3, #1
 80022dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022de:	210f      	movs	r1, #15
 80022e0:	f04f 30ff 	mov.w	r0, #4294967295
 80022e4:	f7ff ff90 	bl	8002208 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022e8:	4b05      	ldr	r3, [pc, #20]	; (8002300 <SysTick_Config+0x40>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ee:	4b04      	ldr	r3, [pc, #16]	; (8002300 <SysTick_Config+0x40>)
 80022f0:	2207      	movs	r2, #7
 80022f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	e000e010 	.word	0xe000e010

08002304 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f7ff ff2d 	bl	800216c <__NVIC_SetPriorityGrouping>
}
 8002312:	bf00      	nop
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b086      	sub	sp, #24
 800231e:	af00      	add	r7, sp, #0
 8002320:	4603      	mov	r3, r0
 8002322:	60b9      	str	r1, [r7, #8]
 8002324:	607a      	str	r2, [r7, #4]
 8002326:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800232c:	f7ff ff42 	bl	80021b4 <__NVIC_GetPriorityGrouping>
 8002330:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	68b9      	ldr	r1, [r7, #8]
 8002336:	6978      	ldr	r0, [r7, #20]
 8002338:	f7ff ff90 	bl	800225c <NVIC_EncodePriority>
 800233c:	4602      	mov	r2, r0
 800233e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002342:	4611      	mov	r1, r2
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff ff5f 	bl	8002208 <__NVIC_SetPriority>
}
 800234a:	bf00      	nop
 800234c:	3718      	adds	r7, #24
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b082      	sub	sp, #8
 8002356:	af00      	add	r7, sp, #0
 8002358:	4603      	mov	r3, r0
 800235a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800235c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff ff35 	bl	80021d0 <__NVIC_EnableIRQ>
}
 8002366:	bf00      	nop
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b082      	sub	sp, #8
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7ff ffa2 	bl	80022c0 <SysTick_Config>
 800237c:	4603      	mov	r3, r0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
	...

08002388 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e059      	b.n	800244e <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	461a      	mov	r2, r3
 80023a0:	4b2d      	ldr	r3, [pc, #180]	; (8002458 <HAL_DMA_Init+0xd0>)
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d80f      	bhi.n	80023c6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	461a      	mov	r2, r3
 80023ac:	4b2b      	ldr	r3, [pc, #172]	; (800245c <HAL_DMA_Init+0xd4>)
 80023ae:	4413      	add	r3, r2
 80023b0:	4a2b      	ldr	r2, [pc, #172]	; (8002460 <HAL_DMA_Init+0xd8>)
 80023b2:	fba2 2303 	umull	r2, r3, r2, r3
 80023b6:	091b      	lsrs	r3, r3, #4
 80023b8:	009a      	lsls	r2, r3, #2
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a28      	ldr	r2, [pc, #160]	; (8002464 <HAL_DMA_Init+0xdc>)
 80023c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80023c4:	e00e      	b.n	80023e4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	461a      	mov	r2, r3
 80023cc:	4b26      	ldr	r3, [pc, #152]	; (8002468 <HAL_DMA_Init+0xe0>)
 80023ce:	4413      	add	r3, r2
 80023d0:	4a23      	ldr	r2, [pc, #140]	; (8002460 <HAL_DMA_Init+0xd8>)
 80023d2:	fba2 2303 	umull	r2, r3, r2, r3
 80023d6:	091b      	lsrs	r3, r3, #4
 80023d8:	009a      	lsls	r2, r3, #2
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a22      	ldr	r2, [pc, #136]	; (800246c <HAL_DMA_Init+0xe4>)
 80023e2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2202      	movs	r2, #2
 80023e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80023fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002408:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002414:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002420:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	4313      	orrs	r3, r2
 800242c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3714      	adds	r7, #20
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr
 8002458:	40026407 	.word	0x40026407
 800245c:	bffd9ff8 	.word	0xbffd9ff8
 8002460:	cccccccd 	.word	0xcccccccd
 8002464:	40026000 	.word	0x40026000
 8002468:	bffd9bf8 	.word	0xbffd9bf8
 800246c:	40026400 	.word	0x40026400

08002470 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
 800247c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800247e:	2300      	movs	r3, #0
 8002480:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d101      	bne.n	8002490 <HAL_DMA_Start_IT+0x20>
 800248c:	2302      	movs	r3, #2
 800248e:	e04b      	b.n	8002528 <HAL_DMA_Start_IT+0xb8>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d13a      	bne.n	800251a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2202      	movs	r2, #2
 80024a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 0201 	bic.w	r2, r2, #1
 80024c0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	68b9      	ldr	r1, [r7, #8]
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f000 f95e 	bl	800278a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d008      	beq.n	80024e8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f042 020e 	orr.w	r2, r2, #14
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	e00f      	b.n	8002508 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 0204 	bic.w	r2, r2, #4
 80024f6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 020a 	orr.w	r2, r2, #10
 8002506:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0201 	orr.w	r2, r2, #1
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	e005      	b.n	8002526 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002522:	2302      	movs	r3, #2
 8002524:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002526:	7dfb      	ldrb	r3, [r7, #23]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3718      	adds	r7, #24
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002538:	2300      	movs	r3, #0
 800253a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d008      	beq.n	800255a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2204      	movs	r2, #4
 800254c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e022      	b.n	80025a0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 020e 	bic.w	r2, r2, #14
 8002568:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 0201 	bic.w	r2, r2, #1
 8002578:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	f003 021c 	and.w	r2, r3, #28
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002586:	2101      	movs	r1, #1
 8002588:	fa01 f202 	lsl.w	r2, r1, r2
 800258c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2201      	movs	r2, #1
 8002592:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 800259e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3714      	adds	r7, #20
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bc80      	pop	{r7}
 80025a8:	4770      	bx	lr

080025aa <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b084      	sub	sp, #16
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025b2:	2300      	movs	r3, #0
 80025b4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d005      	beq.n	80025ce <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2204      	movs	r2, #4
 80025c6:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	73fb      	strb	r3, [r7, #15]
 80025cc:	e029      	b.n	8002622 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 020e 	bic.w	r2, r2, #14
 80025dc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 0201 	bic.w	r2, r2, #1
 80025ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	f003 021c 	and.w	r2, r3, #28
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025fa:	2101      	movs	r1, #1
 80025fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002600:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	4798      	blx	r3
    }
  }
  return status;
 8002622:	7bfb      	ldrb	r3, [r7, #15]
}
 8002624:	4618      	mov	r0, r3
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002648:	f003 031c 	and.w	r3, r3, #28
 800264c:	2204      	movs	r2, #4
 800264e:	409a      	lsls	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4013      	ands	r3, r2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d026      	beq.n	80026a6 <HAL_DMA_IRQHandler+0x7a>
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	f003 0304 	and.w	r3, r3, #4
 800265e:	2b00      	cmp	r3, #0
 8002660:	d021      	beq.n	80026a6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0320 	and.w	r3, r3, #32
 800266c:	2b00      	cmp	r3, #0
 800266e:	d107      	bne.n	8002680 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0204 	bic.w	r2, r2, #4
 800267e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002684:	f003 021c 	and.w	r2, r3, #28
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268c:	2104      	movs	r1, #4
 800268e:	fa01 f202 	lsl.w	r2, r1, r2
 8002692:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002698:	2b00      	cmp	r3, #0
 800269a:	d071      	beq.n	8002780 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80026a4:	e06c      	b.n	8002780 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	f003 031c 	and.w	r3, r3, #28
 80026ae:	2202      	movs	r2, #2
 80026b0:	409a      	lsls	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	4013      	ands	r3, r2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d02e      	beq.n	8002718 <HAL_DMA_IRQHandler+0xec>
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d029      	beq.n	8002718 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0320 	and.w	r3, r3, #32
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10b      	bne.n	80026ea <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 020a 	bic.w	r2, r2, #10
 80026e0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	f003 021c 	and.w	r2, r3, #28
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f6:	2102      	movs	r1, #2
 80026f8:	fa01 f202 	lsl.w	r2, r1, r2
 80026fc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270a:	2b00      	cmp	r3, #0
 800270c:	d038      	beq.n	8002780 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002716:	e033      	b.n	8002780 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271c:	f003 031c 	and.w	r3, r3, #28
 8002720:	2208      	movs	r2, #8
 8002722:	409a      	lsls	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4013      	ands	r3, r2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d02a      	beq.n	8002782 <HAL_DMA_IRQHandler+0x156>
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	2b00      	cmp	r3, #0
 8002734:	d025      	beq.n	8002782 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 020e 	bic.w	r2, r2, #14
 8002744:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	f003 021c 	and.w	r2, r3, #28
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002752:	2101      	movs	r1, #1
 8002754:	fa01 f202 	lsl.w	r2, r1, r2
 8002758:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002774:	2b00      	cmp	r3, #0
 8002776:	d004      	beq.n	8002782 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002780:	bf00      	nop
 8002782:	bf00      	nop
}
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800278a:	b480      	push	{r7}
 800278c:	b085      	sub	sp, #20
 800278e:	af00      	add	r7, sp, #0
 8002790:	60f8      	str	r0, [r7, #12]
 8002792:	60b9      	str	r1, [r7, #8]
 8002794:	607a      	str	r2, [r7, #4]
 8002796:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	f003 021c 	and.w	r2, r3, #28
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a4:	2101      	movs	r1, #1
 80027a6:	fa01 f202 	lsl.w	r2, r1, r2
 80027aa:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2b10      	cmp	r3, #16
 80027ba:	d108      	bne.n	80027ce <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68ba      	ldr	r2, [r7, #8]
 80027ca:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80027cc:	e007      	b.n	80027de <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	60da      	str	r2, [r3, #12]
}
 80027de:	bf00      	nop
 80027e0:	3714      	adds	r7, #20
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr

080027e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b087      	sub	sp, #28
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80027f2:	2300      	movs	r3, #0
 80027f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80027f6:	2300      	movs	r3, #0
 80027f8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80027fa:	2300      	movs	r3, #0
 80027fc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80027fe:	e160      	b.n	8002ac2 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	2101      	movs	r1, #1
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	fa01 f303 	lsl.w	r3, r1, r3
 800280c:	4013      	ands	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 8152 	beq.w	8002abc <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 0303 	and.w	r3, r3, #3
 8002820:	2b01      	cmp	r3, #1
 8002822:	d005      	beq.n	8002830 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800282c:	2b02      	cmp	r3, #2
 800282e:	d130      	bne.n	8002892 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	2203      	movs	r2, #3
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	43db      	mvns	r3, r3
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	4013      	ands	r3, r2
 8002846:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	68da      	ldr	r2, [r3, #12]
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	4313      	orrs	r3, r2
 8002858:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002866:	2201      	movs	r2, #1
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	43db      	mvns	r3, r3
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	4013      	ands	r3, r2
 8002874:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	091b      	lsrs	r3, r3, #4
 800287c:	f003 0201 	and.w	r2, r3, #1
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	4313      	orrs	r3, r2
 800288a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	2b03      	cmp	r3, #3
 800289c:	d017      	beq.n	80028ce <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	2203      	movs	r2, #3
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	43db      	mvns	r3, r3
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	4013      	ands	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d123      	bne.n	8002922 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	08da      	lsrs	r2, r3, #3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	3208      	adds	r2, #8
 80028e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028e6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	220f      	movs	r2, #15
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43db      	mvns	r3, r3
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	4013      	ands	r3, r2
 80028fc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	691a      	ldr	r2, [r3, #16]
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f003 0307 	and.w	r3, r3, #7
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	4313      	orrs	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	08da      	lsrs	r2, r3, #3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3208      	adds	r2, #8
 800291c:	6939      	ldr	r1, [r7, #16]
 800291e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	2203      	movs	r2, #3
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	43db      	mvns	r3, r3
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	4013      	ands	r3, r2
 8002938:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f003 0203 	and.w	r2, r3, #3
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	4313      	orrs	r3, r2
 800294e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800295e:	2b00      	cmp	r3, #0
 8002960:	f000 80ac 	beq.w	8002abc <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002964:	4b5e      	ldr	r3, [pc, #376]	; (8002ae0 <HAL_GPIO_Init+0x2f8>)
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	4a5d      	ldr	r2, [pc, #372]	; (8002ae0 <HAL_GPIO_Init+0x2f8>)
 800296a:	f043 0301 	orr.w	r3, r3, #1
 800296e:	6213      	str	r3, [r2, #32]
 8002970:	4b5b      	ldr	r3, [pc, #364]	; (8002ae0 <HAL_GPIO_Init+0x2f8>)
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800297c:	4a59      	ldr	r2, [pc, #356]	; (8002ae4 <HAL_GPIO_Init+0x2fc>)
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	089b      	lsrs	r3, r3, #2
 8002982:	3302      	adds	r3, #2
 8002984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002988:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f003 0303 	and.w	r3, r3, #3
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	220f      	movs	r2, #15
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	43db      	mvns	r3, r3
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	4013      	ands	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a51      	ldr	r2, [pc, #324]	; (8002ae8 <HAL_GPIO_Init+0x300>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d025      	beq.n	80029f4 <HAL_GPIO_Init+0x20c>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a50      	ldr	r2, [pc, #320]	; (8002aec <HAL_GPIO_Init+0x304>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d01f      	beq.n	80029f0 <HAL_GPIO_Init+0x208>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a4f      	ldr	r2, [pc, #316]	; (8002af0 <HAL_GPIO_Init+0x308>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d019      	beq.n	80029ec <HAL_GPIO_Init+0x204>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a4e      	ldr	r2, [pc, #312]	; (8002af4 <HAL_GPIO_Init+0x30c>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d013      	beq.n	80029e8 <HAL_GPIO_Init+0x200>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a4d      	ldr	r2, [pc, #308]	; (8002af8 <HAL_GPIO_Init+0x310>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d00d      	beq.n	80029e4 <HAL_GPIO_Init+0x1fc>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a4c      	ldr	r2, [pc, #304]	; (8002afc <HAL_GPIO_Init+0x314>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d007      	beq.n	80029e0 <HAL_GPIO_Init+0x1f8>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a4b      	ldr	r2, [pc, #300]	; (8002b00 <HAL_GPIO_Init+0x318>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d101      	bne.n	80029dc <HAL_GPIO_Init+0x1f4>
 80029d8:	2306      	movs	r3, #6
 80029da:	e00c      	b.n	80029f6 <HAL_GPIO_Init+0x20e>
 80029dc:	2307      	movs	r3, #7
 80029de:	e00a      	b.n	80029f6 <HAL_GPIO_Init+0x20e>
 80029e0:	2305      	movs	r3, #5
 80029e2:	e008      	b.n	80029f6 <HAL_GPIO_Init+0x20e>
 80029e4:	2304      	movs	r3, #4
 80029e6:	e006      	b.n	80029f6 <HAL_GPIO_Init+0x20e>
 80029e8:	2303      	movs	r3, #3
 80029ea:	e004      	b.n	80029f6 <HAL_GPIO_Init+0x20e>
 80029ec:	2302      	movs	r3, #2
 80029ee:	e002      	b.n	80029f6 <HAL_GPIO_Init+0x20e>
 80029f0:	2301      	movs	r3, #1
 80029f2:	e000      	b.n	80029f6 <HAL_GPIO_Init+0x20e>
 80029f4:	2300      	movs	r3, #0
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	f002 0203 	and.w	r2, r2, #3
 80029fc:	0092      	lsls	r2, r2, #2
 80029fe:	4093      	lsls	r3, r2
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a06:	4937      	ldr	r1, [pc, #220]	; (8002ae4 <HAL_GPIO_Init+0x2fc>)
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	089b      	lsrs	r3, r3, #2
 8002a0c:	3302      	adds	r3, #2
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a14:	4b3b      	ldr	r3, [pc, #236]	; (8002b04 <HAL_GPIO_Init+0x31c>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	4013      	ands	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002a38:	4a32      	ldr	r2, [pc, #200]	; (8002b04 <HAL_GPIO_Init+0x31c>)
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a3e:	4b31      	ldr	r3, [pc, #196]	; (8002b04 <HAL_GPIO_Init+0x31c>)
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	43db      	mvns	r3, r3
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002a62:	4a28      	ldr	r2, [pc, #160]	; (8002b04 <HAL_GPIO_Init+0x31c>)
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a68:	4b26      	ldr	r3, [pc, #152]	; (8002b04 <HAL_GPIO_Init+0x31c>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	43db      	mvns	r3, r3
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	4013      	ands	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d003      	beq.n	8002a8c <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a8c:	4a1d      	ldr	r2, [pc, #116]	; (8002b04 <HAL_GPIO_Init+0x31c>)
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a92:	4b1c      	ldr	r3, [pc, #112]	; (8002b04 <HAL_GPIO_Init+0x31c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002ab6:	4a13      	ldr	r2, [pc, #76]	; (8002b04 <HAL_GPIO_Init+0x31c>)
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f47f ae97 	bne.w	8002800 <HAL_GPIO_Init+0x18>
  }
}
 8002ad2:	bf00      	nop
 8002ad4:	bf00      	nop
 8002ad6:	371c      	adds	r7, #28
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bc80      	pop	{r7}
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	40010000 	.word	0x40010000
 8002ae8:	40020000 	.word	0x40020000
 8002aec:	40020400 	.word	0x40020400
 8002af0:	40020800 	.word	0x40020800
 8002af4:	40020c00 	.word	0x40020c00
 8002af8:	40021000 	.word	0x40021000
 8002afc:	40021400 	.word	0x40021400
 8002b00:	40021800 	.word	0x40021800
 8002b04:	40010400 	.word	0x40010400

08002b08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	460b      	mov	r3, r1
 8002b12:	807b      	strh	r3, [r7, #2]
 8002b14:	4613      	mov	r3, r2
 8002b16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b18:	787b      	ldrb	r3, [r7, #1]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b1e:	887a      	ldrh	r2, [r7, #2]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002b24:	e003      	b.n	8002b2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002b26:	887b      	ldrh	r3, [r7, #2]
 8002b28:	041a      	lsls	r2, r3, #16
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	619a      	str	r2, [r3, #24]
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bc80      	pop	{r7}
 8002b36:	4770      	bx	lr

08002b38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b088      	sub	sp, #32
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e31d      	b.n	8003186 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b4a:	4b94      	ldr	r3, [pc, #592]	; (8002d9c <HAL_RCC_OscConfig+0x264>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 030c 	and.w	r3, r3, #12
 8002b52:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b54:	4b91      	ldr	r3, [pc, #580]	; (8002d9c <HAL_RCC_OscConfig+0x264>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b5c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d07b      	beq.n	8002c62 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	2b08      	cmp	r3, #8
 8002b6e:	d006      	beq.n	8002b7e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	2b0c      	cmp	r3, #12
 8002b74:	d10f      	bne.n	8002b96 <HAL_RCC_OscConfig+0x5e>
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b7c:	d10b      	bne.n	8002b96 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b7e:	4b87      	ldr	r3, [pc, #540]	; (8002d9c <HAL_RCC_OscConfig+0x264>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d06a      	beq.n	8002c60 <HAL_RCC_OscConfig+0x128>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d166      	bne.n	8002c60 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e2f7      	b.n	8003186 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d106      	bne.n	8002bac <HAL_RCC_OscConfig+0x74>
 8002b9e:	4b7f      	ldr	r3, [pc, #508]	; (8002d9c <HAL_RCC_OscConfig+0x264>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a7e      	ldr	r2, [pc, #504]	; (8002d9c <HAL_RCC_OscConfig+0x264>)
 8002ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba8:	6013      	str	r3, [r2, #0]
 8002baa:	e02d      	b.n	8002c08 <HAL_RCC_OscConfig+0xd0>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10c      	bne.n	8002bce <HAL_RCC_OscConfig+0x96>
 8002bb4:	4b79      	ldr	r3, [pc, #484]	; (8002d9c <HAL_RCC_OscConfig+0x264>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a78      	ldr	r2, [pc, #480]	; (8002d9c <HAL_RCC_OscConfig+0x264>)
 8002bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bbe:	6013      	str	r3, [r2, #0]
 8002bc0:	4b76      	ldr	r3, [pc, #472]	; (8002d9c <HAL_RCC_OscConfig+0x264>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a75      	ldr	r2, [pc, #468]	; (8002d9c <HAL_RCC_OscConfig+0x264>)
 8002bc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bca:	6013      	str	r3, [r2, #0]
 8002bcc:	e01c      	b.n	8002c08 <HAL_RCC_OscConfig+0xd0>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2b05      	cmp	r3, #5
 8002bd4:	d10c      	bne.n	8002bf0 <HAL_RCC_OscConfig+0xb8>
 8002bd6:	4b71      	ldr	r3, [pc, #452]	; (8002d9c <HAL_RCC_OscConfig+0x264>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a70      	ldr	r2, [pc, #448]	; (8002d9c <HAL_RCC_OscConfig+0x264>)
 8002bdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002be0:	6013      	str	r3, [r2, #0]
 8002be2:	4b6e      	ldr	r3, [pc, #440]	; (8002d9c <HAL_RCC_OscConfig+0x264>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a6d      	ldr	r2, [pc, #436]	; (8002d9c <HAL_RCC_OscConfig+0x264>)
 8002be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	e00b      	b.n	8002c08 <HAL_RCC_OscConfig+0xd0>
 8002bf0:	4b6a      	ldr	r3, [pc, #424]	; (8002d9c <HAL_RCC_OscConfig+0x264>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a69      	ldr	r2, [pc, #420]	; (8002d9c <HAL_RCC_OscConfig+0x264>)
 8002bf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bfa:	6013      	str	r3, [r2, #0]
 8002bfc:	4b67      	ldr	r3, [pc, #412]	; (8002d9c <HAL_RCC_OscConfig+0x264>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a66      	ldr	r2, [pc, #408]	; (8002d9c <HAL_RCC_OscConfig+0x264>)
 8002c02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d013      	beq.n	8002c38 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c10:	f7ff fa80 	bl	8002114 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c18:	f7ff fa7c 	bl	8002114 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b64      	cmp	r3, #100	; 0x64
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e2ad      	b.n	8003186 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c2a:	4b5c      	ldr	r3, [pc, #368]	; (8002d9c <HAL_RCC_OscConfig+0x264>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d0f0      	beq.n	8002c18 <HAL_RCC_OscConfig+0xe0>
 8002c36:	e014      	b.n	8002c62 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c38:	f7ff fa6c 	bl	8002114 <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c40:	f7ff fa68 	bl	8002114 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b64      	cmp	r3, #100	; 0x64
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e299      	b.n	8003186 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c52:	4b52      	ldr	r3, [pc, #328]	; (8002d9c <HAL_RCC_OscConfig+0x264>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1f0      	bne.n	8002c40 <HAL_RCC_OscConfig+0x108>
 8002c5e:	e000      	b.n	8002c62 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d05a      	beq.n	8002d24 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	2b04      	cmp	r3, #4
 8002c72:	d005      	beq.n	8002c80 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	2b0c      	cmp	r3, #12
 8002c78:	d119      	bne.n	8002cae <HAL_RCC_OscConfig+0x176>
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d116      	bne.n	8002cae <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c80:	4b46      	ldr	r3, [pc, #280]	; (8002d9c <HAL_RCC_OscConfig+0x264>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d005      	beq.n	8002c98 <HAL_RCC_OscConfig+0x160>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d001      	beq.n	8002c98 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e276      	b.n	8003186 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c98:	4b40      	ldr	r3, [pc, #256]	; (8002d9c <HAL_RCC_OscConfig+0x264>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	021b      	lsls	r3, r3, #8
 8002ca6:	493d      	ldr	r1, [pc, #244]	; (8002d9c <HAL_RCC_OscConfig+0x264>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cac:	e03a      	b.n	8002d24 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d020      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cb6:	4b3a      	ldr	r3, [pc, #232]	; (8002da0 <HAL_RCC_OscConfig+0x268>)
 8002cb8:	2201      	movs	r2, #1
 8002cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cbc:	f7ff fa2a 	bl	8002114 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cc4:	f7ff fa26 	bl	8002114 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e257      	b.n	8003186 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cd6:	4b31      	ldr	r3, [pc, #196]	; (8002d9c <HAL_RCC_OscConfig+0x264>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0f0      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce2:	4b2e      	ldr	r3, [pc, #184]	; (8002d9c <HAL_RCC_OscConfig+0x264>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	021b      	lsls	r3, r3, #8
 8002cf0:	492a      	ldr	r1, [pc, #168]	; (8002d9c <HAL_RCC_OscConfig+0x264>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	604b      	str	r3, [r1, #4]
 8002cf6:	e015      	b.n	8002d24 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cf8:	4b29      	ldr	r3, [pc, #164]	; (8002da0 <HAL_RCC_OscConfig+0x268>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfe:	f7ff fa09 	bl	8002114 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d06:	f7ff fa05 	bl	8002114 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e236      	b.n	8003186 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d18:	4b20      	ldr	r3, [pc, #128]	; (8002d9c <HAL_RCC_OscConfig+0x264>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1f0      	bne.n	8002d06 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0310 	and.w	r3, r3, #16
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f000 80b8 	beq.w	8002ea2 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d170      	bne.n	8002e1a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d38:	4b18      	ldr	r3, [pc, #96]	; (8002d9c <HAL_RCC_OscConfig+0x264>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d005      	beq.n	8002d50 <HAL_RCC_OscConfig+0x218>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e21a      	b.n	8003186 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a1a      	ldr	r2, [r3, #32]
 8002d54:	4b11      	ldr	r3, [pc, #68]	; (8002d9c <HAL_RCC_OscConfig+0x264>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d921      	bls.n	8002da4 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f000 fc7d 	bl	8003664 <RCC_SetFlashLatencyFromMSIRange>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e208      	b.n	8003186 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d74:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <HAL_RCC_OscConfig+0x264>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	4906      	ldr	r1, [pc, #24]	; (8002d9c <HAL_RCC_OscConfig+0x264>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d86:	4b05      	ldr	r3, [pc, #20]	; (8002d9c <HAL_RCC_OscConfig+0x264>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	061b      	lsls	r3, r3, #24
 8002d94:	4901      	ldr	r1, [pc, #4]	; (8002d9c <HAL_RCC_OscConfig+0x264>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	604b      	str	r3, [r1, #4]
 8002d9a:	e020      	b.n	8002dde <HAL_RCC_OscConfig+0x2a6>
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002da4:	4b99      	ldr	r3, [pc, #612]	; (800300c <HAL_RCC_OscConfig+0x4d4>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	4996      	ldr	r1, [pc, #600]	; (800300c <HAL_RCC_OscConfig+0x4d4>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002db6:	4b95      	ldr	r3, [pc, #596]	; (800300c <HAL_RCC_OscConfig+0x4d4>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	061b      	lsls	r3, r3, #24
 8002dc4:	4991      	ldr	r1, [pc, #580]	; (800300c <HAL_RCC_OscConfig+0x4d4>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 fc48 	bl	8003664 <RCC_SetFlashLatencyFromMSIRange>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e1d3      	b.n	8003186 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	0b5b      	lsrs	r3, r3, #13
 8002de4:	3301      	adds	r3, #1
 8002de6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002dee:	4a87      	ldr	r2, [pc, #540]	; (800300c <HAL_RCC_OscConfig+0x4d4>)
 8002df0:	6892      	ldr	r2, [r2, #8]
 8002df2:	0912      	lsrs	r2, r2, #4
 8002df4:	f002 020f 	and.w	r2, r2, #15
 8002df8:	4985      	ldr	r1, [pc, #532]	; (8003010 <HAL_RCC_OscConfig+0x4d8>)
 8002dfa:	5c8a      	ldrb	r2, [r1, r2]
 8002dfc:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002dfe:	4a85      	ldr	r2, [pc, #532]	; (8003014 <HAL_RCC_OscConfig+0x4dc>)
 8002e00:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e02:	4b85      	ldr	r3, [pc, #532]	; (8003018 <HAL_RCC_OscConfig+0x4e0>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff f938 	bl	800207c <HAL_InitTick>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d045      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002e16:	7bfb      	ldrb	r3, [r7, #15]
 8002e18:	e1b5      	b.n	8003186 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d029      	beq.n	8002e76 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e22:	4b7e      	ldr	r3, [pc, #504]	; (800301c <HAL_RCC_OscConfig+0x4e4>)
 8002e24:	2201      	movs	r2, #1
 8002e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e28:	f7ff f974 	bl	8002114 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e30:	f7ff f970 	bl	8002114 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e1a1      	b.n	8003186 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002e42:	4b72      	ldr	r3, [pc, #456]	; (800300c <HAL_RCC_OscConfig+0x4d4>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0f0      	beq.n	8002e30 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e4e:	4b6f      	ldr	r3, [pc, #444]	; (800300c <HAL_RCC_OscConfig+0x4d4>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	496c      	ldr	r1, [pc, #432]	; (800300c <HAL_RCC_OscConfig+0x4d4>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e60:	4b6a      	ldr	r3, [pc, #424]	; (800300c <HAL_RCC_OscConfig+0x4d4>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	061b      	lsls	r3, r3, #24
 8002e6e:	4967      	ldr	r1, [pc, #412]	; (800300c <HAL_RCC_OscConfig+0x4d4>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	604b      	str	r3, [r1, #4]
 8002e74:	e015      	b.n	8002ea2 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e76:	4b69      	ldr	r3, [pc, #420]	; (800301c <HAL_RCC_OscConfig+0x4e4>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7c:	f7ff f94a 	bl	8002114 <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e84:	f7ff f946 	bl	8002114 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e177      	b.n	8003186 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002e96:	4b5d      	ldr	r3, [pc, #372]	; (800300c <HAL_RCC_OscConfig+0x4d4>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1f0      	bne.n	8002e84 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d030      	beq.n	8002f10 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d016      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eb6:	4b5a      	ldr	r3, [pc, #360]	; (8003020 <HAL_RCC_OscConfig+0x4e8>)
 8002eb8:	2201      	movs	r2, #1
 8002eba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ebc:	f7ff f92a 	bl	8002114 <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ec4:	f7ff f926 	bl	8002114 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e157      	b.n	8003186 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ed6:	4b4d      	ldr	r3, [pc, #308]	; (800300c <HAL_RCC_OscConfig+0x4d4>)
 8002ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d0f0      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x38c>
 8002ee2:	e015      	b.n	8002f10 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ee4:	4b4e      	ldr	r3, [pc, #312]	; (8003020 <HAL_RCC_OscConfig+0x4e8>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eea:	f7ff f913 	bl	8002114 <HAL_GetTick>
 8002eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ef0:	e008      	b.n	8002f04 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ef2:	f7ff f90f 	bl	8002114 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e140      	b.n	8003186 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f04:	4b41      	ldr	r3, [pc, #260]	; (800300c <HAL_RCC_OscConfig+0x4d4>)
 8002f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1f0      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 80b5 	beq.w	8003088 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f22:	4b3a      	ldr	r3, [pc, #232]	; (800300c <HAL_RCC_OscConfig+0x4d4>)
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10d      	bne.n	8002f4a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f2e:	4b37      	ldr	r3, [pc, #220]	; (800300c <HAL_RCC_OscConfig+0x4d4>)
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	4a36      	ldr	r2, [pc, #216]	; (800300c <HAL_RCC_OscConfig+0x4d4>)
 8002f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f38:	6253      	str	r3, [r2, #36]	; 0x24
 8002f3a:	4b34      	ldr	r3, [pc, #208]	; (800300c <HAL_RCC_OscConfig+0x4d4>)
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f42:	60bb      	str	r3, [r7, #8]
 8002f44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f46:	2301      	movs	r3, #1
 8002f48:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f4a:	4b36      	ldr	r3, [pc, #216]	; (8003024 <HAL_RCC_OscConfig+0x4ec>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d118      	bne.n	8002f88 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f56:	4b33      	ldr	r3, [pc, #204]	; (8003024 <HAL_RCC_OscConfig+0x4ec>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a32      	ldr	r2, [pc, #200]	; (8003024 <HAL_RCC_OscConfig+0x4ec>)
 8002f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f62:	f7ff f8d7 	bl	8002114 <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f68:	e008      	b.n	8002f7c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f6a:	f7ff f8d3 	bl	8002114 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b64      	cmp	r3, #100	; 0x64
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e104      	b.n	8003186 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f7c:	4b29      	ldr	r3, [pc, #164]	; (8003024 <HAL_RCC_OscConfig+0x4ec>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0f0      	beq.n	8002f6a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d106      	bne.n	8002f9e <HAL_RCC_OscConfig+0x466>
 8002f90:	4b1e      	ldr	r3, [pc, #120]	; (800300c <HAL_RCC_OscConfig+0x4d4>)
 8002f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f94:	4a1d      	ldr	r2, [pc, #116]	; (800300c <HAL_RCC_OscConfig+0x4d4>)
 8002f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f9a:	6353      	str	r3, [r2, #52]	; 0x34
 8002f9c:	e02d      	b.n	8002ffa <HAL_RCC_OscConfig+0x4c2>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10c      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x488>
 8002fa6:	4b19      	ldr	r3, [pc, #100]	; (800300c <HAL_RCC_OscConfig+0x4d4>)
 8002fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002faa:	4a18      	ldr	r2, [pc, #96]	; (800300c <HAL_RCC_OscConfig+0x4d4>)
 8002fac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fb0:	6353      	str	r3, [r2, #52]	; 0x34
 8002fb2:	4b16      	ldr	r3, [pc, #88]	; (800300c <HAL_RCC_OscConfig+0x4d4>)
 8002fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb6:	4a15      	ldr	r2, [pc, #84]	; (800300c <HAL_RCC_OscConfig+0x4d4>)
 8002fb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fbc:	6353      	str	r3, [r2, #52]	; 0x34
 8002fbe:	e01c      	b.n	8002ffa <HAL_RCC_OscConfig+0x4c2>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	2b05      	cmp	r3, #5
 8002fc6:	d10c      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x4aa>
 8002fc8:	4b10      	ldr	r3, [pc, #64]	; (800300c <HAL_RCC_OscConfig+0x4d4>)
 8002fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fcc:	4a0f      	ldr	r2, [pc, #60]	; (800300c <HAL_RCC_OscConfig+0x4d4>)
 8002fce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fd2:	6353      	str	r3, [r2, #52]	; 0x34
 8002fd4:	4b0d      	ldr	r3, [pc, #52]	; (800300c <HAL_RCC_OscConfig+0x4d4>)
 8002fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd8:	4a0c      	ldr	r2, [pc, #48]	; (800300c <HAL_RCC_OscConfig+0x4d4>)
 8002fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fde:	6353      	str	r3, [r2, #52]	; 0x34
 8002fe0:	e00b      	b.n	8002ffa <HAL_RCC_OscConfig+0x4c2>
 8002fe2:	4b0a      	ldr	r3, [pc, #40]	; (800300c <HAL_RCC_OscConfig+0x4d4>)
 8002fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe6:	4a09      	ldr	r2, [pc, #36]	; (800300c <HAL_RCC_OscConfig+0x4d4>)
 8002fe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fec:	6353      	str	r3, [r2, #52]	; 0x34
 8002fee:	4b07      	ldr	r3, [pc, #28]	; (800300c <HAL_RCC_OscConfig+0x4d4>)
 8002ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff2:	4a06      	ldr	r2, [pc, #24]	; (800300c <HAL_RCC_OscConfig+0x4d4>)
 8002ff4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ff8:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d024      	beq.n	800304c <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003002:	f7ff f887 	bl	8002114 <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003008:	e019      	b.n	800303e <HAL_RCC_OscConfig+0x506>
 800300a:	bf00      	nop
 800300c:	40023800 	.word	0x40023800
 8003010:	08006258 	.word	0x08006258
 8003014:	20000390 	.word	0x20000390
 8003018:	20000394 	.word	0x20000394
 800301c:	42470020 	.word	0x42470020
 8003020:	42470680 	.word	0x42470680
 8003024:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003028:	f7ff f874 	bl	8002114 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	f241 3288 	movw	r2, #5000	; 0x1388
 8003036:	4293      	cmp	r3, r2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e0a3      	b.n	8003186 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800303e:	4b54      	ldr	r3, [pc, #336]	; (8003190 <HAL_RCC_OscConfig+0x658>)
 8003040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003042:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0ee      	beq.n	8003028 <HAL_RCC_OscConfig+0x4f0>
 800304a:	e014      	b.n	8003076 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800304c:	f7ff f862 	bl	8002114 <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003052:	e00a      	b.n	800306a <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003054:	f7ff f85e 	bl	8002114 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003062:	4293      	cmp	r3, r2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e08d      	b.n	8003186 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800306a:	4b49      	ldr	r3, [pc, #292]	; (8003190 <HAL_RCC_OscConfig+0x658>)
 800306c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800306e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1ee      	bne.n	8003054 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003076:	7ffb      	ldrb	r3, [r7, #31]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d105      	bne.n	8003088 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800307c:	4b44      	ldr	r3, [pc, #272]	; (8003190 <HAL_RCC_OscConfig+0x658>)
 800307e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003080:	4a43      	ldr	r2, [pc, #268]	; (8003190 <HAL_RCC_OscConfig+0x658>)
 8003082:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003086:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	2b00      	cmp	r3, #0
 800308e:	d079      	beq.n	8003184 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	2b0c      	cmp	r3, #12
 8003094:	d056      	beq.n	8003144 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	2b02      	cmp	r3, #2
 800309c:	d13b      	bne.n	8003116 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800309e:	4b3d      	ldr	r3, [pc, #244]	; (8003194 <HAL_RCC_OscConfig+0x65c>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a4:	f7ff f836 	bl	8002114 <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ac:	f7ff f832 	bl	8002114 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e063      	b.n	8003186 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030be:	4b34      	ldr	r3, [pc, #208]	; (8003190 <HAL_RCC_OscConfig+0x658>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1f0      	bne.n	80030ac <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030ca:	4b31      	ldr	r3, [pc, #196]	; (8003190 <HAL_RCC_OscConfig+0x658>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030da:	4319      	orrs	r1, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e0:	430b      	orrs	r3, r1
 80030e2:	492b      	ldr	r1, [pc, #172]	; (8003190 <HAL_RCC_OscConfig+0x658>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030e8:	4b2a      	ldr	r3, [pc, #168]	; (8003194 <HAL_RCC_OscConfig+0x65c>)
 80030ea:	2201      	movs	r2, #1
 80030ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ee:	f7ff f811 	bl	8002114 <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030f4:	e008      	b.n	8003108 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030f6:	f7ff f80d 	bl	8002114 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e03e      	b.n	8003186 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003108:	4b21      	ldr	r3, [pc, #132]	; (8003190 <HAL_RCC_OscConfig+0x658>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0f0      	beq.n	80030f6 <HAL_RCC_OscConfig+0x5be>
 8003114:	e036      	b.n	8003184 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003116:	4b1f      	ldr	r3, [pc, #124]	; (8003194 <HAL_RCC_OscConfig+0x65c>)
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311c:	f7fe fffa 	bl	8002114 <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003124:	f7fe fff6 	bl	8002114 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e027      	b.n	8003186 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003136:	4b16      	ldr	r3, [pc, #88]	; (8003190 <HAL_RCC_OscConfig+0x658>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1f0      	bne.n	8003124 <HAL_RCC_OscConfig+0x5ec>
 8003142:	e01f      	b.n	8003184 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	2b01      	cmp	r3, #1
 800314a:	d101      	bne.n	8003150 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e01a      	b.n	8003186 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003150:	4b0f      	ldr	r3, [pc, #60]	; (8003190 <HAL_RCC_OscConfig+0x658>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003160:	429a      	cmp	r2, r3
 8003162:	d10d      	bne.n	8003180 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800316e:	429a      	cmp	r2, r3
 8003170:	d106      	bne.n	8003180 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800317c:	429a      	cmp	r2, r3
 800317e:	d001      	beq.n	8003184 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e000      	b.n	8003186 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3720      	adds	r7, #32
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	40023800 	.word	0x40023800
 8003194:	42470060 	.word	0x42470060

08003198 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e11a      	b.n	80033e2 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031ac:	4b8f      	ldr	r3, [pc, #572]	; (80033ec <HAL_RCC_ClockConfig+0x254>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d919      	bls.n	80031ee <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d105      	bne.n	80031cc <HAL_RCC_ClockConfig+0x34>
 80031c0:	4b8a      	ldr	r3, [pc, #552]	; (80033ec <HAL_RCC_ClockConfig+0x254>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a89      	ldr	r2, [pc, #548]	; (80033ec <HAL_RCC_ClockConfig+0x254>)
 80031c6:	f043 0304 	orr.w	r3, r3, #4
 80031ca:	6013      	str	r3, [r2, #0]
 80031cc:	4b87      	ldr	r3, [pc, #540]	; (80033ec <HAL_RCC_ClockConfig+0x254>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f023 0201 	bic.w	r2, r3, #1
 80031d4:	4985      	ldr	r1, [pc, #532]	; (80033ec <HAL_RCC_ClockConfig+0x254>)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	4313      	orrs	r3, r2
 80031da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031dc:	4b83      	ldr	r3, [pc, #524]	; (80033ec <HAL_RCC_ClockConfig+0x254>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d001      	beq.n	80031ee <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e0f9      	b.n	80033e2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d008      	beq.n	800320c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031fa:	4b7d      	ldr	r3, [pc, #500]	; (80033f0 <HAL_RCC_ClockConfig+0x258>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	497a      	ldr	r1, [pc, #488]	; (80033f0 <HAL_RCC_ClockConfig+0x258>)
 8003208:	4313      	orrs	r3, r2
 800320a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 808e 	beq.w	8003336 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2b02      	cmp	r3, #2
 8003220:	d107      	bne.n	8003232 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003222:	4b73      	ldr	r3, [pc, #460]	; (80033f0 <HAL_RCC_ClockConfig+0x258>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d121      	bne.n	8003272 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e0d7      	b.n	80033e2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b03      	cmp	r3, #3
 8003238:	d107      	bne.n	800324a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800323a:	4b6d      	ldr	r3, [pc, #436]	; (80033f0 <HAL_RCC_ClockConfig+0x258>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d115      	bne.n	8003272 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e0cb      	b.n	80033e2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d107      	bne.n	8003262 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003252:	4b67      	ldr	r3, [pc, #412]	; (80033f0 <HAL_RCC_ClockConfig+0x258>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d109      	bne.n	8003272 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e0bf      	b.n	80033e2 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003262:	4b63      	ldr	r3, [pc, #396]	; (80033f0 <HAL_RCC_ClockConfig+0x258>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e0b7      	b.n	80033e2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003272:	4b5f      	ldr	r3, [pc, #380]	; (80033f0 <HAL_RCC_ClockConfig+0x258>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f023 0203 	bic.w	r2, r3, #3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	495c      	ldr	r1, [pc, #368]	; (80033f0 <HAL_RCC_ClockConfig+0x258>)
 8003280:	4313      	orrs	r3, r2
 8003282:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003284:	f7fe ff46 	bl	8002114 <HAL_GetTick>
 8003288:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b02      	cmp	r3, #2
 8003290:	d112      	bne.n	80032b8 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003292:	e00a      	b.n	80032aa <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003294:	f7fe ff3e 	bl	8002114 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e09b      	b.n	80033e2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80032aa:	4b51      	ldr	r3, [pc, #324]	; (80033f0 <HAL_RCC_ClockConfig+0x258>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 030c 	and.w	r3, r3, #12
 80032b2:	2b08      	cmp	r3, #8
 80032b4:	d1ee      	bne.n	8003294 <HAL_RCC_ClockConfig+0xfc>
 80032b6:	e03e      	b.n	8003336 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	2b03      	cmp	r3, #3
 80032be:	d112      	bne.n	80032e6 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032c0:	e00a      	b.n	80032d8 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032c2:	f7fe ff27 	bl	8002114 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e084      	b.n	80033e2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032d8:	4b45      	ldr	r3, [pc, #276]	; (80033f0 <HAL_RCC_ClockConfig+0x258>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f003 030c 	and.w	r3, r3, #12
 80032e0:	2b0c      	cmp	r3, #12
 80032e2:	d1ee      	bne.n	80032c2 <HAL_RCC_ClockConfig+0x12a>
 80032e4:	e027      	b.n	8003336 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d11d      	bne.n	800332a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80032ee:	e00a      	b.n	8003306 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032f0:	f7fe ff10 	bl	8002114 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fe:	4293      	cmp	r3, r2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e06d      	b.n	80033e2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003306:	4b3a      	ldr	r3, [pc, #232]	; (80033f0 <HAL_RCC_ClockConfig+0x258>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 030c 	and.w	r3, r3, #12
 800330e:	2b04      	cmp	r3, #4
 8003310:	d1ee      	bne.n	80032f0 <HAL_RCC_ClockConfig+0x158>
 8003312:	e010      	b.n	8003336 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003314:	f7fe fefe 	bl	8002114 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003322:	4293      	cmp	r3, r2
 8003324:	d901      	bls.n	800332a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e05b      	b.n	80033e2 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800332a:	4b31      	ldr	r3, [pc, #196]	; (80033f0 <HAL_RCC_ClockConfig+0x258>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 030c 	and.w	r3, r3, #12
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1ee      	bne.n	8003314 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003336:	4b2d      	ldr	r3, [pc, #180]	; (80033ec <HAL_RCC_ClockConfig+0x254>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	429a      	cmp	r2, r3
 8003342:	d219      	bcs.n	8003378 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d105      	bne.n	8003356 <HAL_RCC_ClockConfig+0x1be>
 800334a:	4b28      	ldr	r3, [pc, #160]	; (80033ec <HAL_RCC_ClockConfig+0x254>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a27      	ldr	r2, [pc, #156]	; (80033ec <HAL_RCC_ClockConfig+0x254>)
 8003350:	f043 0304 	orr.w	r3, r3, #4
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	4b25      	ldr	r3, [pc, #148]	; (80033ec <HAL_RCC_ClockConfig+0x254>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f023 0201 	bic.w	r2, r3, #1
 800335e:	4923      	ldr	r1, [pc, #140]	; (80033ec <HAL_RCC_ClockConfig+0x254>)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	4313      	orrs	r3, r2
 8003364:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003366:	4b21      	ldr	r3, [pc, #132]	; (80033ec <HAL_RCC_ClockConfig+0x254>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	429a      	cmp	r2, r3
 8003372:	d001      	beq.n	8003378 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e034      	b.n	80033e2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0304 	and.w	r3, r3, #4
 8003380:	2b00      	cmp	r3, #0
 8003382:	d008      	beq.n	8003396 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003384:	4b1a      	ldr	r3, [pc, #104]	; (80033f0 <HAL_RCC_ClockConfig+0x258>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	4917      	ldr	r1, [pc, #92]	; (80033f0 <HAL_RCC_ClockConfig+0x258>)
 8003392:	4313      	orrs	r3, r2
 8003394:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d009      	beq.n	80033b6 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033a2:	4b13      	ldr	r3, [pc, #76]	; (80033f0 <HAL_RCC_ClockConfig+0x258>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	490f      	ldr	r1, [pc, #60]	; (80033f0 <HAL_RCC_ClockConfig+0x258>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033b6:	f000 f823 	bl	8003400 <HAL_RCC_GetSysClockFreq>
 80033ba:	4602      	mov	r2, r0
 80033bc:	4b0c      	ldr	r3, [pc, #48]	; (80033f0 <HAL_RCC_ClockConfig+0x258>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	091b      	lsrs	r3, r3, #4
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	490b      	ldr	r1, [pc, #44]	; (80033f4 <HAL_RCC_ClockConfig+0x25c>)
 80033c8:	5ccb      	ldrb	r3, [r1, r3]
 80033ca:	fa22 f303 	lsr.w	r3, r2, r3
 80033ce:	4a0a      	ldr	r2, [pc, #40]	; (80033f8 <HAL_RCC_ClockConfig+0x260>)
 80033d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033d2:	4b0a      	ldr	r3, [pc, #40]	; (80033fc <HAL_RCC_ClockConfig+0x264>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fe fe50 	bl	800207c <HAL_InitTick>
 80033dc:	4603      	mov	r3, r0
 80033de:	72fb      	strb	r3, [r7, #11]

  return status;
 80033e0:	7afb      	ldrb	r3, [r7, #11]
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	40023c00 	.word	0x40023c00
 80033f0:	40023800 	.word	0x40023800
 80033f4:	08006258 	.word	0x08006258
 80033f8:	20000390 	.word	0x20000390
 80033fc:	20000394 	.word	0x20000394

08003400 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003400:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003404:	b092      	sub	sp, #72	; 0x48
 8003406:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003408:	4b79      	ldr	r3, [pc, #484]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800340e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003410:	f003 030c 	and.w	r3, r3, #12
 8003414:	2b0c      	cmp	r3, #12
 8003416:	d00d      	beq.n	8003434 <HAL_RCC_GetSysClockFreq+0x34>
 8003418:	2b0c      	cmp	r3, #12
 800341a:	f200 80d5 	bhi.w	80035c8 <HAL_RCC_GetSysClockFreq+0x1c8>
 800341e:	2b04      	cmp	r3, #4
 8003420:	d002      	beq.n	8003428 <HAL_RCC_GetSysClockFreq+0x28>
 8003422:	2b08      	cmp	r3, #8
 8003424:	d003      	beq.n	800342e <HAL_RCC_GetSysClockFreq+0x2e>
 8003426:	e0cf      	b.n	80035c8 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003428:	4b72      	ldr	r3, [pc, #456]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800342a:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800342c:	e0da      	b.n	80035e4 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800342e:	4b72      	ldr	r3, [pc, #456]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003430:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003432:	e0d7      	b.n	80035e4 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003436:	0c9b      	lsrs	r3, r3, #18
 8003438:	f003 020f 	and.w	r2, r3, #15
 800343c:	4b6f      	ldr	r3, [pc, #444]	; (80035fc <HAL_RCC_GetSysClockFreq+0x1fc>)
 800343e:	5c9b      	ldrb	r3, [r3, r2]
 8003440:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003444:	0d9b      	lsrs	r3, r3, #22
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	3301      	adds	r3, #1
 800344c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800344e:	4b68      	ldr	r3, [pc, #416]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d05d      	beq.n	8003516 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800345a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800345c:	2200      	movs	r2, #0
 800345e:	4618      	mov	r0, r3
 8003460:	4611      	mov	r1, r2
 8003462:	4604      	mov	r4, r0
 8003464:	460d      	mov	r5, r1
 8003466:	4622      	mov	r2, r4
 8003468:	462b      	mov	r3, r5
 800346a:	f04f 0000 	mov.w	r0, #0
 800346e:	f04f 0100 	mov.w	r1, #0
 8003472:	0159      	lsls	r1, r3, #5
 8003474:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003478:	0150      	lsls	r0, r2, #5
 800347a:	4602      	mov	r2, r0
 800347c:	460b      	mov	r3, r1
 800347e:	4621      	mov	r1, r4
 8003480:	1a51      	subs	r1, r2, r1
 8003482:	6139      	str	r1, [r7, #16]
 8003484:	4629      	mov	r1, r5
 8003486:	eb63 0301 	sbc.w	r3, r3, r1
 800348a:	617b      	str	r3, [r7, #20]
 800348c:	f04f 0200 	mov.w	r2, #0
 8003490:	f04f 0300 	mov.w	r3, #0
 8003494:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003498:	4659      	mov	r1, fp
 800349a:	018b      	lsls	r3, r1, #6
 800349c:	4651      	mov	r1, sl
 800349e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034a2:	4651      	mov	r1, sl
 80034a4:	018a      	lsls	r2, r1, #6
 80034a6:	46d4      	mov	ip, sl
 80034a8:	ebb2 080c 	subs.w	r8, r2, ip
 80034ac:	4659      	mov	r1, fp
 80034ae:	eb63 0901 	sbc.w	r9, r3, r1
 80034b2:	f04f 0200 	mov.w	r2, #0
 80034b6:	f04f 0300 	mov.w	r3, #0
 80034ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034c6:	4690      	mov	r8, r2
 80034c8:	4699      	mov	r9, r3
 80034ca:	4623      	mov	r3, r4
 80034cc:	eb18 0303 	adds.w	r3, r8, r3
 80034d0:	60bb      	str	r3, [r7, #8]
 80034d2:	462b      	mov	r3, r5
 80034d4:	eb49 0303 	adc.w	r3, r9, r3
 80034d8:	60fb      	str	r3, [r7, #12]
 80034da:	f04f 0200 	mov.w	r2, #0
 80034de:	f04f 0300 	mov.w	r3, #0
 80034e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034e6:	4629      	mov	r1, r5
 80034e8:	024b      	lsls	r3, r1, #9
 80034ea:	4620      	mov	r0, r4
 80034ec:	4629      	mov	r1, r5
 80034ee:	4604      	mov	r4, r0
 80034f0:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80034f4:	4601      	mov	r1, r0
 80034f6:	024a      	lsls	r2, r1, #9
 80034f8:	4610      	mov	r0, r2
 80034fa:	4619      	mov	r1, r3
 80034fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034fe:	2200      	movs	r2, #0
 8003500:	62bb      	str	r3, [r7, #40]	; 0x28
 8003502:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003504:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003508:	f7fc fe4a 	bl	80001a0 <__aeabi_uldivmod>
 800350c:	4602      	mov	r2, r0
 800350e:	460b      	mov	r3, r1
 8003510:	4613      	mov	r3, r2
 8003512:	647b      	str	r3, [r7, #68]	; 0x44
 8003514:	e055      	b.n	80035c2 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003518:	2200      	movs	r2, #0
 800351a:	623b      	str	r3, [r7, #32]
 800351c:	627a      	str	r2, [r7, #36]	; 0x24
 800351e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003522:	4642      	mov	r2, r8
 8003524:	464b      	mov	r3, r9
 8003526:	f04f 0000 	mov.w	r0, #0
 800352a:	f04f 0100 	mov.w	r1, #0
 800352e:	0159      	lsls	r1, r3, #5
 8003530:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003534:	0150      	lsls	r0, r2, #5
 8003536:	4602      	mov	r2, r0
 8003538:	460b      	mov	r3, r1
 800353a:	46c4      	mov	ip, r8
 800353c:	ebb2 0a0c 	subs.w	sl, r2, ip
 8003540:	4640      	mov	r0, r8
 8003542:	4649      	mov	r1, r9
 8003544:	468c      	mov	ip, r1
 8003546:	eb63 0b0c 	sbc.w	fp, r3, ip
 800354a:	f04f 0200 	mov.w	r2, #0
 800354e:	f04f 0300 	mov.w	r3, #0
 8003552:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003556:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800355a:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800355e:	ebb2 040a 	subs.w	r4, r2, sl
 8003562:	eb63 050b 	sbc.w	r5, r3, fp
 8003566:	f04f 0200 	mov.w	r2, #0
 800356a:	f04f 0300 	mov.w	r3, #0
 800356e:	00eb      	lsls	r3, r5, #3
 8003570:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003574:	00e2      	lsls	r2, r4, #3
 8003576:	4614      	mov	r4, r2
 8003578:	461d      	mov	r5, r3
 800357a:	4603      	mov	r3, r0
 800357c:	18e3      	adds	r3, r4, r3
 800357e:	603b      	str	r3, [r7, #0]
 8003580:	460b      	mov	r3, r1
 8003582:	eb45 0303 	adc.w	r3, r5, r3
 8003586:	607b      	str	r3, [r7, #4]
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	f04f 0300 	mov.w	r3, #0
 8003590:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003594:	4629      	mov	r1, r5
 8003596:	028b      	lsls	r3, r1, #10
 8003598:	4620      	mov	r0, r4
 800359a:	4629      	mov	r1, r5
 800359c:	4604      	mov	r4, r0
 800359e:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80035a2:	4601      	mov	r1, r0
 80035a4:	028a      	lsls	r2, r1, #10
 80035a6:	4610      	mov	r0, r2
 80035a8:	4619      	mov	r1, r3
 80035aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ac:	2200      	movs	r2, #0
 80035ae:	61bb      	str	r3, [r7, #24]
 80035b0:	61fa      	str	r2, [r7, #28]
 80035b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035b6:	f7fc fdf3 	bl	80001a0 <__aeabi_uldivmod>
 80035ba:	4602      	mov	r2, r0
 80035bc:	460b      	mov	r3, r1
 80035be:	4613      	mov	r3, r2
 80035c0:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 80035c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035c4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80035c6:	e00d      	b.n	80035e4 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80035c8:	4b09      	ldr	r3, [pc, #36]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	0b5b      	lsrs	r3, r3, #13
 80035ce:	f003 0307 	and.w	r3, r3, #7
 80035d2:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80035d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d6:	3301      	adds	r3, #1
 80035d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80035e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3748      	adds	r7, #72	; 0x48
 80035ea:	46bd      	mov	sp, r7
 80035ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035f0:	40023800 	.word	0x40023800
 80035f4:	00f42400 	.word	0x00f42400
 80035f8:	007a1200 	.word	0x007a1200
 80035fc:	0800624c 	.word	0x0800624c

08003600 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003604:	4b02      	ldr	r3, [pc, #8]	; (8003610 <HAL_RCC_GetHCLKFreq+0x10>)
 8003606:	681b      	ldr	r3, [r3, #0]
}
 8003608:	4618      	mov	r0, r3
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr
 8003610:	20000390 	.word	0x20000390

08003614 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003618:	f7ff fff2 	bl	8003600 <HAL_RCC_GetHCLKFreq>
 800361c:	4602      	mov	r2, r0
 800361e:	4b05      	ldr	r3, [pc, #20]	; (8003634 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	0a1b      	lsrs	r3, r3, #8
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	4903      	ldr	r1, [pc, #12]	; (8003638 <HAL_RCC_GetPCLK1Freq+0x24>)
 800362a:	5ccb      	ldrb	r3, [r1, r3]
 800362c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003630:	4618      	mov	r0, r3
 8003632:	bd80      	pop	{r7, pc}
 8003634:	40023800 	.word	0x40023800
 8003638:	08006268 	.word	0x08006268

0800363c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003640:	f7ff ffde 	bl	8003600 <HAL_RCC_GetHCLKFreq>
 8003644:	4602      	mov	r2, r0
 8003646:	4b05      	ldr	r3, [pc, #20]	; (800365c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	0adb      	lsrs	r3, r3, #11
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	4903      	ldr	r1, [pc, #12]	; (8003660 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003652:	5ccb      	ldrb	r3, [r1, r3]
 8003654:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003658:	4618      	mov	r0, r3
 800365a:	bd80      	pop	{r7, pc}
 800365c:	40023800 	.word	0x40023800
 8003660:	08006268 	.word	0x08006268

08003664 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003664:	b480      	push	{r7}
 8003666:	b087      	sub	sp, #28
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800366c:	2300      	movs	r3, #0
 800366e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003670:	4b29      	ldr	r3, [pc, #164]	; (8003718 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d12c      	bne.n	80036d6 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800367c:	4b26      	ldr	r3, [pc, #152]	; (8003718 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d005      	beq.n	8003694 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003688:	4b24      	ldr	r3, [pc, #144]	; (800371c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003690:	617b      	str	r3, [r7, #20]
 8003692:	e016      	b.n	80036c2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003694:	4b20      	ldr	r3, [pc, #128]	; (8003718 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	4a1f      	ldr	r2, [pc, #124]	; (8003718 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800369a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800369e:	6253      	str	r3, [r2, #36]	; 0x24
 80036a0:	4b1d      	ldr	r3, [pc, #116]	; (8003718 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a8:	60fb      	str	r3, [r7, #12]
 80036aa:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80036ac:	4b1b      	ldr	r3, [pc, #108]	; (800371c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80036b4:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80036b6:	4b18      	ldr	r3, [pc, #96]	; (8003718 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80036b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ba:	4a17      	ldr	r2, [pc, #92]	; (8003718 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80036bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036c0:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80036c8:	d105      	bne.n	80036d6 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80036d0:	d101      	bne.n	80036d6 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80036d2:	2301      	movs	r3, #1
 80036d4:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d105      	bne.n	80036e8 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80036dc:	4b10      	ldr	r3, [pc, #64]	; (8003720 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a0f      	ldr	r2, [pc, #60]	; (8003720 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036e2:	f043 0304 	orr.w	r3, r3, #4
 80036e6:	6013      	str	r3, [r2, #0]
 80036e8:	4b0d      	ldr	r3, [pc, #52]	; (8003720 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f023 0201 	bic.w	r2, r3, #1
 80036f0:	490b      	ldr	r1, [pc, #44]	; (8003720 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80036f8:	4b09      	ldr	r3, [pc, #36]	; (8003720 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0301 	and.w	r3, r3, #1
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	429a      	cmp	r2, r3
 8003704:	d001      	beq.n	800370a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e000      	b.n	800370c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	371c      	adds	r7, #28
 8003710:	46bd      	mov	sp, r7
 8003712:	bc80      	pop	{r7}
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	40023800 	.word	0x40023800
 800371c:	40007000 	.word	0x40007000
 8003720:	40023c00 	.word	0x40023c00

08003724 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e042      	b.n	80037bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d106      	bne.n	8003750 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7fe f9bc 	bl	8001ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2224      	movs	r2, #36	; 0x24
 8003754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68da      	ldr	r2, [r3, #12]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003766:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 ff5d 	bl	8004628 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	691a      	ldr	r2, [r3, #16]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800377c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	695a      	ldr	r2, [r3, #20]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800378c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68da      	ldr	r2, [r3, #12]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800379c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2220      	movs	r2, #32
 80037a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2220      	movs	r2, #32
 80037b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3708      	adds	r7, #8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b08a      	sub	sp, #40	; 0x28
 80037c8:	af02      	add	r7, sp, #8
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	603b      	str	r3, [r7, #0]
 80037d0:	4613      	mov	r3, r2
 80037d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037d4:	2300      	movs	r3, #0
 80037d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b20      	cmp	r3, #32
 80037e2:	d16d      	bne.n	80038c0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d002      	beq.n	80037f0 <HAL_UART_Transmit+0x2c>
 80037ea:	88fb      	ldrh	r3, [r7, #6]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e066      	b.n	80038c2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2221      	movs	r2, #33	; 0x21
 80037fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003802:	f7fe fc87 	bl	8002114 <HAL_GetTick>
 8003806:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	88fa      	ldrh	r2, [r7, #6]
 800380c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	88fa      	ldrh	r2, [r7, #6]
 8003812:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800381c:	d108      	bne.n	8003830 <HAL_UART_Transmit+0x6c>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d104      	bne.n	8003830 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003826:	2300      	movs	r3, #0
 8003828:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	61bb      	str	r3, [r7, #24]
 800382e:	e003      	b.n	8003838 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003834:	2300      	movs	r3, #0
 8003836:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003838:	e02a      	b.n	8003890 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	2200      	movs	r2, #0
 8003842:	2180      	movs	r1, #128	; 0x80
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	f000 fc24 	bl	8004092 <UART_WaitOnFlagUntilTimeout>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d001      	beq.n	8003854 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e036      	b.n	80038c2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10b      	bne.n	8003872 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	881b      	ldrh	r3, [r3, #0]
 800385e:	461a      	mov	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003868:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	3302      	adds	r3, #2
 800386e:	61bb      	str	r3, [r7, #24]
 8003870:	e007      	b.n	8003882 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	781a      	ldrb	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	3301      	adds	r3, #1
 8003880:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003886:	b29b      	uxth	r3, r3
 8003888:	3b01      	subs	r3, #1
 800388a:	b29a      	uxth	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003894:	b29b      	uxth	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1cf      	bne.n	800383a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	2200      	movs	r2, #0
 80038a2:	2140      	movs	r1, #64	; 0x40
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f000 fbf4 	bl	8004092 <UART_WaitOnFlagUntilTimeout>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e006      	b.n	80038c2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2220      	movs	r2, #32
 80038b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80038bc:	2300      	movs	r3, #0
 80038be:	e000      	b.n	80038c2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80038c0:	2302      	movs	r3, #2
  }
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3720      	adds	r7, #32
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b084      	sub	sp, #16
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	60f8      	str	r0, [r7, #12]
 80038d2:	60b9      	str	r1, [r7, #8]
 80038d4:	4613      	mov	r3, r2
 80038d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b20      	cmp	r3, #32
 80038e2:	d112      	bne.n	800390a <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d002      	beq.n	80038f0 <HAL_UART_Receive_DMA+0x26>
 80038ea:	88fb      	ldrh	r3, [r7, #6]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d101      	bne.n	80038f4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e00b      	b.n	800390c <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80038fa:	88fb      	ldrh	r3, [r7, #6]
 80038fc:	461a      	mov	r2, r3
 80038fe:	68b9      	ldr	r1, [r7, #8]
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f000 fc35 	bl	8004170 <UART_Start_Receive_DMA>
 8003906:	4603      	mov	r3, r0
 8003908:	e000      	b.n	800390c <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800390a:	2302      	movs	r3, #2
  }
}
 800390c:	4618      	mov	r0, r3
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b0ba      	sub	sp, #232	; 0xe8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800393a:	2300      	movs	r3, #0
 800393c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003940:	2300      	movs	r3, #0
 8003942:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800394a:	f003 030f 	and.w	r3, r3, #15
 800394e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003952:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10f      	bne.n	800397a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800395a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800395e:	f003 0320 	and.w	r3, r3, #32
 8003962:	2b00      	cmp	r3, #0
 8003964:	d009      	beq.n	800397a <HAL_UART_IRQHandler+0x66>
 8003966:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800396a:	f003 0320 	and.w	r3, r3, #32
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 fd9a 	bl	80044ac <UART_Receive_IT>
      return;
 8003978:	e25b      	b.n	8003e32 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800397a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 80de 	beq.w	8003b40 <HAL_UART_IRQHandler+0x22c>
 8003984:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	2b00      	cmp	r3, #0
 800398e:	d106      	bne.n	800399e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003994:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 80d1 	beq.w	8003b40 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800399e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00b      	beq.n	80039c2 <HAL_UART_IRQHandler+0xae>
 80039aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d005      	beq.n	80039c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ba:	f043 0201 	orr.w	r2, r3, #1
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039c6:	f003 0304 	and.w	r3, r3, #4
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00b      	beq.n	80039e6 <HAL_UART_IRQHandler+0xd2>
 80039ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d005      	beq.n	80039e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039de:	f043 0202 	orr.w	r2, r3, #2
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00b      	beq.n	8003a0a <HAL_UART_IRQHandler+0xf6>
 80039f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d005      	beq.n	8003a0a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a02:	f043 0204 	orr.w	r2, r3, #4
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d011      	beq.n	8003a3a <HAL_UART_IRQHandler+0x126>
 8003a16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a1a:	f003 0320 	and.w	r3, r3, #32
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d105      	bne.n	8003a2e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d005      	beq.n	8003a3a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a32:	f043 0208 	orr.w	r2, r3, #8
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 81f2 	beq.w	8003e28 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a48:	f003 0320 	and.w	r3, r3, #32
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d008      	beq.n	8003a62 <HAL_UART_IRQHandler+0x14e>
 8003a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a54:	f003 0320 	and.w	r3, r3, #32
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d002      	beq.n	8003a62 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 fd25 	bl	80044ac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a6c:	2b40      	cmp	r3, #64	; 0x40
 8003a6e:	bf0c      	ite	eq
 8003a70:	2301      	moveq	r3, #1
 8003a72:	2300      	movne	r3, #0
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7e:	f003 0308 	and.w	r3, r3, #8
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d103      	bne.n	8003a8e <HAL_UART_IRQHandler+0x17a>
 8003a86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d04f      	beq.n	8003b2e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 fc2f 	bl	80042f2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9e:	2b40      	cmp	r3, #64	; 0x40
 8003aa0:	d141      	bne.n	8003b26 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	3314      	adds	r3, #20
 8003aa8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ab0:	e853 3f00 	ldrex	r3, [r3]
 8003ab4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003ab8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003abc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ac0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	3314      	adds	r3, #20
 8003aca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003ace:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003ad2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003ada:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003ade:	e841 2300 	strex	r3, r2, [r1]
 8003ae2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003ae6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1d9      	bne.n	8003aa2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d013      	beq.n	8003b1e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afa:	4a7e      	ldr	r2, [pc, #504]	; (8003cf4 <HAL_UART_IRQHandler+0x3e0>)
 8003afc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fe fd51 	bl	80025aa <HAL_DMA_Abort_IT>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d016      	beq.n	8003b3c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b18:	4610      	mov	r0, r2
 8003b1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b1c:	e00e      	b.n	8003b3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f9a5 	bl	8003e6e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b24:	e00a      	b.n	8003b3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f9a1 	bl	8003e6e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b2c:	e006      	b.n	8003b3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f99d 	bl	8003e6e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003b3a:	e175      	b.n	8003e28 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b3c:	bf00      	nop
    return;
 8003b3e:	e173      	b.n	8003e28 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	f040 814f 	bne.w	8003de8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b4e:	f003 0310 	and.w	r3, r3, #16
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f000 8148 	beq.w	8003de8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b5c:	f003 0310 	and.w	r3, r3, #16
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 8141 	beq.w	8003de8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b66:	2300      	movs	r3, #0
 8003b68:	60bb      	str	r3, [r7, #8]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	60bb      	str	r3, [r7, #8]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	60bb      	str	r3, [r7, #8]
 8003b7a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b86:	2b40      	cmp	r3, #64	; 0x40
 8003b88:	f040 80b6 	bne.w	8003cf8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 8145 	beq.w	8003e2c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ba6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003baa:	429a      	cmp	r2, r3
 8003bac:	f080 813e 	bcs.w	8003e2c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003bb6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	2b20      	cmp	r3, #32
 8003bc0:	f000 8088 	beq.w	8003cd4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	330c      	adds	r3, #12
 8003bca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003bd2:	e853 3f00 	ldrex	r3, [r3]
 8003bd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003bda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003be2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	330c      	adds	r3, #12
 8003bec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003bf0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003bf4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003bfc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c00:	e841 2300 	strex	r3, r2, [r1]
 8003c04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1d9      	bne.n	8003bc4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	3314      	adds	r3, #20
 8003c16:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c1a:	e853 3f00 	ldrex	r3, [r3]
 8003c1e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c22:	f023 0301 	bic.w	r3, r3, #1
 8003c26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	3314      	adds	r3, #20
 8003c30:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c34:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c38:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c3c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c40:	e841 2300 	strex	r3, r2, [r1]
 8003c44:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1e1      	bne.n	8003c10 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	3314      	adds	r3, #20
 8003c52:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c56:	e853 3f00 	ldrex	r3, [r3]
 8003c5a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	3314      	adds	r3, #20
 8003c6c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c70:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c72:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c74:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003c76:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c78:	e841 2300 	strex	r3, r2, [r1]
 8003c7c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003c7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1e3      	bne.n	8003c4c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2220      	movs	r2, #32
 8003c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	330c      	adds	r3, #12
 8003c98:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c9c:	e853 3f00 	ldrex	r3, [r3]
 8003ca0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003ca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ca4:	f023 0310 	bic.w	r3, r3, #16
 8003ca8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	330c      	adds	r3, #12
 8003cb2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003cb6:	65ba      	str	r2, [r7, #88]	; 0x58
 8003cb8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003cbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cbe:	e841 2300 	strex	r3, r2, [r1]
 8003cc2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003cc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1e3      	bne.n	8003c92 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7fe fc2e 	bl	8002530 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	4619      	mov	r1, r3
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 f8c8 	bl	8003e80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003cf0:	e09c      	b.n	8003e2c <HAL_UART_IRQHandler+0x518>
 8003cf2:	bf00      	nop
 8003cf4:	080043b7 	.word	0x080043b7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f000 808e 	beq.w	8003e30 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003d14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 8089 	beq.w	8003e30 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	330c      	adds	r3, #12
 8003d24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d28:	e853 3f00 	ldrex	r3, [r3]
 8003d2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	330c      	adds	r3, #12
 8003d3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003d42:	647a      	str	r2, [r7, #68]	; 0x44
 8003d44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d4a:	e841 2300 	strex	r3, r2, [r1]
 8003d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1e3      	bne.n	8003d1e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	3314      	adds	r3, #20
 8003d5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d60:	e853 3f00 	ldrex	r3, [r3]
 8003d64:	623b      	str	r3, [r7, #32]
   return(result);
 8003d66:	6a3b      	ldr	r3, [r7, #32]
 8003d68:	f023 0301 	bic.w	r3, r3, #1
 8003d6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	3314      	adds	r3, #20
 8003d76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003d7a:	633a      	str	r2, [r7, #48]	; 0x30
 8003d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d82:	e841 2300 	strex	r3, r2, [r1]
 8003d86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1e3      	bne.n	8003d56 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2220      	movs	r2, #32
 8003d92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	330c      	adds	r3, #12
 8003da2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	e853 3f00 	ldrex	r3, [r3]
 8003daa:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f023 0310 	bic.w	r3, r3, #16
 8003db2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	330c      	adds	r3, #12
 8003dbc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003dc0:	61fa      	str	r2, [r7, #28]
 8003dc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc4:	69b9      	ldr	r1, [r7, #24]
 8003dc6:	69fa      	ldr	r2, [r7, #28]
 8003dc8:	e841 2300 	strex	r3, r2, [r1]
 8003dcc:	617b      	str	r3, [r7, #20]
   return(result);
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1e3      	bne.n	8003d9c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003dda:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003dde:	4619      	mov	r1, r3
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 f84d 	bl	8003e80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003de6:	e023      	b.n	8003e30 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003de8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d009      	beq.n	8003e08 <HAL_UART_IRQHandler+0x4f4>
 8003df4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d003      	beq.n	8003e08 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 faec 	bl	80043de <UART_Transmit_IT>
    return;
 8003e06:	e014      	b.n	8003e32 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00e      	beq.n	8003e32 <HAL_UART_IRQHandler+0x51e>
 8003e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d008      	beq.n	8003e32 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 fb2b 	bl	800447c <UART_EndTransmit_IT>
    return;
 8003e26:	e004      	b.n	8003e32 <HAL_UART_IRQHandler+0x51e>
    return;
 8003e28:	bf00      	nop
 8003e2a:	e002      	b.n	8003e32 <HAL_UART_IRQHandler+0x51e>
      return;
 8003e2c:	bf00      	nop
 8003e2e:	e000      	b.n	8003e32 <HAL_UART_IRQHandler+0x51e>
      return;
 8003e30:	bf00      	nop
  }
}
 8003e32:	37e8      	adds	r7, #232	; 0xe8
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bc80      	pop	{r7}
 8003e48:	4770      	bx	lr

08003e4a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b083      	sub	sp, #12
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003e52:	bf00      	nop
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bc80      	pop	{r7}
 8003e5a:	4770      	bx	lr

08003e5c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bc80      	pop	{r7}
 8003e6c:	4770      	bx	lr

08003e6e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b083      	sub	sp, #12
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e76:	bf00      	nop
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bc80      	pop	{r7}
 8003e7e:	4770      	bx	lr

08003e80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	460b      	mov	r3, r1
 8003e8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bc80      	pop	{r7}
 8003e94:	4770      	bx	lr

08003e96 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b09c      	sub	sp, #112	; 0x70
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0320 	and.w	r3, r3, #32
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d172      	bne.n	8003f98 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003eb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	330c      	adds	r3, #12
 8003ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ec2:	e853 3f00 	ldrex	r3, [r3]
 8003ec6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003ec8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ece:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	330c      	adds	r3, #12
 8003ed6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003ed8:	65ba      	str	r2, [r7, #88]	; 0x58
 8003eda:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003edc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ede:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ee0:	e841 2300 	strex	r3, r2, [r1]
 8003ee4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003ee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1e5      	bne.n	8003eb8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	3314      	adds	r3, #20
 8003ef2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef6:	e853 3f00 	ldrex	r3, [r3]
 8003efa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003efe:	f023 0301 	bic.w	r3, r3, #1
 8003f02:	667b      	str	r3, [r7, #100]	; 0x64
 8003f04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	3314      	adds	r3, #20
 8003f0a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003f0c:	647a      	str	r2, [r7, #68]	; 0x44
 8003f0e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f14:	e841 2300 	strex	r3, r2, [r1]
 8003f18:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1e5      	bne.n	8003eec <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	3314      	adds	r3, #20
 8003f26:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2a:	e853 3f00 	ldrex	r3, [r3]
 8003f2e:	623b      	str	r3, [r7, #32]
   return(result);
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f36:	663b      	str	r3, [r7, #96]	; 0x60
 8003f38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	3314      	adds	r3, #20
 8003f3e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f40:	633a      	str	r2, [r7, #48]	; 0x30
 8003f42:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f48:	e841 2300 	strex	r3, r2, [r1]
 8003f4c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1e5      	bne.n	8003f20 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f56:	2220      	movs	r2, #32
 8003f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d119      	bne.n	8003f98 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	330c      	adds	r3, #12
 8003f6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	e853 3f00 	ldrex	r3, [r3]
 8003f72:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f023 0310 	bic.w	r3, r3, #16
 8003f7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	330c      	adds	r3, #12
 8003f82:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f84:	61fa      	str	r2, [r7, #28]
 8003f86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f88:	69b9      	ldr	r1, [r7, #24]
 8003f8a:	69fa      	ldr	r2, [r7, #28]
 8003f8c:	e841 2300 	strex	r3, r2, [r1]
 8003f90:	617b      	str	r3, [r7, #20]
   return(result);
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1e5      	bne.n	8003f64 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d106      	bne.n	8003fb4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fa8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003faa:	4619      	mov	r1, r3
 8003fac:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003fae:	f7ff ff67 	bl	8003e80 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003fb2:	e002      	b.n	8003fba <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003fb4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003fb6:	f7ff ff48 	bl	8003e4a <HAL_UART_RxCpltCallback>
}
 8003fba:	bf00      	nop
 8003fbc:	3770      	adds	r7, #112	; 0x70
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b084      	sub	sp, #16
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fce:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d108      	bne.n	8003ff0 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003fe2:	085b      	lsrs	r3, r3, #1
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f7ff ff49 	bl	8003e80 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003fee:	e002      	b.n	8003ff6 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f7ff ff33 	bl	8003e5c <HAL_UART_RxHalfCpltCallback>
}
 8003ff6:	bf00      	nop
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b084      	sub	sp, #16
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004006:	2300      	movs	r3, #0
 8004008:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800401a:	2b80      	cmp	r3, #128	; 0x80
 800401c:	bf0c      	ite	eq
 800401e:	2301      	moveq	r3, #1
 8004020:	2300      	movne	r3, #0
 8004022:	b2db      	uxtb	r3, r3
 8004024:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b21      	cmp	r3, #33	; 0x21
 8004030:	d108      	bne.n	8004044 <UART_DMAError+0x46>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d005      	beq.n	8004044 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	2200      	movs	r2, #0
 800403c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800403e:	68b8      	ldr	r0, [r7, #8]
 8004040:	f000 f930 	bl	80042a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800404e:	2b40      	cmp	r3, #64	; 0x40
 8004050:	bf0c      	ite	eq
 8004052:	2301      	moveq	r3, #1
 8004054:	2300      	movne	r3, #0
 8004056:	b2db      	uxtb	r3, r3
 8004058:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b22      	cmp	r3, #34	; 0x22
 8004064:	d108      	bne.n	8004078 <UART_DMAError+0x7a>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d005      	beq.n	8004078 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	2200      	movs	r2, #0
 8004070:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004072:	68b8      	ldr	r0, [r7, #8]
 8004074:	f000 f93d 	bl	80042f2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407c:	f043 0210 	orr.w	r2, r3, #16
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004084:	68b8      	ldr	r0, [r7, #8]
 8004086:	f7ff fef2 	bl	8003e6e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800408a:	bf00      	nop
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b090      	sub	sp, #64	; 0x40
 8004096:	af00      	add	r7, sp, #0
 8004098:	60f8      	str	r0, [r7, #12]
 800409a:	60b9      	str	r1, [r7, #8]
 800409c:	603b      	str	r3, [r7, #0]
 800409e:	4613      	mov	r3, r2
 80040a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040a2:	e050      	b.n	8004146 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040aa:	d04c      	beq.n	8004146 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80040ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d007      	beq.n	80040c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80040b2:	f7fe f82f 	bl	8002114 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040be:	429a      	cmp	r2, r3
 80040c0:	d241      	bcs.n	8004146 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	330c      	adds	r3, #12
 80040c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040cc:	e853 3f00 	ldrex	r3, [r3]
 80040d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	330c      	adds	r3, #12
 80040e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040e2:	637a      	str	r2, [r7, #52]	; 0x34
 80040e4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040ea:	e841 2300 	strex	r3, r2, [r1]
 80040ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1e5      	bne.n	80040c2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	3314      	adds	r3, #20
 80040fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	e853 3f00 	ldrex	r3, [r3]
 8004104:	613b      	str	r3, [r7, #16]
   return(result);
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	f023 0301 	bic.w	r3, r3, #1
 800410c:	63bb      	str	r3, [r7, #56]	; 0x38
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	3314      	adds	r3, #20
 8004114:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004116:	623a      	str	r2, [r7, #32]
 8004118:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411a:	69f9      	ldr	r1, [r7, #28]
 800411c:	6a3a      	ldr	r2, [r7, #32]
 800411e:	e841 2300 	strex	r3, r2, [r1]
 8004122:	61bb      	str	r3, [r7, #24]
   return(result);
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1e5      	bne.n	80040f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2220      	movs	r2, #32
 800412e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2220      	movs	r2, #32
 8004136:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e00f      	b.n	8004166 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	4013      	ands	r3, r2
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	429a      	cmp	r2, r3
 8004154:	bf0c      	ite	eq
 8004156:	2301      	moveq	r3, #1
 8004158:	2300      	movne	r3, #0
 800415a:	b2db      	uxtb	r3, r3
 800415c:	461a      	mov	r2, r3
 800415e:	79fb      	ldrb	r3, [r7, #7]
 8004160:	429a      	cmp	r2, r3
 8004162:	d09f      	beq.n	80040a4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3740      	adds	r7, #64	; 0x40
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
	...

08004170 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b098      	sub	sp, #96	; 0x60
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	4613      	mov	r3, r2
 800417c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800417e:	68ba      	ldr	r2, [r7, #8]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	88fa      	ldrh	r2, [r7, #6]
 8004188:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2222      	movs	r2, #34	; 0x22
 8004194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800419c:	4a3e      	ldr	r2, [pc, #248]	; (8004298 <UART_Start_Receive_DMA+0x128>)
 800419e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a4:	4a3d      	ldr	r2, [pc, #244]	; (800429c <UART_Start_Receive_DMA+0x12c>)
 80041a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ac:	4a3c      	ldr	r2, [pc, #240]	; (80042a0 <UART_Start_Receive_DMA+0x130>)
 80041ae:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b4:	2200      	movs	r2, #0
 80041b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80041b8:	f107 0308 	add.w	r3, r7, #8
 80041bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	3304      	adds	r3, #4
 80041c8:	4619      	mov	r1, r3
 80041ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	88fb      	ldrh	r3, [r7, #6]
 80041d0:	f7fe f94e 	bl	8002470 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80041d4:	2300      	movs	r3, #0
 80041d6:	613b      	str	r3, [r7, #16]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	613b      	str	r3, [r7, #16]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	613b      	str	r3, [r7, #16]
 80041e8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d019      	beq.n	8004226 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	330c      	adds	r3, #12
 80041f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041fc:	e853 3f00 	ldrex	r3, [r3]
 8004200:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004208:	65bb      	str	r3, [r7, #88]	; 0x58
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	330c      	adds	r3, #12
 8004210:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004212:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004214:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004216:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004218:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800421a:	e841 2300 	strex	r3, r2, [r1]
 800421e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1e5      	bne.n	80041f2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	3314      	adds	r3, #20
 800422c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004230:	e853 3f00 	ldrex	r3, [r3]
 8004234:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004238:	f043 0301 	orr.w	r3, r3, #1
 800423c:	657b      	str	r3, [r7, #84]	; 0x54
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	3314      	adds	r3, #20
 8004244:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004246:	63ba      	str	r2, [r7, #56]	; 0x38
 8004248:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800424c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800424e:	e841 2300 	strex	r3, r2, [r1]
 8004252:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1e5      	bne.n	8004226 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	3314      	adds	r3, #20
 8004260:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	e853 3f00 	ldrex	r3, [r3]
 8004268:	617b      	str	r3, [r7, #20]
   return(result);
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004270:	653b      	str	r3, [r7, #80]	; 0x50
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	3314      	adds	r3, #20
 8004278:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800427a:	627a      	str	r2, [r7, #36]	; 0x24
 800427c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427e:	6a39      	ldr	r1, [r7, #32]
 8004280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004282:	e841 2300 	strex	r3, r2, [r1]
 8004286:	61fb      	str	r3, [r7, #28]
   return(result);
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1e5      	bne.n	800425a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3760      	adds	r7, #96	; 0x60
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	08003e97 	.word	0x08003e97
 800429c:	08003fc3 	.word	0x08003fc3
 80042a0:	08003fff 	.word	0x08003fff

080042a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b089      	sub	sp, #36	; 0x24
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	330c      	adds	r3, #12
 80042b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	e853 3f00 	ldrex	r3, [r3]
 80042ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80042c2:	61fb      	str	r3, [r7, #28]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	330c      	adds	r3, #12
 80042ca:	69fa      	ldr	r2, [r7, #28]
 80042cc:	61ba      	str	r2, [r7, #24]
 80042ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d0:	6979      	ldr	r1, [r7, #20]
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	e841 2300 	strex	r3, r2, [r1]
 80042d8:	613b      	str	r3, [r7, #16]
   return(result);
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1e5      	bne.n	80042ac <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2220      	movs	r2, #32
 80042e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80042e8:	bf00      	nop
 80042ea:	3724      	adds	r7, #36	; 0x24
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bc80      	pop	{r7}
 80042f0:	4770      	bx	lr

080042f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b095      	sub	sp, #84	; 0x54
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	330c      	adds	r3, #12
 8004300:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004304:	e853 3f00 	ldrex	r3, [r3]
 8004308:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800430a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004310:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	330c      	adds	r3, #12
 8004318:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800431a:	643a      	str	r2, [r7, #64]	; 0x40
 800431c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004320:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004322:	e841 2300 	strex	r3, r2, [r1]
 8004326:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1e5      	bne.n	80042fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	3314      	adds	r3, #20
 8004334:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004336:	6a3b      	ldr	r3, [r7, #32]
 8004338:	e853 3f00 	ldrex	r3, [r3]
 800433c:	61fb      	str	r3, [r7, #28]
   return(result);
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	f023 0301 	bic.w	r3, r3, #1
 8004344:	64bb      	str	r3, [r7, #72]	; 0x48
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	3314      	adds	r3, #20
 800434c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800434e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004350:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004352:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004354:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004356:	e841 2300 	strex	r3, r2, [r1]
 800435a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1e5      	bne.n	800432e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004366:	2b01      	cmp	r3, #1
 8004368:	d119      	bne.n	800439e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	330c      	adds	r3, #12
 8004370:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	e853 3f00 	ldrex	r3, [r3]
 8004378:	60bb      	str	r3, [r7, #8]
   return(result);
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	f023 0310 	bic.w	r3, r3, #16
 8004380:	647b      	str	r3, [r7, #68]	; 0x44
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	330c      	adds	r3, #12
 8004388:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800438a:	61ba      	str	r2, [r7, #24]
 800438c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438e:	6979      	ldr	r1, [r7, #20]
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	e841 2300 	strex	r3, r2, [r1]
 8004396:	613b      	str	r3, [r7, #16]
   return(result);
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1e5      	bne.n	800436a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2220      	movs	r2, #32
 80043a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	631a      	str	r2, [r3, #48]	; 0x30
}
 80043ac:	bf00      	nop
 80043ae:	3754      	adds	r7, #84	; 0x54
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bc80      	pop	{r7}
 80043b4:	4770      	bx	lr

080043b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b084      	sub	sp, #16
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f7ff fd4c 	bl	8003e6e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043d6:	bf00      	nop
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80043de:	b480      	push	{r7}
 80043e0:	b085      	sub	sp, #20
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b21      	cmp	r3, #33	; 0x21
 80043f0:	d13e      	bne.n	8004470 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043fa:	d114      	bne.n	8004426 <UART_Transmit_IT+0x48>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d110      	bne.n	8004426 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	881b      	ldrh	r3, [r3, #0]
 800440e:	461a      	mov	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004418:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	1c9a      	adds	r2, r3, #2
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	621a      	str	r2, [r3, #32]
 8004424:	e008      	b.n	8004438 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	1c59      	adds	r1, r3, #1
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	6211      	str	r1, [r2, #32]
 8004430:	781a      	ldrb	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800443c:	b29b      	uxth	r3, r3
 800443e:	3b01      	subs	r3, #1
 8004440:	b29b      	uxth	r3, r3
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	4619      	mov	r1, r3
 8004446:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004448:	2b00      	cmp	r3, #0
 800444a:	d10f      	bne.n	800446c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68da      	ldr	r2, [r3, #12]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800445a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68da      	ldr	r2, [r3, #12]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800446a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800446c:	2300      	movs	r3, #0
 800446e:	e000      	b.n	8004472 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004470:	2302      	movs	r3, #2
  }
}
 8004472:	4618      	mov	r0, r3
 8004474:	3714      	adds	r7, #20
 8004476:	46bd      	mov	sp, r7
 8004478:	bc80      	pop	{r7}
 800447a:	4770      	bx	lr

0800447c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68da      	ldr	r2, [r3, #12]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004492:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2220      	movs	r2, #32
 8004498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f7ff fccb 	bl	8003e38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3708      	adds	r7, #8
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b08c      	sub	sp, #48	; 0x30
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b22      	cmp	r3, #34	; 0x22
 80044be:	f040 80ae 	bne.w	800461e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ca:	d117      	bne.n	80044fc <UART_Receive_IT+0x50>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d113      	bne.n	80044fc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80044d4:	2300      	movs	r3, #0
 80044d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044dc:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f4:	1c9a      	adds	r2, r3, #2
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	629a      	str	r2, [r3, #40]	; 0x28
 80044fa:	e026      	b.n	800454a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004500:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004502:	2300      	movs	r3, #0
 8004504:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800450e:	d007      	beq.n	8004520 <UART_Receive_IT+0x74>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10a      	bne.n	800452e <UART_Receive_IT+0x82>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d106      	bne.n	800452e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	b2da      	uxtb	r2, r3
 8004528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800452a:	701a      	strb	r2, [r3, #0]
 800452c:	e008      	b.n	8004540 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	b2db      	uxtb	r3, r3
 8004536:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800453a:	b2da      	uxtb	r2, r3
 800453c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800453e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004544:	1c5a      	adds	r2, r3, #1
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800454e:	b29b      	uxth	r3, r3
 8004550:	3b01      	subs	r3, #1
 8004552:	b29b      	uxth	r3, r3
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	4619      	mov	r1, r3
 8004558:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800455a:	2b00      	cmp	r3, #0
 800455c:	d15d      	bne.n	800461a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68da      	ldr	r2, [r3, #12]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 0220 	bic.w	r2, r2, #32
 800456c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68da      	ldr	r2, [r3, #12]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800457c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	695a      	ldr	r2, [r3, #20]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f022 0201 	bic.w	r2, r2, #1
 800458c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2220      	movs	r2, #32
 8004592:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d135      	bne.n	8004610 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	330c      	adds	r3, #12
 80045b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	e853 3f00 	ldrex	r3, [r3]
 80045b8:	613b      	str	r3, [r7, #16]
   return(result);
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	f023 0310 	bic.w	r3, r3, #16
 80045c0:	627b      	str	r3, [r7, #36]	; 0x24
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	330c      	adds	r3, #12
 80045c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ca:	623a      	str	r2, [r7, #32]
 80045cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ce:	69f9      	ldr	r1, [r7, #28]
 80045d0:	6a3a      	ldr	r2, [r7, #32]
 80045d2:	e841 2300 	strex	r3, r2, [r1]
 80045d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1e5      	bne.n	80045aa <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0310 	and.w	r3, r3, #16
 80045e8:	2b10      	cmp	r3, #16
 80045ea:	d10a      	bne.n	8004602 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045ec:	2300      	movs	r3, #0
 80045ee:	60fb      	str	r3, [r7, #12]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	60fb      	str	r3, [r7, #12]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	60fb      	str	r3, [r7, #12]
 8004600:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004606:	4619      	mov	r1, r3
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f7ff fc39 	bl	8003e80 <HAL_UARTEx_RxEventCallback>
 800460e:	e002      	b.n	8004616 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f7ff fc1a 	bl	8003e4a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004616:	2300      	movs	r3, #0
 8004618:	e002      	b.n	8004620 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800461a:	2300      	movs	r3, #0
 800461c:	e000      	b.n	8004620 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800461e:	2302      	movs	r3, #2
  }
}
 8004620:	4618      	mov	r0, r3
 8004622:	3730      	adds	r7, #48	; 0x30
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68da      	ldr	r2, [r3, #12]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	689a      	ldr	r2, [r3, #8]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	431a      	orrs	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	695b      	ldr	r3, [r3, #20]
 8004654:	431a      	orrs	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	69db      	ldr	r3, [r3, #28]
 800465a:	4313      	orrs	r3, r2
 800465c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004668:	f023 030c 	bic.w	r3, r3, #12
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	6812      	ldr	r2, [r2, #0]
 8004670:	68b9      	ldr	r1, [r7, #8]
 8004672:	430b      	orrs	r3, r1
 8004674:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	699a      	ldr	r2, [r3, #24]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	430a      	orrs	r2, r1
 800468a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a55      	ldr	r2, [pc, #340]	; (80047e8 <UART_SetConfig+0x1c0>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d103      	bne.n	800469e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004696:	f7fe ffd1 	bl	800363c <HAL_RCC_GetPCLK2Freq>
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	e002      	b.n	80046a4 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800469e:	f7fe ffb9 	bl	8003614 <HAL_RCC_GetPCLK1Freq>
 80046a2:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	69db      	ldr	r3, [r3, #28]
 80046a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046ac:	d14c      	bne.n	8004748 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	4613      	mov	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4413      	add	r3, r2
 80046b6:	009a      	lsls	r2, r3, #2
 80046b8:	441a      	add	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	005b      	lsls	r3, r3, #1
 80046c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c4:	4a49      	ldr	r2, [pc, #292]	; (80047ec <UART_SetConfig+0x1c4>)
 80046c6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ca:	095b      	lsrs	r3, r3, #5
 80046cc:	0119      	lsls	r1, r3, #4
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	4613      	mov	r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4413      	add	r3, r2
 80046d6:	009a      	lsls	r2, r3, #2
 80046d8:	441a      	add	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	005b      	lsls	r3, r3, #1
 80046e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80046e4:	4b41      	ldr	r3, [pc, #260]	; (80047ec <UART_SetConfig+0x1c4>)
 80046e6:	fba3 0302 	umull	r0, r3, r3, r2
 80046ea:	095b      	lsrs	r3, r3, #5
 80046ec:	2064      	movs	r0, #100	; 0x64
 80046ee:	fb00 f303 	mul.w	r3, r0, r3
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	00db      	lsls	r3, r3, #3
 80046f6:	3332      	adds	r3, #50	; 0x32
 80046f8:	4a3c      	ldr	r2, [pc, #240]	; (80047ec <UART_SetConfig+0x1c4>)
 80046fa:	fba2 2303 	umull	r2, r3, r2, r3
 80046fe:	095b      	lsrs	r3, r3, #5
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004706:	4419      	add	r1, r3
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	4613      	mov	r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4413      	add	r3, r2
 8004710:	009a      	lsls	r2, r3, #2
 8004712:	441a      	add	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	fbb2 f2f3 	udiv	r2, r2, r3
 800471e:	4b33      	ldr	r3, [pc, #204]	; (80047ec <UART_SetConfig+0x1c4>)
 8004720:	fba3 0302 	umull	r0, r3, r3, r2
 8004724:	095b      	lsrs	r3, r3, #5
 8004726:	2064      	movs	r0, #100	; 0x64
 8004728:	fb00 f303 	mul.w	r3, r0, r3
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	3332      	adds	r3, #50	; 0x32
 8004732:	4a2e      	ldr	r2, [pc, #184]	; (80047ec <UART_SetConfig+0x1c4>)
 8004734:	fba2 2303 	umull	r2, r3, r2, r3
 8004738:	095b      	lsrs	r3, r3, #5
 800473a:	f003 0207 	and.w	r2, r3, #7
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	440a      	add	r2, r1
 8004744:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004746:	e04a      	b.n	80047de <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	4613      	mov	r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	4413      	add	r3, r2
 8004750:	009a      	lsls	r2, r3, #2
 8004752:	441a      	add	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	fbb2 f3f3 	udiv	r3, r2, r3
 800475e:	4a23      	ldr	r2, [pc, #140]	; (80047ec <UART_SetConfig+0x1c4>)
 8004760:	fba2 2303 	umull	r2, r3, r2, r3
 8004764:	095b      	lsrs	r3, r3, #5
 8004766:	0119      	lsls	r1, r3, #4
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	4613      	mov	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4413      	add	r3, r2
 8004770:	009a      	lsls	r2, r3, #2
 8004772:	441a      	add	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	fbb2 f2f3 	udiv	r2, r2, r3
 800477e:	4b1b      	ldr	r3, [pc, #108]	; (80047ec <UART_SetConfig+0x1c4>)
 8004780:	fba3 0302 	umull	r0, r3, r3, r2
 8004784:	095b      	lsrs	r3, r3, #5
 8004786:	2064      	movs	r0, #100	; 0x64
 8004788:	fb00 f303 	mul.w	r3, r0, r3
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	3332      	adds	r3, #50	; 0x32
 8004792:	4a16      	ldr	r2, [pc, #88]	; (80047ec <UART_SetConfig+0x1c4>)
 8004794:	fba2 2303 	umull	r2, r3, r2, r3
 8004798:	095b      	lsrs	r3, r3, #5
 800479a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800479e:	4419      	add	r1, r3
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	4613      	mov	r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	4413      	add	r3, r2
 80047a8:	009a      	lsls	r2, r3, #2
 80047aa:	441a      	add	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80047b6:	4b0d      	ldr	r3, [pc, #52]	; (80047ec <UART_SetConfig+0x1c4>)
 80047b8:	fba3 0302 	umull	r0, r3, r3, r2
 80047bc:	095b      	lsrs	r3, r3, #5
 80047be:	2064      	movs	r0, #100	; 0x64
 80047c0:	fb00 f303 	mul.w	r3, r0, r3
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	011b      	lsls	r3, r3, #4
 80047c8:	3332      	adds	r3, #50	; 0x32
 80047ca:	4a08      	ldr	r2, [pc, #32]	; (80047ec <UART_SetConfig+0x1c4>)
 80047cc:	fba2 2303 	umull	r2, r3, r2, r3
 80047d0:	095b      	lsrs	r3, r3, #5
 80047d2:	f003 020f 	and.w	r2, r3, #15
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	440a      	add	r2, r1
 80047dc:	609a      	str	r2, [r3, #8]
}
 80047de:	bf00      	nop
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	40013800 	.word	0x40013800
 80047ec:	51eb851f 	.word	0x51eb851f

080047f0 <atoi>:
 80047f0:	220a      	movs	r2, #10
 80047f2:	2100      	movs	r1, #0
 80047f4:	f000 b9f0 	b.w	8004bd8 <strtol>

080047f8 <__errno>:
 80047f8:	4b01      	ldr	r3, [pc, #4]	; (8004800 <__errno+0x8>)
 80047fa:	6818      	ldr	r0, [r3, #0]
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	2000039c 	.word	0x2000039c

08004804 <__libc_init_array>:
 8004804:	b570      	push	{r4, r5, r6, lr}
 8004806:	2600      	movs	r6, #0
 8004808:	4d0c      	ldr	r5, [pc, #48]	; (800483c <__libc_init_array+0x38>)
 800480a:	4c0d      	ldr	r4, [pc, #52]	; (8004840 <__libc_init_array+0x3c>)
 800480c:	1b64      	subs	r4, r4, r5
 800480e:	10a4      	asrs	r4, r4, #2
 8004810:	42a6      	cmp	r6, r4
 8004812:	d109      	bne.n	8004828 <__libc_init_array+0x24>
 8004814:	f001 fa60 	bl	8005cd8 <_init>
 8004818:	2600      	movs	r6, #0
 800481a:	4d0a      	ldr	r5, [pc, #40]	; (8004844 <__libc_init_array+0x40>)
 800481c:	4c0a      	ldr	r4, [pc, #40]	; (8004848 <__libc_init_array+0x44>)
 800481e:	1b64      	subs	r4, r4, r5
 8004820:	10a4      	asrs	r4, r4, #2
 8004822:	42a6      	cmp	r6, r4
 8004824:	d105      	bne.n	8004832 <__libc_init_array+0x2e>
 8004826:	bd70      	pop	{r4, r5, r6, pc}
 8004828:	f855 3b04 	ldr.w	r3, [r5], #4
 800482c:	4798      	blx	r3
 800482e:	3601      	adds	r6, #1
 8004830:	e7ee      	b.n	8004810 <__libc_init_array+0xc>
 8004832:	f855 3b04 	ldr.w	r3, [r5], #4
 8004836:	4798      	blx	r3
 8004838:	3601      	adds	r6, #1
 800483a:	e7f2      	b.n	8004822 <__libc_init_array+0x1e>
 800483c:	080064e4 	.word	0x080064e4
 8004840:	080064e4 	.word	0x080064e4
 8004844:	080064e4 	.word	0x080064e4
 8004848:	080064e8 	.word	0x080064e8

0800484c <__itoa>:
 800484c:	1e93      	subs	r3, r2, #2
 800484e:	2b22      	cmp	r3, #34	; 0x22
 8004850:	b510      	push	{r4, lr}
 8004852:	460c      	mov	r4, r1
 8004854:	d904      	bls.n	8004860 <__itoa+0x14>
 8004856:	2300      	movs	r3, #0
 8004858:	461c      	mov	r4, r3
 800485a:	700b      	strb	r3, [r1, #0]
 800485c:	4620      	mov	r0, r4
 800485e:	bd10      	pop	{r4, pc}
 8004860:	2a0a      	cmp	r2, #10
 8004862:	d109      	bne.n	8004878 <__itoa+0x2c>
 8004864:	2800      	cmp	r0, #0
 8004866:	da07      	bge.n	8004878 <__itoa+0x2c>
 8004868:	232d      	movs	r3, #45	; 0x2d
 800486a:	700b      	strb	r3, [r1, #0]
 800486c:	2101      	movs	r1, #1
 800486e:	4240      	negs	r0, r0
 8004870:	4421      	add	r1, r4
 8004872:	f000 f9d5 	bl	8004c20 <__utoa>
 8004876:	e7f1      	b.n	800485c <__itoa+0x10>
 8004878:	2100      	movs	r1, #0
 800487a:	e7f9      	b.n	8004870 <__itoa+0x24>

0800487c <itoa>:
 800487c:	f7ff bfe6 	b.w	800484c <__itoa>

08004880 <memset>:
 8004880:	4603      	mov	r3, r0
 8004882:	4402      	add	r2, r0
 8004884:	4293      	cmp	r3, r2
 8004886:	d100      	bne.n	800488a <memset+0xa>
 8004888:	4770      	bx	lr
 800488a:	f803 1b01 	strb.w	r1, [r3], #1
 800488e:	e7f9      	b.n	8004884 <memset+0x4>

08004890 <iprintf>:
 8004890:	b40f      	push	{r0, r1, r2, r3}
 8004892:	4b0a      	ldr	r3, [pc, #40]	; (80048bc <iprintf+0x2c>)
 8004894:	b513      	push	{r0, r1, r4, lr}
 8004896:	681c      	ldr	r4, [r3, #0]
 8004898:	b124      	cbz	r4, 80048a4 <iprintf+0x14>
 800489a:	69a3      	ldr	r3, [r4, #24]
 800489c:	b913      	cbnz	r3, 80048a4 <iprintf+0x14>
 800489e:	4620      	mov	r0, r4
 80048a0:	f000 fbf4 	bl	800508c <__sinit>
 80048a4:	ab05      	add	r3, sp, #20
 80048a6:	4620      	mov	r0, r4
 80048a8:	9a04      	ldr	r2, [sp, #16]
 80048aa:	68a1      	ldr	r1, [r4, #8]
 80048ac:	9301      	str	r3, [sp, #4]
 80048ae:	f000 fe23 	bl	80054f8 <_vfiprintf_r>
 80048b2:	b002      	add	sp, #8
 80048b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048b8:	b004      	add	sp, #16
 80048ba:	4770      	bx	lr
 80048bc:	2000039c 	.word	0x2000039c

080048c0 <_puts_r>:
 80048c0:	b570      	push	{r4, r5, r6, lr}
 80048c2:	460e      	mov	r6, r1
 80048c4:	4605      	mov	r5, r0
 80048c6:	b118      	cbz	r0, 80048d0 <_puts_r+0x10>
 80048c8:	6983      	ldr	r3, [r0, #24]
 80048ca:	b90b      	cbnz	r3, 80048d0 <_puts_r+0x10>
 80048cc:	f000 fbde 	bl	800508c <__sinit>
 80048d0:	69ab      	ldr	r3, [r5, #24]
 80048d2:	68ac      	ldr	r4, [r5, #8]
 80048d4:	b913      	cbnz	r3, 80048dc <_puts_r+0x1c>
 80048d6:	4628      	mov	r0, r5
 80048d8:	f000 fbd8 	bl	800508c <__sinit>
 80048dc:	4b2c      	ldr	r3, [pc, #176]	; (8004990 <_puts_r+0xd0>)
 80048de:	429c      	cmp	r4, r3
 80048e0:	d120      	bne.n	8004924 <_puts_r+0x64>
 80048e2:	686c      	ldr	r4, [r5, #4]
 80048e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048e6:	07db      	lsls	r3, r3, #31
 80048e8:	d405      	bmi.n	80048f6 <_puts_r+0x36>
 80048ea:	89a3      	ldrh	r3, [r4, #12]
 80048ec:	0598      	lsls	r0, r3, #22
 80048ee:	d402      	bmi.n	80048f6 <_puts_r+0x36>
 80048f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048f2:	f000 fc8e 	bl	8005212 <__retarget_lock_acquire_recursive>
 80048f6:	89a3      	ldrh	r3, [r4, #12]
 80048f8:	0719      	lsls	r1, r3, #28
 80048fa:	d51d      	bpl.n	8004938 <_puts_r+0x78>
 80048fc:	6923      	ldr	r3, [r4, #16]
 80048fe:	b1db      	cbz	r3, 8004938 <_puts_r+0x78>
 8004900:	3e01      	subs	r6, #1
 8004902:	68a3      	ldr	r3, [r4, #8]
 8004904:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004908:	3b01      	subs	r3, #1
 800490a:	60a3      	str	r3, [r4, #8]
 800490c:	bb39      	cbnz	r1, 800495e <_puts_r+0x9e>
 800490e:	2b00      	cmp	r3, #0
 8004910:	da38      	bge.n	8004984 <_puts_r+0xc4>
 8004912:	4622      	mov	r2, r4
 8004914:	210a      	movs	r1, #10
 8004916:	4628      	mov	r0, r5
 8004918:	f000 f9c4 	bl	8004ca4 <__swbuf_r>
 800491c:	3001      	adds	r0, #1
 800491e:	d011      	beq.n	8004944 <_puts_r+0x84>
 8004920:	250a      	movs	r5, #10
 8004922:	e011      	b.n	8004948 <_puts_r+0x88>
 8004924:	4b1b      	ldr	r3, [pc, #108]	; (8004994 <_puts_r+0xd4>)
 8004926:	429c      	cmp	r4, r3
 8004928:	d101      	bne.n	800492e <_puts_r+0x6e>
 800492a:	68ac      	ldr	r4, [r5, #8]
 800492c:	e7da      	b.n	80048e4 <_puts_r+0x24>
 800492e:	4b1a      	ldr	r3, [pc, #104]	; (8004998 <_puts_r+0xd8>)
 8004930:	429c      	cmp	r4, r3
 8004932:	bf08      	it	eq
 8004934:	68ec      	ldreq	r4, [r5, #12]
 8004936:	e7d5      	b.n	80048e4 <_puts_r+0x24>
 8004938:	4621      	mov	r1, r4
 800493a:	4628      	mov	r0, r5
 800493c:	f000 fa04 	bl	8004d48 <__swsetup_r>
 8004940:	2800      	cmp	r0, #0
 8004942:	d0dd      	beq.n	8004900 <_puts_r+0x40>
 8004944:	f04f 35ff 	mov.w	r5, #4294967295
 8004948:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800494a:	07da      	lsls	r2, r3, #31
 800494c:	d405      	bmi.n	800495a <_puts_r+0x9a>
 800494e:	89a3      	ldrh	r3, [r4, #12]
 8004950:	059b      	lsls	r3, r3, #22
 8004952:	d402      	bmi.n	800495a <_puts_r+0x9a>
 8004954:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004956:	f000 fc5d 	bl	8005214 <__retarget_lock_release_recursive>
 800495a:	4628      	mov	r0, r5
 800495c:	bd70      	pop	{r4, r5, r6, pc}
 800495e:	2b00      	cmp	r3, #0
 8004960:	da04      	bge.n	800496c <_puts_r+0xac>
 8004962:	69a2      	ldr	r2, [r4, #24]
 8004964:	429a      	cmp	r2, r3
 8004966:	dc06      	bgt.n	8004976 <_puts_r+0xb6>
 8004968:	290a      	cmp	r1, #10
 800496a:	d004      	beq.n	8004976 <_puts_r+0xb6>
 800496c:	6823      	ldr	r3, [r4, #0]
 800496e:	1c5a      	adds	r2, r3, #1
 8004970:	6022      	str	r2, [r4, #0]
 8004972:	7019      	strb	r1, [r3, #0]
 8004974:	e7c5      	b.n	8004902 <_puts_r+0x42>
 8004976:	4622      	mov	r2, r4
 8004978:	4628      	mov	r0, r5
 800497a:	f000 f993 	bl	8004ca4 <__swbuf_r>
 800497e:	3001      	adds	r0, #1
 8004980:	d1bf      	bne.n	8004902 <_puts_r+0x42>
 8004982:	e7df      	b.n	8004944 <_puts_r+0x84>
 8004984:	250a      	movs	r5, #10
 8004986:	6823      	ldr	r3, [r4, #0]
 8004988:	1c5a      	adds	r2, r3, #1
 800498a:	6022      	str	r2, [r4, #0]
 800498c:	701d      	strb	r5, [r3, #0]
 800498e:	e7db      	b.n	8004948 <_puts_r+0x88>
 8004990:	08006468 	.word	0x08006468
 8004994:	08006488 	.word	0x08006488
 8004998:	08006448 	.word	0x08006448

0800499c <puts>:
 800499c:	4b02      	ldr	r3, [pc, #8]	; (80049a8 <puts+0xc>)
 800499e:	4601      	mov	r1, r0
 80049a0:	6818      	ldr	r0, [r3, #0]
 80049a2:	f7ff bf8d 	b.w	80048c0 <_puts_r>
 80049a6:	bf00      	nop
 80049a8:	2000039c 	.word	0x2000039c

080049ac <srand>:
 80049ac:	b538      	push	{r3, r4, r5, lr}
 80049ae:	4b10      	ldr	r3, [pc, #64]	; (80049f0 <srand+0x44>)
 80049b0:	4604      	mov	r4, r0
 80049b2:	681d      	ldr	r5, [r3, #0]
 80049b4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80049b6:	b9b3      	cbnz	r3, 80049e6 <srand+0x3a>
 80049b8:	2018      	movs	r0, #24
 80049ba:	f000 fc91 	bl	80052e0 <malloc>
 80049be:	4602      	mov	r2, r0
 80049c0:	63a8      	str	r0, [r5, #56]	; 0x38
 80049c2:	b920      	cbnz	r0, 80049ce <srand+0x22>
 80049c4:	2142      	movs	r1, #66	; 0x42
 80049c6:	4b0b      	ldr	r3, [pc, #44]	; (80049f4 <srand+0x48>)
 80049c8:	480b      	ldr	r0, [pc, #44]	; (80049f8 <srand+0x4c>)
 80049ca:	f000 fa2b 	bl	8004e24 <__assert_func>
 80049ce:	490b      	ldr	r1, [pc, #44]	; (80049fc <srand+0x50>)
 80049d0:	4b0b      	ldr	r3, [pc, #44]	; (8004a00 <srand+0x54>)
 80049d2:	e9c0 1300 	strd	r1, r3, [r0]
 80049d6:	4b0b      	ldr	r3, [pc, #44]	; (8004a04 <srand+0x58>)
 80049d8:	2100      	movs	r1, #0
 80049da:	6083      	str	r3, [r0, #8]
 80049dc:	230b      	movs	r3, #11
 80049de:	8183      	strh	r3, [r0, #12]
 80049e0:	2001      	movs	r0, #1
 80049e2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80049e6:	2200      	movs	r2, #0
 80049e8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80049ea:	611c      	str	r4, [r3, #16]
 80049ec:	615a      	str	r2, [r3, #20]
 80049ee:	bd38      	pop	{r3, r4, r5, pc}
 80049f0:	2000039c 	.word	0x2000039c
 80049f4:	08006274 	.word	0x08006274
 80049f8:	0800628b 	.word	0x0800628b
 80049fc:	abcd330e 	.word	0xabcd330e
 8004a00:	e66d1234 	.word	0xe66d1234
 8004a04:	0005deec 	.word	0x0005deec

08004a08 <rand>:
 8004a08:	4b16      	ldr	r3, [pc, #88]	; (8004a64 <rand+0x5c>)
 8004a0a:	b510      	push	{r4, lr}
 8004a0c:	681c      	ldr	r4, [r3, #0]
 8004a0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004a10:	b9b3      	cbnz	r3, 8004a40 <rand+0x38>
 8004a12:	2018      	movs	r0, #24
 8004a14:	f000 fc64 	bl	80052e0 <malloc>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	63a0      	str	r0, [r4, #56]	; 0x38
 8004a1c:	b920      	cbnz	r0, 8004a28 <rand+0x20>
 8004a1e:	214e      	movs	r1, #78	; 0x4e
 8004a20:	4b11      	ldr	r3, [pc, #68]	; (8004a68 <rand+0x60>)
 8004a22:	4812      	ldr	r0, [pc, #72]	; (8004a6c <rand+0x64>)
 8004a24:	f000 f9fe 	bl	8004e24 <__assert_func>
 8004a28:	4911      	ldr	r1, [pc, #68]	; (8004a70 <rand+0x68>)
 8004a2a:	4b12      	ldr	r3, [pc, #72]	; (8004a74 <rand+0x6c>)
 8004a2c:	e9c0 1300 	strd	r1, r3, [r0]
 8004a30:	4b11      	ldr	r3, [pc, #68]	; (8004a78 <rand+0x70>)
 8004a32:	2100      	movs	r1, #0
 8004a34:	6083      	str	r3, [r0, #8]
 8004a36:	230b      	movs	r3, #11
 8004a38:	8183      	strh	r3, [r0, #12]
 8004a3a:	2001      	movs	r0, #1
 8004a3c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004a40:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8004a42:	4a0e      	ldr	r2, [pc, #56]	; (8004a7c <rand+0x74>)
 8004a44:	6920      	ldr	r0, [r4, #16]
 8004a46:	6963      	ldr	r3, [r4, #20]
 8004a48:	4342      	muls	r2, r0
 8004a4a:	490d      	ldr	r1, [pc, #52]	; (8004a80 <rand+0x78>)
 8004a4c:	fb01 2203 	mla	r2, r1, r3, r2
 8004a50:	fba0 0101 	umull	r0, r1, r0, r1
 8004a54:	1c43      	adds	r3, r0, #1
 8004a56:	eb42 0001 	adc.w	r0, r2, r1
 8004a5a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8004a5e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004a62:	bd10      	pop	{r4, pc}
 8004a64:	2000039c 	.word	0x2000039c
 8004a68:	08006274 	.word	0x08006274
 8004a6c:	0800628b 	.word	0x0800628b
 8004a70:	abcd330e 	.word	0xabcd330e
 8004a74:	e66d1234 	.word	0xe66d1234
 8004a78:	0005deec 	.word	0x0005deec
 8004a7c:	5851f42d 	.word	0x5851f42d
 8004a80:	4c957f2d 	.word	0x4c957f2d

08004a84 <strcat>:
 8004a84:	4602      	mov	r2, r0
 8004a86:	b510      	push	{r4, lr}
 8004a88:	7814      	ldrb	r4, [r2, #0]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	3201      	adds	r2, #1
 8004a8e:	2c00      	cmp	r4, #0
 8004a90:	d1fa      	bne.n	8004a88 <strcat+0x4>
 8004a92:	3b01      	subs	r3, #1
 8004a94:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a98:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a9c:	2a00      	cmp	r2, #0
 8004a9e:	d1f9      	bne.n	8004a94 <strcat+0x10>
 8004aa0:	bd10      	pop	{r4, pc}

08004aa2 <strcpy>:
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004aa8:	f803 2b01 	strb.w	r2, [r3], #1
 8004aac:	2a00      	cmp	r2, #0
 8004aae:	d1f9      	bne.n	8004aa4 <strcpy+0x2>
 8004ab0:	4770      	bx	lr

08004ab2 <strstr>:
 8004ab2:	780a      	ldrb	r2, [r1, #0]
 8004ab4:	b570      	push	{r4, r5, r6, lr}
 8004ab6:	b96a      	cbnz	r2, 8004ad4 <strstr+0x22>
 8004ab8:	bd70      	pop	{r4, r5, r6, pc}
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d109      	bne.n	8004ad2 <strstr+0x20>
 8004abe:	460c      	mov	r4, r1
 8004ac0:	4605      	mov	r5, r0
 8004ac2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d0f6      	beq.n	8004ab8 <strstr+0x6>
 8004aca:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004ace:	429e      	cmp	r6, r3
 8004ad0:	d0f7      	beq.n	8004ac2 <strstr+0x10>
 8004ad2:	3001      	adds	r0, #1
 8004ad4:	7803      	ldrb	r3, [r0, #0]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1ef      	bne.n	8004aba <strstr+0x8>
 8004ada:	4618      	mov	r0, r3
 8004adc:	e7ec      	b.n	8004ab8 <strstr+0x6>
	...

08004ae0 <_strtol_l.constprop.0>:
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ae6:	4680      	mov	r8, r0
 8004ae8:	d001      	beq.n	8004aee <_strtol_l.constprop.0+0xe>
 8004aea:	2b24      	cmp	r3, #36	; 0x24
 8004aec:	d906      	bls.n	8004afc <_strtol_l.constprop.0+0x1c>
 8004aee:	f7ff fe83 	bl	80047f8 <__errno>
 8004af2:	2316      	movs	r3, #22
 8004af4:	6003      	str	r3, [r0, #0]
 8004af6:	2000      	movs	r0, #0
 8004af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004afc:	460d      	mov	r5, r1
 8004afe:	4f35      	ldr	r7, [pc, #212]	; (8004bd4 <_strtol_l.constprop.0+0xf4>)
 8004b00:	4628      	mov	r0, r5
 8004b02:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004b06:	5de6      	ldrb	r6, [r4, r7]
 8004b08:	f016 0608 	ands.w	r6, r6, #8
 8004b0c:	d1f8      	bne.n	8004b00 <_strtol_l.constprop.0+0x20>
 8004b0e:	2c2d      	cmp	r4, #45	; 0x2d
 8004b10:	d12f      	bne.n	8004b72 <_strtol_l.constprop.0+0x92>
 8004b12:	2601      	movs	r6, #1
 8004b14:	782c      	ldrb	r4, [r5, #0]
 8004b16:	1c85      	adds	r5, r0, #2
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d057      	beq.n	8004bcc <_strtol_l.constprop.0+0xec>
 8004b1c:	2b10      	cmp	r3, #16
 8004b1e:	d109      	bne.n	8004b34 <_strtol_l.constprop.0+0x54>
 8004b20:	2c30      	cmp	r4, #48	; 0x30
 8004b22:	d107      	bne.n	8004b34 <_strtol_l.constprop.0+0x54>
 8004b24:	7828      	ldrb	r0, [r5, #0]
 8004b26:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004b2a:	2858      	cmp	r0, #88	; 0x58
 8004b2c:	d149      	bne.n	8004bc2 <_strtol_l.constprop.0+0xe2>
 8004b2e:	2310      	movs	r3, #16
 8004b30:	786c      	ldrb	r4, [r5, #1]
 8004b32:	3502      	adds	r5, #2
 8004b34:	2700      	movs	r7, #0
 8004b36:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8004b3a:	f10e 3eff 	add.w	lr, lr, #4294967295
 8004b3e:	fbbe f9f3 	udiv	r9, lr, r3
 8004b42:	4638      	mov	r0, r7
 8004b44:	fb03 ea19 	mls	sl, r3, r9, lr
 8004b48:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004b4c:	f1bc 0f09 	cmp.w	ip, #9
 8004b50:	d814      	bhi.n	8004b7c <_strtol_l.constprop.0+0x9c>
 8004b52:	4664      	mov	r4, ip
 8004b54:	42a3      	cmp	r3, r4
 8004b56:	dd22      	ble.n	8004b9e <_strtol_l.constprop.0+0xbe>
 8004b58:	2f00      	cmp	r7, #0
 8004b5a:	db1d      	blt.n	8004b98 <_strtol_l.constprop.0+0xb8>
 8004b5c:	4581      	cmp	r9, r0
 8004b5e:	d31b      	bcc.n	8004b98 <_strtol_l.constprop.0+0xb8>
 8004b60:	d101      	bne.n	8004b66 <_strtol_l.constprop.0+0x86>
 8004b62:	45a2      	cmp	sl, r4
 8004b64:	db18      	blt.n	8004b98 <_strtol_l.constprop.0+0xb8>
 8004b66:	2701      	movs	r7, #1
 8004b68:	fb00 4003 	mla	r0, r0, r3, r4
 8004b6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004b70:	e7ea      	b.n	8004b48 <_strtol_l.constprop.0+0x68>
 8004b72:	2c2b      	cmp	r4, #43	; 0x2b
 8004b74:	bf04      	itt	eq
 8004b76:	782c      	ldrbeq	r4, [r5, #0]
 8004b78:	1c85      	addeq	r5, r0, #2
 8004b7a:	e7cd      	b.n	8004b18 <_strtol_l.constprop.0+0x38>
 8004b7c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004b80:	f1bc 0f19 	cmp.w	ip, #25
 8004b84:	d801      	bhi.n	8004b8a <_strtol_l.constprop.0+0xaa>
 8004b86:	3c37      	subs	r4, #55	; 0x37
 8004b88:	e7e4      	b.n	8004b54 <_strtol_l.constprop.0+0x74>
 8004b8a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004b8e:	f1bc 0f19 	cmp.w	ip, #25
 8004b92:	d804      	bhi.n	8004b9e <_strtol_l.constprop.0+0xbe>
 8004b94:	3c57      	subs	r4, #87	; 0x57
 8004b96:	e7dd      	b.n	8004b54 <_strtol_l.constprop.0+0x74>
 8004b98:	f04f 37ff 	mov.w	r7, #4294967295
 8004b9c:	e7e6      	b.n	8004b6c <_strtol_l.constprop.0+0x8c>
 8004b9e:	2f00      	cmp	r7, #0
 8004ba0:	da07      	bge.n	8004bb2 <_strtol_l.constprop.0+0xd2>
 8004ba2:	2322      	movs	r3, #34	; 0x22
 8004ba4:	4670      	mov	r0, lr
 8004ba6:	f8c8 3000 	str.w	r3, [r8]
 8004baa:	2a00      	cmp	r2, #0
 8004bac:	d0a4      	beq.n	8004af8 <_strtol_l.constprop.0+0x18>
 8004bae:	1e69      	subs	r1, r5, #1
 8004bb0:	e005      	b.n	8004bbe <_strtol_l.constprop.0+0xde>
 8004bb2:	b106      	cbz	r6, 8004bb6 <_strtol_l.constprop.0+0xd6>
 8004bb4:	4240      	negs	r0, r0
 8004bb6:	2a00      	cmp	r2, #0
 8004bb8:	d09e      	beq.n	8004af8 <_strtol_l.constprop.0+0x18>
 8004bba:	2f00      	cmp	r7, #0
 8004bbc:	d1f7      	bne.n	8004bae <_strtol_l.constprop.0+0xce>
 8004bbe:	6011      	str	r1, [r2, #0]
 8004bc0:	e79a      	b.n	8004af8 <_strtol_l.constprop.0+0x18>
 8004bc2:	2430      	movs	r4, #48	; 0x30
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1b5      	bne.n	8004b34 <_strtol_l.constprop.0+0x54>
 8004bc8:	2308      	movs	r3, #8
 8004bca:	e7b3      	b.n	8004b34 <_strtol_l.constprop.0+0x54>
 8004bcc:	2c30      	cmp	r4, #48	; 0x30
 8004bce:	d0a9      	beq.n	8004b24 <_strtol_l.constprop.0+0x44>
 8004bd0:	230a      	movs	r3, #10
 8004bd2:	e7af      	b.n	8004b34 <_strtol_l.constprop.0+0x54>
 8004bd4:	08006348 	.word	0x08006348

08004bd8 <strtol>:
 8004bd8:	4613      	mov	r3, r2
 8004bda:	460a      	mov	r2, r1
 8004bdc:	4601      	mov	r1, r0
 8004bde:	4802      	ldr	r0, [pc, #8]	; (8004be8 <strtol+0x10>)
 8004be0:	6800      	ldr	r0, [r0, #0]
 8004be2:	f7ff bf7d 	b.w	8004ae0 <_strtol_l.constprop.0>
 8004be6:	bf00      	nop
 8004be8:	2000039c 	.word	0x2000039c

08004bec <time>:
 8004bec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004bee:	4b0b      	ldr	r3, [pc, #44]	; (8004c1c <time+0x30>)
 8004bf0:	4604      	mov	r4, r0
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	4669      	mov	r1, sp
 8004bf6:	6818      	ldr	r0, [r3, #0]
 8004bf8:	f000 faf8 	bl	80051ec <_gettimeofday_r>
 8004bfc:	2800      	cmp	r0, #0
 8004bfe:	da05      	bge.n	8004c0c <time+0x20>
 8004c00:	f04f 32ff 	mov.w	r2, #4294967295
 8004c04:	f04f 33ff 	mov.w	r3, #4294967295
 8004c08:	e9cd 2300 	strd	r2, r3, [sp]
 8004c0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004c10:	b10c      	cbz	r4, 8004c16 <time+0x2a>
 8004c12:	e9c4 0100 	strd	r0, r1, [r4]
 8004c16:	b004      	add	sp, #16
 8004c18:	bd10      	pop	{r4, pc}
 8004c1a:	bf00      	nop
 8004c1c:	2000039c 	.word	0x2000039c

08004c20 <__utoa>:
 8004c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c22:	b08b      	sub	sp, #44	; 0x2c
 8004c24:	4605      	mov	r5, r0
 8004c26:	460b      	mov	r3, r1
 8004c28:	466e      	mov	r6, sp
 8004c2a:	4c1d      	ldr	r4, [pc, #116]	; (8004ca0 <__utoa+0x80>)
 8004c2c:	f104 0c20 	add.w	ip, r4, #32
 8004c30:	4637      	mov	r7, r6
 8004c32:	6820      	ldr	r0, [r4, #0]
 8004c34:	6861      	ldr	r1, [r4, #4]
 8004c36:	3408      	adds	r4, #8
 8004c38:	c703      	stmia	r7!, {r0, r1}
 8004c3a:	4564      	cmp	r4, ip
 8004c3c:	463e      	mov	r6, r7
 8004c3e:	d1f7      	bne.n	8004c30 <__utoa+0x10>
 8004c40:	7921      	ldrb	r1, [r4, #4]
 8004c42:	6820      	ldr	r0, [r4, #0]
 8004c44:	7139      	strb	r1, [r7, #4]
 8004c46:	1e91      	subs	r1, r2, #2
 8004c48:	2922      	cmp	r1, #34	; 0x22
 8004c4a:	6038      	str	r0, [r7, #0]
 8004c4c:	f04f 0100 	mov.w	r1, #0
 8004c50:	d904      	bls.n	8004c5c <__utoa+0x3c>
 8004c52:	7019      	strb	r1, [r3, #0]
 8004c54:	460b      	mov	r3, r1
 8004c56:	4618      	mov	r0, r3
 8004c58:	b00b      	add	sp, #44	; 0x2c
 8004c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c5c:	1e58      	subs	r0, r3, #1
 8004c5e:	4684      	mov	ip, r0
 8004c60:	fbb5 f7f2 	udiv	r7, r5, r2
 8004c64:	fb02 5617 	mls	r6, r2, r7, r5
 8004c68:	3628      	adds	r6, #40	; 0x28
 8004c6a:	446e      	add	r6, sp
 8004c6c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8004c70:	460c      	mov	r4, r1
 8004c72:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8004c76:	462e      	mov	r6, r5
 8004c78:	42b2      	cmp	r2, r6
 8004c7a:	463d      	mov	r5, r7
 8004c7c:	f101 0101 	add.w	r1, r1, #1
 8004c80:	d9ee      	bls.n	8004c60 <__utoa+0x40>
 8004c82:	2200      	movs	r2, #0
 8004c84:	545a      	strb	r2, [r3, r1]
 8004c86:	1919      	adds	r1, r3, r4
 8004c88:	1aa5      	subs	r5, r4, r2
 8004c8a:	42aa      	cmp	r2, r5
 8004c8c:	dae3      	bge.n	8004c56 <__utoa+0x36>
 8004c8e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004c92:	780e      	ldrb	r6, [r1, #0]
 8004c94:	3201      	adds	r2, #1
 8004c96:	7006      	strb	r6, [r0, #0]
 8004c98:	f801 5901 	strb.w	r5, [r1], #-1
 8004c9c:	e7f4      	b.n	8004c88 <__utoa+0x68>
 8004c9e:	bf00      	nop
 8004ca0:	080062e6 	.word	0x080062e6

08004ca4 <__swbuf_r>:
 8004ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ca6:	460e      	mov	r6, r1
 8004ca8:	4614      	mov	r4, r2
 8004caa:	4605      	mov	r5, r0
 8004cac:	b118      	cbz	r0, 8004cb6 <__swbuf_r+0x12>
 8004cae:	6983      	ldr	r3, [r0, #24]
 8004cb0:	b90b      	cbnz	r3, 8004cb6 <__swbuf_r+0x12>
 8004cb2:	f000 f9eb 	bl	800508c <__sinit>
 8004cb6:	4b21      	ldr	r3, [pc, #132]	; (8004d3c <__swbuf_r+0x98>)
 8004cb8:	429c      	cmp	r4, r3
 8004cba:	d12b      	bne.n	8004d14 <__swbuf_r+0x70>
 8004cbc:	686c      	ldr	r4, [r5, #4]
 8004cbe:	69a3      	ldr	r3, [r4, #24]
 8004cc0:	60a3      	str	r3, [r4, #8]
 8004cc2:	89a3      	ldrh	r3, [r4, #12]
 8004cc4:	071a      	lsls	r2, r3, #28
 8004cc6:	d52f      	bpl.n	8004d28 <__swbuf_r+0x84>
 8004cc8:	6923      	ldr	r3, [r4, #16]
 8004cca:	b36b      	cbz	r3, 8004d28 <__swbuf_r+0x84>
 8004ccc:	6923      	ldr	r3, [r4, #16]
 8004cce:	6820      	ldr	r0, [r4, #0]
 8004cd0:	b2f6      	uxtb	r6, r6
 8004cd2:	1ac0      	subs	r0, r0, r3
 8004cd4:	6963      	ldr	r3, [r4, #20]
 8004cd6:	4637      	mov	r7, r6
 8004cd8:	4283      	cmp	r3, r0
 8004cda:	dc04      	bgt.n	8004ce6 <__swbuf_r+0x42>
 8004cdc:	4621      	mov	r1, r4
 8004cde:	4628      	mov	r0, r5
 8004ce0:	f000 f940 	bl	8004f64 <_fflush_r>
 8004ce4:	bb30      	cbnz	r0, 8004d34 <__swbuf_r+0x90>
 8004ce6:	68a3      	ldr	r3, [r4, #8]
 8004ce8:	3001      	adds	r0, #1
 8004cea:	3b01      	subs	r3, #1
 8004cec:	60a3      	str	r3, [r4, #8]
 8004cee:	6823      	ldr	r3, [r4, #0]
 8004cf0:	1c5a      	adds	r2, r3, #1
 8004cf2:	6022      	str	r2, [r4, #0]
 8004cf4:	701e      	strb	r6, [r3, #0]
 8004cf6:	6963      	ldr	r3, [r4, #20]
 8004cf8:	4283      	cmp	r3, r0
 8004cfa:	d004      	beq.n	8004d06 <__swbuf_r+0x62>
 8004cfc:	89a3      	ldrh	r3, [r4, #12]
 8004cfe:	07db      	lsls	r3, r3, #31
 8004d00:	d506      	bpl.n	8004d10 <__swbuf_r+0x6c>
 8004d02:	2e0a      	cmp	r6, #10
 8004d04:	d104      	bne.n	8004d10 <__swbuf_r+0x6c>
 8004d06:	4621      	mov	r1, r4
 8004d08:	4628      	mov	r0, r5
 8004d0a:	f000 f92b 	bl	8004f64 <_fflush_r>
 8004d0e:	b988      	cbnz	r0, 8004d34 <__swbuf_r+0x90>
 8004d10:	4638      	mov	r0, r7
 8004d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d14:	4b0a      	ldr	r3, [pc, #40]	; (8004d40 <__swbuf_r+0x9c>)
 8004d16:	429c      	cmp	r4, r3
 8004d18:	d101      	bne.n	8004d1e <__swbuf_r+0x7a>
 8004d1a:	68ac      	ldr	r4, [r5, #8]
 8004d1c:	e7cf      	b.n	8004cbe <__swbuf_r+0x1a>
 8004d1e:	4b09      	ldr	r3, [pc, #36]	; (8004d44 <__swbuf_r+0xa0>)
 8004d20:	429c      	cmp	r4, r3
 8004d22:	bf08      	it	eq
 8004d24:	68ec      	ldreq	r4, [r5, #12]
 8004d26:	e7ca      	b.n	8004cbe <__swbuf_r+0x1a>
 8004d28:	4621      	mov	r1, r4
 8004d2a:	4628      	mov	r0, r5
 8004d2c:	f000 f80c 	bl	8004d48 <__swsetup_r>
 8004d30:	2800      	cmp	r0, #0
 8004d32:	d0cb      	beq.n	8004ccc <__swbuf_r+0x28>
 8004d34:	f04f 37ff 	mov.w	r7, #4294967295
 8004d38:	e7ea      	b.n	8004d10 <__swbuf_r+0x6c>
 8004d3a:	bf00      	nop
 8004d3c:	08006468 	.word	0x08006468
 8004d40:	08006488 	.word	0x08006488
 8004d44:	08006448 	.word	0x08006448

08004d48 <__swsetup_r>:
 8004d48:	4b32      	ldr	r3, [pc, #200]	; (8004e14 <__swsetup_r+0xcc>)
 8004d4a:	b570      	push	{r4, r5, r6, lr}
 8004d4c:	681d      	ldr	r5, [r3, #0]
 8004d4e:	4606      	mov	r6, r0
 8004d50:	460c      	mov	r4, r1
 8004d52:	b125      	cbz	r5, 8004d5e <__swsetup_r+0x16>
 8004d54:	69ab      	ldr	r3, [r5, #24]
 8004d56:	b913      	cbnz	r3, 8004d5e <__swsetup_r+0x16>
 8004d58:	4628      	mov	r0, r5
 8004d5a:	f000 f997 	bl	800508c <__sinit>
 8004d5e:	4b2e      	ldr	r3, [pc, #184]	; (8004e18 <__swsetup_r+0xd0>)
 8004d60:	429c      	cmp	r4, r3
 8004d62:	d10f      	bne.n	8004d84 <__swsetup_r+0x3c>
 8004d64:	686c      	ldr	r4, [r5, #4]
 8004d66:	89a3      	ldrh	r3, [r4, #12]
 8004d68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d6c:	0719      	lsls	r1, r3, #28
 8004d6e:	d42c      	bmi.n	8004dca <__swsetup_r+0x82>
 8004d70:	06dd      	lsls	r5, r3, #27
 8004d72:	d411      	bmi.n	8004d98 <__swsetup_r+0x50>
 8004d74:	2309      	movs	r3, #9
 8004d76:	6033      	str	r3, [r6, #0]
 8004d78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d80:	81a3      	strh	r3, [r4, #12]
 8004d82:	e03e      	b.n	8004e02 <__swsetup_r+0xba>
 8004d84:	4b25      	ldr	r3, [pc, #148]	; (8004e1c <__swsetup_r+0xd4>)
 8004d86:	429c      	cmp	r4, r3
 8004d88:	d101      	bne.n	8004d8e <__swsetup_r+0x46>
 8004d8a:	68ac      	ldr	r4, [r5, #8]
 8004d8c:	e7eb      	b.n	8004d66 <__swsetup_r+0x1e>
 8004d8e:	4b24      	ldr	r3, [pc, #144]	; (8004e20 <__swsetup_r+0xd8>)
 8004d90:	429c      	cmp	r4, r3
 8004d92:	bf08      	it	eq
 8004d94:	68ec      	ldreq	r4, [r5, #12]
 8004d96:	e7e6      	b.n	8004d66 <__swsetup_r+0x1e>
 8004d98:	0758      	lsls	r0, r3, #29
 8004d9a:	d512      	bpl.n	8004dc2 <__swsetup_r+0x7a>
 8004d9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d9e:	b141      	cbz	r1, 8004db2 <__swsetup_r+0x6a>
 8004da0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004da4:	4299      	cmp	r1, r3
 8004da6:	d002      	beq.n	8004dae <__swsetup_r+0x66>
 8004da8:	4630      	mov	r0, r6
 8004daa:	f000 faa1 	bl	80052f0 <_free_r>
 8004dae:	2300      	movs	r3, #0
 8004db0:	6363      	str	r3, [r4, #52]	; 0x34
 8004db2:	89a3      	ldrh	r3, [r4, #12]
 8004db4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004db8:	81a3      	strh	r3, [r4, #12]
 8004dba:	2300      	movs	r3, #0
 8004dbc:	6063      	str	r3, [r4, #4]
 8004dbe:	6923      	ldr	r3, [r4, #16]
 8004dc0:	6023      	str	r3, [r4, #0]
 8004dc2:	89a3      	ldrh	r3, [r4, #12]
 8004dc4:	f043 0308 	orr.w	r3, r3, #8
 8004dc8:	81a3      	strh	r3, [r4, #12]
 8004dca:	6923      	ldr	r3, [r4, #16]
 8004dcc:	b94b      	cbnz	r3, 8004de2 <__swsetup_r+0x9a>
 8004dce:	89a3      	ldrh	r3, [r4, #12]
 8004dd0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004dd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dd8:	d003      	beq.n	8004de2 <__swsetup_r+0x9a>
 8004dda:	4621      	mov	r1, r4
 8004ddc:	4630      	mov	r0, r6
 8004dde:	f000 fa3f 	bl	8005260 <__smakebuf_r>
 8004de2:	89a0      	ldrh	r0, [r4, #12]
 8004de4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004de8:	f010 0301 	ands.w	r3, r0, #1
 8004dec:	d00a      	beq.n	8004e04 <__swsetup_r+0xbc>
 8004dee:	2300      	movs	r3, #0
 8004df0:	60a3      	str	r3, [r4, #8]
 8004df2:	6963      	ldr	r3, [r4, #20]
 8004df4:	425b      	negs	r3, r3
 8004df6:	61a3      	str	r3, [r4, #24]
 8004df8:	6923      	ldr	r3, [r4, #16]
 8004dfa:	b943      	cbnz	r3, 8004e0e <__swsetup_r+0xc6>
 8004dfc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004e00:	d1ba      	bne.n	8004d78 <__swsetup_r+0x30>
 8004e02:	bd70      	pop	{r4, r5, r6, pc}
 8004e04:	0781      	lsls	r1, r0, #30
 8004e06:	bf58      	it	pl
 8004e08:	6963      	ldrpl	r3, [r4, #20]
 8004e0a:	60a3      	str	r3, [r4, #8]
 8004e0c:	e7f4      	b.n	8004df8 <__swsetup_r+0xb0>
 8004e0e:	2000      	movs	r0, #0
 8004e10:	e7f7      	b.n	8004e02 <__swsetup_r+0xba>
 8004e12:	bf00      	nop
 8004e14:	2000039c 	.word	0x2000039c
 8004e18:	08006468 	.word	0x08006468
 8004e1c:	08006488 	.word	0x08006488
 8004e20:	08006448 	.word	0x08006448

08004e24 <__assert_func>:
 8004e24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004e26:	4614      	mov	r4, r2
 8004e28:	461a      	mov	r2, r3
 8004e2a:	4b09      	ldr	r3, [pc, #36]	; (8004e50 <__assert_func+0x2c>)
 8004e2c:	4605      	mov	r5, r0
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68d8      	ldr	r0, [r3, #12]
 8004e32:	b14c      	cbz	r4, 8004e48 <__assert_func+0x24>
 8004e34:	4b07      	ldr	r3, [pc, #28]	; (8004e54 <__assert_func+0x30>)
 8004e36:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004e3a:	9100      	str	r1, [sp, #0]
 8004e3c:	462b      	mov	r3, r5
 8004e3e:	4906      	ldr	r1, [pc, #24]	; (8004e58 <__assert_func+0x34>)
 8004e40:	f000 f9a2 	bl	8005188 <fiprintf>
 8004e44:	f000 fe84 	bl	8005b50 <abort>
 8004e48:	4b04      	ldr	r3, [pc, #16]	; (8004e5c <__assert_func+0x38>)
 8004e4a:	461c      	mov	r4, r3
 8004e4c:	e7f3      	b.n	8004e36 <__assert_func+0x12>
 8004e4e:	bf00      	nop
 8004e50:	2000039c 	.word	0x2000039c
 8004e54:	0800630b 	.word	0x0800630b
 8004e58:	08006318 	.word	0x08006318
 8004e5c:	08006346 	.word	0x08006346

08004e60 <__sflush_r>:
 8004e60:	898a      	ldrh	r2, [r1, #12]
 8004e62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e64:	4605      	mov	r5, r0
 8004e66:	0710      	lsls	r0, r2, #28
 8004e68:	460c      	mov	r4, r1
 8004e6a:	d457      	bmi.n	8004f1c <__sflush_r+0xbc>
 8004e6c:	684b      	ldr	r3, [r1, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	dc04      	bgt.n	8004e7c <__sflush_r+0x1c>
 8004e72:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	dc01      	bgt.n	8004e7c <__sflush_r+0x1c>
 8004e78:	2000      	movs	r0, #0
 8004e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e7e:	2e00      	cmp	r6, #0
 8004e80:	d0fa      	beq.n	8004e78 <__sflush_r+0x18>
 8004e82:	2300      	movs	r3, #0
 8004e84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004e88:	682f      	ldr	r7, [r5, #0]
 8004e8a:	602b      	str	r3, [r5, #0]
 8004e8c:	d032      	beq.n	8004ef4 <__sflush_r+0x94>
 8004e8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e90:	89a3      	ldrh	r3, [r4, #12]
 8004e92:	075a      	lsls	r2, r3, #29
 8004e94:	d505      	bpl.n	8004ea2 <__sflush_r+0x42>
 8004e96:	6863      	ldr	r3, [r4, #4]
 8004e98:	1ac0      	subs	r0, r0, r3
 8004e9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e9c:	b10b      	cbz	r3, 8004ea2 <__sflush_r+0x42>
 8004e9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ea0:	1ac0      	subs	r0, r0, r3
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ea8:	4628      	mov	r0, r5
 8004eaa:	6a21      	ldr	r1, [r4, #32]
 8004eac:	47b0      	blx	r6
 8004eae:	1c43      	adds	r3, r0, #1
 8004eb0:	89a3      	ldrh	r3, [r4, #12]
 8004eb2:	d106      	bne.n	8004ec2 <__sflush_r+0x62>
 8004eb4:	6829      	ldr	r1, [r5, #0]
 8004eb6:	291d      	cmp	r1, #29
 8004eb8:	d82c      	bhi.n	8004f14 <__sflush_r+0xb4>
 8004eba:	4a29      	ldr	r2, [pc, #164]	; (8004f60 <__sflush_r+0x100>)
 8004ebc:	40ca      	lsrs	r2, r1
 8004ebe:	07d6      	lsls	r6, r2, #31
 8004ec0:	d528      	bpl.n	8004f14 <__sflush_r+0xb4>
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	6062      	str	r2, [r4, #4]
 8004ec6:	6922      	ldr	r2, [r4, #16]
 8004ec8:	04d9      	lsls	r1, r3, #19
 8004eca:	6022      	str	r2, [r4, #0]
 8004ecc:	d504      	bpl.n	8004ed8 <__sflush_r+0x78>
 8004ece:	1c42      	adds	r2, r0, #1
 8004ed0:	d101      	bne.n	8004ed6 <__sflush_r+0x76>
 8004ed2:	682b      	ldr	r3, [r5, #0]
 8004ed4:	b903      	cbnz	r3, 8004ed8 <__sflush_r+0x78>
 8004ed6:	6560      	str	r0, [r4, #84]	; 0x54
 8004ed8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004eda:	602f      	str	r7, [r5, #0]
 8004edc:	2900      	cmp	r1, #0
 8004ede:	d0cb      	beq.n	8004e78 <__sflush_r+0x18>
 8004ee0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ee4:	4299      	cmp	r1, r3
 8004ee6:	d002      	beq.n	8004eee <__sflush_r+0x8e>
 8004ee8:	4628      	mov	r0, r5
 8004eea:	f000 fa01 	bl	80052f0 <_free_r>
 8004eee:	2000      	movs	r0, #0
 8004ef0:	6360      	str	r0, [r4, #52]	; 0x34
 8004ef2:	e7c2      	b.n	8004e7a <__sflush_r+0x1a>
 8004ef4:	6a21      	ldr	r1, [r4, #32]
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	4628      	mov	r0, r5
 8004efa:	47b0      	blx	r6
 8004efc:	1c41      	adds	r1, r0, #1
 8004efe:	d1c7      	bne.n	8004e90 <__sflush_r+0x30>
 8004f00:	682b      	ldr	r3, [r5, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d0c4      	beq.n	8004e90 <__sflush_r+0x30>
 8004f06:	2b1d      	cmp	r3, #29
 8004f08:	d001      	beq.n	8004f0e <__sflush_r+0xae>
 8004f0a:	2b16      	cmp	r3, #22
 8004f0c:	d101      	bne.n	8004f12 <__sflush_r+0xb2>
 8004f0e:	602f      	str	r7, [r5, #0]
 8004f10:	e7b2      	b.n	8004e78 <__sflush_r+0x18>
 8004f12:	89a3      	ldrh	r3, [r4, #12]
 8004f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f18:	81a3      	strh	r3, [r4, #12]
 8004f1a:	e7ae      	b.n	8004e7a <__sflush_r+0x1a>
 8004f1c:	690f      	ldr	r7, [r1, #16]
 8004f1e:	2f00      	cmp	r7, #0
 8004f20:	d0aa      	beq.n	8004e78 <__sflush_r+0x18>
 8004f22:	0793      	lsls	r3, r2, #30
 8004f24:	bf18      	it	ne
 8004f26:	2300      	movne	r3, #0
 8004f28:	680e      	ldr	r6, [r1, #0]
 8004f2a:	bf08      	it	eq
 8004f2c:	694b      	ldreq	r3, [r1, #20]
 8004f2e:	1bf6      	subs	r6, r6, r7
 8004f30:	600f      	str	r7, [r1, #0]
 8004f32:	608b      	str	r3, [r1, #8]
 8004f34:	2e00      	cmp	r6, #0
 8004f36:	dd9f      	ble.n	8004e78 <__sflush_r+0x18>
 8004f38:	4633      	mov	r3, r6
 8004f3a:	463a      	mov	r2, r7
 8004f3c:	4628      	mov	r0, r5
 8004f3e:	6a21      	ldr	r1, [r4, #32]
 8004f40:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004f44:	47e0      	blx	ip
 8004f46:	2800      	cmp	r0, #0
 8004f48:	dc06      	bgt.n	8004f58 <__sflush_r+0xf8>
 8004f4a:	89a3      	ldrh	r3, [r4, #12]
 8004f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f54:	81a3      	strh	r3, [r4, #12]
 8004f56:	e790      	b.n	8004e7a <__sflush_r+0x1a>
 8004f58:	4407      	add	r7, r0
 8004f5a:	1a36      	subs	r6, r6, r0
 8004f5c:	e7ea      	b.n	8004f34 <__sflush_r+0xd4>
 8004f5e:	bf00      	nop
 8004f60:	20400001 	.word	0x20400001

08004f64 <_fflush_r>:
 8004f64:	b538      	push	{r3, r4, r5, lr}
 8004f66:	690b      	ldr	r3, [r1, #16]
 8004f68:	4605      	mov	r5, r0
 8004f6a:	460c      	mov	r4, r1
 8004f6c:	b913      	cbnz	r3, 8004f74 <_fflush_r+0x10>
 8004f6e:	2500      	movs	r5, #0
 8004f70:	4628      	mov	r0, r5
 8004f72:	bd38      	pop	{r3, r4, r5, pc}
 8004f74:	b118      	cbz	r0, 8004f7e <_fflush_r+0x1a>
 8004f76:	6983      	ldr	r3, [r0, #24]
 8004f78:	b90b      	cbnz	r3, 8004f7e <_fflush_r+0x1a>
 8004f7a:	f000 f887 	bl	800508c <__sinit>
 8004f7e:	4b14      	ldr	r3, [pc, #80]	; (8004fd0 <_fflush_r+0x6c>)
 8004f80:	429c      	cmp	r4, r3
 8004f82:	d11b      	bne.n	8004fbc <_fflush_r+0x58>
 8004f84:	686c      	ldr	r4, [r5, #4]
 8004f86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d0ef      	beq.n	8004f6e <_fflush_r+0xa>
 8004f8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004f90:	07d0      	lsls	r0, r2, #31
 8004f92:	d404      	bmi.n	8004f9e <_fflush_r+0x3a>
 8004f94:	0599      	lsls	r1, r3, #22
 8004f96:	d402      	bmi.n	8004f9e <_fflush_r+0x3a>
 8004f98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f9a:	f000 f93a 	bl	8005212 <__retarget_lock_acquire_recursive>
 8004f9e:	4628      	mov	r0, r5
 8004fa0:	4621      	mov	r1, r4
 8004fa2:	f7ff ff5d 	bl	8004e60 <__sflush_r>
 8004fa6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004fa8:	4605      	mov	r5, r0
 8004faa:	07da      	lsls	r2, r3, #31
 8004fac:	d4e0      	bmi.n	8004f70 <_fflush_r+0xc>
 8004fae:	89a3      	ldrh	r3, [r4, #12]
 8004fb0:	059b      	lsls	r3, r3, #22
 8004fb2:	d4dd      	bmi.n	8004f70 <_fflush_r+0xc>
 8004fb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fb6:	f000 f92d 	bl	8005214 <__retarget_lock_release_recursive>
 8004fba:	e7d9      	b.n	8004f70 <_fflush_r+0xc>
 8004fbc:	4b05      	ldr	r3, [pc, #20]	; (8004fd4 <_fflush_r+0x70>)
 8004fbe:	429c      	cmp	r4, r3
 8004fc0:	d101      	bne.n	8004fc6 <_fflush_r+0x62>
 8004fc2:	68ac      	ldr	r4, [r5, #8]
 8004fc4:	e7df      	b.n	8004f86 <_fflush_r+0x22>
 8004fc6:	4b04      	ldr	r3, [pc, #16]	; (8004fd8 <_fflush_r+0x74>)
 8004fc8:	429c      	cmp	r4, r3
 8004fca:	bf08      	it	eq
 8004fcc:	68ec      	ldreq	r4, [r5, #12]
 8004fce:	e7da      	b.n	8004f86 <_fflush_r+0x22>
 8004fd0:	08006468 	.word	0x08006468
 8004fd4:	08006488 	.word	0x08006488
 8004fd8:	08006448 	.word	0x08006448

08004fdc <std>:
 8004fdc:	2300      	movs	r3, #0
 8004fde:	b510      	push	{r4, lr}
 8004fe0:	4604      	mov	r4, r0
 8004fe2:	e9c0 3300 	strd	r3, r3, [r0]
 8004fe6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004fea:	6083      	str	r3, [r0, #8]
 8004fec:	8181      	strh	r1, [r0, #12]
 8004fee:	6643      	str	r3, [r0, #100]	; 0x64
 8004ff0:	81c2      	strh	r2, [r0, #14]
 8004ff2:	6183      	str	r3, [r0, #24]
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	2208      	movs	r2, #8
 8004ff8:	305c      	adds	r0, #92	; 0x5c
 8004ffa:	f7ff fc41 	bl	8004880 <memset>
 8004ffe:	4b05      	ldr	r3, [pc, #20]	; (8005014 <std+0x38>)
 8005000:	6224      	str	r4, [r4, #32]
 8005002:	6263      	str	r3, [r4, #36]	; 0x24
 8005004:	4b04      	ldr	r3, [pc, #16]	; (8005018 <std+0x3c>)
 8005006:	62a3      	str	r3, [r4, #40]	; 0x28
 8005008:	4b04      	ldr	r3, [pc, #16]	; (800501c <std+0x40>)
 800500a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800500c:	4b04      	ldr	r3, [pc, #16]	; (8005020 <std+0x44>)
 800500e:	6323      	str	r3, [r4, #48]	; 0x30
 8005010:	bd10      	pop	{r4, pc}
 8005012:	bf00      	nop
 8005014:	08005aa5 	.word	0x08005aa5
 8005018:	08005ac7 	.word	0x08005ac7
 800501c:	08005aff 	.word	0x08005aff
 8005020:	08005b23 	.word	0x08005b23

08005024 <_cleanup_r>:
 8005024:	4901      	ldr	r1, [pc, #4]	; (800502c <_cleanup_r+0x8>)
 8005026:	f000 b8c1 	b.w	80051ac <_fwalk_reent>
 800502a:	bf00      	nop
 800502c:	08004f65 	.word	0x08004f65

08005030 <__sfmoreglue>:
 8005030:	2268      	movs	r2, #104	; 0x68
 8005032:	b570      	push	{r4, r5, r6, lr}
 8005034:	1e4d      	subs	r5, r1, #1
 8005036:	4355      	muls	r5, r2
 8005038:	460e      	mov	r6, r1
 800503a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800503e:	f000 f9bf 	bl	80053c0 <_malloc_r>
 8005042:	4604      	mov	r4, r0
 8005044:	b140      	cbz	r0, 8005058 <__sfmoreglue+0x28>
 8005046:	2100      	movs	r1, #0
 8005048:	e9c0 1600 	strd	r1, r6, [r0]
 800504c:	300c      	adds	r0, #12
 800504e:	60a0      	str	r0, [r4, #8]
 8005050:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005054:	f7ff fc14 	bl	8004880 <memset>
 8005058:	4620      	mov	r0, r4
 800505a:	bd70      	pop	{r4, r5, r6, pc}

0800505c <__sfp_lock_acquire>:
 800505c:	4801      	ldr	r0, [pc, #4]	; (8005064 <__sfp_lock_acquire+0x8>)
 800505e:	f000 b8d8 	b.w	8005212 <__retarget_lock_acquire_recursive>
 8005062:	bf00      	nop
 8005064:	20002c49 	.word	0x20002c49

08005068 <__sfp_lock_release>:
 8005068:	4801      	ldr	r0, [pc, #4]	; (8005070 <__sfp_lock_release+0x8>)
 800506a:	f000 b8d3 	b.w	8005214 <__retarget_lock_release_recursive>
 800506e:	bf00      	nop
 8005070:	20002c49 	.word	0x20002c49

08005074 <__sinit_lock_acquire>:
 8005074:	4801      	ldr	r0, [pc, #4]	; (800507c <__sinit_lock_acquire+0x8>)
 8005076:	f000 b8cc 	b.w	8005212 <__retarget_lock_acquire_recursive>
 800507a:	bf00      	nop
 800507c:	20002c4a 	.word	0x20002c4a

08005080 <__sinit_lock_release>:
 8005080:	4801      	ldr	r0, [pc, #4]	; (8005088 <__sinit_lock_release+0x8>)
 8005082:	f000 b8c7 	b.w	8005214 <__retarget_lock_release_recursive>
 8005086:	bf00      	nop
 8005088:	20002c4a 	.word	0x20002c4a

0800508c <__sinit>:
 800508c:	b510      	push	{r4, lr}
 800508e:	4604      	mov	r4, r0
 8005090:	f7ff fff0 	bl	8005074 <__sinit_lock_acquire>
 8005094:	69a3      	ldr	r3, [r4, #24]
 8005096:	b11b      	cbz	r3, 80050a0 <__sinit+0x14>
 8005098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800509c:	f7ff bff0 	b.w	8005080 <__sinit_lock_release>
 80050a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80050a4:	6523      	str	r3, [r4, #80]	; 0x50
 80050a6:	4b13      	ldr	r3, [pc, #76]	; (80050f4 <__sinit+0x68>)
 80050a8:	4a13      	ldr	r2, [pc, #76]	; (80050f8 <__sinit+0x6c>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80050ae:	42a3      	cmp	r3, r4
 80050b0:	bf08      	it	eq
 80050b2:	2301      	moveq	r3, #1
 80050b4:	4620      	mov	r0, r4
 80050b6:	bf08      	it	eq
 80050b8:	61a3      	streq	r3, [r4, #24]
 80050ba:	f000 f81f 	bl	80050fc <__sfp>
 80050be:	6060      	str	r0, [r4, #4]
 80050c0:	4620      	mov	r0, r4
 80050c2:	f000 f81b 	bl	80050fc <__sfp>
 80050c6:	60a0      	str	r0, [r4, #8]
 80050c8:	4620      	mov	r0, r4
 80050ca:	f000 f817 	bl	80050fc <__sfp>
 80050ce:	2200      	movs	r2, #0
 80050d0:	2104      	movs	r1, #4
 80050d2:	60e0      	str	r0, [r4, #12]
 80050d4:	6860      	ldr	r0, [r4, #4]
 80050d6:	f7ff ff81 	bl	8004fdc <std>
 80050da:	2201      	movs	r2, #1
 80050dc:	2109      	movs	r1, #9
 80050de:	68a0      	ldr	r0, [r4, #8]
 80050e0:	f7ff ff7c 	bl	8004fdc <std>
 80050e4:	2202      	movs	r2, #2
 80050e6:	2112      	movs	r1, #18
 80050e8:	68e0      	ldr	r0, [r4, #12]
 80050ea:	f7ff ff77 	bl	8004fdc <std>
 80050ee:	2301      	movs	r3, #1
 80050f0:	61a3      	str	r3, [r4, #24]
 80050f2:	e7d1      	b.n	8005098 <__sinit+0xc>
 80050f4:	08006270 	.word	0x08006270
 80050f8:	08005025 	.word	0x08005025

080050fc <__sfp>:
 80050fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050fe:	4607      	mov	r7, r0
 8005100:	f7ff ffac 	bl	800505c <__sfp_lock_acquire>
 8005104:	4b1e      	ldr	r3, [pc, #120]	; (8005180 <__sfp+0x84>)
 8005106:	681e      	ldr	r6, [r3, #0]
 8005108:	69b3      	ldr	r3, [r6, #24]
 800510a:	b913      	cbnz	r3, 8005112 <__sfp+0x16>
 800510c:	4630      	mov	r0, r6
 800510e:	f7ff ffbd 	bl	800508c <__sinit>
 8005112:	3648      	adds	r6, #72	; 0x48
 8005114:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005118:	3b01      	subs	r3, #1
 800511a:	d503      	bpl.n	8005124 <__sfp+0x28>
 800511c:	6833      	ldr	r3, [r6, #0]
 800511e:	b30b      	cbz	r3, 8005164 <__sfp+0x68>
 8005120:	6836      	ldr	r6, [r6, #0]
 8005122:	e7f7      	b.n	8005114 <__sfp+0x18>
 8005124:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005128:	b9d5      	cbnz	r5, 8005160 <__sfp+0x64>
 800512a:	4b16      	ldr	r3, [pc, #88]	; (8005184 <__sfp+0x88>)
 800512c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005130:	60e3      	str	r3, [r4, #12]
 8005132:	6665      	str	r5, [r4, #100]	; 0x64
 8005134:	f000 f86c 	bl	8005210 <__retarget_lock_init_recursive>
 8005138:	f7ff ff96 	bl	8005068 <__sfp_lock_release>
 800513c:	2208      	movs	r2, #8
 800513e:	4629      	mov	r1, r5
 8005140:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005144:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005148:	6025      	str	r5, [r4, #0]
 800514a:	61a5      	str	r5, [r4, #24]
 800514c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005150:	f7ff fb96 	bl	8004880 <memset>
 8005154:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005158:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800515c:	4620      	mov	r0, r4
 800515e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005160:	3468      	adds	r4, #104	; 0x68
 8005162:	e7d9      	b.n	8005118 <__sfp+0x1c>
 8005164:	2104      	movs	r1, #4
 8005166:	4638      	mov	r0, r7
 8005168:	f7ff ff62 	bl	8005030 <__sfmoreglue>
 800516c:	4604      	mov	r4, r0
 800516e:	6030      	str	r0, [r6, #0]
 8005170:	2800      	cmp	r0, #0
 8005172:	d1d5      	bne.n	8005120 <__sfp+0x24>
 8005174:	f7ff ff78 	bl	8005068 <__sfp_lock_release>
 8005178:	230c      	movs	r3, #12
 800517a:	603b      	str	r3, [r7, #0]
 800517c:	e7ee      	b.n	800515c <__sfp+0x60>
 800517e:	bf00      	nop
 8005180:	08006270 	.word	0x08006270
 8005184:	ffff0001 	.word	0xffff0001

08005188 <fiprintf>:
 8005188:	b40e      	push	{r1, r2, r3}
 800518a:	b503      	push	{r0, r1, lr}
 800518c:	4601      	mov	r1, r0
 800518e:	ab03      	add	r3, sp, #12
 8005190:	4805      	ldr	r0, [pc, #20]	; (80051a8 <fiprintf+0x20>)
 8005192:	f853 2b04 	ldr.w	r2, [r3], #4
 8005196:	6800      	ldr	r0, [r0, #0]
 8005198:	9301      	str	r3, [sp, #4]
 800519a:	f000 f9ad 	bl	80054f8 <_vfiprintf_r>
 800519e:	b002      	add	sp, #8
 80051a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80051a4:	b003      	add	sp, #12
 80051a6:	4770      	bx	lr
 80051a8:	2000039c 	.word	0x2000039c

080051ac <_fwalk_reent>:
 80051ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051b0:	4606      	mov	r6, r0
 80051b2:	4688      	mov	r8, r1
 80051b4:	2700      	movs	r7, #0
 80051b6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80051ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051be:	f1b9 0901 	subs.w	r9, r9, #1
 80051c2:	d505      	bpl.n	80051d0 <_fwalk_reent+0x24>
 80051c4:	6824      	ldr	r4, [r4, #0]
 80051c6:	2c00      	cmp	r4, #0
 80051c8:	d1f7      	bne.n	80051ba <_fwalk_reent+0xe>
 80051ca:	4638      	mov	r0, r7
 80051cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051d0:	89ab      	ldrh	r3, [r5, #12]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d907      	bls.n	80051e6 <_fwalk_reent+0x3a>
 80051d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051da:	3301      	adds	r3, #1
 80051dc:	d003      	beq.n	80051e6 <_fwalk_reent+0x3a>
 80051de:	4629      	mov	r1, r5
 80051e0:	4630      	mov	r0, r6
 80051e2:	47c0      	blx	r8
 80051e4:	4307      	orrs	r7, r0
 80051e6:	3568      	adds	r5, #104	; 0x68
 80051e8:	e7e9      	b.n	80051be <_fwalk_reent+0x12>
	...

080051ec <_gettimeofday_r>:
 80051ec:	b538      	push	{r3, r4, r5, lr}
 80051ee:	2300      	movs	r3, #0
 80051f0:	4d06      	ldr	r5, [pc, #24]	; (800520c <_gettimeofday_r+0x20>)
 80051f2:	4604      	mov	r4, r0
 80051f4:	4608      	mov	r0, r1
 80051f6:	4611      	mov	r1, r2
 80051f8:	602b      	str	r3, [r5, #0]
 80051fa:	f000 fd65 	bl	8005cc8 <_gettimeofday>
 80051fe:	1c43      	adds	r3, r0, #1
 8005200:	d102      	bne.n	8005208 <_gettimeofday_r+0x1c>
 8005202:	682b      	ldr	r3, [r5, #0]
 8005204:	b103      	cbz	r3, 8005208 <_gettimeofday_r+0x1c>
 8005206:	6023      	str	r3, [r4, #0]
 8005208:	bd38      	pop	{r3, r4, r5, pc}
 800520a:	bf00      	nop
 800520c:	20002c54 	.word	0x20002c54

08005210 <__retarget_lock_init_recursive>:
 8005210:	4770      	bx	lr

08005212 <__retarget_lock_acquire_recursive>:
 8005212:	4770      	bx	lr

08005214 <__retarget_lock_release_recursive>:
 8005214:	4770      	bx	lr

08005216 <__swhatbuf_r>:
 8005216:	b570      	push	{r4, r5, r6, lr}
 8005218:	460e      	mov	r6, r1
 800521a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800521e:	4614      	mov	r4, r2
 8005220:	2900      	cmp	r1, #0
 8005222:	461d      	mov	r5, r3
 8005224:	b096      	sub	sp, #88	; 0x58
 8005226:	da08      	bge.n	800523a <__swhatbuf_r+0x24>
 8005228:	2200      	movs	r2, #0
 800522a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800522e:	602a      	str	r2, [r5, #0]
 8005230:	061a      	lsls	r2, r3, #24
 8005232:	d410      	bmi.n	8005256 <__swhatbuf_r+0x40>
 8005234:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005238:	e00e      	b.n	8005258 <__swhatbuf_r+0x42>
 800523a:	466a      	mov	r2, sp
 800523c:	f000 fca0 	bl	8005b80 <_fstat_r>
 8005240:	2800      	cmp	r0, #0
 8005242:	dbf1      	blt.n	8005228 <__swhatbuf_r+0x12>
 8005244:	9a01      	ldr	r2, [sp, #4]
 8005246:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800524a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800524e:	425a      	negs	r2, r3
 8005250:	415a      	adcs	r2, r3
 8005252:	602a      	str	r2, [r5, #0]
 8005254:	e7ee      	b.n	8005234 <__swhatbuf_r+0x1e>
 8005256:	2340      	movs	r3, #64	; 0x40
 8005258:	2000      	movs	r0, #0
 800525a:	6023      	str	r3, [r4, #0]
 800525c:	b016      	add	sp, #88	; 0x58
 800525e:	bd70      	pop	{r4, r5, r6, pc}

08005260 <__smakebuf_r>:
 8005260:	898b      	ldrh	r3, [r1, #12]
 8005262:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005264:	079d      	lsls	r5, r3, #30
 8005266:	4606      	mov	r6, r0
 8005268:	460c      	mov	r4, r1
 800526a:	d507      	bpl.n	800527c <__smakebuf_r+0x1c>
 800526c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005270:	6023      	str	r3, [r4, #0]
 8005272:	6123      	str	r3, [r4, #16]
 8005274:	2301      	movs	r3, #1
 8005276:	6163      	str	r3, [r4, #20]
 8005278:	b002      	add	sp, #8
 800527a:	bd70      	pop	{r4, r5, r6, pc}
 800527c:	466a      	mov	r2, sp
 800527e:	ab01      	add	r3, sp, #4
 8005280:	f7ff ffc9 	bl	8005216 <__swhatbuf_r>
 8005284:	9900      	ldr	r1, [sp, #0]
 8005286:	4605      	mov	r5, r0
 8005288:	4630      	mov	r0, r6
 800528a:	f000 f899 	bl	80053c0 <_malloc_r>
 800528e:	b948      	cbnz	r0, 80052a4 <__smakebuf_r+0x44>
 8005290:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005294:	059a      	lsls	r2, r3, #22
 8005296:	d4ef      	bmi.n	8005278 <__smakebuf_r+0x18>
 8005298:	f023 0303 	bic.w	r3, r3, #3
 800529c:	f043 0302 	orr.w	r3, r3, #2
 80052a0:	81a3      	strh	r3, [r4, #12]
 80052a2:	e7e3      	b.n	800526c <__smakebuf_r+0xc>
 80052a4:	4b0d      	ldr	r3, [pc, #52]	; (80052dc <__smakebuf_r+0x7c>)
 80052a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80052a8:	89a3      	ldrh	r3, [r4, #12]
 80052aa:	6020      	str	r0, [r4, #0]
 80052ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052b0:	81a3      	strh	r3, [r4, #12]
 80052b2:	9b00      	ldr	r3, [sp, #0]
 80052b4:	6120      	str	r0, [r4, #16]
 80052b6:	6163      	str	r3, [r4, #20]
 80052b8:	9b01      	ldr	r3, [sp, #4]
 80052ba:	b15b      	cbz	r3, 80052d4 <__smakebuf_r+0x74>
 80052bc:	4630      	mov	r0, r6
 80052be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052c2:	f000 fc6f 	bl	8005ba4 <_isatty_r>
 80052c6:	b128      	cbz	r0, 80052d4 <__smakebuf_r+0x74>
 80052c8:	89a3      	ldrh	r3, [r4, #12]
 80052ca:	f023 0303 	bic.w	r3, r3, #3
 80052ce:	f043 0301 	orr.w	r3, r3, #1
 80052d2:	81a3      	strh	r3, [r4, #12]
 80052d4:	89a0      	ldrh	r0, [r4, #12]
 80052d6:	4305      	orrs	r5, r0
 80052d8:	81a5      	strh	r5, [r4, #12]
 80052da:	e7cd      	b.n	8005278 <__smakebuf_r+0x18>
 80052dc:	08005025 	.word	0x08005025

080052e0 <malloc>:
 80052e0:	4b02      	ldr	r3, [pc, #8]	; (80052ec <malloc+0xc>)
 80052e2:	4601      	mov	r1, r0
 80052e4:	6818      	ldr	r0, [r3, #0]
 80052e6:	f000 b86b 	b.w	80053c0 <_malloc_r>
 80052ea:	bf00      	nop
 80052ec:	2000039c 	.word	0x2000039c

080052f0 <_free_r>:
 80052f0:	b538      	push	{r3, r4, r5, lr}
 80052f2:	4605      	mov	r5, r0
 80052f4:	2900      	cmp	r1, #0
 80052f6:	d040      	beq.n	800537a <_free_r+0x8a>
 80052f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052fc:	1f0c      	subs	r4, r1, #4
 80052fe:	2b00      	cmp	r3, #0
 8005300:	bfb8      	it	lt
 8005302:	18e4      	addlt	r4, r4, r3
 8005304:	f000 fc7e 	bl	8005c04 <__malloc_lock>
 8005308:	4a1c      	ldr	r2, [pc, #112]	; (800537c <_free_r+0x8c>)
 800530a:	6813      	ldr	r3, [r2, #0]
 800530c:	b933      	cbnz	r3, 800531c <_free_r+0x2c>
 800530e:	6063      	str	r3, [r4, #4]
 8005310:	6014      	str	r4, [r2, #0]
 8005312:	4628      	mov	r0, r5
 8005314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005318:	f000 bc7a 	b.w	8005c10 <__malloc_unlock>
 800531c:	42a3      	cmp	r3, r4
 800531e:	d908      	bls.n	8005332 <_free_r+0x42>
 8005320:	6820      	ldr	r0, [r4, #0]
 8005322:	1821      	adds	r1, r4, r0
 8005324:	428b      	cmp	r3, r1
 8005326:	bf01      	itttt	eq
 8005328:	6819      	ldreq	r1, [r3, #0]
 800532a:	685b      	ldreq	r3, [r3, #4]
 800532c:	1809      	addeq	r1, r1, r0
 800532e:	6021      	streq	r1, [r4, #0]
 8005330:	e7ed      	b.n	800530e <_free_r+0x1e>
 8005332:	461a      	mov	r2, r3
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	b10b      	cbz	r3, 800533c <_free_r+0x4c>
 8005338:	42a3      	cmp	r3, r4
 800533a:	d9fa      	bls.n	8005332 <_free_r+0x42>
 800533c:	6811      	ldr	r1, [r2, #0]
 800533e:	1850      	adds	r0, r2, r1
 8005340:	42a0      	cmp	r0, r4
 8005342:	d10b      	bne.n	800535c <_free_r+0x6c>
 8005344:	6820      	ldr	r0, [r4, #0]
 8005346:	4401      	add	r1, r0
 8005348:	1850      	adds	r0, r2, r1
 800534a:	4283      	cmp	r3, r0
 800534c:	6011      	str	r1, [r2, #0]
 800534e:	d1e0      	bne.n	8005312 <_free_r+0x22>
 8005350:	6818      	ldr	r0, [r3, #0]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	4401      	add	r1, r0
 8005356:	6011      	str	r1, [r2, #0]
 8005358:	6053      	str	r3, [r2, #4]
 800535a:	e7da      	b.n	8005312 <_free_r+0x22>
 800535c:	d902      	bls.n	8005364 <_free_r+0x74>
 800535e:	230c      	movs	r3, #12
 8005360:	602b      	str	r3, [r5, #0]
 8005362:	e7d6      	b.n	8005312 <_free_r+0x22>
 8005364:	6820      	ldr	r0, [r4, #0]
 8005366:	1821      	adds	r1, r4, r0
 8005368:	428b      	cmp	r3, r1
 800536a:	bf01      	itttt	eq
 800536c:	6819      	ldreq	r1, [r3, #0]
 800536e:	685b      	ldreq	r3, [r3, #4]
 8005370:	1809      	addeq	r1, r1, r0
 8005372:	6021      	streq	r1, [r4, #0]
 8005374:	6063      	str	r3, [r4, #4]
 8005376:	6054      	str	r4, [r2, #4]
 8005378:	e7cb      	b.n	8005312 <_free_r+0x22>
 800537a:	bd38      	pop	{r3, r4, r5, pc}
 800537c:	20002c4c 	.word	0x20002c4c

08005380 <sbrk_aligned>:
 8005380:	b570      	push	{r4, r5, r6, lr}
 8005382:	4e0e      	ldr	r6, [pc, #56]	; (80053bc <sbrk_aligned+0x3c>)
 8005384:	460c      	mov	r4, r1
 8005386:	6831      	ldr	r1, [r6, #0]
 8005388:	4605      	mov	r5, r0
 800538a:	b911      	cbnz	r1, 8005392 <sbrk_aligned+0x12>
 800538c:	f000 fb7a 	bl	8005a84 <_sbrk_r>
 8005390:	6030      	str	r0, [r6, #0]
 8005392:	4621      	mov	r1, r4
 8005394:	4628      	mov	r0, r5
 8005396:	f000 fb75 	bl	8005a84 <_sbrk_r>
 800539a:	1c43      	adds	r3, r0, #1
 800539c:	d00a      	beq.n	80053b4 <sbrk_aligned+0x34>
 800539e:	1cc4      	adds	r4, r0, #3
 80053a0:	f024 0403 	bic.w	r4, r4, #3
 80053a4:	42a0      	cmp	r0, r4
 80053a6:	d007      	beq.n	80053b8 <sbrk_aligned+0x38>
 80053a8:	1a21      	subs	r1, r4, r0
 80053aa:	4628      	mov	r0, r5
 80053ac:	f000 fb6a 	bl	8005a84 <_sbrk_r>
 80053b0:	3001      	adds	r0, #1
 80053b2:	d101      	bne.n	80053b8 <sbrk_aligned+0x38>
 80053b4:	f04f 34ff 	mov.w	r4, #4294967295
 80053b8:	4620      	mov	r0, r4
 80053ba:	bd70      	pop	{r4, r5, r6, pc}
 80053bc:	20002c50 	.word	0x20002c50

080053c0 <_malloc_r>:
 80053c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053c4:	1ccd      	adds	r5, r1, #3
 80053c6:	f025 0503 	bic.w	r5, r5, #3
 80053ca:	3508      	adds	r5, #8
 80053cc:	2d0c      	cmp	r5, #12
 80053ce:	bf38      	it	cc
 80053d0:	250c      	movcc	r5, #12
 80053d2:	2d00      	cmp	r5, #0
 80053d4:	4607      	mov	r7, r0
 80053d6:	db01      	blt.n	80053dc <_malloc_r+0x1c>
 80053d8:	42a9      	cmp	r1, r5
 80053da:	d905      	bls.n	80053e8 <_malloc_r+0x28>
 80053dc:	230c      	movs	r3, #12
 80053de:	2600      	movs	r6, #0
 80053e0:	603b      	str	r3, [r7, #0]
 80053e2:	4630      	mov	r0, r6
 80053e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053e8:	4e2e      	ldr	r6, [pc, #184]	; (80054a4 <_malloc_r+0xe4>)
 80053ea:	f000 fc0b 	bl	8005c04 <__malloc_lock>
 80053ee:	6833      	ldr	r3, [r6, #0]
 80053f0:	461c      	mov	r4, r3
 80053f2:	bb34      	cbnz	r4, 8005442 <_malloc_r+0x82>
 80053f4:	4629      	mov	r1, r5
 80053f6:	4638      	mov	r0, r7
 80053f8:	f7ff ffc2 	bl	8005380 <sbrk_aligned>
 80053fc:	1c43      	adds	r3, r0, #1
 80053fe:	4604      	mov	r4, r0
 8005400:	d14d      	bne.n	800549e <_malloc_r+0xde>
 8005402:	6834      	ldr	r4, [r6, #0]
 8005404:	4626      	mov	r6, r4
 8005406:	2e00      	cmp	r6, #0
 8005408:	d140      	bne.n	800548c <_malloc_r+0xcc>
 800540a:	6823      	ldr	r3, [r4, #0]
 800540c:	4631      	mov	r1, r6
 800540e:	4638      	mov	r0, r7
 8005410:	eb04 0803 	add.w	r8, r4, r3
 8005414:	f000 fb36 	bl	8005a84 <_sbrk_r>
 8005418:	4580      	cmp	r8, r0
 800541a:	d13a      	bne.n	8005492 <_malloc_r+0xd2>
 800541c:	6821      	ldr	r1, [r4, #0]
 800541e:	3503      	adds	r5, #3
 8005420:	1a6d      	subs	r5, r5, r1
 8005422:	f025 0503 	bic.w	r5, r5, #3
 8005426:	3508      	adds	r5, #8
 8005428:	2d0c      	cmp	r5, #12
 800542a:	bf38      	it	cc
 800542c:	250c      	movcc	r5, #12
 800542e:	4638      	mov	r0, r7
 8005430:	4629      	mov	r1, r5
 8005432:	f7ff ffa5 	bl	8005380 <sbrk_aligned>
 8005436:	3001      	adds	r0, #1
 8005438:	d02b      	beq.n	8005492 <_malloc_r+0xd2>
 800543a:	6823      	ldr	r3, [r4, #0]
 800543c:	442b      	add	r3, r5
 800543e:	6023      	str	r3, [r4, #0]
 8005440:	e00e      	b.n	8005460 <_malloc_r+0xa0>
 8005442:	6822      	ldr	r2, [r4, #0]
 8005444:	1b52      	subs	r2, r2, r5
 8005446:	d41e      	bmi.n	8005486 <_malloc_r+0xc6>
 8005448:	2a0b      	cmp	r2, #11
 800544a:	d916      	bls.n	800547a <_malloc_r+0xba>
 800544c:	1961      	adds	r1, r4, r5
 800544e:	42a3      	cmp	r3, r4
 8005450:	6025      	str	r5, [r4, #0]
 8005452:	bf18      	it	ne
 8005454:	6059      	strne	r1, [r3, #4]
 8005456:	6863      	ldr	r3, [r4, #4]
 8005458:	bf08      	it	eq
 800545a:	6031      	streq	r1, [r6, #0]
 800545c:	5162      	str	r2, [r4, r5]
 800545e:	604b      	str	r3, [r1, #4]
 8005460:	4638      	mov	r0, r7
 8005462:	f104 060b 	add.w	r6, r4, #11
 8005466:	f000 fbd3 	bl	8005c10 <__malloc_unlock>
 800546a:	f026 0607 	bic.w	r6, r6, #7
 800546e:	1d23      	adds	r3, r4, #4
 8005470:	1af2      	subs	r2, r6, r3
 8005472:	d0b6      	beq.n	80053e2 <_malloc_r+0x22>
 8005474:	1b9b      	subs	r3, r3, r6
 8005476:	50a3      	str	r3, [r4, r2]
 8005478:	e7b3      	b.n	80053e2 <_malloc_r+0x22>
 800547a:	6862      	ldr	r2, [r4, #4]
 800547c:	42a3      	cmp	r3, r4
 800547e:	bf0c      	ite	eq
 8005480:	6032      	streq	r2, [r6, #0]
 8005482:	605a      	strne	r2, [r3, #4]
 8005484:	e7ec      	b.n	8005460 <_malloc_r+0xa0>
 8005486:	4623      	mov	r3, r4
 8005488:	6864      	ldr	r4, [r4, #4]
 800548a:	e7b2      	b.n	80053f2 <_malloc_r+0x32>
 800548c:	4634      	mov	r4, r6
 800548e:	6876      	ldr	r6, [r6, #4]
 8005490:	e7b9      	b.n	8005406 <_malloc_r+0x46>
 8005492:	230c      	movs	r3, #12
 8005494:	4638      	mov	r0, r7
 8005496:	603b      	str	r3, [r7, #0]
 8005498:	f000 fbba 	bl	8005c10 <__malloc_unlock>
 800549c:	e7a1      	b.n	80053e2 <_malloc_r+0x22>
 800549e:	6025      	str	r5, [r4, #0]
 80054a0:	e7de      	b.n	8005460 <_malloc_r+0xa0>
 80054a2:	bf00      	nop
 80054a4:	20002c4c 	.word	0x20002c4c

080054a8 <__sfputc_r>:
 80054a8:	6893      	ldr	r3, [r2, #8]
 80054aa:	b410      	push	{r4}
 80054ac:	3b01      	subs	r3, #1
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	6093      	str	r3, [r2, #8]
 80054b2:	da07      	bge.n	80054c4 <__sfputc_r+0x1c>
 80054b4:	6994      	ldr	r4, [r2, #24]
 80054b6:	42a3      	cmp	r3, r4
 80054b8:	db01      	blt.n	80054be <__sfputc_r+0x16>
 80054ba:	290a      	cmp	r1, #10
 80054bc:	d102      	bne.n	80054c4 <__sfputc_r+0x1c>
 80054be:	bc10      	pop	{r4}
 80054c0:	f7ff bbf0 	b.w	8004ca4 <__swbuf_r>
 80054c4:	6813      	ldr	r3, [r2, #0]
 80054c6:	1c58      	adds	r0, r3, #1
 80054c8:	6010      	str	r0, [r2, #0]
 80054ca:	7019      	strb	r1, [r3, #0]
 80054cc:	4608      	mov	r0, r1
 80054ce:	bc10      	pop	{r4}
 80054d0:	4770      	bx	lr

080054d2 <__sfputs_r>:
 80054d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054d4:	4606      	mov	r6, r0
 80054d6:	460f      	mov	r7, r1
 80054d8:	4614      	mov	r4, r2
 80054da:	18d5      	adds	r5, r2, r3
 80054dc:	42ac      	cmp	r4, r5
 80054de:	d101      	bne.n	80054e4 <__sfputs_r+0x12>
 80054e0:	2000      	movs	r0, #0
 80054e2:	e007      	b.n	80054f4 <__sfputs_r+0x22>
 80054e4:	463a      	mov	r2, r7
 80054e6:	4630      	mov	r0, r6
 80054e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054ec:	f7ff ffdc 	bl	80054a8 <__sfputc_r>
 80054f0:	1c43      	adds	r3, r0, #1
 80054f2:	d1f3      	bne.n	80054dc <__sfputs_r+0xa>
 80054f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080054f8 <_vfiprintf_r>:
 80054f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054fc:	460d      	mov	r5, r1
 80054fe:	4614      	mov	r4, r2
 8005500:	4698      	mov	r8, r3
 8005502:	4606      	mov	r6, r0
 8005504:	b09d      	sub	sp, #116	; 0x74
 8005506:	b118      	cbz	r0, 8005510 <_vfiprintf_r+0x18>
 8005508:	6983      	ldr	r3, [r0, #24]
 800550a:	b90b      	cbnz	r3, 8005510 <_vfiprintf_r+0x18>
 800550c:	f7ff fdbe 	bl	800508c <__sinit>
 8005510:	4b89      	ldr	r3, [pc, #548]	; (8005738 <_vfiprintf_r+0x240>)
 8005512:	429d      	cmp	r5, r3
 8005514:	d11b      	bne.n	800554e <_vfiprintf_r+0x56>
 8005516:	6875      	ldr	r5, [r6, #4]
 8005518:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800551a:	07d9      	lsls	r1, r3, #31
 800551c:	d405      	bmi.n	800552a <_vfiprintf_r+0x32>
 800551e:	89ab      	ldrh	r3, [r5, #12]
 8005520:	059a      	lsls	r2, r3, #22
 8005522:	d402      	bmi.n	800552a <_vfiprintf_r+0x32>
 8005524:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005526:	f7ff fe74 	bl	8005212 <__retarget_lock_acquire_recursive>
 800552a:	89ab      	ldrh	r3, [r5, #12]
 800552c:	071b      	lsls	r3, r3, #28
 800552e:	d501      	bpl.n	8005534 <_vfiprintf_r+0x3c>
 8005530:	692b      	ldr	r3, [r5, #16]
 8005532:	b9eb      	cbnz	r3, 8005570 <_vfiprintf_r+0x78>
 8005534:	4629      	mov	r1, r5
 8005536:	4630      	mov	r0, r6
 8005538:	f7ff fc06 	bl	8004d48 <__swsetup_r>
 800553c:	b1c0      	cbz	r0, 8005570 <_vfiprintf_r+0x78>
 800553e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005540:	07dc      	lsls	r4, r3, #31
 8005542:	d50e      	bpl.n	8005562 <_vfiprintf_r+0x6a>
 8005544:	f04f 30ff 	mov.w	r0, #4294967295
 8005548:	b01d      	add	sp, #116	; 0x74
 800554a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800554e:	4b7b      	ldr	r3, [pc, #492]	; (800573c <_vfiprintf_r+0x244>)
 8005550:	429d      	cmp	r5, r3
 8005552:	d101      	bne.n	8005558 <_vfiprintf_r+0x60>
 8005554:	68b5      	ldr	r5, [r6, #8]
 8005556:	e7df      	b.n	8005518 <_vfiprintf_r+0x20>
 8005558:	4b79      	ldr	r3, [pc, #484]	; (8005740 <_vfiprintf_r+0x248>)
 800555a:	429d      	cmp	r5, r3
 800555c:	bf08      	it	eq
 800555e:	68f5      	ldreq	r5, [r6, #12]
 8005560:	e7da      	b.n	8005518 <_vfiprintf_r+0x20>
 8005562:	89ab      	ldrh	r3, [r5, #12]
 8005564:	0598      	lsls	r0, r3, #22
 8005566:	d4ed      	bmi.n	8005544 <_vfiprintf_r+0x4c>
 8005568:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800556a:	f7ff fe53 	bl	8005214 <__retarget_lock_release_recursive>
 800556e:	e7e9      	b.n	8005544 <_vfiprintf_r+0x4c>
 8005570:	2300      	movs	r3, #0
 8005572:	9309      	str	r3, [sp, #36]	; 0x24
 8005574:	2320      	movs	r3, #32
 8005576:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800557a:	2330      	movs	r3, #48	; 0x30
 800557c:	f04f 0901 	mov.w	r9, #1
 8005580:	f8cd 800c 	str.w	r8, [sp, #12]
 8005584:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005744 <_vfiprintf_r+0x24c>
 8005588:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800558c:	4623      	mov	r3, r4
 800558e:	469a      	mov	sl, r3
 8005590:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005594:	b10a      	cbz	r2, 800559a <_vfiprintf_r+0xa2>
 8005596:	2a25      	cmp	r2, #37	; 0x25
 8005598:	d1f9      	bne.n	800558e <_vfiprintf_r+0x96>
 800559a:	ebba 0b04 	subs.w	fp, sl, r4
 800559e:	d00b      	beq.n	80055b8 <_vfiprintf_r+0xc0>
 80055a0:	465b      	mov	r3, fp
 80055a2:	4622      	mov	r2, r4
 80055a4:	4629      	mov	r1, r5
 80055a6:	4630      	mov	r0, r6
 80055a8:	f7ff ff93 	bl	80054d2 <__sfputs_r>
 80055ac:	3001      	adds	r0, #1
 80055ae:	f000 80aa 	beq.w	8005706 <_vfiprintf_r+0x20e>
 80055b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055b4:	445a      	add	r2, fp
 80055b6:	9209      	str	r2, [sp, #36]	; 0x24
 80055b8:	f89a 3000 	ldrb.w	r3, [sl]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f000 80a2 	beq.w	8005706 <_vfiprintf_r+0x20e>
 80055c2:	2300      	movs	r3, #0
 80055c4:	f04f 32ff 	mov.w	r2, #4294967295
 80055c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055cc:	f10a 0a01 	add.w	sl, sl, #1
 80055d0:	9304      	str	r3, [sp, #16]
 80055d2:	9307      	str	r3, [sp, #28]
 80055d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055d8:	931a      	str	r3, [sp, #104]	; 0x68
 80055da:	4654      	mov	r4, sl
 80055dc:	2205      	movs	r2, #5
 80055de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055e2:	4858      	ldr	r0, [pc, #352]	; (8005744 <_vfiprintf_r+0x24c>)
 80055e4:	f000 fb00 	bl	8005be8 <memchr>
 80055e8:	9a04      	ldr	r2, [sp, #16]
 80055ea:	b9d8      	cbnz	r0, 8005624 <_vfiprintf_r+0x12c>
 80055ec:	06d1      	lsls	r1, r2, #27
 80055ee:	bf44      	itt	mi
 80055f0:	2320      	movmi	r3, #32
 80055f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055f6:	0713      	lsls	r3, r2, #28
 80055f8:	bf44      	itt	mi
 80055fa:	232b      	movmi	r3, #43	; 0x2b
 80055fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005600:	f89a 3000 	ldrb.w	r3, [sl]
 8005604:	2b2a      	cmp	r3, #42	; 0x2a
 8005606:	d015      	beq.n	8005634 <_vfiprintf_r+0x13c>
 8005608:	4654      	mov	r4, sl
 800560a:	2000      	movs	r0, #0
 800560c:	f04f 0c0a 	mov.w	ip, #10
 8005610:	9a07      	ldr	r2, [sp, #28]
 8005612:	4621      	mov	r1, r4
 8005614:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005618:	3b30      	subs	r3, #48	; 0x30
 800561a:	2b09      	cmp	r3, #9
 800561c:	d94e      	bls.n	80056bc <_vfiprintf_r+0x1c4>
 800561e:	b1b0      	cbz	r0, 800564e <_vfiprintf_r+0x156>
 8005620:	9207      	str	r2, [sp, #28]
 8005622:	e014      	b.n	800564e <_vfiprintf_r+0x156>
 8005624:	eba0 0308 	sub.w	r3, r0, r8
 8005628:	fa09 f303 	lsl.w	r3, r9, r3
 800562c:	4313      	orrs	r3, r2
 800562e:	46a2      	mov	sl, r4
 8005630:	9304      	str	r3, [sp, #16]
 8005632:	e7d2      	b.n	80055da <_vfiprintf_r+0xe2>
 8005634:	9b03      	ldr	r3, [sp, #12]
 8005636:	1d19      	adds	r1, r3, #4
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	9103      	str	r1, [sp, #12]
 800563c:	2b00      	cmp	r3, #0
 800563e:	bfbb      	ittet	lt
 8005640:	425b      	neglt	r3, r3
 8005642:	f042 0202 	orrlt.w	r2, r2, #2
 8005646:	9307      	strge	r3, [sp, #28]
 8005648:	9307      	strlt	r3, [sp, #28]
 800564a:	bfb8      	it	lt
 800564c:	9204      	strlt	r2, [sp, #16]
 800564e:	7823      	ldrb	r3, [r4, #0]
 8005650:	2b2e      	cmp	r3, #46	; 0x2e
 8005652:	d10c      	bne.n	800566e <_vfiprintf_r+0x176>
 8005654:	7863      	ldrb	r3, [r4, #1]
 8005656:	2b2a      	cmp	r3, #42	; 0x2a
 8005658:	d135      	bne.n	80056c6 <_vfiprintf_r+0x1ce>
 800565a:	9b03      	ldr	r3, [sp, #12]
 800565c:	3402      	adds	r4, #2
 800565e:	1d1a      	adds	r2, r3, #4
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	9203      	str	r2, [sp, #12]
 8005664:	2b00      	cmp	r3, #0
 8005666:	bfb8      	it	lt
 8005668:	f04f 33ff 	movlt.w	r3, #4294967295
 800566c:	9305      	str	r3, [sp, #20]
 800566e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005748 <_vfiprintf_r+0x250>
 8005672:	2203      	movs	r2, #3
 8005674:	4650      	mov	r0, sl
 8005676:	7821      	ldrb	r1, [r4, #0]
 8005678:	f000 fab6 	bl	8005be8 <memchr>
 800567c:	b140      	cbz	r0, 8005690 <_vfiprintf_r+0x198>
 800567e:	2340      	movs	r3, #64	; 0x40
 8005680:	eba0 000a 	sub.w	r0, r0, sl
 8005684:	fa03 f000 	lsl.w	r0, r3, r0
 8005688:	9b04      	ldr	r3, [sp, #16]
 800568a:	3401      	adds	r4, #1
 800568c:	4303      	orrs	r3, r0
 800568e:	9304      	str	r3, [sp, #16]
 8005690:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005694:	2206      	movs	r2, #6
 8005696:	482d      	ldr	r0, [pc, #180]	; (800574c <_vfiprintf_r+0x254>)
 8005698:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800569c:	f000 faa4 	bl	8005be8 <memchr>
 80056a0:	2800      	cmp	r0, #0
 80056a2:	d03f      	beq.n	8005724 <_vfiprintf_r+0x22c>
 80056a4:	4b2a      	ldr	r3, [pc, #168]	; (8005750 <_vfiprintf_r+0x258>)
 80056a6:	bb1b      	cbnz	r3, 80056f0 <_vfiprintf_r+0x1f8>
 80056a8:	9b03      	ldr	r3, [sp, #12]
 80056aa:	3307      	adds	r3, #7
 80056ac:	f023 0307 	bic.w	r3, r3, #7
 80056b0:	3308      	adds	r3, #8
 80056b2:	9303      	str	r3, [sp, #12]
 80056b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056b6:	443b      	add	r3, r7
 80056b8:	9309      	str	r3, [sp, #36]	; 0x24
 80056ba:	e767      	b.n	800558c <_vfiprintf_r+0x94>
 80056bc:	460c      	mov	r4, r1
 80056be:	2001      	movs	r0, #1
 80056c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80056c4:	e7a5      	b.n	8005612 <_vfiprintf_r+0x11a>
 80056c6:	2300      	movs	r3, #0
 80056c8:	f04f 0c0a 	mov.w	ip, #10
 80056cc:	4619      	mov	r1, r3
 80056ce:	3401      	adds	r4, #1
 80056d0:	9305      	str	r3, [sp, #20]
 80056d2:	4620      	mov	r0, r4
 80056d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056d8:	3a30      	subs	r2, #48	; 0x30
 80056da:	2a09      	cmp	r2, #9
 80056dc:	d903      	bls.n	80056e6 <_vfiprintf_r+0x1ee>
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d0c5      	beq.n	800566e <_vfiprintf_r+0x176>
 80056e2:	9105      	str	r1, [sp, #20]
 80056e4:	e7c3      	b.n	800566e <_vfiprintf_r+0x176>
 80056e6:	4604      	mov	r4, r0
 80056e8:	2301      	movs	r3, #1
 80056ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80056ee:	e7f0      	b.n	80056d2 <_vfiprintf_r+0x1da>
 80056f0:	ab03      	add	r3, sp, #12
 80056f2:	9300      	str	r3, [sp, #0]
 80056f4:	462a      	mov	r2, r5
 80056f6:	4630      	mov	r0, r6
 80056f8:	4b16      	ldr	r3, [pc, #88]	; (8005754 <_vfiprintf_r+0x25c>)
 80056fa:	a904      	add	r1, sp, #16
 80056fc:	f3af 8000 	nop.w
 8005700:	4607      	mov	r7, r0
 8005702:	1c78      	adds	r0, r7, #1
 8005704:	d1d6      	bne.n	80056b4 <_vfiprintf_r+0x1bc>
 8005706:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005708:	07d9      	lsls	r1, r3, #31
 800570a:	d405      	bmi.n	8005718 <_vfiprintf_r+0x220>
 800570c:	89ab      	ldrh	r3, [r5, #12]
 800570e:	059a      	lsls	r2, r3, #22
 8005710:	d402      	bmi.n	8005718 <_vfiprintf_r+0x220>
 8005712:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005714:	f7ff fd7e 	bl	8005214 <__retarget_lock_release_recursive>
 8005718:	89ab      	ldrh	r3, [r5, #12]
 800571a:	065b      	lsls	r3, r3, #25
 800571c:	f53f af12 	bmi.w	8005544 <_vfiprintf_r+0x4c>
 8005720:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005722:	e711      	b.n	8005548 <_vfiprintf_r+0x50>
 8005724:	ab03      	add	r3, sp, #12
 8005726:	9300      	str	r3, [sp, #0]
 8005728:	462a      	mov	r2, r5
 800572a:	4630      	mov	r0, r6
 800572c:	4b09      	ldr	r3, [pc, #36]	; (8005754 <_vfiprintf_r+0x25c>)
 800572e:	a904      	add	r1, sp, #16
 8005730:	f000 f882 	bl	8005838 <_printf_i>
 8005734:	e7e4      	b.n	8005700 <_vfiprintf_r+0x208>
 8005736:	bf00      	nop
 8005738:	08006468 	.word	0x08006468
 800573c:	08006488 	.word	0x08006488
 8005740:	08006448 	.word	0x08006448
 8005744:	080064a8 	.word	0x080064a8
 8005748:	080064ae 	.word	0x080064ae
 800574c:	080064b2 	.word	0x080064b2
 8005750:	00000000 	.word	0x00000000
 8005754:	080054d3 	.word	0x080054d3

08005758 <_printf_common>:
 8005758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800575c:	4616      	mov	r6, r2
 800575e:	4699      	mov	r9, r3
 8005760:	688a      	ldr	r2, [r1, #8]
 8005762:	690b      	ldr	r3, [r1, #16]
 8005764:	4607      	mov	r7, r0
 8005766:	4293      	cmp	r3, r2
 8005768:	bfb8      	it	lt
 800576a:	4613      	movlt	r3, r2
 800576c:	6033      	str	r3, [r6, #0]
 800576e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005772:	460c      	mov	r4, r1
 8005774:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005778:	b10a      	cbz	r2, 800577e <_printf_common+0x26>
 800577a:	3301      	adds	r3, #1
 800577c:	6033      	str	r3, [r6, #0]
 800577e:	6823      	ldr	r3, [r4, #0]
 8005780:	0699      	lsls	r1, r3, #26
 8005782:	bf42      	ittt	mi
 8005784:	6833      	ldrmi	r3, [r6, #0]
 8005786:	3302      	addmi	r3, #2
 8005788:	6033      	strmi	r3, [r6, #0]
 800578a:	6825      	ldr	r5, [r4, #0]
 800578c:	f015 0506 	ands.w	r5, r5, #6
 8005790:	d106      	bne.n	80057a0 <_printf_common+0x48>
 8005792:	f104 0a19 	add.w	sl, r4, #25
 8005796:	68e3      	ldr	r3, [r4, #12]
 8005798:	6832      	ldr	r2, [r6, #0]
 800579a:	1a9b      	subs	r3, r3, r2
 800579c:	42ab      	cmp	r3, r5
 800579e:	dc28      	bgt.n	80057f2 <_printf_common+0x9a>
 80057a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80057a4:	1e13      	subs	r3, r2, #0
 80057a6:	6822      	ldr	r2, [r4, #0]
 80057a8:	bf18      	it	ne
 80057aa:	2301      	movne	r3, #1
 80057ac:	0692      	lsls	r2, r2, #26
 80057ae:	d42d      	bmi.n	800580c <_printf_common+0xb4>
 80057b0:	4649      	mov	r1, r9
 80057b2:	4638      	mov	r0, r7
 80057b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057b8:	47c0      	blx	r8
 80057ba:	3001      	adds	r0, #1
 80057bc:	d020      	beq.n	8005800 <_printf_common+0xa8>
 80057be:	6823      	ldr	r3, [r4, #0]
 80057c0:	68e5      	ldr	r5, [r4, #12]
 80057c2:	f003 0306 	and.w	r3, r3, #6
 80057c6:	2b04      	cmp	r3, #4
 80057c8:	bf18      	it	ne
 80057ca:	2500      	movne	r5, #0
 80057cc:	6832      	ldr	r2, [r6, #0]
 80057ce:	f04f 0600 	mov.w	r6, #0
 80057d2:	68a3      	ldr	r3, [r4, #8]
 80057d4:	bf08      	it	eq
 80057d6:	1aad      	subeq	r5, r5, r2
 80057d8:	6922      	ldr	r2, [r4, #16]
 80057da:	bf08      	it	eq
 80057dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057e0:	4293      	cmp	r3, r2
 80057e2:	bfc4      	itt	gt
 80057e4:	1a9b      	subgt	r3, r3, r2
 80057e6:	18ed      	addgt	r5, r5, r3
 80057e8:	341a      	adds	r4, #26
 80057ea:	42b5      	cmp	r5, r6
 80057ec:	d11a      	bne.n	8005824 <_printf_common+0xcc>
 80057ee:	2000      	movs	r0, #0
 80057f0:	e008      	b.n	8005804 <_printf_common+0xac>
 80057f2:	2301      	movs	r3, #1
 80057f4:	4652      	mov	r2, sl
 80057f6:	4649      	mov	r1, r9
 80057f8:	4638      	mov	r0, r7
 80057fa:	47c0      	blx	r8
 80057fc:	3001      	adds	r0, #1
 80057fe:	d103      	bne.n	8005808 <_printf_common+0xb0>
 8005800:	f04f 30ff 	mov.w	r0, #4294967295
 8005804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005808:	3501      	adds	r5, #1
 800580a:	e7c4      	b.n	8005796 <_printf_common+0x3e>
 800580c:	2030      	movs	r0, #48	; 0x30
 800580e:	18e1      	adds	r1, r4, r3
 8005810:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005814:	1c5a      	adds	r2, r3, #1
 8005816:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800581a:	4422      	add	r2, r4
 800581c:	3302      	adds	r3, #2
 800581e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005822:	e7c5      	b.n	80057b0 <_printf_common+0x58>
 8005824:	2301      	movs	r3, #1
 8005826:	4622      	mov	r2, r4
 8005828:	4649      	mov	r1, r9
 800582a:	4638      	mov	r0, r7
 800582c:	47c0      	blx	r8
 800582e:	3001      	adds	r0, #1
 8005830:	d0e6      	beq.n	8005800 <_printf_common+0xa8>
 8005832:	3601      	adds	r6, #1
 8005834:	e7d9      	b.n	80057ea <_printf_common+0x92>
	...

08005838 <_printf_i>:
 8005838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800583c:	7e0f      	ldrb	r7, [r1, #24]
 800583e:	4691      	mov	r9, r2
 8005840:	2f78      	cmp	r7, #120	; 0x78
 8005842:	4680      	mov	r8, r0
 8005844:	460c      	mov	r4, r1
 8005846:	469a      	mov	sl, r3
 8005848:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800584a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800584e:	d807      	bhi.n	8005860 <_printf_i+0x28>
 8005850:	2f62      	cmp	r7, #98	; 0x62
 8005852:	d80a      	bhi.n	800586a <_printf_i+0x32>
 8005854:	2f00      	cmp	r7, #0
 8005856:	f000 80d9 	beq.w	8005a0c <_printf_i+0x1d4>
 800585a:	2f58      	cmp	r7, #88	; 0x58
 800585c:	f000 80a4 	beq.w	80059a8 <_printf_i+0x170>
 8005860:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005864:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005868:	e03a      	b.n	80058e0 <_printf_i+0xa8>
 800586a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800586e:	2b15      	cmp	r3, #21
 8005870:	d8f6      	bhi.n	8005860 <_printf_i+0x28>
 8005872:	a101      	add	r1, pc, #4	; (adr r1, 8005878 <_printf_i+0x40>)
 8005874:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005878:	080058d1 	.word	0x080058d1
 800587c:	080058e5 	.word	0x080058e5
 8005880:	08005861 	.word	0x08005861
 8005884:	08005861 	.word	0x08005861
 8005888:	08005861 	.word	0x08005861
 800588c:	08005861 	.word	0x08005861
 8005890:	080058e5 	.word	0x080058e5
 8005894:	08005861 	.word	0x08005861
 8005898:	08005861 	.word	0x08005861
 800589c:	08005861 	.word	0x08005861
 80058a0:	08005861 	.word	0x08005861
 80058a4:	080059f3 	.word	0x080059f3
 80058a8:	08005915 	.word	0x08005915
 80058ac:	080059d5 	.word	0x080059d5
 80058b0:	08005861 	.word	0x08005861
 80058b4:	08005861 	.word	0x08005861
 80058b8:	08005a15 	.word	0x08005a15
 80058bc:	08005861 	.word	0x08005861
 80058c0:	08005915 	.word	0x08005915
 80058c4:	08005861 	.word	0x08005861
 80058c8:	08005861 	.word	0x08005861
 80058cc:	080059dd 	.word	0x080059dd
 80058d0:	682b      	ldr	r3, [r5, #0]
 80058d2:	1d1a      	adds	r2, r3, #4
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	602a      	str	r2, [r5, #0]
 80058d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058e0:	2301      	movs	r3, #1
 80058e2:	e0a4      	b.n	8005a2e <_printf_i+0x1f6>
 80058e4:	6820      	ldr	r0, [r4, #0]
 80058e6:	6829      	ldr	r1, [r5, #0]
 80058e8:	0606      	lsls	r6, r0, #24
 80058ea:	f101 0304 	add.w	r3, r1, #4
 80058ee:	d50a      	bpl.n	8005906 <_printf_i+0xce>
 80058f0:	680e      	ldr	r6, [r1, #0]
 80058f2:	602b      	str	r3, [r5, #0]
 80058f4:	2e00      	cmp	r6, #0
 80058f6:	da03      	bge.n	8005900 <_printf_i+0xc8>
 80058f8:	232d      	movs	r3, #45	; 0x2d
 80058fa:	4276      	negs	r6, r6
 80058fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005900:	230a      	movs	r3, #10
 8005902:	485e      	ldr	r0, [pc, #376]	; (8005a7c <_printf_i+0x244>)
 8005904:	e019      	b.n	800593a <_printf_i+0x102>
 8005906:	680e      	ldr	r6, [r1, #0]
 8005908:	f010 0f40 	tst.w	r0, #64	; 0x40
 800590c:	602b      	str	r3, [r5, #0]
 800590e:	bf18      	it	ne
 8005910:	b236      	sxthne	r6, r6
 8005912:	e7ef      	b.n	80058f4 <_printf_i+0xbc>
 8005914:	682b      	ldr	r3, [r5, #0]
 8005916:	6820      	ldr	r0, [r4, #0]
 8005918:	1d19      	adds	r1, r3, #4
 800591a:	6029      	str	r1, [r5, #0]
 800591c:	0601      	lsls	r1, r0, #24
 800591e:	d501      	bpl.n	8005924 <_printf_i+0xec>
 8005920:	681e      	ldr	r6, [r3, #0]
 8005922:	e002      	b.n	800592a <_printf_i+0xf2>
 8005924:	0646      	lsls	r6, r0, #25
 8005926:	d5fb      	bpl.n	8005920 <_printf_i+0xe8>
 8005928:	881e      	ldrh	r6, [r3, #0]
 800592a:	2f6f      	cmp	r7, #111	; 0x6f
 800592c:	bf0c      	ite	eq
 800592e:	2308      	moveq	r3, #8
 8005930:	230a      	movne	r3, #10
 8005932:	4852      	ldr	r0, [pc, #328]	; (8005a7c <_printf_i+0x244>)
 8005934:	2100      	movs	r1, #0
 8005936:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800593a:	6865      	ldr	r5, [r4, #4]
 800593c:	2d00      	cmp	r5, #0
 800593e:	bfa8      	it	ge
 8005940:	6821      	ldrge	r1, [r4, #0]
 8005942:	60a5      	str	r5, [r4, #8]
 8005944:	bfa4      	itt	ge
 8005946:	f021 0104 	bicge.w	r1, r1, #4
 800594a:	6021      	strge	r1, [r4, #0]
 800594c:	b90e      	cbnz	r6, 8005952 <_printf_i+0x11a>
 800594e:	2d00      	cmp	r5, #0
 8005950:	d04d      	beq.n	80059ee <_printf_i+0x1b6>
 8005952:	4615      	mov	r5, r2
 8005954:	fbb6 f1f3 	udiv	r1, r6, r3
 8005958:	fb03 6711 	mls	r7, r3, r1, r6
 800595c:	5dc7      	ldrb	r7, [r0, r7]
 800595e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005962:	4637      	mov	r7, r6
 8005964:	42bb      	cmp	r3, r7
 8005966:	460e      	mov	r6, r1
 8005968:	d9f4      	bls.n	8005954 <_printf_i+0x11c>
 800596a:	2b08      	cmp	r3, #8
 800596c:	d10b      	bne.n	8005986 <_printf_i+0x14e>
 800596e:	6823      	ldr	r3, [r4, #0]
 8005970:	07de      	lsls	r6, r3, #31
 8005972:	d508      	bpl.n	8005986 <_printf_i+0x14e>
 8005974:	6923      	ldr	r3, [r4, #16]
 8005976:	6861      	ldr	r1, [r4, #4]
 8005978:	4299      	cmp	r1, r3
 800597a:	bfde      	ittt	le
 800597c:	2330      	movle	r3, #48	; 0x30
 800597e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005982:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005986:	1b52      	subs	r2, r2, r5
 8005988:	6122      	str	r2, [r4, #16]
 800598a:	464b      	mov	r3, r9
 800598c:	4621      	mov	r1, r4
 800598e:	4640      	mov	r0, r8
 8005990:	f8cd a000 	str.w	sl, [sp]
 8005994:	aa03      	add	r2, sp, #12
 8005996:	f7ff fedf 	bl	8005758 <_printf_common>
 800599a:	3001      	adds	r0, #1
 800599c:	d14c      	bne.n	8005a38 <_printf_i+0x200>
 800599e:	f04f 30ff 	mov.w	r0, #4294967295
 80059a2:	b004      	add	sp, #16
 80059a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059a8:	4834      	ldr	r0, [pc, #208]	; (8005a7c <_printf_i+0x244>)
 80059aa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80059ae:	6829      	ldr	r1, [r5, #0]
 80059b0:	6823      	ldr	r3, [r4, #0]
 80059b2:	f851 6b04 	ldr.w	r6, [r1], #4
 80059b6:	6029      	str	r1, [r5, #0]
 80059b8:	061d      	lsls	r5, r3, #24
 80059ba:	d514      	bpl.n	80059e6 <_printf_i+0x1ae>
 80059bc:	07df      	lsls	r7, r3, #31
 80059be:	bf44      	itt	mi
 80059c0:	f043 0320 	orrmi.w	r3, r3, #32
 80059c4:	6023      	strmi	r3, [r4, #0]
 80059c6:	b91e      	cbnz	r6, 80059d0 <_printf_i+0x198>
 80059c8:	6823      	ldr	r3, [r4, #0]
 80059ca:	f023 0320 	bic.w	r3, r3, #32
 80059ce:	6023      	str	r3, [r4, #0]
 80059d0:	2310      	movs	r3, #16
 80059d2:	e7af      	b.n	8005934 <_printf_i+0xfc>
 80059d4:	6823      	ldr	r3, [r4, #0]
 80059d6:	f043 0320 	orr.w	r3, r3, #32
 80059da:	6023      	str	r3, [r4, #0]
 80059dc:	2378      	movs	r3, #120	; 0x78
 80059de:	4828      	ldr	r0, [pc, #160]	; (8005a80 <_printf_i+0x248>)
 80059e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80059e4:	e7e3      	b.n	80059ae <_printf_i+0x176>
 80059e6:	0659      	lsls	r1, r3, #25
 80059e8:	bf48      	it	mi
 80059ea:	b2b6      	uxthmi	r6, r6
 80059ec:	e7e6      	b.n	80059bc <_printf_i+0x184>
 80059ee:	4615      	mov	r5, r2
 80059f0:	e7bb      	b.n	800596a <_printf_i+0x132>
 80059f2:	682b      	ldr	r3, [r5, #0]
 80059f4:	6826      	ldr	r6, [r4, #0]
 80059f6:	1d18      	adds	r0, r3, #4
 80059f8:	6961      	ldr	r1, [r4, #20]
 80059fa:	6028      	str	r0, [r5, #0]
 80059fc:	0635      	lsls	r5, r6, #24
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	d501      	bpl.n	8005a06 <_printf_i+0x1ce>
 8005a02:	6019      	str	r1, [r3, #0]
 8005a04:	e002      	b.n	8005a0c <_printf_i+0x1d4>
 8005a06:	0670      	lsls	r0, r6, #25
 8005a08:	d5fb      	bpl.n	8005a02 <_printf_i+0x1ca>
 8005a0a:	8019      	strh	r1, [r3, #0]
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	4615      	mov	r5, r2
 8005a10:	6123      	str	r3, [r4, #16]
 8005a12:	e7ba      	b.n	800598a <_printf_i+0x152>
 8005a14:	682b      	ldr	r3, [r5, #0]
 8005a16:	2100      	movs	r1, #0
 8005a18:	1d1a      	adds	r2, r3, #4
 8005a1a:	602a      	str	r2, [r5, #0]
 8005a1c:	681d      	ldr	r5, [r3, #0]
 8005a1e:	6862      	ldr	r2, [r4, #4]
 8005a20:	4628      	mov	r0, r5
 8005a22:	f000 f8e1 	bl	8005be8 <memchr>
 8005a26:	b108      	cbz	r0, 8005a2c <_printf_i+0x1f4>
 8005a28:	1b40      	subs	r0, r0, r5
 8005a2a:	6060      	str	r0, [r4, #4]
 8005a2c:	6863      	ldr	r3, [r4, #4]
 8005a2e:	6123      	str	r3, [r4, #16]
 8005a30:	2300      	movs	r3, #0
 8005a32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a36:	e7a8      	b.n	800598a <_printf_i+0x152>
 8005a38:	462a      	mov	r2, r5
 8005a3a:	4649      	mov	r1, r9
 8005a3c:	4640      	mov	r0, r8
 8005a3e:	6923      	ldr	r3, [r4, #16]
 8005a40:	47d0      	blx	sl
 8005a42:	3001      	adds	r0, #1
 8005a44:	d0ab      	beq.n	800599e <_printf_i+0x166>
 8005a46:	6823      	ldr	r3, [r4, #0]
 8005a48:	079b      	lsls	r3, r3, #30
 8005a4a:	d413      	bmi.n	8005a74 <_printf_i+0x23c>
 8005a4c:	68e0      	ldr	r0, [r4, #12]
 8005a4e:	9b03      	ldr	r3, [sp, #12]
 8005a50:	4298      	cmp	r0, r3
 8005a52:	bfb8      	it	lt
 8005a54:	4618      	movlt	r0, r3
 8005a56:	e7a4      	b.n	80059a2 <_printf_i+0x16a>
 8005a58:	2301      	movs	r3, #1
 8005a5a:	4632      	mov	r2, r6
 8005a5c:	4649      	mov	r1, r9
 8005a5e:	4640      	mov	r0, r8
 8005a60:	47d0      	blx	sl
 8005a62:	3001      	adds	r0, #1
 8005a64:	d09b      	beq.n	800599e <_printf_i+0x166>
 8005a66:	3501      	adds	r5, #1
 8005a68:	68e3      	ldr	r3, [r4, #12]
 8005a6a:	9903      	ldr	r1, [sp, #12]
 8005a6c:	1a5b      	subs	r3, r3, r1
 8005a6e:	42ab      	cmp	r3, r5
 8005a70:	dcf2      	bgt.n	8005a58 <_printf_i+0x220>
 8005a72:	e7eb      	b.n	8005a4c <_printf_i+0x214>
 8005a74:	2500      	movs	r5, #0
 8005a76:	f104 0619 	add.w	r6, r4, #25
 8005a7a:	e7f5      	b.n	8005a68 <_printf_i+0x230>
 8005a7c:	080064b9 	.word	0x080064b9
 8005a80:	080064ca 	.word	0x080064ca

08005a84 <_sbrk_r>:
 8005a84:	b538      	push	{r3, r4, r5, lr}
 8005a86:	2300      	movs	r3, #0
 8005a88:	4d05      	ldr	r5, [pc, #20]	; (8005aa0 <_sbrk_r+0x1c>)
 8005a8a:	4604      	mov	r4, r0
 8005a8c:	4608      	mov	r0, r1
 8005a8e:	602b      	str	r3, [r5, #0]
 8005a90:	f7fc fa7a 	bl	8001f88 <_sbrk>
 8005a94:	1c43      	adds	r3, r0, #1
 8005a96:	d102      	bne.n	8005a9e <_sbrk_r+0x1a>
 8005a98:	682b      	ldr	r3, [r5, #0]
 8005a9a:	b103      	cbz	r3, 8005a9e <_sbrk_r+0x1a>
 8005a9c:	6023      	str	r3, [r4, #0]
 8005a9e:	bd38      	pop	{r3, r4, r5, pc}
 8005aa0:	20002c54 	.word	0x20002c54

08005aa4 <__sread>:
 8005aa4:	b510      	push	{r4, lr}
 8005aa6:	460c      	mov	r4, r1
 8005aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aac:	f000 f8b6 	bl	8005c1c <_read_r>
 8005ab0:	2800      	cmp	r0, #0
 8005ab2:	bfab      	itete	ge
 8005ab4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005ab6:	89a3      	ldrhlt	r3, [r4, #12]
 8005ab8:	181b      	addge	r3, r3, r0
 8005aba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005abe:	bfac      	ite	ge
 8005ac0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005ac2:	81a3      	strhlt	r3, [r4, #12]
 8005ac4:	bd10      	pop	{r4, pc}

08005ac6 <__swrite>:
 8005ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aca:	461f      	mov	r7, r3
 8005acc:	898b      	ldrh	r3, [r1, #12]
 8005ace:	4605      	mov	r5, r0
 8005ad0:	05db      	lsls	r3, r3, #23
 8005ad2:	460c      	mov	r4, r1
 8005ad4:	4616      	mov	r6, r2
 8005ad6:	d505      	bpl.n	8005ae4 <__swrite+0x1e>
 8005ad8:	2302      	movs	r3, #2
 8005ada:	2200      	movs	r2, #0
 8005adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ae0:	f000 f870 	bl	8005bc4 <_lseek_r>
 8005ae4:	89a3      	ldrh	r3, [r4, #12]
 8005ae6:	4632      	mov	r2, r6
 8005ae8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005aec:	81a3      	strh	r3, [r4, #12]
 8005aee:	4628      	mov	r0, r5
 8005af0:	463b      	mov	r3, r7
 8005af2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005af6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005afa:	f000 b817 	b.w	8005b2c <_write_r>

08005afe <__sseek>:
 8005afe:	b510      	push	{r4, lr}
 8005b00:	460c      	mov	r4, r1
 8005b02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b06:	f000 f85d 	bl	8005bc4 <_lseek_r>
 8005b0a:	1c43      	adds	r3, r0, #1
 8005b0c:	89a3      	ldrh	r3, [r4, #12]
 8005b0e:	bf15      	itete	ne
 8005b10:	6560      	strne	r0, [r4, #84]	; 0x54
 8005b12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005b16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005b1a:	81a3      	strheq	r3, [r4, #12]
 8005b1c:	bf18      	it	ne
 8005b1e:	81a3      	strhne	r3, [r4, #12]
 8005b20:	bd10      	pop	{r4, pc}

08005b22 <__sclose>:
 8005b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b26:	f000 b81b 	b.w	8005b60 <_close_r>
	...

08005b2c <_write_r>:
 8005b2c:	b538      	push	{r3, r4, r5, lr}
 8005b2e:	4604      	mov	r4, r0
 8005b30:	4608      	mov	r0, r1
 8005b32:	4611      	mov	r1, r2
 8005b34:	2200      	movs	r2, #0
 8005b36:	4d05      	ldr	r5, [pc, #20]	; (8005b4c <_write_r+0x20>)
 8005b38:	602a      	str	r2, [r5, #0]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	f7fc f9d8 	bl	8001ef0 <_write>
 8005b40:	1c43      	adds	r3, r0, #1
 8005b42:	d102      	bne.n	8005b4a <_write_r+0x1e>
 8005b44:	682b      	ldr	r3, [r5, #0]
 8005b46:	b103      	cbz	r3, 8005b4a <_write_r+0x1e>
 8005b48:	6023      	str	r3, [r4, #0]
 8005b4a:	bd38      	pop	{r3, r4, r5, pc}
 8005b4c:	20002c54 	.word	0x20002c54

08005b50 <abort>:
 8005b50:	2006      	movs	r0, #6
 8005b52:	b508      	push	{r3, lr}
 8005b54:	f000 f89c 	bl	8005c90 <raise>
 8005b58:	2001      	movs	r0, #1
 8005b5a:	f7fc f9a2 	bl	8001ea2 <_exit>
	...

08005b60 <_close_r>:
 8005b60:	b538      	push	{r3, r4, r5, lr}
 8005b62:	2300      	movs	r3, #0
 8005b64:	4d05      	ldr	r5, [pc, #20]	; (8005b7c <_close_r+0x1c>)
 8005b66:	4604      	mov	r4, r0
 8005b68:	4608      	mov	r0, r1
 8005b6a:	602b      	str	r3, [r5, #0]
 8005b6c:	f7fc f9dc 	bl	8001f28 <_close>
 8005b70:	1c43      	adds	r3, r0, #1
 8005b72:	d102      	bne.n	8005b7a <_close_r+0x1a>
 8005b74:	682b      	ldr	r3, [r5, #0]
 8005b76:	b103      	cbz	r3, 8005b7a <_close_r+0x1a>
 8005b78:	6023      	str	r3, [r4, #0]
 8005b7a:	bd38      	pop	{r3, r4, r5, pc}
 8005b7c:	20002c54 	.word	0x20002c54

08005b80 <_fstat_r>:
 8005b80:	b538      	push	{r3, r4, r5, lr}
 8005b82:	2300      	movs	r3, #0
 8005b84:	4d06      	ldr	r5, [pc, #24]	; (8005ba0 <_fstat_r+0x20>)
 8005b86:	4604      	mov	r4, r0
 8005b88:	4608      	mov	r0, r1
 8005b8a:	4611      	mov	r1, r2
 8005b8c:	602b      	str	r3, [r5, #0]
 8005b8e:	f7fc f9d6 	bl	8001f3e <_fstat>
 8005b92:	1c43      	adds	r3, r0, #1
 8005b94:	d102      	bne.n	8005b9c <_fstat_r+0x1c>
 8005b96:	682b      	ldr	r3, [r5, #0]
 8005b98:	b103      	cbz	r3, 8005b9c <_fstat_r+0x1c>
 8005b9a:	6023      	str	r3, [r4, #0]
 8005b9c:	bd38      	pop	{r3, r4, r5, pc}
 8005b9e:	bf00      	nop
 8005ba0:	20002c54 	.word	0x20002c54

08005ba4 <_isatty_r>:
 8005ba4:	b538      	push	{r3, r4, r5, lr}
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	4d05      	ldr	r5, [pc, #20]	; (8005bc0 <_isatty_r+0x1c>)
 8005baa:	4604      	mov	r4, r0
 8005bac:	4608      	mov	r0, r1
 8005bae:	602b      	str	r3, [r5, #0]
 8005bb0:	f7fc f9d4 	bl	8001f5c <_isatty>
 8005bb4:	1c43      	adds	r3, r0, #1
 8005bb6:	d102      	bne.n	8005bbe <_isatty_r+0x1a>
 8005bb8:	682b      	ldr	r3, [r5, #0]
 8005bba:	b103      	cbz	r3, 8005bbe <_isatty_r+0x1a>
 8005bbc:	6023      	str	r3, [r4, #0]
 8005bbe:	bd38      	pop	{r3, r4, r5, pc}
 8005bc0:	20002c54 	.word	0x20002c54

08005bc4 <_lseek_r>:
 8005bc4:	b538      	push	{r3, r4, r5, lr}
 8005bc6:	4604      	mov	r4, r0
 8005bc8:	4608      	mov	r0, r1
 8005bca:	4611      	mov	r1, r2
 8005bcc:	2200      	movs	r2, #0
 8005bce:	4d05      	ldr	r5, [pc, #20]	; (8005be4 <_lseek_r+0x20>)
 8005bd0:	602a      	str	r2, [r5, #0]
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	f7fc f9cc 	bl	8001f70 <_lseek>
 8005bd8:	1c43      	adds	r3, r0, #1
 8005bda:	d102      	bne.n	8005be2 <_lseek_r+0x1e>
 8005bdc:	682b      	ldr	r3, [r5, #0]
 8005bde:	b103      	cbz	r3, 8005be2 <_lseek_r+0x1e>
 8005be0:	6023      	str	r3, [r4, #0]
 8005be2:	bd38      	pop	{r3, r4, r5, pc}
 8005be4:	20002c54 	.word	0x20002c54

08005be8 <memchr>:
 8005be8:	4603      	mov	r3, r0
 8005bea:	b510      	push	{r4, lr}
 8005bec:	b2c9      	uxtb	r1, r1
 8005bee:	4402      	add	r2, r0
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	d101      	bne.n	8005bfa <memchr+0x12>
 8005bf6:	2000      	movs	r0, #0
 8005bf8:	e003      	b.n	8005c02 <memchr+0x1a>
 8005bfa:	7804      	ldrb	r4, [r0, #0]
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	428c      	cmp	r4, r1
 8005c00:	d1f6      	bne.n	8005bf0 <memchr+0x8>
 8005c02:	bd10      	pop	{r4, pc}

08005c04 <__malloc_lock>:
 8005c04:	4801      	ldr	r0, [pc, #4]	; (8005c0c <__malloc_lock+0x8>)
 8005c06:	f7ff bb04 	b.w	8005212 <__retarget_lock_acquire_recursive>
 8005c0a:	bf00      	nop
 8005c0c:	20002c48 	.word	0x20002c48

08005c10 <__malloc_unlock>:
 8005c10:	4801      	ldr	r0, [pc, #4]	; (8005c18 <__malloc_unlock+0x8>)
 8005c12:	f7ff baff 	b.w	8005214 <__retarget_lock_release_recursive>
 8005c16:	bf00      	nop
 8005c18:	20002c48 	.word	0x20002c48

08005c1c <_read_r>:
 8005c1c:	b538      	push	{r3, r4, r5, lr}
 8005c1e:	4604      	mov	r4, r0
 8005c20:	4608      	mov	r0, r1
 8005c22:	4611      	mov	r1, r2
 8005c24:	2200      	movs	r2, #0
 8005c26:	4d05      	ldr	r5, [pc, #20]	; (8005c3c <_read_r+0x20>)
 8005c28:	602a      	str	r2, [r5, #0]
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	f7fc f943 	bl	8001eb6 <_read>
 8005c30:	1c43      	adds	r3, r0, #1
 8005c32:	d102      	bne.n	8005c3a <_read_r+0x1e>
 8005c34:	682b      	ldr	r3, [r5, #0]
 8005c36:	b103      	cbz	r3, 8005c3a <_read_r+0x1e>
 8005c38:	6023      	str	r3, [r4, #0]
 8005c3a:	bd38      	pop	{r3, r4, r5, pc}
 8005c3c:	20002c54 	.word	0x20002c54

08005c40 <_raise_r>:
 8005c40:	291f      	cmp	r1, #31
 8005c42:	b538      	push	{r3, r4, r5, lr}
 8005c44:	4604      	mov	r4, r0
 8005c46:	460d      	mov	r5, r1
 8005c48:	d904      	bls.n	8005c54 <_raise_r+0x14>
 8005c4a:	2316      	movs	r3, #22
 8005c4c:	6003      	str	r3, [r0, #0]
 8005c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c52:	bd38      	pop	{r3, r4, r5, pc}
 8005c54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005c56:	b112      	cbz	r2, 8005c5e <_raise_r+0x1e>
 8005c58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005c5c:	b94b      	cbnz	r3, 8005c72 <_raise_r+0x32>
 8005c5e:	4620      	mov	r0, r4
 8005c60:	f000 f830 	bl	8005cc4 <_getpid_r>
 8005c64:	462a      	mov	r2, r5
 8005c66:	4601      	mov	r1, r0
 8005c68:	4620      	mov	r0, r4
 8005c6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c6e:	f000 b817 	b.w	8005ca0 <_kill_r>
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d00a      	beq.n	8005c8c <_raise_r+0x4c>
 8005c76:	1c59      	adds	r1, r3, #1
 8005c78:	d103      	bne.n	8005c82 <_raise_r+0x42>
 8005c7a:	2316      	movs	r3, #22
 8005c7c:	6003      	str	r3, [r0, #0]
 8005c7e:	2001      	movs	r0, #1
 8005c80:	e7e7      	b.n	8005c52 <_raise_r+0x12>
 8005c82:	2400      	movs	r4, #0
 8005c84:	4628      	mov	r0, r5
 8005c86:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005c8a:	4798      	blx	r3
 8005c8c:	2000      	movs	r0, #0
 8005c8e:	e7e0      	b.n	8005c52 <_raise_r+0x12>

08005c90 <raise>:
 8005c90:	4b02      	ldr	r3, [pc, #8]	; (8005c9c <raise+0xc>)
 8005c92:	4601      	mov	r1, r0
 8005c94:	6818      	ldr	r0, [r3, #0]
 8005c96:	f7ff bfd3 	b.w	8005c40 <_raise_r>
 8005c9a:	bf00      	nop
 8005c9c:	2000039c 	.word	0x2000039c

08005ca0 <_kill_r>:
 8005ca0:	b538      	push	{r3, r4, r5, lr}
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	4d06      	ldr	r5, [pc, #24]	; (8005cc0 <_kill_r+0x20>)
 8005ca6:	4604      	mov	r4, r0
 8005ca8:	4608      	mov	r0, r1
 8005caa:	4611      	mov	r1, r2
 8005cac:	602b      	str	r3, [r5, #0]
 8005cae:	f7fc f8e8 	bl	8001e82 <_kill>
 8005cb2:	1c43      	adds	r3, r0, #1
 8005cb4:	d102      	bne.n	8005cbc <_kill_r+0x1c>
 8005cb6:	682b      	ldr	r3, [r5, #0]
 8005cb8:	b103      	cbz	r3, 8005cbc <_kill_r+0x1c>
 8005cba:	6023      	str	r3, [r4, #0]
 8005cbc:	bd38      	pop	{r3, r4, r5, pc}
 8005cbe:	bf00      	nop
 8005cc0:	20002c54 	.word	0x20002c54

08005cc4 <_getpid_r>:
 8005cc4:	f7fc b8d6 	b.w	8001e74 <_getpid>

08005cc8 <_gettimeofday>:
 8005cc8:	2258      	movs	r2, #88	; 0x58
 8005cca:	4b02      	ldr	r3, [pc, #8]	; (8005cd4 <_gettimeofday+0xc>)
 8005ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8005cd0:	601a      	str	r2, [r3, #0]
 8005cd2:	4770      	bx	lr
 8005cd4:	20002c54 	.word	0x20002c54

08005cd8 <_init>:
 8005cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cda:	bf00      	nop
 8005cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cde:	bc08      	pop	{r3}
 8005ce0:	469e      	mov	lr, r3
 8005ce2:	4770      	bx	lr

08005ce4 <_fini>:
 8005ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ce6:	bf00      	nop
 8005ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cea:	bc08      	pop	{r3}
 8005cec:	469e      	mov	lr, r3
 8005cee:	4770      	bx	lr
