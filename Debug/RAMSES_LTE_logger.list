
RAMSES_LTE_logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005768  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009f4  080058a4  080058a4  000158a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006298  08006298  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006298  08006298  00016298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062a0  080062a0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062a0  080062a0  000162a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062a4  080062a4  000162a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080062a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011b0  20000070  08006318  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001220  08006318  00021220  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a152  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d69  00000000  00000000  0002a1eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000800  00000000  00000000  0002bf58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000748  00000000  00000000  0002c758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001691a  00000000  00000000  0002cea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a6a2  00000000  00000000  000437ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008652b  00000000  00000000  0004de5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d4387  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b9c  00000000  00000000  000d43d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  000d6f74  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000d6f98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	0800588c 	.word	0x0800588c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	0800588c 	.word	0x0800588c

0800017c <strcmp>:
 800017c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000180:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000184:	2a01      	cmp	r2, #1
 8000186:	bf28      	it	cs
 8000188:	429a      	cmpcs	r2, r3
 800018a:	d0f7      	beq.n	800017c <strcmp>
 800018c:	1ad0      	subs	r0, r2, r3
 800018e:	4770      	bx	lr

08000190 <strlen>:
 8000190:	4603      	mov	r3, r0
 8000192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000196:	2a00      	cmp	r2, #0
 8000198:	d1fb      	bne.n	8000192 <strlen+0x2>
 800019a:	1a18      	subs	r0, r3, r0
 800019c:	3801      	subs	r0, #1
 800019e:	4770      	bx	lr

080001a0 <__aeabi_uldivmod>:
 80001a0:	b953      	cbnz	r3, 80001b8 <__aeabi_uldivmod+0x18>
 80001a2:	b94a      	cbnz	r2, 80001b8 <__aeabi_uldivmod+0x18>
 80001a4:	2900      	cmp	r1, #0
 80001a6:	bf08      	it	eq
 80001a8:	2800      	cmpeq	r0, #0
 80001aa:	bf1c      	itt	ne
 80001ac:	f04f 31ff 	movne.w	r1, #4294967295
 80001b0:	f04f 30ff 	movne.w	r0, #4294967295
 80001b4:	f000 b976 	b.w	80004a4 <__aeabi_idiv0>
 80001b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001c0:	f000 f806 	bl	80001d0 <__udivmoddi4>
 80001c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001cc:	b004      	add	sp, #16
 80001ce:	4770      	bx	lr

080001d0 <__udivmoddi4>:
 80001d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001d4:	9e08      	ldr	r6, [sp, #32]
 80001d6:	460d      	mov	r5, r1
 80001d8:	4604      	mov	r4, r0
 80001da:	4688      	mov	r8, r1
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d14d      	bne.n	800027c <__udivmoddi4+0xac>
 80001e0:	428a      	cmp	r2, r1
 80001e2:	4694      	mov	ip, r2
 80001e4:	d968      	bls.n	80002b8 <__udivmoddi4+0xe8>
 80001e6:	fab2 f282 	clz	r2, r2
 80001ea:	b152      	cbz	r2, 8000202 <__udivmoddi4+0x32>
 80001ec:	fa01 f302 	lsl.w	r3, r1, r2
 80001f0:	f1c2 0120 	rsb	r1, r2, #32
 80001f4:	fa20 f101 	lsr.w	r1, r0, r1
 80001f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80001fc:	ea41 0803 	orr.w	r8, r1, r3
 8000200:	4094      	lsls	r4, r2
 8000202:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000206:	fbb8 f7f1 	udiv	r7, r8, r1
 800020a:	fa1f fe8c 	uxth.w	lr, ip
 800020e:	fb01 8817 	mls	r8, r1, r7, r8
 8000212:	fb07 f00e 	mul.w	r0, r7, lr
 8000216:	0c23      	lsrs	r3, r4, #16
 8000218:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800021c:	4298      	cmp	r0, r3
 800021e:	d90a      	bls.n	8000236 <__udivmoddi4+0x66>
 8000220:	eb1c 0303 	adds.w	r3, ip, r3
 8000224:	f107 35ff 	add.w	r5, r7, #4294967295
 8000228:	f080 811e 	bcs.w	8000468 <__udivmoddi4+0x298>
 800022c:	4298      	cmp	r0, r3
 800022e:	f240 811b 	bls.w	8000468 <__udivmoddi4+0x298>
 8000232:	3f02      	subs	r7, #2
 8000234:	4463      	add	r3, ip
 8000236:	1a1b      	subs	r3, r3, r0
 8000238:	fbb3 f0f1 	udiv	r0, r3, r1
 800023c:	fb01 3310 	mls	r3, r1, r0, r3
 8000240:	fb00 fe0e 	mul.w	lr, r0, lr
 8000244:	b2a4      	uxth	r4, r4
 8000246:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800024a:	45a6      	cmp	lr, r4
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x94>
 800024e:	eb1c 0404 	adds.w	r4, ip, r4
 8000252:	f100 33ff 	add.w	r3, r0, #4294967295
 8000256:	f080 8109 	bcs.w	800046c <__udivmoddi4+0x29c>
 800025a:	45a6      	cmp	lr, r4
 800025c:	f240 8106 	bls.w	800046c <__udivmoddi4+0x29c>
 8000260:	4464      	add	r4, ip
 8000262:	3802      	subs	r0, #2
 8000264:	2100      	movs	r1, #0
 8000266:	eba4 040e 	sub.w	r4, r4, lr
 800026a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800026e:	b11e      	cbz	r6, 8000278 <__udivmoddi4+0xa8>
 8000270:	2300      	movs	r3, #0
 8000272:	40d4      	lsrs	r4, r2
 8000274:	e9c6 4300 	strd	r4, r3, [r6]
 8000278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027c:	428b      	cmp	r3, r1
 800027e:	d908      	bls.n	8000292 <__udivmoddi4+0xc2>
 8000280:	2e00      	cmp	r6, #0
 8000282:	f000 80ee 	beq.w	8000462 <__udivmoddi4+0x292>
 8000286:	2100      	movs	r1, #0
 8000288:	e9c6 0500 	strd	r0, r5, [r6]
 800028c:	4608      	mov	r0, r1
 800028e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000292:	fab3 f183 	clz	r1, r3
 8000296:	2900      	cmp	r1, #0
 8000298:	d14a      	bne.n	8000330 <__udivmoddi4+0x160>
 800029a:	42ab      	cmp	r3, r5
 800029c:	d302      	bcc.n	80002a4 <__udivmoddi4+0xd4>
 800029e:	4282      	cmp	r2, r0
 80002a0:	f200 80fc 	bhi.w	800049c <__udivmoddi4+0x2cc>
 80002a4:	1a84      	subs	r4, r0, r2
 80002a6:	eb65 0303 	sbc.w	r3, r5, r3
 80002aa:	2001      	movs	r0, #1
 80002ac:	4698      	mov	r8, r3
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	d0e2      	beq.n	8000278 <__udivmoddi4+0xa8>
 80002b2:	e9c6 4800 	strd	r4, r8, [r6]
 80002b6:	e7df      	b.n	8000278 <__udivmoddi4+0xa8>
 80002b8:	b902      	cbnz	r2, 80002bc <__udivmoddi4+0xec>
 80002ba:	deff      	udf	#255	; 0xff
 80002bc:	fab2 f282 	clz	r2, r2
 80002c0:	2a00      	cmp	r2, #0
 80002c2:	f040 8091 	bne.w	80003e8 <__udivmoddi4+0x218>
 80002c6:	eba1 000c 	sub.w	r0, r1, ip
 80002ca:	2101      	movs	r1, #1
 80002cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d0:	fa1f fe8c 	uxth.w	lr, ip
 80002d4:	fbb0 f3f7 	udiv	r3, r0, r7
 80002d8:	fb07 0013 	mls	r0, r7, r3, r0
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002e2:	fb0e f003 	mul.w	r0, lr, r3
 80002e6:	42a8      	cmp	r0, r5
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0x12c>
 80002ea:	eb1c 0505 	adds.w	r5, ip, r5
 80002ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x12a>
 80002f4:	42a8      	cmp	r0, r5
 80002f6:	f200 80ce 	bhi.w	8000496 <__udivmoddi4+0x2c6>
 80002fa:	4643      	mov	r3, r8
 80002fc:	1a2d      	subs	r5, r5, r0
 80002fe:	fbb5 f0f7 	udiv	r0, r5, r7
 8000302:	fb07 5510 	mls	r5, r7, r0, r5
 8000306:	fb0e fe00 	mul.w	lr, lr, r0
 800030a:	b2a4      	uxth	r4, r4
 800030c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000310:	45a6      	cmp	lr, r4
 8000312:	d908      	bls.n	8000326 <__udivmoddi4+0x156>
 8000314:	eb1c 0404 	adds.w	r4, ip, r4
 8000318:	f100 35ff 	add.w	r5, r0, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x154>
 800031e:	45a6      	cmp	lr, r4
 8000320:	f200 80b6 	bhi.w	8000490 <__udivmoddi4+0x2c0>
 8000324:	4628      	mov	r0, r5
 8000326:	eba4 040e 	sub.w	r4, r4, lr
 800032a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800032e:	e79e      	b.n	800026e <__udivmoddi4+0x9e>
 8000330:	f1c1 0720 	rsb	r7, r1, #32
 8000334:	408b      	lsls	r3, r1
 8000336:	fa22 fc07 	lsr.w	ip, r2, r7
 800033a:	ea4c 0c03 	orr.w	ip, ip, r3
 800033e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000342:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000346:	fbba f8f9 	udiv	r8, sl, r9
 800034a:	fa20 f307 	lsr.w	r3, r0, r7
 800034e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000352:	408d      	lsls	r5, r1
 8000354:	fa1f fe8c 	uxth.w	lr, ip
 8000358:	431d      	orrs	r5, r3
 800035a:	fa00 f301 	lsl.w	r3, r0, r1
 800035e:	fb08 f00e 	mul.w	r0, r8, lr
 8000362:	0c2c      	lsrs	r4, r5, #16
 8000364:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000368:	42a0      	cmp	r0, r4
 800036a:	fa02 f201 	lsl.w	r2, r2, r1
 800036e:	d90b      	bls.n	8000388 <__udivmoddi4+0x1b8>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f108 3aff 	add.w	sl, r8, #4294967295
 8000378:	f080 8088 	bcs.w	800048c <__udivmoddi4+0x2bc>
 800037c:	42a0      	cmp	r0, r4
 800037e:	f240 8085 	bls.w	800048c <__udivmoddi4+0x2bc>
 8000382:	f1a8 0802 	sub.w	r8, r8, #2
 8000386:	4464      	add	r4, ip
 8000388:	1a24      	subs	r4, r4, r0
 800038a:	fbb4 f0f9 	udiv	r0, r4, r9
 800038e:	fb09 4410 	mls	r4, r9, r0, r4
 8000392:	fb00 fe0e 	mul.w	lr, r0, lr
 8000396:	b2ad      	uxth	r5, r5
 8000398:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800039c:	45a6      	cmp	lr, r4
 800039e:	d908      	bls.n	80003b2 <__udivmoddi4+0x1e2>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f100 35ff 	add.w	r5, r0, #4294967295
 80003a8:	d26c      	bcs.n	8000484 <__udivmoddi4+0x2b4>
 80003aa:	45a6      	cmp	lr, r4
 80003ac:	d96a      	bls.n	8000484 <__udivmoddi4+0x2b4>
 80003ae:	3802      	subs	r0, #2
 80003b0:	4464      	add	r4, ip
 80003b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003b6:	fba0 9502 	umull	r9, r5, r0, r2
 80003ba:	eba4 040e 	sub.w	r4, r4, lr
 80003be:	42ac      	cmp	r4, r5
 80003c0:	46c8      	mov	r8, r9
 80003c2:	46ae      	mov	lr, r5
 80003c4:	d356      	bcc.n	8000474 <__udivmoddi4+0x2a4>
 80003c6:	d053      	beq.n	8000470 <__udivmoddi4+0x2a0>
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d069      	beq.n	80004a0 <__udivmoddi4+0x2d0>
 80003cc:	ebb3 0208 	subs.w	r2, r3, r8
 80003d0:	eb64 040e 	sbc.w	r4, r4, lr
 80003d4:	fa22 f301 	lsr.w	r3, r2, r1
 80003d8:	fa04 f707 	lsl.w	r7, r4, r7
 80003dc:	431f      	orrs	r7, r3
 80003de:	40cc      	lsrs	r4, r1
 80003e0:	e9c6 7400 	strd	r7, r4, [r6]
 80003e4:	2100      	movs	r1, #0
 80003e6:	e747      	b.n	8000278 <__udivmoddi4+0xa8>
 80003e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ec:	f1c2 0120 	rsb	r1, r2, #32
 80003f0:	fa25 f301 	lsr.w	r3, r5, r1
 80003f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f8:	fa20 f101 	lsr.w	r1, r0, r1
 80003fc:	4095      	lsls	r5, r2
 80003fe:	430d      	orrs	r5, r1
 8000400:	fbb3 f1f7 	udiv	r1, r3, r7
 8000404:	fb07 3311 	mls	r3, r7, r1, r3
 8000408:	fa1f fe8c 	uxth.w	lr, ip
 800040c:	0c28      	lsrs	r0, r5, #16
 800040e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000412:	fb01 f30e 	mul.w	r3, r1, lr
 8000416:	4283      	cmp	r3, r0
 8000418:	fa04 f402 	lsl.w	r4, r4, r2
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x260>
 800041e:	eb1c 0000 	adds.w	r0, ip, r0
 8000422:	f101 38ff 	add.w	r8, r1, #4294967295
 8000426:	d22f      	bcs.n	8000488 <__udivmoddi4+0x2b8>
 8000428:	4283      	cmp	r3, r0
 800042a:	d92d      	bls.n	8000488 <__udivmoddi4+0x2b8>
 800042c:	3902      	subs	r1, #2
 800042e:	4460      	add	r0, ip
 8000430:	1ac0      	subs	r0, r0, r3
 8000432:	fbb0 f3f7 	udiv	r3, r0, r7
 8000436:	fb07 0013 	mls	r0, r7, r3, r0
 800043a:	b2ad      	uxth	r5, r5
 800043c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000440:	fb03 f00e 	mul.w	r0, r3, lr
 8000444:	42a8      	cmp	r0, r5
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x28a>
 8000448:	eb1c 0505 	adds.w	r5, ip, r5
 800044c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000450:	d216      	bcs.n	8000480 <__udivmoddi4+0x2b0>
 8000452:	42a8      	cmp	r0, r5
 8000454:	d914      	bls.n	8000480 <__udivmoddi4+0x2b0>
 8000456:	3b02      	subs	r3, #2
 8000458:	4465      	add	r5, ip
 800045a:	1a28      	subs	r0, r5, r0
 800045c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000460:	e738      	b.n	80002d4 <__udivmoddi4+0x104>
 8000462:	4631      	mov	r1, r6
 8000464:	4630      	mov	r0, r6
 8000466:	e707      	b.n	8000278 <__udivmoddi4+0xa8>
 8000468:	462f      	mov	r7, r5
 800046a:	e6e4      	b.n	8000236 <__udivmoddi4+0x66>
 800046c:	4618      	mov	r0, r3
 800046e:	e6f9      	b.n	8000264 <__udivmoddi4+0x94>
 8000470:	454b      	cmp	r3, r9
 8000472:	d2a9      	bcs.n	80003c8 <__udivmoddi4+0x1f8>
 8000474:	ebb9 0802 	subs.w	r8, r9, r2
 8000478:	eb65 0e0c 	sbc.w	lr, r5, ip
 800047c:	3801      	subs	r0, #1
 800047e:	e7a3      	b.n	80003c8 <__udivmoddi4+0x1f8>
 8000480:	4643      	mov	r3, r8
 8000482:	e7ea      	b.n	800045a <__udivmoddi4+0x28a>
 8000484:	4628      	mov	r0, r5
 8000486:	e794      	b.n	80003b2 <__udivmoddi4+0x1e2>
 8000488:	4641      	mov	r1, r8
 800048a:	e7d1      	b.n	8000430 <__udivmoddi4+0x260>
 800048c:	46d0      	mov	r8, sl
 800048e:	e77b      	b.n	8000388 <__udivmoddi4+0x1b8>
 8000490:	4464      	add	r4, ip
 8000492:	3802      	subs	r0, #2
 8000494:	e747      	b.n	8000326 <__udivmoddi4+0x156>
 8000496:	3b02      	subs	r3, #2
 8000498:	4465      	add	r5, ip
 800049a:	e72f      	b.n	80002fc <__udivmoddi4+0x12c>
 800049c:	4608      	mov	r0, r1
 800049e:	e706      	b.n	80002ae <__udivmoddi4+0xde>
 80004a0:	4631      	mov	r1, r6
 80004a2:	e6e9      	b.n	8000278 <__udivmoddi4+0xa8>

080004a4 <__aeabi_idiv0>:
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop

080004a8 <UARTDMA_UartIrqHandler>:
#include "string.h"
#include "scheduler.h"


void UARTDMA_UartIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
	if(huartdma->huart->Instance->SR & UART_FLAG_IDLE)       // Check if Idle flag is set
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	f003 0310 	and.w	r3, r3, #16
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d01a      	beq.n	80004f6 <UARTDMA_UartIrqHandler+0x4e>
	{

		volatile uint32_t tmp;
		tmp = huartdma->huart->Instance->SR;                      // Read status register
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	60fb      	str	r3, [r7, #12]
		tmp = huartdma->huart->Instance->DR;                      // Read data register
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	685b      	ldr	r3, [r3, #4]
 80004d2:	60fb      	str	r3, [r7, #12]
		huartdma->huart->hdmarx->Instance->CCR &= ~DMA_CCR_EN; 	  // Disable DMA - it will force Transfer Complete interrupt if it's enabled
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	f022 0201 	bic.w	r2, r2, #1
 80004ea:	601a      	str	r2, [r3, #0]
																  // BUT! It's only for DMA Streams(i.e F4), not for Channels like there in F103!
		tmp = tmp; // For unused warning
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	60fb      	str	r3, [r7, #12]
		UARTDMA_DmaIrqHandler(huartdma); // Since DMA IRQ won't start independently for Channels, we have to handle it manually
 80004f0:	6878      	ldr	r0, [r7, #4]
 80004f2:	f000 f804 	bl	80004fe <UARTDMA_DmaIrqHandler>
	}
}
 80004f6:	bf00      	nop
 80004f8:	3710      	adds	r7, #16
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <UARTDMA_DmaIrqHandler>:

void UARTDMA_DmaIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 80004fe:	b480      	push	{r7}
 8000500:	b089      	sub	sp, #36	; 0x24
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
	{
		__IO uint32_t ISR;   // DMA interrupt status register
		__IO uint32_t IFCR;  // DMA interrupt flag clear register
	} DMA_Base_Registers;

	DMA_Base_Registers *DmaRegisters = (DMA_Base_Registers *) huartdma->huart->hdmarx->DmaBaseAddress; // Take registers base address
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800050c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800050e:	61bb      	str	r3, [r7, #24]

	if (__HAL_DMA_GET_IT_SOURCE(huartdma->huart->hdmarx, DMA_IT_TC) != RESET) // Check if interrupt source is Transfer Complete
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f003 0302 	and.w	r3, r3, #2
 800051e:	2b00      	cmp	r3, #0
 8000520:	d075      	beq.n	800060e <UARTDMA_DmaIrqHandler+0x110>
	{
		DmaRegisters->IFCR = DMA_IFCR_CTCIF1 << huartdma->huart->hdmarx->ChannelIndex;	// Clear Transfer Complete flag
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052a:	2202      	movs	r2, #2
 800052c:	409a      	lsls	r2, r3
 800052e:	69bb      	ldr	r3, [r7, #24]
 8000530:	605a      	str	r2, [r3, #4]

		Length = DMA_RX_BUFFER_SIZE - huartdma->huart->hdmarx->Instance->CNDTR; // Get the Length of transfered data
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8000540:	617b      	str	r3, [r7, #20]

		UartBufferPointer = huartdma->UART_Buffer;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8000548:	613b      	str	r3, [r7, #16]
		DmaBufferPointer = 	huartdma->DMA_RX_Buffer;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	3304      	adds	r3, #4
 800054e:	60fb      	str	r3, [r7, #12]

		// Write received data for UART main buffer - circular buffer
		for(i = 0; i < Length; i++)
 8000550:	2300      	movs	r3, #0
 8000552:	83fb      	strh	r3, [r7, #30]
 8000554:	e035      	b.n	80005c2 <UARTDMA_DmaIrqHandler+0xc4>
		{
			TempHead = (huartdma->UartBufferHead + 1) % UART_BUFFER_SIZE;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	f8b3 3c04 	ldrh.w	r3, [r3, #3076]	; 0xc04
 800055c:	3301      	adds	r3, #1
 800055e:	425a      	negs	r2, r3
 8000560:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000564:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000568:	bf58      	it	pl
 800056a:	4253      	negpl	r3, r2
 800056c:	817b      	strh	r3, [r7, #10]
			if(TempHead == huartdma->UartBufferTail)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 8000574:	897a      	ldrh	r2, [r7, #10]
 8000576:	429a      	cmp	r2, r3
 8000578:	d106      	bne.n	8000588 <UARTDMA_DmaIrqHandler+0x8a>
			{
				huartdma->UartBufferHead = huartdma->UartBufferTail;	// No room for new data
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	f8b3 2c06 	ldrh.w	r2, [r3, #3078]	; 0xc06
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	f8a3 2c04 	strh.w	r2, [r3, #3076]	; 0xc04
 8000586:	e019      	b.n	80005bc <UARTDMA_DmaIrqHandler+0xbe>
			}
			else
			{
				UartBufferPointer[TempHead] = DmaBufferPointer[i];
 8000588:	8bfb      	ldrh	r3, [r7, #30]
 800058a:	68fa      	ldr	r2, [r7, #12]
 800058c:	441a      	add	r2, r3
 800058e:	897b      	ldrh	r3, [r7, #10]
 8000590:	6939      	ldr	r1, [r7, #16]
 8000592:	440b      	add	r3, r1
 8000594:	7812      	ldrb	r2, [r2, #0]
 8000596:	701a      	strb	r2, [r3, #0]
				if(UartBufferPointer[TempHead] == '\n')
 8000598:	897b      	ldrh	r3, [r7, #10]
 800059a:	693a      	ldr	r2, [r7, #16]
 800059c:	4413      	add	r3, r2
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b0a      	cmp	r3, #10
 80005a2:	d107      	bne.n	80005b4 <UARTDMA_DmaIrqHandler+0xb6>
				{
					huartdma->UartBufferLines++;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f893 3c08 	ldrb.w	r3, [r3, #3080]	; 0xc08
 80005aa:	3301      	adds	r3, #1
 80005ac:	b2da      	uxtb	r2, r3
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	f883 2c08 	strb.w	r2, [r3, #3080]	; 0xc08
				}
				huartdma->UartBufferHead = TempHead;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	897a      	ldrh	r2, [r7, #10]
 80005b8:	f8a3 2c04 	strh.w	r2, [r3, #3076]	; 0xc04
		for(i = 0; i < Length; i++)
 80005bc:	8bfb      	ldrh	r3, [r7, #30]
 80005be:	3301      	adds	r3, #1
 80005c0:	83fb      	strh	r3, [r7, #30]
 80005c2:	8bfb      	ldrh	r3, [r7, #30]
 80005c4:	697a      	ldr	r2, [r7, #20]
 80005c6:	429a      	cmp	r2, r3
 80005c8:	d8c5      	bhi.n	8000556 <UARTDMA_DmaIrqHandler+0x58>
			}
		}


		DmaRegisters->IFCR = 0x0FU << huartdma->huart->hdmarx->ChannelIndex; 		// Clear all interrupts
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d2:	220f      	movs	r2, #15
 80005d4:	409a      	lsls	r2, r3
 80005d6:	69bb      	ldr	r3, [r7, #24]
 80005d8:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CMAR = (uint32_t) huartdma->DMA_RX_Buffer; // Set memory address for DMA again
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	1d1a      	adds	r2, r3, #4
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	60da      	str	r2, [r3, #12]
		huartdma->huart->hdmarx->Instance->CNDTR = DMA_RX_BUFFER_SIZE; // Set number of bytes to receive
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005f4:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CCR |= DMA_CCR_EN;            	// Start DMA transfer
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f042 0201 	orr.w	r2, r2, #1
 800060c:	601a      	str	r2, [r3, #0]
	}
}
 800060e:	bf00      	nop
 8000610:	3724      	adds	r7, #36	; 0x24
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr

08000618 <UARTDMA_GetCharFromBuffer>:

int UARTDMA_GetCharFromBuffer(UARTDMA_HandleTypeDef *huartdma)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	if(huartdma->UartBufferHead == huartdma->UartBufferTail)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f8b3 2c04 	ldrh.w	r2, [r3, #3076]	; 0xc04
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 800062c:	429a      	cmp	r2, r3
 800062e:	d102      	bne.n	8000636 <UARTDMA_GetCharFromBuffer+0x1e>
	{
		return -1; // error - no char to return
 8000630:	f04f 33ff 	mov.w	r3, #4294967295
 8000634:	e016      	b.n	8000664 <UARTDMA_GetCharFromBuffer+0x4c>
	}
	huartdma->UartBufferTail = (huartdma->UartBufferTail + 1) % UART_BUFFER_SIZE;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 800063c:	3301      	adds	r3, #1
 800063e:	425a      	negs	r2, r3
 8000640:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000644:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000648:	bf58      	it	pl
 800064a:	4253      	negpl	r3, r2
 800064c:	b29a      	uxth	r2, r3
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	f8a3 2c06 	strh.w	r2, [r3, #3078]	; 0xc06

	return huartdma->UART_Buffer[huartdma->UartBufferTail];
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 800065a:	461a      	mov	r2, r3
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	4413      	add	r3, r2
 8000660:	f893 3404 	ldrb.w	r3, [r3, #1028]	; 0x404
}
 8000664:	4618      	mov	r0, r3
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	bc80      	pop	{r7}
 800066c:	4770      	bx	lr

0800066e <UARTDMA_IsDataReady>:

uint8_t UARTDMA_IsDataReady(UARTDMA_HandleTypeDef *huartdma)
{
 800066e:	b480      	push	{r7}
 8000670:	b083      	sub	sp, #12
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
	if(huartdma->UartBufferLines)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f893 3c08 	ldrb.w	r3, [r3, #3080]	; 0xc08
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <UARTDMA_IsDataReady+0x16>
		return 1;
 8000680:	2301      	movs	r3, #1
 8000682:	e000      	b.n	8000686 <UARTDMA_IsDataReady+0x18>
	else
		return 0;
 8000684:	2300      	movs	r3, #0
}
 8000686:	4618      	mov	r0, r3
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr

08000690 <UARTDMA_GetLineFromBuffer>:

int UARTDMA_GetLineFromBuffer(UARTDMA_HandleTypeDef *huartdma, char *OutBuffer)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	6039      	str	r1, [r7, #0]
	char TempChar;
	char* LinePointer = OutBuffer;
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	60fb      	str	r3, [r7, #12]
	if(huartdma->UartBufferLines)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	f893 3c08 	ldrb.w	r3, [r3, #3080]	; 0xc08
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d024      	beq.n	80006f2 <UARTDMA_GetLineFromBuffer+0x62>
	{
		while((TempChar = UARTDMA_GetCharFromBuffer(huartdma)))
 80006a8:	e00e      	b.n	80006c8 <UARTDMA_GetLineFromBuffer+0x38>
		{
			if(TempChar == '\n')
 80006aa:	7afb      	ldrb	r3, [r7, #11]
 80006ac:	2b0a      	cmp	r3, #10
 80006ae:	d014      	beq.n	80006da <UARTDMA_GetLineFromBuffer+0x4a>
			{
				break;
			}
			if((TempChar != '\n') && (TempChar != '\r')){
 80006b0:	7afb      	ldrb	r3, [r7, #11]
 80006b2:	2b0a      	cmp	r3, #10
 80006b4:	d008      	beq.n	80006c8 <UARTDMA_GetLineFromBuffer+0x38>
 80006b6:	7afb      	ldrb	r3, [r7, #11]
 80006b8:	2b0d      	cmp	r3, #13
 80006ba:	d005      	beq.n	80006c8 <UARTDMA_GetLineFromBuffer+0x38>
				*LinePointer = TempChar;
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	7afa      	ldrb	r2, [r7, #11]
 80006c0:	701a      	strb	r2, [r3, #0]
				LinePointer++;
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	3301      	adds	r3, #1
 80006c6:	60fb      	str	r3, [r7, #12]
		while((TempChar = UARTDMA_GetCharFromBuffer(huartdma)))
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f7ff ffa5 	bl	8000618 <UARTDMA_GetCharFromBuffer>
 80006ce:	4603      	mov	r3, r0
 80006d0:	72fb      	strb	r3, [r7, #11]
 80006d2:	7afb      	ldrb	r3, [r7, #11]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d1e8      	bne.n	80006aa <UARTDMA_GetLineFromBuffer+0x1a>
 80006d8:	e000      	b.n	80006dc <UARTDMA_GetLineFromBuffer+0x4c>
				break;
 80006da:	bf00      	nop
			}
		}
		*LinePointer = 0; // end of cstring
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]
		huartdma->UartBufferLines--; // decrement line counter
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	f893 3c08 	ldrb.w	r3, [r3, #3080]	; 0xc08
 80006e8:	3b01      	subs	r3, #1
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	f883 2c08 	strb.w	r2, [r3, #3080]	; 0xc08
	}
	return 0;
 80006f2:	2300      	movs	r3, #0
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3710      	adds	r7, #16
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <UARTDMA_Init>:

void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	6039      	str	r1, [r7, #0]
	huartdma->huart = huart;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	683a      	ldr	r2, [r7, #0]
 800070a:	601a      	str	r2, [r3, #0]

	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	68da      	ldr	r2, [r3, #12]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f042 0210 	orr.w	r2, r2, #16
 800071e:	60da      	str	r2, [r3, #12]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f042 0202 	orr.w	r2, r2, #2
 8000736:	601a      	str	r2, [r3, #0]

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	6818      	ldr	r0, [r3, #0]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3304      	adds	r3, #4
 8000740:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000744:	4619      	mov	r1, r3
 8000746:	f003 fa6e 	bl	8003c26 <HAL_UART_Receive_DMA>

	huartdma->huart->hdmarx->Instance->CCR &= ~DMA_CCR_HTIE; // Disable DMA Half Complete interrupt
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f022 0204 	bic.w	r2, r2, #4
 8000760:	601a      	str	r2, [r3, #0]
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
	...

0800076c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000774:	1d39      	adds	r1, r7, #4
 8000776:	f04f 33ff 	mov.w	r3, #4294967295
 800077a:	2201      	movs	r2, #1
 800077c:	4803      	ldr	r0, [pc, #12]	; (800078c <__io_putchar+0x20>)
 800077e:	f003 f9cf 	bl	8003b20 <HAL_UART_Transmit>
	return ch;
 8000782:	687b      	ldr	r3, [r7, #4]
}
 8000784:	4618      	mov	r0, r3
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000ce0 	.word	0x20000ce0

08000790 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000792:	f5ad 5d01 	sub.w	sp, sp, #8256	; 0x2040
 8000796:	b081      	sub	sp, #4
 8000798:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800079a:	f001 ff30 	bl	80025fe <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800079e:	f001 fa6b 	bl	8001c78 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */

	srand(time(NULL));
 80007a2:	2000      	movs	r0, #0
 80007a4:	f003 fffc 	bl	80047a0 <time>
 80007a8:	4602      	mov	r2, r0
 80007aa:	460b      	mov	r3, r1
 80007ac:	4613      	mov	r3, r2
 80007ae:	4618      	mov	r0, r3
 80007b0:	f003 fed6 	bl	8004560 <srand>

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80007b4:	f001 fb74 	bl	8001ea0 <MX_GPIO_Init>
	MX_DMA_Init();
 80007b8:	f001 fb54 	bl	8001e64 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80007bc:	f001 fafe 	bl	8001dbc <MX_USART2_UART_Init>
	MX_UART4_Init();
 80007c0:	f001 faa8 	bl	8001d14 <MX_UART4_Init>
	MX_USART1_UART_Init();
 80007c4:	f001 fad0 	bl	8001d68 <MX_USART1_UART_Init>
	MX_USART3_UART_Init();
 80007c8:	f001 fb22 	bl	8001e10 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	UARTDMA_Init(&huartdma6, &huart2);
 80007cc:	49d4      	ldr	r1, [pc, #848]	; (8000b20 <main+0x390>)
 80007ce:	48d5      	ldr	r0, [pc, #852]	; (8000b24 <main+0x394>)
 80007d0:	f7ff ff94 	bl	80006fc <UARTDMA_Init>
	/* USER CODE BEGIN WHILE */




	command LTE_sim_check_active = {
 80007d4:	4bd4      	ldr	r3, [pc, #848]	; (8000b28 <main+0x398>)
 80007d6:	f507 54ff 	add.w	r4, r7, #8160	; 0x1fe0
 80007da:	f104 040c 	add.w	r4, r4, #12
 80007de:	461d      	mov	r5, r3
 80007e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007e4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80007e8:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = RETRY,
			.retry_counter = 3
	};

	command LTE_disable_echo = {
 80007ec:	4bcf      	ldr	r3, [pc, #828]	; (8000b2c <main+0x39c>)
 80007ee:	f507 54fe 	add.w	r4, r7, #8128	; 0x1fc0
 80007f2:	f104 0414 	add.w	r4, r4, #20
 80007f6:	461d      	mov	r5, r3
 80007f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007fc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000800:	e884 0003 	stmia.w	r4, {r0, r1}
			.retry_counter = 3
	};



	command LTE_deactivate_gprs = {
 8000804:	4bca      	ldr	r3, [pc, #808]	; (8000b30 <main+0x3a0>)
 8000806:	f507 54fd 	add.w	r4, r7, #8096	; 0x1fa0
 800080a:	f104 041c 	add.w	r4, r4, #28
 800080e:	461d      	mov	r5, r3
 8000810:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000812:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000814:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000818:	e884 0003 	stmia.w	r4, {r0, r1}
			.act_on_error = RETRY,
			.retry_counter = 3
	};


	command LTE_attach_gprs = {
 800081c:	4bc5      	ldr	r3, [pc, #788]	; (8000b34 <main+0x3a4>)
 800081e:	f507 54fd 	add.w	r4, r7, #8096	; 0x1fa0
 8000822:	f104 0404 	add.w	r4, r4, #4
 8000826:	461d      	mov	r5, r3
 8000828:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800082a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800082c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000830:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = RETRY,
			.retry_counter = 3
	};

	command LTE_set_apn = {
 8000834:	4bc0      	ldr	r3, [pc, #768]	; (8000b38 <main+0x3a8>)
 8000836:	f507 54fc 	add.w	r4, r7, #8064	; 0x1f80
 800083a:	f104 040c 	add.w	r4, r4, #12
 800083e:	461d      	mov	r5, r3
 8000840:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000842:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000844:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000848:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = RETRY,
			.retry_counter = 3
	};

	command LTE_gprs_up = {
 800084c:	4bbb      	ldr	r3, [pc, #748]	; (8000b3c <main+0x3ac>)
 800084e:	f507 54fb 	add.w	r4, r7, #8032	; 0x1f60
 8000852:	f104 0414 	add.w	r4, r4, #20
 8000856:	461d      	mov	r5, r3
 8000858:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800085a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800085c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000860:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = RETRY,
			.retry_counter = 3
	};

	command LTE_get_ip = {
 8000864:	4bb6      	ldr	r3, [pc, #728]	; (8000b40 <main+0x3b0>)
 8000866:	f507 54fa 	add.w	r4, r7, #8000	; 0x1f40
 800086a:	f104 041c 	add.w	r4, r4, #28
 800086e:	461d      	mov	r5, r3
 8000870:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000872:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000874:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000878:	e884 0003 	stmia.w	r4, {r0, r1}
			.act_on_error = RETRY,
			.retry_counter = 3
	};


	command LTE_init_gps = {
 800087c:	4bb1      	ldr	r3, [pc, #708]	; (8000b44 <main+0x3b4>)
 800087e:	f507 54fa 	add.w	r4, r7, #8000	; 0x1f40
 8000882:	f104 0404 	add.w	r4, r4, #4
 8000886:	461d      	mov	r5, r3
 8000888:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800088a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800088c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000890:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = RETRY,
			.retry_counter = 3
	};

	command LTE_get_position = {
 8000894:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000898:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800089c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80008a0:	4aa9      	ldr	r2, [pc, #676]	; (8000b48 <main+0x3b8>)
 80008a2:	461c      	mov	r4, r3
 80008a4:	4615      	mov	r5, r2
 80008a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008aa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80008ae:	e884 0003 	stmia.w	r4, {r0, r1}
			.act_on_error = RETRY,
			.retry_counter = 0
	};


	command LTE_ftp_quit = {
 80008b2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80008b6:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80008ba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80008be:	4aa3      	ldr	r2, [pc, #652]	; (8000b4c <main+0x3bc>)
 80008c0:	461c      	mov	r4, r3
 80008c2:	4615      	mov	r5, r2
 80008c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008c8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80008cc:	e884 0003 	stmia.w	r4, {r0, r1}
			.act_on_error = MOVE_ON,
			.retry_counter = 0
	};


	command LTE_bearer_1 = {
 80008d0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80008d4:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80008d8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80008dc:	4a9c      	ldr	r2, [pc, #624]	; (8000b50 <main+0x3c0>)
 80008de:	461c      	mov	r4, r3
 80008e0:	4615      	mov	r5, r2
 80008e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008e6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80008ea:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = MOVE_ON,
			.retry_counter = 0
	};

	command LTE_bearer_2 = {
 80008ee:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80008f2:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80008f6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80008fa:	4a96      	ldr	r2, [pc, #600]	; (8000b54 <main+0x3c4>)
 80008fc:	461c      	mov	r4, r3
 80008fe:	4615      	mov	r5, r2
 8000900:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000902:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000904:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000908:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = MOVE_ON,
			.retry_counter = 0
	};

	command LTE_bearer_3 = {
 800090c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000910:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000914:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8000918:	4a8f      	ldr	r2, [pc, #572]	; (8000b58 <main+0x3c8>)
 800091a:	461c      	mov	r4, r3
 800091c:	4615      	mov	r5, r2
 800091e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000920:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000922:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000926:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = MOVE_ON,
			.retry_counter = 0
	};

	command LTE_set_dns = {
 800092a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800092e:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000932:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8000936:	4a89      	ldr	r2, [pc, #548]	; (8000b5c <main+0x3cc>)
 8000938:	461c      	mov	r4, r3
 800093a:	4615      	mov	r5, r2
 800093c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800093e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000940:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000944:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = MOVE_ON,
			.retry_counter = 0
	};

	command LTE_ftp_bearer = {
 8000948:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800094c:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000950:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000954:	4a82      	ldr	r2, [pc, #520]	; (8000b60 <main+0x3d0>)
 8000956:	461c      	mov	r4, r3
 8000958:	4615      	mov	r5, r2
 800095a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800095c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800095e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000962:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = MOVE_ON,
			.retry_counter = 0
	};

	command LTE_ftp_type_binary = {
 8000966:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800096a:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800096e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8000972:	4a7c      	ldr	r2, [pc, #496]	; (8000b64 <main+0x3d4>)
 8000974:	461c      	mov	r4, r3
 8000976:	4615      	mov	r5, r2
 8000978:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800097a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800097c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000980:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = MOVE_ON,
			.retry_counter = 0
	};

	command LTE_ftp_append = {
 8000984:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000988:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800098c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8000990:	4a75      	ldr	r2, [pc, #468]	; (8000b68 <main+0x3d8>)
 8000992:	461c      	mov	r4, r3
 8000994:	4615      	mov	r5, r2
 8000996:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000998:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800099a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800099e:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = MOVE_ON,
			.retry_counter = 0
	};

	command LTE_ftp_ip = {
 80009a2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80009a6:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80009aa:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80009ae:	4a6f      	ldr	r2, [pc, #444]	; (8000b6c <main+0x3dc>)
 80009b0:	461c      	mov	r4, r3
 80009b2:	4615      	mov	r5, r2
 80009b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009b8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80009bc:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = MOVE_ON,
			.retry_counter = 0
	};

	command LTE_ftp_user = {
 80009c0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80009c4:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80009c8:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80009cc:	4a68      	ldr	r2, [pc, #416]	; (8000b70 <main+0x3e0>)
 80009ce:	461c      	mov	r4, r3
 80009d0:	4615      	mov	r5, r2
 80009d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009d6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80009da:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = MOVE_ON,
			.retry_counter = 0
	};

	command LTE_ftp_pass = {
 80009de:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80009e2:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80009e6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80009ea:	4a62      	ldr	r2, [pc, #392]	; (8000b74 <main+0x3e4>)
 80009ec:	461c      	mov	r4, r3
 80009ee:	4615      	mov	r5, r2
 80009f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80009f8:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = MOVE_ON,
			.retry_counter = 0
	};

	command LTE_ftp_port = {
 80009fc:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000a00:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000a04:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8000a08:	4a5b      	ldr	r2, [pc, #364]	; (8000b78 <main+0x3e8>)
 8000a0a:	461c      	mov	r4, r3
 8000a0c:	4615      	mov	r5, r2
 8000a0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a12:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a16:	e884 0003 	stmia.w	r4, {r0, r1}
			.act_on_error = MOVE_ON,
			.retry_counter = 0
	};


	command LTE_ftp_path = {
 8000a1a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000a1e:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000a22:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8000a26:	4a55      	ldr	r2, [pc, #340]	; (8000b7c <main+0x3ec>)
 8000a28:	461c      	mov	r4, r3
 8000a2a:	4615      	mov	r5, r2
 8000a2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a30:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a34:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = MOVE_ON,
			.retry_counter = 0
	};

	command LTE_get_time = {
 8000a38:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000a3c:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000a40:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8000a44:	4a4e      	ldr	r2, [pc, #312]	; (8000b80 <main+0x3f0>)
 8000a46:	461c      	mov	r4, r3
 8000a48:	4615      	mov	r5, r2
 8000a4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a4e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a52:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = MOVE_ON,
			.retry_counter = 0
	};

	char g_fileName[60] = "AT+FTPPUTNAME=\"unknown_";
 8000a56:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000a5a:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000a5e:	f5a3 7624 	sub.w	r6, r3, #656	; 0x290
 8000a62:	4b48      	ldr	r3, [pc, #288]	; (8000b84 <main+0x3f4>)
 8000a64:	4634      	mov	r4, r6
 8000a66:	461d      	mov	r5, r3
 8000a68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a6c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a70:	e884 0003 	stmia.w	r4, {r0, r1}
 8000a74:	f106 0318 	add.w	r3, r6, #24
 8000a78:	2224      	movs	r2, #36	; 0x24
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f003 fcd9 	bl	8004434 <memset>

	char g_dataSize[20] = " AT+FTPPUT=2,0";
 8000a82:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000a86:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000a8a:	f5a3 7529 	sub.w	r5, r3, #676	; 0x2a4
 8000a8e:	4b3e      	ldr	r3, [pc, #248]	; (8000b88 <main+0x3f8>)
 8000a90:	462c      	mov	r4, r5
 8000a92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a94:	c407      	stmia	r4!, {r0, r1, r2}
 8000a96:	8023      	strh	r3, [r4, #0]
 8000a98:	3402      	adds	r4, #2
 8000a9a:	0c1b      	lsrs	r3, r3, #16
 8000a9c:	7023      	strb	r3, [r4, #0]
 8000a9e:	f105 030f 	add.w	r3, r5, #15
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	711a      	strb	r2, [r3, #4]

	char g_dataSizeResponse[20] = "+FTPPUT=2,0";
 8000aa8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000aac:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000ab0:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8000ab4:	4a35      	ldr	r2, [pc, #212]	; (8000b8c <main+0x3fc>)
 8000ab6:	461c      	mov	r4, r3
 8000ab8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000aba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000abe:	330c      	adds	r3, #12
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]


	char gps_data_latest[BUFFER_SIZE] = {};
 8000ac6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000aca:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000ace:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	3304      	adds	r3, #4
 8000ad8:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8000adc:	2100      	movs	r1, #0
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f003 fca8 	bl	8004434 <memset>


	char random[20];
	itoa(rand(), random, 10);
 8000ae4:	f003 fd6a 	bl	80045bc <rand>
 8000ae8:	f507 53cb 	add.w	r3, r7, #6496	; 0x1960
 8000aec:	f103 0304 	add.w	r3, r3, #4
 8000af0:	220a      	movs	r2, #10
 8000af2:	4619      	mov	r1, r3
 8000af4:	f003 fc9c 	bl	8004430 <itoa>
	strcat(g_fileName, random);
 8000af8:	f507 52cb 	add.w	r2, r7, #6496	; 0x1960
 8000afc:	f102 0204 	add.w	r2, r2, #4
 8000b00:	f507 53ed 	add.w	r3, r7, #7584	; 0x1da0
 8000b04:	4611      	mov	r1, r2
 8000b06:	4618      	mov	r0, r3
 8000b08:	f003 fd96 	bl	8004638 <strcat>
	strcat(g_fileName, ".txt\"\r\n");
 8000b0c:	f507 53ed 	add.w	r3, r7, #7584	; 0x1da0
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff fb3d 	bl	8000190 <strlen>
 8000b16:	4603      	mov	r3, r0
 8000b18:	461a      	mov	r2, r3
 8000b1a:	f507 53ed 	add.w	r3, r7, #7584	; 0x1da0
 8000b1e:	e037      	b.n	8000b90 <main+0x400>
 8000b20:	20000d28 	.word	0x20000d28
 8000b24:	2000008c 	.word	0x2000008c
 8000b28:	08005c28 	.word	0x08005c28
 8000b2c:	08005c40 	.word	0x08005c40
 8000b30:	08005c58 	.word	0x08005c58
 8000b34:	08005c70 	.word	0x08005c70
 8000b38:	08005c88 	.word	0x08005c88
 8000b3c:	08005ca0 	.word	0x08005ca0
 8000b40:	08005cb8 	.word	0x08005cb8
 8000b44:	08005cd0 	.word	0x08005cd0
 8000b48:	08005ce8 	.word	0x08005ce8
 8000b4c:	08005d00 	.word	0x08005d00
 8000b50:	08005d18 	.word	0x08005d18
 8000b54:	08005d30 	.word	0x08005d30
 8000b58:	08005d48 	.word	0x08005d48
 8000b5c:	08005d60 	.word	0x08005d60
 8000b60:	08005d78 	.word	0x08005d78
 8000b64:	08005d90 	.word	0x08005d90
 8000b68:	08005da8 	.word	0x08005da8
 8000b6c:	08005dc0 	.word	0x08005dc0
 8000b70:	08005dd8 	.word	0x08005dd8
 8000b74:	08005df0 	.word	0x08005df0
 8000b78:	08005e08 	.word	0x08005e08
 8000b7c:	08005e20 	.word	0x08005e20
 8000b80:	08005e38 	.word	0x08005e38
 8000b84:	08005e50 	.word	0x08005e50
 8000b88:	08005e8c 	.word	0x08005e8c
 8000b8c:	08005ea0 	.word	0x08005ea0
 8000b90:	4413      	add	r3, r2
 8000b92:	49df      	ldr	r1, [pc, #892]	; (8000f10 <main+0x780>)
 8000b94:	461a      	mov	r2, r3
 8000b96:	460b      	mov	r3, r1
 8000b98:	cb03      	ldmia	r3!, {r0, r1}
 8000b9a:	6010      	str	r0, [r2, #0]
 8000b9c:	6051      	str	r1, [r2, #4]


	printf("\t\tFILE_RAND: %s\r\n", g_fileName);
 8000b9e:	f507 53ed 	add.w	r3, r7, #7584	; 0x1da0
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	48db      	ldr	r0, [pc, #876]	; (8000f14 <main+0x784>)
 8000ba6:	f003 fc4d 	bl	8004444 <iprintf>

	command LTE_ftp_filename = {
 8000baa:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000bae:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000bb2:	f2a3 63e4 	subw	r3, r3, #1764	; 0x6e4
 8000bb6:	f507 52ed 	add.w	r2, r7, #7584	; 0x1da0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000bc0:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000bc4:	f2a3 63e4 	subw	r3, r3, #1764	; 0x6e4
 8000bc8:	4ad3      	ldr	r2, [pc, #844]	; (8000f18 <main+0x788>)
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000bd0:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000bd4:	f2a3 63e4 	subw	r3, r3, #1764	; 0x6e4
 8000bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000be2:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000be6:	f2a3 63e4 	subw	r3, r3, #1764	; 0x6e4
 8000bea:	4acc      	ldr	r2, [pc, #816]	; (8000f1c <main+0x78c>)
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000bf2:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000bf6:	f2a3 63e4 	subw	r3, r3, #1764	; 0x6e4
 8000bfa:	2203      	movs	r2, #3
 8000bfc:	741a      	strb	r2, [r3, #16]
 8000bfe:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000c02:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000c06:	f2a3 63e4 	subw	r3, r3, #1764	; 0x6e4
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	615a      	str	r2, [r3, #20]
			.bad_answer = "ERROR",
			.act_on_error = MOVE_ON,
			.retry_counter = 0
	};

	command LTE_ftp_start_put = {
 8000c0e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000c12:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000c16:	f2a3 63fc 	subw	r3, r3, #1788	; 0x6fc
 8000c1a:	4ac1      	ldr	r2, [pc, #772]	; (8000f20 <main+0x790>)
 8000c1c:	461c      	mov	r4, r3
 8000c1e:	4615      	mov	r5, r2
 8000c20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c24:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c28:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "+FTPPUT: 1,66",
			.act_on_error = RESET_PROCESSOR,
			.retry_counter = 0
	};

	command LTE_ftp_put_data_size = {
 8000c2c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000c30:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000c34:	f2a3 7314 	subw	r3, r3, #1812	; 0x714
 8000c38:	f507 52ec 	add.w	r2, r7, #7552	; 0x1d80
 8000c3c:	f102 020c 	add.w	r2, r2, #12
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000c46:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000c4a:	f2a3 7314 	subw	r3, r3, #1812	; 0x714
 8000c4e:	f507 52eb 	add.w	r2, r7, #7520	; 0x1d60
 8000c52:	f102 0218 	add.w	r2, r2, #24
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000c5c:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000c60:	f2a3 7314 	subw	r3, r3, #1812	; 0x714
 8000c64:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000c6e:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000c72:	f2a3 7314 	subw	r3, r3, #1812	; 0x714
 8000c76:	4aa9      	ldr	r2, [pc, #676]	; (8000f1c <main+0x78c>)
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000c7e:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000c82:	f2a3 7314 	subw	r3, r3, #1812	; 0x714
 8000c86:	2201      	movs	r2, #1
 8000c88:	741a      	strb	r2, [r3, #16]
 8000c8a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000c8e:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000c92:	f2a3 7314 	subw	r3, r3, #1812	; 0x714
 8000c96:	2200      	movs	r2, #0
 8000c98:	615a      	str	r2, [r3, #20]
			.bad_answer = "ERROR",
			.act_on_error = RESET_PROCESSOR,
			.retry_counter = 0
	};

	command LTE_ftp_put_data = {
 8000c9a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000c9e:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000ca2:	f2a3 732c 	subw	r3, r3, #1836	; 0x72c
 8000ca6:	f507 52cb 	add.w	r2, r7, #6496	; 0x1960
 8000caa:	f102 0218 	add.w	r2, r2, #24
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000cb4:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000cb8:	f2a3 732c 	subw	r3, r3, #1836	; 0x72c
 8000cbc:	4a96      	ldr	r2, [pc, #600]	; (8000f18 <main+0x788>)
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000cc4:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000cc8:	f2a3 732c 	subw	r3, r3, #1836	; 0x72c
 8000ccc:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000cd6:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000cda:	f2a3 732c 	subw	r3, r3, #1836	; 0x72c
 8000cde:	4a8f      	ldr	r2, [pc, #572]	; (8000f1c <main+0x78c>)
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000ce6:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000cea:	f2a3 732c 	subw	r3, r3, #1836	; 0x72c
 8000cee:	2201      	movs	r2, #1
 8000cf0:	741a      	strb	r2, [r3, #16]
 8000cf2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000cf6:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000cfa:	f2a3 732c 	subw	r3, r3, #1836	; 0x72c
 8000cfe:	2200      	movs	r2, #0
 8000d00:	615a      	str	r2, [r3, #20]
			.act_on_error = RESET_PROCESSOR,
			.retry_counter = 0
	};


	command LTE_ftp_end_put = {
 8000d02:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000d06:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000d0a:	f2a3 7344 	subw	r3, r3, #1860	; 0x744
 8000d0e:	4a85      	ldr	r2, [pc, #532]	; (8000f24 <main+0x794>)
 8000d10:	461c      	mov	r4, r3
 8000d12:	4615      	mov	r5, r2
 8000d14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d18:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d1c:	e884 0003 	stmia.w	r4, {r0, r1}
			.act_on_error = RESET_PROCESSOR,
			.retry_counter = 0
	};

	// SIGNAL commands
	command LTE_ftp_active = {
 8000d20:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000d24:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000d28:	f2a3 735c 	subw	r3, r3, #1884	; 0x75c
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	2300      	movs	r3, #0
 8000d30:	6013      	str	r3, [r2, #0]
 8000d32:	6053      	str	r3, [r2, #4]
 8000d34:	6093      	str	r3, [r2, #8]
 8000d36:	60d3      	str	r3, [r2, #12]
 8000d38:	6113      	str	r3, [r2, #16]
 8000d3a:	6153      	str	r3, [r2, #20]
 8000d3c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000d40:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000d44:	f2a3 735c 	subw	r3, r3, #1884	; 0x75c
 8000d48:	4a77      	ldr	r2, [pc, #476]	; (8000f28 <main+0x798>)
 8000d4a:	601a      	str	r2, [r3, #0]
			.cmd = "FTP_ACTIVE"
	};

	command LTE_reset_action = {
 8000d4c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000d50:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000d54:	f2a3 7374 	subw	r3, r3, #1908	; 0x774
 8000d58:	461a      	mov	r2, r3
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	6013      	str	r3, [r2, #0]
 8000d5e:	6053      	str	r3, [r2, #4]
 8000d60:	6093      	str	r3, [r2, #8]
 8000d62:	60d3      	str	r3, [r2, #12]
 8000d64:	6113      	str	r3, [r2, #16]
 8000d66:	6153      	str	r3, [r2, #20]
 8000d68:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000d6c:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000d70:	f2a3 7374 	subw	r3, r3, #1908	; 0x774
 8000d74:	4a6d      	ldr	r2, [pc, #436]	; (8000f2c <main+0x79c>)
 8000d76:	601a      	str	r2, [r3, #0]
			.cmd = "RESET_ACTION"
	};

	uint8_t current_action = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000d7e:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 8000d82:	7013      	strb	r3, [r2, #0]

	uint8_t filename_time_set = 0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000d8a:	f102 022e 	add.w	r2, r2, #46	; 0x2e
 8000d8e:	7013      	strb	r3, [r2, #0]

	uint8_t transfer_status = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000d96:	f102 022d 	add.w	r2, r2, #45	; 0x2d
 8000d9a:	7013      	strb	r3, [r2, #0]

	command action_list[255];


	uint8_t last_action = 34;
 8000d9c:	2322      	movs	r3, #34	; 0x22
 8000d9e:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000da2:	f102 020f 	add.w	r2, r2, #15
 8000da6:	7013      	strb	r3, [r2, #0]

	action_list[0] = LTE_sim_check_active;
 8000da8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000dac:	f103 0310 	add.w	r3, r3, #16
 8000db0:	f6a3 735c 	subw	r3, r3, #3932	; 0xf5c
 8000db4:	461d      	mov	r5, r3
 8000db6:	f507 54ff 	add.w	r4, r7, #8160	; 0x1fe0
 8000dba:	f104 040c 	add.w	r4, r4, #12
 8000dbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dc2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000dc6:	e885 0003 	stmia.w	r5, {r0, r1}
	action_list[1] = LTE_disable_echo;
 8000dca:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000dce:	f103 0310 	add.w	r3, r3, #16
 8000dd2:	f6a3 735c 	subw	r3, r3, #3932	; 0xf5c
 8000dd6:	f103 0418 	add.w	r4, r3, #24
 8000dda:	f507 55fe 	add.w	r5, r7, #8128	; 0x1fc0
 8000dde:	f105 0514 	add.w	r5, r5, #20
 8000de2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000de4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000de6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000dea:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[2] = LTE_deactivate_gprs;
 8000dee:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000df2:	f103 0310 	add.w	r3, r3, #16
 8000df6:	f6a3 735c 	subw	r3, r3, #3932	; 0xf5c
 8000dfa:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8000dfe:	f507 55fd 	add.w	r5, r7, #8096	; 0x1fa0
 8000e02:	f105 051c 	add.w	r5, r5, #28
 8000e06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e0a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e0e:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[3] = LTE_attach_gprs;
 8000e12:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000e16:	f103 0310 	add.w	r3, r3, #16
 8000e1a:	f6a3 735c 	subw	r3, r3, #3932	; 0xf5c
 8000e1e:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8000e22:	f507 55fd 	add.w	r5, r7, #8096	; 0x1fa0
 8000e26:	f105 0504 	add.w	r5, r5, #4
 8000e2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e2e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e32:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[4] = LTE_set_apn;
 8000e36:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000e3a:	f103 0310 	add.w	r3, r3, #16
 8000e3e:	f6a3 735c 	subw	r3, r3, #3932	; 0xf5c
 8000e42:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8000e46:	f507 55fc 	add.w	r5, r7, #8064	; 0x1f80
 8000e4a:	f105 050c 	add.w	r5, r5, #12
 8000e4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e52:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e56:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[5] = LTE_gprs_up;
 8000e5a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000e5e:	f103 0310 	add.w	r3, r3, #16
 8000e62:	f6a3 735c 	subw	r3, r3, #3932	; 0xf5c
 8000e66:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8000e6a:	f507 55fb 	add.w	r5, r7, #8032	; 0x1f60
 8000e6e:	f105 0514 	add.w	r5, r5, #20
 8000e72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e76:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e7a:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[6] = LTE_get_ip;
 8000e7e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000e82:	f103 0310 	add.w	r3, r3, #16
 8000e86:	f6a3 735c 	subw	r3, r3, #3932	; 0xf5c
 8000e8a:	f103 0490 	add.w	r4, r3, #144	; 0x90
 8000e8e:	f507 55fa 	add.w	r5, r7, #8000	; 0x1f40
 8000e92:	f105 051c 	add.w	r5, r5, #28
 8000e96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e9a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e9e:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[7] = LTE_init_gps;
 8000ea2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000ea6:	f103 0310 	add.w	r3, r3, #16
 8000eaa:	f6a3 735c 	subw	r3, r3, #3932	; 0xf5c
 8000eae:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8000eb2:	f507 55fa 	add.w	r5, r7, #8000	; 0x1f40
 8000eb6:	f105 0504 	add.w	r5, r5, #4
 8000eba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ebc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ebe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ec2:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[8] = LTE_reset_action;
 8000ec6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000eca:	f103 0310 	add.w	r3, r3, #16
 8000ece:	f6a3 735c 	subw	r3, r3, #3932	; 0xf5c
 8000ed2:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000ed6:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8000eda:	f2a2 7274 	subw	r2, r2, #1908	; 0x774
 8000ede:	f103 04c0 	add.w	r4, r3, #192	; 0xc0
 8000ee2:	4615      	mov	r5, r2
 8000ee4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ee6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ee8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000eec:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[9] = LTE_bearer_1;
 8000ef0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000ef4:	f103 0310 	add.w	r3, r3, #16
 8000ef8:	f6a3 735c 	subw	r3, r3, #3932	; 0xf5c
 8000efc:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000f00:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8000f04:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8000f08:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8000f0c:	e010      	b.n	8000f30 <main+0x7a0>
 8000f0e:	bf00      	nop
 8000f10:	08005ad0 	.word	0x08005ad0
 8000f14:	08005ad8 	.word	0x08005ad8
 8000f18:	080058ac 	.word	0x080058ac
 8000f1c:	080058b0 	.word	0x080058b0
 8000f20:	08005eb4 	.word	0x08005eb4
 8000f24:	08005ecc 	.word	0x08005ecc
 8000f28:	08005aec 	.word	0x08005aec
 8000f2c:	08005af8 	.word	0x08005af8
 8000f30:	4615      	mov	r5, r2
 8000f32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f36:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f3a:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[10] = LTE_bearer_2;
 8000f3e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000f42:	f103 0310 	add.w	r3, r3, #16
 8000f46:	f6a3 735c 	subw	r3, r3, #3932	; 0xf5c
 8000f4a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000f4e:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8000f52:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 8000f56:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 8000f5a:	4615      	mov	r5, r2
 8000f5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f60:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f64:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[11] = LTE_bearer_3;
 8000f68:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000f6c:	f103 0310 	add.w	r3, r3, #16
 8000f70:	f6a3 735c 	subw	r3, r3, #3932	; 0xf5c
 8000f74:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000f78:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8000f7c:	f5a2 72b2 	sub.w	r2, r2, #356	; 0x164
 8000f80:	f503 7484 	add.w	r4, r3, #264	; 0x108
 8000f84:	4615      	mov	r5, r2
 8000f86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f8a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f8e:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[12] = LTE_set_dns;
 8000f92:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000f96:	f103 0310 	add.w	r3, r3, #16
 8000f9a:	f6a3 735c 	subw	r3, r3, #3932	; 0xf5c
 8000f9e:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000fa2:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8000fa6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8000faa:	f503 7490 	add.w	r4, r3, #288	; 0x120
 8000fae:	4615      	mov	r5, r2
 8000fb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fb4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fb8:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[13] = LTE_get_position;
 8000fbc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000fc0:	f103 0310 	add.w	r3, r3, #16
 8000fc4:	f6a3 735c 	subw	r3, r3, #3932	; 0xf5c
 8000fc8:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000fcc:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8000fd0:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000fd4:	f503 749c 	add.w	r4, r3, #312	; 0x138
 8000fd8:	4615      	mov	r5, r2
 8000fda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fde:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fe2:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[14] = LTE_get_time;
 8000fe6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000fea:	f103 0310 	add.w	r3, r3, #16
 8000fee:	f6a3 735c 	subw	r3, r3, #3932	; 0xf5c
 8000ff2:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000ff6:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8000ffa:	f5a2 7215 	sub.w	r2, r2, #596	; 0x254
 8000ffe:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 8001002:	4615      	mov	r5, r2
 8001004:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001006:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001008:	e895 0003 	ldmia.w	r5, {r0, r1}
 800100c:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[15] = LTE_ftp_quit;
 8001010:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001014:	f103 0310 	add.w	r3, r3, #16
 8001018:	f6a3 735c 	subw	r3, r3, #3932	; 0xf5c
 800101c:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001020:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8001024:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8001028:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 800102c:	4615      	mov	r5, r2
 800102e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001030:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001032:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001036:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[16] = LTE_ftp_bearer;
 800103a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800103e:	f103 0310 	add.w	r3, r3, #16
 8001042:	f6a3 735c 	subw	r3, r3, #3932	; 0xf5c
 8001046:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800104a:	f102 0230 	add.w	r2, r2, #48	; 0x30
 800104e:	f5a2 72ca 	sub.w	r2, r2, #404	; 0x194
 8001052:	f503 74c0 	add.w	r4, r3, #384	; 0x180
 8001056:	4615      	mov	r5, r2
 8001058:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800105a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800105c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001060:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[17] = LTE_ftp_type_binary;
 8001064:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001068:	f103 0310 	add.w	r3, r3, #16
 800106c:	f6a3 735c 	subw	r3, r3, #3932	; 0xf5c
 8001070:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001074:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8001078:	f5a2 72d6 	sub.w	r2, r2, #428	; 0x1ac
 800107c:	f503 74cc 	add.w	r4, r3, #408	; 0x198
 8001080:	4615      	mov	r5, r2
 8001082:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001084:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001086:	e895 0003 	ldmia.w	r5, {r0, r1}
 800108a:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[18] = LTE_ftp_append;
 800108e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001092:	f103 0310 	add.w	r3, r3, #16
 8001096:	f6a3 735c 	subw	r3, r3, #3932	; 0xf5c
 800109a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800109e:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80010a2:	f5a2 72e2 	sub.w	r2, r2, #452	; 0x1c4
 80010a6:	f503 74d8 	add.w	r4, r3, #432	; 0x1b0
 80010aa:	4615      	mov	r5, r2
 80010ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010b0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010b4:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[19] = LTE_ftp_ip;
 80010b8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80010bc:	f103 0310 	add.w	r3, r3, #16
 80010c0:	f6a3 735c 	subw	r3, r3, #3932	; 0xf5c
 80010c4:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80010c8:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80010cc:	f5a2 72ee 	sub.w	r2, r2, #476	; 0x1dc
 80010d0:	f503 74e4 	add.w	r4, r3, #456	; 0x1c8
 80010d4:	4615      	mov	r5, r2
 80010d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010da:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010de:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[20] = LTE_ftp_user;
 80010e2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80010e6:	f103 0310 	add.w	r3, r3, #16
 80010ea:	f6a3 735c 	subw	r3, r3, #3932	; 0xf5c
 80010ee:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80010f2:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80010f6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80010fa:	f503 74f0 	add.w	r4, r3, #480	; 0x1e0
 80010fe:	4615      	mov	r5, r2
 8001100:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001102:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001104:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001108:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[21] = LTE_ftp_pass;
 800110c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001110:	f103 0310 	add.w	r3, r3, #16
 8001114:	f6a3 735c 	subw	r3, r3, #3932	; 0xf5c
 8001118:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800111c:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8001120:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8001124:	f503 74fc 	add.w	r4, r3, #504	; 0x1f8
 8001128:	4615      	mov	r5, r2
 800112a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800112c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800112e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001132:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[22] = LTE_ftp_port;
 8001136:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800113a:	f103 0310 	add.w	r3, r3, #16
 800113e:	f6a3 735c 	subw	r3, r3, #3932	; 0xf5c
 8001142:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001146:	f102 0230 	add.w	r2, r2, #48	; 0x30
 800114a:	f5a2 7209 	sub.w	r2, r2, #548	; 0x224
 800114e:	f503 7404 	add.w	r4, r3, #528	; 0x210
 8001152:	4615      	mov	r5, r2
 8001154:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001156:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001158:	e895 0003 	ldmia.w	r5, {r0, r1}
 800115c:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[23] = LTE_ftp_path;
 8001160:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001164:	f103 0310 	add.w	r3, r3, #16
 8001168:	f6a3 735c 	subw	r3, r3, #3932	; 0xf5c
 800116c:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001170:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8001174:	f5a2 720f 	sub.w	r2, r2, #572	; 0x23c
 8001178:	f503 740a 	add.w	r4, r3, #552	; 0x228
 800117c:	4615      	mov	r5, r2
 800117e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001180:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001182:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001186:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[24] = LTE_ftp_filename;
 800118a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800118e:	f103 0310 	add.w	r3, r3, #16
 8001192:	f6a3 735c 	subw	r3, r3, #3932	; 0xf5c
 8001196:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800119a:	f102 0230 	add.w	r2, r2, #48	; 0x30
 800119e:	f2a2 62e4 	subw	r2, r2, #1764	; 0x6e4
 80011a2:	f503 7410 	add.w	r4, r3, #576	; 0x240
 80011a6:	4615      	mov	r5, r2
 80011a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ac:	e895 0003 	ldmia.w	r5, {r0, r1}
 80011b0:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[25] = LTE_ftp_start_put;
 80011b4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80011b8:	f103 0310 	add.w	r3, r3, #16
 80011bc:	f6a3 735c 	subw	r3, r3, #3932	; 0xf5c
 80011c0:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80011c4:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80011c8:	f2a2 62fc 	subw	r2, r2, #1788	; 0x6fc
 80011cc:	f503 7416 	add.w	r4, r3, #600	; 0x258
 80011d0:	4615      	mov	r5, r2
 80011d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011d6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80011da:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[26] = LTE_ftp_put_data_size;
 80011de:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80011e2:	f103 0310 	add.w	r3, r3, #16
 80011e6:	f6a3 735c 	subw	r3, r3, #3932	; 0xf5c
 80011ea:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80011ee:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80011f2:	f2a2 7214 	subw	r2, r2, #1812	; 0x714
 80011f6:	f503 741c 	add.w	r4, r3, #624	; 0x270
 80011fa:	4615      	mov	r5, r2
 80011fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001200:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001204:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[27] = LTE_ftp_put_data;
 8001208:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800120c:	f103 0310 	add.w	r3, r3, #16
 8001210:	f6a3 735c 	subw	r3, r3, #3932	; 0xf5c
 8001214:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001218:	f102 0230 	add.w	r2, r2, #48	; 0x30
 800121c:	f2a2 722c 	subw	r2, r2, #1836	; 0x72c
 8001220:	f503 7422 	add.w	r4, r3, #648	; 0x288
 8001224:	4615      	mov	r5, r2
 8001226:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001228:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800122a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800122e:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[28] = LTE_ftp_end_put;
 8001232:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001236:	f103 0310 	add.w	r3, r3, #16
 800123a:	f6a3 735c 	subw	r3, r3, #3932	; 0xf5c
 800123e:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001242:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8001246:	f2a2 7244 	subw	r2, r2, #1860	; 0x744
 800124a:	f503 7428 	add.w	r4, r3, #672	; 0x2a0
 800124e:	4615      	mov	r5, r2
 8001250:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001252:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001254:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001258:	e884 0003 	stmia.w	r4, {r0, r1}

	action_list[29] = LTE_get_position;
 800125c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001260:	f103 0310 	add.w	r3, r3, #16
 8001264:	f6a3 735c 	subw	r3, r3, #3932	; 0xf5c
 8001268:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800126c:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8001270:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001274:	f503 742e 	add.w	r4, r3, #696	; 0x2b8
 8001278:	4615      	mov	r5, r2
 800127a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800127c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800127e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001282:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[30] = LTE_get_time;
 8001286:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800128a:	f103 0310 	add.w	r3, r3, #16
 800128e:	f6a3 735c 	subw	r3, r3, #3932	; 0xf5c
 8001292:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001296:	f102 0230 	add.w	r2, r2, #48	; 0x30
 800129a:	f5a2 7215 	sub.w	r2, r2, #596	; 0x254
 800129e:	f503 7434 	add.w	r4, r3, #720	; 0x2d0
 80012a2:	4615      	mov	r5, r2
 80012a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012a8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80012ac:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[31] = LTE_ftp_start_put;
 80012b0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80012b4:	f103 0310 	add.w	r3, r3, #16
 80012b8:	f6a3 735c 	subw	r3, r3, #3932	; 0xf5c
 80012bc:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80012c0:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80012c4:	f2a2 62fc 	subw	r2, r2, #1788	; 0x6fc
 80012c8:	f503 743a 	add.w	r4, r3, #744	; 0x2e8
 80012cc:	4615      	mov	r5, r2
 80012ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012d2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80012d6:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[32] = LTE_ftp_put_data_size;
 80012da:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80012de:	f103 0310 	add.w	r3, r3, #16
 80012e2:	f6a3 735c 	subw	r3, r3, #3932	; 0xf5c
 80012e6:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80012ea:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80012ee:	f2a2 7214 	subw	r2, r2, #1812	; 0x714
 80012f2:	f503 7440 	add.w	r4, r3, #768	; 0x300
 80012f6:	4615      	mov	r5, r2
 80012f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012fc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001300:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[33] = LTE_ftp_put_data;
 8001304:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001308:	f103 0310 	add.w	r3, r3, #16
 800130c:	f6a3 735c 	subw	r3, r3, #3932	; 0xf5c
 8001310:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001314:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8001318:	f2a2 722c 	subw	r2, r2, #1836	; 0x72c
 800131c:	f503 7446 	add.w	r4, r3, #792	; 0x318
 8001320:	4615      	mov	r5, r2
 8001322:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001324:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001326:	e895 0003 	ldmia.w	r5, {r0, r1}
 800132a:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[34] = LTE_ftp_end_put;
 800132e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001332:	f103 0310 	add.w	r3, r3, #16
 8001336:	f6a3 735c 	subw	r3, r3, #3932	; 0xf5c
 800133a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800133e:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8001342:	f2a2 7244 	subw	r2, r2, #1860	; 0x744
 8001346:	f503 744c 	add.w	r4, r3, #816	; 0x330
 800134a:	4615      	mov	r5, r2
 800134c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800134e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001350:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001354:	e884 0003 	stmia.w	r4, {r0, r1}

	action_list[35] = LTE_reset_action;
 8001358:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800135c:	f103 0310 	add.w	r3, r3, #16
 8001360:	f6a3 735c 	subw	r3, r3, #3932	; 0xf5c
 8001364:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001368:	f102 0230 	add.w	r2, r2, #48	; 0x30
 800136c:	f2a2 7274 	subw	r2, r2, #1908	; 0x774
 8001370:	f503 7452 	add.w	r4, r3, #840	; 0x348
 8001374:	4615      	mov	r5, r2
 8001376:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001378:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800137a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800137e:	e884 0003 	stmia.w	r4, {r0, r1}

	//uint8_t ftp_transfer_active = 0;



	uint8_t startup = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001388:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 800138c:	7013      	strb	r3, [r2, #0]

	for(int i = 0; i< BUFFER_SIZE; i++){
 800138e:	2300      	movs	r3, #0
 8001390:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001394:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	e013      	b.n	80013c4 <main+0xc34>
		ParseBuffer[i] ='\0';
 800139c:	4aa0      	ldr	r2, [pc, #640]	; (8001620 <main+0xe90>)
 800139e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80013a2:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4413      	add	r3, r2
 80013aa:	2200      	movs	r2, #0
 80013ac:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i< BUFFER_SIZE; i++){
 80013ae:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80013b2:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	3301      	adds	r3, #1
 80013ba:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80013be:	f102 0228 	add.w	r2, r2, #40	; 0x28
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80013c8:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013d2:	dbe3      	blt.n	800139c <main+0xc0c>
	}

	int resolution = 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80013da:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80013de:	6013      	str	r3, [r2, #0]

	while (1)
	{

		if(current_action > last_action){
 80013e0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80013e4:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 80013e8:	781a      	ldrb	r2, [r3, #0]
 80013ea:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80013ee:	f103 030f 	add.w	r3, r3, #15
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d928      	bls.n	800144a <main+0xcba>
			for(int i = 0; i< BUFFER_SIZE; i++){
 80013f8:	2300      	movs	r3, #0
 80013fa:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80013fe:	f102 0220 	add.w	r2, r2, #32
 8001402:	6013      	str	r3, [r2, #0]
 8001404:	e013      	b.n	800142e <main+0xc9e>
				ParseBuffer[i] ='\0';
 8001406:	4a86      	ldr	r2, [pc, #536]	; (8001620 <main+0xe90>)
 8001408:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800140c:	f103 0320 	add.w	r3, r3, #32
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4413      	add	r3, r2
 8001414:	2200      	movs	r2, #0
 8001416:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i< BUFFER_SIZE; i++){
 8001418:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800141c:	f103 0320 	add.w	r3, r3, #32
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	3301      	adds	r3, #1
 8001424:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001428:	f102 0220 	add.w	r2, r2, #32
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001432:	f103 0320 	add.w	r3, r3, #32
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800143c:	dbe3      	blt.n	8001406 <main+0xc76>
			}
			current_action = 29;
 800143e:	231d      	movs	r3, #29
 8001440:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001444:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 8001448:	7013      	strb	r3, [r2, #0]
		}


		if((resolution % 50) == 0){
 800144a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800144e:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4b73      	ldr	r3, [pc, #460]	; (8001624 <main+0xe94>)
 8001456:	fb83 1302 	smull	r1, r3, r3, r2
 800145a:	1119      	asrs	r1, r3, #4
 800145c:	17d3      	asrs	r3, r2, #31
 800145e:	1acb      	subs	r3, r1, r3
 8001460:	2132      	movs	r1, #50	; 0x32
 8001462:	fb01 f303 	mul.w	r3, r1, r3
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b00      	cmp	r3, #0
 800146a:	d114      	bne.n	8001496 <main+0xd06>
			printf("TRYING: >>%s<<\r\n", action_list[current_action].cmd);
 800146c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001470:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 8001474:	781a      	ldrb	r2, [r3, #0]
 8001476:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800147a:	f103 0310 	add.w	r3, r3, #16
 800147e:	f6a3 715c 	subw	r1, r3, #3932	; 0xf5c
 8001482:	4613      	mov	r3, r2
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	4413      	add	r3, r2
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	440b      	add	r3, r1
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4619      	mov	r1, r3
 8001490:	4865      	ldr	r0, [pc, #404]	; (8001628 <main+0xe98>)
 8001492:	f002 ffd7 	bl	8004444 <iprintf>
		}

		enum State state = Do_Action(action_list[current_action], (uint8_t*)ParseBuffer);
 8001496:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800149a:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 800149e:	781a      	ldrb	r2, [r3, #0]
 80014a0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80014a4:	f103 0310 	add.w	r3, r3, #16
 80014a8:	f6a3 715c 	subw	r1, r3, #3932	; 0xf5c
 80014ac:	4613      	mov	r3, r2
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	4413      	add	r3, r2
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	440b      	add	r3, r1
 80014b6:	4a5a      	ldr	r2, [pc, #360]	; (8001620 <main+0xe90>)
 80014b8:	9202      	str	r2, [sp, #8]
 80014ba:	466c      	mov	r4, sp
 80014bc:	f103 0210 	add.w	r2, r3, #16
 80014c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014c4:	e884 0003 	stmia.w	r4, {r0, r1}
 80014c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014ca:	f000 fd69 	bl	8001fa0 <Do_Action>
 80014ce:	4603      	mov	r3, r0
 80014d0:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80014d4:	f102 020e 	add.w	r2, r2, #14
 80014d8:	7013      	strb	r3, [r2, #0]
		resolution++;
 80014da:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80014de:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	3301      	adds	r3, #1
 80014e6:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80014ea:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80014ee:	6013      	str	r3, [r2, #0]

		switch (state){
 80014f0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80014f4:	f103 030e 	add.w	r3, r3, #14
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b05      	cmp	r3, #5
 80014fc:	f200 8169 	bhi.w	80017d2 <main+0x1042>
 8001500:	a201      	add	r2, pc, #4	; (adr r2, 8001508 <main+0xd78>)
 8001502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001506:	bf00      	nop
 8001508:	080015fd 	.word	0x080015fd
 800150c:	080017d3 	.word	0x080017d3
 8001510:	08001521 	.word	0x08001521
 8001514:	0800171b 	.word	0x0800171b
 8001518:	08001635 	.word	0x08001635
 800151c:	080017d3 	.word	0x080017d3
		case GOOD_ANSWER:
			printf("%s - %s\r\n", action_list[current_action].cmd, action_list[current_action].good_answer);
 8001520:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001524:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 8001528:	781a      	ldrb	r2, [r3, #0]
 800152a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800152e:	f103 0310 	add.w	r3, r3, #16
 8001532:	f6a3 715c 	subw	r1, r3, #3932	; 0xf5c
 8001536:	4613      	mov	r3, r2
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	4413      	add	r3, r2
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	440b      	add	r3, r1
 8001540:	6818      	ldr	r0, [r3, #0]
 8001542:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001546:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 800154a:	781a      	ldrb	r2, [r3, #0]
 800154c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001550:	f103 0310 	add.w	r3, r3, #16
 8001554:	f6a3 715c 	subw	r1, r3, #3932	; 0xf5c
 8001558:	4613      	mov	r3, r2
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	4413      	add	r3, r2
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	440b      	add	r3, r1
 8001562:	3304      	adds	r3, #4
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	461a      	mov	r2, r3
 8001568:	4601      	mov	r1, r0
 800156a:	4830      	ldr	r0, [pc, #192]	; (800162c <main+0xe9c>)
 800156c:	f002 ff6a 	bl	8004444 <iprintf>
			printf("\tREPLY: >>%s<<\r\n", (char*)ParseBuffer);
 8001570:	492b      	ldr	r1, [pc, #172]	; (8001620 <main+0xe90>)
 8001572:	482f      	ldr	r0, [pc, #188]	; (8001630 <main+0xea0>)
 8001574:	f002 ff66 	bl	8004444 <iprintf>
			Do_Action(LTE_reset_action, (uint8_t*)ParseBuffer);
 8001578:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800157c:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8001580:	f2a3 7374 	subw	r3, r3, #1908	; 0x774
 8001584:	4a26      	ldr	r2, [pc, #152]	; (8001620 <main+0xe90>)
 8001586:	9202      	str	r2, [sp, #8]
 8001588:	466c      	mov	r4, sp
 800158a:	f103 0210 	add.w	r2, r3, #16
 800158e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001592:	e884 0003 	stmia.w	r4, {r0, r1}
 8001596:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001598:	f000 fd02 	bl	8001fa0 <Do_Action>
			current_action++;
 800159c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80015a0:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	3301      	adds	r3, #1
 80015a8:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80015ac:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 80015b0:	7013      	strb	r3, [r2, #0]
			HAL_Delay(action_list[current_action].timeout / 2);
 80015b2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80015b6:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 80015ba:	781a      	ldrb	r2, [r3, #0]
 80015bc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80015c0:	f103 0310 	add.w	r3, r3, #16
 80015c4:	f6a3 715c 	subw	r1, r3, #3932	; 0xf5c
 80015c8:	4613      	mov	r3, r2
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	4413      	add	r3, r2
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	440b      	add	r3, r1
 80015d2:	3308      	adds	r3, #8
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	0fda      	lsrs	r2, r3, #31
 80015d8:	4413      	add	r3, r2
 80015da:	105b      	asrs	r3, r3, #1
 80015dc:	4618      	mov	r0, r3
 80015de:	f001 f87d 	bl	80026dc <HAL_Delay>
			startup = 5;
 80015e2:	2305      	movs	r3, #5
 80015e4:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80015e8:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 80015ec:	7013      	strb	r3, [r2, #0]
			resolution = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80015f4:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80015f8:	6013      	str	r3, [r2, #0]
			break;
 80015fa:	e0eb      	b.n	80017d4 <main+0x1044>
		case READY:
			//printf("%s - READY\r\n", action_list[current_action].cmd);
			//printf("BUFFER: >>%s<<\r\n", (char*)ParseBuffer);
			current_action++;
 80015fc:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001600:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	3301      	adds	r3, #1
 8001608:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800160c:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 8001610:	7013      	strb	r3, [r2, #0]
			resolution = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001618:	f102 0224 	add.w	r2, r2, #36	; 0x24
 800161c:	6013      	str	r3, [r2, #0]
			break;
 800161e:	e0d9      	b.n	80017d4 <main+0x1044>
 8001620:	20000dfc 	.word	0x20000dfc
 8001624:	51eb851f 	.word	0x51eb851f
 8001628:	08005b08 	.word	0x08005b08
 800162c:	08005b1c 	.word	0x08005b1c
 8001630:	08005b28 	.word	0x08005b28
		case TIMEOUT:
			printf("%s - Timeout\r\n", action_list[current_action].cmd);
 8001634:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001638:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 800163c:	781a      	ldrb	r2, [r3, #0]
 800163e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001642:	f103 0310 	add.w	r3, r3, #16
 8001646:	f6a3 715c 	subw	r1, r3, #3932	; 0xf5c
 800164a:	4613      	mov	r3, r2
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	4413      	add	r3, r2
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	440b      	add	r3, r1
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4619      	mov	r1, r3
 8001658:	4888      	ldr	r0, [pc, #544]	; (800187c <main+0x10ec>)
 800165a:	f002 fef3 	bl	8004444 <iprintf>
			if(startup < 2){
 800165e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001662:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d822      	bhi.n	80016b2 <main+0xf22>
				printf("INIT\r\n");
 800166c:	4884      	ldr	r0, [pc, #528]	; (8001880 <main+0x10f0>)
 800166e:	f002 ff6f 	bl	8004550 <puts>
				printf("TURN ON\r\n");
 8001672:	4884      	ldr	r0, [pc, #528]	; (8001884 <main+0x10f4>)
 8001674:	f002 ff6c 	bl	8004550 <puts>
				HAL_GPIO_WritePin(GPIOA,  GPIO_PIN_6, GPIO_PIN_SET);
 8001678:	2201      	movs	r2, #1
 800167a:	2140      	movs	r1, #64	; 0x40
 800167c:	4882      	ldr	r0, [pc, #520]	; (8001888 <main+0x10f8>)
 800167e:	f001 fbf1 	bl	8002e64 <HAL_GPIO_WritePin>
				HAL_Delay(1500);
 8001682:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001686:	f001 f829 	bl	80026dc <HAL_Delay>
				HAL_GPIO_WritePin(GPIOA,  GPIO_PIN_6, GPIO_PIN_RESET);
 800168a:	2200      	movs	r2, #0
 800168c:	2140      	movs	r1, #64	; 0x40
 800168e:	487e      	ldr	r0, [pc, #504]	; (8001888 <main+0x10f8>)
 8001690:	f001 fbe8 	bl	8002e64 <HAL_GPIO_WritePin>
				HAL_Delay(5000);
 8001694:	f241 3088 	movw	r0, #5000	; 0x1388
 8001698:	f001 f820 	bl	80026dc <HAL_Delay>
				startup++;
 800169c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80016a0:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	3301      	adds	r3, #1
 80016a8:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80016ac:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 80016b0:	7013      	strb	r3, [r2, #0]
			}
			Do_Action(LTE_reset_action, (uint8_t*)ParseBuffer);
 80016b2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80016b6:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80016ba:	f2a3 7374 	subw	r3, r3, #1908	; 0x774
 80016be:	4a73      	ldr	r2, [pc, #460]	; (800188c <main+0x10fc>)
 80016c0:	9202      	str	r2, [sp, #8]
 80016c2:	466c      	mov	r4, sp
 80016c4:	f103 0210 	add.w	r2, r3, #16
 80016c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016cc:	e884 0003 	stmia.w	r4, {r0, r1}
 80016d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016d2:	f000 fc65 	bl	8001fa0 <Do_Action>

			HAL_Delay(action_list[current_action].timeout);
 80016d6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80016da:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 80016de:	781a      	ldrb	r2, [r3, #0]
 80016e0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80016e4:	f103 0310 	add.w	r3, r3, #16
 80016e8:	f6a3 715c 	subw	r1, r3, #3932	; 0xf5c
 80016ec:	4613      	mov	r3, r2
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	4413      	add	r3, r2
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	440b      	add	r3, r1
 80016f6:	3308      	adds	r3, #8
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f000 ffee 	bl	80026dc <HAL_Delay>
			current_action=0;
 8001700:	2300      	movs	r3, #0
 8001702:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001706:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 800170a:	7013      	strb	r3, [r2, #0]
			resolution = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001712:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8001716:	6013      	str	r3, [r2, #0]
			break;
 8001718:	e05c      	b.n	80017d4 <main+0x1044>
		case BAD_ANSWER:
			printf("%s - %s\r\n", action_list[current_action].cmd, action_list[current_action].bad_answer);
 800171a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800171e:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 8001722:	781a      	ldrb	r2, [r3, #0]
 8001724:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001728:	f103 0310 	add.w	r3, r3, #16
 800172c:	f6a3 715c 	subw	r1, r3, #3932	; 0xf5c
 8001730:	4613      	mov	r3, r2
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	4413      	add	r3, r2
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	440b      	add	r3, r1
 800173a:	6818      	ldr	r0, [r3, #0]
 800173c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001740:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 8001744:	781a      	ldrb	r2, [r3, #0]
 8001746:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800174a:	f103 0310 	add.w	r3, r3, #16
 800174e:	f6a3 715c 	subw	r1, r3, #3932	; 0xf5c
 8001752:	4613      	mov	r3, r2
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	4413      	add	r3, r2
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	440b      	add	r3, r1
 800175c:	330c      	adds	r3, #12
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	461a      	mov	r2, r3
 8001762:	4601      	mov	r1, r0
 8001764:	484a      	ldr	r0, [pc, #296]	; (8001890 <main+0x1100>)
 8001766:	f002 fe6d 	bl	8004444 <iprintf>
			Do_Action(LTE_reset_action, (uint8_t*)ParseBuffer);
 800176a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800176e:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8001772:	f2a3 7374 	subw	r3, r3, #1908	; 0x774
 8001776:	4a45      	ldr	r2, [pc, #276]	; (800188c <main+0x10fc>)
 8001778:	9202      	str	r2, [sp, #8]
 800177a:	466c      	mov	r4, sp
 800177c:	f103 0210 	add.w	r2, r3, #16
 8001780:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001784:	e884 0003 	stmia.w	r4, {r0, r1}
 8001788:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800178a:	f000 fc09 	bl	8001fa0 <Do_Action>
			HAL_Delay(action_list[current_action].timeout);
 800178e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001792:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 8001796:	781a      	ldrb	r2, [r3, #0]
 8001798:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800179c:	f103 0310 	add.w	r3, r3, #16
 80017a0:	f6a3 715c 	subw	r1, r3, #3932	; 0xf5c
 80017a4:	4613      	mov	r3, r2
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	4413      	add	r3, r2
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	440b      	add	r3, r1
 80017ae:	3308      	adds	r3, #8
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 ff92 	bl	80026dc <HAL_Delay>
			startup = 5;
 80017b8:	2305      	movs	r3, #5
 80017ba:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80017be:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 80017c2:	7013      	strb	r3, [r2, #0]
			resolution = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80017ca:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80017ce:	6013      	str	r3, [r2, #0]
			break;
 80017d0:	e000      	b.n	80017d4 <main+0x1044>
		case FTP_ACTIVE:

			break;
		default:
			break;
 80017d2:	bf00      	nop
		};

		if(UARTDMA_IsDataReady(&huartdma6))
 80017d4:	482f      	ldr	r0, [pc, #188]	; (8001894 <main+0x1104>)
 80017d6:	f7fe ff4a 	bl	800066e <UARTDMA_IsDataReady>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f000 820e 	beq.w	8001bfe <main+0x146e>
		{
			UARTDMA_GetLineFromBuffer(&huartdma6, ParseBuffer);
 80017e2:	492a      	ldr	r1, [pc, #168]	; (800188c <main+0x10fc>)
 80017e4:	482b      	ldr	r0, [pc, #172]	; (8001894 <main+0x1104>)
 80017e6:	f7fe ff53 	bl	8000690 <UARTDMA_GetLineFromBuffer>
			printf("\tBUFFER: >>%s<<\r\n", (char*)ParseBuffer);
 80017ea:	4928      	ldr	r1, [pc, #160]	; (800188c <main+0x10fc>)
 80017ec:	482a      	ldr	r0, [pc, #168]	; (8001898 <main+0x1108>)
 80017ee:	f002 fe29 	bl	8004444 <iprintf>

			// if message is time, update FTP filename
			char* ptr;
			if((ptr = strstr((char*)ParseBuffer, "+CCLK: ")) != NULL){
 80017f2:	492a      	ldr	r1, [pc, #168]	; (800189c <main+0x110c>)
 80017f4:	4825      	ldr	r0, [pc, #148]	; (800188c <main+0x10fc>)
 80017f6:	f002 ff36 	bl	8004666 <strstr>
 80017fa:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80017fe:	f103 0308 	add.w	r3, r3, #8
 8001802:	6018      	str	r0, [r3, #0]
 8001804:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001808:	f103 0308 	add.w	r3, r3, #8
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	f000 8155 	beq.w	8001abe <main+0x132e>
				printf("\t\tTIME: %s\r\n", (char*)ParseBuffer);
 8001814:	491d      	ldr	r1, [pc, #116]	; (800188c <main+0x10fc>)
 8001816:	4822      	ldr	r0, [pc, #136]	; (80018a0 <main+0x1110>)
 8001818:	f002 fe14 	bl	8004444 <iprintf>

				strcat(gps_data_latest,ParseBuffer); // append GPS data with LTE time
 800181c:	f507 53cb 	add.w	r3, r7, #6496	; 0x1960
 8001820:	f103 0318 	add.w	r3, r3, #24
 8001824:	4919      	ldr	r1, [pc, #100]	; (800188c <main+0x10fc>)
 8001826:	4618      	mov	r0, r3
 8001828:	f002 ff06 	bl	8004638 <strcat>
				//strcat(gps_data_latest,"\r\n");

				printf("GPS BUFFER AT TIME: %s\r\n", gps_data_latest);
 800182c:	f507 53cb 	add.w	r3, r7, #6496	; 0x1960
 8001830:	f103 0318 	add.w	r3, r3, #24
 8001834:	4619      	mov	r1, r3
 8001836:	481b      	ldr	r0, [pc, #108]	; (80018a4 <main+0x1114>)
 8001838:	f002 fe04 	bl	8004444 <iprintf>

				if(filename_time_set == 0){ // it's the first time I receive, and I will set FTP file name based on it
 800183c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001840:	f103 032e 	add.w	r3, r3, #46	; 0x2e
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	f040 80c4 	bne.w	80019d4 <main+0x1244>


					filename_time_set = 1; // do not repeat
 800184c:	2301      	movs	r3, #1
 800184e:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001852:	f102 022e 	add.w	r2, r2, #46	; 0x2e
 8001856:	7013      	strb	r3, [r2, #0]

					char* timeString = ptr+8;
 8001858:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800185c:	f103 0308 	add.w	r3, r3, #8
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	3308      	adds	r3, #8
 8001864:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001868:	f102 0204 	add.w	r2, r2, #4
 800186c:	6013      	str	r3, [r2, #0]

					for (int i = 0; i < strlen(timeString); i++)
 800186e:	2300      	movs	r3, #0
 8001870:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001874:	f102 021c 	add.w	r2, r2, #28
 8001878:	6013      	str	r3, [r2, #0]
 800187a:	e05d      	b.n	8001938 <main+0x11a8>
 800187c:	08005b3c 	.word	0x08005b3c
 8001880:	08005b4c 	.word	0x08005b4c
 8001884:	08005b54 	.word	0x08005b54
 8001888:	40020000 	.word	0x40020000
 800188c:	20000dfc 	.word	0x20000dfc
 8001890:	08005b1c 	.word	0x08005b1c
 8001894:	2000008c 	.word	0x2000008c
 8001898:	08005b60 	.word	0x08005b60
 800189c:	08005b74 	.word	0x08005b74
 80018a0:	08005b7c 	.word	0x08005b7c
 80018a4:	08005b8c 	.word	0x08005b8c
					{
						if ((timeString[i] > '9') || (timeString[i] < '0')){
 80018a8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80018ac:	f103 031c 	add.w	r3, r3, #28
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80018b6:	f102 0204 	add.w	r2, r2, #4
 80018ba:	6812      	ldr	r2, [r2, #0]
 80018bc:	4413      	add	r3, r2
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b39      	cmp	r3, #57	; 0x39
 80018c2:	d80d      	bhi.n	80018e0 <main+0x1150>
 80018c4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80018c8:	f103 031c 	add.w	r3, r3, #28
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80018d2:	f102 0204 	add.w	r2, r2, #4
 80018d6:	6812      	ldr	r2, [r2, #0]
 80018d8:	4413      	add	r3, r2
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b2f      	cmp	r3, #47	; 0x2f
 80018de:	d80c      	bhi.n	80018fa <main+0x116a>
							timeString[i] = '_';
 80018e0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80018e4:	f103 031c 	add.w	r3, r3, #28
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80018ee:	f102 0204 	add.w	r2, r2, #4
 80018f2:	6812      	ldr	r2, [r2, #0]
 80018f4:	4413      	add	r3, r2
 80018f6:	225f      	movs	r2, #95	; 0x5f
 80018f8:	701a      	strb	r2, [r3, #0]
						}
						if(i>19){
 80018fa:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80018fe:	f103 031c 	add.w	r3, r3, #28
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b13      	cmp	r3, #19
 8001906:	dd0c      	ble.n	8001922 <main+0x1192>
							timeString[i] = '\0';
 8001908:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800190c:	f103 031c 	add.w	r3, r3, #28
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001916:	f102 0204 	add.w	r2, r2, #4
 800191a:	6812      	ldr	r2, [r2, #0]
 800191c:	4413      	add	r3, r2
 800191e:	2200      	movs	r2, #0
 8001920:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < strlen(timeString); i++)
 8001922:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001926:	f103 031c 	add.w	r3, r3, #28
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	3301      	adds	r3, #1
 800192e:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001932:	f102 021c 	add.w	r2, r2, #28
 8001936:	6013      	str	r3, [r2, #0]
 8001938:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800193c:	f103 0304 	add.w	r3, r3, #4
 8001940:	6818      	ldr	r0, [r3, #0]
 8001942:	f7fe fc25 	bl	8000190 <strlen>
 8001946:	4602      	mov	r2, r0
 8001948:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800194c:	f103 031c 	add.w	r3, r3, #28
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	429a      	cmp	r2, r3
 8001954:	d8a8      	bhi.n	80018a8 <main+0x1118>
						}
					}

					char fileNameLocal[60] = "AT+FTPPUTNAME=\"";
 8001956:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800195a:	f103 0310 	add.w	r3, r3, #16
 800195e:	f6a3 74c8 	subw	r4, r3, #4040	; 0xfc8
 8001962:	4bb9      	ldr	r3, [pc, #740]	; (8001c48 <main+0x14b8>)
 8001964:	4625      	mov	r5, r4
 8001966:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001968:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800196c:	f104 0310 	add.w	r3, r4, #16
 8001970:	222c      	movs	r2, #44	; 0x2c
 8001972:	2100      	movs	r1, #0
 8001974:	4618      	mov	r0, r3
 8001976:	f002 fd5d 	bl	8004434 <memset>
					strcat(fileNameLocal, timeString);
 800197a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800197e:	3b08      	subs	r3, #8
 8001980:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001984:	f102 0204 	add.w	r2, r2, #4
 8001988:	6811      	ldr	r1, [r2, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f002 fe54 	bl	8004638 <strcat>
					strcat(fileNameLocal, ".txt\"\r\n");
 8001990:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001994:	3b08      	subs	r3, #8
 8001996:	4618      	mov	r0, r3
 8001998:	f7fe fbfa 	bl	8000190 <strlen>
 800199c:	4603      	mov	r3, r0
 800199e:	461a      	mov	r2, r3
 80019a0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80019a4:	3b08      	subs	r3, #8
 80019a6:	4413      	add	r3, r2
 80019a8:	49a8      	ldr	r1, [pc, #672]	; (8001c4c <main+0x14bc>)
 80019aa:	461a      	mov	r2, r3
 80019ac:	460b      	mov	r3, r1
 80019ae:	cb03      	ldmia	r3!, {r0, r1}
 80019b0:	6010      	str	r0, [r2, #0]
 80019b2:	6051      	str	r1, [r2, #4]


					printf("\tFILENAME_TIME_CHANGE: %s\r\n", fileNameLocal);
 80019b4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80019b8:	3b08      	subs	r3, #8
 80019ba:	4619      	mov	r1, r3
 80019bc:	48a4      	ldr	r0, [pc, #656]	; (8001c50 <main+0x14c0>)
 80019be:	f002 fd41 	bl	8004444 <iprintf>

					strcpy(g_fileName, fileNameLocal);
 80019c2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80019c6:	3b08      	subs	r3, #8
 80019c8:	f507 52ed 	add.w	r2, r7, #7584	; 0x1da0
 80019cc:	4619      	mov	r1, r3
 80019ce:	4610      	mov	r0, r2
 80019d0:	f002 fe41 	bl	8004656 <strcpy>

				}

				char save[100] = "AT+FTPPUT=2,";
 80019d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019d8:	461d      	mov	r5, r3
 80019da:	4b9e      	ldr	r3, [pc, #632]	; (8001c54 <main+0x14c4>)
 80019dc:	f1a5 042c 	sub.w	r4, r5, #44	; 0x2c
 80019e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019e2:	c407      	stmia	r4!, {r0, r1, r2}
 80019e4:	7023      	strb	r3, [r4, #0]
 80019e6:	f1a5 031f 	sub.w	r3, r5, #31
 80019ea:	2257      	movs	r2, #87	; 0x57
 80019ec:	2100      	movs	r1, #0
 80019ee:	4618      	mov	r0, r3
 80019f0:	f002 fd20 	bl	8004434 <memset>
				char len[5];
				itoa(strlen(gps_data_latest), len, 10);
 80019f4:	f507 53cb 	add.w	r3, r7, #6496	; 0x1960
 80019f8:	f103 0318 	add.w	r3, r3, #24
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7fe fbc7 	bl	8000190 <strlen>
 8001a02:	4603      	mov	r3, r0
 8001a04:	4618      	mov	r0, r3
 8001a06:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001a0a:	3b04      	subs	r3, #4
 8001a0c:	220a      	movs	r2, #10
 8001a0e:	4619      	mov	r1, r3
 8001a10:	f002 fd0e 	bl	8004430 <itoa>
				strcat(save, len);
 8001a14:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8001a18:	3a04      	subs	r2, #4
 8001a1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a1e:	3b2c      	subs	r3, #44	; 0x2c
 8001a20:	4611      	mov	r1, r2
 8001a22:	4618      	mov	r0, r3
 8001a24:	f002 fe08 	bl	8004638 <strcat>
				strcat(save, "\r\n");
 8001a28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a2c:	3b2c      	subs	r3, #44	; 0x2c
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7fe fbae 	bl	8000190 <strlen>
 8001a34:	4603      	mov	r3, r0
 8001a36:	461a      	mov	r2, r3
 8001a38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a3c:	3b2c      	subs	r3, #44	; 0x2c
 8001a3e:	4413      	add	r3, r2
 8001a40:	4a85      	ldr	r2, [pc, #532]	; (8001c58 <main+0x14c8>)
 8001a42:	8811      	ldrh	r1, [r2, #0]
 8001a44:	7892      	ldrb	r2, [r2, #2]
 8001a46:	8019      	strh	r1, [r3, #0]
 8001a48:	709a      	strb	r2, [r3, #2]

				strcpy(g_dataSize, save);
 8001a4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a4e:	3b2c      	subs	r3, #44	; 0x2c
 8001a50:	f507 52ec 	add.w	r2, r7, #7552	; 0x1d80
 8001a54:	f102 020c 	add.w	r2, r2, #12
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4610      	mov	r0, r2
 8001a5c:	f002 fdfb 	bl	8004656 <strcpy>

				char save2[100] = "+FTPPUT: 2,";
 8001a60:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001a64:	f103 0310 	add.w	r3, r3, #16
 8001a68:	f6a3 73c8 	subw	r3, r3, #4040	; 0xfc8
 8001a6c:	4a7b      	ldr	r2, [pc, #492]	; (8001c5c <main+0x14cc>)
 8001a6e:	461c      	mov	r4, r3
 8001a70:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001a76:	330c      	adds	r3, #12
 8001a78:	2258      	movs	r2, #88	; 0x58
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f002 fcd9 	bl	8004434 <memset>
				strcat(save2, len);
 8001a82:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8001a86:	3a04      	subs	r2, #4
 8001a88:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a8c:	3b08      	subs	r3, #8
 8001a8e:	4611      	mov	r1, r2
 8001a90:	4618      	mov	r0, r3
 8001a92:	f002 fdd1 	bl	8004638 <strcat>

				strcpy(g_dataSizeResponse, save2);
 8001a96:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a9a:	3b08      	subs	r3, #8
 8001a9c:	f507 52eb 	add.w	r2, r7, #7520	; 0x1d60
 8001aa0:	f102 0218 	add.w	r2, r2, #24
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4610      	mov	r0, r2
 8001aa8:	f002 fdd5 	bl	8004656 <strcpy>

				printf("\tASSERT_EXPECTED_REPLY: %s\r\n", g_dataSizeResponse);
 8001aac:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8001ab0:	f103 0318 	add.w	r3, r3, #24
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	486a      	ldr	r0, [pc, #424]	; (8001c60 <main+0x14d0>)
 8001ab8:	f002 fcc4 	bl	8004444 <iprintf>
 8001abc:	e490      	b.n	80013e0 <main+0xc50>
				//				}else{
				//					printf("\t\t\t\tCALLOC_FAIL_DATA");
				//				}


			}else if((ptr = strstr((char*)ParseBuffer, "+FTPPUT: 1,1,")) != NULL){ // else, if message is FTP server ready for data response
 8001abe:	4969      	ldr	r1, [pc, #420]	; (8001c64 <main+0x14d4>)
 8001ac0:	4869      	ldr	r0, [pc, #420]	; (8001c68 <main+0x14d8>)
 8001ac2:	f002 fdd0 	bl	8004666 <strstr>
 8001ac6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001aca:	f103 0308 	add.w	r3, r3, #8
 8001ace:	6018      	str	r0, [r3, #0]
 8001ad0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001ad4:	f103 0308 	add.w	r3, r3, #8
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d019      	beq.n	8001b12 <main+0x1382>
				//ftp_transfer_active = 1;
				transfer_status++;
 8001ade:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001ae2:	f103 032d 	add.w	r3, r3, #45	; 0x2d
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001aee:	f102 022d 	add.w	r2, r2, #45	; 0x2d
 8001af2:	7013      	strb	r3, [r2, #0]
				printf("FTP #: %d\r\n", atoi(ptr+13));
 8001af4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001af8:	f103 0308 	add.w	r3, r3, #8
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	330d      	adds	r3, #13
 8001b00:	4618      	mov	r0, r3
 8001b02:	f002 fc4f 	bl	80043a4 <atoi>
 8001b06:	4603      	mov	r3, r0
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4858      	ldr	r0, [pc, #352]	; (8001c6c <main+0x14dc>)
 8001b0c:	f002 fc9a 	bl	8004444 <iprintf>
 8001b10:	e466      	b.n	80013e0 <main+0xc50>
			}else if((ptr = strstr((char*)ParseBuffer, "+CGNSINF")) != NULL){ // save GPS data
 8001b12:	4957      	ldr	r1, [pc, #348]	; (8001c70 <main+0x14e0>)
 8001b14:	4854      	ldr	r0, [pc, #336]	; (8001c68 <main+0x14d8>)
 8001b16:	f002 fda6 	bl	8004666 <strstr>
 8001b1a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001b1e:	f103 0308 	add.w	r3, r3, #8
 8001b22:	6018      	str	r0, [r3, #0]
 8001b24:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001b28:	f103 0308 	add.w	r3, r3, #8
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f43f ac56 	beq.w	80013e0 <main+0xc50>
				//ftp_transfer_active = 0;
				//transfer_status = 0; // I receive new GPS data, which means I don't transmit

				for(int i=0; i<BUFFER_SIZE; i++){ // clean old data
 8001b34:	2300      	movs	r3, #0
 8001b36:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001b3a:	f102 0218 	add.w	r2, r2, #24
 8001b3e:	6013      	str	r3, [r2, #0]
 8001b40:	e018      	b.n	8001b74 <main+0x13e4>
					gps_data_latest[i] = '\0';
 8001b42:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001b46:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8001b4a:	f5a3 62d7 	sub.w	r2, r3, #1720	; 0x6b8
 8001b4e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001b52:	f103 0318 	add.w	r3, r3, #24
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4413      	add	r3, r2
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<BUFFER_SIZE; i++){ // clean old data
 8001b5e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001b62:	f103 0318 	add.w	r3, r3, #24
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001b6e:	f102 0218 	add.w	r2, r2, #24
 8001b72:	6013      	str	r3, [r2, #0]
 8001b74:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001b78:	f103 0318 	add.w	r3, r3, #24
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b82:	dbde      	blt.n	8001b42 <main+0x13b2>
				}

				for(int i=0; i<strlen(ParseBuffer); i++){
 8001b84:	2300      	movs	r3, #0
 8001b86:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001b8a:	f102 0214 	add.w	r2, r2, #20
 8001b8e:	6013      	str	r3, [r2, #0]
 8001b90:	e020      	b.n	8001bd4 <main+0x1444>
					gps_data_latest[i] = ParseBuffer[i];
 8001b92:	4a35      	ldr	r2, [pc, #212]	; (8001c68 <main+0x14d8>)
 8001b94:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001b98:	f103 0314 	add.w	r3, r3, #20
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	7819      	ldrb	r1, [r3, #0]
 8001ba2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001ba6:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8001baa:	f5a3 62d7 	sub.w	r2, r3, #1720	; 0x6b8
 8001bae:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001bb2:	f103 0314 	add.w	r3, r3, #20
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4413      	add	r3, r2
 8001bba:	460a      	mov	r2, r1
 8001bbc:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<strlen(ParseBuffer); i++){
 8001bbe:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001bc2:	f103 0314 	add.w	r3, r3, #20
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001bce:	f102 0214 	add.w	r2, r2, #20
 8001bd2:	6013      	str	r3, [r2, #0]
 8001bd4:	4824      	ldr	r0, [pc, #144]	; (8001c68 <main+0x14d8>)
 8001bd6:	f7fe fadb 	bl	8000190 <strlen>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001be0:	f103 0314 	add.w	r3, r3, #20
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d8d3      	bhi.n	8001b92 <main+0x1402>
				}

				printf("GPS DATA LOCKED: %s\r\n", gps_data_latest);
 8001bea:	f507 53cb 	add.w	r3, r7, #6496	; 0x1960
 8001bee:	f103 0318 	add.w	r3, r3, #24
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	481f      	ldr	r0, [pc, #124]	; (8001c74 <main+0x14e4>)
 8001bf6:	f002 fc25 	bl	8004444 <iprintf>
 8001bfa:	f7ff bbf1 	b.w	80013e0 <main+0xc50>

			}

		}else{
			for(int i = 0; i< BUFFER_SIZE; i++){
 8001bfe:	2300      	movs	r3, #0
 8001c00:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001c04:	f102 0210 	add.w	r2, r2, #16
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	e013      	b.n	8001c34 <main+0x14a4>
				ParseBuffer[i] ='\0';
 8001c0c:	4a16      	ldr	r2, [pc, #88]	; (8001c68 <main+0x14d8>)
 8001c0e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001c12:	f103 0310 	add.w	r3, r3, #16
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4413      	add	r3, r2
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i< BUFFER_SIZE; i++){
 8001c1e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001c22:	f103 0310 	add.w	r3, r3, #16
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001c2e:	f102 0210 	add.w	r2, r2, #16
 8001c32:	6013      	str	r3, [r2, #0]
 8001c34:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001c38:	f103 0310 	add.w	r3, r3, #16
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c42:	dbe3      	blt.n	8001c0c <main+0x147c>
	{
 8001c44:	f7ff bbcc 	b.w	80013e0 <main+0xc50>
 8001c48:	08005ee4 	.word	0x08005ee4
 8001c4c:	08005ad0 	.word	0x08005ad0
 8001c50:	08005ba8 	.word	0x08005ba8
 8001c54:	08005f20 	.word	0x08005f20
 8001c58:	08005bc4 	.word	0x08005bc4
 8001c5c:	08005f84 	.word	0x08005f84
 8001c60:	08005bc8 	.word	0x08005bc8
 8001c64:	08005be8 	.word	0x08005be8
 8001c68:	20000dfc 	.word	0x20000dfc
 8001c6c:	08005bf8 	.word	0x08005bf8
 8001c70:	08005c04 	.word	0x08005c04
 8001c74:	08005c10 	.word	0x08005c10

08001c78 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b092      	sub	sp, #72	; 0x48
 8001c7c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c7e:	f107 0314 	add.w	r3, r7, #20
 8001c82:	2234      	movs	r2, #52	; 0x34
 8001c84:	2100      	movs	r1, #0
 8001c86:	4618      	mov	r0, r3
 8001c88:	f002 fbd4 	bl	8004434 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c8c:	463b      	mov	r3, r7
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	605a      	str	r2, [r3, #4]
 8001c94:	609a      	str	r2, [r3, #8]
 8001c96:	60da      	str	r2, [r3, #12]
 8001c98:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c9a:	4b1d      	ldr	r3, [pc, #116]	; (8001d10 <SystemClock_Config+0x98>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001ca2:	4a1b      	ldr	r2, [pc, #108]	; (8001d10 <SystemClock_Config+0x98>)
 8001ca4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ca8:	6013      	str	r3, [r2, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001caa:	2302      	movs	r3, #2
 8001cac:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cb2:	2310      	movs	r3, #16
 8001cb4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001cbe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001cc2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001cc4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001cc8:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f001 f8e0 	bl	8002e94 <HAL_RCC_OscConfig>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <SystemClock_Config+0x66>
	{
		Error_Handler();
 8001cda:	f000 f947 	bl	8001f6c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cde:	230f      	movs	r3, #15
 8001ce0:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001cf2:	463b      	mov	r3, r7
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f001 fbfc 	bl	80034f4 <HAL_RCC_ClockConfig>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <SystemClock_Config+0x8e>
	{
		Error_Handler();
 8001d02:	f000 f933 	bl	8001f6c <Error_Handler>
	}
}
 8001d06:	bf00      	nop
 8001d08:	3748      	adds	r7, #72	; 0x48
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40007000 	.word	0x40007000

08001d14 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8001d18:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <MX_UART4_Init+0x4c>)
 8001d1a:	4a12      	ldr	r2, [pc, #72]	; (8001d64 <MX_UART4_Init+0x50>)
 8001d1c:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 8001d1e:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <MX_UART4_Init+0x4c>)
 8001d20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d24:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001d26:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <MX_UART4_Init+0x4c>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8001d2c:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <MX_UART4_Init+0x4c>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8001d32:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <MX_UART4_Init+0x4c>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8001d38:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <MX_UART4_Init+0x4c>)
 8001d3a:	220c      	movs	r2, #12
 8001d3c:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d3e:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <MX_UART4_Init+0x4c>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <MX_UART4_Init+0x4c>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK)
 8001d4a:	4805      	ldr	r0, [pc, #20]	; (8001d60 <MX_UART4_Init+0x4c>)
 8001d4c:	f001 fe98 	bl	8003a80 <HAL_UART_Init>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_UART4_Init+0x46>
	{
		Error_Handler();
 8001d56:	f000 f909 	bl	8001f6c <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000c98 	.word	0x20000c98
 8001d64:	40004c00 	.word	0x40004c00

08001d68 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001d6c:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <MX_USART1_UART_Init+0x4c>)
 8001d6e:	4a12      	ldr	r2, [pc, #72]	; (8001db8 <MX_USART1_UART_Init+0x50>)
 8001d70:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001d72:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <MX_USART1_UART_Init+0x4c>)
 8001d74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d78:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <MX_USART1_UART_Init+0x4c>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001d80:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <MX_USART1_UART_Init+0x4c>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001d86:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <MX_USART1_UART_Init+0x4c>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001d8c:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <MX_USART1_UART_Init+0x4c>)
 8001d8e:	220c      	movs	r2, #12
 8001d90:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d92:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <MX_USART1_UART_Init+0x4c>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d98:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <MX_USART1_UART_Init+0x4c>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d9e:	4805      	ldr	r0, [pc, #20]	; (8001db4 <MX_USART1_UART_Init+0x4c>)
 8001da0:	f001 fe6e 	bl	8003a80 <HAL_UART_Init>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8001daa:	f000 f8df 	bl	8001f6c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000ce0 	.word	0x20000ce0
 8001db8:	40013800 	.word	0x40013800

08001dbc <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001dc0:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <MX_USART2_UART_Init+0x4c>)
 8001dc2:	4a12      	ldr	r2, [pc, #72]	; (8001e0c <MX_USART2_UART_Init+0x50>)
 8001dc4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 57600;
 8001dc6:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <MX_USART2_UART_Init+0x4c>)
 8001dc8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001dcc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dce:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <MX_USART2_UART_Init+0x4c>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <MX_USART2_UART_Init+0x4c>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001dda:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <MX_USART2_UART_Init+0x4c>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001de0:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <MX_USART2_UART_Init+0x4c>)
 8001de2:	220c      	movs	r2, #12
 8001de4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001de6:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <MX_USART2_UART_Init+0x4c>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <MX_USART2_UART_Init+0x4c>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001df2:	4805      	ldr	r0, [pc, #20]	; (8001e08 <MX_USART2_UART_Init+0x4c>)
 8001df4:	f001 fe44 	bl	8003a80 <HAL_UART_Init>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8001dfe:	f000 f8b5 	bl	8001f6c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20000d28 	.word	0x20000d28
 8001e0c:	40004400 	.word	0x40004400

08001e10 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001e14:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <MX_USART3_UART_Init+0x4c>)
 8001e16:	4a12      	ldr	r2, [pc, #72]	; (8001e60 <MX_USART3_UART_Init+0x50>)
 8001e18:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8001e1a:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <MX_USART3_UART_Init+0x4c>)
 8001e1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e20:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e22:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <MX_USART3_UART_Init+0x4c>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001e28:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <MX_USART3_UART_Init+0x4c>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001e2e:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <MX_USART3_UART_Init+0x4c>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001e34:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <MX_USART3_UART_Init+0x4c>)
 8001e36:	220c      	movs	r2, #12
 8001e38:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e3a:	4b08      	ldr	r3, [pc, #32]	; (8001e5c <MX_USART3_UART_Init+0x4c>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e40:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <MX_USART3_UART_Init+0x4c>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e46:	4805      	ldr	r0, [pc, #20]	; (8001e5c <MX_USART3_UART_Init+0x4c>)
 8001e48:	f001 fe1a 	bl	8003a80 <HAL_UART_Init>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 8001e52:	f000 f88b 	bl	8001f6c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	20000d70 	.word	0x20000d70
 8001e60:	40004800 	.word	0x40004800

08001e64 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001e6a:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <MX_DMA_Init+0x38>)
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	4a0b      	ldr	r2, [pc, #44]	; (8001e9c <MX_DMA_Init+0x38>)
 8001e70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e74:	61d3      	str	r3, [r2, #28]
 8001e76:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <MX_DMA_Init+0x38>)
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e7e:	607b      	str	r3, [r7, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001e82:	2200      	movs	r2, #0
 8001e84:	2100      	movs	r1, #0
 8001e86:	2010      	movs	r0, #16
 8001e88:	f000 fd21 	bl	80028ce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001e8c:	2010      	movs	r0, #16
 8001e8e:	f000 fd3a 	bl	8002906 <HAL_NVIC_EnableIRQ>

}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40023800 	.word	0x40023800

08001ea0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08a      	sub	sp, #40	; 0x28
 8001ea4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea6:	f107 0314 	add.w	r3, r7, #20
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	605a      	str	r2, [r3, #4]
 8001eb0:	609a      	str	r2, [r3, #8]
 8001eb2:	60da      	str	r2, [r3, #12]
 8001eb4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001eb6:	4b2a      	ldr	r3, [pc, #168]	; (8001f60 <MX_GPIO_Init+0xc0>)
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	4a29      	ldr	r2, [pc, #164]	; (8001f60 <MX_GPIO_Init+0xc0>)
 8001ebc:	f043 0304 	orr.w	r3, r3, #4
 8001ec0:	61d3      	str	r3, [r2, #28]
 8001ec2:	4b27      	ldr	r3, [pc, #156]	; (8001f60 <MX_GPIO_Init+0xc0>)
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	f003 0304 	and.w	r3, r3, #4
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001ece:	4b24      	ldr	r3, [pc, #144]	; (8001f60 <MX_GPIO_Init+0xc0>)
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	4a23      	ldr	r2, [pc, #140]	; (8001f60 <MX_GPIO_Init+0xc0>)
 8001ed4:	f043 0320 	orr.w	r3, r3, #32
 8001ed8:	61d3      	str	r3, [r2, #28]
 8001eda:	4b21      	ldr	r3, [pc, #132]	; (8001f60 <MX_GPIO_Init+0xc0>)
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	f003 0320 	and.w	r3, r3, #32
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee6:	4b1e      	ldr	r3, [pc, #120]	; (8001f60 <MX_GPIO_Init+0xc0>)
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	4a1d      	ldr	r2, [pc, #116]	; (8001f60 <MX_GPIO_Init+0xc0>)
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	61d3      	str	r3, [r2, #28]
 8001ef2:	4b1b      	ldr	r3, [pc, #108]	; (8001f60 <MX_GPIO_Init+0xc0>)
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	60bb      	str	r3, [r7, #8]
 8001efc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001efe:	4b18      	ldr	r3, [pc, #96]	; (8001f60 <MX_GPIO_Init+0xc0>)
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	4a17      	ldr	r2, [pc, #92]	; (8001f60 <MX_GPIO_Init+0xc0>)
 8001f04:	f043 0302 	orr.w	r3, r3, #2
 8001f08:	61d3      	str	r3, [r2, #28]
 8001f0a:	4b15      	ldr	r3, [pc, #84]	; (8001f60 <MX_GPIO_Init+0xc0>)
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	607b      	str	r3, [r7, #4]
 8001f14:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8001f16:	2200      	movs	r2, #0
 8001f18:	2160      	movs	r1, #96	; 0x60
 8001f1a:	4812      	ldr	r0, [pc, #72]	; (8001f64 <MX_GPIO_Init+0xc4>)
 8001f1c:	f000 ffa2 	bl	8002e64 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001f20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f24:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f26:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001f2a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f30:	f107 0314 	add.w	r3, r7, #20
 8001f34:	4619      	mov	r1, r3
 8001f36:	480c      	ldr	r0, [pc, #48]	; (8001f68 <MX_GPIO_Init+0xc8>)
 8001f38:	f000 fe04 	bl	8002b44 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin PA6 */
	GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
 8001f3c:	2360      	movs	r3, #96	; 0x60
 8001f3e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f40:	2301      	movs	r3, #1
 8001f42:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4c:	f107 0314 	add.w	r3, r7, #20
 8001f50:	4619      	mov	r1, r3
 8001f52:	4804      	ldr	r0, [pc, #16]	; (8001f64 <MX_GPIO_Init+0xc4>)
 8001f54:	f000 fdf6 	bl	8002b44 <HAL_GPIO_Init>

}
 8001f58:	bf00      	nop
 8001f5a:	3728      	adds	r7, #40	; 0x28
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40023800 	.word	0x40023800
 8001f64:	40020000 	.word	0x40020000
 8001f68:	40020800 	.word	0x40020800

08001f6c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f70:	b672      	cpsid	i
}
 8001f72:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001f74:	e7fe      	b.n	8001f74 <Error_Handler+0x8>
	...

08001f78 <Send_LTE>:
#include "scheduler.h"


void Send_LTE(char* cmd){
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
	//printf("%s, %d - SIZEOF\r\n", (char*)cmd, sizeof(cmd));
	//	strcat(cmd, "\r\n");
	//printf("%s, %d - SIZEOF\r\n", cmd, strlen(cmd));
	HAL_UART_Transmit(&huart2,(uint8_t*)cmd,strlen(cmd),10);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f7fe f905 	bl	8000190 <strlen>
 8001f86:	4603      	mov	r3, r0
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	230a      	movs	r3, #10
 8001f8c:	6879      	ldr	r1, [r7, #4]
 8001f8e:	4803      	ldr	r0, [pc, #12]	; (8001f9c <Send_LTE+0x24>)
 8001f90:	f001 fdc6 	bl	8003b20 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart2,(uint8_t*)"\r\n",2,10);
}
 8001f94:	bf00      	nop
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	20000d28 	.word	0x20000d28

08001fa0 <Do_Action>:
void Get_LTE_data(){
	UARTDMA_IsDataReady(&huartdma6);
}


enum State Do_Action(command cmd, uint8_t* uart_data){
 8001fa0:	b084      	sub	sp, #16
 8001fa2:	b590      	push	{r4, r7, lr}
 8001fa4:	b087      	sub	sp, #28
 8001fa6:	af04      	add	r7, sp, #16
 8001fa8:	f107 0418 	add.w	r4, r7, #24
 8001fac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	static enum State state = READY;
	static unsigned int retry;
	static int start_time;

	if(strcmp(cmd.cmd, "FTP_ACTIVE") == 0){
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	495b      	ldr	r1, [pc, #364]	; (8002120 <Do_Action+0x180>)
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7fe f8e1 	bl	800017c <strcmp>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d117      	bne.n	8001ff0 <Do_Action+0x50>
		state = FTP_ACTIVE;
 8001fc0:	4b58      	ldr	r3, [pc, #352]	; (8002124 <Do_Action+0x184>)
 8001fc2:	2205      	movs	r2, #5
 8001fc4:	701a      	strb	r2, [r3, #0]
		retry = 0;
 8001fc6:	4b58      	ldr	r3, [pc, #352]	; (8002128 <Do_Action+0x188>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
		for(int i = 0; i< BUFFER_SIZE; i++){
 8001fcc:	2300      	movs	r3, #0
 8001fce:	607b      	str	r3, [r7, #4]
 8001fd0:	e007      	b.n	8001fe2 <Do_Action+0x42>
			uart_data[i] ='\0';
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fd6:	4413      	add	r3, r2
 8001fd8:	2200      	movs	r2, #0
 8001fda:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i< BUFFER_SIZE; i++){
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	607b      	str	r3, [r7, #4]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fe8:	dbf3      	blt.n	8001fd2 <Do_Action+0x32>
		}
		return state;
 8001fea:	4b4e      	ldr	r3, [pc, #312]	; (8002124 <Do_Action+0x184>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	e08f      	b.n	8002110 <Do_Action+0x170>
	}


	if(strcmp(cmd.cmd, "RESET_ACTION") == 0){
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	494e      	ldr	r1, [pc, #312]	; (800212c <Do_Action+0x18c>)
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe f8c1 	bl	800017c <strcmp>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d117      	bne.n	8002030 <Do_Action+0x90>
		state = READY;
 8002000:	4b48      	ldr	r3, [pc, #288]	; (8002124 <Do_Action+0x184>)
 8002002:	2200      	movs	r2, #0
 8002004:	701a      	strb	r2, [r3, #0]
		retry = 0;
 8002006:	4b48      	ldr	r3, [pc, #288]	; (8002128 <Do_Action+0x188>)
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
		for(int i = 0; i< BUFFER_SIZE; i++){
 800200c:	2300      	movs	r3, #0
 800200e:	603b      	str	r3, [r7, #0]
 8002010:	e007      	b.n	8002022 <Do_Action+0x82>
			uart_data[i] ='\0';
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002016:	4413      	add	r3, r2
 8002018:	2200      	movs	r2, #0
 800201a:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i< BUFFER_SIZE; i++){
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	3301      	adds	r3, #1
 8002020:	603b      	str	r3, [r7, #0]
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002028:	dbf3      	blt.n	8002012 <Do_Action+0x72>
		}
		return state;
 800202a:	4b3e      	ldr	r3, [pc, #248]	; (8002124 <Do_Action+0x184>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	e06f      	b.n	8002110 <Do_Action+0x170>
	}

	if(state == READY){ 					// ready to send new command
 8002030:	4b3c      	ldr	r3, [pc, #240]	; (8002124 <Do_Action+0x184>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d10f      	bne.n	8002058 <Do_Action+0xb8>
		start_time = HAL_GetTick();		// save send time
 8002038:	f000 fb46 	bl	80026c8 <HAL_GetTick>
 800203c:	4603      	mov	r3, r0
 800203e:	461a      	mov	r2, r3
 8002040:	4b3b      	ldr	r3, [pc, #236]	; (8002130 <Do_Action+0x190>)
 8002042:	601a      	str	r2, [r3, #0]
		state = CHECKING_ANSWER;			// notify that now we wait for a reply
 8002044:	4b37      	ldr	r3, [pc, #220]	; (8002124 <Do_Action+0x184>)
 8002046:	2201      	movs	r2, #1
 8002048:	701a      	strb	r2, [r3, #0]
		Send_LTE(cmd.cmd);				// send new command
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff ff93 	bl	8001f78 <Send_LTE>
		return state;
 8002052:	4b34      	ldr	r3, [pc, #208]	; (8002124 <Do_Action+0x184>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	e05b      	b.n	8002110 <Do_Action+0x170>

	}else if(state == CHECKING_ANSWER){	// if we expect a reply now
 8002058:	4b32      	ldr	r3, [pc, #200]	; (8002124 <Do_Action+0x184>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d155      	bne.n	800210c <Do_Action+0x16c>

		if((start_time + cmd.timeout) < HAL_GetTick()){	// if we wait too long, report timeout
 8002060:	6a3a      	ldr	r2, [r7, #32]
 8002062:	4b33      	ldr	r3, [pc, #204]	; (8002130 <Do_Action+0x190>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4413      	add	r3, r2
 8002068:	461c      	mov	r4, r3
 800206a:	f000 fb2d 	bl	80026c8 <HAL_GetTick>
 800206e:	4603      	mov	r3, r0
 8002070:	429c      	cmp	r4, r3
 8002072:	d205      	bcs.n	8002080 <Do_Action+0xe0>
			state = TIMEOUT;
 8002074:	4b2b      	ldr	r3, [pc, #172]	; (8002124 <Do_Action+0x184>)
 8002076:	2204      	movs	r2, #4
 8002078:	701a      	strb	r2, [r3, #0]
			return state;
 800207a:	4b2a      	ldr	r3, [pc, #168]	; (8002124 <Do_Action+0x184>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	e047      	b.n	8002110 <Do_Action+0x170>
		}

		if((strcmp(cmd.good_answer, (char*)uart_data) == 0) || strcmp(cmd.good_answer, "ANY") == 0){ 		// if the reply is OK, return success
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002084:	4618      	mov	r0, r3
 8002086:	f7fe f879 	bl	800017c <strcmp>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d007      	beq.n	80020a0 <Do_Action+0x100>
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	4928      	ldr	r1, [pc, #160]	; (8002134 <Do_Action+0x194>)
 8002094:	4618      	mov	r0, r3
 8002096:	f7fe f871 	bl	800017c <strcmp>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d105      	bne.n	80020ac <Do_Action+0x10c>
			state = GOOD_ANSWER;
 80020a0:	4b20      	ldr	r3, [pc, #128]	; (8002124 <Do_Action+0x184>)
 80020a2:	2202      	movs	r2, #2
 80020a4:	701a      	strb	r2, [r3, #0]
			return state;
 80020a6:	4b1f      	ldr	r3, [pc, #124]	; (8002124 <Do_Action+0x184>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	e031      	b.n	8002110 <Do_Action+0x170>
		}else if(strcmp(cmd.bad_answer, (char*)uart_data) == 0){	// if the reply suggest an error...
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7fe f863 	bl	800017c <strcmp>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d127      	bne.n	800210c <Do_Action+0x16c>
			state = BAD_ANSWER;
 80020bc:	4b19      	ldr	r3, [pc, #100]	; (8002124 <Do_Action+0x184>)
 80020be:	2203      	movs	r2, #3
 80020c0:	701a      	strb	r2, [r3, #0]
			if(retry < cmd.retry_counter){				// retry if structure suggest that behaviour
 80020c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c4:	461a      	mov	r2, r3
 80020c6:	4b18      	ldr	r3, [pc, #96]	; (8002128 <Do_Action+0x188>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d915      	bls.n	80020fa <Do_Action+0x15a>
				retry++;
 80020ce:	4b16      	ldr	r3, [pc, #88]	; (8002128 <Do_Action+0x188>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	3301      	adds	r3, #1
 80020d4:	4a14      	ldr	r2, [pc, #80]	; (8002128 <Do_Action+0x188>)
 80020d6:	6013      	str	r3, [r2, #0]
				Do_Action(cmd, uart_data);
 80020d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020da:	9302      	str	r3, [sp, #8]
 80020dc:	466a      	mov	r2, sp
 80020de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020e2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80020e6:	e882 0003 	stmia.w	r2, {r0, r1}
 80020ea:	f107 0318 	add.w	r3, r7, #24
 80020ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020f0:	f7ff ff56 	bl	8001fa0 <Do_Action>
			}else{										// if retries still give an error, or no replies suggested, report error
				retry = 0;
				state = BAD_ANSWER;
				return state;
			}
			return state;
 80020f4:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <Do_Action+0x184>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	e00a      	b.n	8002110 <Do_Action+0x170>
				retry = 0;
 80020fa:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <Do_Action+0x188>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
				state = BAD_ANSWER;
 8002100:	4b08      	ldr	r3, [pc, #32]	; (8002124 <Do_Action+0x184>)
 8002102:	2203      	movs	r2, #3
 8002104:	701a      	strb	r2, [r3, #0]
				return state;
 8002106:	4b07      	ldr	r3, [pc, #28]	; (8002124 <Do_Action+0x184>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	e001      	b.n	8002110 <Do_Action+0x170>
		}
	}

	return state;
 800210c:	4b05      	ldr	r3, [pc, #20]	; (8002124 <Do_Action+0x184>)
 800210e:	781b      	ldrb	r3, [r3, #0]
}
 8002110:	4618      	mov	r0, r3
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800211a:	b004      	add	sp, #16
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	08005fe8 	.word	0x08005fe8
 8002124:	200011fc 	.word	0x200011fc
 8002128:	20001200 	.word	0x20001200
 800212c:	08005ff4 	.word	0x08005ff4
 8002130:	20001204 	.word	0x20001204
 8002134:	08006004 	.word	0x08006004

08002138 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800213e:	4b15      	ldr	r3, [pc, #84]	; (8002194 <HAL_MspInit+0x5c>)
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002142:	4a14      	ldr	r2, [pc, #80]	; (8002194 <HAL_MspInit+0x5c>)
 8002144:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002148:	6253      	str	r3, [r2, #36]	; 0x24
 800214a:	4b12      	ldr	r3, [pc, #72]	; (8002194 <HAL_MspInit+0x5c>)
 800214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002156:	4b0f      	ldr	r3, [pc, #60]	; (8002194 <HAL_MspInit+0x5c>)
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	4a0e      	ldr	r2, [pc, #56]	; (8002194 <HAL_MspInit+0x5c>)
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	6213      	str	r3, [r2, #32]
 8002162:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <HAL_MspInit+0x5c>)
 8002164:	6a1b      	ldr	r3, [r3, #32]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	60bb      	str	r3, [r7, #8]
 800216c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800216e:	4b09      	ldr	r3, [pc, #36]	; (8002194 <HAL_MspInit+0x5c>)
 8002170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002172:	4a08      	ldr	r2, [pc, #32]	; (8002194 <HAL_MspInit+0x5c>)
 8002174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002178:	6253      	str	r3, [r2, #36]	; 0x24
 800217a:	4b06      	ldr	r3, [pc, #24]	; (8002194 <HAL_MspInit+0x5c>)
 800217c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002182:	607b      	str	r3, [r7, #4]
 8002184:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002186:	2007      	movs	r0, #7
 8002188:	f000 fb96 	bl	80028b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800218c:	bf00      	nop
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40023800 	.word	0x40023800

08002198 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b090      	sub	sp, #64	; 0x40
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a74      	ldr	r2, [pc, #464]	; (8002388 <HAL_UART_MspInit+0x1f0>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d129      	bne.n	800220e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80021ba:	4b74      	ldr	r3, [pc, #464]	; (800238c <HAL_UART_MspInit+0x1f4>)
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	4a73      	ldr	r2, [pc, #460]	; (800238c <HAL_UART_MspInit+0x1f4>)
 80021c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80021c4:	6253      	str	r3, [r2, #36]	; 0x24
 80021c6:	4b71      	ldr	r3, [pc, #452]	; (800238c <HAL_UART_MspInit+0x1f4>)
 80021c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80021d0:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021d2:	4b6e      	ldr	r3, [pc, #440]	; (800238c <HAL_UART_MspInit+0x1f4>)
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	4a6d      	ldr	r2, [pc, #436]	; (800238c <HAL_UART_MspInit+0x1f4>)
 80021d8:	f043 0304 	orr.w	r3, r3, #4
 80021dc:	61d3      	str	r3, [r2, #28]
 80021de:	4b6b      	ldr	r3, [pc, #428]	; (800238c <HAL_UART_MspInit+0x1f4>)
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	f003 0304 	and.w	r3, r3, #4
 80021e6:	627b      	str	r3, [r7, #36]	; 0x24
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80021ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80021ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f0:	2302      	movs	r3, #2
 80021f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021f4:	2301      	movs	r3, #1
 80021f6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f8:	2303      	movs	r3, #3
 80021fa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80021fc:	2308      	movs	r3, #8
 80021fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002200:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002204:	4619      	mov	r1, r3
 8002206:	4862      	ldr	r0, [pc, #392]	; (8002390 <HAL_UART_MspInit+0x1f8>)
 8002208:	f000 fc9c 	bl	8002b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800220c:	e0b8      	b.n	8002380 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART1)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a60      	ldr	r2, [pc, #384]	; (8002394 <HAL_UART_MspInit+0x1fc>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d129      	bne.n	800226c <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002218:	4b5c      	ldr	r3, [pc, #368]	; (800238c <HAL_UART_MspInit+0x1f4>)
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	4a5b      	ldr	r2, [pc, #364]	; (800238c <HAL_UART_MspInit+0x1f4>)
 800221e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002222:	6213      	str	r3, [r2, #32]
 8002224:	4b59      	ldr	r3, [pc, #356]	; (800238c <HAL_UART_MspInit+0x1f4>)
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800222c:	623b      	str	r3, [r7, #32]
 800222e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002230:	4b56      	ldr	r3, [pc, #344]	; (800238c <HAL_UART_MspInit+0x1f4>)
 8002232:	69db      	ldr	r3, [r3, #28]
 8002234:	4a55      	ldr	r2, [pc, #340]	; (800238c <HAL_UART_MspInit+0x1f4>)
 8002236:	f043 0301 	orr.w	r3, r3, #1
 800223a:	61d3      	str	r3, [r2, #28]
 800223c:	4b53      	ldr	r3, [pc, #332]	; (800238c <HAL_UART_MspInit+0x1f4>)
 800223e:	69db      	ldr	r3, [r3, #28]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	61fb      	str	r3, [r7, #28]
 8002246:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002248:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800224c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224e:	2302      	movs	r3, #2
 8002250:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002252:	2300      	movs	r3, #0
 8002254:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002256:	2303      	movs	r3, #3
 8002258:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800225a:	2307      	movs	r3, #7
 800225c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002262:	4619      	mov	r1, r3
 8002264:	484c      	ldr	r0, [pc, #304]	; (8002398 <HAL_UART_MspInit+0x200>)
 8002266:	f000 fc6d 	bl	8002b44 <HAL_GPIO_Init>
}
 800226a:	e089      	b.n	8002380 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART2)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a4a      	ldr	r2, [pc, #296]	; (800239c <HAL_UART_MspInit+0x204>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d156      	bne.n	8002324 <HAL_UART_MspInit+0x18c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002276:	4b45      	ldr	r3, [pc, #276]	; (800238c <HAL_UART_MspInit+0x1f4>)
 8002278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227a:	4a44      	ldr	r2, [pc, #272]	; (800238c <HAL_UART_MspInit+0x1f4>)
 800227c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002280:	6253      	str	r3, [r2, #36]	; 0x24
 8002282:	4b42      	ldr	r3, [pc, #264]	; (800238c <HAL_UART_MspInit+0x1f4>)
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228a:	61bb      	str	r3, [r7, #24]
 800228c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800228e:	4b3f      	ldr	r3, [pc, #252]	; (800238c <HAL_UART_MspInit+0x1f4>)
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	4a3e      	ldr	r2, [pc, #248]	; (800238c <HAL_UART_MspInit+0x1f4>)
 8002294:	f043 0301 	orr.w	r3, r3, #1
 8002298:	61d3      	str	r3, [r2, #28]
 800229a:	4b3c      	ldr	r3, [pc, #240]	; (800238c <HAL_UART_MspInit+0x1f4>)
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	617b      	str	r3, [r7, #20]
 80022a4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80022a6:	230c      	movs	r3, #12
 80022a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022aa:	2302      	movs	r3, #2
 80022ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ae:	2300      	movs	r3, #0
 80022b0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b2:	2303      	movs	r3, #3
 80022b4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022b6:	2307      	movs	r3, #7
 80022b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022be:	4619      	mov	r1, r3
 80022c0:	4835      	ldr	r0, [pc, #212]	; (8002398 <HAL_UART_MspInit+0x200>)
 80022c2:	f000 fc3f 	bl	8002b44 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80022c6:	4b36      	ldr	r3, [pc, #216]	; (80023a0 <HAL_UART_MspInit+0x208>)
 80022c8:	4a36      	ldr	r2, [pc, #216]	; (80023a4 <HAL_UART_MspInit+0x20c>)
 80022ca:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022cc:	4b34      	ldr	r3, [pc, #208]	; (80023a0 <HAL_UART_MspInit+0x208>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022d2:	4b33      	ldr	r3, [pc, #204]	; (80023a0 <HAL_UART_MspInit+0x208>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022d8:	4b31      	ldr	r3, [pc, #196]	; (80023a0 <HAL_UART_MspInit+0x208>)
 80022da:	2280      	movs	r2, #128	; 0x80
 80022dc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022de:	4b30      	ldr	r3, [pc, #192]	; (80023a0 <HAL_UART_MspInit+0x208>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022e4:	4b2e      	ldr	r3, [pc, #184]	; (80023a0 <HAL_UART_MspInit+0x208>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80022ea:	4b2d      	ldr	r3, [pc, #180]	; (80023a0 <HAL_UART_MspInit+0x208>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022f0:	4b2b      	ldr	r3, [pc, #172]	; (80023a0 <HAL_UART_MspInit+0x208>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80022f6:	482a      	ldr	r0, [pc, #168]	; (80023a0 <HAL_UART_MspInit+0x208>)
 80022f8:	f000 fb20 	bl	800293c <HAL_DMA_Init>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_UART_MspInit+0x16e>
      Error_Handler();
 8002302:	f7ff fe33 	bl	8001f6c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a25      	ldr	r2, [pc, #148]	; (80023a0 <HAL_UART_MspInit+0x208>)
 800230a:	63da      	str	r2, [r3, #60]	; 0x3c
 800230c:	4a24      	ldr	r2, [pc, #144]	; (80023a0 <HAL_UART_MspInit+0x208>)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002312:	2200      	movs	r2, #0
 8002314:	2100      	movs	r1, #0
 8002316:	2026      	movs	r0, #38	; 0x26
 8002318:	f000 fad9 	bl	80028ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800231c:	2026      	movs	r0, #38	; 0x26
 800231e:	f000 faf2 	bl	8002906 <HAL_NVIC_EnableIRQ>
}
 8002322:	e02d      	b.n	8002380 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART3)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a1f      	ldr	r2, [pc, #124]	; (80023a8 <HAL_UART_MspInit+0x210>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d128      	bne.n	8002380 <HAL_UART_MspInit+0x1e8>
    __HAL_RCC_USART3_CLK_ENABLE();
 800232e:	4b17      	ldr	r3, [pc, #92]	; (800238c <HAL_UART_MspInit+0x1f4>)
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	4a16      	ldr	r2, [pc, #88]	; (800238c <HAL_UART_MspInit+0x1f4>)
 8002334:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002338:	6253      	str	r3, [r2, #36]	; 0x24
 800233a:	4b14      	ldr	r3, [pc, #80]	; (800238c <HAL_UART_MspInit+0x1f4>)
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002346:	4b11      	ldr	r3, [pc, #68]	; (800238c <HAL_UART_MspInit+0x1f4>)
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	4a10      	ldr	r2, [pc, #64]	; (800238c <HAL_UART_MspInit+0x1f4>)
 800234c:	f043 0302 	orr.w	r3, r3, #2
 8002350:	61d3      	str	r3, [r2, #28]
 8002352:	4b0e      	ldr	r3, [pc, #56]	; (800238c <HAL_UART_MspInit+0x1f4>)
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800235e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002362:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002364:	2302      	movs	r3, #2
 8002366:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002368:	2300      	movs	r3, #0
 800236a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800236c:	2303      	movs	r3, #3
 800236e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002370:	2307      	movs	r3, #7
 8002372:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002374:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002378:	4619      	mov	r1, r3
 800237a:	480c      	ldr	r0, [pc, #48]	; (80023ac <HAL_UART_MspInit+0x214>)
 800237c:	f000 fbe2 	bl	8002b44 <HAL_GPIO_Init>
}
 8002380:	bf00      	nop
 8002382:	3740      	adds	r7, #64	; 0x40
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40004c00 	.word	0x40004c00
 800238c:	40023800 	.word	0x40023800
 8002390:	40020800 	.word	0x40020800
 8002394:	40013800 	.word	0x40013800
 8002398:	40020000 	.word	0x40020000
 800239c:	40004400 	.word	0x40004400
 80023a0:	20000db8 	.word	0x20000db8
 80023a4:	4002606c 	.word	0x4002606c
 80023a8:	40004800 	.word	0x40004800
 80023ac:	40020400 	.word	0x40020400

080023b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023b4:	e7fe      	b.n	80023b4 <NMI_Handler+0x4>

080023b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023b6:	b480      	push	{r7}
 80023b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ba:	e7fe      	b.n	80023ba <HardFault_Handler+0x4>

080023bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023c0:	e7fe      	b.n	80023c0 <MemManage_Handler+0x4>

080023c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023c2:	b480      	push	{r7}
 80023c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023c6:	e7fe      	b.n	80023c6 <BusFault_Handler+0x4>

080023c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023cc:	e7fe      	b.n	80023cc <UsageFault_Handler+0x4>

080023ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023ce:	b480      	push	{r7}
 80023d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80023d2:	bf00      	nop
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr

080023da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023da:	b480      	push	{r7}
 80023dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bc80      	pop	{r7}
 80023e4:	4770      	bx	lr

080023e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023e6:	b480      	push	{r7}
 80023e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bc80      	pop	{r7}
 80023f0:	4770      	bx	lr

080023f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023f6:	f000 f955 	bl	80026a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
	...

08002400 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
  UARTDMA_DmaIrqHandler(&huartdma6);
 8002404:	4802      	ldr	r0, [pc, #8]	; (8002410 <DMA1_Channel6_IRQHandler+0x10>)
 8002406:	f7fe f87a 	bl	80004fe <UARTDMA_DmaIrqHandler>
  return;
 800240a:	bf00      	nop
  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	2000008c 	.word	0x2000008c

08002414 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  UARTDMA_UartIrqHandler(&huartdma6);
 8002418:	4802      	ldr	r0, [pc, #8]	; (8002424 <USART2_IRQHandler+0x10>)
 800241a:	f7fe f845 	bl	80004a8 <UARTDMA_UartIrqHandler>
  return;
 800241e:	bf00      	nop
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	2000008c 	.word	0x2000008c

08002428 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  return 1;
 800242c:	2301      	movs	r3, #1
}
 800242e:	4618      	mov	r0, r3
 8002430:	46bd      	mov	sp, r7
 8002432:	bc80      	pop	{r7}
 8002434:	4770      	bx	lr

08002436 <_kill>:

int _kill(int pid, int sig)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
 800243e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002440:	f001 ffb4 	bl	80043ac <__errno>
 8002444:	4603      	mov	r3, r0
 8002446:	2216      	movs	r2, #22
 8002448:	601a      	str	r2, [r3, #0]
  return -1;
 800244a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <_exit>:

void _exit (int status)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b082      	sub	sp, #8
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800245e:	f04f 31ff 	mov.w	r1, #4294967295
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7ff ffe7 	bl	8002436 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002468:	e7fe      	b.n	8002468 <_exit+0x12>

0800246a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b086      	sub	sp, #24
 800246e:	af00      	add	r7, sp, #0
 8002470:	60f8      	str	r0, [r7, #12]
 8002472:	60b9      	str	r1, [r7, #8]
 8002474:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002476:	2300      	movs	r3, #0
 8002478:	617b      	str	r3, [r7, #20]
 800247a:	e00a      	b.n	8002492 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800247c:	f3af 8000 	nop.w
 8002480:	4601      	mov	r1, r0
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	1c5a      	adds	r2, r3, #1
 8002486:	60ba      	str	r2, [r7, #8]
 8002488:	b2ca      	uxtb	r2, r1
 800248a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	3301      	adds	r3, #1
 8002490:	617b      	str	r3, [r7, #20]
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	429a      	cmp	r2, r3
 8002498:	dbf0      	blt.n	800247c <_read+0x12>
  }

  return len;
 800249a:	687b      	ldr	r3, [r7, #4]
}
 800249c:	4618      	mov	r0, r3
 800249e:	3718      	adds	r7, #24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]
 80024b4:	e009      	b.n	80024ca <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	1c5a      	adds	r2, r3, #1
 80024ba:	60ba      	str	r2, [r7, #8]
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fe f954 	bl	800076c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	3301      	adds	r3, #1
 80024c8:	617b      	str	r3, [r7, #20]
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	dbf1      	blt.n	80024b6 <_write+0x12>
  }
  return len;
 80024d2:	687b      	ldr	r3, [r7, #4]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <_close>:

int _close(int file)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bc80      	pop	{r7}
 80024f0:	4770      	bx	lr

080024f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
 80024fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002502:	605a      	str	r2, [r3, #4]
  return 0;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr

08002510 <_isatty>:

int _isatty(int file)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002518:	2301      	movs	r3, #1
}
 800251a:	4618      	mov	r0, r3
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	bc80      	pop	{r7}
 8002522:	4770      	bx	lr

08002524 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3714      	adds	r7, #20
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr

0800253c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002544:	4a14      	ldr	r2, [pc, #80]	; (8002598 <_sbrk+0x5c>)
 8002546:	4b15      	ldr	r3, [pc, #84]	; (800259c <_sbrk+0x60>)
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002550:	4b13      	ldr	r3, [pc, #76]	; (80025a0 <_sbrk+0x64>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d102      	bne.n	800255e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002558:	4b11      	ldr	r3, [pc, #68]	; (80025a0 <_sbrk+0x64>)
 800255a:	4a12      	ldr	r2, [pc, #72]	; (80025a4 <_sbrk+0x68>)
 800255c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800255e:	4b10      	ldr	r3, [pc, #64]	; (80025a0 <_sbrk+0x64>)
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4413      	add	r3, r2
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	429a      	cmp	r2, r3
 800256a:	d207      	bcs.n	800257c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800256c:	f001 ff1e 	bl	80043ac <__errno>
 8002570:	4603      	mov	r3, r0
 8002572:	220c      	movs	r2, #12
 8002574:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002576:	f04f 33ff 	mov.w	r3, #4294967295
 800257a:	e009      	b.n	8002590 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800257c:	4b08      	ldr	r3, [pc, #32]	; (80025a0 <_sbrk+0x64>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002582:	4b07      	ldr	r3, [pc, #28]	; (80025a0 <_sbrk+0x64>)
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4413      	add	r3, r2
 800258a:	4a05      	ldr	r2, [pc, #20]	; (80025a0 <_sbrk+0x64>)
 800258c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800258e:	68fb      	ldr	r3, [r7, #12]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3718      	adds	r7, #24
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	20014000 	.word	0x20014000
 800259c:	00000400 	.word	0x00000400
 80025a0:	20001208 	.word	0x20001208
 80025a4:	20001220 	.word	0x20001220

080025a8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025ac:	bf00      	nop
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr

080025b4 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 80025b4:	f7ff fff8 	bl	80025a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025b8:	480b      	ldr	r0, [pc, #44]	; (80025e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80025ba:	490c      	ldr	r1, [pc, #48]	; (80025ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80025bc:	4a0c      	ldr	r2, [pc, #48]	; (80025f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80025be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025c0:	e002      	b.n	80025c8 <LoopCopyDataInit>

080025c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025c6:	3304      	adds	r3, #4

080025c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025cc:	d3f9      	bcc.n	80025c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025ce:	4a09      	ldr	r2, [pc, #36]	; (80025f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80025d0:	4c09      	ldr	r4, [pc, #36]	; (80025f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025d4:	e001      	b.n	80025da <LoopFillZerobss>

080025d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025d8:	3204      	adds	r2, #4

080025da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025dc:	d3fb      	bcc.n	80025d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025de:	f001 feeb 	bl	80043b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025e2:	f7fe f8d5 	bl	8000790 <main>
  bx lr
 80025e6:	4770      	bx	lr
  ldr r0, =_sdata
 80025e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025ec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80025f0:	080062a8 	.word	0x080062a8
  ldr r2, =_sbss
 80025f4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80025f8:	20001220 	.word	0x20001220

080025fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025fc:	e7fe      	b.n	80025fc <ADC1_IRQHandler>

080025fe <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b082      	sub	sp, #8
 8002602:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002604:	2300      	movs	r3, #0
 8002606:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002608:	2003      	movs	r0, #3
 800260a:	f000 f955 	bl	80028b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800260e:	2000      	movs	r0, #0
 8002610:	f000 f80e 	bl	8002630 <HAL_InitTick>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d002      	beq.n	8002620 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	71fb      	strb	r3, [r7, #7]
 800261e:	e001      	b.n	8002624 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002620:	f7ff fd8a 	bl	8002138 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002624:	79fb      	ldrb	r3, [r7, #7]
}
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
	...

08002630 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002638:	2300      	movs	r3, #0
 800263a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800263c:	4b16      	ldr	r3, [pc, #88]	; (8002698 <HAL_InitTick+0x68>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d022      	beq.n	800268a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002644:	4b15      	ldr	r3, [pc, #84]	; (800269c <HAL_InitTick+0x6c>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	4b13      	ldr	r3, [pc, #76]	; (8002698 <HAL_InitTick+0x68>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002650:	fbb1 f3f3 	udiv	r3, r1, r3
 8002654:	fbb2 f3f3 	udiv	r3, r2, r3
 8002658:	4618      	mov	r0, r3
 800265a:	f000 f962 	bl	8002922 <HAL_SYSTICK_Config>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d10f      	bne.n	8002684 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b0f      	cmp	r3, #15
 8002668:	d809      	bhi.n	800267e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800266a:	2200      	movs	r2, #0
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	f04f 30ff 	mov.w	r0, #4294967295
 8002672:	f000 f92c 	bl	80028ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002676:	4a0a      	ldr	r2, [pc, #40]	; (80026a0 <HAL_InitTick+0x70>)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6013      	str	r3, [r2, #0]
 800267c:	e007      	b.n	800268e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	73fb      	strb	r3, [r7, #15]
 8002682:	e004      	b.n	800268e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	73fb      	strb	r3, [r7, #15]
 8002688:	e001      	b.n	800268e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800268e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	20000008 	.word	0x20000008
 800269c:	20000000 	.word	0x20000000
 80026a0:	20000004 	.word	0x20000004

080026a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026a8:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <HAL_IncTick+0x1c>)
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <HAL_IncTick+0x20>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4413      	add	r3, r2
 80026b2:	4a03      	ldr	r2, [pc, #12]	; (80026c0 <HAL_IncTick+0x1c>)
 80026b4:	6013      	str	r3, [r2, #0]
}
 80026b6:	bf00      	nop
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bc80      	pop	{r7}
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	2000120c 	.word	0x2000120c
 80026c4:	20000008 	.word	0x20000008

080026c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return uwTick;
 80026cc:	4b02      	ldr	r3, [pc, #8]	; (80026d8 <HAL_GetTick+0x10>)
 80026ce:	681b      	ldr	r3, [r3, #0]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr
 80026d8:	2000120c 	.word	0x2000120c

080026dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026e4:	f7ff fff0 	bl	80026c8 <HAL_GetTick>
 80026e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f4:	d004      	beq.n	8002700 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80026f6:	4b09      	ldr	r3, [pc, #36]	; (800271c <HAL_Delay+0x40>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	4413      	add	r3, r2
 80026fe:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002700:	bf00      	nop
 8002702:	f7ff ffe1 	bl	80026c8 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	429a      	cmp	r2, r3
 8002710:	d8f7      	bhi.n	8002702 <HAL_Delay+0x26>
  {
  }
}
 8002712:	bf00      	nop
 8002714:	bf00      	nop
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	20000008 	.word	0x20000008

08002720 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002730:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <__NVIC_SetPriorityGrouping+0x44>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002736:	68ba      	ldr	r2, [r7, #8]
 8002738:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800273c:	4013      	ands	r3, r2
 800273e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002748:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800274c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002752:	4a04      	ldr	r2, [pc, #16]	; (8002764 <__NVIC_SetPriorityGrouping+0x44>)
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	60d3      	str	r3, [r2, #12]
}
 8002758:	bf00      	nop
 800275a:	3714      	adds	r7, #20
 800275c:	46bd      	mov	sp, r7
 800275e:	bc80      	pop	{r7}
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	e000ed00 	.word	0xe000ed00

08002768 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800276c:	4b04      	ldr	r3, [pc, #16]	; (8002780 <__NVIC_GetPriorityGrouping+0x18>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	0a1b      	lsrs	r3, r3, #8
 8002772:	f003 0307 	and.w	r3, r3, #7
}
 8002776:	4618      	mov	r0, r3
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	e000ed00 	.word	0xe000ed00

08002784 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800278e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002792:	2b00      	cmp	r3, #0
 8002794:	db0b      	blt.n	80027ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002796:	79fb      	ldrb	r3, [r7, #7]
 8002798:	f003 021f 	and.w	r2, r3, #31
 800279c:	4906      	ldr	r1, [pc, #24]	; (80027b8 <__NVIC_EnableIRQ+0x34>)
 800279e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a2:	095b      	lsrs	r3, r3, #5
 80027a4:	2001      	movs	r0, #1
 80027a6:	fa00 f202 	lsl.w	r2, r0, r2
 80027aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr
 80027b8:	e000e100 	.word	0xe000e100

080027bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4603      	mov	r3, r0
 80027c4:	6039      	str	r1, [r7, #0]
 80027c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	db0a      	blt.n	80027e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	490c      	ldr	r1, [pc, #48]	; (8002808 <__NVIC_SetPriority+0x4c>)
 80027d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027da:	0112      	lsls	r2, r2, #4
 80027dc:	b2d2      	uxtb	r2, r2
 80027de:	440b      	add	r3, r1
 80027e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027e4:	e00a      	b.n	80027fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	4908      	ldr	r1, [pc, #32]	; (800280c <__NVIC_SetPriority+0x50>)
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	3b04      	subs	r3, #4
 80027f4:	0112      	lsls	r2, r2, #4
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	440b      	add	r3, r1
 80027fa:	761a      	strb	r2, [r3, #24]
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	bc80      	pop	{r7}
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	e000e100 	.word	0xe000e100
 800280c:	e000ed00 	.word	0xe000ed00

08002810 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002810:	b480      	push	{r7}
 8002812:	b089      	sub	sp, #36	; 0x24
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	f1c3 0307 	rsb	r3, r3, #7
 800282a:	2b04      	cmp	r3, #4
 800282c:	bf28      	it	cs
 800282e:	2304      	movcs	r3, #4
 8002830:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	3304      	adds	r3, #4
 8002836:	2b06      	cmp	r3, #6
 8002838:	d902      	bls.n	8002840 <NVIC_EncodePriority+0x30>
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	3b03      	subs	r3, #3
 800283e:	e000      	b.n	8002842 <NVIC_EncodePriority+0x32>
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002844:	f04f 32ff 	mov.w	r2, #4294967295
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43da      	mvns	r2, r3
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	401a      	ands	r2, r3
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002858:	f04f 31ff 	mov.w	r1, #4294967295
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	fa01 f303 	lsl.w	r3, r1, r3
 8002862:	43d9      	mvns	r1, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002868:	4313      	orrs	r3, r2
         );
}
 800286a:	4618      	mov	r0, r3
 800286c:	3724      	adds	r7, #36	; 0x24
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr

08002874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3b01      	subs	r3, #1
 8002880:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002884:	d301      	bcc.n	800288a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002886:	2301      	movs	r3, #1
 8002888:	e00f      	b.n	80028aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800288a:	4a0a      	ldr	r2, [pc, #40]	; (80028b4 <SysTick_Config+0x40>)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3b01      	subs	r3, #1
 8002890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002892:	210f      	movs	r1, #15
 8002894:	f04f 30ff 	mov.w	r0, #4294967295
 8002898:	f7ff ff90 	bl	80027bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800289c:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <SysTick_Config+0x40>)
 800289e:	2200      	movs	r2, #0
 80028a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028a2:	4b04      	ldr	r3, [pc, #16]	; (80028b4 <SysTick_Config+0x40>)
 80028a4:	2207      	movs	r2, #7
 80028a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	e000e010 	.word	0xe000e010

080028b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f7ff ff2d 	bl	8002720 <__NVIC_SetPriorityGrouping>
}
 80028c6:	bf00      	nop
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b086      	sub	sp, #24
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	4603      	mov	r3, r0
 80028d6:	60b9      	str	r1, [r7, #8]
 80028d8:	607a      	str	r2, [r7, #4]
 80028da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80028dc:	2300      	movs	r3, #0
 80028de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028e0:	f7ff ff42 	bl	8002768 <__NVIC_GetPriorityGrouping>
 80028e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	68b9      	ldr	r1, [r7, #8]
 80028ea:	6978      	ldr	r0, [r7, #20]
 80028ec:	f7ff ff90 	bl	8002810 <NVIC_EncodePriority>
 80028f0:	4602      	mov	r2, r0
 80028f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028f6:	4611      	mov	r1, r2
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff ff5f 	bl	80027bc <__NVIC_SetPriority>
}
 80028fe:	bf00      	nop
 8002900:	3718      	adds	r7, #24
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b082      	sub	sp, #8
 800290a:	af00      	add	r7, sp, #0
 800290c:	4603      	mov	r3, r0
 800290e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff ff35 	bl	8002784 <__NVIC_EnableIRQ>
}
 800291a:	bf00      	nop
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b082      	sub	sp, #8
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f7ff ffa2 	bl	8002874 <SysTick_Config>
 8002930:	4603      	mov	r3, r0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
	...

0800293c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e059      	b.n	8002a02 <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	461a      	mov	r2, r3
 8002954:	4b2d      	ldr	r3, [pc, #180]	; (8002a0c <HAL_DMA_Init+0xd0>)
 8002956:	429a      	cmp	r2, r3
 8002958:	d80f      	bhi.n	800297a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	461a      	mov	r2, r3
 8002960:	4b2b      	ldr	r3, [pc, #172]	; (8002a10 <HAL_DMA_Init+0xd4>)
 8002962:	4413      	add	r3, r2
 8002964:	4a2b      	ldr	r2, [pc, #172]	; (8002a14 <HAL_DMA_Init+0xd8>)
 8002966:	fba2 2303 	umull	r2, r3, r2, r3
 800296a:	091b      	lsrs	r3, r3, #4
 800296c:	009a      	lsls	r2, r3, #2
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a28      	ldr	r2, [pc, #160]	; (8002a18 <HAL_DMA_Init+0xdc>)
 8002976:	63da      	str	r2, [r3, #60]	; 0x3c
 8002978:	e00e      	b.n	8002998 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	461a      	mov	r2, r3
 8002980:	4b26      	ldr	r3, [pc, #152]	; (8002a1c <HAL_DMA_Init+0xe0>)
 8002982:	4413      	add	r3, r2
 8002984:	4a23      	ldr	r2, [pc, #140]	; (8002a14 <HAL_DMA_Init+0xd8>)
 8002986:	fba2 2303 	umull	r2, r3, r2, r3
 800298a:	091b      	lsrs	r3, r3, #4
 800298c:	009a      	lsls	r2, r3, #2
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a22      	ldr	r2, [pc, #136]	; (8002a20 <HAL_DMA_Init+0xe4>)
 8002996:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2202      	movs	r2, #2
 800299c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80029ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80029bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	69db      	ldr	r3, [r3, #28]
 80029da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	4313      	orrs	r3, r2
 80029e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr
 8002a0c:	40026407 	.word	0x40026407
 8002a10:	bffd9ff8 	.word	0xbffd9ff8
 8002a14:	cccccccd 	.word	0xcccccccd
 8002a18:	40026000 	.word	0x40026000
 8002a1c:	bffd9bf8 	.word	0xbffd9bf8
 8002a20:	40026400 	.word	0x40026400

08002a24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
 8002a30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a32:	2300      	movs	r3, #0
 8002a34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d101      	bne.n	8002a44 <HAL_DMA_Start_IT+0x20>
 8002a40:	2302      	movs	r3, #2
 8002a42:	e04b      	b.n	8002adc <HAL_DMA_Start_IT+0xb8>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d13a      	bne.n	8002ace <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0201 	bic.w	r2, r2, #1
 8002a74:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	68b9      	ldr	r1, [r7, #8]
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f000 f831 	bl	8002ae4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d008      	beq.n	8002a9c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f042 020e 	orr.w	r2, r2, #14
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	e00f      	b.n	8002abc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 0204 	bic.w	r2, r2, #4
 8002aaa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 020a 	orr.w	r2, r2, #10
 8002aba:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f042 0201 	orr.w	r2, r2, #1
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	e005      	b.n	8002ada <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3718      	adds	r7, #24
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
 8002af0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	f003 021c 	and.w	r2, r3, #28
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afe:	2101      	movs	r1, #1
 8002b00:	fa01 f202 	lsl.w	r2, r1, r2
 8002b04:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2b10      	cmp	r3, #16
 8002b14:	d108      	bne.n	8002b28 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b26:	e007      	b.n	8002b38 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	60da      	str	r2, [r3, #12]
}
 8002b38:	bf00      	nop
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc80      	pop	{r7}
 8002b40:	4770      	bx	lr
	...

08002b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b087      	sub	sp, #28
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b52:	2300      	movs	r3, #0
 8002b54:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002b56:	2300      	movs	r3, #0
 8002b58:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002b5a:	e160      	b.n	8002e1e <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	2101      	movs	r1, #1
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	fa01 f303 	lsl.w	r3, r1, r3
 8002b68:	4013      	ands	r3, r2
 8002b6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 8152 	beq.w	8002e18 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f003 0303 	and.w	r3, r3, #3
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d005      	beq.n	8002b8c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d130      	bne.n	8002bee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	2203      	movs	r2, #3
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	68da      	ldr	r2, [r3, #12]
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	43db      	mvns	r3, r3
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	091b      	lsrs	r3, r3, #4
 8002bd8:	f003 0201 	and.w	r2, r3, #1
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	2b03      	cmp	r3, #3
 8002bf8:	d017      	beq.n	8002c2a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	2203      	movs	r2, #3
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	43db      	mvns	r3, r3
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	689a      	ldr	r2, [r3, #8]
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f003 0303 	and.w	r3, r3, #3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d123      	bne.n	8002c7e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	08da      	lsrs	r2, r3, #3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	3208      	adds	r2, #8
 8002c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c42:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	220f      	movs	r2, #15
 8002c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c52:	43db      	mvns	r3, r3
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	4013      	ands	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	691a      	ldr	r2, [r3, #16]
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	08da      	lsrs	r2, r3, #3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3208      	adds	r2, #8
 8002c78:	6939      	ldr	r1, [r7, #16]
 8002c7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	2203      	movs	r2, #3
 8002c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8e:	43db      	mvns	r3, r3
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	4013      	ands	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f003 0203 	and.w	r2, r3, #3
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f000 80ac 	beq.w	8002e18 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cc0:	4b5e      	ldr	r3, [pc, #376]	; (8002e3c <HAL_GPIO_Init+0x2f8>)
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	4a5d      	ldr	r2, [pc, #372]	; (8002e3c <HAL_GPIO_Init+0x2f8>)
 8002cc6:	f043 0301 	orr.w	r3, r3, #1
 8002cca:	6213      	str	r3, [r2, #32]
 8002ccc:	4b5b      	ldr	r3, [pc, #364]	; (8002e3c <HAL_GPIO_Init+0x2f8>)
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	60bb      	str	r3, [r7, #8]
 8002cd6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002cd8:	4a59      	ldr	r2, [pc, #356]	; (8002e40 <HAL_GPIO_Init+0x2fc>)
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	089b      	lsrs	r3, r3, #2
 8002cde:	3302      	adds	r3, #2
 8002ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ce4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	f003 0303 	and.w	r3, r3, #3
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	220f      	movs	r2, #15
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a51      	ldr	r2, [pc, #324]	; (8002e44 <HAL_GPIO_Init+0x300>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d025      	beq.n	8002d50 <HAL_GPIO_Init+0x20c>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a50      	ldr	r2, [pc, #320]	; (8002e48 <HAL_GPIO_Init+0x304>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d01f      	beq.n	8002d4c <HAL_GPIO_Init+0x208>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a4f      	ldr	r2, [pc, #316]	; (8002e4c <HAL_GPIO_Init+0x308>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d019      	beq.n	8002d48 <HAL_GPIO_Init+0x204>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a4e      	ldr	r2, [pc, #312]	; (8002e50 <HAL_GPIO_Init+0x30c>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d013      	beq.n	8002d44 <HAL_GPIO_Init+0x200>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a4d      	ldr	r2, [pc, #308]	; (8002e54 <HAL_GPIO_Init+0x310>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d00d      	beq.n	8002d40 <HAL_GPIO_Init+0x1fc>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a4c      	ldr	r2, [pc, #304]	; (8002e58 <HAL_GPIO_Init+0x314>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d007      	beq.n	8002d3c <HAL_GPIO_Init+0x1f8>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a4b      	ldr	r2, [pc, #300]	; (8002e5c <HAL_GPIO_Init+0x318>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d101      	bne.n	8002d38 <HAL_GPIO_Init+0x1f4>
 8002d34:	2306      	movs	r3, #6
 8002d36:	e00c      	b.n	8002d52 <HAL_GPIO_Init+0x20e>
 8002d38:	2307      	movs	r3, #7
 8002d3a:	e00a      	b.n	8002d52 <HAL_GPIO_Init+0x20e>
 8002d3c:	2305      	movs	r3, #5
 8002d3e:	e008      	b.n	8002d52 <HAL_GPIO_Init+0x20e>
 8002d40:	2304      	movs	r3, #4
 8002d42:	e006      	b.n	8002d52 <HAL_GPIO_Init+0x20e>
 8002d44:	2303      	movs	r3, #3
 8002d46:	e004      	b.n	8002d52 <HAL_GPIO_Init+0x20e>
 8002d48:	2302      	movs	r3, #2
 8002d4a:	e002      	b.n	8002d52 <HAL_GPIO_Init+0x20e>
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e000      	b.n	8002d52 <HAL_GPIO_Init+0x20e>
 8002d50:	2300      	movs	r3, #0
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	f002 0203 	and.w	r2, r2, #3
 8002d58:	0092      	lsls	r2, r2, #2
 8002d5a:	4093      	lsls	r3, r2
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d62:	4937      	ldr	r1, [pc, #220]	; (8002e40 <HAL_GPIO_Init+0x2fc>)
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	089b      	lsrs	r3, r3, #2
 8002d68:	3302      	adds	r3, #2
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d70:	4b3b      	ldr	r3, [pc, #236]	; (8002e60 <HAL_GPIO_Init+0x31c>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d003      	beq.n	8002d94 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d94:	4a32      	ldr	r2, [pc, #200]	; (8002e60 <HAL_GPIO_Init+0x31c>)
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d9a:	4b31      	ldr	r3, [pc, #196]	; (8002e60 <HAL_GPIO_Init+0x31c>)
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	43db      	mvns	r3, r3
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	4013      	ands	r3, r2
 8002da8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002dbe:	4a28      	ldr	r2, [pc, #160]	; (8002e60 <HAL_GPIO_Init+0x31c>)
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dc4:	4b26      	ldr	r3, [pc, #152]	; (8002e60 <HAL_GPIO_Init+0x31c>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d003      	beq.n	8002de8 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002de8:	4a1d      	ldr	r2, [pc, #116]	; (8002e60 <HAL_GPIO_Init+0x31c>)
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dee:	4b1c      	ldr	r3, [pc, #112]	; (8002e60 <HAL_GPIO_Init+0x31c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	43db      	mvns	r3, r3
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002e12:	4a13      	ldr	r2, [pc, #76]	; (8002e60 <HAL_GPIO_Init+0x31c>)
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	fa22 f303 	lsr.w	r3, r2, r3
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f47f ae97 	bne.w	8002b5c <HAL_GPIO_Init+0x18>
  }
}
 8002e2e:	bf00      	nop
 8002e30:	bf00      	nop
 8002e32:	371c      	adds	r7, #28
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	40023800 	.word	0x40023800
 8002e40:	40010000 	.word	0x40010000
 8002e44:	40020000 	.word	0x40020000
 8002e48:	40020400 	.word	0x40020400
 8002e4c:	40020800 	.word	0x40020800
 8002e50:	40020c00 	.word	0x40020c00
 8002e54:	40021000 	.word	0x40021000
 8002e58:	40021400 	.word	0x40021400
 8002e5c:	40021800 	.word	0x40021800
 8002e60:	40010400 	.word	0x40010400

08002e64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	807b      	strh	r3, [r7, #2]
 8002e70:	4613      	mov	r3, r2
 8002e72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e74:	787b      	ldrb	r3, [r7, #1]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e7a:	887a      	ldrh	r2, [r7, #2]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002e80:	e003      	b.n	8002e8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002e82:	887b      	ldrh	r3, [r7, #2]
 8002e84:	041a      	lsls	r2, r3, #16
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	619a      	str	r2, [r3, #24]
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr

08002e94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b088      	sub	sp, #32
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e31d      	b.n	80034e2 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ea6:	4b94      	ldr	r3, [pc, #592]	; (80030f8 <HAL_RCC_OscConfig+0x264>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 030c 	and.w	r3, r3, #12
 8002eae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002eb0:	4b91      	ldr	r3, [pc, #580]	; (80030f8 <HAL_RCC_OscConfig+0x264>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eb8:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d07b      	beq.n	8002fbe <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	2b08      	cmp	r3, #8
 8002eca:	d006      	beq.n	8002eda <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	2b0c      	cmp	r3, #12
 8002ed0:	d10f      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x5e>
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ed8:	d10b      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eda:	4b87      	ldr	r3, [pc, #540]	; (80030f8 <HAL_RCC_OscConfig+0x264>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d06a      	beq.n	8002fbc <HAL_RCC_OscConfig+0x128>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d166      	bne.n	8002fbc <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e2f7      	b.n	80034e2 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d106      	bne.n	8002f08 <HAL_RCC_OscConfig+0x74>
 8002efa:	4b7f      	ldr	r3, [pc, #508]	; (80030f8 <HAL_RCC_OscConfig+0x264>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a7e      	ldr	r2, [pc, #504]	; (80030f8 <HAL_RCC_OscConfig+0x264>)
 8002f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	e02d      	b.n	8002f64 <HAL_RCC_OscConfig+0xd0>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d10c      	bne.n	8002f2a <HAL_RCC_OscConfig+0x96>
 8002f10:	4b79      	ldr	r3, [pc, #484]	; (80030f8 <HAL_RCC_OscConfig+0x264>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a78      	ldr	r2, [pc, #480]	; (80030f8 <HAL_RCC_OscConfig+0x264>)
 8002f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f1a:	6013      	str	r3, [r2, #0]
 8002f1c:	4b76      	ldr	r3, [pc, #472]	; (80030f8 <HAL_RCC_OscConfig+0x264>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a75      	ldr	r2, [pc, #468]	; (80030f8 <HAL_RCC_OscConfig+0x264>)
 8002f22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f26:	6013      	str	r3, [r2, #0]
 8002f28:	e01c      	b.n	8002f64 <HAL_RCC_OscConfig+0xd0>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	2b05      	cmp	r3, #5
 8002f30:	d10c      	bne.n	8002f4c <HAL_RCC_OscConfig+0xb8>
 8002f32:	4b71      	ldr	r3, [pc, #452]	; (80030f8 <HAL_RCC_OscConfig+0x264>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a70      	ldr	r2, [pc, #448]	; (80030f8 <HAL_RCC_OscConfig+0x264>)
 8002f38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	4b6e      	ldr	r3, [pc, #440]	; (80030f8 <HAL_RCC_OscConfig+0x264>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a6d      	ldr	r2, [pc, #436]	; (80030f8 <HAL_RCC_OscConfig+0x264>)
 8002f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	e00b      	b.n	8002f64 <HAL_RCC_OscConfig+0xd0>
 8002f4c:	4b6a      	ldr	r3, [pc, #424]	; (80030f8 <HAL_RCC_OscConfig+0x264>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a69      	ldr	r2, [pc, #420]	; (80030f8 <HAL_RCC_OscConfig+0x264>)
 8002f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f56:	6013      	str	r3, [r2, #0]
 8002f58:	4b67      	ldr	r3, [pc, #412]	; (80030f8 <HAL_RCC_OscConfig+0x264>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a66      	ldr	r2, [pc, #408]	; (80030f8 <HAL_RCC_OscConfig+0x264>)
 8002f5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d013      	beq.n	8002f94 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6c:	f7ff fbac 	bl	80026c8 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f74:	f7ff fba8 	bl	80026c8 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b64      	cmp	r3, #100	; 0x64
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e2ad      	b.n	80034e2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f86:	4b5c      	ldr	r3, [pc, #368]	; (80030f8 <HAL_RCC_OscConfig+0x264>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d0f0      	beq.n	8002f74 <HAL_RCC_OscConfig+0xe0>
 8002f92:	e014      	b.n	8002fbe <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f94:	f7ff fb98 	bl	80026c8 <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f9c:	f7ff fb94 	bl	80026c8 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b64      	cmp	r3, #100	; 0x64
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e299      	b.n	80034e2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002fae:	4b52      	ldr	r3, [pc, #328]	; (80030f8 <HAL_RCC_OscConfig+0x264>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1f0      	bne.n	8002f9c <HAL_RCC_OscConfig+0x108>
 8002fba:	e000      	b.n	8002fbe <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d05a      	beq.n	8003080 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	2b04      	cmp	r3, #4
 8002fce:	d005      	beq.n	8002fdc <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	2b0c      	cmp	r3, #12
 8002fd4:	d119      	bne.n	800300a <HAL_RCC_OscConfig+0x176>
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d116      	bne.n	800300a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fdc:	4b46      	ldr	r3, [pc, #280]	; (80030f8 <HAL_RCC_OscConfig+0x264>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d005      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x160>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d001      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e276      	b.n	80034e2 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff4:	4b40      	ldr	r3, [pc, #256]	; (80030f8 <HAL_RCC_OscConfig+0x264>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	021b      	lsls	r3, r3, #8
 8003002:	493d      	ldr	r1, [pc, #244]	; (80030f8 <HAL_RCC_OscConfig+0x264>)
 8003004:	4313      	orrs	r3, r2
 8003006:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003008:	e03a      	b.n	8003080 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d020      	beq.n	8003054 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003012:	4b3a      	ldr	r3, [pc, #232]	; (80030fc <HAL_RCC_OscConfig+0x268>)
 8003014:	2201      	movs	r2, #1
 8003016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003018:	f7ff fb56 	bl	80026c8 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003020:	f7ff fb52 	bl	80026c8 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e257      	b.n	80034e2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003032:	4b31      	ldr	r3, [pc, #196]	; (80030f8 <HAL_RCC_OscConfig+0x264>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d0f0      	beq.n	8003020 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800303e:	4b2e      	ldr	r3, [pc, #184]	; (80030f8 <HAL_RCC_OscConfig+0x264>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	021b      	lsls	r3, r3, #8
 800304c:	492a      	ldr	r1, [pc, #168]	; (80030f8 <HAL_RCC_OscConfig+0x264>)
 800304e:	4313      	orrs	r3, r2
 8003050:	604b      	str	r3, [r1, #4]
 8003052:	e015      	b.n	8003080 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003054:	4b29      	ldr	r3, [pc, #164]	; (80030fc <HAL_RCC_OscConfig+0x268>)
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800305a:	f7ff fb35 	bl	80026c8 <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003060:	e008      	b.n	8003074 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003062:	f7ff fb31 	bl	80026c8 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e236      	b.n	80034e2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003074:	4b20      	ldr	r3, [pc, #128]	; (80030f8 <HAL_RCC_OscConfig+0x264>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1f0      	bne.n	8003062 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0310 	and.w	r3, r3, #16
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 80b8 	beq.w	80031fe <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d170      	bne.n	8003176 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003094:	4b18      	ldr	r3, [pc, #96]	; (80030f8 <HAL_RCC_OscConfig+0x264>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800309c:	2b00      	cmp	r3, #0
 800309e:	d005      	beq.n	80030ac <HAL_RCC_OscConfig+0x218>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e21a      	b.n	80034e2 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a1a      	ldr	r2, [r3, #32]
 80030b0:	4b11      	ldr	r3, [pc, #68]	; (80030f8 <HAL_RCC_OscConfig+0x264>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d921      	bls.n	8003100 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f000 fc7d 	bl	80039c0 <RCC_SetFlashLatencyFromMSIRange>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e208      	b.n	80034e2 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030d0:	4b09      	ldr	r3, [pc, #36]	; (80030f8 <HAL_RCC_OscConfig+0x264>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	4906      	ldr	r1, [pc, #24]	; (80030f8 <HAL_RCC_OscConfig+0x264>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030e2:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <HAL_RCC_OscConfig+0x264>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	061b      	lsls	r3, r3, #24
 80030f0:	4901      	ldr	r1, [pc, #4]	; (80030f8 <HAL_RCC_OscConfig+0x264>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	604b      	str	r3, [r1, #4]
 80030f6:	e020      	b.n	800313a <HAL_RCC_OscConfig+0x2a6>
 80030f8:	40023800 	.word	0x40023800
 80030fc:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003100:	4b99      	ldr	r3, [pc, #612]	; (8003368 <HAL_RCC_OscConfig+0x4d4>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	4996      	ldr	r1, [pc, #600]	; (8003368 <HAL_RCC_OscConfig+0x4d4>)
 800310e:	4313      	orrs	r3, r2
 8003110:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003112:	4b95      	ldr	r3, [pc, #596]	; (8003368 <HAL_RCC_OscConfig+0x4d4>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	061b      	lsls	r3, r3, #24
 8003120:	4991      	ldr	r1, [pc, #580]	; (8003368 <HAL_RCC_OscConfig+0x4d4>)
 8003122:	4313      	orrs	r3, r2
 8003124:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	4618      	mov	r0, r3
 800312c:	f000 fc48 	bl	80039c0 <RCC_SetFlashLatencyFromMSIRange>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e1d3      	b.n	80034e2 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	0b5b      	lsrs	r3, r3, #13
 8003140:	3301      	adds	r3, #1
 8003142:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800314a:	4a87      	ldr	r2, [pc, #540]	; (8003368 <HAL_RCC_OscConfig+0x4d4>)
 800314c:	6892      	ldr	r2, [r2, #8]
 800314e:	0912      	lsrs	r2, r2, #4
 8003150:	f002 020f 	and.w	r2, r2, #15
 8003154:	4985      	ldr	r1, [pc, #532]	; (800336c <HAL_RCC_OscConfig+0x4d8>)
 8003156:	5c8a      	ldrb	r2, [r1, r2]
 8003158:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800315a:	4a85      	ldr	r2, [pc, #532]	; (8003370 <HAL_RCC_OscConfig+0x4dc>)
 800315c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800315e:	4b85      	ldr	r3, [pc, #532]	; (8003374 <HAL_RCC_OscConfig+0x4e0>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff fa64 	bl	8002630 <HAL_InitTick>
 8003168:	4603      	mov	r3, r0
 800316a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800316c:	7bfb      	ldrb	r3, [r7, #15]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d045      	beq.n	80031fe <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8003172:	7bfb      	ldrb	r3, [r7, #15]
 8003174:	e1b5      	b.n	80034e2 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d029      	beq.n	80031d2 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800317e:	4b7e      	ldr	r3, [pc, #504]	; (8003378 <HAL_RCC_OscConfig+0x4e4>)
 8003180:	2201      	movs	r2, #1
 8003182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003184:	f7ff faa0 	bl	80026c8 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800318c:	f7ff fa9c 	bl	80026c8 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e1a1      	b.n	80034e2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800319e:	4b72      	ldr	r3, [pc, #456]	; (8003368 <HAL_RCC_OscConfig+0x4d4>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0f0      	beq.n	800318c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031aa:	4b6f      	ldr	r3, [pc, #444]	; (8003368 <HAL_RCC_OscConfig+0x4d4>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	496c      	ldr	r1, [pc, #432]	; (8003368 <HAL_RCC_OscConfig+0x4d4>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031bc:	4b6a      	ldr	r3, [pc, #424]	; (8003368 <HAL_RCC_OscConfig+0x4d4>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	69db      	ldr	r3, [r3, #28]
 80031c8:	061b      	lsls	r3, r3, #24
 80031ca:	4967      	ldr	r1, [pc, #412]	; (8003368 <HAL_RCC_OscConfig+0x4d4>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	604b      	str	r3, [r1, #4]
 80031d0:	e015      	b.n	80031fe <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031d2:	4b69      	ldr	r3, [pc, #420]	; (8003378 <HAL_RCC_OscConfig+0x4e4>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d8:	f7ff fa76 	bl	80026c8 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031e0:	f7ff fa72 	bl	80026c8 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e177      	b.n	80034e2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80031f2:	4b5d      	ldr	r3, [pc, #372]	; (8003368 <HAL_RCC_OscConfig+0x4d4>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1f0      	bne.n	80031e0 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0308 	and.w	r3, r3, #8
 8003206:	2b00      	cmp	r3, #0
 8003208:	d030      	beq.n	800326c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d016      	beq.n	8003240 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003212:	4b5a      	ldr	r3, [pc, #360]	; (800337c <HAL_RCC_OscConfig+0x4e8>)
 8003214:	2201      	movs	r2, #1
 8003216:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003218:	f7ff fa56 	bl	80026c8 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003220:	f7ff fa52 	bl	80026c8 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e157      	b.n	80034e2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003232:	4b4d      	ldr	r3, [pc, #308]	; (8003368 <HAL_RCC_OscConfig+0x4d4>)
 8003234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0f0      	beq.n	8003220 <HAL_RCC_OscConfig+0x38c>
 800323e:	e015      	b.n	800326c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003240:	4b4e      	ldr	r3, [pc, #312]	; (800337c <HAL_RCC_OscConfig+0x4e8>)
 8003242:	2200      	movs	r2, #0
 8003244:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003246:	f7ff fa3f 	bl	80026c8 <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800324c:	e008      	b.n	8003260 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800324e:	f7ff fa3b 	bl	80026c8 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d901      	bls.n	8003260 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e140      	b.n	80034e2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003260:	4b41      	ldr	r3, [pc, #260]	; (8003368 <HAL_RCC_OscConfig+0x4d4>)
 8003262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1f0      	bne.n	800324e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 80b5 	beq.w	80033e4 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800327a:	2300      	movs	r3, #0
 800327c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800327e:	4b3a      	ldr	r3, [pc, #232]	; (8003368 <HAL_RCC_OscConfig+0x4d4>)
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10d      	bne.n	80032a6 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800328a:	4b37      	ldr	r3, [pc, #220]	; (8003368 <HAL_RCC_OscConfig+0x4d4>)
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	4a36      	ldr	r2, [pc, #216]	; (8003368 <HAL_RCC_OscConfig+0x4d4>)
 8003290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003294:	6253      	str	r3, [r2, #36]	; 0x24
 8003296:	4b34      	ldr	r3, [pc, #208]	; (8003368 <HAL_RCC_OscConfig+0x4d4>)
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329e:	60bb      	str	r3, [r7, #8]
 80032a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032a2:	2301      	movs	r3, #1
 80032a4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a6:	4b36      	ldr	r3, [pc, #216]	; (8003380 <HAL_RCC_OscConfig+0x4ec>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d118      	bne.n	80032e4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032b2:	4b33      	ldr	r3, [pc, #204]	; (8003380 <HAL_RCC_OscConfig+0x4ec>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a32      	ldr	r2, [pc, #200]	; (8003380 <HAL_RCC_OscConfig+0x4ec>)
 80032b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032be:	f7ff fa03 	bl	80026c8 <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032c6:	f7ff f9ff 	bl	80026c8 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b64      	cmp	r3, #100	; 0x64
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e104      	b.n	80034e2 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d8:	4b29      	ldr	r3, [pc, #164]	; (8003380 <HAL_RCC_OscConfig+0x4ec>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d0f0      	beq.n	80032c6 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d106      	bne.n	80032fa <HAL_RCC_OscConfig+0x466>
 80032ec:	4b1e      	ldr	r3, [pc, #120]	; (8003368 <HAL_RCC_OscConfig+0x4d4>)
 80032ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f0:	4a1d      	ldr	r2, [pc, #116]	; (8003368 <HAL_RCC_OscConfig+0x4d4>)
 80032f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032f6:	6353      	str	r3, [r2, #52]	; 0x34
 80032f8:	e02d      	b.n	8003356 <HAL_RCC_OscConfig+0x4c2>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10c      	bne.n	800331c <HAL_RCC_OscConfig+0x488>
 8003302:	4b19      	ldr	r3, [pc, #100]	; (8003368 <HAL_RCC_OscConfig+0x4d4>)
 8003304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003306:	4a18      	ldr	r2, [pc, #96]	; (8003368 <HAL_RCC_OscConfig+0x4d4>)
 8003308:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800330c:	6353      	str	r3, [r2, #52]	; 0x34
 800330e:	4b16      	ldr	r3, [pc, #88]	; (8003368 <HAL_RCC_OscConfig+0x4d4>)
 8003310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003312:	4a15      	ldr	r2, [pc, #84]	; (8003368 <HAL_RCC_OscConfig+0x4d4>)
 8003314:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003318:	6353      	str	r3, [r2, #52]	; 0x34
 800331a:	e01c      	b.n	8003356 <HAL_RCC_OscConfig+0x4c2>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	2b05      	cmp	r3, #5
 8003322:	d10c      	bne.n	800333e <HAL_RCC_OscConfig+0x4aa>
 8003324:	4b10      	ldr	r3, [pc, #64]	; (8003368 <HAL_RCC_OscConfig+0x4d4>)
 8003326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003328:	4a0f      	ldr	r2, [pc, #60]	; (8003368 <HAL_RCC_OscConfig+0x4d4>)
 800332a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800332e:	6353      	str	r3, [r2, #52]	; 0x34
 8003330:	4b0d      	ldr	r3, [pc, #52]	; (8003368 <HAL_RCC_OscConfig+0x4d4>)
 8003332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003334:	4a0c      	ldr	r2, [pc, #48]	; (8003368 <HAL_RCC_OscConfig+0x4d4>)
 8003336:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800333a:	6353      	str	r3, [r2, #52]	; 0x34
 800333c:	e00b      	b.n	8003356 <HAL_RCC_OscConfig+0x4c2>
 800333e:	4b0a      	ldr	r3, [pc, #40]	; (8003368 <HAL_RCC_OscConfig+0x4d4>)
 8003340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003342:	4a09      	ldr	r2, [pc, #36]	; (8003368 <HAL_RCC_OscConfig+0x4d4>)
 8003344:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003348:	6353      	str	r3, [r2, #52]	; 0x34
 800334a:	4b07      	ldr	r3, [pc, #28]	; (8003368 <HAL_RCC_OscConfig+0x4d4>)
 800334c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800334e:	4a06      	ldr	r2, [pc, #24]	; (8003368 <HAL_RCC_OscConfig+0x4d4>)
 8003350:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003354:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d024      	beq.n	80033a8 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800335e:	f7ff f9b3 	bl	80026c8 <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003364:	e019      	b.n	800339a <HAL_RCC_OscConfig+0x506>
 8003366:	bf00      	nop
 8003368:	40023800 	.word	0x40023800
 800336c:	08006014 	.word	0x08006014
 8003370:	20000000 	.word	0x20000000
 8003374:	20000004 	.word	0x20000004
 8003378:	42470020 	.word	0x42470020
 800337c:	42470680 	.word	0x42470680
 8003380:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003384:	f7ff f9a0 	bl	80026c8 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003392:	4293      	cmp	r3, r2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e0a3      	b.n	80034e2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800339a:	4b54      	ldr	r3, [pc, #336]	; (80034ec <HAL_RCC_OscConfig+0x658>)
 800339c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800339e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d0ee      	beq.n	8003384 <HAL_RCC_OscConfig+0x4f0>
 80033a6:	e014      	b.n	80033d2 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a8:	f7ff f98e 	bl	80026c8 <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033ae:	e00a      	b.n	80033c6 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033b0:	f7ff f98a 	bl	80026c8 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80033be:	4293      	cmp	r3, r2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e08d      	b.n	80034e2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033c6:	4b49      	ldr	r3, [pc, #292]	; (80034ec <HAL_RCC_OscConfig+0x658>)
 80033c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1ee      	bne.n	80033b0 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033d2:	7ffb      	ldrb	r3, [r7, #31]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d105      	bne.n	80033e4 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033d8:	4b44      	ldr	r3, [pc, #272]	; (80034ec <HAL_RCC_OscConfig+0x658>)
 80033da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033dc:	4a43      	ldr	r2, [pc, #268]	; (80034ec <HAL_RCC_OscConfig+0x658>)
 80033de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033e2:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d079      	beq.n	80034e0 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	2b0c      	cmp	r3, #12
 80033f0:	d056      	beq.n	80034a0 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d13b      	bne.n	8003472 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033fa:	4b3d      	ldr	r3, [pc, #244]	; (80034f0 <HAL_RCC_OscConfig+0x65c>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003400:	f7ff f962 	bl	80026c8 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003408:	f7ff f95e 	bl	80026c8 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e063      	b.n	80034e2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800341a:	4b34      	ldr	r3, [pc, #208]	; (80034ec <HAL_RCC_OscConfig+0x658>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1f0      	bne.n	8003408 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003426:	4b31      	ldr	r3, [pc, #196]	; (80034ec <HAL_RCC_OscConfig+0x658>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003436:	4319      	orrs	r1, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343c:	430b      	orrs	r3, r1
 800343e:	492b      	ldr	r1, [pc, #172]	; (80034ec <HAL_RCC_OscConfig+0x658>)
 8003440:	4313      	orrs	r3, r2
 8003442:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003444:	4b2a      	ldr	r3, [pc, #168]	; (80034f0 <HAL_RCC_OscConfig+0x65c>)
 8003446:	2201      	movs	r2, #1
 8003448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344a:	f7ff f93d 	bl	80026c8 <HAL_GetTick>
 800344e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003450:	e008      	b.n	8003464 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003452:	f7ff f939 	bl	80026c8 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e03e      	b.n	80034e2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003464:	4b21      	ldr	r3, [pc, #132]	; (80034ec <HAL_RCC_OscConfig+0x658>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0f0      	beq.n	8003452 <HAL_RCC_OscConfig+0x5be>
 8003470:	e036      	b.n	80034e0 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003472:	4b1f      	ldr	r3, [pc, #124]	; (80034f0 <HAL_RCC_OscConfig+0x65c>)
 8003474:	2200      	movs	r2, #0
 8003476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003478:	f7ff f926 	bl	80026c8 <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800347e:	e008      	b.n	8003492 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003480:	f7ff f922 	bl	80026c8 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e027      	b.n	80034e2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003492:	4b16      	ldr	r3, [pc, #88]	; (80034ec <HAL_RCC_OscConfig+0x658>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1f0      	bne.n	8003480 <HAL_RCC_OscConfig+0x5ec>
 800349e:	e01f      	b.n	80034e0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d101      	bne.n	80034ac <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e01a      	b.n	80034e2 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034ac:	4b0f      	ldr	r3, [pc, #60]	; (80034ec <HAL_RCC_OscConfig+0x658>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034bc:	429a      	cmp	r2, r3
 80034be:	d10d      	bne.n	80034dc <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d106      	bne.n	80034dc <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80034d8:	429a      	cmp	r2, r3
 80034da:	d001      	beq.n	80034e0 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e000      	b.n	80034e2 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3720      	adds	r7, #32
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40023800 	.word	0x40023800
 80034f0:	42470060 	.word	0x42470060

080034f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d101      	bne.n	8003508 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e11a      	b.n	800373e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003508:	4b8f      	ldr	r3, [pc, #572]	; (8003748 <HAL_RCC_ClockConfig+0x254>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	429a      	cmp	r2, r3
 8003514:	d919      	bls.n	800354a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d105      	bne.n	8003528 <HAL_RCC_ClockConfig+0x34>
 800351c:	4b8a      	ldr	r3, [pc, #552]	; (8003748 <HAL_RCC_ClockConfig+0x254>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a89      	ldr	r2, [pc, #548]	; (8003748 <HAL_RCC_ClockConfig+0x254>)
 8003522:	f043 0304 	orr.w	r3, r3, #4
 8003526:	6013      	str	r3, [r2, #0]
 8003528:	4b87      	ldr	r3, [pc, #540]	; (8003748 <HAL_RCC_ClockConfig+0x254>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f023 0201 	bic.w	r2, r3, #1
 8003530:	4985      	ldr	r1, [pc, #532]	; (8003748 <HAL_RCC_ClockConfig+0x254>)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	4313      	orrs	r3, r2
 8003536:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003538:	4b83      	ldr	r3, [pc, #524]	; (8003748 <HAL_RCC_ClockConfig+0x254>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	683a      	ldr	r2, [r7, #0]
 8003542:	429a      	cmp	r2, r3
 8003544:	d001      	beq.n	800354a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e0f9      	b.n	800373e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d008      	beq.n	8003568 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003556:	4b7d      	ldr	r3, [pc, #500]	; (800374c <HAL_RCC_ClockConfig+0x258>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	497a      	ldr	r1, [pc, #488]	; (800374c <HAL_RCC_ClockConfig+0x258>)
 8003564:	4313      	orrs	r3, r2
 8003566:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 808e 	beq.w	8003692 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	2b02      	cmp	r3, #2
 800357c:	d107      	bne.n	800358e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800357e:	4b73      	ldr	r3, [pc, #460]	; (800374c <HAL_RCC_ClockConfig+0x258>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d121      	bne.n	80035ce <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e0d7      	b.n	800373e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	2b03      	cmp	r3, #3
 8003594:	d107      	bne.n	80035a6 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003596:	4b6d      	ldr	r3, [pc, #436]	; (800374c <HAL_RCC_ClockConfig+0x258>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d115      	bne.n	80035ce <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e0cb      	b.n	800373e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d107      	bne.n	80035be <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035ae:	4b67      	ldr	r3, [pc, #412]	; (800374c <HAL_RCC_ClockConfig+0x258>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d109      	bne.n	80035ce <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e0bf      	b.n	800373e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80035be:	4b63      	ldr	r3, [pc, #396]	; (800374c <HAL_RCC_ClockConfig+0x258>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e0b7      	b.n	800373e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ce:	4b5f      	ldr	r3, [pc, #380]	; (800374c <HAL_RCC_ClockConfig+0x258>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f023 0203 	bic.w	r2, r3, #3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	495c      	ldr	r1, [pc, #368]	; (800374c <HAL_RCC_ClockConfig+0x258>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035e0:	f7ff f872 	bl	80026c8 <HAL_GetTick>
 80035e4:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d112      	bne.n	8003614 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80035ee:	e00a      	b.n	8003606 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f0:	f7ff f86a 	bl	80026c8 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80035fe:	4293      	cmp	r3, r2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e09b      	b.n	800373e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003606:	4b51      	ldr	r3, [pc, #324]	; (800374c <HAL_RCC_ClockConfig+0x258>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 030c 	and.w	r3, r3, #12
 800360e:	2b08      	cmp	r3, #8
 8003610:	d1ee      	bne.n	80035f0 <HAL_RCC_ClockConfig+0xfc>
 8003612:	e03e      	b.n	8003692 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	2b03      	cmp	r3, #3
 800361a:	d112      	bne.n	8003642 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800361c:	e00a      	b.n	8003634 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800361e:	f7ff f853 	bl	80026c8 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	f241 3288 	movw	r2, #5000	; 0x1388
 800362c:	4293      	cmp	r3, r2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e084      	b.n	800373e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003634:	4b45      	ldr	r3, [pc, #276]	; (800374c <HAL_RCC_ClockConfig+0x258>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f003 030c 	and.w	r3, r3, #12
 800363c:	2b0c      	cmp	r3, #12
 800363e:	d1ee      	bne.n	800361e <HAL_RCC_ClockConfig+0x12a>
 8003640:	e027      	b.n	8003692 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d11d      	bne.n	8003686 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800364a:	e00a      	b.n	8003662 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800364c:	f7ff f83c 	bl	80026c8 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	f241 3288 	movw	r2, #5000	; 0x1388
 800365a:	4293      	cmp	r3, r2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e06d      	b.n	800373e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003662:	4b3a      	ldr	r3, [pc, #232]	; (800374c <HAL_RCC_ClockConfig+0x258>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 030c 	and.w	r3, r3, #12
 800366a:	2b04      	cmp	r3, #4
 800366c:	d1ee      	bne.n	800364c <HAL_RCC_ClockConfig+0x158>
 800366e:	e010      	b.n	8003692 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003670:	f7ff f82a 	bl	80026c8 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	f241 3288 	movw	r2, #5000	; 0x1388
 800367e:	4293      	cmp	r3, r2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e05b      	b.n	800373e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003686:	4b31      	ldr	r3, [pc, #196]	; (800374c <HAL_RCC_ClockConfig+0x258>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 030c 	and.w	r3, r3, #12
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1ee      	bne.n	8003670 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003692:	4b2d      	ldr	r3, [pc, #180]	; (8003748 <HAL_RCC_ClockConfig+0x254>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	429a      	cmp	r2, r3
 800369e:	d219      	bcs.n	80036d4 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d105      	bne.n	80036b2 <HAL_RCC_ClockConfig+0x1be>
 80036a6:	4b28      	ldr	r3, [pc, #160]	; (8003748 <HAL_RCC_ClockConfig+0x254>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a27      	ldr	r2, [pc, #156]	; (8003748 <HAL_RCC_ClockConfig+0x254>)
 80036ac:	f043 0304 	orr.w	r3, r3, #4
 80036b0:	6013      	str	r3, [r2, #0]
 80036b2:	4b25      	ldr	r3, [pc, #148]	; (8003748 <HAL_RCC_ClockConfig+0x254>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f023 0201 	bic.w	r2, r3, #1
 80036ba:	4923      	ldr	r1, [pc, #140]	; (8003748 <HAL_RCC_ClockConfig+0x254>)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	4313      	orrs	r3, r2
 80036c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c2:	4b21      	ldr	r3, [pc, #132]	; (8003748 <HAL_RCC_ClockConfig+0x254>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d001      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e034      	b.n	800373e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d008      	beq.n	80036f2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036e0:	4b1a      	ldr	r3, [pc, #104]	; (800374c <HAL_RCC_ClockConfig+0x258>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	4917      	ldr	r1, [pc, #92]	; (800374c <HAL_RCC_ClockConfig+0x258>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0308 	and.w	r3, r3, #8
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d009      	beq.n	8003712 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036fe:	4b13      	ldr	r3, [pc, #76]	; (800374c <HAL_RCC_ClockConfig+0x258>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	490f      	ldr	r1, [pc, #60]	; (800374c <HAL_RCC_ClockConfig+0x258>)
 800370e:	4313      	orrs	r3, r2
 8003710:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003712:	f000 f823 	bl	800375c <HAL_RCC_GetSysClockFreq>
 8003716:	4602      	mov	r2, r0
 8003718:	4b0c      	ldr	r3, [pc, #48]	; (800374c <HAL_RCC_ClockConfig+0x258>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	091b      	lsrs	r3, r3, #4
 800371e:	f003 030f 	and.w	r3, r3, #15
 8003722:	490b      	ldr	r1, [pc, #44]	; (8003750 <HAL_RCC_ClockConfig+0x25c>)
 8003724:	5ccb      	ldrb	r3, [r1, r3]
 8003726:	fa22 f303 	lsr.w	r3, r2, r3
 800372a:	4a0a      	ldr	r2, [pc, #40]	; (8003754 <HAL_RCC_ClockConfig+0x260>)
 800372c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800372e:	4b0a      	ldr	r3, [pc, #40]	; (8003758 <HAL_RCC_ClockConfig+0x264>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f7fe ff7c 	bl	8002630 <HAL_InitTick>
 8003738:	4603      	mov	r3, r0
 800373a:	72fb      	strb	r3, [r7, #11]

  return status;
 800373c:	7afb      	ldrb	r3, [r7, #11]
}
 800373e:	4618      	mov	r0, r3
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	40023c00 	.word	0x40023c00
 800374c:	40023800 	.word	0x40023800
 8003750:	08006014 	.word	0x08006014
 8003754:	20000000 	.word	0x20000000
 8003758:	20000004 	.word	0x20000004

0800375c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800375c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003760:	b092      	sub	sp, #72	; 0x48
 8003762:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003764:	4b79      	ldr	r3, [pc, #484]	; (800394c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800376a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800376c:	f003 030c 	and.w	r3, r3, #12
 8003770:	2b0c      	cmp	r3, #12
 8003772:	d00d      	beq.n	8003790 <HAL_RCC_GetSysClockFreq+0x34>
 8003774:	2b0c      	cmp	r3, #12
 8003776:	f200 80d5 	bhi.w	8003924 <HAL_RCC_GetSysClockFreq+0x1c8>
 800377a:	2b04      	cmp	r3, #4
 800377c:	d002      	beq.n	8003784 <HAL_RCC_GetSysClockFreq+0x28>
 800377e:	2b08      	cmp	r3, #8
 8003780:	d003      	beq.n	800378a <HAL_RCC_GetSysClockFreq+0x2e>
 8003782:	e0cf      	b.n	8003924 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003784:	4b72      	ldr	r3, [pc, #456]	; (8003950 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8003786:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003788:	e0da      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800378a:	4b72      	ldr	r3, [pc, #456]	; (8003954 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800378c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800378e:	e0d7      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003792:	0c9b      	lsrs	r3, r3, #18
 8003794:	f003 020f 	and.w	r2, r3, #15
 8003798:	4b6f      	ldr	r3, [pc, #444]	; (8003958 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800379a:	5c9b      	ldrb	r3, [r3, r2]
 800379c:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800379e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037a0:	0d9b      	lsrs	r3, r3, #22
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	3301      	adds	r3, #1
 80037a8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037aa:	4b68      	ldr	r3, [pc, #416]	; (800394c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d05d      	beq.n	8003872 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80037b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b8:	2200      	movs	r2, #0
 80037ba:	4618      	mov	r0, r3
 80037bc:	4611      	mov	r1, r2
 80037be:	4604      	mov	r4, r0
 80037c0:	460d      	mov	r5, r1
 80037c2:	4622      	mov	r2, r4
 80037c4:	462b      	mov	r3, r5
 80037c6:	f04f 0000 	mov.w	r0, #0
 80037ca:	f04f 0100 	mov.w	r1, #0
 80037ce:	0159      	lsls	r1, r3, #5
 80037d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037d4:	0150      	lsls	r0, r2, #5
 80037d6:	4602      	mov	r2, r0
 80037d8:	460b      	mov	r3, r1
 80037da:	4621      	mov	r1, r4
 80037dc:	1a51      	subs	r1, r2, r1
 80037de:	6139      	str	r1, [r7, #16]
 80037e0:	4629      	mov	r1, r5
 80037e2:	eb63 0301 	sbc.w	r3, r3, r1
 80037e6:	617b      	str	r3, [r7, #20]
 80037e8:	f04f 0200 	mov.w	r2, #0
 80037ec:	f04f 0300 	mov.w	r3, #0
 80037f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037f4:	4659      	mov	r1, fp
 80037f6:	018b      	lsls	r3, r1, #6
 80037f8:	4651      	mov	r1, sl
 80037fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037fe:	4651      	mov	r1, sl
 8003800:	018a      	lsls	r2, r1, #6
 8003802:	46d4      	mov	ip, sl
 8003804:	ebb2 080c 	subs.w	r8, r2, ip
 8003808:	4659      	mov	r1, fp
 800380a:	eb63 0901 	sbc.w	r9, r3, r1
 800380e:	f04f 0200 	mov.w	r2, #0
 8003812:	f04f 0300 	mov.w	r3, #0
 8003816:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800381a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800381e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003822:	4690      	mov	r8, r2
 8003824:	4699      	mov	r9, r3
 8003826:	4623      	mov	r3, r4
 8003828:	eb18 0303 	adds.w	r3, r8, r3
 800382c:	60bb      	str	r3, [r7, #8]
 800382e:	462b      	mov	r3, r5
 8003830:	eb49 0303 	adc.w	r3, r9, r3
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	f04f 0200 	mov.w	r2, #0
 800383a:	f04f 0300 	mov.w	r3, #0
 800383e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003842:	4629      	mov	r1, r5
 8003844:	024b      	lsls	r3, r1, #9
 8003846:	4620      	mov	r0, r4
 8003848:	4629      	mov	r1, r5
 800384a:	4604      	mov	r4, r0
 800384c:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003850:	4601      	mov	r1, r0
 8003852:	024a      	lsls	r2, r1, #9
 8003854:	4610      	mov	r0, r2
 8003856:	4619      	mov	r1, r3
 8003858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800385a:	2200      	movs	r2, #0
 800385c:	62bb      	str	r3, [r7, #40]	; 0x28
 800385e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003860:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003864:	f7fc fc9c 	bl	80001a0 <__aeabi_uldivmod>
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	4613      	mov	r3, r2
 800386e:	647b      	str	r3, [r7, #68]	; 0x44
 8003870:	e055      	b.n	800391e <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003874:	2200      	movs	r2, #0
 8003876:	623b      	str	r3, [r7, #32]
 8003878:	627a      	str	r2, [r7, #36]	; 0x24
 800387a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800387e:	4642      	mov	r2, r8
 8003880:	464b      	mov	r3, r9
 8003882:	f04f 0000 	mov.w	r0, #0
 8003886:	f04f 0100 	mov.w	r1, #0
 800388a:	0159      	lsls	r1, r3, #5
 800388c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003890:	0150      	lsls	r0, r2, #5
 8003892:	4602      	mov	r2, r0
 8003894:	460b      	mov	r3, r1
 8003896:	46c4      	mov	ip, r8
 8003898:	ebb2 0a0c 	subs.w	sl, r2, ip
 800389c:	4640      	mov	r0, r8
 800389e:	4649      	mov	r1, r9
 80038a0:	468c      	mov	ip, r1
 80038a2:	eb63 0b0c 	sbc.w	fp, r3, ip
 80038a6:	f04f 0200 	mov.w	r2, #0
 80038aa:	f04f 0300 	mov.w	r3, #0
 80038ae:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038b2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038b6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038ba:	ebb2 040a 	subs.w	r4, r2, sl
 80038be:	eb63 050b 	sbc.w	r5, r3, fp
 80038c2:	f04f 0200 	mov.w	r2, #0
 80038c6:	f04f 0300 	mov.w	r3, #0
 80038ca:	00eb      	lsls	r3, r5, #3
 80038cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038d0:	00e2      	lsls	r2, r4, #3
 80038d2:	4614      	mov	r4, r2
 80038d4:	461d      	mov	r5, r3
 80038d6:	4603      	mov	r3, r0
 80038d8:	18e3      	adds	r3, r4, r3
 80038da:	603b      	str	r3, [r7, #0]
 80038dc:	460b      	mov	r3, r1
 80038de:	eb45 0303 	adc.w	r3, r5, r3
 80038e2:	607b      	str	r3, [r7, #4]
 80038e4:	f04f 0200 	mov.w	r2, #0
 80038e8:	f04f 0300 	mov.w	r3, #0
 80038ec:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038f0:	4629      	mov	r1, r5
 80038f2:	028b      	lsls	r3, r1, #10
 80038f4:	4620      	mov	r0, r4
 80038f6:	4629      	mov	r1, r5
 80038f8:	4604      	mov	r4, r0
 80038fa:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80038fe:	4601      	mov	r1, r0
 8003900:	028a      	lsls	r2, r1, #10
 8003902:	4610      	mov	r0, r2
 8003904:	4619      	mov	r1, r3
 8003906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003908:	2200      	movs	r2, #0
 800390a:	61bb      	str	r3, [r7, #24]
 800390c:	61fa      	str	r2, [r7, #28]
 800390e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003912:	f7fc fc45 	bl	80001a0 <__aeabi_uldivmod>
 8003916:	4602      	mov	r2, r0
 8003918:	460b      	mov	r3, r1
 800391a:	4613      	mov	r3, r2
 800391c:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 800391e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003920:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003922:	e00d      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003924:	4b09      	ldr	r3, [pc, #36]	; (800394c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	0b5b      	lsrs	r3, r3, #13
 800392a:	f003 0307 	and.w	r3, r3, #7
 800392e:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003932:	3301      	adds	r3, #1
 8003934:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800393e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8003942:	4618      	mov	r0, r3
 8003944:	3748      	adds	r7, #72	; 0x48
 8003946:	46bd      	mov	sp, r7
 8003948:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800394c:	40023800 	.word	0x40023800
 8003950:	00f42400 	.word	0x00f42400
 8003954:	007a1200 	.word	0x007a1200
 8003958:	08006008 	.word	0x08006008

0800395c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003960:	4b02      	ldr	r3, [pc, #8]	; (800396c <HAL_RCC_GetHCLKFreq+0x10>)
 8003962:	681b      	ldr	r3, [r3, #0]
}
 8003964:	4618      	mov	r0, r3
 8003966:	46bd      	mov	sp, r7
 8003968:	bc80      	pop	{r7}
 800396a:	4770      	bx	lr
 800396c:	20000000 	.word	0x20000000

08003970 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003974:	f7ff fff2 	bl	800395c <HAL_RCC_GetHCLKFreq>
 8003978:	4602      	mov	r2, r0
 800397a:	4b05      	ldr	r3, [pc, #20]	; (8003990 <HAL_RCC_GetPCLK1Freq+0x20>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	0a1b      	lsrs	r3, r3, #8
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	4903      	ldr	r1, [pc, #12]	; (8003994 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003986:	5ccb      	ldrb	r3, [r1, r3]
 8003988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800398c:	4618      	mov	r0, r3
 800398e:	bd80      	pop	{r7, pc}
 8003990:	40023800 	.word	0x40023800
 8003994:	08006024 	.word	0x08006024

08003998 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800399c:	f7ff ffde 	bl	800395c <HAL_RCC_GetHCLKFreq>
 80039a0:	4602      	mov	r2, r0
 80039a2:	4b05      	ldr	r3, [pc, #20]	; (80039b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	0adb      	lsrs	r3, r3, #11
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	4903      	ldr	r1, [pc, #12]	; (80039bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80039ae:	5ccb      	ldrb	r3, [r1, r3]
 80039b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	40023800 	.word	0x40023800
 80039bc:	08006024 	.word	0x08006024

080039c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b087      	sub	sp, #28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80039c8:	2300      	movs	r3, #0
 80039ca:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80039cc:	4b29      	ldr	r3, [pc, #164]	; (8003a74 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d12c      	bne.n	8003a32 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80039d8:	4b26      	ldr	r3, [pc, #152]	; (8003a74 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80039da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d005      	beq.n	80039f0 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80039e4:	4b24      	ldr	r3, [pc, #144]	; (8003a78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80039ec:	617b      	str	r3, [r7, #20]
 80039ee:	e016      	b.n	8003a1e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039f0:	4b20      	ldr	r3, [pc, #128]	; (8003a74 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80039f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f4:	4a1f      	ldr	r2, [pc, #124]	; (8003a74 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80039f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039fa:	6253      	str	r3, [r2, #36]	; 0x24
 80039fc:	4b1d      	ldr	r3, [pc, #116]	; (8003a74 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80039fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a04:	60fb      	str	r3, [r7, #12]
 8003a06:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003a08:	4b1b      	ldr	r3, [pc, #108]	; (8003a78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003a10:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a12:	4b18      	ldr	r3, [pc, #96]	; (8003a74 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a16:	4a17      	ldr	r2, [pc, #92]	; (8003a74 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003a18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a1c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003a24:	d105      	bne.n	8003a32 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a2c:	d101      	bne.n	8003a32 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003a2e:	2301      	movs	r3, #1
 8003a30:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d105      	bne.n	8003a44 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003a38:	4b10      	ldr	r3, [pc, #64]	; (8003a7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a0f      	ldr	r2, [pc, #60]	; (8003a7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a3e:	f043 0304 	orr.w	r3, r3, #4
 8003a42:	6013      	str	r3, [r2, #0]
 8003a44:	4b0d      	ldr	r3, [pc, #52]	; (8003a7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f023 0201 	bic.w	r2, r3, #1
 8003a4c:	490b      	ldr	r1, [pc, #44]	; (8003a7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a54:	4b09      	ldr	r3, [pc, #36]	; (8003a7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d001      	beq.n	8003a66 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e000      	b.n	8003a68 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	371c      	adds	r7, #28
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bc80      	pop	{r7}
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	40023800 	.word	0x40023800
 8003a78:	40007000 	.word	0x40007000
 8003a7c:	40023c00 	.word	0x40023c00

08003a80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e042      	b.n	8003b18 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d106      	bne.n	8003aac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7fe fb76 	bl	8002198 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2224      	movs	r2, #36	; 0x24
 8003ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68da      	ldr	r2, [r3, #12]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ac2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 fb89 	bl	80041dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	691a      	ldr	r2, [r3, #16]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ad8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	695a      	ldr	r2, [r3, #20]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ae8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68da      	ldr	r2, [r3, #12]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003af8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2220      	movs	r2, #32
 8003b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3708      	adds	r7, #8
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b08a      	sub	sp, #40	; 0x28
 8003b24:	af02      	add	r7, sp, #8
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	603b      	str	r3, [r7, #0]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b20      	cmp	r3, #32
 8003b3e:	d16d      	bne.n	8003c1c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d002      	beq.n	8003b4c <HAL_UART_Transmit+0x2c>
 8003b46:	88fb      	ldrh	r3, [r7, #6]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e066      	b.n	8003c1e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2221      	movs	r2, #33	; 0x21
 8003b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b5e:	f7fe fdb3 	bl	80026c8 <HAL_GetTick>
 8003b62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	88fa      	ldrh	r2, [r7, #6]
 8003b68:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	88fa      	ldrh	r2, [r7, #6]
 8003b6e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b78:	d108      	bne.n	8003b8c <HAL_UART_Transmit+0x6c>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d104      	bne.n	8003b8c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003b82:	2300      	movs	r3, #0
 8003b84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	61bb      	str	r3, [r7, #24]
 8003b8a:	e003      	b.n	8003b94 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b90:	2300      	movs	r3, #0
 8003b92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b94:	e02a      	b.n	8003bec <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	2180      	movs	r1, #128	; 0x80
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f000 f989 	bl	8003eb8 <UART_WaitOnFlagUntilTimeout>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d001      	beq.n	8003bb0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e036      	b.n	8003c1e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10b      	bne.n	8003bce <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	881b      	ldrh	r3, [r3, #0]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bc4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	3302      	adds	r3, #2
 8003bca:	61bb      	str	r3, [r7, #24]
 8003bcc:	e007      	b.n	8003bde <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	781a      	ldrb	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	3b01      	subs	r3, #1
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1cf      	bne.n	8003b96 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	2140      	movs	r1, #64	; 0x40
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f000 f959 	bl	8003eb8 <UART_WaitOnFlagUntilTimeout>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d001      	beq.n	8003c10 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e006      	b.n	8003c1e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2220      	movs	r2, #32
 8003c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	e000      	b.n	8003c1e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003c1c:	2302      	movs	r3, #2
  }
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3720      	adds	r7, #32
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b084      	sub	sp, #16
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	60f8      	str	r0, [r7, #12]
 8003c2e:	60b9      	str	r1, [r7, #8]
 8003c30:	4613      	mov	r3, r2
 8003c32:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b20      	cmp	r3, #32
 8003c3e:	d112      	bne.n	8003c66 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d002      	beq.n	8003c4c <HAL_UART_Receive_DMA+0x26>
 8003c46:	88fb      	ldrh	r3, [r7, #6]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d101      	bne.n	8003c50 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e00b      	b.n	8003c68 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003c56:	88fb      	ldrh	r3, [r7, #6]
 8003c58:	461a      	mov	r2, r3
 8003c5a:	68b9      	ldr	r1, [r7, #8]
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f000 f999 	bl	8003f94 <UART_Start_Receive_DMA>
 8003c62:	4603      	mov	r3, r0
 8003c64:	e000      	b.n	8003c68 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003c66:	2302      	movs	r3, #2
  }
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bc80      	pop	{r7}
 8003c80:	4770      	bx	lr

08003c82 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bc80      	pop	{r7}
 8003c92:	4770      	bx	lr

08003c94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bc80      	pop	{r7}
 8003ca4:	4770      	bx	lr

08003ca6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b083      	sub	sp, #12
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
 8003cae:	460b      	mov	r3, r1
 8003cb0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bc80      	pop	{r7}
 8003cba:	4770      	bx	lr

08003cbc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b09c      	sub	sp, #112	; 0x70
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc8:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0320 	and.w	r3, r3, #32
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d172      	bne.n	8003dbe <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cda:	2200      	movs	r2, #0
 8003cdc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	330c      	adds	r3, #12
 8003ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ce8:	e853 3f00 	ldrex	r3, [r3]
 8003cec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003cee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cf4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	330c      	adds	r3, #12
 8003cfc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003cfe:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d00:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d02:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d06:	e841 2300 	strex	r3, r2, [r1]
 8003d0a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1e5      	bne.n	8003cde <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	3314      	adds	r3, #20
 8003d18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d1c:	e853 3f00 	ldrex	r3, [r3]
 8003d20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d24:	f023 0301 	bic.w	r3, r3, #1
 8003d28:	667b      	str	r3, [r7, #100]	; 0x64
 8003d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	3314      	adds	r3, #20
 8003d30:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003d32:	647a      	str	r2, [r7, #68]	; 0x44
 8003d34:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d3a:	e841 2300 	strex	r3, r2, [r1]
 8003d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1e5      	bne.n	8003d12 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	3314      	adds	r3, #20
 8003d4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d50:	e853 3f00 	ldrex	r3, [r3]
 8003d54:	623b      	str	r3, [r7, #32]
   return(result);
 8003d56:	6a3b      	ldr	r3, [r7, #32]
 8003d58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d5c:	663b      	str	r3, [r7, #96]	; 0x60
 8003d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	3314      	adds	r3, #20
 8003d64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d66:	633a      	str	r2, [r7, #48]	; 0x30
 8003d68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d6e:	e841 2300 	strex	r3, r2, [r1]
 8003d72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1e5      	bne.n	8003d46 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d119      	bne.n	8003dbe <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	330c      	adds	r3, #12
 8003d90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	e853 3f00 	ldrex	r3, [r3]
 8003d98:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f023 0310 	bic.w	r3, r3, #16
 8003da0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	330c      	adds	r3, #12
 8003da8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003daa:	61fa      	str	r2, [r7, #28]
 8003dac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dae:	69b9      	ldr	r1, [r7, #24]
 8003db0:	69fa      	ldr	r2, [r7, #28]
 8003db2:	e841 2300 	strex	r3, r2, [r1]
 8003db6:	617b      	str	r3, [r7, #20]
   return(result);
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1e5      	bne.n	8003d8a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d106      	bne.n	8003dda <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003dd4:	f7ff ff67 	bl	8003ca6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003dd8:	e002      	b.n	8003de0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003dda:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003ddc:	f7ff ff48 	bl	8003c70 <HAL_UART_RxCpltCallback>
}
 8003de0:	bf00      	nop
 8003de2:	3770      	adds	r7, #112	; 0x70
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d108      	bne.n	8003e16 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e08:	085b      	lsrs	r3, r3, #1
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f7ff ff49 	bl	8003ca6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003e14:	e002      	b.n	8003e1c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f7ff ff33 	bl	8003c82 <HAL_UART_RxHalfCpltCallback>
}
 8003e1c:	bf00      	nop
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e34:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e40:	2b80      	cmp	r3, #128	; 0x80
 8003e42:	bf0c      	ite	eq
 8003e44:	2301      	moveq	r3, #1
 8003e46:	2300      	movne	r3, #0
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b21      	cmp	r3, #33	; 0x21
 8003e56:	d108      	bne.n	8003e6a <UART_DMAError+0x46>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d005      	beq.n	8003e6a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	2200      	movs	r2, #0
 8003e62:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003e64:	68b8      	ldr	r0, [r7, #8]
 8003e66:	f000 f92f 	bl	80040c8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e74:	2b40      	cmp	r3, #64	; 0x40
 8003e76:	bf0c      	ite	eq
 8003e78:	2301      	moveq	r3, #1
 8003e7a:	2300      	movne	r3, #0
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b22      	cmp	r3, #34	; 0x22
 8003e8a:	d108      	bne.n	8003e9e <UART_DMAError+0x7a>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d005      	beq.n	8003e9e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	2200      	movs	r2, #0
 8003e96:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003e98:	68b8      	ldr	r0, [r7, #8]
 8003e9a:	f000 f93c 	bl	8004116 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea2:	f043 0210 	orr.w	r2, r3, #16
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003eaa:	68b8      	ldr	r0, [r7, #8]
 8003eac:	f7ff fef2 	bl	8003c94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003eb0:	bf00      	nop
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b090      	sub	sp, #64	; 0x40
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	603b      	str	r3, [r7, #0]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ec8:	e050      	b.n	8003f6c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed0:	d04c      	beq.n	8003f6c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d007      	beq.n	8003ee8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ed8:	f7fe fbf6 	bl	80026c8 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d241      	bcs.n	8003f6c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	330c      	adds	r3, #12
 8003eee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef2:	e853 3f00 	ldrex	r3, [r3]
 8003ef6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003efe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	330c      	adds	r3, #12
 8003f06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f08:	637a      	str	r2, [r7, #52]	; 0x34
 8003f0a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f10:	e841 2300 	strex	r3, r2, [r1]
 8003f14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1e5      	bne.n	8003ee8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	3314      	adds	r3, #20
 8003f22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	e853 3f00 	ldrex	r3, [r3]
 8003f2a:	613b      	str	r3, [r7, #16]
   return(result);
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	f023 0301 	bic.w	r3, r3, #1
 8003f32:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	3314      	adds	r3, #20
 8003f3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f3c:	623a      	str	r2, [r7, #32]
 8003f3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f40:	69f9      	ldr	r1, [r7, #28]
 8003f42:	6a3a      	ldr	r2, [r7, #32]
 8003f44:	e841 2300 	strex	r3, r2, [r1]
 8003f48:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1e5      	bne.n	8003f1c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2220      	movs	r2, #32
 8003f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e00f      	b.n	8003f8c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	4013      	ands	r3, r2
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	bf0c      	ite	eq
 8003f7c:	2301      	moveq	r3, #1
 8003f7e:	2300      	movne	r3, #0
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	461a      	mov	r2, r3
 8003f84:	79fb      	ldrb	r3, [r7, #7]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d09f      	beq.n	8003eca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3740      	adds	r7, #64	; 0x40
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b098      	sub	sp, #96	; 0x60
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	88fa      	ldrh	r2, [r7, #6]
 8003fac:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2222      	movs	r2, #34	; 0x22
 8003fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc0:	4a3e      	ldr	r2, [pc, #248]	; (80040bc <UART_Start_Receive_DMA+0x128>)
 8003fc2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc8:	4a3d      	ldr	r2, [pc, #244]	; (80040c0 <UART_Start_Receive_DMA+0x12c>)
 8003fca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd0:	4a3c      	ldr	r2, [pc, #240]	; (80040c4 <UART_Start_Receive_DMA+0x130>)
 8003fd2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd8:	2200      	movs	r2, #0
 8003fda:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003fdc:	f107 0308 	add.w	r3, r7, #8
 8003fe0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	3304      	adds	r3, #4
 8003fec:	4619      	mov	r1, r3
 8003fee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	88fb      	ldrh	r3, [r7, #6]
 8003ff4:	f7fe fd16 	bl	8002a24 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	613b      	str	r3, [r7, #16]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	613b      	str	r3, [r7, #16]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	613b      	str	r3, [r7, #16]
 800400c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d019      	beq.n	800404a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	330c      	adds	r3, #12
 800401c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004020:	e853 3f00 	ldrex	r3, [r3]
 8004024:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800402c:	65bb      	str	r3, [r7, #88]	; 0x58
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	330c      	adds	r3, #12
 8004034:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004036:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004038:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800403c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800403e:	e841 2300 	strex	r3, r2, [r1]
 8004042:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004044:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1e5      	bne.n	8004016 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	3314      	adds	r3, #20
 8004050:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004054:	e853 3f00 	ldrex	r3, [r3]
 8004058:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800405a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405c:	f043 0301 	orr.w	r3, r3, #1
 8004060:	657b      	str	r3, [r7, #84]	; 0x54
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	3314      	adds	r3, #20
 8004068:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800406a:	63ba      	str	r2, [r7, #56]	; 0x38
 800406c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004070:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004072:	e841 2300 	strex	r3, r2, [r1]
 8004076:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1e5      	bne.n	800404a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	3314      	adds	r3, #20
 8004084:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	e853 3f00 	ldrex	r3, [r3]
 800408c:	617b      	str	r3, [r7, #20]
   return(result);
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004094:	653b      	str	r3, [r7, #80]	; 0x50
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	3314      	adds	r3, #20
 800409c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800409e:	627a      	str	r2, [r7, #36]	; 0x24
 80040a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a2:	6a39      	ldr	r1, [r7, #32]
 80040a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040a6:	e841 2300 	strex	r3, r2, [r1]
 80040aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1e5      	bne.n	800407e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3760      	adds	r7, #96	; 0x60
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	08003cbd 	.word	0x08003cbd
 80040c0:	08003de9 	.word	0x08003de9
 80040c4:	08003e25 	.word	0x08003e25

080040c8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b089      	sub	sp, #36	; 0x24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	330c      	adds	r3, #12
 80040d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	e853 3f00 	ldrex	r3, [r3]
 80040de:	60bb      	str	r3, [r7, #8]
   return(result);
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80040e6:	61fb      	str	r3, [r7, #28]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	330c      	adds	r3, #12
 80040ee:	69fa      	ldr	r2, [r7, #28]
 80040f0:	61ba      	str	r2, [r7, #24]
 80040f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f4:	6979      	ldr	r1, [r7, #20]
 80040f6:	69ba      	ldr	r2, [r7, #24]
 80040f8:	e841 2300 	strex	r3, r2, [r1]
 80040fc:	613b      	str	r3, [r7, #16]
   return(result);
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1e5      	bne.n	80040d0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2220      	movs	r2, #32
 8004108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800410c:	bf00      	nop
 800410e:	3724      	adds	r7, #36	; 0x24
 8004110:	46bd      	mov	sp, r7
 8004112:	bc80      	pop	{r7}
 8004114:	4770      	bx	lr

08004116 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004116:	b480      	push	{r7}
 8004118:	b095      	sub	sp, #84	; 0x54
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	330c      	adds	r3, #12
 8004124:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004128:	e853 3f00 	ldrex	r3, [r3]
 800412c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800412e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004130:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004134:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	330c      	adds	r3, #12
 800413c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800413e:	643a      	str	r2, [r7, #64]	; 0x40
 8004140:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004142:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004144:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004146:	e841 2300 	strex	r3, r2, [r1]
 800414a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800414c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1e5      	bne.n	800411e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	3314      	adds	r3, #20
 8004158:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415a:	6a3b      	ldr	r3, [r7, #32]
 800415c:	e853 3f00 	ldrex	r3, [r3]
 8004160:	61fb      	str	r3, [r7, #28]
   return(result);
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	f023 0301 	bic.w	r3, r3, #1
 8004168:	64bb      	str	r3, [r7, #72]	; 0x48
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	3314      	adds	r3, #20
 8004170:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004172:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004174:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004176:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004178:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800417a:	e841 2300 	strex	r3, r2, [r1]
 800417e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1e5      	bne.n	8004152 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418a:	2b01      	cmp	r3, #1
 800418c:	d119      	bne.n	80041c2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	330c      	adds	r3, #12
 8004194:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	e853 3f00 	ldrex	r3, [r3]
 800419c:	60bb      	str	r3, [r7, #8]
   return(result);
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	f023 0310 	bic.w	r3, r3, #16
 80041a4:	647b      	str	r3, [r7, #68]	; 0x44
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	330c      	adds	r3, #12
 80041ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041ae:	61ba      	str	r2, [r7, #24]
 80041b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b2:	6979      	ldr	r1, [r7, #20]
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	e841 2300 	strex	r3, r2, [r1]
 80041ba:	613b      	str	r3, [r7, #16]
   return(result);
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1e5      	bne.n	800418e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2220      	movs	r2, #32
 80041c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	631a      	str	r2, [r3, #48]	; 0x30
}
 80041d0:	bf00      	nop
 80041d2:	3754      	adds	r7, #84	; 0x54
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bc80      	pop	{r7}
 80041d8:	4770      	bx	lr
	...

080041dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68da      	ldr	r2, [r3, #12]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689a      	ldr	r2, [r3, #8]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	431a      	orrs	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	431a      	orrs	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	4313      	orrs	r3, r2
 8004210:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800421c:	f023 030c 	bic.w	r3, r3, #12
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	6812      	ldr	r2, [r2, #0]
 8004224:	68b9      	ldr	r1, [r7, #8]
 8004226:	430b      	orrs	r3, r1
 8004228:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	695b      	ldr	r3, [r3, #20]
 8004230:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	699a      	ldr	r2, [r3, #24]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	430a      	orrs	r2, r1
 800423e:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a55      	ldr	r2, [pc, #340]	; (800439c <UART_SetConfig+0x1c0>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d103      	bne.n	8004252 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800424a:	f7ff fba5 	bl	8003998 <HAL_RCC_GetPCLK2Freq>
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	e002      	b.n	8004258 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004252:	f7ff fb8d 	bl	8003970 <HAL_RCC_GetPCLK1Freq>
 8004256:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	69db      	ldr	r3, [r3, #28]
 800425c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004260:	d14c      	bne.n	80042fc <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	4613      	mov	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	009a      	lsls	r2, r3, #2
 800426c:	441a      	add	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	fbb2 f3f3 	udiv	r3, r2, r3
 8004278:	4a49      	ldr	r2, [pc, #292]	; (80043a0 <UART_SetConfig+0x1c4>)
 800427a:	fba2 2303 	umull	r2, r3, r2, r3
 800427e:	095b      	lsrs	r3, r3, #5
 8004280:	0119      	lsls	r1, r3, #4
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	4613      	mov	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	009a      	lsls	r2, r3, #2
 800428c:	441a      	add	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	005b      	lsls	r3, r3, #1
 8004294:	fbb2 f2f3 	udiv	r2, r2, r3
 8004298:	4b41      	ldr	r3, [pc, #260]	; (80043a0 <UART_SetConfig+0x1c4>)
 800429a:	fba3 0302 	umull	r0, r3, r3, r2
 800429e:	095b      	lsrs	r3, r3, #5
 80042a0:	2064      	movs	r0, #100	; 0x64
 80042a2:	fb00 f303 	mul.w	r3, r0, r3
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	00db      	lsls	r3, r3, #3
 80042aa:	3332      	adds	r3, #50	; 0x32
 80042ac:	4a3c      	ldr	r2, [pc, #240]	; (80043a0 <UART_SetConfig+0x1c4>)
 80042ae:	fba2 2303 	umull	r2, r3, r2, r3
 80042b2:	095b      	lsrs	r3, r3, #5
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042ba:	4419      	add	r1, r3
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	4613      	mov	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4413      	add	r3, r2
 80042c4:	009a      	lsls	r2, r3, #2
 80042c6:	441a      	add	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80042d2:	4b33      	ldr	r3, [pc, #204]	; (80043a0 <UART_SetConfig+0x1c4>)
 80042d4:	fba3 0302 	umull	r0, r3, r3, r2
 80042d8:	095b      	lsrs	r3, r3, #5
 80042da:	2064      	movs	r0, #100	; 0x64
 80042dc:	fb00 f303 	mul.w	r3, r0, r3
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	3332      	adds	r3, #50	; 0x32
 80042e6:	4a2e      	ldr	r2, [pc, #184]	; (80043a0 <UART_SetConfig+0x1c4>)
 80042e8:	fba2 2303 	umull	r2, r3, r2, r3
 80042ec:	095b      	lsrs	r3, r3, #5
 80042ee:	f003 0207 	and.w	r2, r3, #7
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	440a      	add	r2, r1
 80042f8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042fa:	e04a      	b.n	8004392 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	4613      	mov	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	4413      	add	r3, r2
 8004304:	009a      	lsls	r2, r3, #2
 8004306:	441a      	add	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004312:	4a23      	ldr	r2, [pc, #140]	; (80043a0 <UART_SetConfig+0x1c4>)
 8004314:	fba2 2303 	umull	r2, r3, r2, r3
 8004318:	095b      	lsrs	r3, r3, #5
 800431a:	0119      	lsls	r1, r3, #4
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	4613      	mov	r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	4413      	add	r3, r2
 8004324:	009a      	lsls	r2, r3, #2
 8004326:	441a      	add	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004332:	4b1b      	ldr	r3, [pc, #108]	; (80043a0 <UART_SetConfig+0x1c4>)
 8004334:	fba3 0302 	umull	r0, r3, r3, r2
 8004338:	095b      	lsrs	r3, r3, #5
 800433a:	2064      	movs	r0, #100	; 0x64
 800433c:	fb00 f303 	mul.w	r3, r0, r3
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	011b      	lsls	r3, r3, #4
 8004344:	3332      	adds	r3, #50	; 0x32
 8004346:	4a16      	ldr	r2, [pc, #88]	; (80043a0 <UART_SetConfig+0x1c4>)
 8004348:	fba2 2303 	umull	r2, r3, r2, r3
 800434c:	095b      	lsrs	r3, r3, #5
 800434e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004352:	4419      	add	r1, r3
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	4613      	mov	r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	4413      	add	r3, r2
 800435c:	009a      	lsls	r2, r3, #2
 800435e:	441a      	add	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	fbb2 f2f3 	udiv	r2, r2, r3
 800436a:	4b0d      	ldr	r3, [pc, #52]	; (80043a0 <UART_SetConfig+0x1c4>)
 800436c:	fba3 0302 	umull	r0, r3, r3, r2
 8004370:	095b      	lsrs	r3, r3, #5
 8004372:	2064      	movs	r0, #100	; 0x64
 8004374:	fb00 f303 	mul.w	r3, r0, r3
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	011b      	lsls	r3, r3, #4
 800437c:	3332      	adds	r3, #50	; 0x32
 800437e:	4a08      	ldr	r2, [pc, #32]	; (80043a0 <UART_SetConfig+0x1c4>)
 8004380:	fba2 2303 	umull	r2, r3, r2, r3
 8004384:	095b      	lsrs	r3, r3, #5
 8004386:	f003 020f 	and.w	r2, r3, #15
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	440a      	add	r2, r1
 8004390:	609a      	str	r2, [r3, #8]
}
 8004392:	bf00      	nop
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	40013800 	.word	0x40013800
 80043a0:	51eb851f 	.word	0x51eb851f

080043a4 <atoi>:
 80043a4:	220a      	movs	r2, #10
 80043a6:	2100      	movs	r1, #0
 80043a8:	f000 b9f0 	b.w	800478c <strtol>

080043ac <__errno>:
 80043ac:	4b01      	ldr	r3, [pc, #4]	; (80043b4 <__errno+0x8>)
 80043ae:	6818      	ldr	r0, [r3, #0]
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	2000000c 	.word	0x2000000c

080043b8 <__libc_init_array>:
 80043b8:	b570      	push	{r4, r5, r6, lr}
 80043ba:	2600      	movs	r6, #0
 80043bc:	4d0c      	ldr	r5, [pc, #48]	; (80043f0 <__libc_init_array+0x38>)
 80043be:	4c0d      	ldr	r4, [pc, #52]	; (80043f4 <__libc_init_array+0x3c>)
 80043c0:	1b64      	subs	r4, r4, r5
 80043c2:	10a4      	asrs	r4, r4, #2
 80043c4:	42a6      	cmp	r6, r4
 80043c6:	d109      	bne.n	80043dc <__libc_init_array+0x24>
 80043c8:	f001 fa60 	bl	800588c <_init>
 80043cc:	2600      	movs	r6, #0
 80043ce:	4d0a      	ldr	r5, [pc, #40]	; (80043f8 <__libc_init_array+0x40>)
 80043d0:	4c0a      	ldr	r4, [pc, #40]	; (80043fc <__libc_init_array+0x44>)
 80043d2:	1b64      	subs	r4, r4, r5
 80043d4:	10a4      	asrs	r4, r4, #2
 80043d6:	42a6      	cmp	r6, r4
 80043d8:	d105      	bne.n	80043e6 <__libc_init_array+0x2e>
 80043da:	bd70      	pop	{r4, r5, r6, pc}
 80043dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80043e0:	4798      	blx	r3
 80043e2:	3601      	adds	r6, #1
 80043e4:	e7ee      	b.n	80043c4 <__libc_init_array+0xc>
 80043e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80043ea:	4798      	blx	r3
 80043ec:	3601      	adds	r6, #1
 80043ee:	e7f2      	b.n	80043d6 <__libc_init_array+0x1e>
 80043f0:	080062a0 	.word	0x080062a0
 80043f4:	080062a0 	.word	0x080062a0
 80043f8:	080062a0 	.word	0x080062a0
 80043fc:	080062a4 	.word	0x080062a4

08004400 <__itoa>:
 8004400:	1e93      	subs	r3, r2, #2
 8004402:	2b22      	cmp	r3, #34	; 0x22
 8004404:	b510      	push	{r4, lr}
 8004406:	460c      	mov	r4, r1
 8004408:	d904      	bls.n	8004414 <__itoa+0x14>
 800440a:	2300      	movs	r3, #0
 800440c:	461c      	mov	r4, r3
 800440e:	700b      	strb	r3, [r1, #0]
 8004410:	4620      	mov	r0, r4
 8004412:	bd10      	pop	{r4, pc}
 8004414:	2a0a      	cmp	r2, #10
 8004416:	d109      	bne.n	800442c <__itoa+0x2c>
 8004418:	2800      	cmp	r0, #0
 800441a:	da07      	bge.n	800442c <__itoa+0x2c>
 800441c:	232d      	movs	r3, #45	; 0x2d
 800441e:	700b      	strb	r3, [r1, #0]
 8004420:	2101      	movs	r1, #1
 8004422:	4240      	negs	r0, r0
 8004424:	4421      	add	r1, r4
 8004426:	f000 f9d5 	bl	80047d4 <__utoa>
 800442a:	e7f1      	b.n	8004410 <__itoa+0x10>
 800442c:	2100      	movs	r1, #0
 800442e:	e7f9      	b.n	8004424 <__itoa+0x24>

08004430 <itoa>:
 8004430:	f7ff bfe6 	b.w	8004400 <__itoa>

08004434 <memset>:
 8004434:	4603      	mov	r3, r0
 8004436:	4402      	add	r2, r0
 8004438:	4293      	cmp	r3, r2
 800443a:	d100      	bne.n	800443e <memset+0xa>
 800443c:	4770      	bx	lr
 800443e:	f803 1b01 	strb.w	r1, [r3], #1
 8004442:	e7f9      	b.n	8004438 <memset+0x4>

08004444 <iprintf>:
 8004444:	b40f      	push	{r0, r1, r2, r3}
 8004446:	4b0a      	ldr	r3, [pc, #40]	; (8004470 <iprintf+0x2c>)
 8004448:	b513      	push	{r0, r1, r4, lr}
 800444a:	681c      	ldr	r4, [r3, #0]
 800444c:	b124      	cbz	r4, 8004458 <iprintf+0x14>
 800444e:	69a3      	ldr	r3, [r4, #24]
 8004450:	b913      	cbnz	r3, 8004458 <iprintf+0x14>
 8004452:	4620      	mov	r0, r4
 8004454:	f000 fbf4 	bl	8004c40 <__sinit>
 8004458:	ab05      	add	r3, sp, #20
 800445a:	4620      	mov	r0, r4
 800445c:	9a04      	ldr	r2, [sp, #16]
 800445e:	68a1      	ldr	r1, [r4, #8]
 8004460:	9301      	str	r3, [sp, #4]
 8004462:	f000 fe23 	bl	80050ac <_vfiprintf_r>
 8004466:	b002      	add	sp, #8
 8004468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800446c:	b004      	add	sp, #16
 800446e:	4770      	bx	lr
 8004470:	2000000c 	.word	0x2000000c

08004474 <_puts_r>:
 8004474:	b570      	push	{r4, r5, r6, lr}
 8004476:	460e      	mov	r6, r1
 8004478:	4605      	mov	r5, r0
 800447a:	b118      	cbz	r0, 8004484 <_puts_r+0x10>
 800447c:	6983      	ldr	r3, [r0, #24]
 800447e:	b90b      	cbnz	r3, 8004484 <_puts_r+0x10>
 8004480:	f000 fbde 	bl	8004c40 <__sinit>
 8004484:	69ab      	ldr	r3, [r5, #24]
 8004486:	68ac      	ldr	r4, [r5, #8]
 8004488:	b913      	cbnz	r3, 8004490 <_puts_r+0x1c>
 800448a:	4628      	mov	r0, r5
 800448c:	f000 fbd8 	bl	8004c40 <__sinit>
 8004490:	4b2c      	ldr	r3, [pc, #176]	; (8004544 <_puts_r+0xd0>)
 8004492:	429c      	cmp	r4, r3
 8004494:	d120      	bne.n	80044d8 <_puts_r+0x64>
 8004496:	686c      	ldr	r4, [r5, #4]
 8004498:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800449a:	07db      	lsls	r3, r3, #31
 800449c:	d405      	bmi.n	80044aa <_puts_r+0x36>
 800449e:	89a3      	ldrh	r3, [r4, #12]
 80044a0:	0598      	lsls	r0, r3, #22
 80044a2:	d402      	bmi.n	80044aa <_puts_r+0x36>
 80044a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044a6:	f000 fc8e 	bl	8004dc6 <__retarget_lock_acquire_recursive>
 80044aa:	89a3      	ldrh	r3, [r4, #12]
 80044ac:	0719      	lsls	r1, r3, #28
 80044ae:	d51d      	bpl.n	80044ec <_puts_r+0x78>
 80044b0:	6923      	ldr	r3, [r4, #16]
 80044b2:	b1db      	cbz	r3, 80044ec <_puts_r+0x78>
 80044b4:	3e01      	subs	r6, #1
 80044b6:	68a3      	ldr	r3, [r4, #8]
 80044b8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80044bc:	3b01      	subs	r3, #1
 80044be:	60a3      	str	r3, [r4, #8]
 80044c0:	bb39      	cbnz	r1, 8004512 <_puts_r+0x9e>
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	da38      	bge.n	8004538 <_puts_r+0xc4>
 80044c6:	4622      	mov	r2, r4
 80044c8:	210a      	movs	r1, #10
 80044ca:	4628      	mov	r0, r5
 80044cc:	f000 f9c4 	bl	8004858 <__swbuf_r>
 80044d0:	3001      	adds	r0, #1
 80044d2:	d011      	beq.n	80044f8 <_puts_r+0x84>
 80044d4:	250a      	movs	r5, #10
 80044d6:	e011      	b.n	80044fc <_puts_r+0x88>
 80044d8:	4b1b      	ldr	r3, [pc, #108]	; (8004548 <_puts_r+0xd4>)
 80044da:	429c      	cmp	r4, r3
 80044dc:	d101      	bne.n	80044e2 <_puts_r+0x6e>
 80044de:	68ac      	ldr	r4, [r5, #8]
 80044e0:	e7da      	b.n	8004498 <_puts_r+0x24>
 80044e2:	4b1a      	ldr	r3, [pc, #104]	; (800454c <_puts_r+0xd8>)
 80044e4:	429c      	cmp	r4, r3
 80044e6:	bf08      	it	eq
 80044e8:	68ec      	ldreq	r4, [r5, #12]
 80044ea:	e7d5      	b.n	8004498 <_puts_r+0x24>
 80044ec:	4621      	mov	r1, r4
 80044ee:	4628      	mov	r0, r5
 80044f0:	f000 fa04 	bl	80048fc <__swsetup_r>
 80044f4:	2800      	cmp	r0, #0
 80044f6:	d0dd      	beq.n	80044b4 <_puts_r+0x40>
 80044f8:	f04f 35ff 	mov.w	r5, #4294967295
 80044fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044fe:	07da      	lsls	r2, r3, #31
 8004500:	d405      	bmi.n	800450e <_puts_r+0x9a>
 8004502:	89a3      	ldrh	r3, [r4, #12]
 8004504:	059b      	lsls	r3, r3, #22
 8004506:	d402      	bmi.n	800450e <_puts_r+0x9a>
 8004508:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800450a:	f000 fc5d 	bl	8004dc8 <__retarget_lock_release_recursive>
 800450e:	4628      	mov	r0, r5
 8004510:	bd70      	pop	{r4, r5, r6, pc}
 8004512:	2b00      	cmp	r3, #0
 8004514:	da04      	bge.n	8004520 <_puts_r+0xac>
 8004516:	69a2      	ldr	r2, [r4, #24]
 8004518:	429a      	cmp	r2, r3
 800451a:	dc06      	bgt.n	800452a <_puts_r+0xb6>
 800451c:	290a      	cmp	r1, #10
 800451e:	d004      	beq.n	800452a <_puts_r+0xb6>
 8004520:	6823      	ldr	r3, [r4, #0]
 8004522:	1c5a      	adds	r2, r3, #1
 8004524:	6022      	str	r2, [r4, #0]
 8004526:	7019      	strb	r1, [r3, #0]
 8004528:	e7c5      	b.n	80044b6 <_puts_r+0x42>
 800452a:	4622      	mov	r2, r4
 800452c:	4628      	mov	r0, r5
 800452e:	f000 f993 	bl	8004858 <__swbuf_r>
 8004532:	3001      	adds	r0, #1
 8004534:	d1bf      	bne.n	80044b6 <_puts_r+0x42>
 8004536:	e7df      	b.n	80044f8 <_puts_r+0x84>
 8004538:	250a      	movs	r5, #10
 800453a:	6823      	ldr	r3, [r4, #0]
 800453c:	1c5a      	adds	r2, r3, #1
 800453e:	6022      	str	r2, [r4, #0]
 8004540:	701d      	strb	r5, [r3, #0]
 8004542:	e7db      	b.n	80044fc <_puts_r+0x88>
 8004544:	08006224 	.word	0x08006224
 8004548:	08006244 	.word	0x08006244
 800454c:	08006204 	.word	0x08006204

08004550 <puts>:
 8004550:	4b02      	ldr	r3, [pc, #8]	; (800455c <puts+0xc>)
 8004552:	4601      	mov	r1, r0
 8004554:	6818      	ldr	r0, [r3, #0]
 8004556:	f7ff bf8d 	b.w	8004474 <_puts_r>
 800455a:	bf00      	nop
 800455c:	2000000c 	.word	0x2000000c

08004560 <srand>:
 8004560:	b538      	push	{r3, r4, r5, lr}
 8004562:	4b10      	ldr	r3, [pc, #64]	; (80045a4 <srand+0x44>)
 8004564:	4604      	mov	r4, r0
 8004566:	681d      	ldr	r5, [r3, #0]
 8004568:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800456a:	b9b3      	cbnz	r3, 800459a <srand+0x3a>
 800456c:	2018      	movs	r0, #24
 800456e:	f000 fc91 	bl	8004e94 <malloc>
 8004572:	4602      	mov	r2, r0
 8004574:	63a8      	str	r0, [r5, #56]	; 0x38
 8004576:	b920      	cbnz	r0, 8004582 <srand+0x22>
 8004578:	2142      	movs	r1, #66	; 0x42
 800457a:	4b0b      	ldr	r3, [pc, #44]	; (80045a8 <srand+0x48>)
 800457c:	480b      	ldr	r0, [pc, #44]	; (80045ac <srand+0x4c>)
 800457e:	f000 fa2b 	bl	80049d8 <__assert_func>
 8004582:	490b      	ldr	r1, [pc, #44]	; (80045b0 <srand+0x50>)
 8004584:	4b0b      	ldr	r3, [pc, #44]	; (80045b4 <srand+0x54>)
 8004586:	e9c0 1300 	strd	r1, r3, [r0]
 800458a:	4b0b      	ldr	r3, [pc, #44]	; (80045b8 <srand+0x58>)
 800458c:	2100      	movs	r1, #0
 800458e:	6083      	str	r3, [r0, #8]
 8004590:	230b      	movs	r3, #11
 8004592:	8183      	strh	r3, [r0, #12]
 8004594:	2001      	movs	r0, #1
 8004596:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800459a:	2200      	movs	r2, #0
 800459c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800459e:	611c      	str	r4, [r3, #16]
 80045a0:	615a      	str	r2, [r3, #20]
 80045a2:	bd38      	pop	{r3, r4, r5, pc}
 80045a4:	2000000c 	.word	0x2000000c
 80045a8:	08006030 	.word	0x08006030
 80045ac:	08006047 	.word	0x08006047
 80045b0:	abcd330e 	.word	0xabcd330e
 80045b4:	e66d1234 	.word	0xe66d1234
 80045b8:	0005deec 	.word	0x0005deec

080045bc <rand>:
 80045bc:	4b16      	ldr	r3, [pc, #88]	; (8004618 <rand+0x5c>)
 80045be:	b510      	push	{r4, lr}
 80045c0:	681c      	ldr	r4, [r3, #0]
 80045c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80045c4:	b9b3      	cbnz	r3, 80045f4 <rand+0x38>
 80045c6:	2018      	movs	r0, #24
 80045c8:	f000 fc64 	bl	8004e94 <malloc>
 80045cc:	4602      	mov	r2, r0
 80045ce:	63a0      	str	r0, [r4, #56]	; 0x38
 80045d0:	b920      	cbnz	r0, 80045dc <rand+0x20>
 80045d2:	214e      	movs	r1, #78	; 0x4e
 80045d4:	4b11      	ldr	r3, [pc, #68]	; (800461c <rand+0x60>)
 80045d6:	4812      	ldr	r0, [pc, #72]	; (8004620 <rand+0x64>)
 80045d8:	f000 f9fe 	bl	80049d8 <__assert_func>
 80045dc:	4911      	ldr	r1, [pc, #68]	; (8004624 <rand+0x68>)
 80045de:	4b12      	ldr	r3, [pc, #72]	; (8004628 <rand+0x6c>)
 80045e0:	e9c0 1300 	strd	r1, r3, [r0]
 80045e4:	4b11      	ldr	r3, [pc, #68]	; (800462c <rand+0x70>)
 80045e6:	2100      	movs	r1, #0
 80045e8:	6083      	str	r3, [r0, #8]
 80045ea:	230b      	movs	r3, #11
 80045ec:	8183      	strh	r3, [r0, #12]
 80045ee:	2001      	movs	r0, #1
 80045f0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80045f4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80045f6:	4a0e      	ldr	r2, [pc, #56]	; (8004630 <rand+0x74>)
 80045f8:	6920      	ldr	r0, [r4, #16]
 80045fa:	6963      	ldr	r3, [r4, #20]
 80045fc:	4342      	muls	r2, r0
 80045fe:	490d      	ldr	r1, [pc, #52]	; (8004634 <rand+0x78>)
 8004600:	fb01 2203 	mla	r2, r1, r3, r2
 8004604:	fba0 0101 	umull	r0, r1, r0, r1
 8004608:	1c43      	adds	r3, r0, #1
 800460a:	eb42 0001 	adc.w	r0, r2, r1
 800460e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8004612:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004616:	bd10      	pop	{r4, pc}
 8004618:	2000000c 	.word	0x2000000c
 800461c:	08006030 	.word	0x08006030
 8004620:	08006047 	.word	0x08006047
 8004624:	abcd330e 	.word	0xabcd330e
 8004628:	e66d1234 	.word	0xe66d1234
 800462c:	0005deec 	.word	0x0005deec
 8004630:	5851f42d 	.word	0x5851f42d
 8004634:	4c957f2d 	.word	0x4c957f2d

08004638 <strcat>:
 8004638:	4602      	mov	r2, r0
 800463a:	b510      	push	{r4, lr}
 800463c:	7814      	ldrb	r4, [r2, #0]
 800463e:	4613      	mov	r3, r2
 8004640:	3201      	adds	r2, #1
 8004642:	2c00      	cmp	r4, #0
 8004644:	d1fa      	bne.n	800463c <strcat+0x4>
 8004646:	3b01      	subs	r3, #1
 8004648:	f811 2b01 	ldrb.w	r2, [r1], #1
 800464c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004650:	2a00      	cmp	r2, #0
 8004652:	d1f9      	bne.n	8004648 <strcat+0x10>
 8004654:	bd10      	pop	{r4, pc}

08004656 <strcpy>:
 8004656:	4603      	mov	r3, r0
 8004658:	f811 2b01 	ldrb.w	r2, [r1], #1
 800465c:	f803 2b01 	strb.w	r2, [r3], #1
 8004660:	2a00      	cmp	r2, #0
 8004662:	d1f9      	bne.n	8004658 <strcpy+0x2>
 8004664:	4770      	bx	lr

08004666 <strstr>:
 8004666:	780a      	ldrb	r2, [r1, #0]
 8004668:	b570      	push	{r4, r5, r6, lr}
 800466a:	b96a      	cbnz	r2, 8004688 <strstr+0x22>
 800466c:	bd70      	pop	{r4, r5, r6, pc}
 800466e:	429a      	cmp	r2, r3
 8004670:	d109      	bne.n	8004686 <strstr+0x20>
 8004672:	460c      	mov	r4, r1
 8004674:	4605      	mov	r5, r0
 8004676:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800467a:	2b00      	cmp	r3, #0
 800467c:	d0f6      	beq.n	800466c <strstr+0x6>
 800467e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004682:	429e      	cmp	r6, r3
 8004684:	d0f7      	beq.n	8004676 <strstr+0x10>
 8004686:	3001      	adds	r0, #1
 8004688:	7803      	ldrb	r3, [r0, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1ef      	bne.n	800466e <strstr+0x8>
 800468e:	4618      	mov	r0, r3
 8004690:	e7ec      	b.n	800466c <strstr+0x6>
	...

08004694 <_strtol_l.constprop.0>:
 8004694:	2b01      	cmp	r3, #1
 8004696:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800469a:	4680      	mov	r8, r0
 800469c:	d001      	beq.n	80046a2 <_strtol_l.constprop.0+0xe>
 800469e:	2b24      	cmp	r3, #36	; 0x24
 80046a0:	d906      	bls.n	80046b0 <_strtol_l.constprop.0+0x1c>
 80046a2:	f7ff fe83 	bl	80043ac <__errno>
 80046a6:	2316      	movs	r3, #22
 80046a8:	6003      	str	r3, [r0, #0]
 80046aa:	2000      	movs	r0, #0
 80046ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046b0:	460d      	mov	r5, r1
 80046b2:	4f35      	ldr	r7, [pc, #212]	; (8004788 <_strtol_l.constprop.0+0xf4>)
 80046b4:	4628      	mov	r0, r5
 80046b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80046ba:	5de6      	ldrb	r6, [r4, r7]
 80046bc:	f016 0608 	ands.w	r6, r6, #8
 80046c0:	d1f8      	bne.n	80046b4 <_strtol_l.constprop.0+0x20>
 80046c2:	2c2d      	cmp	r4, #45	; 0x2d
 80046c4:	d12f      	bne.n	8004726 <_strtol_l.constprop.0+0x92>
 80046c6:	2601      	movs	r6, #1
 80046c8:	782c      	ldrb	r4, [r5, #0]
 80046ca:	1c85      	adds	r5, r0, #2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d057      	beq.n	8004780 <_strtol_l.constprop.0+0xec>
 80046d0:	2b10      	cmp	r3, #16
 80046d2:	d109      	bne.n	80046e8 <_strtol_l.constprop.0+0x54>
 80046d4:	2c30      	cmp	r4, #48	; 0x30
 80046d6:	d107      	bne.n	80046e8 <_strtol_l.constprop.0+0x54>
 80046d8:	7828      	ldrb	r0, [r5, #0]
 80046da:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80046de:	2858      	cmp	r0, #88	; 0x58
 80046e0:	d149      	bne.n	8004776 <_strtol_l.constprop.0+0xe2>
 80046e2:	2310      	movs	r3, #16
 80046e4:	786c      	ldrb	r4, [r5, #1]
 80046e6:	3502      	adds	r5, #2
 80046e8:	2700      	movs	r7, #0
 80046ea:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80046ee:	f10e 3eff 	add.w	lr, lr, #4294967295
 80046f2:	fbbe f9f3 	udiv	r9, lr, r3
 80046f6:	4638      	mov	r0, r7
 80046f8:	fb03 ea19 	mls	sl, r3, r9, lr
 80046fc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004700:	f1bc 0f09 	cmp.w	ip, #9
 8004704:	d814      	bhi.n	8004730 <_strtol_l.constprop.0+0x9c>
 8004706:	4664      	mov	r4, ip
 8004708:	42a3      	cmp	r3, r4
 800470a:	dd22      	ble.n	8004752 <_strtol_l.constprop.0+0xbe>
 800470c:	2f00      	cmp	r7, #0
 800470e:	db1d      	blt.n	800474c <_strtol_l.constprop.0+0xb8>
 8004710:	4581      	cmp	r9, r0
 8004712:	d31b      	bcc.n	800474c <_strtol_l.constprop.0+0xb8>
 8004714:	d101      	bne.n	800471a <_strtol_l.constprop.0+0x86>
 8004716:	45a2      	cmp	sl, r4
 8004718:	db18      	blt.n	800474c <_strtol_l.constprop.0+0xb8>
 800471a:	2701      	movs	r7, #1
 800471c:	fb00 4003 	mla	r0, r0, r3, r4
 8004720:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004724:	e7ea      	b.n	80046fc <_strtol_l.constprop.0+0x68>
 8004726:	2c2b      	cmp	r4, #43	; 0x2b
 8004728:	bf04      	itt	eq
 800472a:	782c      	ldrbeq	r4, [r5, #0]
 800472c:	1c85      	addeq	r5, r0, #2
 800472e:	e7cd      	b.n	80046cc <_strtol_l.constprop.0+0x38>
 8004730:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004734:	f1bc 0f19 	cmp.w	ip, #25
 8004738:	d801      	bhi.n	800473e <_strtol_l.constprop.0+0xaa>
 800473a:	3c37      	subs	r4, #55	; 0x37
 800473c:	e7e4      	b.n	8004708 <_strtol_l.constprop.0+0x74>
 800473e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004742:	f1bc 0f19 	cmp.w	ip, #25
 8004746:	d804      	bhi.n	8004752 <_strtol_l.constprop.0+0xbe>
 8004748:	3c57      	subs	r4, #87	; 0x57
 800474a:	e7dd      	b.n	8004708 <_strtol_l.constprop.0+0x74>
 800474c:	f04f 37ff 	mov.w	r7, #4294967295
 8004750:	e7e6      	b.n	8004720 <_strtol_l.constprop.0+0x8c>
 8004752:	2f00      	cmp	r7, #0
 8004754:	da07      	bge.n	8004766 <_strtol_l.constprop.0+0xd2>
 8004756:	2322      	movs	r3, #34	; 0x22
 8004758:	4670      	mov	r0, lr
 800475a:	f8c8 3000 	str.w	r3, [r8]
 800475e:	2a00      	cmp	r2, #0
 8004760:	d0a4      	beq.n	80046ac <_strtol_l.constprop.0+0x18>
 8004762:	1e69      	subs	r1, r5, #1
 8004764:	e005      	b.n	8004772 <_strtol_l.constprop.0+0xde>
 8004766:	b106      	cbz	r6, 800476a <_strtol_l.constprop.0+0xd6>
 8004768:	4240      	negs	r0, r0
 800476a:	2a00      	cmp	r2, #0
 800476c:	d09e      	beq.n	80046ac <_strtol_l.constprop.0+0x18>
 800476e:	2f00      	cmp	r7, #0
 8004770:	d1f7      	bne.n	8004762 <_strtol_l.constprop.0+0xce>
 8004772:	6011      	str	r1, [r2, #0]
 8004774:	e79a      	b.n	80046ac <_strtol_l.constprop.0+0x18>
 8004776:	2430      	movs	r4, #48	; 0x30
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1b5      	bne.n	80046e8 <_strtol_l.constprop.0+0x54>
 800477c:	2308      	movs	r3, #8
 800477e:	e7b3      	b.n	80046e8 <_strtol_l.constprop.0+0x54>
 8004780:	2c30      	cmp	r4, #48	; 0x30
 8004782:	d0a9      	beq.n	80046d8 <_strtol_l.constprop.0+0x44>
 8004784:	230a      	movs	r3, #10
 8004786:	e7af      	b.n	80046e8 <_strtol_l.constprop.0+0x54>
 8004788:	08006104 	.word	0x08006104

0800478c <strtol>:
 800478c:	4613      	mov	r3, r2
 800478e:	460a      	mov	r2, r1
 8004790:	4601      	mov	r1, r0
 8004792:	4802      	ldr	r0, [pc, #8]	; (800479c <strtol+0x10>)
 8004794:	6800      	ldr	r0, [r0, #0]
 8004796:	f7ff bf7d 	b.w	8004694 <_strtol_l.constprop.0>
 800479a:	bf00      	nop
 800479c:	2000000c 	.word	0x2000000c

080047a0 <time>:
 80047a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80047a2:	4b0b      	ldr	r3, [pc, #44]	; (80047d0 <time+0x30>)
 80047a4:	4604      	mov	r4, r0
 80047a6:	2200      	movs	r2, #0
 80047a8:	4669      	mov	r1, sp
 80047aa:	6818      	ldr	r0, [r3, #0]
 80047ac:	f000 faf8 	bl	8004da0 <_gettimeofday_r>
 80047b0:	2800      	cmp	r0, #0
 80047b2:	da05      	bge.n	80047c0 <time+0x20>
 80047b4:	f04f 32ff 	mov.w	r2, #4294967295
 80047b8:	f04f 33ff 	mov.w	r3, #4294967295
 80047bc:	e9cd 2300 	strd	r2, r3, [sp]
 80047c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80047c4:	b10c      	cbz	r4, 80047ca <time+0x2a>
 80047c6:	e9c4 0100 	strd	r0, r1, [r4]
 80047ca:	b004      	add	sp, #16
 80047cc:	bd10      	pop	{r4, pc}
 80047ce:	bf00      	nop
 80047d0:	2000000c 	.word	0x2000000c

080047d4 <__utoa>:
 80047d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047d6:	b08b      	sub	sp, #44	; 0x2c
 80047d8:	4605      	mov	r5, r0
 80047da:	460b      	mov	r3, r1
 80047dc:	466e      	mov	r6, sp
 80047de:	4c1d      	ldr	r4, [pc, #116]	; (8004854 <__utoa+0x80>)
 80047e0:	f104 0c20 	add.w	ip, r4, #32
 80047e4:	4637      	mov	r7, r6
 80047e6:	6820      	ldr	r0, [r4, #0]
 80047e8:	6861      	ldr	r1, [r4, #4]
 80047ea:	3408      	adds	r4, #8
 80047ec:	c703      	stmia	r7!, {r0, r1}
 80047ee:	4564      	cmp	r4, ip
 80047f0:	463e      	mov	r6, r7
 80047f2:	d1f7      	bne.n	80047e4 <__utoa+0x10>
 80047f4:	7921      	ldrb	r1, [r4, #4]
 80047f6:	6820      	ldr	r0, [r4, #0]
 80047f8:	7139      	strb	r1, [r7, #4]
 80047fa:	1e91      	subs	r1, r2, #2
 80047fc:	2922      	cmp	r1, #34	; 0x22
 80047fe:	6038      	str	r0, [r7, #0]
 8004800:	f04f 0100 	mov.w	r1, #0
 8004804:	d904      	bls.n	8004810 <__utoa+0x3c>
 8004806:	7019      	strb	r1, [r3, #0]
 8004808:	460b      	mov	r3, r1
 800480a:	4618      	mov	r0, r3
 800480c:	b00b      	add	sp, #44	; 0x2c
 800480e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004810:	1e58      	subs	r0, r3, #1
 8004812:	4684      	mov	ip, r0
 8004814:	fbb5 f7f2 	udiv	r7, r5, r2
 8004818:	fb02 5617 	mls	r6, r2, r7, r5
 800481c:	3628      	adds	r6, #40	; 0x28
 800481e:	446e      	add	r6, sp
 8004820:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8004824:	460c      	mov	r4, r1
 8004826:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800482a:	462e      	mov	r6, r5
 800482c:	42b2      	cmp	r2, r6
 800482e:	463d      	mov	r5, r7
 8004830:	f101 0101 	add.w	r1, r1, #1
 8004834:	d9ee      	bls.n	8004814 <__utoa+0x40>
 8004836:	2200      	movs	r2, #0
 8004838:	545a      	strb	r2, [r3, r1]
 800483a:	1919      	adds	r1, r3, r4
 800483c:	1aa5      	subs	r5, r4, r2
 800483e:	42aa      	cmp	r2, r5
 8004840:	dae3      	bge.n	800480a <__utoa+0x36>
 8004842:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004846:	780e      	ldrb	r6, [r1, #0]
 8004848:	3201      	adds	r2, #1
 800484a:	7006      	strb	r6, [r0, #0]
 800484c:	f801 5901 	strb.w	r5, [r1], #-1
 8004850:	e7f4      	b.n	800483c <__utoa+0x68>
 8004852:	bf00      	nop
 8004854:	080060a2 	.word	0x080060a2

08004858 <__swbuf_r>:
 8004858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485a:	460e      	mov	r6, r1
 800485c:	4614      	mov	r4, r2
 800485e:	4605      	mov	r5, r0
 8004860:	b118      	cbz	r0, 800486a <__swbuf_r+0x12>
 8004862:	6983      	ldr	r3, [r0, #24]
 8004864:	b90b      	cbnz	r3, 800486a <__swbuf_r+0x12>
 8004866:	f000 f9eb 	bl	8004c40 <__sinit>
 800486a:	4b21      	ldr	r3, [pc, #132]	; (80048f0 <__swbuf_r+0x98>)
 800486c:	429c      	cmp	r4, r3
 800486e:	d12b      	bne.n	80048c8 <__swbuf_r+0x70>
 8004870:	686c      	ldr	r4, [r5, #4]
 8004872:	69a3      	ldr	r3, [r4, #24]
 8004874:	60a3      	str	r3, [r4, #8]
 8004876:	89a3      	ldrh	r3, [r4, #12]
 8004878:	071a      	lsls	r2, r3, #28
 800487a:	d52f      	bpl.n	80048dc <__swbuf_r+0x84>
 800487c:	6923      	ldr	r3, [r4, #16]
 800487e:	b36b      	cbz	r3, 80048dc <__swbuf_r+0x84>
 8004880:	6923      	ldr	r3, [r4, #16]
 8004882:	6820      	ldr	r0, [r4, #0]
 8004884:	b2f6      	uxtb	r6, r6
 8004886:	1ac0      	subs	r0, r0, r3
 8004888:	6963      	ldr	r3, [r4, #20]
 800488a:	4637      	mov	r7, r6
 800488c:	4283      	cmp	r3, r0
 800488e:	dc04      	bgt.n	800489a <__swbuf_r+0x42>
 8004890:	4621      	mov	r1, r4
 8004892:	4628      	mov	r0, r5
 8004894:	f000 f940 	bl	8004b18 <_fflush_r>
 8004898:	bb30      	cbnz	r0, 80048e8 <__swbuf_r+0x90>
 800489a:	68a3      	ldr	r3, [r4, #8]
 800489c:	3001      	adds	r0, #1
 800489e:	3b01      	subs	r3, #1
 80048a0:	60a3      	str	r3, [r4, #8]
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	1c5a      	adds	r2, r3, #1
 80048a6:	6022      	str	r2, [r4, #0]
 80048a8:	701e      	strb	r6, [r3, #0]
 80048aa:	6963      	ldr	r3, [r4, #20]
 80048ac:	4283      	cmp	r3, r0
 80048ae:	d004      	beq.n	80048ba <__swbuf_r+0x62>
 80048b0:	89a3      	ldrh	r3, [r4, #12]
 80048b2:	07db      	lsls	r3, r3, #31
 80048b4:	d506      	bpl.n	80048c4 <__swbuf_r+0x6c>
 80048b6:	2e0a      	cmp	r6, #10
 80048b8:	d104      	bne.n	80048c4 <__swbuf_r+0x6c>
 80048ba:	4621      	mov	r1, r4
 80048bc:	4628      	mov	r0, r5
 80048be:	f000 f92b 	bl	8004b18 <_fflush_r>
 80048c2:	b988      	cbnz	r0, 80048e8 <__swbuf_r+0x90>
 80048c4:	4638      	mov	r0, r7
 80048c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048c8:	4b0a      	ldr	r3, [pc, #40]	; (80048f4 <__swbuf_r+0x9c>)
 80048ca:	429c      	cmp	r4, r3
 80048cc:	d101      	bne.n	80048d2 <__swbuf_r+0x7a>
 80048ce:	68ac      	ldr	r4, [r5, #8]
 80048d0:	e7cf      	b.n	8004872 <__swbuf_r+0x1a>
 80048d2:	4b09      	ldr	r3, [pc, #36]	; (80048f8 <__swbuf_r+0xa0>)
 80048d4:	429c      	cmp	r4, r3
 80048d6:	bf08      	it	eq
 80048d8:	68ec      	ldreq	r4, [r5, #12]
 80048da:	e7ca      	b.n	8004872 <__swbuf_r+0x1a>
 80048dc:	4621      	mov	r1, r4
 80048de:	4628      	mov	r0, r5
 80048e0:	f000 f80c 	bl	80048fc <__swsetup_r>
 80048e4:	2800      	cmp	r0, #0
 80048e6:	d0cb      	beq.n	8004880 <__swbuf_r+0x28>
 80048e8:	f04f 37ff 	mov.w	r7, #4294967295
 80048ec:	e7ea      	b.n	80048c4 <__swbuf_r+0x6c>
 80048ee:	bf00      	nop
 80048f0:	08006224 	.word	0x08006224
 80048f4:	08006244 	.word	0x08006244
 80048f8:	08006204 	.word	0x08006204

080048fc <__swsetup_r>:
 80048fc:	4b32      	ldr	r3, [pc, #200]	; (80049c8 <__swsetup_r+0xcc>)
 80048fe:	b570      	push	{r4, r5, r6, lr}
 8004900:	681d      	ldr	r5, [r3, #0]
 8004902:	4606      	mov	r6, r0
 8004904:	460c      	mov	r4, r1
 8004906:	b125      	cbz	r5, 8004912 <__swsetup_r+0x16>
 8004908:	69ab      	ldr	r3, [r5, #24]
 800490a:	b913      	cbnz	r3, 8004912 <__swsetup_r+0x16>
 800490c:	4628      	mov	r0, r5
 800490e:	f000 f997 	bl	8004c40 <__sinit>
 8004912:	4b2e      	ldr	r3, [pc, #184]	; (80049cc <__swsetup_r+0xd0>)
 8004914:	429c      	cmp	r4, r3
 8004916:	d10f      	bne.n	8004938 <__swsetup_r+0x3c>
 8004918:	686c      	ldr	r4, [r5, #4]
 800491a:	89a3      	ldrh	r3, [r4, #12]
 800491c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004920:	0719      	lsls	r1, r3, #28
 8004922:	d42c      	bmi.n	800497e <__swsetup_r+0x82>
 8004924:	06dd      	lsls	r5, r3, #27
 8004926:	d411      	bmi.n	800494c <__swsetup_r+0x50>
 8004928:	2309      	movs	r3, #9
 800492a:	6033      	str	r3, [r6, #0]
 800492c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004930:	f04f 30ff 	mov.w	r0, #4294967295
 8004934:	81a3      	strh	r3, [r4, #12]
 8004936:	e03e      	b.n	80049b6 <__swsetup_r+0xba>
 8004938:	4b25      	ldr	r3, [pc, #148]	; (80049d0 <__swsetup_r+0xd4>)
 800493a:	429c      	cmp	r4, r3
 800493c:	d101      	bne.n	8004942 <__swsetup_r+0x46>
 800493e:	68ac      	ldr	r4, [r5, #8]
 8004940:	e7eb      	b.n	800491a <__swsetup_r+0x1e>
 8004942:	4b24      	ldr	r3, [pc, #144]	; (80049d4 <__swsetup_r+0xd8>)
 8004944:	429c      	cmp	r4, r3
 8004946:	bf08      	it	eq
 8004948:	68ec      	ldreq	r4, [r5, #12]
 800494a:	e7e6      	b.n	800491a <__swsetup_r+0x1e>
 800494c:	0758      	lsls	r0, r3, #29
 800494e:	d512      	bpl.n	8004976 <__swsetup_r+0x7a>
 8004950:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004952:	b141      	cbz	r1, 8004966 <__swsetup_r+0x6a>
 8004954:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004958:	4299      	cmp	r1, r3
 800495a:	d002      	beq.n	8004962 <__swsetup_r+0x66>
 800495c:	4630      	mov	r0, r6
 800495e:	f000 faa1 	bl	8004ea4 <_free_r>
 8004962:	2300      	movs	r3, #0
 8004964:	6363      	str	r3, [r4, #52]	; 0x34
 8004966:	89a3      	ldrh	r3, [r4, #12]
 8004968:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800496c:	81a3      	strh	r3, [r4, #12]
 800496e:	2300      	movs	r3, #0
 8004970:	6063      	str	r3, [r4, #4]
 8004972:	6923      	ldr	r3, [r4, #16]
 8004974:	6023      	str	r3, [r4, #0]
 8004976:	89a3      	ldrh	r3, [r4, #12]
 8004978:	f043 0308 	orr.w	r3, r3, #8
 800497c:	81a3      	strh	r3, [r4, #12]
 800497e:	6923      	ldr	r3, [r4, #16]
 8004980:	b94b      	cbnz	r3, 8004996 <__swsetup_r+0x9a>
 8004982:	89a3      	ldrh	r3, [r4, #12]
 8004984:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800498c:	d003      	beq.n	8004996 <__swsetup_r+0x9a>
 800498e:	4621      	mov	r1, r4
 8004990:	4630      	mov	r0, r6
 8004992:	f000 fa3f 	bl	8004e14 <__smakebuf_r>
 8004996:	89a0      	ldrh	r0, [r4, #12]
 8004998:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800499c:	f010 0301 	ands.w	r3, r0, #1
 80049a0:	d00a      	beq.n	80049b8 <__swsetup_r+0xbc>
 80049a2:	2300      	movs	r3, #0
 80049a4:	60a3      	str	r3, [r4, #8]
 80049a6:	6963      	ldr	r3, [r4, #20]
 80049a8:	425b      	negs	r3, r3
 80049aa:	61a3      	str	r3, [r4, #24]
 80049ac:	6923      	ldr	r3, [r4, #16]
 80049ae:	b943      	cbnz	r3, 80049c2 <__swsetup_r+0xc6>
 80049b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80049b4:	d1ba      	bne.n	800492c <__swsetup_r+0x30>
 80049b6:	bd70      	pop	{r4, r5, r6, pc}
 80049b8:	0781      	lsls	r1, r0, #30
 80049ba:	bf58      	it	pl
 80049bc:	6963      	ldrpl	r3, [r4, #20]
 80049be:	60a3      	str	r3, [r4, #8]
 80049c0:	e7f4      	b.n	80049ac <__swsetup_r+0xb0>
 80049c2:	2000      	movs	r0, #0
 80049c4:	e7f7      	b.n	80049b6 <__swsetup_r+0xba>
 80049c6:	bf00      	nop
 80049c8:	2000000c 	.word	0x2000000c
 80049cc:	08006224 	.word	0x08006224
 80049d0:	08006244 	.word	0x08006244
 80049d4:	08006204 	.word	0x08006204

080049d8 <__assert_func>:
 80049d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80049da:	4614      	mov	r4, r2
 80049dc:	461a      	mov	r2, r3
 80049de:	4b09      	ldr	r3, [pc, #36]	; (8004a04 <__assert_func+0x2c>)
 80049e0:	4605      	mov	r5, r0
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68d8      	ldr	r0, [r3, #12]
 80049e6:	b14c      	cbz	r4, 80049fc <__assert_func+0x24>
 80049e8:	4b07      	ldr	r3, [pc, #28]	; (8004a08 <__assert_func+0x30>)
 80049ea:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80049ee:	9100      	str	r1, [sp, #0]
 80049f0:	462b      	mov	r3, r5
 80049f2:	4906      	ldr	r1, [pc, #24]	; (8004a0c <__assert_func+0x34>)
 80049f4:	f000 f9a2 	bl	8004d3c <fiprintf>
 80049f8:	f000 fe84 	bl	8005704 <abort>
 80049fc:	4b04      	ldr	r3, [pc, #16]	; (8004a10 <__assert_func+0x38>)
 80049fe:	461c      	mov	r4, r3
 8004a00:	e7f3      	b.n	80049ea <__assert_func+0x12>
 8004a02:	bf00      	nop
 8004a04:	2000000c 	.word	0x2000000c
 8004a08:	080060c7 	.word	0x080060c7
 8004a0c:	080060d4 	.word	0x080060d4
 8004a10:	08006102 	.word	0x08006102

08004a14 <__sflush_r>:
 8004a14:	898a      	ldrh	r2, [r1, #12]
 8004a16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a18:	4605      	mov	r5, r0
 8004a1a:	0710      	lsls	r0, r2, #28
 8004a1c:	460c      	mov	r4, r1
 8004a1e:	d457      	bmi.n	8004ad0 <__sflush_r+0xbc>
 8004a20:	684b      	ldr	r3, [r1, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	dc04      	bgt.n	8004a30 <__sflush_r+0x1c>
 8004a26:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	dc01      	bgt.n	8004a30 <__sflush_r+0x1c>
 8004a2c:	2000      	movs	r0, #0
 8004a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a32:	2e00      	cmp	r6, #0
 8004a34:	d0fa      	beq.n	8004a2c <__sflush_r+0x18>
 8004a36:	2300      	movs	r3, #0
 8004a38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004a3c:	682f      	ldr	r7, [r5, #0]
 8004a3e:	602b      	str	r3, [r5, #0]
 8004a40:	d032      	beq.n	8004aa8 <__sflush_r+0x94>
 8004a42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a44:	89a3      	ldrh	r3, [r4, #12]
 8004a46:	075a      	lsls	r2, r3, #29
 8004a48:	d505      	bpl.n	8004a56 <__sflush_r+0x42>
 8004a4a:	6863      	ldr	r3, [r4, #4]
 8004a4c:	1ac0      	subs	r0, r0, r3
 8004a4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a50:	b10b      	cbz	r3, 8004a56 <__sflush_r+0x42>
 8004a52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a54:	1ac0      	subs	r0, r0, r3
 8004a56:	2300      	movs	r3, #0
 8004a58:	4602      	mov	r2, r0
 8004a5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a5c:	4628      	mov	r0, r5
 8004a5e:	6a21      	ldr	r1, [r4, #32]
 8004a60:	47b0      	blx	r6
 8004a62:	1c43      	adds	r3, r0, #1
 8004a64:	89a3      	ldrh	r3, [r4, #12]
 8004a66:	d106      	bne.n	8004a76 <__sflush_r+0x62>
 8004a68:	6829      	ldr	r1, [r5, #0]
 8004a6a:	291d      	cmp	r1, #29
 8004a6c:	d82c      	bhi.n	8004ac8 <__sflush_r+0xb4>
 8004a6e:	4a29      	ldr	r2, [pc, #164]	; (8004b14 <__sflush_r+0x100>)
 8004a70:	40ca      	lsrs	r2, r1
 8004a72:	07d6      	lsls	r6, r2, #31
 8004a74:	d528      	bpl.n	8004ac8 <__sflush_r+0xb4>
 8004a76:	2200      	movs	r2, #0
 8004a78:	6062      	str	r2, [r4, #4]
 8004a7a:	6922      	ldr	r2, [r4, #16]
 8004a7c:	04d9      	lsls	r1, r3, #19
 8004a7e:	6022      	str	r2, [r4, #0]
 8004a80:	d504      	bpl.n	8004a8c <__sflush_r+0x78>
 8004a82:	1c42      	adds	r2, r0, #1
 8004a84:	d101      	bne.n	8004a8a <__sflush_r+0x76>
 8004a86:	682b      	ldr	r3, [r5, #0]
 8004a88:	b903      	cbnz	r3, 8004a8c <__sflush_r+0x78>
 8004a8a:	6560      	str	r0, [r4, #84]	; 0x54
 8004a8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a8e:	602f      	str	r7, [r5, #0]
 8004a90:	2900      	cmp	r1, #0
 8004a92:	d0cb      	beq.n	8004a2c <__sflush_r+0x18>
 8004a94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a98:	4299      	cmp	r1, r3
 8004a9a:	d002      	beq.n	8004aa2 <__sflush_r+0x8e>
 8004a9c:	4628      	mov	r0, r5
 8004a9e:	f000 fa01 	bl	8004ea4 <_free_r>
 8004aa2:	2000      	movs	r0, #0
 8004aa4:	6360      	str	r0, [r4, #52]	; 0x34
 8004aa6:	e7c2      	b.n	8004a2e <__sflush_r+0x1a>
 8004aa8:	6a21      	ldr	r1, [r4, #32]
 8004aaa:	2301      	movs	r3, #1
 8004aac:	4628      	mov	r0, r5
 8004aae:	47b0      	blx	r6
 8004ab0:	1c41      	adds	r1, r0, #1
 8004ab2:	d1c7      	bne.n	8004a44 <__sflush_r+0x30>
 8004ab4:	682b      	ldr	r3, [r5, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d0c4      	beq.n	8004a44 <__sflush_r+0x30>
 8004aba:	2b1d      	cmp	r3, #29
 8004abc:	d001      	beq.n	8004ac2 <__sflush_r+0xae>
 8004abe:	2b16      	cmp	r3, #22
 8004ac0:	d101      	bne.n	8004ac6 <__sflush_r+0xb2>
 8004ac2:	602f      	str	r7, [r5, #0]
 8004ac4:	e7b2      	b.n	8004a2c <__sflush_r+0x18>
 8004ac6:	89a3      	ldrh	r3, [r4, #12]
 8004ac8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004acc:	81a3      	strh	r3, [r4, #12]
 8004ace:	e7ae      	b.n	8004a2e <__sflush_r+0x1a>
 8004ad0:	690f      	ldr	r7, [r1, #16]
 8004ad2:	2f00      	cmp	r7, #0
 8004ad4:	d0aa      	beq.n	8004a2c <__sflush_r+0x18>
 8004ad6:	0793      	lsls	r3, r2, #30
 8004ad8:	bf18      	it	ne
 8004ada:	2300      	movne	r3, #0
 8004adc:	680e      	ldr	r6, [r1, #0]
 8004ade:	bf08      	it	eq
 8004ae0:	694b      	ldreq	r3, [r1, #20]
 8004ae2:	1bf6      	subs	r6, r6, r7
 8004ae4:	600f      	str	r7, [r1, #0]
 8004ae6:	608b      	str	r3, [r1, #8]
 8004ae8:	2e00      	cmp	r6, #0
 8004aea:	dd9f      	ble.n	8004a2c <__sflush_r+0x18>
 8004aec:	4633      	mov	r3, r6
 8004aee:	463a      	mov	r2, r7
 8004af0:	4628      	mov	r0, r5
 8004af2:	6a21      	ldr	r1, [r4, #32]
 8004af4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004af8:	47e0      	blx	ip
 8004afa:	2800      	cmp	r0, #0
 8004afc:	dc06      	bgt.n	8004b0c <__sflush_r+0xf8>
 8004afe:	89a3      	ldrh	r3, [r4, #12]
 8004b00:	f04f 30ff 	mov.w	r0, #4294967295
 8004b04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b08:	81a3      	strh	r3, [r4, #12]
 8004b0a:	e790      	b.n	8004a2e <__sflush_r+0x1a>
 8004b0c:	4407      	add	r7, r0
 8004b0e:	1a36      	subs	r6, r6, r0
 8004b10:	e7ea      	b.n	8004ae8 <__sflush_r+0xd4>
 8004b12:	bf00      	nop
 8004b14:	20400001 	.word	0x20400001

08004b18 <_fflush_r>:
 8004b18:	b538      	push	{r3, r4, r5, lr}
 8004b1a:	690b      	ldr	r3, [r1, #16]
 8004b1c:	4605      	mov	r5, r0
 8004b1e:	460c      	mov	r4, r1
 8004b20:	b913      	cbnz	r3, 8004b28 <_fflush_r+0x10>
 8004b22:	2500      	movs	r5, #0
 8004b24:	4628      	mov	r0, r5
 8004b26:	bd38      	pop	{r3, r4, r5, pc}
 8004b28:	b118      	cbz	r0, 8004b32 <_fflush_r+0x1a>
 8004b2a:	6983      	ldr	r3, [r0, #24]
 8004b2c:	b90b      	cbnz	r3, 8004b32 <_fflush_r+0x1a>
 8004b2e:	f000 f887 	bl	8004c40 <__sinit>
 8004b32:	4b14      	ldr	r3, [pc, #80]	; (8004b84 <_fflush_r+0x6c>)
 8004b34:	429c      	cmp	r4, r3
 8004b36:	d11b      	bne.n	8004b70 <_fflush_r+0x58>
 8004b38:	686c      	ldr	r4, [r5, #4]
 8004b3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d0ef      	beq.n	8004b22 <_fflush_r+0xa>
 8004b42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b44:	07d0      	lsls	r0, r2, #31
 8004b46:	d404      	bmi.n	8004b52 <_fflush_r+0x3a>
 8004b48:	0599      	lsls	r1, r3, #22
 8004b4a:	d402      	bmi.n	8004b52 <_fflush_r+0x3a>
 8004b4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b4e:	f000 f93a 	bl	8004dc6 <__retarget_lock_acquire_recursive>
 8004b52:	4628      	mov	r0, r5
 8004b54:	4621      	mov	r1, r4
 8004b56:	f7ff ff5d 	bl	8004a14 <__sflush_r>
 8004b5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b5c:	4605      	mov	r5, r0
 8004b5e:	07da      	lsls	r2, r3, #31
 8004b60:	d4e0      	bmi.n	8004b24 <_fflush_r+0xc>
 8004b62:	89a3      	ldrh	r3, [r4, #12]
 8004b64:	059b      	lsls	r3, r3, #22
 8004b66:	d4dd      	bmi.n	8004b24 <_fflush_r+0xc>
 8004b68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b6a:	f000 f92d 	bl	8004dc8 <__retarget_lock_release_recursive>
 8004b6e:	e7d9      	b.n	8004b24 <_fflush_r+0xc>
 8004b70:	4b05      	ldr	r3, [pc, #20]	; (8004b88 <_fflush_r+0x70>)
 8004b72:	429c      	cmp	r4, r3
 8004b74:	d101      	bne.n	8004b7a <_fflush_r+0x62>
 8004b76:	68ac      	ldr	r4, [r5, #8]
 8004b78:	e7df      	b.n	8004b3a <_fflush_r+0x22>
 8004b7a:	4b04      	ldr	r3, [pc, #16]	; (8004b8c <_fflush_r+0x74>)
 8004b7c:	429c      	cmp	r4, r3
 8004b7e:	bf08      	it	eq
 8004b80:	68ec      	ldreq	r4, [r5, #12]
 8004b82:	e7da      	b.n	8004b3a <_fflush_r+0x22>
 8004b84:	08006224 	.word	0x08006224
 8004b88:	08006244 	.word	0x08006244
 8004b8c:	08006204 	.word	0x08006204

08004b90 <std>:
 8004b90:	2300      	movs	r3, #0
 8004b92:	b510      	push	{r4, lr}
 8004b94:	4604      	mov	r4, r0
 8004b96:	e9c0 3300 	strd	r3, r3, [r0]
 8004b9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b9e:	6083      	str	r3, [r0, #8]
 8004ba0:	8181      	strh	r1, [r0, #12]
 8004ba2:	6643      	str	r3, [r0, #100]	; 0x64
 8004ba4:	81c2      	strh	r2, [r0, #14]
 8004ba6:	6183      	str	r3, [r0, #24]
 8004ba8:	4619      	mov	r1, r3
 8004baa:	2208      	movs	r2, #8
 8004bac:	305c      	adds	r0, #92	; 0x5c
 8004bae:	f7ff fc41 	bl	8004434 <memset>
 8004bb2:	4b05      	ldr	r3, [pc, #20]	; (8004bc8 <std+0x38>)
 8004bb4:	6224      	str	r4, [r4, #32]
 8004bb6:	6263      	str	r3, [r4, #36]	; 0x24
 8004bb8:	4b04      	ldr	r3, [pc, #16]	; (8004bcc <std+0x3c>)
 8004bba:	62a3      	str	r3, [r4, #40]	; 0x28
 8004bbc:	4b04      	ldr	r3, [pc, #16]	; (8004bd0 <std+0x40>)
 8004bbe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004bc0:	4b04      	ldr	r3, [pc, #16]	; (8004bd4 <std+0x44>)
 8004bc2:	6323      	str	r3, [r4, #48]	; 0x30
 8004bc4:	bd10      	pop	{r4, pc}
 8004bc6:	bf00      	nop
 8004bc8:	08005659 	.word	0x08005659
 8004bcc:	0800567b 	.word	0x0800567b
 8004bd0:	080056b3 	.word	0x080056b3
 8004bd4:	080056d7 	.word	0x080056d7

08004bd8 <_cleanup_r>:
 8004bd8:	4901      	ldr	r1, [pc, #4]	; (8004be0 <_cleanup_r+0x8>)
 8004bda:	f000 b8c1 	b.w	8004d60 <_fwalk_reent>
 8004bde:	bf00      	nop
 8004be0:	08004b19 	.word	0x08004b19

08004be4 <__sfmoreglue>:
 8004be4:	2268      	movs	r2, #104	; 0x68
 8004be6:	b570      	push	{r4, r5, r6, lr}
 8004be8:	1e4d      	subs	r5, r1, #1
 8004bea:	4355      	muls	r5, r2
 8004bec:	460e      	mov	r6, r1
 8004bee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004bf2:	f000 f9bf 	bl	8004f74 <_malloc_r>
 8004bf6:	4604      	mov	r4, r0
 8004bf8:	b140      	cbz	r0, 8004c0c <__sfmoreglue+0x28>
 8004bfa:	2100      	movs	r1, #0
 8004bfc:	e9c0 1600 	strd	r1, r6, [r0]
 8004c00:	300c      	adds	r0, #12
 8004c02:	60a0      	str	r0, [r4, #8]
 8004c04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004c08:	f7ff fc14 	bl	8004434 <memset>
 8004c0c:	4620      	mov	r0, r4
 8004c0e:	bd70      	pop	{r4, r5, r6, pc}

08004c10 <__sfp_lock_acquire>:
 8004c10:	4801      	ldr	r0, [pc, #4]	; (8004c18 <__sfp_lock_acquire+0x8>)
 8004c12:	f000 b8d8 	b.w	8004dc6 <__retarget_lock_acquire_recursive>
 8004c16:	bf00      	nop
 8004c18:	20001211 	.word	0x20001211

08004c1c <__sfp_lock_release>:
 8004c1c:	4801      	ldr	r0, [pc, #4]	; (8004c24 <__sfp_lock_release+0x8>)
 8004c1e:	f000 b8d3 	b.w	8004dc8 <__retarget_lock_release_recursive>
 8004c22:	bf00      	nop
 8004c24:	20001211 	.word	0x20001211

08004c28 <__sinit_lock_acquire>:
 8004c28:	4801      	ldr	r0, [pc, #4]	; (8004c30 <__sinit_lock_acquire+0x8>)
 8004c2a:	f000 b8cc 	b.w	8004dc6 <__retarget_lock_acquire_recursive>
 8004c2e:	bf00      	nop
 8004c30:	20001212 	.word	0x20001212

08004c34 <__sinit_lock_release>:
 8004c34:	4801      	ldr	r0, [pc, #4]	; (8004c3c <__sinit_lock_release+0x8>)
 8004c36:	f000 b8c7 	b.w	8004dc8 <__retarget_lock_release_recursive>
 8004c3a:	bf00      	nop
 8004c3c:	20001212 	.word	0x20001212

08004c40 <__sinit>:
 8004c40:	b510      	push	{r4, lr}
 8004c42:	4604      	mov	r4, r0
 8004c44:	f7ff fff0 	bl	8004c28 <__sinit_lock_acquire>
 8004c48:	69a3      	ldr	r3, [r4, #24]
 8004c4a:	b11b      	cbz	r3, 8004c54 <__sinit+0x14>
 8004c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c50:	f7ff bff0 	b.w	8004c34 <__sinit_lock_release>
 8004c54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004c58:	6523      	str	r3, [r4, #80]	; 0x50
 8004c5a:	4b13      	ldr	r3, [pc, #76]	; (8004ca8 <__sinit+0x68>)
 8004c5c:	4a13      	ldr	r2, [pc, #76]	; (8004cac <__sinit+0x6c>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	62a2      	str	r2, [r4, #40]	; 0x28
 8004c62:	42a3      	cmp	r3, r4
 8004c64:	bf08      	it	eq
 8004c66:	2301      	moveq	r3, #1
 8004c68:	4620      	mov	r0, r4
 8004c6a:	bf08      	it	eq
 8004c6c:	61a3      	streq	r3, [r4, #24]
 8004c6e:	f000 f81f 	bl	8004cb0 <__sfp>
 8004c72:	6060      	str	r0, [r4, #4]
 8004c74:	4620      	mov	r0, r4
 8004c76:	f000 f81b 	bl	8004cb0 <__sfp>
 8004c7a:	60a0      	str	r0, [r4, #8]
 8004c7c:	4620      	mov	r0, r4
 8004c7e:	f000 f817 	bl	8004cb0 <__sfp>
 8004c82:	2200      	movs	r2, #0
 8004c84:	2104      	movs	r1, #4
 8004c86:	60e0      	str	r0, [r4, #12]
 8004c88:	6860      	ldr	r0, [r4, #4]
 8004c8a:	f7ff ff81 	bl	8004b90 <std>
 8004c8e:	2201      	movs	r2, #1
 8004c90:	2109      	movs	r1, #9
 8004c92:	68a0      	ldr	r0, [r4, #8]
 8004c94:	f7ff ff7c 	bl	8004b90 <std>
 8004c98:	2202      	movs	r2, #2
 8004c9a:	2112      	movs	r1, #18
 8004c9c:	68e0      	ldr	r0, [r4, #12]
 8004c9e:	f7ff ff77 	bl	8004b90 <std>
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	61a3      	str	r3, [r4, #24]
 8004ca6:	e7d1      	b.n	8004c4c <__sinit+0xc>
 8004ca8:	0800602c 	.word	0x0800602c
 8004cac:	08004bd9 	.word	0x08004bd9

08004cb0 <__sfp>:
 8004cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cb2:	4607      	mov	r7, r0
 8004cb4:	f7ff ffac 	bl	8004c10 <__sfp_lock_acquire>
 8004cb8:	4b1e      	ldr	r3, [pc, #120]	; (8004d34 <__sfp+0x84>)
 8004cba:	681e      	ldr	r6, [r3, #0]
 8004cbc:	69b3      	ldr	r3, [r6, #24]
 8004cbe:	b913      	cbnz	r3, 8004cc6 <__sfp+0x16>
 8004cc0:	4630      	mov	r0, r6
 8004cc2:	f7ff ffbd 	bl	8004c40 <__sinit>
 8004cc6:	3648      	adds	r6, #72	; 0x48
 8004cc8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	d503      	bpl.n	8004cd8 <__sfp+0x28>
 8004cd0:	6833      	ldr	r3, [r6, #0]
 8004cd2:	b30b      	cbz	r3, 8004d18 <__sfp+0x68>
 8004cd4:	6836      	ldr	r6, [r6, #0]
 8004cd6:	e7f7      	b.n	8004cc8 <__sfp+0x18>
 8004cd8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004cdc:	b9d5      	cbnz	r5, 8004d14 <__sfp+0x64>
 8004cde:	4b16      	ldr	r3, [pc, #88]	; (8004d38 <__sfp+0x88>)
 8004ce0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004ce4:	60e3      	str	r3, [r4, #12]
 8004ce6:	6665      	str	r5, [r4, #100]	; 0x64
 8004ce8:	f000 f86c 	bl	8004dc4 <__retarget_lock_init_recursive>
 8004cec:	f7ff ff96 	bl	8004c1c <__sfp_lock_release>
 8004cf0:	2208      	movs	r2, #8
 8004cf2:	4629      	mov	r1, r5
 8004cf4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004cf8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004cfc:	6025      	str	r5, [r4, #0]
 8004cfe:	61a5      	str	r5, [r4, #24]
 8004d00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004d04:	f7ff fb96 	bl	8004434 <memset>
 8004d08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004d0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004d10:	4620      	mov	r0, r4
 8004d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d14:	3468      	adds	r4, #104	; 0x68
 8004d16:	e7d9      	b.n	8004ccc <__sfp+0x1c>
 8004d18:	2104      	movs	r1, #4
 8004d1a:	4638      	mov	r0, r7
 8004d1c:	f7ff ff62 	bl	8004be4 <__sfmoreglue>
 8004d20:	4604      	mov	r4, r0
 8004d22:	6030      	str	r0, [r6, #0]
 8004d24:	2800      	cmp	r0, #0
 8004d26:	d1d5      	bne.n	8004cd4 <__sfp+0x24>
 8004d28:	f7ff ff78 	bl	8004c1c <__sfp_lock_release>
 8004d2c:	230c      	movs	r3, #12
 8004d2e:	603b      	str	r3, [r7, #0]
 8004d30:	e7ee      	b.n	8004d10 <__sfp+0x60>
 8004d32:	bf00      	nop
 8004d34:	0800602c 	.word	0x0800602c
 8004d38:	ffff0001 	.word	0xffff0001

08004d3c <fiprintf>:
 8004d3c:	b40e      	push	{r1, r2, r3}
 8004d3e:	b503      	push	{r0, r1, lr}
 8004d40:	4601      	mov	r1, r0
 8004d42:	ab03      	add	r3, sp, #12
 8004d44:	4805      	ldr	r0, [pc, #20]	; (8004d5c <fiprintf+0x20>)
 8004d46:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d4a:	6800      	ldr	r0, [r0, #0]
 8004d4c:	9301      	str	r3, [sp, #4]
 8004d4e:	f000 f9ad 	bl	80050ac <_vfiprintf_r>
 8004d52:	b002      	add	sp, #8
 8004d54:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d58:	b003      	add	sp, #12
 8004d5a:	4770      	bx	lr
 8004d5c:	2000000c 	.word	0x2000000c

08004d60 <_fwalk_reent>:
 8004d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d64:	4606      	mov	r6, r0
 8004d66:	4688      	mov	r8, r1
 8004d68:	2700      	movs	r7, #0
 8004d6a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004d6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d72:	f1b9 0901 	subs.w	r9, r9, #1
 8004d76:	d505      	bpl.n	8004d84 <_fwalk_reent+0x24>
 8004d78:	6824      	ldr	r4, [r4, #0]
 8004d7a:	2c00      	cmp	r4, #0
 8004d7c:	d1f7      	bne.n	8004d6e <_fwalk_reent+0xe>
 8004d7e:	4638      	mov	r0, r7
 8004d80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d84:	89ab      	ldrh	r3, [r5, #12]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d907      	bls.n	8004d9a <_fwalk_reent+0x3a>
 8004d8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d8e:	3301      	adds	r3, #1
 8004d90:	d003      	beq.n	8004d9a <_fwalk_reent+0x3a>
 8004d92:	4629      	mov	r1, r5
 8004d94:	4630      	mov	r0, r6
 8004d96:	47c0      	blx	r8
 8004d98:	4307      	orrs	r7, r0
 8004d9a:	3568      	adds	r5, #104	; 0x68
 8004d9c:	e7e9      	b.n	8004d72 <_fwalk_reent+0x12>
	...

08004da0 <_gettimeofday_r>:
 8004da0:	b538      	push	{r3, r4, r5, lr}
 8004da2:	2300      	movs	r3, #0
 8004da4:	4d06      	ldr	r5, [pc, #24]	; (8004dc0 <_gettimeofday_r+0x20>)
 8004da6:	4604      	mov	r4, r0
 8004da8:	4608      	mov	r0, r1
 8004daa:	4611      	mov	r1, r2
 8004dac:	602b      	str	r3, [r5, #0]
 8004dae:	f000 fd65 	bl	800587c <_gettimeofday>
 8004db2:	1c43      	adds	r3, r0, #1
 8004db4:	d102      	bne.n	8004dbc <_gettimeofday_r+0x1c>
 8004db6:	682b      	ldr	r3, [r5, #0]
 8004db8:	b103      	cbz	r3, 8004dbc <_gettimeofday_r+0x1c>
 8004dba:	6023      	str	r3, [r4, #0]
 8004dbc:	bd38      	pop	{r3, r4, r5, pc}
 8004dbe:	bf00      	nop
 8004dc0:	2000121c 	.word	0x2000121c

08004dc4 <__retarget_lock_init_recursive>:
 8004dc4:	4770      	bx	lr

08004dc6 <__retarget_lock_acquire_recursive>:
 8004dc6:	4770      	bx	lr

08004dc8 <__retarget_lock_release_recursive>:
 8004dc8:	4770      	bx	lr

08004dca <__swhatbuf_r>:
 8004dca:	b570      	push	{r4, r5, r6, lr}
 8004dcc:	460e      	mov	r6, r1
 8004dce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dd2:	4614      	mov	r4, r2
 8004dd4:	2900      	cmp	r1, #0
 8004dd6:	461d      	mov	r5, r3
 8004dd8:	b096      	sub	sp, #88	; 0x58
 8004dda:	da08      	bge.n	8004dee <__swhatbuf_r+0x24>
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004de2:	602a      	str	r2, [r5, #0]
 8004de4:	061a      	lsls	r2, r3, #24
 8004de6:	d410      	bmi.n	8004e0a <__swhatbuf_r+0x40>
 8004de8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dec:	e00e      	b.n	8004e0c <__swhatbuf_r+0x42>
 8004dee:	466a      	mov	r2, sp
 8004df0:	f000 fca0 	bl	8005734 <_fstat_r>
 8004df4:	2800      	cmp	r0, #0
 8004df6:	dbf1      	blt.n	8004ddc <__swhatbuf_r+0x12>
 8004df8:	9a01      	ldr	r2, [sp, #4]
 8004dfa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004dfe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004e02:	425a      	negs	r2, r3
 8004e04:	415a      	adcs	r2, r3
 8004e06:	602a      	str	r2, [r5, #0]
 8004e08:	e7ee      	b.n	8004de8 <__swhatbuf_r+0x1e>
 8004e0a:	2340      	movs	r3, #64	; 0x40
 8004e0c:	2000      	movs	r0, #0
 8004e0e:	6023      	str	r3, [r4, #0]
 8004e10:	b016      	add	sp, #88	; 0x58
 8004e12:	bd70      	pop	{r4, r5, r6, pc}

08004e14 <__smakebuf_r>:
 8004e14:	898b      	ldrh	r3, [r1, #12]
 8004e16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e18:	079d      	lsls	r5, r3, #30
 8004e1a:	4606      	mov	r6, r0
 8004e1c:	460c      	mov	r4, r1
 8004e1e:	d507      	bpl.n	8004e30 <__smakebuf_r+0x1c>
 8004e20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004e24:	6023      	str	r3, [r4, #0]
 8004e26:	6123      	str	r3, [r4, #16]
 8004e28:	2301      	movs	r3, #1
 8004e2a:	6163      	str	r3, [r4, #20]
 8004e2c:	b002      	add	sp, #8
 8004e2e:	bd70      	pop	{r4, r5, r6, pc}
 8004e30:	466a      	mov	r2, sp
 8004e32:	ab01      	add	r3, sp, #4
 8004e34:	f7ff ffc9 	bl	8004dca <__swhatbuf_r>
 8004e38:	9900      	ldr	r1, [sp, #0]
 8004e3a:	4605      	mov	r5, r0
 8004e3c:	4630      	mov	r0, r6
 8004e3e:	f000 f899 	bl	8004f74 <_malloc_r>
 8004e42:	b948      	cbnz	r0, 8004e58 <__smakebuf_r+0x44>
 8004e44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e48:	059a      	lsls	r2, r3, #22
 8004e4a:	d4ef      	bmi.n	8004e2c <__smakebuf_r+0x18>
 8004e4c:	f023 0303 	bic.w	r3, r3, #3
 8004e50:	f043 0302 	orr.w	r3, r3, #2
 8004e54:	81a3      	strh	r3, [r4, #12]
 8004e56:	e7e3      	b.n	8004e20 <__smakebuf_r+0xc>
 8004e58:	4b0d      	ldr	r3, [pc, #52]	; (8004e90 <__smakebuf_r+0x7c>)
 8004e5a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004e5c:	89a3      	ldrh	r3, [r4, #12]
 8004e5e:	6020      	str	r0, [r4, #0]
 8004e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e64:	81a3      	strh	r3, [r4, #12]
 8004e66:	9b00      	ldr	r3, [sp, #0]
 8004e68:	6120      	str	r0, [r4, #16]
 8004e6a:	6163      	str	r3, [r4, #20]
 8004e6c:	9b01      	ldr	r3, [sp, #4]
 8004e6e:	b15b      	cbz	r3, 8004e88 <__smakebuf_r+0x74>
 8004e70:	4630      	mov	r0, r6
 8004e72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e76:	f000 fc6f 	bl	8005758 <_isatty_r>
 8004e7a:	b128      	cbz	r0, 8004e88 <__smakebuf_r+0x74>
 8004e7c:	89a3      	ldrh	r3, [r4, #12]
 8004e7e:	f023 0303 	bic.w	r3, r3, #3
 8004e82:	f043 0301 	orr.w	r3, r3, #1
 8004e86:	81a3      	strh	r3, [r4, #12]
 8004e88:	89a0      	ldrh	r0, [r4, #12]
 8004e8a:	4305      	orrs	r5, r0
 8004e8c:	81a5      	strh	r5, [r4, #12]
 8004e8e:	e7cd      	b.n	8004e2c <__smakebuf_r+0x18>
 8004e90:	08004bd9 	.word	0x08004bd9

08004e94 <malloc>:
 8004e94:	4b02      	ldr	r3, [pc, #8]	; (8004ea0 <malloc+0xc>)
 8004e96:	4601      	mov	r1, r0
 8004e98:	6818      	ldr	r0, [r3, #0]
 8004e9a:	f000 b86b 	b.w	8004f74 <_malloc_r>
 8004e9e:	bf00      	nop
 8004ea0:	2000000c 	.word	0x2000000c

08004ea4 <_free_r>:
 8004ea4:	b538      	push	{r3, r4, r5, lr}
 8004ea6:	4605      	mov	r5, r0
 8004ea8:	2900      	cmp	r1, #0
 8004eaa:	d040      	beq.n	8004f2e <_free_r+0x8a>
 8004eac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004eb0:	1f0c      	subs	r4, r1, #4
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	bfb8      	it	lt
 8004eb6:	18e4      	addlt	r4, r4, r3
 8004eb8:	f000 fc7e 	bl	80057b8 <__malloc_lock>
 8004ebc:	4a1c      	ldr	r2, [pc, #112]	; (8004f30 <_free_r+0x8c>)
 8004ebe:	6813      	ldr	r3, [r2, #0]
 8004ec0:	b933      	cbnz	r3, 8004ed0 <_free_r+0x2c>
 8004ec2:	6063      	str	r3, [r4, #4]
 8004ec4:	6014      	str	r4, [r2, #0]
 8004ec6:	4628      	mov	r0, r5
 8004ec8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ecc:	f000 bc7a 	b.w	80057c4 <__malloc_unlock>
 8004ed0:	42a3      	cmp	r3, r4
 8004ed2:	d908      	bls.n	8004ee6 <_free_r+0x42>
 8004ed4:	6820      	ldr	r0, [r4, #0]
 8004ed6:	1821      	adds	r1, r4, r0
 8004ed8:	428b      	cmp	r3, r1
 8004eda:	bf01      	itttt	eq
 8004edc:	6819      	ldreq	r1, [r3, #0]
 8004ede:	685b      	ldreq	r3, [r3, #4]
 8004ee0:	1809      	addeq	r1, r1, r0
 8004ee2:	6021      	streq	r1, [r4, #0]
 8004ee4:	e7ed      	b.n	8004ec2 <_free_r+0x1e>
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	b10b      	cbz	r3, 8004ef0 <_free_r+0x4c>
 8004eec:	42a3      	cmp	r3, r4
 8004eee:	d9fa      	bls.n	8004ee6 <_free_r+0x42>
 8004ef0:	6811      	ldr	r1, [r2, #0]
 8004ef2:	1850      	adds	r0, r2, r1
 8004ef4:	42a0      	cmp	r0, r4
 8004ef6:	d10b      	bne.n	8004f10 <_free_r+0x6c>
 8004ef8:	6820      	ldr	r0, [r4, #0]
 8004efa:	4401      	add	r1, r0
 8004efc:	1850      	adds	r0, r2, r1
 8004efe:	4283      	cmp	r3, r0
 8004f00:	6011      	str	r1, [r2, #0]
 8004f02:	d1e0      	bne.n	8004ec6 <_free_r+0x22>
 8004f04:	6818      	ldr	r0, [r3, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	4401      	add	r1, r0
 8004f0a:	6011      	str	r1, [r2, #0]
 8004f0c:	6053      	str	r3, [r2, #4]
 8004f0e:	e7da      	b.n	8004ec6 <_free_r+0x22>
 8004f10:	d902      	bls.n	8004f18 <_free_r+0x74>
 8004f12:	230c      	movs	r3, #12
 8004f14:	602b      	str	r3, [r5, #0]
 8004f16:	e7d6      	b.n	8004ec6 <_free_r+0x22>
 8004f18:	6820      	ldr	r0, [r4, #0]
 8004f1a:	1821      	adds	r1, r4, r0
 8004f1c:	428b      	cmp	r3, r1
 8004f1e:	bf01      	itttt	eq
 8004f20:	6819      	ldreq	r1, [r3, #0]
 8004f22:	685b      	ldreq	r3, [r3, #4]
 8004f24:	1809      	addeq	r1, r1, r0
 8004f26:	6021      	streq	r1, [r4, #0]
 8004f28:	6063      	str	r3, [r4, #4]
 8004f2a:	6054      	str	r4, [r2, #4]
 8004f2c:	e7cb      	b.n	8004ec6 <_free_r+0x22>
 8004f2e:	bd38      	pop	{r3, r4, r5, pc}
 8004f30:	20001214 	.word	0x20001214

08004f34 <sbrk_aligned>:
 8004f34:	b570      	push	{r4, r5, r6, lr}
 8004f36:	4e0e      	ldr	r6, [pc, #56]	; (8004f70 <sbrk_aligned+0x3c>)
 8004f38:	460c      	mov	r4, r1
 8004f3a:	6831      	ldr	r1, [r6, #0]
 8004f3c:	4605      	mov	r5, r0
 8004f3e:	b911      	cbnz	r1, 8004f46 <sbrk_aligned+0x12>
 8004f40:	f000 fb7a 	bl	8005638 <_sbrk_r>
 8004f44:	6030      	str	r0, [r6, #0]
 8004f46:	4621      	mov	r1, r4
 8004f48:	4628      	mov	r0, r5
 8004f4a:	f000 fb75 	bl	8005638 <_sbrk_r>
 8004f4e:	1c43      	adds	r3, r0, #1
 8004f50:	d00a      	beq.n	8004f68 <sbrk_aligned+0x34>
 8004f52:	1cc4      	adds	r4, r0, #3
 8004f54:	f024 0403 	bic.w	r4, r4, #3
 8004f58:	42a0      	cmp	r0, r4
 8004f5a:	d007      	beq.n	8004f6c <sbrk_aligned+0x38>
 8004f5c:	1a21      	subs	r1, r4, r0
 8004f5e:	4628      	mov	r0, r5
 8004f60:	f000 fb6a 	bl	8005638 <_sbrk_r>
 8004f64:	3001      	adds	r0, #1
 8004f66:	d101      	bne.n	8004f6c <sbrk_aligned+0x38>
 8004f68:	f04f 34ff 	mov.w	r4, #4294967295
 8004f6c:	4620      	mov	r0, r4
 8004f6e:	bd70      	pop	{r4, r5, r6, pc}
 8004f70:	20001218 	.word	0x20001218

08004f74 <_malloc_r>:
 8004f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f78:	1ccd      	adds	r5, r1, #3
 8004f7a:	f025 0503 	bic.w	r5, r5, #3
 8004f7e:	3508      	adds	r5, #8
 8004f80:	2d0c      	cmp	r5, #12
 8004f82:	bf38      	it	cc
 8004f84:	250c      	movcc	r5, #12
 8004f86:	2d00      	cmp	r5, #0
 8004f88:	4607      	mov	r7, r0
 8004f8a:	db01      	blt.n	8004f90 <_malloc_r+0x1c>
 8004f8c:	42a9      	cmp	r1, r5
 8004f8e:	d905      	bls.n	8004f9c <_malloc_r+0x28>
 8004f90:	230c      	movs	r3, #12
 8004f92:	2600      	movs	r6, #0
 8004f94:	603b      	str	r3, [r7, #0]
 8004f96:	4630      	mov	r0, r6
 8004f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f9c:	4e2e      	ldr	r6, [pc, #184]	; (8005058 <_malloc_r+0xe4>)
 8004f9e:	f000 fc0b 	bl	80057b8 <__malloc_lock>
 8004fa2:	6833      	ldr	r3, [r6, #0]
 8004fa4:	461c      	mov	r4, r3
 8004fa6:	bb34      	cbnz	r4, 8004ff6 <_malloc_r+0x82>
 8004fa8:	4629      	mov	r1, r5
 8004faa:	4638      	mov	r0, r7
 8004fac:	f7ff ffc2 	bl	8004f34 <sbrk_aligned>
 8004fb0:	1c43      	adds	r3, r0, #1
 8004fb2:	4604      	mov	r4, r0
 8004fb4:	d14d      	bne.n	8005052 <_malloc_r+0xde>
 8004fb6:	6834      	ldr	r4, [r6, #0]
 8004fb8:	4626      	mov	r6, r4
 8004fba:	2e00      	cmp	r6, #0
 8004fbc:	d140      	bne.n	8005040 <_malloc_r+0xcc>
 8004fbe:	6823      	ldr	r3, [r4, #0]
 8004fc0:	4631      	mov	r1, r6
 8004fc2:	4638      	mov	r0, r7
 8004fc4:	eb04 0803 	add.w	r8, r4, r3
 8004fc8:	f000 fb36 	bl	8005638 <_sbrk_r>
 8004fcc:	4580      	cmp	r8, r0
 8004fce:	d13a      	bne.n	8005046 <_malloc_r+0xd2>
 8004fd0:	6821      	ldr	r1, [r4, #0]
 8004fd2:	3503      	adds	r5, #3
 8004fd4:	1a6d      	subs	r5, r5, r1
 8004fd6:	f025 0503 	bic.w	r5, r5, #3
 8004fda:	3508      	adds	r5, #8
 8004fdc:	2d0c      	cmp	r5, #12
 8004fde:	bf38      	it	cc
 8004fe0:	250c      	movcc	r5, #12
 8004fe2:	4638      	mov	r0, r7
 8004fe4:	4629      	mov	r1, r5
 8004fe6:	f7ff ffa5 	bl	8004f34 <sbrk_aligned>
 8004fea:	3001      	adds	r0, #1
 8004fec:	d02b      	beq.n	8005046 <_malloc_r+0xd2>
 8004fee:	6823      	ldr	r3, [r4, #0]
 8004ff0:	442b      	add	r3, r5
 8004ff2:	6023      	str	r3, [r4, #0]
 8004ff4:	e00e      	b.n	8005014 <_malloc_r+0xa0>
 8004ff6:	6822      	ldr	r2, [r4, #0]
 8004ff8:	1b52      	subs	r2, r2, r5
 8004ffa:	d41e      	bmi.n	800503a <_malloc_r+0xc6>
 8004ffc:	2a0b      	cmp	r2, #11
 8004ffe:	d916      	bls.n	800502e <_malloc_r+0xba>
 8005000:	1961      	adds	r1, r4, r5
 8005002:	42a3      	cmp	r3, r4
 8005004:	6025      	str	r5, [r4, #0]
 8005006:	bf18      	it	ne
 8005008:	6059      	strne	r1, [r3, #4]
 800500a:	6863      	ldr	r3, [r4, #4]
 800500c:	bf08      	it	eq
 800500e:	6031      	streq	r1, [r6, #0]
 8005010:	5162      	str	r2, [r4, r5]
 8005012:	604b      	str	r3, [r1, #4]
 8005014:	4638      	mov	r0, r7
 8005016:	f104 060b 	add.w	r6, r4, #11
 800501a:	f000 fbd3 	bl	80057c4 <__malloc_unlock>
 800501e:	f026 0607 	bic.w	r6, r6, #7
 8005022:	1d23      	adds	r3, r4, #4
 8005024:	1af2      	subs	r2, r6, r3
 8005026:	d0b6      	beq.n	8004f96 <_malloc_r+0x22>
 8005028:	1b9b      	subs	r3, r3, r6
 800502a:	50a3      	str	r3, [r4, r2]
 800502c:	e7b3      	b.n	8004f96 <_malloc_r+0x22>
 800502e:	6862      	ldr	r2, [r4, #4]
 8005030:	42a3      	cmp	r3, r4
 8005032:	bf0c      	ite	eq
 8005034:	6032      	streq	r2, [r6, #0]
 8005036:	605a      	strne	r2, [r3, #4]
 8005038:	e7ec      	b.n	8005014 <_malloc_r+0xa0>
 800503a:	4623      	mov	r3, r4
 800503c:	6864      	ldr	r4, [r4, #4]
 800503e:	e7b2      	b.n	8004fa6 <_malloc_r+0x32>
 8005040:	4634      	mov	r4, r6
 8005042:	6876      	ldr	r6, [r6, #4]
 8005044:	e7b9      	b.n	8004fba <_malloc_r+0x46>
 8005046:	230c      	movs	r3, #12
 8005048:	4638      	mov	r0, r7
 800504a:	603b      	str	r3, [r7, #0]
 800504c:	f000 fbba 	bl	80057c4 <__malloc_unlock>
 8005050:	e7a1      	b.n	8004f96 <_malloc_r+0x22>
 8005052:	6025      	str	r5, [r4, #0]
 8005054:	e7de      	b.n	8005014 <_malloc_r+0xa0>
 8005056:	bf00      	nop
 8005058:	20001214 	.word	0x20001214

0800505c <__sfputc_r>:
 800505c:	6893      	ldr	r3, [r2, #8]
 800505e:	b410      	push	{r4}
 8005060:	3b01      	subs	r3, #1
 8005062:	2b00      	cmp	r3, #0
 8005064:	6093      	str	r3, [r2, #8]
 8005066:	da07      	bge.n	8005078 <__sfputc_r+0x1c>
 8005068:	6994      	ldr	r4, [r2, #24]
 800506a:	42a3      	cmp	r3, r4
 800506c:	db01      	blt.n	8005072 <__sfputc_r+0x16>
 800506e:	290a      	cmp	r1, #10
 8005070:	d102      	bne.n	8005078 <__sfputc_r+0x1c>
 8005072:	bc10      	pop	{r4}
 8005074:	f7ff bbf0 	b.w	8004858 <__swbuf_r>
 8005078:	6813      	ldr	r3, [r2, #0]
 800507a:	1c58      	adds	r0, r3, #1
 800507c:	6010      	str	r0, [r2, #0]
 800507e:	7019      	strb	r1, [r3, #0]
 8005080:	4608      	mov	r0, r1
 8005082:	bc10      	pop	{r4}
 8005084:	4770      	bx	lr

08005086 <__sfputs_r>:
 8005086:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005088:	4606      	mov	r6, r0
 800508a:	460f      	mov	r7, r1
 800508c:	4614      	mov	r4, r2
 800508e:	18d5      	adds	r5, r2, r3
 8005090:	42ac      	cmp	r4, r5
 8005092:	d101      	bne.n	8005098 <__sfputs_r+0x12>
 8005094:	2000      	movs	r0, #0
 8005096:	e007      	b.n	80050a8 <__sfputs_r+0x22>
 8005098:	463a      	mov	r2, r7
 800509a:	4630      	mov	r0, r6
 800509c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050a0:	f7ff ffdc 	bl	800505c <__sfputc_r>
 80050a4:	1c43      	adds	r3, r0, #1
 80050a6:	d1f3      	bne.n	8005090 <__sfputs_r+0xa>
 80050a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080050ac <_vfiprintf_r>:
 80050ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050b0:	460d      	mov	r5, r1
 80050b2:	4614      	mov	r4, r2
 80050b4:	4698      	mov	r8, r3
 80050b6:	4606      	mov	r6, r0
 80050b8:	b09d      	sub	sp, #116	; 0x74
 80050ba:	b118      	cbz	r0, 80050c4 <_vfiprintf_r+0x18>
 80050bc:	6983      	ldr	r3, [r0, #24]
 80050be:	b90b      	cbnz	r3, 80050c4 <_vfiprintf_r+0x18>
 80050c0:	f7ff fdbe 	bl	8004c40 <__sinit>
 80050c4:	4b89      	ldr	r3, [pc, #548]	; (80052ec <_vfiprintf_r+0x240>)
 80050c6:	429d      	cmp	r5, r3
 80050c8:	d11b      	bne.n	8005102 <_vfiprintf_r+0x56>
 80050ca:	6875      	ldr	r5, [r6, #4]
 80050cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050ce:	07d9      	lsls	r1, r3, #31
 80050d0:	d405      	bmi.n	80050de <_vfiprintf_r+0x32>
 80050d2:	89ab      	ldrh	r3, [r5, #12]
 80050d4:	059a      	lsls	r2, r3, #22
 80050d6:	d402      	bmi.n	80050de <_vfiprintf_r+0x32>
 80050d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050da:	f7ff fe74 	bl	8004dc6 <__retarget_lock_acquire_recursive>
 80050de:	89ab      	ldrh	r3, [r5, #12]
 80050e0:	071b      	lsls	r3, r3, #28
 80050e2:	d501      	bpl.n	80050e8 <_vfiprintf_r+0x3c>
 80050e4:	692b      	ldr	r3, [r5, #16]
 80050e6:	b9eb      	cbnz	r3, 8005124 <_vfiprintf_r+0x78>
 80050e8:	4629      	mov	r1, r5
 80050ea:	4630      	mov	r0, r6
 80050ec:	f7ff fc06 	bl	80048fc <__swsetup_r>
 80050f0:	b1c0      	cbz	r0, 8005124 <_vfiprintf_r+0x78>
 80050f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050f4:	07dc      	lsls	r4, r3, #31
 80050f6:	d50e      	bpl.n	8005116 <_vfiprintf_r+0x6a>
 80050f8:	f04f 30ff 	mov.w	r0, #4294967295
 80050fc:	b01d      	add	sp, #116	; 0x74
 80050fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005102:	4b7b      	ldr	r3, [pc, #492]	; (80052f0 <_vfiprintf_r+0x244>)
 8005104:	429d      	cmp	r5, r3
 8005106:	d101      	bne.n	800510c <_vfiprintf_r+0x60>
 8005108:	68b5      	ldr	r5, [r6, #8]
 800510a:	e7df      	b.n	80050cc <_vfiprintf_r+0x20>
 800510c:	4b79      	ldr	r3, [pc, #484]	; (80052f4 <_vfiprintf_r+0x248>)
 800510e:	429d      	cmp	r5, r3
 8005110:	bf08      	it	eq
 8005112:	68f5      	ldreq	r5, [r6, #12]
 8005114:	e7da      	b.n	80050cc <_vfiprintf_r+0x20>
 8005116:	89ab      	ldrh	r3, [r5, #12]
 8005118:	0598      	lsls	r0, r3, #22
 800511a:	d4ed      	bmi.n	80050f8 <_vfiprintf_r+0x4c>
 800511c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800511e:	f7ff fe53 	bl	8004dc8 <__retarget_lock_release_recursive>
 8005122:	e7e9      	b.n	80050f8 <_vfiprintf_r+0x4c>
 8005124:	2300      	movs	r3, #0
 8005126:	9309      	str	r3, [sp, #36]	; 0x24
 8005128:	2320      	movs	r3, #32
 800512a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800512e:	2330      	movs	r3, #48	; 0x30
 8005130:	f04f 0901 	mov.w	r9, #1
 8005134:	f8cd 800c 	str.w	r8, [sp, #12]
 8005138:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80052f8 <_vfiprintf_r+0x24c>
 800513c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005140:	4623      	mov	r3, r4
 8005142:	469a      	mov	sl, r3
 8005144:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005148:	b10a      	cbz	r2, 800514e <_vfiprintf_r+0xa2>
 800514a:	2a25      	cmp	r2, #37	; 0x25
 800514c:	d1f9      	bne.n	8005142 <_vfiprintf_r+0x96>
 800514e:	ebba 0b04 	subs.w	fp, sl, r4
 8005152:	d00b      	beq.n	800516c <_vfiprintf_r+0xc0>
 8005154:	465b      	mov	r3, fp
 8005156:	4622      	mov	r2, r4
 8005158:	4629      	mov	r1, r5
 800515a:	4630      	mov	r0, r6
 800515c:	f7ff ff93 	bl	8005086 <__sfputs_r>
 8005160:	3001      	adds	r0, #1
 8005162:	f000 80aa 	beq.w	80052ba <_vfiprintf_r+0x20e>
 8005166:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005168:	445a      	add	r2, fp
 800516a:	9209      	str	r2, [sp, #36]	; 0x24
 800516c:	f89a 3000 	ldrb.w	r3, [sl]
 8005170:	2b00      	cmp	r3, #0
 8005172:	f000 80a2 	beq.w	80052ba <_vfiprintf_r+0x20e>
 8005176:	2300      	movs	r3, #0
 8005178:	f04f 32ff 	mov.w	r2, #4294967295
 800517c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005180:	f10a 0a01 	add.w	sl, sl, #1
 8005184:	9304      	str	r3, [sp, #16]
 8005186:	9307      	str	r3, [sp, #28]
 8005188:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800518c:	931a      	str	r3, [sp, #104]	; 0x68
 800518e:	4654      	mov	r4, sl
 8005190:	2205      	movs	r2, #5
 8005192:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005196:	4858      	ldr	r0, [pc, #352]	; (80052f8 <_vfiprintf_r+0x24c>)
 8005198:	f000 fb00 	bl	800579c <memchr>
 800519c:	9a04      	ldr	r2, [sp, #16]
 800519e:	b9d8      	cbnz	r0, 80051d8 <_vfiprintf_r+0x12c>
 80051a0:	06d1      	lsls	r1, r2, #27
 80051a2:	bf44      	itt	mi
 80051a4:	2320      	movmi	r3, #32
 80051a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051aa:	0713      	lsls	r3, r2, #28
 80051ac:	bf44      	itt	mi
 80051ae:	232b      	movmi	r3, #43	; 0x2b
 80051b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051b4:	f89a 3000 	ldrb.w	r3, [sl]
 80051b8:	2b2a      	cmp	r3, #42	; 0x2a
 80051ba:	d015      	beq.n	80051e8 <_vfiprintf_r+0x13c>
 80051bc:	4654      	mov	r4, sl
 80051be:	2000      	movs	r0, #0
 80051c0:	f04f 0c0a 	mov.w	ip, #10
 80051c4:	9a07      	ldr	r2, [sp, #28]
 80051c6:	4621      	mov	r1, r4
 80051c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051cc:	3b30      	subs	r3, #48	; 0x30
 80051ce:	2b09      	cmp	r3, #9
 80051d0:	d94e      	bls.n	8005270 <_vfiprintf_r+0x1c4>
 80051d2:	b1b0      	cbz	r0, 8005202 <_vfiprintf_r+0x156>
 80051d4:	9207      	str	r2, [sp, #28]
 80051d6:	e014      	b.n	8005202 <_vfiprintf_r+0x156>
 80051d8:	eba0 0308 	sub.w	r3, r0, r8
 80051dc:	fa09 f303 	lsl.w	r3, r9, r3
 80051e0:	4313      	orrs	r3, r2
 80051e2:	46a2      	mov	sl, r4
 80051e4:	9304      	str	r3, [sp, #16]
 80051e6:	e7d2      	b.n	800518e <_vfiprintf_r+0xe2>
 80051e8:	9b03      	ldr	r3, [sp, #12]
 80051ea:	1d19      	adds	r1, r3, #4
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	9103      	str	r1, [sp, #12]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	bfbb      	ittet	lt
 80051f4:	425b      	neglt	r3, r3
 80051f6:	f042 0202 	orrlt.w	r2, r2, #2
 80051fa:	9307      	strge	r3, [sp, #28]
 80051fc:	9307      	strlt	r3, [sp, #28]
 80051fe:	bfb8      	it	lt
 8005200:	9204      	strlt	r2, [sp, #16]
 8005202:	7823      	ldrb	r3, [r4, #0]
 8005204:	2b2e      	cmp	r3, #46	; 0x2e
 8005206:	d10c      	bne.n	8005222 <_vfiprintf_r+0x176>
 8005208:	7863      	ldrb	r3, [r4, #1]
 800520a:	2b2a      	cmp	r3, #42	; 0x2a
 800520c:	d135      	bne.n	800527a <_vfiprintf_r+0x1ce>
 800520e:	9b03      	ldr	r3, [sp, #12]
 8005210:	3402      	adds	r4, #2
 8005212:	1d1a      	adds	r2, r3, #4
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	9203      	str	r2, [sp, #12]
 8005218:	2b00      	cmp	r3, #0
 800521a:	bfb8      	it	lt
 800521c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005220:	9305      	str	r3, [sp, #20]
 8005222:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80052fc <_vfiprintf_r+0x250>
 8005226:	2203      	movs	r2, #3
 8005228:	4650      	mov	r0, sl
 800522a:	7821      	ldrb	r1, [r4, #0]
 800522c:	f000 fab6 	bl	800579c <memchr>
 8005230:	b140      	cbz	r0, 8005244 <_vfiprintf_r+0x198>
 8005232:	2340      	movs	r3, #64	; 0x40
 8005234:	eba0 000a 	sub.w	r0, r0, sl
 8005238:	fa03 f000 	lsl.w	r0, r3, r0
 800523c:	9b04      	ldr	r3, [sp, #16]
 800523e:	3401      	adds	r4, #1
 8005240:	4303      	orrs	r3, r0
 8005242:	9304      	str	r3, [sp, #16]
 8005244:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005248:	2206      	movs	r2, #6
 800524a:	482d      	ldr	r0, [pc, #180]	; (8005300 <_vfiprintf_r+0x254>)
 800524c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005250:	f000 faa4 	bl	800579c <memchr>
 8005254:	2800      	cmp	r0, #0
 8005256:	d03f      	beq.n	80052d8 <_vfiprintf_r+0x22c>
 8005258:	4b2a      	ldr	r3, [pc, #168]	; (8005304 <_vfiprintf_r+0x258>)
 800525a:	bb1b      	cbnz	r3, 80052a4 <_vfiprintf_r+0x1f8>
 800525c:	9b03      	ldr	r3, [sp, #12]
 800525e:	3307      	adds	r3, #7
 8005260:	f023 0307 	bic.w	r3, r3, #7
 8005264:	3308      	adds	r3, #8
 8005266:	9303      	str	r3, [sp, #12]
 8005268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800526a:	443b      	add	r3, r7
 800526c:	9309      	str	r3, [sp, #36]	; 0x24
 800526e:	e767      	b.n	8005140 <_vfiprintf_r+0x94>
 8005270:	460c      	mov	r4, r1
 8005272:	2001      	movs	r0, #1
 8005274:	fb0c 3202 	mla	r2, ip, r2, r3
 8005278:	e7a5      	b.n	80051c6 <_vfiprintf_r+0x11a>
 800527a:	2300      	movs	r3, #0
 800527c:	f04f 0c0a 	mov.w	ip, #10
 8005280:	4619      	mov	r1, r3
 8005282:	3401      	adds	r4, #1
 8005284:	9305      	str	r3, [sp, #20]
 8005286:	4620      	mov	r0, r4
 8005288:	f810 2b01 	ldrb.w	r2, [r0], #1
 800528c:	3a30      	subs	r2, #48	; 0x30
 800528e:	2a09      	cmp	r2, #9
 8005290:	d903      	bls.n	800529a <_vfiprintf_r+0x1ee>
 8005292:	2b00      	cmp	r3, #0
 8005294:	d0c5      	beq.n	8005222 <_vfiprintf_r+0x176>
 8005296:	9105      	str	r1, [sp, #20]
 8005298:	e7c3      	b.n	8005222 <_vfiprintf_r+0x176>
 800529a:	4604      	mov	r4, r0
 800529c:	2301      	movs	r3, #1
 800529e:	fb0c 2101 	mla	r1, ip, r1, r2
 80052a2:	e7f0      	b.n	8005286 <_vfiprintf_r+0x1da>
 80052a4:	ab03      	add	r3, sp, #12
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	462a      	mov	r2, r5
 80052aa:	4630      	mov	r0, r6
 80052ac:	4b16      	ldr	r3, [pc, #88]	; (8005308 <_vfiprintf_r+0x25c>)
 80052ae:	a904      	add	r1, sp, #16
 80052b0:	f3af 8000 	nop.w
 80052b4:	4607      	mov	r7, r0
 80052b6:	1c78      	adds	r0, r7, #1
 80052b8:	d1d6      	bne.n	8005268 <_vfiprintf_r+0x1bc>
 80052ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80052bc:	07d9      	lsls	r1, r3, #31
 80052be:	d405      	bmi.n	80052cc <_vfiprintf_r+0x220>
 80052c0:	89ab      	ldrh	r3, [r5, #12]
 80052c2:	059a      	lsls	r2, r3, #22
 80052c4:	d402      	bmi.n	80052cc <_vfiprintf_r+0x220>
 80052c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80052c8:	f7ff fd7e 	bl	8004dc8 <__retarget_lock_release_recursive>
 80052cc:	89ab      	ldrh	r3, [r5, #12]
 80052ce:	065b      	lsls	r3, r3, #25
 80052d0:	f53f af12 	bmi.w	80050f8 <_vfiprintf_r+0x4c>
 80052d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052d6:	e711      	b.n	80050fc <_vfiprintf_r+0x50>
 80052d8:	ab03      	add	r3, sp, #12
 80052da:	9300      	str	r3, [sp, #0]
 80052dc:	462a      	mov	r2, r5
 80052de:	4630      	mov	r0, r6
 80052e0:	4b09      	ldr	r3, [pc, #36]	; (8005308 <_vfiprintf_r+0x25c>)
 80052e2:	a904      	add	r1, sp, #16
 80052e4:	f000 f882 	bl	80053ec <_printf_i>
 80052e8:	e7e4      	b.n	80052b4 <_vfiprintf_r+0x208>
 80052ea:	bf00      	nop
 80052ec:	08006224 	.word	0x08006224
 80052f0:	08006244 	.word	0x08006244
 80052f4:	08006204 	.word	0x08006204
 80052f8:	08006264 	.word	0x08006264
 80052fc:	0800626a 	.word	0x0800626a
 8005300:	0800626e 	.word	0x0800626e
 8005304:	00000000 	.word	0x00000000
 8005308:	08005087 	.word	0x08005087

0800530c <_printf_common>:
 800530c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005310:	4616      	mov	r6, r2
 8005312:	4699      	mov	r9, r3
 8005314:	688a      	ldr	r2, [r1, #8]
 8005316:	690b      	ldr	r3, [r1, #16]
 8005318:	4607      	mov	r7, r0
 800531a:	4293      	cmp	r3, r2
 800531c:	bfb8      	it	lt
 800531e:	4613      	movlt	r3, r2
 8005320:	6033      	str	r3, [r6, #0]
 8005322:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005326:	460c      	mov	r4, r1
 8005328:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800532c:	b10a      	cbz	r2, 8005332 <_printf_common+0x26>
 800532e:	3301      	adds	r3, #1
 8005330:	6033      	str	r3, [r6, #0]
 8005332:	6823      	ldr	r3, [r4, #0]
 8005334:	0699      	lsls	r1, r3, #26
 8005336:	bf42      	ittt	mi
 8005338:	6833      	ldrmi	r3, [r6, #0]
 800533a:	3302      	addmi	r3, #2
 800533c:	6033      	strmi	r3, [r6, #0]
 800533e:	6825      	ldr	r5, [r4, #0]
 8005340:	f015 0506 	ands.w	r5, r5, #6
 8005344:	d106      	bne.n	8005354 <_printf_common+0x48>
 8005346:	f104 0a19 	add.w	sl, r4, #25
 800534a:	68e3      	ldr	r3, [r4, #12]
 800534c:	6832      	ldr	r2, [r6, #0]
 800534e:	1a9b      	subs	r3, r3, r2
 8005350:	42ab      	cmp	r3, r5
 8005352:	dc28      	bgt.n	80053a6 <_printf_common+0x9a>
 8005354:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005358:	1e13      	subs	r3, r2, #0
 800535a:	6822      	ldr	r2, [r4, #0]
 800535c:	bf18      	it	ne
 800535e:	2301      	movne	r3, #1
 8005360:	0692      	lsls	r2, r2, #26
 8005362:	d42d      	bmi.n	80053c0 <_printf_common+0xb4>
 8005364:	4649      	mov	r1, r9
 8005366:	4638      	mov	r0, r7
 8005368:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800536c:	47c0      	blx	r8
 800536e:	3001      	adds	r0, #1
 8005370:	d020      	beq.n	80053b4 <_printf_common+0xa8>
 8005372:	6823      	ldr	r3, [r4, #0]
 8005374:	68e5      	ldr	r5, [r4, #12]
 8005376:	f003 0306 	and.w	r3, r3, #6
 800537a:	2b04      	cmp	r3, #4
 800537c:	bf18      	it	ne
 800537e:	2500      	movne	r5, #0
 8005380:	6832      	ldr	r2, [r6, #0]
 8005382:	f04f 0600 	mov.w	r6, #0
 8005386:	68a3      	ldr	r3, [r4, #8]
 8005388:	bf08      	it	eq
 800538a:	1aad      	subeq	r5, r5, r2
 800538c:	6922      	ldr	r2, [r4, #16]
 800538e:	bf08      	it	eq
 8005390:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005394:	4293      	cmp	r3, r2
 8005396:	bfc4      	itt	gt
 8005398:	1a9b      	subgt	r3, r3, r2
 800539a:	18ed      	addgt	r5, r5, r3
 800539c:	341a      	adds	r4, #26
 800539e:	42b5      	cmp	r5, r6
 80053a0:	d11a      	bne.n	80053d8 <_printf_common+0xcc>
 80053a2:	2000      	movs	r0, #0
 80053a4:	e008      	b.n	80053b8 <_printf_common+0xac>
 80053a6:	2301      	movs	r3, #1
 80053a8:	4652      	mov	r2, sl
 80053aa:	4649      	mov	r1, r9
 80053ac:	4638      	mov	r0, r7
 80053ae:	47c0      	blx	r8
 80053b0:	3001      	adds	r0, #1
 80053b2:	d103      	bne.n	80053bc <_printf_common+0xb0>
 80053b4:	f04f 30ff 	mov.w	r0, #4294967295
 80053b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053bc:	3501      	adds	r5, #1
 80053be:	e7c4      	b.n	800534a <_printf_common+0x3e>
 80053c0:	2030      	movs	r0, #48	; 0x30
 80053c2:	18e1      	adds	r1, r4, r3
 80053c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053c8:	1c5a      	adds	r2, r3, #1
 80053ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053ce:	4422      	add	r2, r4
 80053d0:	3302      	adds	r3, #2
 80053d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053d6:	e7c5      	b.n	8005364 <_printf_common+0x58>
 80053d8:	2301      	movs	r3, #1
 80053da:	4622      	mov	r2, r4
 80053dc:	4649      	mov	r1, r9
 80053de:	4638      	mov	r0, r7
 80053e0:	47c0      	blx	r8
 80053e2:	3001      	adds	r0, #1
 80053e4:	d0e6      	beq.n	80053b4 <_printf_common+0xa8>
 80053e6:	3601      	adds	r6, #1
 80053e8:	e7d9      	b.n	800539e <_printf_common+0x92>
	...

080053ec <_printf_i>:
 80053ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053f0:	7e0f      	ldrb	r7, [r1, #24]
 80053f2:	4691      	mov	r9, r2
 80053f4:	2f78      	cmp	r7, #120	; 0x78
 80053f6:	4680      	mov	r8, r0
 80053f8:	460c      	mov	r4, r1
 80053fa:	469a      	mov	sl, r3
 80053fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80053fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005402:	d807      	bhi.n	8005414 <_printf_i+0x28>
 8005404:	2f62      	cmp	r7, #98	; 0x62
 8005406:	d80a      	bhi.n	800541e <_printf_i+0x32>
 8005408:	2f00      	cmp	r7, #0
 800540a:	f000 80d9 	beq.w	80055c0 <_printf_i+0x1d4>
 800540e:	2f58      	cmp	r7, #88	; 0x58
 8005410:	f000 80a4 	beq.w	800555c <_printf_i+0x170>
 8005414:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005418:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800541c:	e03a      	b.n	8005494 <_printf_i+0xa8>
 800541e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005422:	2b15      	cmp	r3, #21
 8005424:	d8f6      	bhi.n	8005414 <_printf_i+0x28>
 8005426:	a101      	add	r1, pc, #4	; (adr r1, 800542c <_printf_i+0x40>)
 8005428:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800542c:	08005485 	.word	0x08005485
 8005430:	08005499 	.word	0x08005499
 8005434:	08005415 	.word	0x08005415
 8005438:	08005415 	.word	0x08005415
 800543c:	08005415 	.word	0x08005415
 8005440:	08005415 	.word	0x08005415
 8005444:	08005499 	.word	0x08005499
 8005448:	08005415 	.word	0x08005415
 800544c:	08005415 	.word	0x08005415
 8005450:	08005415 	.word	0x08005415
 8005454:	08005415 	.word	0x08005415
 8005458:	080055a7 	.word	0x080055a7
 800545c:	080054c9 	.word	0x080054c9
 8005460:	08005589 	.word	0x08005589
 8005464:	08005415 	.word	0x08005415
 8005468:	08005415 	.word	0x08005415
 800546c:	080055c9 	.word	0x080055c9
 8005470:	08005415 	.word	0x08005415
 8005474:	080054c9 	.word	0x080054c9
 8005478:	08005415 	.word	0x08005415
 800547c:	08005415 	.word	0x08005415
 8005480:	08005591 	.word	0x08005591
 8005484:	682b      	ldr	r3, [r5, #0]
 8005486:	1d1a      	adds	r2, r3, #4
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	602a      	str	r2, [r5, #0]
 800548c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005490:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005494:	2301      	movs	r3, #1
 8005496:	e0a4      	b.n	80055e2 <_printf_i+0x1f6>
 8005498:	6820      	ldr	r0, [r4, #0]
 800549a:	6829      	ldr	r1, [r5, #0]
 800549c:	0606      	lsls	r6, r0, #24
 800549e:	f101 0304 	add.w	r3, r1, #4
 80054a2:	d50a      	bpl.n	80054ba <_printf_i+0xce>
 80054a4:	680e      	ldr	r6, [r1, #0]
 80054a6:	602b      	str	r3, [r5, #0]
 80054a8:	2e00      	cmp	r6, #0
 80054aa:	da03      	bge.n	80054b4 <_printf_i+0xc8>
 80054ac:	232d      	movs	r3, #45	; 0x2d
 80054ae:	4276      	negs	r6, r6
 80054b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054b4:	230a      	movs	r3, #10
 80054b6:	485e      	ldr	r0, [pc, #376]	; (8005630 <_printf_i+0x244>)
 80054b8:	e019      	b.n	80054ee <_printf_i+0x102>
 80054ba:	680e      	ldr	r6, [r1, #0]
 80054bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80054c0:	602b      	str	r3, [r5, #0]
 80054c2:	bf18      	it	ne
 80054c4:	b236      	sxthne	r6, r6
 80054c6:	e7ef      	b.n	80054a8 <_printf_i+0xbc>
 80054c8:	682b      	ldr	r3, [r5, #0]
 80054ca:	6820      	ldr	r0, [r4, #0]
 80054cc:	1d19      	adds	r1, r3, #4
 80054ce:	6029      	str	r1, [r5, #0]
 80054d0:	0601      	lsls	r1, r0, #24
 80054d2:	d501      	bpl.n	80054d8 <_printf_i+0xec>
 80054d4:	681e      	ldr	r6, [r3, #0]
 80054d6:	e002      	b.n	80054de <_printf_i+0xf2>
 80054d8:	0646      	lsls	r6, r0, #25
 80054da:	d5fb      	bpl.n	80054d4 <_printf_i+0xe8>
 80054dc:	881e      	ldrh	r6, [r3, #0]
 80054de:	2f6f      	cmp	r7, #111	; 0x6f
 80054e0:	bf0c      	ite	eq
 80054e2:	2308      	moveq	r3, #8
 80054e4:	230a      	movne	r3, #10
 80054e6:	4852      	ldr	r0, [pc, #328]	; (8005630 <_printf_i+0x244>)
 80054e8:	2100      	movs	r1, #0
 80054ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054ee:	6865      	ldr	r5, [r4, #4]
 80054f0:	2d00      	cmp	r5, #0
 80054f2:	bfa8      	it	ge
 80054f4:	6821      	ldrge	r1, [r4, #0]
 80054f6:	60a5      	str	r5, [r4, #8]
 80054f8:	bfa4      	itt	ge
 80054fa:	f021 0104 	bicge.w	r1, r1, #4
 80054fe:	6021      	strge	r1, [r4, #0]
 8005500:	b90e      	cbnz	r6, 8005506 <_printf_i+0x11a>
 8005502:	2d00      	cmp	r5, #0
 8005504:	d04d      	beq.n	80055a2 <_printf_i+0x1b6>
 8005506:	4615      	mov	r5, r2
 8005508:	fbb6 f1f3 	udiv	r1, r6, r3
 800550c:	fb03 6711 	mls	r7, r3, r1, r6
 8005510:	5dc7      	ldrb	r7, [r0, r7]
 8005512:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005516:	4637      	mov	r7, r6
 8005518:	42bb      	cmp	r3, r7
 800551a:	460e      	mov	r6, r1
 800551c:	d9f4      	bls.n	8005508 <_printf_i+0x11c>
 800551e:	2b08      	cmp	r3, #8
 8005520:	d10b      	bne.n	800553a <_printf_i+0x14e>
 8005522:	6823      	ldr	r3, [r4, #0]
 8005524:	07de      	lsls	r6, r3, #31
 8005526:	d508      	bpl.n	800553a <_printf_i+0x14e>
 8005528:	6923      	ldr	r3, [r4, #16]
 800552a:	6861      	ldr	r1, [r4, #4]
 800552c:	4299      	cmp	r1, r3
 800552e:	bfde      	ittt	le
 8005530:	2330      	movle	r3, #48	; 0x30
 8005532:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005536:	f105 35ff 	addle.w	r5, r5, #4294967295
 800553a:	1b52      	subs	r2, r2, r5
 800553c:	6122      	str	r2, [r4, #16]
 800553e:	464b      	mov	r3, r9
 8005540:	4621      	mov	r1, r4
 8005542:	4640      	mov	r0, r8
 8005544:	f8cd a000 	str.w	sl, [sp]
 8005548:	aa03      	add	r2, sp, #12
 800554a:	f7ff fedf 	bl	800530c <_printf_common>
 800554e:	3001      	adds	r0, #1
 8005550:	d14c      	bne.n	80055ec <_printf_i+0x200>
 8005552:	f04f 30ff 	mov.w	r0, #4294967295
 8005556:	b004      	add	sp, #16
 8005558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800555c:	4834      	ldr	r0, [pc, #208]	; (8005630 <_printf_i+0x244>)
 800555e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005562:	6829      	ldr	r1, [r5, #0]
 8005564:	6823      	ldr	r3, [r4, #0]
 8005566:	f851 6b04 	ldr.w	r6, [r1], #4
 800556a:	6029      	str	r1, [r5, #0]
 800556c:	061d      	lsls	r5, r3, #24
 800556e:	d514      	bpl.n	800559a <_printf_i+0x1ae>
 8005570:	07df      	lsls	r7, r3, #31
 8005572:	bf44      	itt	mi
 8005574:	f043 0320 	orrmi.w	r3, r3, #32
 8005578:	6023      	strmi	r3, [r4, #0]
 800557a:	b91e      	cbnz	r6, 8005584 <_printf_i+0x198>
 800557c:	6823      	ldr	r3, [r4, #0]
 800557e:	f023 0320 	bic.w	r3, r3, #32
 8005582:	6023      	str	r3, [r4, #0]
 8005584:	2310      	movs	r3, #16
 8005586:	e7af      	b.n	80054e8 <_printf_i+0xfc>
 8005588:	6823      	ldr	r3, [r4, #0]
 800558a:	f043 0320 	orr.w	r3, r3, #32
 800558e:	6023      	str	r3, [r4, #0]
 8005590:	2378      	movs	r3, #120	; 0x78
 8005592:	4828      	ldr	r0, [pc, #160]	; (8005634 <_printf_i+0x248>)
 8005594:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005598:	e7e3      	b.n	8005562 <_printf_i+0x176>
 800559a:	0659      	lsls	r1, r3, #25
 800559c:	bf48      	it	mi
 800559e:	b2b6      	uxthmi	r6, r6
 80055a0:	e7e6      	b.n	8005570 <_printf_i+0x184>
 80055a2:	4615      	mov	r5, r2
 80055a4:	e7bb      	b.n	800551e <_printf_i+0x132>
 80055a6:	682b      	ldr	r3, [r5, #0]
 80055a8:	6826      	ldr	r6, [r4, #0]
 80055aa:	1d18      	adds	r0, r3, #4
 80055ac:	6961      	ldr	r1, [r4, #20]
 80055ae:	6028      	str	r0, [r5, #0]
 80055b0:	0635      	lsls	r5, r6, #24
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	d501      	bpl.n	80055ba <_printf_i+0x1ce>
 80055b6:	6019      	str	r1, [r3, #0]
 80055b8:	e002      	b.n	80055c0 <_printf_i+0x1d4>
 80055ba:	0670      	lsls	r0, r6, #25
 80055bc:	d5fb      	bpl.n	80055b6 <_printf_i+0x1ca>
 80055be:	8019      	strh	r1, [r3, #0]
 80055c0:	2300      	movs	r3, #0
 80055c2:	4615      	mov	r5, r2
 80055c4:	6123      	str	r3, [r4, #16]
 80055c6:	e7ba      	b.n	800553e <_printf_i+0x152>
 80055c8:	682b      	ldr	r3, [r5, #0]
 80055ca:	2100      	movs	r1, #0
 80055cc:	1d1a      	adds	r2, r3, #4
 80055ce:	602a      	str	r2, [r5, #0]
 80055d0:	681d      	ldr	r5, [r3, #0]
 80055d2:	6862      	ldr	r2, [r4, #4]
 80055d4:	4628      	mov	r0, r5
 80055d6:	f000 f8e1 	bl	800579c <memchr>
 80055da:	b108      	cbz	r0, 80055e0 <_printf_i+0x1f4>
 80055dc:	1b40      	subs	r0, r0, r5
 80055de:	6060      	str	r0, [r4, #4]
 80055e0:	6863      	ldr	r3, [r4, #4]
 80055e2:	6123      	str	r3, [r4, #16]
 80055e4:	2300      	movs	r3, #0
 80055e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055ea:	e7a8      	b.n	800553e <_printf_i+0x152>
 80055ec:	462a      	mov	r2, r5
 80055ee:	4649      	mov	r1, r9
 80055f0:	4640      	mov	r0, r8
 80055f2:	6923      	ldr	r3, [r4, #16]
 80055f4:	47d0      	blx	sl
 80055f6:	3001      	adds	r0, #1
 80055f8:	d0ab      	beq.n	8005552 <_printf_i+0x166>
 80055fa:	6823      	ldr	r3, [r4, #0]
 80055fc:	079b      	lsls	r3, r3, #30
 80055fe:	d413      	bmi.n	8005628 <_printf_i+0x23c>
 8005600:	68e0      	ldr	r0, [r4, #12]
 8005602:	9b03      	ldr	r3, [sp, #12]
 8005604:	4298      	cmp	r0, r3
 8005606:	bfb8      	it	lt
 8005608:	4618      	movlt	r0, r3
 800560a:	e7a4      	b.n	8005556 <_printf_i+0x16a>
 800560c:	2301      	movs	r3, #1
 800560e:	4632      	mov	r2, r6
 8005610:	4649      	mov	r1, r9
 8005612:	4640      	mov	r0, r8
 8005614:	47d0      	blx	sl
 8005616:	3001      	adds	r0, #1
 8005618:	d09b      	beq.n	8005552 <_printf_i+0x166>
 800561a:	3501      	adds	r5, #1
 800561c:	68e3      	ldr	r3, [r4, #12]
 800561e:	9903      	ldr	r1, [sp, #12]
 8005620:	1a5b      	subs	r3, r3, r1
 8005622:	42ab      	cmp	r3, r5
 8005624:	dcf2      	bgt.n	800560c <_printf_i+0x220>
 8005626:	e7eb      	b.n	8005600 <_printf_i+0x214>
 8005628:	2500      	movs	r5, #0
 800562a:	f104 0619 	add.w	r6, r4, #25
 800562e:	e7f5      	b.n	800561c <_printf_i+0x230>
 8005630:	08006275 	.word	0x08006275
 8005634:	08006286 	.word	0x08006286

08005638 <_sbrk_r>:
 8005638:	b538      	push	{r3, r4, r5, lr}
 800563a:	2300      	movs	r3, #0
 800563c:	4d05      	ldr	r5, [pc, #20]	; (8005654 <_sbrk_r+0x1c>)
 800563e:	4604      	mov	r4, r0
 8005640:	4608      	mov	r0, r1
 8005642:	602b      	str	r3, [r5, #0]
 8005644:	f7fc ff7a 	bl	800253c <_sbrk>
 8005648:	1c43      	adds	r3, r0, #1
 800564a:	d102      	bne.n	8005652 <_sbrk_r+0x1a>
 800564c:	682b      	ldr	r3, [r5, #0]
 800564e:	b103      	cbz	r3, 8005652 <_sbrk_r+0x1a>
 8005650:	6023      	str	r3, [r4, #0]
 8005652:	bd38      	pop	{r3, r4, r5, pc}
 8005654:	2000121c 	.word	0x2000121c

08005658 <__sread>:
 8005658:	b510      	push	{r4, lr}
 800565a:	460c      	mov	r4, r1
 800565c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005660:	f000 f8b6 	bl	80057d0 <_read_r>
 8005664:	2800      	cmp	r0, #0
 8005666:	bfab      	itete	ge
 8005668:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800566a:	89a3      	ldrhlt	r3, [r4, #12]
 800566c:	181b      	addge	r3, r3, r0
 800566e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005672:	bfac      	ite	ge
 8005674:	6563      	strge	r3, [r4, #84]	; 0x54
 8005676:	81a3      	strhlt	r3, [r4, #12]
 8005678:	bd10      	pop	{r4, pc}

0800567a <__swrite>:
 800567a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800567e:	461f      	mov	r7, r3
 8005680:	898b      	ldrh	r3, [r1, #12]
 8005682:	4605      	mov	r5, r0
 8005684:	05db      	lsls	r3, r3, #23
 8005686:	460c      	mov	r4, r1
 8005688:	4616      	mov	r6, r2
 800568a:	d505      	bpl.n	8005698 <__swrite+0x1e>
 800568c:	2302      	movs	r3, #2
 800568e:	2200      	movs	r2, #0
 8005690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005694:	f000 f870 	bl	8005778 <_lseek_r>
 8005698:	89a3      	ldrh	r3, [r4, #12]
 800569a:	4632      	mov	r2, r6
 800569c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056a0:	81a3      	strh	r3, [r4, #12]
 80056a2:	4628      	mov	r0, r5
 80056a4:	463b      	mov	r3, r7
 80056a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056ae:	f000 b817 	b.w	80056e0 <_write_r>

080056b2 <__sseek>:
 80056b2:	b510      	push	{r4, lr}
 80056b4:	460c      	mov	r4, r1
 80056b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056ba:	f000 f85d 	bl	8005778 <_lseek_r>
 80056be:	1c43      	adds	r3, r0, #1
 80056c0:	89a3      	ldrh	r3, [r4, #12]
 80056c2:	bf15      	itete	ne
 80056c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80056c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80056ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80056ce:	81a3      	strheq	r3, [r4, #12]
 80056d0:	bf18      	it	ne
 80056d2:	81a3      	strhne	r3, [r4, #12]
 80056d4:	bd10      	pop	{r4, pc}

080056d6 <__sclose>:
 80056d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056da:	f000 b81b 	b.w	8005714 <_close_r>
	...

080056e0 <_write_r>:
 80056e0:	b538      	push	{r3, r4, r5, lr}
 80056e2:	4604      	mov	r4, r0
 80056e4:	4608      	mov	r0, r1
 80056e6:	4611      	mov	r1, r2
 80056e8:	2200      	movs	r2, #0
 80056ea:	4d05      	ldr	r5, [pc, #20]	; (8005700 <_write_r+0x20>)
 80056ec:	602a      	str	r2, [r5, #0]
 80056ee:	461a      	mov	r2, r3
 80056f0:	f7fc fed8 	bl	80024a4 <_write>
 80056f4:	1c43      	adds	r3, r0, #1
 80056f6:	d102      	bne.n	80056fe <_write_r+0x1e>
 80056f8:	682b      	ldr	r3, [r5, #0]
 80056fa:	b103      	cbz	r3, 80056fe <_write_r+0x1e>
 80056fc:	6023      	str	r3, [r4, #0]
 80056fe:	bd38      	pop	{r3, r4, r5, pc}
 8005700:	2000121c 	.word	0x2000121c

08005704 <abort>:
 8005704:	2006      	movs	r0, #6
 8005706:	b508      	push	{r3, lr}
 8005708:	f000 f89c 	bl	8005844 <raise>
 800570c:	2001      	movs	r0, #1
 800570e:	f7fc fea2 	bl	8002456 <_exit>
	...

08005714 <_close_r>:
 8005714:	b538      	push	{r3, r4, r5, lr}
 8005716:	2300      	movs	r3, #0
 8005718:	4d05      	ldr	r5, [pc, #20]	; (8005730 <_close_r+0x1c>)
 800571a:	4604      	mov	r4, r0
 800571c:	4608      	mov	r0, r1
 800571e:	602b      	str	r3, [r5, #0]
 8005720:	f7fc fedc 	bl	80024dc <_close>
 8005724:	1c43      	adds	r3, r0, #1
 8005726:	d102      	bne.n	800572e <_close_r+0x1a>
 8005728:	682b      	ldr	r3, [r5, #0]
 800572a:	b103      	cbz	r3, 800572e <_close_r+0x1a>
 800572c:	6023      	str	r3, [r4, #0]
 800572e:	bd38      	pop	{r3, r4, r5, pc}
 8005730:	2000121c 	.word	0x2000121c

08005734 <_fstat_r>:
 8005734:	b538      	push	{r3, r4, r5, lr}
 8005736:	2300      	movs	r3, #0
 8005738:	4d06      	ldr	r5, [pc, #24]	; (8005754 <_fstat_r+0x20>)
 800573a:	4604      	mov	r4, r0
 800573c:	4608      	mov	r0, r1
 800573e:	4611      	mov	r1, r2
 8005740:	602b      	str	r3, [r5, #0]
 8005742:	f7fc fed6 	bl	80024f2 <_fstat>
 8005746:	1c43      	adds	r3, r0, #1
 8005748:	d102      	bne.n	8005750 <_fstat_r+0x1c>
 800574a:	682b      	ldr	r3, [r5, #0]
 800574c:	b103      	cbz	r3, 8005750 <_fstat_r+0x1c>
 800574e:	6023      	str	r3, [r4, #0]
 8005750:	bd38      	pop	{r3, r4, r5, pc}
 8005752:	bf00      	nop
 8005754:	2000121c 	.word	0x2000121c

08005758 <_isatty_r>:
 8005758:	b538      	push	{r3, r4, r5, lr}
 800575a:	2300      	movs	r3, #0
 800575c:	4d05      	ldr	r5, [pc, #20]	; (8005774 <_isatty_r+0x1c>)
 800575e:	4604      	mov	r4, r0
 8005760:	4608      	mov	r0, r1
 8005762:	602b      	str	r3, [r5, #0]
 8005764:	f7fc fed4 	bl	8002510 <_isatty>
 8005768:	1c43      	adds	r3, r0, #1
 800576a:	d102      	bne.n	8005772 <_isatty_r+0x1a>
 800576c:	682b      	ldr	r3, [r5, #0]
 800576e:	b103      	cbz	r3, 8005772 <_isatty_r+0x1a>
 8005770:	6023      	str	r3, [r4, #0]
 8005772:	bd38      	pop	{r3, r4, r5, pc}
 8005774:	2000121c 	.word	0x2000121c

08005778 <_lseek_r>:
 8005778:	b538      	push	{r3, r4, r5, lr}
 800577a:	4604      	mov	r4, r0
 800577c:	4608      	mov	r0, r1
 800577e:	4611      	mov	r1, r2
 8005780:	2200      	movs	r2, #0
 8005782:	4d05      	ldr	r5, [pc, #20]	; (8005798 <_lseek_r+0x20>)
 8005784:	602a      	str	r2, [r5, #0]
 8005786:	461a      	mov	r2, r3
 8005788:	f7fc fecc 	bl	8002524 <_lseek>
 800578c:	1c43      	adds	r3, r0, #1
 800578e:	d102      	bne.n	8005796 <_lseek_r+0x1e>
 8005790:	682b      	ldr	r3, [r5, #0]
 8005792:	b103      	cbz	r3, 8005796 <_lseek_r+0x1e>
 8005794:	6023      	str	r3, [r4, #0]
 8005796:	bd38      	pop	{r3, r4, r5, pc}
 8005798:	2000121c 	.word	0x2000121c

0800579c <memchr>:
 800579c:	4603      	mov	r3, r0
 800579e:	b510      	push	{r4, lr}
 80057a0:	b2c9      	uxtb	r1, r1
 80057a2:	4402      	add	r2, r0
 80057a4:	4293      	cmp	r3, r2
 80057a6:	4618      	mov	r0, r3
 80057a8:	d101      	bne.n	80057ae <memchr+0x12>
 80057aa:	2000      	movs	r0, #0
 80057ac:	e003      	b.n	80057b6 <memchr+0x1a>
 80057ae:	7804      	ldrb	r4, [r0, #0]
 80057b0:	3301      	adds	r3, #1
 80057b2:	428c      	cmp	r4, r1
 80057b4:	d1f6      	bne.n	80057a4 <memchr+0x8>
 80057b6:	bd10      	pop	{r4, pc}

080057b8 <__malloc_lock>:
 80057b8:	4801      	ldr	r0, [pc, #4]	; (80057c0 <__malloc_lock+0x8>)
 80057ba:	f7ff bb04 	b.w	8004dc6 <__retarget_lock_acquire_recursive>
 80057be:	bf00      	nop
 80057c0:	20001210 	.word	0x20001210

080057c4 <__malloc_unlock>:
 80057c4:	4801      	ldr	r0, [pc, #4]	; (80057cc <__malloc_unlock+0x8>)
 80057c6:	f7ff baff 	b.w	8004dc8 <__retarget_lock_release_recursive>
 80057ca:	bf00      	nop
 80057cc:	20001210 	.word	0x20001210

080057d0 <_read_r>:
 80057d0:	b538      	push	{r3, r4, r5, lr}
 80057d2:	4604      	mov	r4, r0
 80057d4:	4608      	mov	r0, r1
 80057d6:	4611      	mov	r1, r2
 80057d8:	2200      	movs	r2, #0
 80057da:	4d05      	ldr	r5, [pc, #20]	; (80057f0 <_read_r+0x20>)
 80057dc:	602a      	str	r2, [r5, #0]
 80057de:	461a      	mov	r2, r3
 80057e0:	f7fc fe43 	bl	800246a <_read>
 80057e4:	1c43      	adds	r3, r0, #1
 80057e6:	d102      	bne.n	80057ee <_read_r+0x1e>
 80057e8:	682b      	ldr	r3, [r5, #0]
 80057ea:	b103      	cbz	r3, 80057ee <_read_r+0x1e>
 80057ec:	6023      	str	r3, [r4, #0]
 80057ee:	bd38      	pop	{r3, r4, r5, pc}
 80057f0:	2000121c 	.word	0x2000121c

080057f4 <_raise_r>:
 80057f4:	291f      	cmp	r1, #31
 80057f6:	b538      	push	{r3, r4, r5, lr}
 80057f8:	4604      	mov	r4, r0
 80057fa:	460d      	mov	r5, r1
 80057fc:	d904      	bls.n	8005808 <_raise_r+0x14>
 80057fe:	2316      	movs	r3, #22
 8005800:	6003      	str	r3, [r0, #0]
 8005802:	f04f 30ff 	mov.w	r0, #4294967295
 8005806:	bd38      	pop	{r3, r4, r5, pc}
 8005808:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800580a:	b112      	cbz	r2, 8005812 <_raise_r+0x1e>
 800580c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005810:	b94b      	cbnz	r3, 8005826 <_raise_r+0x32>
 8005812:	4620      	mov	r0, r4
 8005814:	f000 f830 	bl	8005878 <_getpid_r>
 8005818:	462a      	mov	r2, r5
 800581a:	4601      	mov	r1, r0
 800581c:	4620      	mov	r0, r4
 800581e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005822:	f000 b817 	b.w	8005854 <_kill_r>
 8005826:	2b01      	cmp	r3, #1
 8005828:	d00a      	beq.n	8005840 <_raise_r+0x4c>
 800582a:	1c59      	adds	r1, r3, #1
 800582c:	d103      	bne.n	8005836 <_raise_r+0x42>
 800582e:	2316      	movs	r3, #22
 8005830:	6003      	str	r3, [r0, #0]
 8005832:	2001      	movs	r0, #1
 8005834:	e7e7      	b.n	8005806 <_raise_r+0x12>
 8005836:	2400      	movs	r4, #0
 8005838:	4628      	mov	r0, r5
 800583a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800583e:	4798      	blx	r3
 8005840:	2000      	movs	r0, #0
 8005842:	e7e0      	b.n	8005806 <_raise_r+0x12>

08005844 <raise>:
 8005844:	4b02      	ldr	r3, [pc, #8]	; (8005850 <raise+0xc>)
 8005846:	4601      	mov	r1, r0
 8005848:	6818      	ldr	r0, [r3, #0]
 800584a:	f7ff bfd3 	b.w	80057f4 <_raise_r>
 800584e:	bf00      	nop
 8005850:	2000000c 	.word	0x2000000c

08005854 <_kill_r>:
 8005854:	b538      	push	{r3, r4, r5, lr}
 8005856:	2300      	movs	r3, #0
 8005858:	4d06      	ldr	r5, [pc, #24]	; (8005874 <_kill_r+0x20>)
 800585a:	4604      	mov	r4, r0
 800585c:	4608      	mov	r0, r1
 800585e:	4611      	mov	r1, r2
 8005860:	602b      	str	r3, [r5, #0]
 8005862:	f7fc fde8 	bl	8002436 <_kill>
 8005866:	1c43      	adds	r3, r0, #1
 8005868:	d102      	bne.n	8005870 <_kill_r+0x1c>
 800586a:	682b      	ldr	r3, [r5, #0]
 800586c:	b103      	cbz	r3, 8005870 <_kill_r+0x1c>
 800586e:	6023      	str	r3, [r4, #0]
 8005870:	bd38      	pop	{r3, r4, r5, pc}
 8005872:	bf00      	nop
 8005874:	2000121c 	.word	0x2000121c

08005878 <_getpid_r>:
 8005878:	f7fc bdd6 	b.w	8002428 <_getpid>

0800587c <_gettimeofday>:
 800587c:	2258      	movs	r2, #88	; 0x58
 800587e:	4b02      	ldr	r3, [pc, #8]	; (8005888 <_gettimeofday+0xc>)
 8005880:	f04f 30ff 	mov.w	r0, #4294967295
 8005884:	601a      	str	r2, [r3, #0]
 8005886:	4770      	bx	lr
 8005888:	2000121c 	.word	0x2000121c

0800588c <_init>:
 800588c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800588e:	bf00      	nop
 8005890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005892:	bc08      	pop	{r3}
 8005894:	469e      	mov	lr, r3
 8005896:	4770      	bx	lr

08005898 <_fini>:
 8005898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800589a:	bf00      	nop
 800589c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800589e:	bc08      	pop	{r3}
 80058a0:	469e      	mov	lr, r3
 80058a2:	4770      	bx	lr
