
RAMSES_LTE_logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dbc  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000690  08004ef8  08004ef8  00014ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005588  08005588  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005588  08005588  00015588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005590  08005590  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005590  08005590  00015590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005594  08005594  00015594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005598  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011b0  20000070  08005608  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001220  08005608  00021220  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f99  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d5e  00000000  00000000  0002a032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000800  00000000  00000000  0002bd90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000748  00000000  00000000  0002c590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001691a  00000000  00000000  0002ccd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a53a  00000000  00000000  000435f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086440  00000000  00000000  0004db2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d3f6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b08  00000000  00000000  000d3fbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  000d6ac4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000d6ae8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	08004ee0 	.word	0x08004ee0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	08004ee0 	.word	0x08004ee0

0800017c <strcmp>:
 800017c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000180:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000184:	2a01      	cmp	r2, #1
 8000186:	bf28      	it	cs
 8000188:	429a      	cmpcs	r2, r3
 800018a:	d0f7      	beq.n	800017c <strcmp>
 800018c:	1ad0      	subs	r0, r2, r3
 800018e:	4770      	bx	lr

08000190 <strlen>:
 8000190:	4603      	mov	r3, r0
 8000192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000196:	2a00      	cmp	r2, #0
 8000198:	d1fb      	bne.n	8000192 <strlen+0x2>
 800019a:	1a18      	subs	r0, r3, r0
 800019c:	3801      	subs	r0, #1
 800019e:	4770      	bx	lr

080001a0 <__aeabi_uldivmod>:
 80001a0:	b953      	cbnz	r3, 80001b8 <__aeabi_uldivmod+0x18>
 80001a2:	b94a      	cbnz	r2, 80001b8 <__aeabi_uldivmod+0x18>
 80001a4:	2900      	cmp	r1, #0
 80001a6:	bf08      	it	eq
 80001a8:	2800      	cmpeq	r0, #0
 80001aa:	bf1c      	itt	ne
 80001ac:	f04f 31ff 	movne.w	r1, #4294967295
 80001b0:	f04f 30ff 	movne.w	r0, #4294967295
 80001b4:	f000 b976 	b.w	80004a4 <__aeabi_idiv0>
 80001b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001c0:	f000 f806 	bl	80001d0 <__udivmoddi4>
 80001c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001cc:	b004      	add	sp, #16
 80001ce:	4770      	bx	lr

080001d0 <__udivmoddi4>:
 80001d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001d4:	9e08      	ldr	r6, [sp, #32]
 80001d6:	460d      	mov	r5, r1
 80001d8:	4604      	mov	r4, r0
 80001da:	4688      	mov	r8, r1
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d14d      	bne.n	800027c <__udivmoddi4+0xac>
 80001e0:	428a      	cmp	r2, r1
 80001e2:	4694      	mov	ip, r2
 80001e4:	d968      	bls.n	80002b8 <__udivmoddi4+0xe8>
 80001e6:	fab2 f282 	clz	r2, r2
 80001ea:	b152      	cbz	r2, 8000202 <__udivmoddi4+0x32>
 80001ec:	fa01 f302 	lsl.w	r3, r1, r2
 80001f0:	f1c2 0120 	rsb	r1, r2, #32
 80001f4:	fa20 f101 	lsr.w	r1, r0, r1
 80001f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80001fc:	ea41 0803 	orr.w	r8, r1, r3
 8000200:	4094      	lsls	r4, r2
 8000202:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000206:	fbb8 f7f1 	udiv	r7, r8, r1
 800020a:	fa1f fe8c 	uxth.w	lr, ip
 800020e:	fb01 8817 	mls	r8, r1, r7, r8
 8000212:	fb07 f00e 	mul.w	r0, r7, lr
 8000216:	0c23      	lsrs	r3, r4, #16
 8000218:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800021c:	4298      	cmp	r0, r3
 800021e:	d90a      	bls.n	8000236 <__udivmoddi4+0x66>
 8000220:	eb1c 0303 	adds.w	r3, ip, r3
 8000224:	f107 35ff 	add.w	r5, r7, #4294967295
 8000228:	f080 811e 	bcs.w	8000468 <__udivmoddi4+0x298>
 800022c:	4298      	cmp	r0, r3
 800022e:	f240 811b 	bls.w	8000468 <__udivmoddi4+0x298>
 8000232:	3f02      	subs	r7, #2
 8000234:	4463      	add	r3, ip
 8000236:	1a1b      	subs	r3, r3, r0
 8000238:	fbb3 f0f1 	udiv	r0, r3, r1
 800023c:	fb01 3310 	mls	r3, r1, r0, r3
 8000240:	fb00 fe0e 	mul.w	lr, r0, lr
 8000244:	b2a4      	uxth	r4, r4
 8000246:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800024a:	45a6      	cmp	lr, r4
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x94>
 800024e:	eb1c 0404 	adds.w	r4, ip, r4
 8000252:	f100 33ff 	add.w	r3, r0, #4294967295
 8000256:	f080 8109 	bcs.w	800046c <__udivmoddi4+0x29c>
 800025a:	45a6      	cmp	lr, r4
 800025c:	f240 8106 	bls.w	800046c <__udivmoddi4+0x29c>
 8000260:	4464      	add	r4, ip
 8000262:	3802      	subs	r0, #2
 8000264:	2100      	movs	r1, #0
 8000266:	eba4 040e 	sub.w	r4, r4, lr
 800026a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800026e:	b11e      	cbz	r6, 8000278 <__udivmoddi4+0xa8>
 8000270:	2300      	movs	r3, #0
 8000272:	40d4      	lsrs	r4, r2
 8000274:	e9c6 4300 	strd	r4, r3, [r6]
 8000278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027c:	428b      	cmp	r3, r1
 800027e:	d908      	bls.n	8000292 <__udivmoddi4+0xc2>
 8000280:	2e00      	cmp	r6, #0
 8000282:	f000 80ee 	beq.w	8000462 <__udivmoddi4+0x292>
 8000286:	2100      	movs	r1, #0
 8000288:	e9c6 0500 	strd	r0, r5, [r6]
 800028c:	4608      	mov	r0, r1
 800028e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000292:	fab3 f183 	clz	r1, r3
 8000296:	2900      	cmp	r1, #0
 8000298:	d14a      	bne.n	8000330 <__udivmoddi4+0x160>
 800029a:	42ab      	cmp	r3, r5
 800029c:	d302      	bcc.n	80002a4 <__udivmoddi4+0xd4>
 800029e:	4282      	cmp	r2, r0
 80002a0:	f200 80fc 	bhi.w	800049c <__udivmoddi4+0x2cc>
 80002a4:	1a84      	subs	r4, r0, r2
 80002a6:	eb65 0303 	sbc.w	r3, r5, r3
 80002aa:	2001      	movs	r0, #1
 80002ac:	4698      	mov	r8, r3
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	d0e2      	beq.n	8000278 <__udivmoddi4+0xa8>
 80002b2:	e9c6 4800 	strd	r4, r8, [r6]
 80002b6:	e7df      	b.n	8000278 <__udivmoddi4+0xa8>
 80002b8:	b902      	cbnz	r2, 80002bc <__udivmoddi4+0xec>
 80002ba:	deff      	udf	#255	; 0xff
 80002bc:	fab2 f282 	clz	r2, r2
 80002c0:	2a00      	cmp	r2, #0
 80002c2:	f040 8091 	bne.w	80003e8 <__udivmoddi4+0x218>
 80002c6:	eba1 000c 	sub.w	r0, r1, ip
 80002ca:	2101      	movs	r1, #1
 80002cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d0:	fa1f fe8c 	uxth.w	lr, ip
 80002d4:	fbb0 f3f7 	udiv	r3, r0, r7
 80002d8:	fb07 0013 	mls	r0, r7, r3, r0
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002e2:	fb0e f003 	mul.w	r0, lr, r3
 80002e6:	42a8      	cmp	r0, r5
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0x12c>
 80002ea:	eb1c 0505 	adds.w	r5, ip, r5
 80002ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x12a>
 80002f4:	42a8      	cmp	r0, r5
 80002f6:	f200 80ce 	bhi.w	8000496 <__udivmoddi4+0x2c6>
 80002fa:	4643      	mov	r3, r8
 80002fc:	1a2d      	subs	r5, r5, r0
 80002fe:	fbb5 f0f7 	udiv	r0, r5, r7
 8000302:	fb07 5510 	mls	r5, r7, r0, r5
 8000306:	fb0e fe00 	mul.w	lr, lr, r0
 800030a:	b2a4      	uxth	r4, r4
 800030c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000310:	45a6      	cmp	lr, r4
 8000312:	d908      	bls.n	8000326 <__udivmoddi4+0x156>
 8000314:	eb1c 0404 	adds.w	r4, ip, r4
 8000318:	f100 35ff 	add.w	r5, r0, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x154>
 800031e:	45a6      	cmp	lr, r4
 8000320:	f200 80b6 	bhi.w	8000490 <__udivmoddi4+0x2c0>
 8000324:	4628      	mov	r0, r5
 8000326:	eba4 040e 	sub.w	r4, r4, lr
 800032a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800032e:	e79e      	b.n	800026e <__udivmoddi4+0x9e>
 8000330:	f1c1 0720 	rsb	r7, r1, #32
 8000334:	408b      	lsls	r3, r1
 8000336:	fa22 fc07 	lsr.w	ip, r2, r7
 800033a:	ea4c 0c03 	orr.w	ip, ip, r3
 800033e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000342:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000346:	fbba f8f9 	udiv	r8, sl, r9
 800034a:	fa20 f307 	lsr.w	r3, r0, r7
 800034e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000352:	408d      	lsls	r5, r1
 8000354:	fa1f fe8c 	uxth.w	lr, ip
 8000358:	431d      	orrs	r5, r3
 800035a:	fa00 f301 	lsl.w	r3, r0, r1
 800035e:	fb08 f00e 	mul.w	r0, r8, lr
 8000362:	0c2c      	lsrs	r4, r5, #16
 8000364:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000368:	42a0      	cmp	r0, r4
 800036a:	fa02 f201 	lsl.w	r2, r2, r1
 800036e:	d90b      	bls.n	8000388 <__udivmoddi4+0x1b8>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f108 3aff 	add.w	sl, r8, #4294967295
 8000378:	f080 8088 	bcs.w	800048c <__udivmoddi4+0x2bc>
 800037c:	42a0      	cmp	r0, r4
 800037e:	f240 8085 	bls.w	800048c <__udivmoddi4+0x2bc>
 8000382:	f1a8 0802 	sub.w	r8, r8, #2
 8000386:	4464      	add	r4, ip
 8000388:	1a24      	subs	r4, r4, r0
 800038a:	fbb4 f0f9 	udiv	r0, r4, r9
 800038e:	fb09 4410 	mls	r4, r9, r0, r4
 8000392:	fb00 fe0e 	mul.w	lr, r0, lr
 8000396:	b2ad      	uxth	r5, r5
 8000398:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800039c:	45a6      	cmp	lr, r4
 800039e:	d908      	bls.n	80003b2 <__udivmoddi4+0x1e2>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f100 35ff 	add.w	r5, r0, #4294967295
 80003a8:	d26c      	bcs.n	8000484 <__udivmoddi4+0x2b4>
 80003aa:	45a6      	cmp	lr, r4
 80003ac:	d96a      	bls.n	8000484 <__udivmoddi4+0x2b4>
 80003ae:	3802      	subs	r0, #2
 80003b0:	4464      	add	r4, ip
 80003b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003b6:	fba0 9502 	umull	r9, r5, r0, r2
 80003ba:	eba4 040e 	sub.w	r4, r4, lr
 80003be:	42ac      	cmp	r4, r5
 80003c0:	46c8      	mov	r8, r9
 80003c2:	46ae      	mov	lr, r5
 80003c4:	d356      	bcc.n	8000474 <__udivmoddi4+0x2a4>
 80003c6:	d053      	beq.n	8000470 <__udivmoddi4+0x2a0>
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d069      	beq.n	80004a0 <__udivmoddi4+0x2d0>
 80003cc:	ebb3 0208 	subs.w	r2, r3, r8
 80003d0:	eb64 040e 	sbc.w	r4, r4, lr
 80003d4:	fa22 f301 	lsr.w	r3, r2, r1
 80003d8:	fa04 f707 	lsl.w	r7, r4, r7
 80003dc:	431f      	orrs	r7, r3
 80003de:	40cc      	lsrs	r4, r1
 80003e0:	e9c6 7400 	strd	r7, r4, [r6]
 80003e4:	2100      	movs	r1, #0
 80003e6:	e747      	b.n	8000278 <__udivmoddi4+0xa8>
 80003e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ec:	f1c2 0120 	rsb	r1, r2, #32
 80003f0:	fa25 f301 	lsr.w	r3, r5, r1
 80003f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f8:	fa20 f101 	lsr.w	r1, r0, r1
 80003fc:	4095      	lsls	r5, r2
 80003fe:	430d      	orrs	r5, r1
 8000400:	fbb3 f1f7 	udiv	r1, r3, r7
 8000404:	fb07 3311 	mls	r3, r7, r1, r3
 8000408:	fa1f fe8c 	uxth.w	lr, ip
 800040c:	0c28      	lsrs	r0, r5, #16
 800040e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000412:	fb01 f30e 	mul.w	r3, r1, lr
 8000416:	4283      	cmp	r3, r0
 8000418:	fa04 f402 	lsl.w	r4, r4, r2
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x260>
 800041e:	eb1c 0000 	adds.w	r0, ip, r0
 8000422:	f101 38ff 	add.w	r8, r1, #4294967295
 8000426:	d22f      	bcs.n	8000488 <__udivmoddi4+0x2b8>
 8000428:	4283      	cmp	r3, r0
 800042a:	d92d      	bls.n	8000488 <__udivmoddi4+0x2b8>
 800042c:	3902      	subs	r1, #2
 800042e:	4460      	add	r0, ip
 8000430:	1ac0      	subs	r0, r0, r3
 8000432:	fbb0 f3f7 	udiv	r3, r0, r7
 8000436:	fb07 0013 	mls	r0, r7, r3, r0
 800043a:	b2ad      	uxth	r5, r5
 800043c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000440:	fb03 f00e 	mul.w	r0, r3, lr
 8000444:	42a8      	cmp	r0, r5
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x28a>
 8000448:	eb1c 0505 	adds.w	r5, ip, r5
 800044c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000450:	d216      	bcs.n	8000480 <__udivmoddi4+0x2b0>
 8000452:	42a8      	cmp	r0, r5
 8000454:	d914      	bls.n	8000480 <__udivmoddi4+0x2b0>
 8000456:	3b02      	subs	r3, #2
 8000458:	4465      	add	r5, ip
 800045a:	1a28      	subs	r0, r5, r0
 800045c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000460:	e738      	b.n	80002d4 <__udivmoddi4+0x104>
 8000462:	4631      	mov	r1, r6
 8000464:	4630      	mov	r0, r6
 8000466:	e707      	b.n	8000278 <__udivmoddi4+0xa8>
 8000468:	462f      	mov	r7, r5
 800046a:	e6e4      	b.n	8000236 <__udivmoddi4+0x66>
 800046c:	4618      	mov	r0, r3
 800046e:	e6f9      	b.n	8000264 <__udivmoddi4+0x94>
 8000470:	454b      	cmp	r3, r9
 8000472:	d2a9      	bcs.n	80003c8 <__udivmoddi4+0x1f8>
 8000474:	ebb9 0802 	subs.w	r8, r9, r2
 8000478:	eb65 0e0c 	sbc.w	lr, r5, ip
 800047c:	3801      	subs	r0, #1
 800047e:	e7a3      	b.n	80003c8 <__udivmoddi4+0x1f8>
 8000480:	4643      	mov	r3, r8
 8000482:	e7ea      	b.n	800045a <__udivmoddi4+0x28a>
 8000484:	4628      	mov	r0, r5
 8000486:	e794      	b.n	80003b2 <__udivmoddi4+0x1e2>
 8000488:	4641      	mov	r1, r8
 800048a:	e7d1      	b.n	8000430 <__udivmoddi4+0x260>
 800048c:	46d0      	mov	r8, sl
 800048e:	e77b      	b.n	8000388 <__udivmoddi4+0x1b8>
 8000490:	4464      	add	r4, ip
 8000492:	3802      	subs	r0, #2
 8000494:	e747      	b.n	8000326 <__udivmoddi4+0x156>
 8000496:	3b02      	subs	r3, #2
 8000498:	4465      	add	r5, ip
 800049a:	e72f      	b.n	80002fc <__udivmoddi4+0x12c>
 800049c:	4608      	mov	r0, r1
 800049e:	e706      	b.n	80002ae <__udivmoddi4+0xde>
 80004a0:	4631      	mov	r1, r6
 80004a2:	e6e9      	b.n	8000278 <__udivmoddi4+0xa8>

080004a4 <__aeabi_idiv0>:
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop

080004a8 <UARTDMA_UartIrqHandler>:
#include "string.h"
#include "scheduler.h"


void UARTDMA_UartIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
	if(huartdma->huart->Instance->SR & UART_FLAG_IDLE)       // Check if Idle flag is set
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	f003 0310 	and.w	r3, r3, #16
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d01a      	beq.n	80004f6 <UARTDMA_UartIrqHandler+0x4e>
	{

		volatile uint32_t tmp;
		tmp = huartdma->huart->Instance->SR;                      // Read status register
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	60fb      	str	r3, [r7, #12]
		tmp = huartdma->huart->Instance->DR;                      // Read data register
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	685b      	ldr	r3, [r3, #4]
 80004d2:	60fb      	str	r3, [r7, #12]
		huartdma->huart->hdmarx->Instance->CCR &= ~DMA_CCR_EN; 	  // Disable DMA - it will force Transfer Complete interrupt if it's enabled
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	f022 0201 	bic.w	r2, r2, #1
 80004ea:	601a      	str	r2, [r3, #0]
																  // BUT! It's only for DMA Streams(i.e F4), not for Channels like there in F103!
		tmp = tmp; // For unused warning
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	60fb      	str	r3, [r7, #12]
		UARTDMA_DmaIrqHandler(huartdma); // Since DMA IRQ won't start independently for Channels, we have to handle it manually
 80004f0:	6878      	ldr	r0, [r7, #4]
 80004f2:	f000 f804 	bl	80004fe <UARTDMA_DmaIrqHandler>
	}
}
 80004f6:	bf00      	nop
 80004f8:	3710      	adds	r7, #16
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <UARTDMA_DmaIrqHandler>:

void UARTDMA_DmaIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 80004fe:	b480      	push	{r7}
 8000500:	b089      	sub	sp, #36	; 0x24
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
	{
		__IO uint32_t ISR;   // DMA interrupt status register
		__IO uint32_t IFCR;  // DMA interrupt flag clear register
	} DMA_Base_Registers;

	DMA_Base_Registers *DmaRegisters = (DMA_Base_Registers *) huartdma->huart->hdmarx->DmaBaseAddress; // Take registers base address
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800050c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800050e:	61bb      	str	r3, [r7, #24]

	if (__HAL_DMA_GET_IT_SOURCE(huartdma->huart->hdmarx, DMA_IT_TC) != RESET) // Check if interrupt source is Transfer Complete
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f003 0302 	and.w	r3, r3, #2
 800051e:	2b00      	cmp	r3, #0
 8000520:	d075      	beq.n	800060e <UARTDMA_DmaIrqHandler+0x110>
	{
		DmaRegisters->IFCR = DMA_IFCR_CTCIF1 << huartdma->huart->hdmarx->ChannelIndex;	// Clear Transfer Complete flag
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052a:	2202      	movs	r2, #2
 800052c:	409a      	lsls	r2, r3
 800052e:	69bb      	ldr	r3, [r7, #24]
 8000530:	605a      	str	r2, [r3, #4]

		Length = DMA_RX_BUFFER_SIZE - huartdma->huart->hdmarx->Instance->CNDTR; // Get the Length of transfered data
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8000540:	617b      	str	r3, [r7, #20]

		UartBufferPointer = huartdma->UART_Buffer;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8000548:	613b      	str	r3, [r7, #16]
		DmaBufferPointer = 	huartdma->DMA_RX_Buffer;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	3304      	adds	r3, #4
 800054e:	60fb      	str	r3, [r7, #12]

		// Write received data for UART main buffer - circular buffer
		for(i = 0; i < Length; i++)
 8000550:	2300      	movs	r3, #0
 8000552:	83fb      	strh	r3, [r7, #30]
 8000554:	e035      	b.n	80005c2 <UARTDMA_DmaIrqHandler+0xc4>
		{
			TempHead = (huartdma->UartBufferHead + 1) % UART_BUFFER_SIZE;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	f8b3 3c04 	ldrh.w	r3, [r3, #3076]	; 0xc04
 800055c:	3301      	adds	r3, #1
 800055e:	425a      	negs	r2, r3
 8000560:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000564:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000568:	bf58      	it	pl
 800056a:	4253      	negpl	r3, r2
 800056c:	817b      	strh	r3, [r7, #10]
			if(TempHead == huartdma->UartBufferTail)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 8000574:	897a      	ldrh	r2, [r7, #10]
 8000576:	429a      	cmp	r2, r3
 8000578:	d106      	bne.n	8000588 <UARTDMA_DmaIrqHandler+0x8a>
			{
				huartdma->UartBufferHead = huartdma->UartBufferTail;	// No room for new data
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	f8b3 2c06 	ldrh.w	r2, [r3, #3078]	; 0xc06
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	f8a3 2c04 	strh.w	r2, [r3, #3076]	; 0xc04
 8000586:	e019      	b.n	80005bc <UARTDMA_DmaIrqHandler+0xbe>
			}
			else
			{
				UartBufferPointer[TempHead] = DmaBufferPointer[i];
 8000588:	8bfb      	ldrh	r3, [r7, #30]
 800058a:	68fa      	ldr	r2, [r7, #12]
 800058c:	441a      	add	r2, r3
 800058e:	897b      	ldrh	r3, [r7, #10]
 8000590:	6939      	ldr	r1, [r7, #16]
 8000592:	440b      	add	r3, r1
 8000594:	7812      	ldrb	r2, [r2, #0]
 8000596:	701a      	strb	r2, [r3, #0]
				if(UartBufferPointer[TempHead] == '\n')
 8000598:	897b      	ldrh	r3, [r7, #10]
 800059a:	693a      	ldr	r2, [r7, #16]
 800059c:	4413      	add	r3, r2
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b0a      	cmp	r3, #10
 80005a2:	d107      	bne.n	80005b4 <UARTDMA_DmaIrqHandler+0xb6>
				{
					huartdma->UartBufferLines++;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f893 3c08 	ldrb.w	r3, [r3, #3080]	; 0xc08
 80005aa:	3301      	adds	r3, #1
 80005ac:	b2da      	uxtb	r2, r3
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	f883 2c08 	strb.w	r2, [r3, #3080]	; 0xc08
				}
				huartdma->UartBufferHead = TempHead;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	897a      	ldrh	r2, [r7, #10]
 80005b8:	f8a3 2c04 	strh.w	r2, [r3, #3076]	; 0xc04
		for(i = 0; i < Length; i++)
 80005bc:	8bfb      	ldrh	r3, [r7, #30]
 80005be:	3301      	adds	r3, #1
 80005c0:	83fb      	strh	r3, [r7, #30]
 80005c2:	8bfb      	ldrh	r3, [r7, #30]
 80005c4:	697a      	ldr	r2, [r7, #20]
 80005c6:	429a      	cmp	r2, r3
 80005c8:	d8c5      	bhi.n	8000556 <UARTDMA_DmaIrqHandler+0x58>
			}
		}


		DmaRegisters->IFCR = 0x0FU << huartdma->huart->hdmarx->ChannelIndex; 		// Clear all interrupts
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d2:	220f      	movs	r2, #15
 80005d4:	409a      	lsls	r2, r3
 80005d6:	69bb      	ldr	r3, [r7, #24]
 80005d8:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CMAR = (uint32_t) huartdma->DMA_RX_Buffer; // Set memory address for DMA again
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	1d1a      	adds	r2, r3, #4
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	60da      	str	r2, [r3, #12]
		huartdma->huart->hdmarx->Instance->CNDTR = DMA_RX_BUFFER_SIZE; // Set number of bytes to receive
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005f4:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CCR |= DMA_CCR_EN;            	// Start DMA transfer
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f042 0201 	orr.w	r2, r2, #1
 800060c:	601a      	str	r2, [r3, #0]
	}
}
 800060e:	bf00      	nop
 8000610:	3724      	adds	r7, #36	; 0x24
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr

08000618 <UARTDMA_GetCharFromBuffer>:

int UARTDMA_GetCharFromBuffer(UARTDMA_HandleTypeDef *huartdma)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	if(huartdma->UartBufferHead == huartdma->UartBufferTail)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f8b3 2c04 	ldrh.w	r2, [r3, #3076]	; 0xc04
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 800062c:	429a      	cmp	r2, r3
 800062e:	d102      	bne.n	8000636 <UARTDMA_GetCharFromBuffer+0x1e>
	{
		return -1; // error - no char to return
 8000630:	f04f 33ff 	mov.w	r3, #4294967295
 8000634:	e016      	b.n	8000664 <UARTDMA_GetCharFromBuffer+0x4c>
	}
	huartdma->UartBufferTail = (huartdma->UartBufferTail + 1) % UART_BUFFER_SIZE;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 800063c:	3301      	adds	r3, #1
 800063e:	425a      	negs	r2, r3
 8000640:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000644:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000648:	bf58      	it	pl
 800064a:	4253      	negpl	r3, r2
 800064c:	b29a      	uxth	r2, r3
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	f8a3 2c06 	strh.w	r2, [r3, #3078]	; 0xc06

	return huartdma->UART_Buffer[huartdma->UartBufferTail];
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 800065a:	461a      	mov	r2, r3
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	4413      	add	r3, r2
 8000660:	f893 3404 	ldrb.w	r3, [r3, #1028]	; 0x404
}
 8000664:	4618      	mov	r0, r3
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	bc80      	pop	{r7}
 800066c:	4770      	bx	lr

0800066e <UARTDMA_IsDataReady>:

uint8_t UARTDMA_IsDataReady(UARTDMA_HandleTypeDef *huartdma)
{
 800066e:	b480      	push	{r7}
 8000670:	b083      	sub	sp, #12
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
	if(huartdma->UartBufferLines)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f893 3c08 	ldrb.w	r3, [r3, #3080]	; 0xc08
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <UARTDMA_IsDataReady+0x16>
		return 1;
 8000680:	2301      	movs	r3, #1
 8000682:	e000      	b.n	8000686 <UARTDMA_IsDataReady+0x18>
	else
		return 0;
 8000684:	2300      	movs	r3, #0
}
 8000686:	4618      	mov	r0, r3
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr

08000690 <UARTDMA_GetLineFromBuffer>:

int UARTDMA_GetLineFromBuffer(UARTDMA_HandleTypeDef *huartdma, char *OutBuffer)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	6039      	str	r1, [r7, #0]
	char TempChar;
	char* LinePointer = OutBuffer;
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	60fb      	str	r3, [r7, #12]
	if(huartdma->UartBufferLines)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	f893 3c08 	ldrb.w	r3, [r3, #3080]	; 0xc08
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d024      	beq.n	80006f2 <UARTDMA_GetLineFromBuffer+0x62>
	{
		while((TempChar = UARTDMA_GetCharFromBuffer(huartdma)))
 80006a8:	e00e      	b.n	80006c8 <UARTDMA_GetLineFromBuffer+0x38>
		{
			if(TempChar == '\n')
 80006aa:	7afb      	ldrb	r3, [r7, #11]
 80006ac:	2b0a      	cmp	r3, #10
 80006ae:	d014      	beq.n	80006da <UARTDMA_GetLineFromBuffer+0x4a>
			{
				break;
			}
			if((TempChar != '\n') && (TempChar != '\r')){
 80006b0:	7afb      	ldrb	r3, [r7, #11]
 80006b2:	2b0a      	cmp	r3, #10
 80006b4:	d008      	beq.n	80006c8 <UARTDMA_GetLineFromBuffer+0x38>
 80006b6:	7afb      	ldrb	r3, [r7, #11]
 80006b8:	2b0d      	cmp	r3, #13
 80006ba:	d005      	beq.n	80006c8 <UARTDMA_GetLineFromBuffer+0x38>
				*LinePointer = TempChar;
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	7afa      	ldrb	r2, [r7, #11]
 80006c0:	701a      	strb	r2, [r3, #0]
				LinePointer++;
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	3301      	adds	r3, #1
 80006c6:	60fb      	str	r3, [r7, #12]
		while((TempChar = UARTDMA_GetCharFromBuffer(huartdma)))
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f7ff ffa5 	bl	8000618 <UARTDMA_GetCharFromBuffer>
 80006ce:	4603      	mov	r3, r0
 80006d0:	72fb      	strb	r3, [r7, #11]
 80006d2:	7afb      	ldrb	r3, [r7, #11]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d1e8      	bne.n	80006aa <UARTDMA_GetLineFromBuffer+0x1a>
 80006d8:	e000      	b.n	80006dc <UARTDMA_GetLineFromBuffer+0x4c>
				break;
 80006da:	bf00      	nop
			}
		}
		*LinePointer = 0; // end of cstring
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]
		huartdma->UartBufferLines--; // decrement line counter
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	f893 3c08 	ldrb.w	r3, [r3, #3080]	; 0xc08
 80006e8:	3b01      	subs	r3, #1
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	f883 2c08 	strb.w	r2, [r3, #3080]	; 0xc08
	}
	return 0;
 80006f2:	2300      	movs	r3, #0
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3710      	adds	r7, #16
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <UARTDMA_Init>:

void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	6039      	str	r1, [r7, #0]
	huartdma->huart = huart;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	683a      	ldr	r2, [r7, #0]
 800070a:	601a      	str	r2, [r3, #0]

	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	68da      	ldr	r2, [r3, #12]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f042 0210 	orr.w	r2, r2, #16
 800071e:	60da      	str	r2, [r3, #12]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f042 0202 	orr.w	r2, r2, #2
 8000736:	601a      	str	r2, [r3, #0]

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	6818      	ldr	r0, [r3, #0]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3304      	adds	r3, #4
 8000740:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000744:	4619      	mov	r1, r3
 8000746:	f002 fe22 	bl	800338e <HAL_UART_Receive_DMA>

	huartdma->huart->hdmarx->Instance->CCR &= ~DMA_CCR_HTIE; // Disable DMA Half Complete interrupt
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f022 0204 	bic.w	r2, r2, #4
 8000760:	601a      	str	r2, [r3, #0]
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
	...

0800076c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000774:	1d39      	adds	r1, r7, #4
 8000776:	f04f 33ff 	mov.w	r3, #4294967295
 800077a:	2201      	movs	r2, #1
 800077c:	4803      	ldr	r0, [pc, #12]	; (800078c <__io_putchar+0x20>)
 800077e:	f002 fd83 	bl	8003288 <HAL_UART_Transmit>
	return ch;
 8000782:	687b      	ldr	r3, [r7, #4]
}
 8000784:	4618      	mov	r0, r3
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000ce0 	.word	0x20000ce0

08000790 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000792:	f5ad 5dd7 	sub.w	sp, sp, #6880	; 0x1ae0
 8000796:	b081      	sub	sp, #4
 8000798:	af04      	add	r7, sp, #16
	/* USER CODE BEGIN 1 */

	srand(time(NULL));
 800079a:	2000      	movs	r0, #0
 800079c:	f003 fb2a 	bl	8003df4 <time>
 80007a0:	4602      	mov	r2, r0
 80007a2:	460b      	mov	r3, r1
 80007a4:	4613      	mov	r3, r2
 80007a6:	4618      	mov	r0, r3
 80007a8:	f003 fa8a 	bl	8003cc0 <srand>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80007ac:	f001 fadb 	bl	8001d66 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80007b0:	f000 fe30 	bl	8001414 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80007b4:	f000 ff42 	bl	800163c <MX_GPIO_Init>
	MX_DMA_Init();
 80007b8:	f000 ff22 	bl	8001600 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80007bc:	f000 fecc 	bl	8001558 <MX_USART2_UART_Init>
	MX_UART4_Init();
 80007c0:	f000 fe76 	bl	80014b0 <MX_UART4_Init>
	MX_USART1_UART_Init();
 80007c4:	f000 fe9e 	bl	8001504 <MX_USART1_UART_Init>
	MX_USART3_UART_Init();
 80007c8:	f000 fef0 	bl	80015ac <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	UARTDMA_Init(&huartdma6, &huart2);
 80007cc:	49d5      	ldr	r1, [pc, #852]	; (8000b24 <main+0x394>)
 80007ce:	48d6      	ldr	r0, [pc, #856]	; (8000b28 <main+0x398>)
 80007d0:	f7ff ff94 	bl	80006fc <UARTDMA_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */


	command LTE_sim_check_active = {
 80007d4:	4bd5      	ldr	r3, [pc, #852]	; (8000b2c <main+0x39c>)
 80007d6:	f507 54d4 	add.w	r4, r7, #6784	; 0x1a80
 80007da:	f104 041c 	add.w	r4, r4, #28
 80007de:	461d      	mov	r5, r3
 80007e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007e4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80007e8:	e884 0003 	stmia.w	r4, {r0, r1}
			.act_on_error = RETRY,
			.retry_counter = 3
	};


	command LTE_deactivate_gprs = {
 80007ec:	4bd0      	ldr	r3, [pc, #832]	; (8000b30 <main+0x3a0>)
 80007ee:	f507 54d4 	add.w	r4, r7, #6784	; 0x1a80
 80007f2:	f104 0404 	add.w	r4, r4, #4
 80007f6:	461d      	mov	r5, r3
 80007f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007fc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000800:	e884 0003 	stmia.w	r4, {r0, r1}
			.act_on_error = RETRY,
			.retry_counter = 3
	};


	command LTE_attach_gprs = {
 8000804:	4bcb      	ldr	r3, [pc, #812]	; (8000b34 <main+0x3a4>)
 8000806:	f507 54d3 	add.w	r4, r7, #6752	; 0x1a60
 800080a:	f104 040c 	add.w	r4, r4, #12
 800080e:	461d      	mov	r5, r3
 8000810:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000812:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000814:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000818:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = RETRY,
			.retry_counter = 3
	};

	command LTE_set_apn = {
 800081c:	4bc6      	ldr	r3, [pc, #792]	; (8000b38 <main+0x3a8>)
 800081e:	f507 54d2 	add.w	r4, r7, #6720	; 0x1a40
 8000822:	f104 0414 	add.w	r4, r4, #20
 8000826:	461d      	mov	r5, r3
 8000828:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800082a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800082c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000830:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = RETRY,
			.retry_counter = 3
	};

	command LTE_gprs_up = {
 8000834:	4bc1      	ldr	r3, [pc, #772]	; (8000b3c <main+0x3ac>)
 8000836:	f507 54d1 	add.w	r4, r7, #6688	; 0x1a20
 800083a:	f104 041c 	add.w	r4, r4, #28
 800083e:	461d      	mov	r5, r3
 8000840:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000842:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000844:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000848:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = RETRY,
			.retry_counter = 3
	};

	command LTE_get_ip = {
 800084c:	4bbc      	ldr	r3, [pc, #752]	; (8000b40 <main+0x3b0>)
 800084e:	f507 54d1 	add.w	r4, r7, #6688	; 0x1a20
 8000852:	f104 0404 	add.w	r4, r4, #4
 8000856:	461d      	mov	r5, r3
 8000858:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800085a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800085c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000860:	e884 0003 	stmia.w	r4, {r0, r1}
			.act_on_error = RETRY,
			.retry_counter = 3
	};


	command LTE_init_gps = {
 8000864:	4bb7      	ldr	r3, [pc, #732]	; (8000b44 <main+0x3b4>)
 8000866:	f507 54d0 	add.w	r4, r7, #6656	; 0x1a00
 800086a:	f104 040c 	add.w	r4, r4, #12
 800086e:	461d      	mov	r5, r3
 8000870:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000872:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000874:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000878:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = RETRY,
			.retry_counter = 3
	};

	command LTE_get_position = {
 800087c:	4bb2      	ldr	r3, [pc, #712]	; (8000b48 <main+0x3b8>)
 800087e:	f507 54cf 	add.w	r4, r7, #6624	; 0x19e0
 8000882:	f104 0414 	add.w	r4, r4, #20
 8000886:	461d      	mov	r5, r3
 8000888:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800088a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800088c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000890:	e884 0003 	stmia.w	r4, {r0, r1}
			.act_on_error = MOVE_ON,
			.retry_counter = 0
	};


	command LTE_ftp_quit = {
 8000894:	4bad      	ldr	r3, [pc, #692]	; (8000b4c <main+0x3bc>)
 8000896:	f507 54ce 	add.w	r4, r7, #6592	; 0x19c0
 800089a:	f104 041c 	add.w	r4, r4, #28
 800089e:	461d      	mov	r5, r3
 80008a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008a4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80008a8:	e884 0003 	stmia.w	r4, {r0, r1}
			.act_on_error = MOVE_ON,
			.retry_counter = 0
	};


	command LTE_bearer_1 = {
 80008ac:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 80008b0:	f103 0310 	add.w	r3, r3, #16
 80008b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80008b8:	4aa5      	ldr	r2, [pc, #660]	; (8000b50 <main+0x3c0>)
 80008ba:	461c      	mov	r4, r3
 80008bc:	4615      	mov	r5, r2
 80008be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008c2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80008c6:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = MOVE_ON,
			.retry_counter = 0
	};

	command LTE_bearer_2 = {
 80008ca:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 80008ce:	f103 0310 	add.w	r3, r3, #16
 80008d2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80008d6:	4a9f      	ldr	r2, [pc, #636]	; (8000b54 <main+0x3c4>)
 80008d8:	461c      	mov	r4, r3
 80008da:	4615      	mov	r5, r2
 80008dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008e0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80008e4:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = MOVE_ON,
			.retry_counter = 0
	};

	command LTE_bearer_3 = {
 80008e8:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 80008ec:	f103 0310 	add.w	r3, r3, #16
 80008f0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80008f4:	4a98      	ldr	r2, [pc, #608]	; (8000b58 <main+0x3c8>)
 80008f6:	461c      	mov	r4, r3
 80008f8:	4615      	mov	r5, r2
 80008fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008fe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000902:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = MOVE_ON,
			.retry_counter = 0
	};

	command LTE_set_dns = {
 8000906:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 800090a:	f103 0310 	add.w	r3, r3, #16
 800090e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8000912:	4a92      	ldr	r2, [pc, #584]	; (8000b5c <main+0x3cc>)
 8000914:	461c      	mov	r4, r3
 8000916:	4615      	mov	r5, r2
 8000918:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800091a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800091c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000920:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = MOVE_ON,
			.retry_counter = 0
	};

	command LTE_ftp_bearer = {
 8000924:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8000928:	f103 0310 	add.w	r3, r3, #16
 800092c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8000930:	4a8b      	ldr	r2, [pc, #556]	; (8000b60 <main+0x3d0>)
 8000932:	461c      	mov	r4, r3
 8000934:	4615      	mov	r5, r2
 8000936:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000938:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800093a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800093e:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = MOVE_ON,
			.retry_counter = 0
	};

	command LTE_ftp_type = {
 8000942:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8000946:	f103 0310 	add.w	r3, r3, #16
 800094a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800094e:	4a85      	ldr	r2, [pc, #532]	; (8000b64 <main+0x3d4>)
 8000950:	461c      	mov	r4, r3
 8000952:	4615      	mov	r5, r2
 8000954:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000956:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000958:	e895 0003 	ldmia.w	r5, {r0, r1}
 800095c:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = MOVE_ON,
			.retry_counter = 0
	};

	command LTE_ftp_ip = {
 8000960:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8000964:	f103 0310 	add.w	r3, r3, #16
 8000968:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800096c:	4a7e      	ldr	r2, [pc, #504]	; (8000b68 <main+0x3d8>)
 800096e:	461c      	mov	r4, r3
 8000970:	4615      	mov	r5, r2
 8000972:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000974:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000976:	e895 0003 	ldmia.w	r5, {r0, r1}
 800097a:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = MOVE_ON,
			.retry_counter = 0
	};

	command LTE_ftp_user = {
 800097e:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8000982:	f103 0310 	add.w	r3, r3, #16
 8000986:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800098a:	4a78      	ldr	r2, [pc, #480]	; (8000b6c <main+0x3dc>)
 800098c:	461c      	mov	r4, r3
 800098e:	4615      	mov	r5, r2
 8000990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000994:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000998:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = MOVE_ON,
			.retry_counter = 0
	};

	command LTE_ftp_pass = {
 800099c:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 80009a0:	f103 0310 	add.w	r3, r3, #16
 80009a4:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80009a8:	4a71      	ldr	r2, [pc, #452]	; (8000b70 <main+0x3e0>)
 80009aa:	461c      	mov	r4, r3
 80009ac:	4615      	mov	r5, r2
 80009ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009b2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80009b6:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = MOVE_ON,
			.retry_counter = 0
	};

	command LTE_ftp_port = {
 80009ba:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 80009be:	f103 0310 	add.w	r3, r3, #16
 80009c2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80009c6:	4a6b      	ldr	r2, [pc, #428]	; (8000b74 <main+0x3e4>)
 80009c8:	461c      	mov	r4, r3
 80009ca:	4615      	mov	r5, r2
 80009cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009d0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80009d4:	e884 0003 	stmia.w	r4, {r0, r1}
			.act_on_error = MOVE_ON,
			.retry_counter = 0
	};


	command LTE_ftp_path = {
 80009d8:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 80009dc:	f103 0310 	add.w	r3, r3, #16
 80009e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80009e4:	4a64      	ldr	r2, [pc, #400]	; (8000b78 <main+0x3e8>)
 80009e6:	461c      	mov	r4, r3
 80009e8:	4615      	mov	r5, r2
 80009ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009ee:	e895 0003 	ldmia.w	r5, {r0, r1}
 80009f2:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = MOVE_ON,
			.retry_counter = 0
	};

	command LTE_get_time = {
 80009f6:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 80009fa:	f103 0310 	add.w	r3, r3, #16
 80009fe:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000a02:	4a5e      	ldr	r2, [pc, #376]	; (8000b7c <main+0x3ec>)
 8000a04:	461c      	mov	r4, r3
 8000a06:	4615      	mov	r5, r2
 8000a08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a0c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a10:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = MOVE_ON,
			.retry_counter = 0
	};

	char fileName[60] = "AT+FTPPUTNAME=\"unknown_";
 8000a14:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8000a18:	f103 0310 	add.w	r3, r3, #16
 8000a1c:	f5a3 7614 	sub.w	r6, r3, #592	; 0x250
 8000a20:	4b57      	ldr	r3, [pc, #348]	; (8000b80 <main+0x3f0>)
 8000a22:	4634      	mov	r4, r6
 8000a24:	461d      	mov	r5, r3
 8000a26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a2a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a2e:	e884 0003 	stmia.w	r4, {r0, r1}
 8000a32:	f106 0318 	add.w	r3, r6, #24
 8000a36:	2224      	movs	r2, #36	; 0x24
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f003 f8aa 	bl	8003b94 <memset>
	char random[20];
	itoa(rand(), random, 10);
 8000a40:	f003 f96c 	bl	8003d1c <rand>
 8000a44:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8000a48:	f103 030c 	add.w	r3, r3, #12
 8000a4c:	220a      	movs	r2, #10
 8000a4e:	4619      	mov	r1, r3
 8000a50:	f003 f89e 	bl	8003b90 <itoa>
	strcat(fileName, random);
 8000a54:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 8000a58:	f102 020c 	add.w	r2, r2, #12
 8000a5c:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 8000a60:	4611      	mov	r1, r2
 8000a62:	4618      	mov	r0, r3
 8000a64:	f003 f998 	bl	8003d98 <strcat>
	strcat(fileName, ".txt\"");
 8000a68:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff fb8f 	bl	8000190 <strlen>
 8000a72:	4603      	mov	r3, r0
 8000a74:	461a      	mov	r2, r3
 8000a76:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 8000a7a:	4413      	add	r3, r2
 8000a7c:	4a41      	ldr	r2, [pc, #260]	; (8000b84 <main+0x3f4>)
 8000a7e:	6810      	ldr	r0, [r2, #0]
 8000a80:	6018      	str	r0, [r3, #0]
 8000a82:	8892      	ldrh	r2, [r2, #4]
 8000a84:	809a      	strh	r2, [r3, #4]


	printf("\t\tFILE_RAND: %s\r\n", fileName);
 8000a86:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	483e      	ldr	r0, [pc, #248]	; (8000b88 <main+0x3f8>)
 8000a8e:	f003 f889 	bl	8003ba4 <iprintf>

	command LTE_ftp_filename = {
 8000a92:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8000a96:	f103 0310 	add.w	r3, r3, #16
 8000a9a:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8000a9e:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8000aa8:	f103 0310 	add.w	r3, r3, #16
 8000aac:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8000ab0:	4a36      	ldr	r2, [pc, #216]	; (8000b8c <main+0x3fc>)
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8000ab8:	f103 0310 	add.w	r3, r3, #16
 8000abc:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8000ac0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8000aca:	f103 0310 	add.w	r3, r3, #16
 8000ace:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8000ad2:	4a2f      	ldr	r2, [pc, #188]	; (8000b90 <main+0x400>)
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8000ada:	f103 0310 	add.w	r3, r3, #16
 8000ade:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8000ae2:	2203      	movs	r2, #3
 8000ae4:	741a      	strb	r2, [r3, #16]
 8000ae6:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8000aea:	f103 0310 	add.w	r3, r3, #16
 8000aee:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8000af2:	2200      	movs	r2, #0
 8000af4:	615a      	str	r2, [r3, #20]
			.bad_answer = "ERROR",
			.act_on_error = MOVE_ON,
			.retry_counter = 0
	};

	command LTE_ftp_put = {
 8000af6:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8000afa:	f103 0310 	add.w	r3, r3, #16
 8000afe:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8000b02:	4a24      	ldr	r2, [pc, #144]	; (8000b94 <main+0x404>)
 8000b04:	461c      	mov	r4, r3
 8000b06:	4615      	mov	r5, r2
 8000b08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b0c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b10:	e884 0003 	stmia.w	r4, {r0, r1}
			.retry_counter = 0
	};



	command LTE_reset_action = {
 8000b14:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8000b18:	f103 0310 	add.w	r3, r3, #16
 8000b1c:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8000b20:	461a      	mov	r2, r3
 8000b22:	e039      	b.n	8000b98 <main+0x408>
 8000b24:	20000d28 	.word	0x20000d28
 8000b28:	2000008c 	.word	0x2000008c
 8000b2c:	08005158 	.word	0x08005158
 8000b30:	08005170 	.word	0x08005170
 8000b34:	08005188 	.word	0x08005188
 8000b38:	080051a0 	.word	0x080051a0
 8000b3c:	080051b8 	.word	0x080051b8
 8000b40:	080051d0 	.word	0x080051d0
 8000b44:	080051e8 	.word	0x080051e8
 8000b48:	08005200 	.word	0x08005200
 8000b4c:	08005218 	.word	0x08005218
 8000b50:	08005230 	.word	0x08005230
 8000b54:	08005248 	.word	0x08005248
 8000b58:	08005260 	.word	0x08005260
 8000b5c:	08005278 	.word	0x08005278
 8000b60:	08005290 	.word	0x08005290
 8000b64:	080052a8 	.word	0x080052a8
 8000b68:	080052c0 	.word	0x080052c0
 8000b6c:	080052d8 	.word	0x080052d8
 8000b70:	080052f0 	.word	0x080052f0
 8000b74:	08005308 	.word	0x08005308
 8000b78:	08005320 	.word	0x08005320
 8000b7c:	08005338 	.word	0x08005338
 8000b80:	08005350 	.word	0x08005350
 8000b84:	080050ac 	.word	0x080050ac
 8000b88:	080050b4 	.word	0x080050b4
 8000b8c:	08004efc 	.word	0x08004efc
 8000b90:	08004f00 	.word	0x08004f00
 8000b94:	0800538c 	.word	0x0800538c
 8000b98:	2300      	movs	r3, #0
 8000b9a:	6013      	str	r3, [r2, #0]
 8000b9c:	6053      	str	r3, [r2, #4]
 8000b9e:	6093      	str	r3, [r2, #8]
 8000ba0:	60d3      	str	r3, [r2, #12]
 8000ba2:	6113      	str	r3, [r2, #16]
 8000ba4:	6153      	str	r3, [r2, #20]
 8000ba6:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8000baa:	f103 0310 	add.w	r3, r3, #16
 8000bae:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8000bb2:	4ae3      	ldr	r2, [pc, #908]	; (8000f40 <main+0x7b0>)
 8000bb4:	601a      	str	r2, [r3, #0]
			.cmd = "RESET_ACTION"
	};

	uint8_t current_action = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 8000bbc:	f102 020f 	add.w	r2, r2, #15
 8000bc0:	7013      	strb	r3, [r2, #0]

	command action_list[255];


	uint8_t last_action = 23;
 8000bc2:	2317      	movs	r3, #23
 8000bc4:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 8000bc8:	f102 021f 	add.w	r2, r2, #31
 8000bcc:	7013      	strb	r3, [r2, #0]

	action_list[0] = LTE_sim_check_active;
 8000bce:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8000bd2:	f6a3 2394 	subw	r3, r3, #2708	; 0xa94
 8000bd6:	461d      	mov	r5, r3
 8000bd8:	f507 54d4 	add.w	r4, r7, #6784	; 0x1a80
 8000bdc:	f104 041c 	add.w	r4, r4, #28
 8000be0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000be2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000be4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000be8:	e885 0003 	stmia.w	r5, {r0, r1}
	action_list[1] = LTE_deactivate_gprs;
 8000bec:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8000bf0:	f6a3 2394 	subw	r3, r3, #2708	; 0xa94
 8000bf4:	f103 0418 	add.w	r4, r3, #24
 8000bf8:	f507 55d4 	add.w	r5, r7, #6784	; 0x1a80
 8000bfc:	f105 0504 	add.w	r5, r5, #4
 8000c00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c04:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c08:	e884 0003 	stmia.w	r4, {r0, r1}
	//action_list[1] = LTE_get_time;
	action_list[2] = LTE_attach_gprs;
 8000c0c:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8000c10:	f6a3 2394 	subw	r3, r3, #2708	; 0xa94
 8000c14:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8000c18:	f507 55d3 	add.w	r5, r7, #6752	; 0x1a60
 8000c1c:	f105 050c 	add.w	r5, r5, #12
 8000c20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c24:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c28:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[3] = LTE_set_apn;
 8000c2c:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8000c30:	f6a3 2394 	subw	r3, r3, #2708	; 0xa94
 8000c34:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8000c38:	f507 55d2 	add.w	r5, r7, #6720	; 0x1a40
 8000c3c:	f105 0514 	add.w	r5, r5, #20
 8000c40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c44:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c48:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[4] = LTE_gprs_up;
 8000c4c:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8000c50:	f6a3 2394 	subw	r3, r3, #2708	; 0xa94
 8000c54:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8000c58:	f507 55d1 	add.w	r5, r7, #6688	; 0x1a20
 8000c5c:	f105 051c 	add.w	r5, r5, #28
 8000c60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c64:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c68:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[5] = LTE_get_ip;
 8000c6c:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8000c70:	f6a3 2394 	subw	r3, r3, #2708	; 0xa94
 8000c74:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8000c78:	f507 55d1 	add.w	r5, r7, #6688	; 0x1a20
 8000c7c:	f105 0504 	add.w	r5, r5, #4
 8000c80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c84:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c88:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[6] = LTE_init_gps;
 8000c8c:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8000c90:	f6a3 2394 	subw	r3, r3, #2708	; 0xa94
 8000c94:	f103 0490 	add.w	r4, r3, #144	; 0x90
 8000c98:	f507 55d0 	add.w	r5, r7, #6656	; 0x1a00
 8000c9c:	f105 050c 	add.w	r5, r5, #12
 8000ca0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ca2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ca4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ca8:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[7] = LTE_reset_action;
 8000cac:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8000cb0:	f6a3 2394 	subw	r3, r3, #2708	; 0xa94
 8000cb4:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 8000cb8:	f102 0210 	add.w	r2, r2, #16
 8000cbc:	f5a2 722b 	sub.w	r2, r2, #684	; 0x2ac
 8000cc0:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8000cc4:	4615      	mov	r5, r2
 8000cc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cca:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000cce:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[8] = LTE_get_position;
 8000cd2:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8000cd6:	f6a3 2394 	subw	r3, r3, #2708	; 0xa94
 8000cda:	f103 04c0 	add.w	r4, r3, #192	; 0xc0
 8000cde:	f507 55cf 	add.w	r5, r7, #6624	; 0x19e0
 8000ce2:	f105 0514 	add.w	r5, r5, #20
 8000ce6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ce8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cea:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000cee:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[9] = LTE_ftp_quit;
 8000cf2:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8000cf6:	f6a3 2394 	subw	r3, r3, #2708	; 0xa94
 8000cfa:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8000cfe:	f507 55ce 	add.w	r5, r7, #6592	; 0x19c0
 8000d02:	f105 051c 	add.w	r5, r5, #28
 8000d06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d0a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d0e:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[10] = LTE_bearer_1;
 8000d12:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8000d16:	f6a3 2394 	subw	r3, r3, #2708	; 0xa94
 8000d1a:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 8000d1e:	f102 0210 	add.w	r2, r2, #16
 8000d22:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000d26:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 8000d2a:	4615      	mov	r5, r2
 8000d2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d30:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d34:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[11] = LTE_bearer_2;
 8000d38:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8000d3c:	f6a3 2394 	subw	r3, r3, #2708	; 0xa94
 8000d40:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 8000d44:	f102 0210 	add.w	r2, r2, #16
 8000d48:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 8000d4c:	f503 7484 	add.w	r4, r3, #264	; 0x108
 8000d50:	4615      	mov	r5, r2
 8000d52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d56:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d5a:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[12] = LTE_bearer_3;
 8000d5e:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8000d62:	f6a3 2394 	subw	r3, r3, #2708	; 0xa94
 8000d66:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 8000d6a:	f102 0210 	add.w	r2, r2, #16
 8000d6e:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8000d72:	f503 7490 	add.w	r4, r3, #288	; 0x120
 8000d76:	4615      	mov	r5, r2
 8000d78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d7c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d80:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[13] = LTE_set_dns;
 8000d84:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8000d88:	f6a3 2394 	subw	r3, r3, #2708	; 0xa94
 8000d8c:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 8000d90:	f102 0210 	add.w	r2, r2, #16
 8000d94:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 8000d98:	f503 749c 	add.w	r4, r3, #312	; 0x138
 8000d9c:	4615      	mov	r5, r2
 8000d9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000da0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000da2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000da6:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[14] = LTE_ftp_bearer;
 8000daa:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8000dae:	f6a3 2394 	subw	r3, r3, #2708	; 0xa94
 8000db2:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 8000db6:	f102 0210 	add.w	r2, r2, #16
 8000dba:	f5a2 72b6 	sub.w	r2, r2, #364	; 0x16c
 8000dbe:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 8000dc2:	4615      	mov	r5, r2
 8000dc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dc8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000dcc:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[15] = LTE_ftp_type;
 8000dd0:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8000dd4:	f6a3 2394 	subw	r3, r3, #2708	; 0xa94
 8000dd8:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 8000ddc:	f102 0210 	add.w	r2, r2, #16
 8000de0:	f5a2 72c2 	sub.w	r2, r2, #388	; 0x184
 8000de4:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 8000de8:	4615      	mov	r5, r2
 8000dea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dee:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000df2:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[16] = LTE_ftp_ip;
 8000df6:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8000dfa:	f6a3 2394 	subw	r3, r3, #2708	; 0xa94
 8000dfe:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 8000e02:	f102 0210 	add.w	r2, r2, #16
 8000e06:	f5a2 72ce 	sub.w	r2, r2, #412	; 0x19c
 8000e0a:	f503 74c0 	add.w	r4, r3, #384	; 0x180
 8000e0e:	4615      	mov	r5, r2
 8000e10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e14:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e18:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[17] = LTE_ftp_user;
 8000e1c:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8000e20:	f6a3 2394 	subw	r3, r3, #2708	; 0xa94
 8000e24:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 8000e28:	f102 0210 	add.w	r2, r2, #16
 8000e2c:	f5a2 72da 	sub.w	r2, r2, #436	; 0x1b4
 8000e30:	f503 74cc 	add.w	r4, r3, #408	; 0x198
 8000e34:	4615      	mov	r5, r2
 8000e36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e3a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e3e:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[18] = LTE_ftp_pass;
 8000e42:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8000e46:	f6a3 2394 	subw	r3, r3, #2708	; 0xa94
 8000e4a:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 8000e4e:	f102 0210 	add.w	r2, r2, #16
 8000e52:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8000e56:	f503 74d8 	add.w	r4, r3, #432	; 0x1b0
 8000e5a:	4615      	mov	r5, r2
 8000e5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e60:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e64:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[19] = LTE_ftp_port;
 8000e68:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8000e6c:	f6a3 2394 	subw	r3, r3, #2708	; 0xa94
 8000e70:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 8000e74:	f102 0210 	add.w	r2, r2, #16
 8000e78:	f5a2 72f2 	sub.w	r2, r2, #484	; 0x1e4
 8000e7c:	f503 74e4 	add.w	r4, r3, #456	; 0x1c8
 8000e80:	4615      	mov	r5, r2
 8000e82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e86:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e8a:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[20] = LTE_ftp_path;
 8000e8e:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8000e92:	f6a3 2394 	subw	r3, r3, #2708	; 0xa94
 8000e96:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 8000e9a:	f102 0210 	add.w	r2, r2, #16
 8000e9e:	f5a2 72fe 	sub.w	r2, r2, #508	; 0x1fc
 8000ea2:	f503 74f0 	add.w	r4, r3, #480	; 0x1e0
 8000ea6:	4615      	mov	r5, r2
 8000ea8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eac:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000eb0:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[21] = LTE_get_time;
 8000eb4:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8000eb8:	f6a3 2394 	subw	r3, r3, #2708	; 0xa94
 8000ebc:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 8000ec0:	f102 0210 	add.w	r2, r2, #16
 8000ec4:	f5a2 7205 	sub.w	r2, r2, #532	; 0x214
 8000ec8:	f503 74fc 	add.w	r4, r3, #504	; 0x1f8
 8000ecc:	4615      	mov	r5, r2
 8000ece:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ed0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ed2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ed6:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[22] = LTE_ftp_filename;
 8000eda:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8000ede:	f6a3 2394 	subw	r3, r3, #2708	; 0xa94
 8000ee2:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 8000ee6:	f102 0210 	add.w	r2, r2, #16
 8000eea:	f5a2 721f 	sub.w	r2, r2, #636	; 0x27c
 8000eee:	f503 7404 	add.w	r4, r3, #528	; 0x210
 8000ef2:	4615      	mov	r5, r2
 8000ef4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ef6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ef8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000efc:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[23] = LTE_ftp_put;
 8000f00:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8000f04:	f6a3 2394 	subw	r3, r3, #2708	; 0xa94
 8000f08:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 8000f0c:	f102 0210 	add.w	r2, r2, #16
 8000f10:	f5a2 7225 	sub.w	r2, r2, #660	; 0x294
 8000f14:	f503 740a 	add.w	r4, r3, #552	; 0x228
 8000f18:	4615      	mov	r5, r2
 8000f1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f1e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f22:	e884 0003 	stmia.w	r4, {r0, r1}




	uint8_t startup = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 8000f2c:	f102 020e 	add.w	r2, r2, #14
 8000f30:	7013      	strb	r3, [r2, #0]

	for(int i = 0; i< BUFFER_SIZE; i++){
 8000f32:	2300      	movs	r3, #0
 8000f34:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 8000f38:	f102 0208 	add.w	r2, r2, #8
 8000f3c:	6013      	str	r3, [r2, #0]
 8000f3e:	e015      	b.n	8000f6c <main+0x7dc>
 8000f40:	080050c8 	.word	0x080050c8
		ParseBuffer[i] ='\0';
 8000f44:	4aca      	ldr	r2, [pc, #808]	; (8001270 <main+0xae0>)
 8000f46:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8000f4a:	f103 0308 	add.w	r3, r3, #8
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4413      	add	r3, r2
 8000f52:	2200      	movs	r2, #0
 8000f54:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i< BUFFER_SIZE; i++){
 8000f56:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8000f5a:	f103 0308 	add.w	r3, r3, #8
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	3301      	adds	r3, #1
 8000f62:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 8000f66:	f102 0208 	add.w	r2, r2, #8
 8000f6a:	6013      	str	r3, [r2, #0]
 8000f6c:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8000f70:	f103 0308 	add.w	r3, r3, #8
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f7a:	dbe3      	blt.n	8000f44 <main+0x7b4>
	}

	while (1)
	{

		if(current_action >= last_action){
 8000f7c:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8000f80:	f103 030f 	add.w	r3, r3, #15
 8000f84:	781a      	ldrb	r2, [r3, #0]
 8000f86:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000f8a:	f103 031f 	add.w	r3, r3, #31
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d309      	bcc.n	8000fa8 <main+0x818>
			current_action = last_action;
 8000f94:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000f98:	f103 031f 	add.w	r3, r3, #31
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 8000fa2:	f102 020f 	add.w	r2, r2, #15
 8000fa6:	7013      	strb	r3, [r2, #0]
		}


		enum State state = Do_Action(action_list[current_action], (uint8_t*)ParseBuffer);
 8000fa8:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8000fac:	f103 030f 	add.w	r3, r3, #15
 8000fb0:	781a      	ldrb	r2, [r3, #0]
 8000fb2:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8000fb6:	f6a3 2194 	subw	r1, r3, #2708	; 0xa94
 8000fba:	4613      	mov	r3, r2
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	4413      	add	r3, r2
 8000fc0:	00db      	lsls	r3, r3, #3
 8000fc2:	440b      	add	r3, r1
 8000fc4:	4aaa      	ldr	r2, [pc, #680]	; (8001270 <main+0xae0>)
 8000fc6:	9202      	str	r2, [sp, #8]
 8000fc8:	466c      	mov	r4, sp
 8000fca:	f103 0210 	add.w	r2, r3, #16
 8000fce:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fd2:	e884 0003 	stmia.w	r4, {r0, r1}
 8000fd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fd8:	f000 fbb8 	bl	800174c <Do_Action>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 8000fe2:	f102 021e 	add.w	r2, r2, #30
 8000fe6:	7013      	strb	r3, [r2, #0]

		switch (state){
 8000fe8:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000fec:	f103 031e 	add.w	r3, r3, #30
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b04      	cmp	r3, #4
 8000ff4:	f200 8105 	bhi.w	8001202 <main+0xa72>
 8000ff8:	a201      	add	r2, pc, #4	; (adr r2, 8001000 <main+0x870>)
 8000ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ffe:	bf00      	nop
 8001000:	080010b5 	.word	0x080010b5
 8001004:	08001203 	.word	0x08001203
 8001008:	08001015 	.word	0x08001015
 800100c:	08001181 	.word	0x08001181
 8001010:	080010cd 	.word	0x080010cd
		case GOOD_ANSWER:
			printf("%s - %s\r\n", action_list[current_action].cmd, action_list[current_action].good_answer);
 8001014:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8001018:	f103 030f 	add.w	r3, r3, #15
 800101c:	781a      	ldrb	r2, [r3, #0]
 800101e:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8001022:	f6a3 2194 	subw	r1, r3, #2708	; 0xa94
 8001026:	4613      	mov	r3, r2
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	4413      	add	r3, r2
 800102c:	00db      	lsls	r3, r3, #3
 800102e:	440b      	add	r3, r1
 8001030:	6818      	ldr	r0, [r3, #0]
 8001032:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8001036:	f103 030f 	add.w	r3, r3, #15
 800103a:	781a      	ldrb	r2, [r3, #0]
 800103c:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8001040:	f6a3 2194 	subw	r1, r3, #2708	; 0xa94
 8001044:	4613      	mov	r3, r2
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	4413      	add	r3, r2
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	440b      	add	r3, r1
 800104e:	3304      	adds	r3, #4
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	461a      	mov	r2, r3
 8001054:	4601      	mov	r1, r0
 8001056:	4887      	ldr	r0, [pc, #540]	; (8001274 <main+0xae4>)
 8001058:	f002 fda4 	bl	8003ba4 <iprintf>
			printf("\tREPLY: >>%s<<\r\n", (char*)ParseBuffer);
 800105c:	4984      	ldr	r1, [pc, #528]	; (8001270 <main+0xae0>)
 800105e:	4886      	ldr	r0, [pc, #536]	; (8001278 <main+0xae8>)
 8001060:	f002 fda0 	bl	8003ba4 <iprintf>
			Do_Action(LTE_reset_action, (uint8_t*)ParseBuffer);
 8001064:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8001068:	f103 0310 	add.w	r3, r3, #16
 800106c:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8001070:	4a7f      	ldr	r2, [pc, #508]	; (8001270 <main+0xae0>)
 8001072:	9202      	str	r2, [sp, #8]
 8001074:	466c      	mov	r4, sp
 8001076:	f103 0210 	add.w	r2, r3, #16
 800107a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800107e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001082:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001084:	f000 fb62 	bl	800174c <Do_Action>
			current_action++;
 8001088:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 800108c:	f103 030f 	add.w	r3, r3, #15
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	3301      	adds	r3, #1
 8001094:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 8001098:	f102 020f 	add.w	r2, r2, #15
 800109c:	7013      	strb	r3, [r2, #0]
			HAL_Delay(1000);
 800109e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010a2:	f000 fecf 	bl	8001e44 <HAL_Delay>
			startup = 5;
 80010a6:	2305      	movs	r3, #5
 80010a8:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 80010ac:	f102 020e 	add.w	r2, r2, #14
 80010b0:	7013      	strb	r3, [r2, #0]
			break;
 80010b2:	e0a7      	b.n	8001204 <main+0xa74>
		case READY:
			//printf("%s - READY\r\n", action_list[current_action].cmd);
			//printf("BUFFER: >>%s<<\r\n", (char*)ParseBuffer);
			current_action++;
 80010b4:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 80010b8:	f103 030f 	add.w	r3, r3, #15
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	3301      	adds	r3, #1
 80010c0:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 80010c4:	f102 020f 	add.w	r2, r2, #15
 80010c8:	7013      	strb	r3, [r2, #0]
			break;
 80010ca:	e09b      	b.n	8001204 <main+0xa74>
		case TIMEOUT:
			printf("%s - Timeout\r\n", action_list[current_action].cmd);
 80010cc:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 80010d0:	f103 030f 	add.w	r3, r3, #15
 80010d4:	781a      	ldrb	r2, [r3, #0]
 80010d6:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 80010da:	f6a3 2194 	subw	r1, r3, #2708	; 0xa94
 80010de:	4613      	mov	r3, r2
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	4413      	add	r3, r2
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	440b      	add	r3, r1
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4619      	mov	r1, r3
 80010ec:	4863      	ldr	r0, [pc, #396]	; (800127c <main+0xaec>)
 80010ee:	f002 fd59 	bl	8003ba4 <iprintf>
			if(startup < 2){
 80010f2:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 80010f6:	f103 030e 	add.w	r3, r3, #14
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d822      	bhi.n	8001146 <main+0x9b6>
				printf("INIT\r\n");
 8001100:	485f      	ldr	r0, [pc, #380]	; (8001280 <main+0xaf0>)
 8001102:	f002 fdd5 	bl	8003cb0 <puts>
				printf("TURN ON\r\n");
 8001106:	485f      	ldr	r0, [pc, #380]	; (8001284 <main+0xaf4>)
 8001108:	f002 fdd2 	bl	8003cb0 <puts>
				HAL_GPIO_WritePin(GPIOA,  GPIO_PIN_6, GPIO_PIN_SET);
 800110c:	2201      	movs	r2, #1
 800110e:	2140      	movs	r1, #64	; 0x40
 8001110:	485d      	ldr	r0, [pc, #372]	; (8001288 <main+0xaf8>)
 8001112:	f001 fa5b 	bl	80025cc <HAL_GPIO_WritePin>
				HAL_Delay(1500);
 8001116:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800111a:	f000 fe93 	bl	8001e44 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOA,  GPIO_PIN_6, GPIO_PIN_RESET);
 800111e:	2200      	movs	r2, #0
 8001120:	2140      	movs	r1, #64	; 0x40
 8001122:	4859      	ldr	r0, [pc, #356]	; (8001288 <main+0xaf8>)
 8001124:	f001 fa52 	bl	80025cc <HAL_GPIO_WritePin>
				HAL_Delay(5000);
 8001128:	f241 3088 	movw	r0, #5000	; 0x1388
 800112c:	f000 fe8a 	bl	8001e44 <HAL_Delay>
				startup++;
 8001130:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8001134:	f103 030e 	add.w	r3, r3, #14
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	3301      	adds	r3, #1
 800113c:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 8001140:	f102 020e 	add.w	r2, r2, #14
 8001144:	7013      	strb	r3, [r2, #0]
			}
			Do_Action(LTE_reset_action, (uint8_t*)ParseBuffer);
 8001146:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 800114a:	f103 0310 	add.w	r3, r3, #16
 800114e:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8001152:	4a47      	ldr	r2, [pc, #284]	; (8001270 <main+0xae0>)
 8001154:	9202      	str	r2, [sp, #8]
 8001156:	466c      	mov	r4, sp
 8001158:	f103 0210 	add.w	r2, r3, #16
 800115c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001160:	e884 0003 	stmia.w	r4, {r0, r1}
 8001164:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001166:	f000 faf1 	bl	800174c <Do_Action>

			HAL_Delay(1000);
 800116a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800116e:	f000 fe69 	bl	8001e44 <HAL_Delay>
			current_action=0;
 8001172:	2300      	movs	r3, #0
 8001174:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 8001178:	f102 020f 	add.w	r2, r2, #15
 800117c:	7013      	strb	r3, [r2, #0]
			break;
 800117e:	e041      	b.n	8001204 <main+0xa74>
		case BAD_ANSWER:
			printf("%s - %s\r\n", action_list[current_action].cmd, action_list[current_action].bad_answer);
 8001180:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8001184:	f103 030f 	add.w	r3, r3, #15
 8001188:	781a      	ldrb	r2, [r3, #0]
 800118a:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 800118e:	f6a3 2194 	subw	r1, r3, #2708	; 0xa94
 8001192:	4613      	mov	r3, r2
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	4413      	add	r3, r2
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	440b      	add	r3, r1
 800119c:	6818      	ldr	r0, [r3, #0]
 800119e:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 80011a2:	f103 030f 	add.w	r3, r3, #15
 80011a6:	781a      	ldrb	r2, [r3, #0]
 80011a8:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 80011ac:	f6a3 2194 	subw	r1, r3, #2708	; 0xa94
 80011b0:	4613      	mov	r3, r2
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	4413      	add	r3, r2
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	440b      	add	r3, r1
 80011ba:	330c      	adds	r3, #12
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	461a      	mov	r2, r3
 80011c0:	4601      	mov	r1, r0
 80011c2:	482c      	ldr	r0, [pc, #176]	; (8001274 <main+0xae4>)
 80011c4:	f002 fcee 	bl	8003ba4 <iprintf>
			Do_Action(LTE_reset_action, (uint8_t*)ParseBuffer);
 80011c8:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 80011cc:	f103 0310 	add.w	r3, r3, #16
 80011d0:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 80011d4:	4a26      	ldr	r2, [pc, #152]	; (8001270 <main+0xae0>)
 80011d6:	9202      	str	r2, [sp, #8]
 80011d8:	466c      	mov	r4, sp
 80011da:	f103 0210 	add.w	r2, r3, #16
 80011de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011e2:	e884 0003 	stmia.w	r4, {r0, r1}
 80011e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011e8:	f000 fab0 	bl	800174c <Do_Action>
			HAL_Delay(1000);
 80011ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011f0:	f000 fe28 	bl	8001e44 <HAL_Delay>
			startup = 5;
 80011f4:	2305      	movs	r3, #5
 80011f6:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 80011fa:	f102 020e 	add.w	r2, r2, #14
 80011fe:	7013      	strb	r3, [r2, #0]
			break;
 8001200:	e000      	b.n	8001204 <main+0xa74>
		default:
			break;
 8001202:	bf00      	nop
		};

		if(UARTDMA_IsDataReady(&huartdma6))
 8001204:	4821      	ldr	r0, [pc, #132]	; (800128c <main+0xafc>)
 8001206:	f7ff fa32 	bl	800066e <UARTDMA_IsDataReady>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	f000 80de 	beq.w	80013ce <main+0xc3e>
		{
			UARTDMA_GetLineFromBuffer(&huartdma6, ParseBuffer);
 8001212:	4917      	ldr	r1, [pc, #92]	; (8001270 <main+0xae0>)
 8001214:	481d      	ldr	r0, [pc, #116]	; (800128c <main+0xafc>)
 8001216:	f7ff fa3b 	bl	8000690 <UARTDMA_GetLineFromBuffer>
			printf("BUFFER: >>%s<<\r\n", (char*)ParseBuffer);
 800121a:	4915      	ldr	r1, [pc, #84]	; (8001270 <main+0xae0>)
 800121c:	481c      	ldr	r0, [pc, #112]	; (8001290 <main+0xb00>)
 800121e:	f002 fcc1 	bl	8003ba4 <iprintf>

			char* ptr;
			if((ptr = strstr((char*)ParseBuffer, "+CCLK: ")) != NULL){
 8001222:	491c      	ldr	r1, [pc, #112]	; (8001294 <main+0xb04>)
 8001224:	4812      	ldr	r0, [pc, #72]	; (8001270 <main+0xae0>)
 8001226:	f002 fdce 	bl	8003dc6 <strstr>
 800122a:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 800122e:	f103 0318 	add.w	r3, r3, #24
 8001232:	6018      	str	r0, [r3, #0]
 8001234:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8001238:	f103 0318 	add.w	r3, r3, #24
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2b00      	cmp	r3, #0
 8001240:	f43f ae9c 	beq.w	8000f7c <main+0x7ec>
				printf("\t\tTIME: %s\r\n", (char*)ParseBuffer);
 8001244:	490a      	ldr	r1, [pc, #40]	; (8001270 <main+0xae0>)
 8001246:	4814      	ldr	r0, [pc, #80]	; (8001298 <main+0xb08>)
 8001248:	f002 fcac 	bl	8003ba4 <iprintf>

				char* timeString = ptr+8;
 800124c:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8001250:	f103 0318 	add.w	r3, r3, #24
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	3308      	adds	r3, #8
 8001258:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 800125c:	f102 0214 	add.w	r2, r2, #20
 8001260:	6013      	str	r3, [r2, #0]

				for (int i = 0; i < strlen(timeString); i++)
 8001262:	2300      	movs	r3, #0
 8001264:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 8001268:	f102 0204 	add.w	r2, r2, #4
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	e05d      	b.n	800132c <main+0xb9c>
 8001270:	20000dfc 	.word	0x20000dfc
 8001274:	080050d8 	.word	0x080050d8
 8001278:	080050e4 	.word	0x080050e4
 800127c:	080050f8 	.word	0x080050f8
 8001280:	08005108 	.word	0x08005108
 8001284:	08005110 	.word	0x08005110
 8001288:	40020000 	.word	0x40020000
 800128c:	2000008c 	.word	0x2000008c
 8001290:	0800511c 	.word	0x0800511c
 8001294:	08005130 	.word	0x08005130
 8001298:	08005138 	.word	0x08005138
				{
					if ((timeString[i] > '9') || (timeString[i] < '0')){
 800129c:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 80012a0:	f103 0304 	add.w	r3, r3, #4
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 80012aa:	f102 0214 	add.w	r2, r2, #20
 80012ae:	6812      	ldr	r2, [r2, #0]
 80012b0:	4413      	add	r3, r2
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b39      	cmp	r3, #57	; 0x39
 80012b6:	d80d      	bhi.n	80012d4 <main+0xb44>
 80012b8:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 80012bc:	f103 0304 	add.w	r3, r3, #4
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 80012c6:	f102 0214 	add.w	r2, r2, #20
 80012ca:	6812      	ldr	r2, [r2, #0]
 80012cc:	4413      	add	r3, r2
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b2f      	cmp	r3, #47	; 0x2f
 80012d2:	d80c      	bhi.n	80012ee <main+0xb5e>
						timeString[i] = '_';
 80012d4:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 80012d8:	f103 0304 	add.w	r3, r3, #4
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 80012e2:	f102 0214 	add.w	r2, r2, #20
 80012e6:	6812      	ldr	r2, [r2, #0]
 80012e8:	4413      	add	r3, r2
 80012ea:	225f      	movs	r2, #95	; 0x5f
 80012ec:	701a      	strb	r2, [r3, #0]
					}
					if(i>19){
 80012ee:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 80012f2:	f103 0304 	add.w	r3, r3, #4
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b13      	cmp	r3, #19
 80012fa:	dd0c      	ble.n	8001316 <main+0xb86>
						timeString[i] = '\0';
 80012fc:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8001300:	f103 0304 	add.w	r3, r3, #4
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 800130a:	f102 0214 	add.w	r2, r2, #20
 800130e:	6812      	ldr	r2, [r2, #0]
 8001310:	4413      	add	r3, r2
 8001312:	2200      	movs	r2, #0
 8001314:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < strlen(timeString); i++)
 8001316:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 800131a:	f103 0304 	add.w	r3, r3, #4
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	3301      	adds	r3, #1
 8001322:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 8001326:	f102 0204 	add.w	r2, r2, #4
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8001330:	f103 0314 	add.w	r3, r3, #20
 8001334:	6818      	ldr	r0, [r3, #0]
 8001336:	f7fe ff2b 	bl	8000190 <strlen>
 800133a:	4602      	mov	r2, r0
 800133c:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8001340:	f103 0304 	add.w	r3, r3, #4
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	429a      	cmp	r2, r3
 8001348:	d8a8      	bhi.n	800129c <main+0xb0c>
					}
				}


				char fileNameLocal[60] = "AT+FTPPUTNAME=\"";
 800134a:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 800134e:	f5a3 642d 	sub.w	r4, r3, #2768	; 0xad0
 8001352:	4b2c      	ldr	r3, [pc, #176]	; (8001404 <main+0xc74>)
 8001354:	4625      	mov	r5, r4
 8001356:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001358:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800135c:	f104 0310 	add.w	r3, r4, #16
 8001360:	222c      	movs	r2, #44	; 0x2c
 8001362:	2100      	movs	r1, #0
 8001364:	4618      	mov	r0, r3
 8001366:	f002 fc15 	bl	8003b94 <memset>
				strcat(fileNameLocal, timeString);
 800136a:	f107 0310 	add.w	r3, r7, #16
 800136e:	3b10      	subs	r3, #16
 8001370:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 8001374:	f102 0214 	add.w	r2, r2, #20
 8001378:	6811      	ldr	r1, [r2, #0]
 800137a:	4618      	mov	r0, r3
 800137c:	f002 fd0c 	bl	8003d98 <strcat>
				strcat(fileNameLocal, ".txt\"");
 8001380:	f107 0310 	add.w	r3, r7, #16
 8001384:	3b10      	subs	r3, #16
 8001386:	4618      	mov	r0, r3
 8001388:	f7fe ff02 	bl	8000190 <strlen>
 800138c:	4603      	mov	r3, r0
 800138e:	461a      	mov	r2, r3
 8001390:	f107 0310 	add.w	r3, r7, #16
 8001394:	3b10      	subs	r3, #16
 8001396:	4413      	add	r3, r2
 8001398:	4a1b      	ldr	r2, [pc, #108]	; (8001408 <main+0xc78>)
 800139a:	6810      	ldr	r0, [r2, #0]
 800139c:	6018      	str	r0, [r3, #0]
 800139e:	8892      	ldrh	r2, [r2, #4]
 80013a0:	809a      	strh	r2, [r3, #4]

				strcpy(LTE_ftp_filename.cmd, fileNameLocal);
 80013a2:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 80013a6:	f103 0310 	add.w	r3, r3, #16
 80013aa:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	f107 0310 	add.w	r3, r7, #16
 80013b4:	3b10      	subs	r3, #16
 80013b6:	4619      	mov	r1, r3
 80013b8:	4610      	mov	r0, r2
 80013ba:	f002 fcfc 	bl	8003db6 <strcpy>

				printf("\t\tTIME_F: %s\r\n", fileNameLocal);
 80013be:	f107 0310 	add.w	r3, r7, #16
 80013c2:	3b10      	subs	r3, #16
 80013c4:	4619      	mov	r1, r3
 80013c6:	4811      	ldr	r0, [pc, #68]	; (800140c <main+0xc7c>)
 80013c8:	f002 fbec 	bl	8003ba4 <iprintf>
 80013cc:	e5d6      	b.n	8000f7c <main+0x7ec>

			}

		}else{
			for(int i = 0; i< BUFFER_SIZE; i++){
 80013ce:	2300      	movs	r3, #0
 80013d0:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 80013d4:	6013      	str	r3, [r2, #0]
 80013d6:	e00d      	b.n	80013f4 <main+0xc64>
				ParseBuffer[i] ='\0';
 80013d8:	4a0d      	ldr	r2, [pc, #52]	; (8001410 <main+0xc80>)
 80013da:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4413      	add	r3, r2
 80013e2:	2200      	movs	r2, #0
 80013e4:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i< BUFFER_SIZE; i++){
 80013e6:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	3301      	adds	r3, #1
 80013ee:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 80013f2:	6013      	str	r3, [r2, #0]
 80013f4:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013fe:	dbeb      	blt.n	80013d8 <main+0xc48>
	{
 8001400:	e5bc      	b.n	8000f7c <main+0x7ec>
 8001402:	bf00      	nop
 8001404:	080053a4 	.word	0x080053a4
 8001408:	080050ac 	.word	0x080050ac
 800140c:	08005148 	.word	0x08005148
 8001410:	20000dfc 	.word	0x20000dfc

08001414 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b092      	sub	sp, #72	; 0x48
 8001418:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	2234      	movs	r2, #52	; 0x34
 8001420:	2100      	movs	r1, #0
 8001422:	4618      	mov	r0, r3
 8001424:	f002 fbb6 	bl	8003b94 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001428:	463b      	mov	r3, r7
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
 8001434:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001436:	4b1d      	ldr	r3, [pc, #116]	; (80014ac <SystemClock_Config+0x98>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800143e:	4a1b      	ldr	r2, [pc, #108]	; (80014ac <SystemClock_Config+0x98>)
 8001440:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001444:	6013      	str	r3, [r2, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001446:	2302      	movs	r3, #2
 8001448:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800144a:	2301      	movs	r3, #1
 800144c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800144e:	2310      	movs	r3, #16
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001452:	2302      	movs	r3, #2
 8001454:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001456:	2300      	movs	r3, #0
 8001458:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800145a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800145e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001460:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001464:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	4618      	mov	r0, r3
 800146c:	f001 f8c6 	bl	80025fc <HAL_RCC_OscConfig>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <SystemClock_Config+0x66>
	{
		Error_Handler();
 8001476:	f000 f947 	bl	8001708 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800147a:	230f      	movs	r3, #15
 800147c:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800147e:	2303      	movs	r3, #3
 8001480:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001482:	2300      	movs	r3, #0
 8001484:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800148a:	2300      	movs	r3, #0
 800148c:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800148e:	463b      	mov	r3, r7
 8001490:	2101      	movs	r1, #1
 8001492:	4618      	mov	r0, r3
 8001494:	f001 fbe2 	bl	8002c5c <HAL_RCC_ClockConfig>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <SystemClock_Config+0x8e>
	{
		Error_Handler();
 800149e:	f000 f933 	bl	8001708 <Error_Handler>
	}
}
 80014a2:	bf00      	nop
 80014a4:	3748      	adds	r7, #72	; 0x48
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40007000 	.word	0x40007000

080014b0 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 80014b4:	4b11      	ldr	r3, [pc, #68]	; (80014fc <MX_UART4_Init+0x4c>)
 80014b6:	4a12      	ldr	r2, [pc, #72]	; (8001500 <MX_UART4_Init+0x50>)
 80014b8:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 80014ba:	4b10      	ldr	r3, [pc, #64]	; (80014fc <MX_UART4_Init+0x4c>)
 80014bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014c0:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80014c2:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <MX_UART4_Init+0x4c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 80014c8:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <MX_UART4_Init+0x4c>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 80014ce:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <MX_UART4_Init+0x4c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 80014d4:	4b09      	ldr	r3, [pc, #36]	; (80014fc <MX_UART4_Init+0x4c>)
 80014d6:	220c      	movs	r2, #12
 80014d8:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014da:	4b08      	ldr	r3, [pc, #32]	; (80014fc <MX_UART4_Init+0x4c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <MX_UART4_Init+0x4c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK)
 80014e6:	4805      	ldr	r0, [pc, #20]	; (80014fc <MX_UART4_Init+0x4c>)
 80014e8:	f001 fe7e 	bl	80031e8 <HAL_UART_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_UART4_Init+0x46>
	{
		Error_Handler();
 80014f2:	f000 f909 	bl	8001708 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000c98 	.word	0x20000c98
 8001500:	40004c00 	.word	0x40004c00

08001504 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001508:	4b11      	ldr	r3, [pc, #68]	; (8001550 <MX_USART1_UART_Init+0x4c>)
 800150a:	4a12      	ldr	r2, [pc, #72]	; (8001554 <MX_USART1_UART_Init+0x50>)
 800150c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800150e:	4b10      	ldr	r3, [pc, #64]	; (8001550 <MX_USART1_UART_Init+0x4c>)
 8001510:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001514:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001516:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <MX_USART1_UART_Init+0x4c>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800151c:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <MX_USART1_UART_Init+0x4c>)
 800151e:	2200      	movs	r2, #0
 8001520:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001522:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <MX_USART1_UART_Init+0x4c>)
 8001524:	2200      	movs	r2, #0
 8001526:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001528:	4b09      	ldr	r3, [pc, #36]	; (8001550 <MX_USART1_UART_Init+0x4c>)
 800152a:	220c      	movs	r2, #12
 800152c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800152e:	4b08      	ldr	r3, [pc, #32]	; (8001550 <MX_USART1_UART_Init+0x4c>)
 8001530:	2200      	movs	r2, #0
 8001532:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001534:	4b06      	ldr	r3, [pc, #24]	; (8001550 <MX_USART1_UART_Init+0x4c>)
 8001536:	2200      	movs	r2, #0
 8001538:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800153a:	4805      	ldr	r0, [pc, #20]	; (8001550 <MX_USART1_UART_Init+0x4c>)
 800153c:	f001 fe54 	bl	80031e8 <HAL_UART_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8001546:	f000 f8df 	bl	8001708 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000ce0 	.word	0x20000ce0
 8001554:	40013800 	.word	0x40013800

08001558 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800155c:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <MX_USART2_UART_Init+0x4c>)
 800155e:	4a12      	ldr	r2, [pc, #72]	; (80015a8 <MX_USART2_UART_Init+0x50>)
 8001560:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 57600;
 8001562:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <MX_USART2_UART_Init+0x4c>)
 8001564:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001568:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800156a:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <MX_USART2_UART_Init+0x4c>)
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <MX_USART2_UART_Init+0x4c>)
 8001572:	2200      	movs	r2, #0
 8001574:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <MX_USART2_UART_Init+0x4c>)
 8001578:	2200      	movs	r2, #0
 800157a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800157c:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <MX_USART2_UART_Init+0x4c>)
 800157e:	220c      	movs	r2, #12
 8001580:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001582:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <MX_USART2_UART_Init+0x4c>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <MX_USART2_UART_Init+0x4c>)
 800158a:	2200      	movs	r2, #0
 800158c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800158e:	4805      	ldr	r0, [pc, #20]	; (80015a4 <MX_USART2_UART_Init+0x4c>)
 8001590:	f001 fe2a 	bl	80031e8 <HAL_UART_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 800159a:	f000 f8b5 	bl	8001708 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000d28 	.word	0x20000d28
 80015a8:	40004400 	.word	0x40004400

080015ac <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80015b0:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <MX_USART3_UART_Init+0x4c>)
 80015b2:	4a12      	ldr	r2, [pc, #72]	; (80015fc <MX_USART3_UART_Init+0x50>)
 80015b4:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80015b6:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <MX_USART3_UART_Init+0x4c>)
 80015b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015bc:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015be:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <MX_USART3_UART_Init+0x4c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80015c4:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <MX_USART3_UART_Init+0x4c>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80015ca:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <MX_USART3_UART_Init+0x4c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80015d0:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <MX_USART3_UART_Init+0x4c>)
 80015d2:	220c      	movs	r2, #12
 80015d4:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015d6:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <MX_USART3_UART_Init+0x4c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <MX_USART3_UART_Init+0x4c>)
 80015de:	2200      	movs	r2, #0
 80015e0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80015e2:	4805      	ldr	r0, [pc, #20]	; (80015f8 <MX_USART3_UART_Init+0x4c>)
 80015e4:	f001 fe00 	bl	80031e8 <HAL_UART_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 80015ee:	f000 f88b 	bl	8001708 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000d70 	.word	0x20000d70
 80015fc:	40004800 	.word	0x40004800

08001600 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001606:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <MX_DMA_Init+0x38>)
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	4a0b      	ldr	r2, [pc, #44]	; (8001638 <MX_DMA_Init+0x38>)
 800160c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001610:	61d3      	str	r3, [r2, #28]
 8001612:	4b09      	ldr	r3, [pc, #36]	; (8001638 <MX_DMA_Init+0x38>)
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800161e:	2200      	movs	r2, #0
 8001620:	2100      	movs	r1, #0
 8001622:	2010      	movs	r0, #16
 8001624:	f000 fd07 	bl	8002036 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001628:	2010      	movs	r0, #16
 800162a:	f000 fd20 	bl	800206e <HAL_NVIC_EnableIRQ>

}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40023800 	.word	0x40023800

0800163c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	; 0x28
 8001640:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001642:	f107 0314 	add.w	r3, r7, #20
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]
 800164c:	609a      	str	r2, [r3, #8]
 800164e:	60da      	str	r2, [r3, #12]
 8001650:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001652:	4b2a      	ldr	r3, [pc, #168]	; (80016fc <MX_GPIO_Init+0xc0>)
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	4a29      	ldr	r2, [pc, #164]	; (80016fc <MX_GPIO_Init+0xc0>)
 8001658:	f043 0304 	orr.w	r3, r3, #4
 800165c:	61d3      	str	r3, [r2, #28]
 800165e:	4b27      	ldr	r3, [pc, #156]	; (80016fc <MX_GPIO_Init+0xc0>)
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	f003 0304 	and.w	r3, r3, #4
 8001666:	613b      	str	r3, [r7, #16]
 8001668:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800166a:	4b24      	ldr	r3, [pc, #144]	; (80016fc <MX_GPIO_Init+0xc0>)
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	4a23      	ldr	r2, [pc, #140]	; (80016fc <MX_GPIO_Init+0xc0>)
 8001670:	f043 0320 	orr.w	r3, r3, #32
 8001674:	61d3      	str	r3, [r2, #28]
 8001676:	4b21      	ldr	r3, [pc, #132]	; (80016fc <MX_GPIO_Init+0xc0>)
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	f003 0320 	and.w	r3, r3, #32
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001682:	4b1e      	ldr	r3, [pc, #120]	; (80016fc <MX_GPIO_Init+0xc0>)
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	4a1d      	ldr	r2, [pc, #116]	; (80016fc <MX_GPIO_Init+0xc0>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	61d3      	str	r3, [r2, #28]
 800168e:	4b1b      	ldr	r3, [pc, #108]	; (80016fc <MX_GPIO_Init+0xc0>)
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800169a:	4b18      	ldr	r3, [pc, #96]	; (80016fc <MX_GPIO_Init+0xc0>)
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	4a17      	ldr	r2, [pc, #92]	; (80016fc <MX_GPIO_Init+0xc0>)
 80016a0:	f043 0302 	orr.w	r3, r3, #2
 80016a4:	61d3      	str	r3, [r2, #28]
 80016a6:	4b15      	ldr	r3, [pc, #84]	; (80016fc <MX_GPIO_Init+0xc0>)
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2160      	movs	r1, #96	; 0x60
 80016b6:	4812      	ldr	r0, [pc, #72]	; (8001700 <MX_GPIO_Init+0xc4>)
 80016b8:	f000 ff88 	bl	80025cc <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80016bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016c0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016c2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016c6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	4619      	mov	r1, r3
 80016d2:	480c      	ldr	r0, [pc, #48]	; (8001704 <MX_GPIO_Init+0xc8>)
 80016d4:	f000 fdea 	bl	80022ac <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin PA6 */
	GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
 80016d8:	2360      	movs	r3, #96	; 0x60
 80016da:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016dc:	2301      	movs	r3, #1
 80016de:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e4:	2300      	movs	r3, #0
 80016e6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	4619      	mov	r1, r3
 80016ee:	4804      	ldr	r0, [pc, #16]	; (8001700 <MX_GPIO_Init+0xc4>)
 80016f0:	f000 fddc 	bl	80022ac <HAL_GPIO_Init>

}
 80016f4:	bf00      	nop
 80016f6:	3728      	adds	r7, #40	; 0x28
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40023800 	.word	0x40023800
 8001700:	40020000 	.word	0x40020000
 8001704:	40020800 	.word	0x40020800

08001708 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800170c:	b672      	cpsid	i
}
 800170e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001710:	e7fe      	b.n	8001710 <Error_Handler+0x8>
	...

08001714 <Send_LTE>:
#include "scheduler.h"


void Send_LTE(char* cmd){
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
	//printf("%s, %d - SIZEOF\r\n", (char*)cmd, sizeof(cmd));
	//	strcat(cmd, "\r\n");
	//printf("%s, %d - SIZEOF\r\n", cmd, strlen(cmd));
	HAL_UART_Transmit(&huart2,(uint8_t*)cmd,strlen(cmd),10);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7fe fd37 	bl	8000190 <strlen>
 8001722:	4603      	mov	r3, r0
 8001724:	b29a      	uxth	r2, r3
 8001726:	230a      	movs	r3, #10
 8001728:	6879      	ldr	r1, [r7, #4]
 800172a:	4806      	ldr	r0, [pc, #24]	; (8001744 <Send_LTE+0x30>)
 800172c:	f001 fdac 	bl	8003288 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2,(uint8_t*)"\r\n",2,10);
 8001730:	230a      	movs	r3, #10
 8001732:	2202      	movs	r2, #2
 8001734:	4904      	ldr	r1, [pc, #16]	; (8001748 <Send_LTE+0x34>)
 8001736:	4803      	ldr	r0, [pc, #12]	; (8001744 <Send_LTE+0x30>)
 8001738:	f001 fda6 	bl	8003288 <HAL_UART_Transmit>
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000d28 	.word	0x20000d28
 8001748:	080053e0 	.word	0x080053e0

0800174c <Do_Action>:
void Get_LTE_data(){
	UARTDMA_IsDataReady(&huartdma6);
}


enum State Do_Action(command cmd, uint8_t* uart_data){
 800174c:	b084      	sub	sp, #16
 800174e:	b590      	push	{r4, r7, lr}
 8001750:	b087      	sub	sp, #28
 8001752:	af04      	add	r7, sp, #16
 8001754:	f107 0418 	add.w	r4, r7, #24
 8001758:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	static enum State state = READY;
	static unsigned int retry;
	static int start_time;

	if(strcmp(cmd.cmd, "RESET_ACTION") == 0){
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	494b      	ldr	r1, [pc, #300]	; (800188c <Do_Action+0x140>)
 8001760:	4618      	mov	r0, r3
 8001762:	f7fe fd0b 	bl	800017c <strcmp>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d117      	bne.n	800179c <Do_Action+0x50>
		state = READY;
 800176c:	4b48      	ldr	r3, [pc, #288]	; (8001890 <Do_Action+0x144>)
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]
		retry = 0;
 8001772:	4b48      	ldr	r3, [pc, #288]	; (8001894 <Do_Action+0x148>)
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
		for(int i = 0; i< BUFFER_SIZE; i++){
 8001778:	2300      	movs	r3, #0
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	e007      	b.n	800178e <Do_Action+0x42>
			uart_data[i] ='\0';
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001782:	4413      	add	r3, r2
 8001784:	2200      	movs	r2, #0
 8001786:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i< BUFFER_SIZE; i++){
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3301      	adds	r3, #1
 800178c:	607b      	str	r3, [r7, #4]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001794:	dbf3      	blt.n	800177e <Do_Action+0x32>
		}
		return state;
 8001796:	4b3e      	ldr	r3, [pc, #248]	; (8001890 <Do_Action+0x144>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	e06f      	b.n	800187c <Do_Action+0x130>
	}

	if(state == READY){ 					// ready to send new command
 800179c:	4b3c      	ldr	r3, [pc, #240]	; (8001890 <Do_Action+0x144>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d10f      	bne.n	80017c4 <Do_Action+0x78>
		start_time = HAL_GetTick();		// save send time
 80017a4:	f000 fb44 	bl	8001e30 <HAL_GetTick>
 80017a8:	4603      	mov	r3, r0
 80017aa:	461a      	mov	r2, r3
 80017ac:	4b3a      	ldr	r3, [pc, #232]	; (8001898 <Do_Action+0x14c>)
 80017ae:	601a      	str	r2, [r3, #0]
		state = CHECKING_ANSWER;			// notify that now we wait for a reply
 80017b0:	4b37      	ldr	r3, [pc, #220]	; (8001890 <Do_Action+0x144>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	701a      	strb	r2, [r3, #0]
		Send_LTE(cmd.cmd);				// send new command
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff ffab 	bl	8001714 <Send_LTE>
		return state;
 80017be:	4b34      	ldr	r3, [pc, #208]	; (8001890 <Do_Action+0x144>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	e05b      	b.n	800187c <Do_Action+0x130>

	}else if(state == CHECKING_ANSWER){	// if we expect a reply now
 80017c4:	4b32      	ldr	r3, [pc, #200]	; (8001890 <Do_Action+0x144>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d155      	bne.n	8001878 <Do_Action+0x12c>

		if((start_time + cmd.timeout) < HAL_GetTick()){	// if we wait too long, report timeout
 80017cc:	6a3a      	ldr	r2, [r7, #32]
 80017ce:	4b32      	ldr	r3, [pc, #200]	; (8001898 <Do_Action+0x14c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4413      	add	r3, r2
 80017d4:	461c      	mov	r4, r3
 80017d6:	f000 fb2b 	bl	8001e30 <HAL_GetTick>
 80017da:	4603      	mov	r3, r0
 80017dc:	429c      	cmp	r4, r3
 80017de:	d205      	bcs.n	80017ec <Do_Action+0xa0>
			state = TIMEOUT;
 80017e0:	4b2b      	ldr	r3, [pc, #172]	; (8001890 <Do_Action+0x144>)
 80017e2:	2204      	movs	r2, #4
 80017e4:	701a      	strb	r2, [r3, #0]
			return state;
 80017e6:	4b2a      	ldr	r3, [pc, #168]	; (8001890 <Do_Action+0x144>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	e047      	b.n	800187c <Do_Action+0x130>
		}

		if((strcmp(cmd.good_answer, (char*)uart_data) == 0) || strcmp(cmd.good_answer, "ANY") == 0){ 		// if the reply is OK, return success
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe fcc3 	bl	800017c <strcmp>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d007      	beq.n	800180c <Do_Action+0xc0>
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	4927      	ldr	r1, [pc, #156]	; (800189c <Do_Action+0x150>)
 8001800:	4618      	mov	r0, r3
 8001802:	f7fe fcbb 	bl	800017c <strcmp>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d105      	bne.n	8001818 <Do_Action+0xcc>
			state = GOOD_ANSWER;
 800180c:	4b20      	ldr	r3, [pc, #128]	; (8001890 <Do_Action+0x144>)
 800180e:	2202      	movs	r2, #2
 8001810:	701a      	strb	r2, [r3, #0]
			return state;
 8001812:	4b1f      	ldr	r3, [pc, #124]	; (8001890 <Do_Action+0x144>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	e031      	b.n	800187c <Do_Action+0x130>
		}else if(strcmp(cmd.bad_answer, (char*)uart_data) == 0){	// if the reply suggest an error...
 8001818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800181c:	4618      	mov	r0, r3
 800181e:	f7fe fcad 	bl	800017c <strcmp>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d127      	bne.n	8001878 <Do_Action+0x12c>
			state = BAD_ANSWER;
 8001828:	4b19      	ldr	r3, [pc, #100]	; (8001890 <Do_Action+0x144>)
 800182a:	2203      	movs	r2, #3
 800182c:	701a      	strb	r2, [r3, #0]
			if(retry < cmd.retry_counter){				// retry if structure suggest that behaviour
 800182e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001830:	461a      	mov	r2, r3
 8001832:	4b18      	ldr	r3, [pc, #96]	; (8001894 <Do_Action+0x148>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	429a      	cmp	r2, r3
 8001838:	d915      	bls.n	8001866 <Do_Action+0x11a>
				retry++;
 800183a:	4b16      	ldr	r3, [pc, #88]	; (8001894 <Do_Action+0x148>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	3301      	adds	r3, #1
 8001840:	4a14      	ldr	r2, [pc, #80]	; (8001894 <Do_Action+0x148>)
 8001842:	6013      	str	r3, [r2, #0]
				Do_Action(cmd, uart_data);
 8001844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001846:	9302      	str	r3, [sp, #8]
 8001848:	466a      	mov	r2, sp
 800184a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800184e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001852:	e882 0003 	stmia.w	r2, {r0, r1}
 8001856:	f107 0318 	add.w	r3, r7, #24
 800185a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800185c:	f7ff ff76 	bl	800174c <Do_Action>
			}else{										// if retries still give an error, or no replies suggested, report error
				retry = 0;
				state = BAD_ANSWER;
				return state;
			}
			return state;
 8001860:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <Do_Action+0x144>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	e00a      	b.n	800187c <Do_Action+0x130>
				retry = 0;
 8001866:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <Do_Action+0x148>)
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
				state = BAD_ANSWER;
 800186c:	4b08      	ldr	r3, [pc, #32]	; (8001890 <Do_Action+0x144>)
 800186e:	2203      	movs	r2, #3
 8001870:	701a      	strb	r2, [r3, #0]
				return state;
 8001872:	4b07      	ldr	r3, [pc, #28]	; (8001890 <Do_Action+0x144>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	e001      	b.n	800187c <Do_Action+0x130>
		}
	}

	return state;
 8001878:	4b05      	ldr	r3, [pc, #20]	; (8001890 <Do_Action+0x144>)
 800187a:	781b      	ldrb	r3, [r3, #0]
}
 800187c:	4618      	mov	r0, r3
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001886:	b004      	add	sp, #16
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	080053e4 	.word	0x080053e4
 8001890:	200011fc 	.word	0x200011fc
 8001894:	20001200 	.word	0x20001200
 8001898:	20001204 	.word	0x20001204
 800189c:	080053f4 	.word	0x080053f4

080018a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80018a6:	4b15      	ldr	r3, [pc, #84]	; (80018fc <HAL_MspInit+0x5c>)
 80018a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018aa:	4a14      	ldr	r2, [pc, #80]	; (80018fc <HAL_MspInit+0x5c>)
 80018ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80018b0:	6253      	str	r3, [r2, #36]	; 0x24
 80018b2:	4b12      	ldr	r3, [pc, #72]	; (80018fc <HAL_MspInit+0x5c>)
 80018b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018be:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <HAL_MspInit+0x5c>)
 80018c0:	6a1b      	ldr	r3, [r3, #32]
 80018c2:	4a0e      	ldr	r2, [pc, #56]	; (80018fc <HAL_MspInit+0x5c>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	6213      	str	r3, [r2, #32]
 80018ca:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <HAL_MspInit+0x5c>)
 80018cc:	6a1b      	ldr	r3, [r3, #32]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	60bb      	str	r3, [r7, #8]
 80018d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018d6:	4b09      	ldr	r3, [pc, #36]	; (80018fc <HAL_MspInit+0x5c>)
 80018d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018da:	4a08      	ldr	r2, [pc, #32]	; (80018fc <HAL_MspInit+0x5c>)
 80018dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e0:	6253      	str	r3, [r2, #36]	; 0x24
 80018e2:	4b06      	ldr	r3, [pc, #24]	; (80018fc <HAL_MspInit+0x5c>)
 80018e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018ee:	2007      	movs	r0, #7
 80018f0:	f000 fb96 	bl	8002020 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018f4:	bf00      	nop
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40023800 	.word	0x40023800

08001900 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b090      	sub	sp, #64	; 0x40
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001908:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a74      	ldr	r2, [pc, #464]	; (8001af0 <HAL_UART_MspInit+0x1f0>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d129      	bne.n	8001976 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001922:	4b74      	ldr	r3, [pc, #464]	; (8001af4 <HAL_UART_MspInit+0x1f4>)
 8001924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001926:	4a73      	ldr	r2, [pc, #460]	; (8001af4 <HAL_UART_MspInit+0x1f4>)
 8001928:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800192c:	6253      	str	r3, [r2, #36]	; 0x24
 800192e:	4b71      	ldr	r3, [pc, #452]	; (8001af4 <HAL_UART_MspInit+0x1f4>)
 8001930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001932:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001936:	62bb      	str	r3, [r7, #40]	; 0x28
 8001938:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800193a:	4b6e      	ldr	r3, [pc, #440]	; (8001af4 <HAL_UART_MspInit+0x1f4>)
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	4a6d      	ldr	r2, [pc, #436]	; (8001af4 <HAL_UART_MspInit+0x1f4>)
 8001940:	f043 0304 	orr.w	r3, r3, #4
 8001944:	61d3      	str	r3, [r2, #28]
 8001946:	4b6b      	ldr	r3, [pc, #428]	; (8001af4 <HAL_UART_MspInit+0x1f4>)
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	f003 0304 	and.w	r3, r3, #4
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001952:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001956:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001958:	2302      	movs	r3, #2
 800195a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800195c:	2301      	movs	r3, #1
 800195e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001960:	2303      	movs	r3, #3
 8001962:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001964:	2308      	movs	r3, #8
 8001966:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001968:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800196c:	4619      	mov	r1, r3
 800196e:	4862      	ldr	r0, [pc, #392]	; (8001af8 <HAL_UART_MspInit+0x1f8>)
 8001970:	f000 fc9c 	bl	80022ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001974:	e0b8      	b.n	8001ae8 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART1)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a60      	ldr	r2, [pc, #384]	; (8001afc <HAL_UART_MspInit+0x1fc>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d129      	bne.n	80019d4 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001980:	4b5c      	ldr	r3, [pc, #368]	; (8001af4 <HAL_UART_MspInit+0x1f4>)
 8001982:	6a1b      	ldr	r3, [r3, #32]
 8001984:	4a5b      	ldr	r2, [pc, #364]	; (8001af4 <HAL_UART_MspInit+0x1f4>)
 8001986:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800198a:	6213      	str	r3, [r2, #32]
 800198c:	4b59      	ldr	r3, [pc, #356]	; (8001af4 <HAL_UART_MspInit+0x1f4>)
 800198e:	6a1b      	ldr	r3, [r3, #32]
 8001990:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001994:	623b      	str	r3, [r7, #32]
 8001996:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001998:	4b56      	ldr	r3, [pc, #344]	; (8001af4 <HAL_UART_MspInit+0x1f4>)
 800199a:	69db      	ldr	r3, [r3, #28]
 800199c:	4a55      	ldr	r2, [pc, #340]	; (8001af4 <HAL_UART_MspInit+0x1f4>)
 800199e:	f043 0301 	orr.w	r3, r3, #1
 80019a2:	61d3      	str	r3, [r2, #28]
 80019a4:	4b53      	ldr	r3, [pc, #332]	; (8001af4 <HAL_UART_MspInit+0x1f4>)
 80019a6:	69db      	ldr	r3, [r3, #28]
 80019a8:	f003 0301 	and.w	r3, r3, #1
 80019ac:	61fb      	str	r3, [r7, #28]
 80019ae:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019b0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80019b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b6:	2302      	movs	r3, #2
 80019b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019be:	2303      	movs	r3, #3
 80019c0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019c2:	2307      	movs	r3, #7
 80019c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ca:	4619      	mov	r1, r3
 80019cc:	484c      	ldr	r0, [pc, #304]	; (8001b00 <HAL_UART_MspInit+0x200>)
 80019ce:	f000 fc6d 	bl	80022ac <HAL_GPIO_Init>
}
 80019d2:	e089      	b.n	8001ae8 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART2)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a4a      	ldr	r2, [pc, #296]	; (8001b04 <HAL_UART_MspInit+0x204>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d156      	bne.n	8001a8c <HAL_UART_MspInit+0x18c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80019de:	4b45      	ldr	r3, [pc, #276]	; (8001af4 <HAL_UART_MspInit+0x1f4>)
 80019e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e2:	4a44      	ldr	r2, [pc, #272]	; (8001af4 <HAL_UART_MspInit+0x1f4>)
 80019e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e8:	6253      	str	r3, [r2, #36]	; 0x24
 80019ea:	4b42      	ldr	r3, [pc, #264]	; (8001af4 <HAL_UART_MspInit+0x1f4>)
 80019ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f2:	61bb      	str	r3, [r7, #24]
 80019f4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f6:	4b3f      	ldr	r3, [pc, #252]	; (8001af4 <HAL_UART_MspInit+0x1f4>)
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	4a3e      	ldr	r2, [pc, #248]	; (8001af4 <HAL_UART_MspInit+0x1f4>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	61d3      	str	r3, [r2, #28]
 8001a02:	4b3c      	ldr	r3, [pc, #240]	; (8001af4 <HAL_UART_MspInit+0x1f4>)
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a0e:	230c      	movs	r3, #12
 8001a10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a12:	2302      	movs	r3, #2
 8001a14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a1e:	2307      	movs	r3, #7
 8001a20:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a26:	4619      	mov	r1, r3
 8001a28:	4835      	ldr	r0, [pc, #212]	; (8001b00 <HAL_UART_MspInit+0x200>)
 8001a2a:	f000 fc3f 	bl	80022ac <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001a2e:	4b36      	ldr	r3, [pc, #216]	; (8001b08 <HAL_UART_MspInit+0x208>)
 8001a30:	4a36      	ldr	r2, [pc, #216]	; (8001b0c <HAL_UART_MspInit+0x20c>)
 8001a32:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a34:	4b34      	ldr	r3, [pc, #208]	; (8001b08 <HAL_UART_MspInit+0x208>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a3a:	4b33      	ldr	r3, [pc, #204]	; (8001b08 <HAL_UART_MspInit+0x208>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a40:	4b31      	ldr	r3, [pc, #196]	; (8001b08 <HAL_UART_MspInit+0x208>)
 8001a42:	2280      	movs	r2, #128	; 0x80
 8001a44:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a46:	4b30      	ldr	r3, [pc, #192]	; (8001b08 <HAL_UART_MspInit+0x208>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a4c:	4b2e      	ldr	r3, [pc, #184]	; (8001b08 <HAL_UART_MspInit+0x208>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001a52:	4b2d      	ldr	r3, [pc, #180]	; (8001b08 <HAL_UART_MspInit+0x208>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a58:	4b2b      	ldr	r3, [pc, #172]	; (8001b08 <HAL_UART_MspInit+0x208>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001a5e:	482a      	ldr	r0, [pc, #168]	; (8001b08 <HAL_UART_MspInit+0x208>)
 8001a60:	f000 fb20 	bl	80020a4 <HAL_DMA_Init>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <HAL_UART_MspInit+0x16e>
      Error_Handler();
 8001a6a:	f7ff fe4d 	bl	8001708 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a25      	ldr	r2, [pc, #148]	; (8001b08 <HAL_UART_MspInit+0x208>)
 8001a72:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a74:	4a24      	ldr	r2, [pc, #144]	; (8001b08 <HAL_UART_MspInit+0x208>)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	2026      	movs	r0, #38	; 0x26
 8001a80:	f000 fad9 	bl	8002036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a84:	2026      	movs	r0, #38	; 0x26
 8001a86:	f000 faf2 	bl	800206e <HAL_NVIC_EnableIRQ>
}
 8001a8a:	e02d      	b.n	8001ae8 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART3)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a1f      	ldr	r2, [pc, #124]	; (8001b10 <HAL_UART_MspInit+0x210>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d128      	bne.n	8001ae8 <HAL_UART_MspInit+0x1e8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a96:	4b17      	ldr	r3, [pc, #92]	; (8001af4 <HAL_UART_MspInit+0x1f4>)
 8001a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9a:	4a16      	ldr	r2, [pc, #88]	; (8001af4 <HAL_UART_MspInit+0x1f4>)
 8001a9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aa0:	6253      	str	r3, [r2, #36]	; 0x24
 8001aa2:	4b14      	ldr	r3, [pc, #80]	; (8001af4 <HAL_UART_MspInit+0x1f4>)
 8001aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aaa:	613b      	str	r3, [r7, #16]
 8001aac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aae:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <HAL_UART_MspInit+0x1f4>)
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	4a10      	ldr	r2, [pc, #64]	; (8001af4 <HAL_UART_MspInit+0x1f4>)
 8001ab4:	f043 0302 	orr.w	r3, r3, #2
 8001ab8:	61d3      	str	r3, [r2, #28]
 8001aba:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <HAL_UART_MspInit+0x1f4>)
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ac6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001aca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001acc:	2302      	movs	r3, #2
 8001ace:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ad8:	2307      	movs	r3, #7
 8001ada:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001adc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	480c      	ldr	r0, [pc, #48]	; (8001b14 <HAL_UART_MspInit+0x214>)
 8001ae4:	f000 fbe2 	bl	80022ac <HAL_GPIO_Init>
}
 8001ae8:	bf00      	nop
 8001aea:	3740      	adds	r7, #64	; 0x40
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40004c00 	.word	0x40004c00
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40020800 	.word	0x40020800
 8001afc:	40013800 	.word	0x40013800
 8001b00:	40020000 	.word	0x40020000
 8001b04:	40004400 	.word	0x40004400
 8001b08:	20000db8 	.word	0x20000db8
 8001b0c:	4002606c 	.word	0x4002606c
 8001b10:	40004800 	.word	0x40004800
 8001b14:	40020400 	.word	0x40020400

08001b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b1c:	e7fe      	b.n	8001b1c <NMI_Handler+0x4>

08001b1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b22:	e7fe      	b.n	8001b22 <HardFault_Handler+0x4>

08001b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b28:	e7fe      	b.n	8001b28 <MemManage_Handler+0x4>

08001b2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b2e:	e7fe      	b.n	8001b2e <BusFault_Handler+0x4>

08001b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b34:	e7fe      	b.n	8001b34 <UsageFault_Handler+0x4>

08001b36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr

08001b42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b42:	b480      	push	{r7}
 8001b44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bc80      	pop	{r7}
 8001b4c:	4770      	bx	lr

08001b4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr

08001b5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b5e:	f000 f955 	bl	8001e0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
	...

08001b68 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
  UARTDMA_DmaIrqHandler(&huartdma6);
 8001b6c:	4802      	ldr	r0, [pc, #8]	; (8001b78 <DMA1_Channel6_IRQHandler+0x10>)
 8001b6e:	f7fe fcc6 	bl	80004fe <UARTDMA_DmaIrqHandler>
  return;
 8001b72:	bf00      	nop
  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	2000008c 	.word	0x2000008c

08001b7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  UARTDMA_UartIrqHandler(&huartdma6);
 8001b80:	4802      	ldr	r0, [pc, #8]	; (8001b8c <USART2_IRQHandler+0x10>)
 8001b82:	f7fe fc91 	bl	80004a8 <UARTDMA_UartIrqHandler>
  return;
 8001b86:	bf00      	nop
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	2000008c 	.word	0x2000008c

08001b90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return 1;
 8001b94:	2301      	movs	r3, #1
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr

08001b9e <_kill>:

int _kill(int pid, int sig)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ba8:	f001 ffb0 	bl	8003b0c <__errno>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2216      	movs	r2, #22
 8001bb0:	601a      	str	r2, [r3, #0]
  return -1;
 8001bb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <_exit>:

void _exit (int status)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bc6:	f04f 31ff 	mov.w	r1, #4294967295
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff ffe7 	bl	8001b9e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bd0:	e7fe      	b.n	8001bd0 <_exit+0x12>

08001bd2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b086      	sub	sp, #24
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	60f8      	str	r0, [r7, #12]
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
 8001be2:	e00a      	b.n	8001bfa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001be4:	f3af 8000 	nop.w
 8001be8:	4601      	mov	r1, r0
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	1c5a      	adds	r2, r3, #1
 8001bee:	60ba      	str	r2, [r7, #8]
 8001bf0:	b2ca      	uxtb	r2, r1
 8001bf2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	697a      	ldr	r2, [r7, #20]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	dbf0      	blt.n	8001be4 <_read+0x12>
  }

  return len;
 8001c02:	687b      	ldr	r3, [r7, #4]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]
 8001c1c:	e009      	b.n	8001c32 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	1c5a      	adds	r2, r3, #1
 8001c22:	60ba      	str	r2, [r7, #8]
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe fda0 	bl	800076c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	617b      	str	r3, [r7, #20]
 8001c32:	697a      	ldr	r2, [r7, #20]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	dbf1      	blt.n	8001c1e <_write+0x12>
  }
  return len;
 8001c3a:	687b      	ldr	r3, [r7, #4]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <_close>:

int _close(int file)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr

08001c5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
 8001c62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c6a:	605a      	str	r2, [r3, #4]
  return 0;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr

08001c78 <_isatty>:

int _isatty(int file)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c80:	2301      	movs	r3, #1
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr

08001c8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr

08001ca4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cac:	4a14      	ldr	r2, [pc, #80]	; (8001d00 <_sbrk+0x5c>)
 8001cae:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <_sbrk+0x60>)
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cb8:	4b13      	ldr	r3, [pc, #76]	; (8001d08 <_sbrk+0x64>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d102      	bne.n	8001cc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cc0:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <_sbrk+0x64>)
 8001cc2:	4a12      	ldr	r2, [pc, #72]	; (8001d0c <_sbrk+0x68>)
 8001cc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cc6:	4b10      	ldr	r3, [pc, #64]	; (8001d08 <_sbrk+0x64>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4413      	add	r3, r2
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d207      	bcs.n	8001ce4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cd4:	f001 ff1a 	bl	8003b0c <__errno>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	220c      	movs	r2, #12
 8001cdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cde:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce2:	e009      	b.n	8001cf8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ce4:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <_sbrk+0x64>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cea:	4b07      	ldr	r3, [pc, #28]	; (8001d08 <_sbrk+0x64>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	4a05      	ldr	r2, [pc, #20]	; (8001d08 <_sbrk+0x64>)
 8001cf4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	20014000 	.word	0x20014000
 8001d04:	00000400 	.word	0x00000400
 8001d08:	20001208 	.word	0x20001208
 8001d0c:	20001220 	.word	0x20001220

08001d10 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr

08001d1c <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d1c:	f7ff fff8 	bl	8001d10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d20:	480b      	ldr	r0, [pc, #44]	; (8001d50 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d22:	490c      	ldr	r1, [pc, #48]	; (8001d54 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d24:	4a0c      	ldr	r2, [pc, #48]	; (8001d58 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d28:	e002      	b.n	8001d30 <LoopCopyDataInit>

08001d2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d2e:	3304      	adds	r3, #4

08001d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d34:	d3f9      	bcc.n	8001d2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d36:	4a09      	ldr	r2, [pc, #36]	; (8001d5c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d38:	4c09      	ldr	r4, [pc, #36]	; (8001d60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d3c:	e001      	b.n	8001d42 <LoopFillZerobss>

08001d3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d40:	3204      	adds	r2, #4

08001d42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d44:	d3fb      	bcc.n	8001d3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d46:	f001 fee7 	bl	8003b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d4a:	f7fe fd21 	bl	8000790 <main>
  bx lr
 8001d4e:	4770      	bx	lr
  ldr r0, =_sdata
 8001d50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d54:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001d58:	08005598 	.word	0x08005598
  ldr r2, =_sbss
 8001d5c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001d60:	20001220 	.word	0x20001220

08001d64 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d64:	e7fe      	b.n	8001d64 <ADC1_IRQHandler>

08001d66 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b082      	sub	sp, #8
 8001d6a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d70:	2003      	movs	r0, #3
 8001d72:	f000 f955 	bl	8002020 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d76:	2000      	movs	r0, #0
 8001d78:	f000 f80e 	bl	8001d98 <HAL_InitTick>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d002      	beq.n	8001d88 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	71fb      	strb	r3, [r7, #7]
 8001d86:	e001      	b.n	8001d8c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d88:	f7ff fd8a 	bl	80018a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
	...

08001d98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001da0:	2300      	movs	r3, #0
 8001da2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001da4:	4b16      	ldr	r3, [pc, #88]	; (8001e00 <HAL_InitTick+0x68>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d022      	beq.n	8001df2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001dac:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <HAL_InitTick+0x6c>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <HAL_InitTick+0x68>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001db8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f000 f962 	bl	800208a <HAL_SYSTICK_Config>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10f      	bne.n	8001dec <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b0f      	cmp	r3, #15
 8001dd0:	d809      	bhi.n	8001de6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	6879      	ldr	r1, [r7, #4]
 8001dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8001dda:	f000 f92c 	bl	8002036 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dde:	4a0a      	ldr	r2, [pc, #40]	; (8001e08 <HAL_InitTick+0x70>)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6013      	str	r3, [r2, #0]
 8001de4:	e007      	b.n	8001df6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	73fb      	strb	r3, [r7, #15]
 8001dea:	e004      	b.n	8001df6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	73fb      	strb	r3, [r7, #15]
 8001df0:	e001      	b.n	8001df6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	20000008 	.word	0x20000008
 8001e04:	20000000 	.word	0x20000000
 8001e08:	20000004 	.word	0x20000004

08001e0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e10:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <HAL_IncTick+0x1c>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <HAL_IncTick+0x20>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4413      	add	r3, r2
 8001e1a:	4a03      	ldr	r2, [pc, #12]	; (8001e28 <HAL_IncTick+0x1c>)
 8001e1c:	6013      	str	r3, [r2, #0]
}
 8001e1e:	bf00      	nop
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	2000120c 	.word	0x2000120c
 8001e2c:	20000008 	.word	0x20000008

08001e30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  return uwTick;
 8001e34:	4b02      	ldr	r3, [pc, #8]	; (8001e40 <HAL_GetTick+0x10>)
 8001e36:	681b      	ldr	r3, [r3, #0]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr
 8001e40:	2000120c 	.word	0x2000120c

08001e44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e4c:	f7ff fff0 	bl	8001e30 <HAL_GetTick>
 8001e50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e5c:	d004      	beq.n	8001e68 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e5e:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <HAL_Delay+0x40>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	4413      	add	r3, r2
 8001e66:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e68:	bf00      	nop
 8001e6a:	f7ff ffe1 	bl	8001e30 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d8f7      	bhi.n	8001e6a <HAL_Delay+0x26>
  {
  }
}
 8001e7a:	bf00      	nop
 8001e7c:	bf00      	nop
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20000008 	.word	0x20000008

08001e88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e98:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <__NVIC_SetPriorityGrouping+0x44>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e9e:	68ba      	ldr	r2, [r7, #8]
 8001ea0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eba:	4a04      	ldr	r2, [pc, #16]	; (8001ecc <__NVIC_SetPriorityGrouping+0x44>)
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	60d3      	str	r3, [r2, #12]
}
 8001ec0:	bf00      	nop
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ed4:	4b04      	ldr	r3, [pc, #16]	; (8001ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	0a1b      	lsrs	r3, r3, #8
 8001eda:	f003 0307 	and.w	r3, r3, #7
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	e000ed00 	.word	0xe000ed00

08001eec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	db0b      	blt.n	8001f16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001efe:	79fb      	ldrb	r3, [r7, #7]
 8001f00:	f003 021f 	and.w	r2, r3, #31
 8001f04:	4906      	ldr	r1, [pc, #24]	; (8001f20 <__NVIC_EnableIRQ+0x34>)
 8001f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0a:	095b      	lsrs	r3, r3, #5
 8001f0c:	2001      	movs	r0, #1
 8001f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f16:	bf00      	nop
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr
 8001f20:	e000e100 	.word	0xe000e100

08001f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	6039      	str	r1, [r7, #0]
 8001f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	db0a      	blt.n	8001f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	490c      	ldr	r1, [pc, #48]	; (8001f70 <__NVIC_SetPriority+0x4c>)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	0112      	lsls	r2, r2, #4
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	440b      	add	r3, r1
 8001f48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f4c:	e00a      	b.n	8001f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	4908      	ldr	r1, [pc, #32]	; (8001f74 <__NVIC_SetPriority+0x50>)
 8001f54:	79fb      	ldrb	r3, [r7, #7]
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	3b04      	subs	r3, #4
 8001f5c:	0112      	lsls	r2, r2, #4
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	440b      	add	r3, r1
 8001f62:	761a      	strb	r2, [r3, #24]
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	e000e100 	.word	0xe000e100
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b089      	sub	sp, #36	; 0x24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	f1c3 0307 	rsb	r3, r3, #7
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	bf28      	it	cs
 8001f96:	2304      	movcs	r3, #4
 8001f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	2b06      	cmp	r3, #6
 8001fa0:	d902      	bls.n	8001fa8 <NVIC_EncodePriority+0x30>
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3b03      	subs	r3, #3
 8001fa6:	e000      	b.n	8001faa <NVIC_EncodePriority+0x32>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fac:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	43da      	mvns	r2, r3
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	401a      	ands	r2, r3
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fca:	43d9      	mvns	r1, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd0:	4313      	orrs	r3, r2
         );
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3724      	adds	r7, #36	; 0x24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bc80      	pop	{r7}
 8001fda:	4770      	bx	lr

08001fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fec:	d301      	bcc.n	8001ff2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e00f      	b.n	8002012 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ff2:	4a0a      	ldr	r2, [pc, #40]	; (800201c <SysTick_Config+0x40>)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ffa:	210f      	movs	r1, #15
 8001ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8002000:	f7ff ff90 	bl	8001f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002004:	4b05      	ldr	r3, [pc, #20]	; (800201c <SysTick_Config+0x40>)
 8002006:	2200      	movs	r2, #0
 8002008:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800200a:	4b04      	ldr	r3, [pc, #16]	; (800201c <SysTick_Config+0x40>)
 800200c:	2207      	movs	r2, #7
 800200e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	e000e010 	.word	0xe000e010

08002020 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f7ff ff2d 	bl	8001e88 <__NVIC_SetPriorityGrouping>
}
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b086      	sub	sp, #24
 800203a:	af00      	add	r7, sp, #0
 800203c:	4603      	mov	r3, r0
 800203e:	60b9      	str	r1, [r7, #8]
 8002040:	607a      	str	r2, [r7, #4]
 8002042:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002048:	f7ff ff42 	bl	8001ed0 <__NVIC_GetPriorityGrouping>
 800204c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	68b9      	ldr	r1, [r7, #8]
 8002052:	6978      	ldr	r0, [r7, #20]
 8002054:	f7ff ff90 	bl	8001f78 <NVIC_EncodePriority>
 8002058:	4602      	mov	r2, r0
 800205a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800205e:	4611      	mov	r1, r2
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff ff5f 	bl	8001f24 <__NVIC_SetPriority>
}
 8002066:	bf00      	nop
 8002068:	3718      	adds	r7, #24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b082      	sub	sp, #8
 8002072:	af00      	add	r7, sp, #0
 8002074:	4603      	mov	r3, r0
 8002076:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff ff35 	bl	8001eec <__NVIC_EnableIRQ>
}
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b082      	sub	sp, #8
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7ff ffa2 	bl	8001fdc <SysTick_Config>
 8002098:	4603      	mov	r3, r0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
	...

080020a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e059      	b.n	800216a <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	461a      	mov	r2, r3
 80020bc:	4b2d      	ldr	r3, [pc, #180]	; (8002174 <HAL_DMA_Init+0xd0>)
 80020be:	429a      	cmp	r2, r3
 80020c0:	d80f      	bhi.n	80020e2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	461a      	mov	r2, r3
 80020c8:	4b2b      	ldr	r3, [pc, #172]	; (8002178 <HAL_DMA_Init+0xd4>)
 80020ca:	4413      	add	r3, r2
 80020cc:	4a2b      	ldr	r2, [pc, #172]	; (800217c <HAL_DMA_Init+0xd8>)
 80020ce:	fba2 2303 	umull	r2, r3, r2, r3
 80020d2:	091b      	lsrs	r3, r3, #4
 80020d4:	009a      	lsls	r2, r3, #2
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a28      	ldr	r2, [pc, #160]	; (8002180 <HAL_DMA_Init+0xdc>)
 80020de:	63da      	str	r2, [r3, #60]	; 0x3c
 80020e0:	e00e      	b.n	8002100 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	461a      	mov	r2, r3
 80020e8:	4b26      	ldr	r3, [pc, #152]	; (8002184 <HAL_DMA_Init+0xe0>)
 80020ea:	4413      	add	r3, r2
 80020ec:	4a23      	ldr	r2, [pc, #140]	; (800217c <HAL_DMA_Init+0xd8>)
 80020ee:	fba2 2303 	umull	r2, r3, r2, r3
 80020f2:	091b      	lsrs	r3, r3, #4
 80020f4:	009a      	lsls	r2, r3, #2
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a22      	ldr	r2, [pc, #136]	; (8002188 <HAL_DMA_Init+0xe4>)
 80020fe:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2202      	movs	r2, #2
 8002104:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800211a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002124:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002130:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800213c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	4313      	orrs	r3, r2
 8002148:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr
 8002174:	40026407 	.word	0x40026407
 8002178:	bffd9ff8 	.word	0xbffd9ff8
 800217c:	cccccccd 	.word	0xcccccccd
 8002180:	40026000 	.word	0x40026000
 8002184:	bffd9bf8 	.word	0xbffd9bf8
 8002188:	40026400 	.word	0x40026400

0800218c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
 8002198:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800219a:	2300      	movs	r3, #0
 800219c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d101      	bne.n	80021ac <HAL_DMA_Start_IT+0x20>
 80021a8:	2302      	movs	r3, #2
 80021aa:	e04b      	b.n	8002244 <HAL_DMA_Start_IT+0xb8>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d13a      	bne.n	8002236 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2202      	movs	r2, #2
 80021c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 0201 	bic.w	r2, r2, #1
 80021dc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	68b9      	ldr	r1, [r7, #8]
 80021e4:	68f8      	ldr	r0, [r7, #12]
 80021e6:	f000 f831 	bl	800224c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d008      	beq.n	8002204 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f042 020e 	orr.w	r2, r2, #14
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	e00f      	b.n	8002224 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f022 0204 	bic.w	r2, r2, #4
 8002212:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 020a 	orr.w	r2, r2, #10
 8002222:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0201 	orr.w	r2, r2, #1
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	e005      	b.n	8002242 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800223e:	2302      	movs	r3, #2
 8002240:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002242:	7dfb      	ldrb	r3, [r7, #23]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
 8002258:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	f003 021c 	and.w	r2, r3, #28
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002266:	2101      	movs	r1, #1
 8002268:	fa01 f202 	lsl.w	r2, r1, r2
 800226c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b10      	cmp	r3, #16
 800227c:	d108      	bne.n	8002290 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800228e:	e007      	b.n	80022a0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68ba      	ldr	r2, [r7, #8]
 8002296:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	60da      	str	r2, [r3, #12]
}
 80022a0:	bf00      	nop
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bc80      	pop	{r7}
 80022a8:	4770      	bx	lr
	...

080022ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b087      	sub	sp, #28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80022ba:	2300      	movs	r3, #0
 80022bc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80022be:	2300      	movs	r3, #0
 80022c0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80022c2:	e160      	b.n	8002586 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	2101      	movs	r1, #1
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	fa01 f303 	lsl.w	r3, r1, r3
 80022d0:	4013      	ands	r3, r2
 80022d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 8152 	beq.w	8002580 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f003 0303 	and.w	r3, r3, #3
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d005      	beq.n	80022f4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d130      	bne.n	8002356 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	2203      	movs	r2, #3
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	4013      	ands	r3, r2
 800230a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	68da      	ldr	r2, [r3, #12]
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	4313      	orrs	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800232a:	2201      	movs	r2, #1
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	43db      	mvns	r3, r3
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	4013      	ands	r3, r2
 8002338:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	091b      	lsrs	r3, r3, #4
 8002340:	f003 0201 	and.w	r2, r3, #1
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	4313      	orrs	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	2b03      	cmp	r3, #3
 8002360:	d017      	beq.n	8002392 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	2203      	movs	r2, #3
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43db      	mvns	r3, r3
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	4013      	ands	r3, r2
 8002378:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	4313      	orrs	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f003 0303 	and.w	r3, r3, #3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d123      	bne.n	80023e6 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	08da      	lsrs	r2, r3, #3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3208      	adds	r2, #8
 80023a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023aa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	220f      	movs	r2, #15
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43db      	mvns	r3, r3
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	4013      	ands	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	691a      	ldr	r2, [r3, #16]
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	08da      	lsrs	r2, r3, #3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3208      	adds	r2, #8
 80023e0:	6939      	ldr	r1, [r7, #16]
 80023e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	2203      	movs	r2, #3
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43db      	mvns	r3, r3
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	4013      	ands	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f003 0203 	and.w	r2, r3, #3
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002422:	2b00      	cmp	r3, #0
 8002424:	f000 80ac 	beq.w	8002580 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002428:	4b5e      	ldr	r3, [pc, #376]	; (80025a4 <HAL_GPIO_Init+0x2f8>)
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	4a5d      	ldr	r2, [pc, #372]	; (80025a4 <HAL_GPIO_Init+0x2f8>)
 800242e:	f043 0301 	orr.w	r3, r3, #1
 8002432:	6213      	str	r3, [r2, #32]
 8002434:	4b5b      	ldr	r3, [pc, #364]	; (80025a4 <HAL_GPIO_Init+0x2f8>)
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	60bb      	str	r3, [r7, #8]
 800243e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002440:	4a59      	ldr	r2, [pc, #356]	; (80025a8 <HAL_GPIO_Init+0x2fc>)
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	089b      	lsrs	r3, r3, #2
 8002446:	3302      	adds	r3, #2
 8002448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	f003 0303 	and.w	r3, r3, #3
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	220f      	movs	r2, #15
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	43db      	mvns	r3, r3
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	4013      	ands	r3, r2
 8002462:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a51      	ldr	r2, [pc, #324]	; (80025ac <HAL_GPIO_Init+0x300>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d025      	beq.n	80024b8 <HAL_GPIO_Init+0x20c>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a50      	ldr	r2, [pc, #320]	; (80025b0 <HAL_GPIO_Init+0x304>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d01f      	beq.n	80024b4 <HAL_GPIO_Init+0x208>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a4f      	ldr	r2, [pc, #316]	; (80025b4 <HAL_GPIO_Init+0x308>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d019      	beq.n	80024b0 <HAL_GPIO_Init+0x204>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a4e      	ldr	r2, [pc, #312]	; (80025b8 <HAL_GPIO_Init+0x30c>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d013      	beq.n	80024ac <HAL_GPIO_Init+0x200>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a4d      	ldr	r2, [pc, #308]	; (80025bc <HAL_GPIO_Init+0x310>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d00d      	beq.n	80024a8 <HAL_GPIO_Init+0x1fc>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a4c      	ldr	r2, [pc, #304]	; (80025c0 <HAL_GPIO_Init+0x314>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d007      	beq.n	80024a4 <HAL_GPIO_Init+0x1f8>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a4b      	ldr	r2, [pc, #300]	; (80025c4 <HAL_GPIO_Init+0x318>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d101      	bne.n	80024a0 <HAL_GPIO_Init+0x1f4>
 800249c:	2306      	movs	r3, #6
 800249e:	e00c      	b.n	80024ba <HAL_GPIO_Init+0x20e>
 80024a0:	2307      	movs	r3, #7
 80024a2:	e00a      	b.n	80024ba <HAL_GPIO_Init+0x20e>
 80024a4:	2305      	movs	r3, #5
 80024a6:	e008      	b.n	80024ba <HAL_GPIO_Init+0x20e>
 80024a8:	2304      	movs	r3, #4
 80024aa:	e006      	b.n	80024ba <HAL_GPIO_Init+0x20e>
 80024ac:	2303      	movs	r3, #3
 80024ae:	e004      	b.n	80024ba <HAL_GPIO_Init+0x20e>
 80024b0:	2302      	movs	r3, #2
 80024b2:	e002      	b.n	80024ba <HAL_GPIO_Init+0x20e>
 80024b4:	2301      	movs	r3, #1
 80024b6:	e000      	b.n	80024ba <HAL_GPIO_Init+0x20e>
 80024b8:	2300      	movs	r3, #0
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	f002 0203 	and.w	r2, r2, #3
 80024c0:	0092      	lsls	r2, r2, #2
 80024c2:	4093      	lsls	r3, r2
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80024ca:	4937      	ldr	r1, [pc, #220]	; (80025a8 <HAL_GPIO_Init+0x2fc>)
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	089b      	lsrs	r3, r3, #2
 80024d0:	3302      	adds	r3, #2
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024d8:	4b3b      	ldr	r3, [pc, #236]	; (80025c8 <HAL_GPIO_Init+0x31c>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	43db      	mvns	r3, r3
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	4013      	ands	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80024fc:	4a32      	ldr	r2, [pc, #200]	; (80025c8 <HAL_GPIO_Init+0x31c>)
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002502:	4b31      	ldr	r3, [pc, #196]	; (80025c8 <HAL_GPIO_Init+0x31c>)
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	43db      	mvns	r3, r3
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	4013      	ands	r3, r2
 8002510:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	4313      	orrs	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002526:	4a28      	ldr	r2, [pc, #160]	; (80025c8 <HAL_GPIO_Init+0x31c>)
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800252c:	4b26      	ldr	r3, [pc, #152]	; (80025c8 <HAL_GPIO_Init+0x31c>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	43db      	mvns	r3, r3
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	4013      	ands	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d003      	beq.n	8002550 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	4313      	orrs	r3, r2
 800254e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002550:	4a1d      	ldr	r2, [pc, #116]	; (80025c8 <HAL_GPIO_Init+0x31c>)
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002556:	4b1c      	ldr	r3, [pc, #112]	; (80025c8 <HAL_GPIO_Init+0x31c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	43db      	mvns	r3, r3
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	4013      	ands	r3, r2
 8002564:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	4313      	orrs	r3, r2
 8002578:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800257a:	4a13      	ldr	r2, [pc, #76]	; (80025c8 <HAL_GPIO_Init+0x31c>)
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	3301      	adds	r3, #1
 8002584:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	fa22 f303 	lsr.w	r3, r2, r3
 8002590:	2b00      	cmp	r3, #0
 8002592:	f47f ae97 	bne.w	80022c4 <HAL_GPIO_Init+0x18>
  }
}
 8002596:	bf00      	nop
 8002598:	bf00      	nop
 800259a:	371c      	adds	r7, #28
 800259c:	46bd      	mov	sp, r7
 800259e:	bc80      	pop	{r7}
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	40023800 	.word	0x40023800
 80025a8:	40010000 	.word	0x40010000
 80025ac:	40020000 	.word	0x40020000
 80025b0:	40020400 	.word	0x40020400
 80025b4:	40020800 	.word	0x40020800
 80025b8:	40020c00 	.word	0x40020c00
 80025bc:	40021000 	.word	0x40021000
 80025c0:	40021400 	.word	0x40021400
 80025c4:	40021800 	.word	0x40021800
 80025c8:	40010400 	.word	0x40010400

080025cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	460b      	mov	r3, r1
 80025d6:	807b      	strh	r3, [r7, #2]
 80025d8:	4613      	mov	r3, r2
 80025da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025dc:	787b      	ldrb	r3, [r7, #1]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025e2:	887a      	ldrh	r2, [r7, #2]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80025e8:	e003      	b.n	80025f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80025ea:	887b      	ldrh	r3, [r7, #2]
 80025ec:	041a      	lsls	r2, r3, #16
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	619a      	str	r2, [r3, #24]
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr

080025fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b088      	sub	sp, #32
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e31d      	b.n	8002c4a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800260e:	4b94      	ldr	r3, [pc, #592]	; (8002860 <HAL_RCC_OscConfig+0x264>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 030c 	and.w	r3, r3, #12
 8002616:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002618:	4b91      	ldr	r3, [pc, #580]	; (8002860 <HAL_RCC_OscConfig+0x264>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002620:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b00      	cmp	r3, #0
 800262c:	d07b      	beq.n	8002726 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	2b08      	cmp	r3, #8
 8002632:	d006      	beq.n	8002642 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	2b0c      	cmp	r3, #12
 8002638:	d10f      	bne.n	800265a <HAL_RCC_OscConfig+0x5e>
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002640:	d10b      	bne.n	800265a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002642:	4b87      	ldr	r3, [pc, #540]	; (8002860 <HAL_RCC_OscConfig+0x264>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d06a      	beq.n	8002724 <HAL_RCC_OscConfig+0x128>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d166      	bne.n	8002724 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e2f7      	b.n	8002c4a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d106      	bne.n	8002670 <HAL_RCC_OscConfig+0x74>
 8002662:	4b7f      	ldr	r3, [pc, #508]	; (8002860 <HAL_RCC_OscConfig+0x264>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a7e      	ldr	r2, [pc, #504]	; (8002860 <HAL_RCC_OscConfig+0x264>)
 8002668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800266c:	6013      	str	r3, [r2, #0]
 800266e:	e02d      	b.n	80026cc <HAL_RCC_OscConfig+0xd0>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d10c      	bne.n	8002692 <HAL_RCC_OscConfig+0x96>
 8002678:	4b79      	ldr	r3, [pc, #484]	; (8002860 <HAL_RCC_OscConfig+0x264>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a78      	ldr	r2, [pc, #480]	; (8002860 <HAL_RCC_OscConfig+0x264>)
 800267e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002682:	6013      	str	r3, [r2, #0]
 8002684:	4b76      	ldr	r3, [pc, #472]	; (8002860 <HAL_RCC_OscConfig+0x264>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a75      	ldr	r2, [pc, #468]	; (8002860 <HAL_RCC_OscConfig+0x264>)
 800268a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800268e:	6013      	str	r3, [r2, #0]
 8002690:	e01c      	b.n	80026cc <HAL_RCC_OscConfig+0xd0>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2b05      	cmp	r3, #5
 8002698:	d10c      	bne.n	80026b4 <HAL_RCC_OscConfig+0xb8>
 800269a:	4b71      	ldr	r3, [pc, #452]	; (8002860 <HAL_RCC_OscConfig+0x264>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a70      	ldr	r2, [pc, #448]	; (8002860 <HAL_RCC_OscConfig+0x264>)
 80026a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026a4:	6013      	str	r3, [r2, #0]
 80026a6:	4b6e      	ldr	r3, [pc, #440]	; (8002860 <HAL_RCC_OscConfig+0x264>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a6d      	ldr	r2, [pc, #436]	; (8002860 <HAL_RCC_OscConfig+0x264>)
 80026ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	e00b      	b.n	80026cc <HAL_RCC_OscConfig+0xd0>
 80026b4:	4b6a      	ldr	r3, [pc, #424]	; (8002860 <HAL_RCC_OscConfig+0x264>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a69      	ldr	r2, [pc, #420]	; (8002860 <HAL_RCC_OscConfig+0x264>)
 80026ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026be:	6013      	str	r3, [r2, #0]
 80026c0:	4b67      	ldr	r3, [pc, #412]	; (8002860 <HAL_RCC_OscConfig+0x264>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a66      	ldr	r2, [pc, #408]	; (8002860 <HAL_RCC_OscConfig+0x264>)
 80026c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d013      	beq.n	80026fc <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d4:	f7ff fbac 	bl	8001e30 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026dc:	f7ff fba8 	bl	8001e30 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b64      	cmp	r3, #100	; 0x64
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e2ad      	b.n	8002c4a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026ee:	4b5c      	ldr	r3, [pc, #368]	; (8002860 <HAL_RCC_OscConfig+0x264>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0f0      	beq.n	80026dc <HAL_RCC_OscConfig+0xe0>
 80026fa:	e014      	b.n	8002726 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fc:	f7ff fb98 	bl	8001e30 <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002704:	f7ff fb94 	bl	8001e30 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b64      	cmp	r3, #100	; 0x64
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e299      	b.n	8002c4a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002716:	4b52      	ldr	r3, [pc, #328]	; (8002860 <HAL_RCC_OscConfig+0x264>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1f0      	bne.n	8002704 <HAL_RCC_OscConfig+0x108>
 8002722:	e000      	b.n	8002726 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d05a      	beq.n	80027e8 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	2b04      	cmp	r3, #4
 8002736:	d005      	beq.n	8002744 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	2b0c      	cmp	r3, #12
 800273c:	d119      	bne.n	8002772 <HAL_RCC_OscConfig+0x176>
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d116      	bne.n	8002772 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002744:	4b46      	ldr	r3, [pc, #280]	; (8002860 <HAL_RCC_OscConfig+0x264>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d005      	beq.n	800275c <HAL_RCC_OscConfig+0x160>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d001      	beq.n	800275c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e276      	b.n	8002c4a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800275c:	4b40      	ldr	r3, [pc, #256]	; (8002860 <HAL_RCC_OscConfig+0x264>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	021b      	lsls	r3, r3, #8
 800276a:	493d      	ldr	r1, [pc, #244]	; (8002860 <HAL_RCC_OscConfig+0x264>)
 800276c:	4313      	orrs	r3, r2
 800276e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002770:	e03a      	b.n	80027e8 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d020      	beq.n	80027bc <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800277a:	4b3a      	ldr	r3, [pc, #232]	; (8002864 <HAL_RCC_OscConfig+0x268>)
 800277c:	2201      	movs	r2, #1
 800277e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002780:	f7ff fb56 	bl	8001e30 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002788:	f7ff fb52 	bl	8001e30 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e257      	b.n	8002c4a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800279a:	4b31      	ldr	r3, [pc, #196]	; (8002860 <HAL_RCC_OscConfig+0x264>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0f0      	beq.n	8002788 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a6:	4b2e      	ldr	r3, [pc, #184]	; (8002860 <HAL_RCC_OscConfig+0x264>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	021b      	lsls	r3, r3, #8
 80027b4:	492a      	ldr	r1, [pc, #168]	; (8002860 <HAL_RCC_OscConfig+0x264>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	604b      	str	r3, [r1, #4]
 80027ba:	e015      	b.n	80027e8 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027bc:	4b29      	ldr	r3, [pc, #164]	; (8002864 <HAL_RCC_OscConfig+0x268>)
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c2:	f7ff fb35 	bl	8001e30 <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027c8:	e008      	b.n	80027dc <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027ca:	f7ff fb31 	bl	8001e30 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e236      	b.n	8002c4a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027dc:	4b20      	ldr	r3, [pc, #128]	; (8002860 <HAL_RCC_OscConfig+0x264>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1f0      	bne.n	80027ca <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0310 	and.w	r3, r3, #16
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 80b8 	beq.w	8002966 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d170      	bne.n	80028de <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027fc:	4b18      	ldr	r3, [pc, #96]	; (8002860 <HAL_RCC_OscConfig+0x264>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002804:	2b00      	cmp	r3, #0
 8002806:	d005      	beq.n	8002814 <HAL_RCC_OscConfig+0x218>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e21a      	b.n	8002c4a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a1a      	ldr	r2, [r3, #32]
 8002818:	4b11      	ldr	r3, [pc, #68]	; (8002860 <HAL_RCC_OscConfig+0x264>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002820:	429a      	cmp	r2, r3
 8002822:	d921      	bls.n	8002868 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	4618      	mov	r0, r3
 800282a:	f000 fc7d 	bl	8003128 <RCC_SetFlashLatencyFromMSIRange>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e208      	b.n	8002c4a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002838:	4b09      	ldr	r3, [pc, #36]	; (8002860 <HAL_RCC_OscConfig+0x264>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	4906      	ldr	r1, [pc, #24]	; (8002860 <HAL_RCC_OscConfig+0x264>)
 8002846:	4313      	orrs	r3, r2
 8002848:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800284a:	4b05      	ldr	r3, [pc, #20]	; (8002860 <HAL_RCC_OscConfig+0x264>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	061b      	lsls	r3, r3, #24
 8002858:	4901      	ldr	r1, [pc, #4]	; (8002860 <HAL_RCC_OscConfig+0x264>)
 800285a:	4313      	orrs	r3, r2
 800285c:	604b      	str	r3, [r1, #4]
 800285e:	e020      	b.n	80028a2 <HAL_RCC_OscConfig+0x2a6>
 8002860:	40023800 	.word	0x40023800
 8002864:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002868:	4b99      	ldr	r3, [pc, #612]	; (8002ad0 <HAL_RCC_OscConfig+0x4d4>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	4996      	ldr	r1, [pc, #600]	; (8002ad0 <HAL_RCC_OscConfig+0x4d4>)
 8002876:	4313      	orrs	r3, r2
 8002878:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800287a:	4b95      	ldr	r3, [pc, #596]	; (8002ad0 <HAL_RCC_OscConfig+0x4d4>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	061b      	lsls	r3, r3, #24
 8002888:	4991      	ldr	r1, [pc, #580]	; (8002ad0 <HAL_RCC_OscConfig+0x4d4>)
 800288a:	4313      	orrs	r3, r2
 800288c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	4618      	mov	r0, r3
 8002894:	f000 fc48 	bl	8003128 <RCC_SetFlashLatencyFromMSIRange>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e1d3      	b.n	8002c4a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	0b5b      	lsrs	r3, r3, #13
 80028a8:	3301      	adds	r3, #1
 80028aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80028b2:	4a87      	ldr	r2, [pc, #540]	; (8002ad0 <HAL_RCC_OscConfig+0x4d4>)
 80028b4:	6892      	ldr	r2, [r2, #8]
 80028b6:	0912      	lsrs	r2, r2, #4
 80028b8:	f002 020f 	and.w	r2, r2, #15
 80028bc:	4985      	ldr	r1, [pc, #532]	; (8002ad4 <HAL_RCC_OscConfig+0x4d8>)
 80028be:	5c8a      	ldrb	r2, [r1, r2]
 80028c0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80028c2:	4a85      	ldr	r2, [pc, #532]	; (8002ad8 <HAL_RCC_OscConfig+0x4dc>)
 80028c4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80028c6:	4b85      	ldr	r3, [pc, #532]	; (8002adc <HAL_RCC_OscConfig+0x4e0>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff fa64 	bl	8001d98 <HAL_InitTick>
 80028d0:	4603      	mov	r3, r0
 80028d2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d045      	beq.n	8002966 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80028da:	7bfb      	ldrb	r3, [r7, #15]
 80028dc:	e1b5      	b.n	8002c4a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d029      	beq.n	800293a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028e6:	4b7e      	ldr	r3, [pc, #504]	; (8002ae0 <HAL_RCC_OscConfig+0x4e4>)
 80028e8:	2201      	movs	r2, #1
 80028ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ec:	f7ff faa0 	bl	8001e30 <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028f4:	f7ff fa9c 	bl	8001e30 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e1a1      	b.n	8002c4a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002906:	4b72      	ldr	r3, [pc, #456]	; (8002ad0 <HAL_RCC_OscConfig+0x4d4>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800290e:	2b00      	cmp	r3, #0
 8002910:	d0f0      	beq.n	80028f4 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002912:	4b6f      	ldr	r3, [pc, #444]	; (8002ad0 <HAL_RCC_OscConfig+0x4d4>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	496c      	ldr	r1, [pc, #432]	; (8002ad0 <HAL_RCC_OscConfig+0x4d4>)
 8002920:	4313      	orrs	r3, r2
 8002922:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002924:	4b6a      	ldr	r3, [pc, #424]	; (8002ad0 <HAL_RCC_OscConfig+0x4d4>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	69db      	ldr	r3, [r3, #28]
 8002930:	061b      	lsls	r3, r3, #24
 8002932:	4967      	ldr	r1, [pc, #412]	; (8002ad0 <HAL_RCC_OscConfig+0x4d4>)
 8002934:	4313      	orrs	r3, r2
 8002936:	604b      	str	r3, [r1, #4]
 8002938:	e015      	b.n	8002966 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800293a:	4b69      	ldr	r3, [pc, #420]	; (8002ae0 <HAL_RCC_OscConfig+0x4e4>)
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002940:	f7ff fa76 	bl	8001e30 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002948:	f7ff fa72 	bl	8001e30 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e177      	b.n	8002c4a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800295a:	4b5d      	ldr	r3, [pc, #372]	; (8002ad0 <HAL_RCC_OscConfig+0x4d4>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f0      	bne.n	8002948 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	2b00      	cmp	r3, #0
 8002970:	d030      	beq.n	80029d4 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d016      	beq.n	80029a8 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800297a:	4b5a      	ldr	r3, [pc, #360]	; (8002ae4 <HAL_RCC_OscConfig+0x4e8>)
 800297c:	2201      	movs	r2, #1
 800297e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002980:	f7ff fa56 	bl	8001e30 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002988:	f7ff fa52 	bl	8001e30 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e157      	b.n	8002c4a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800299a:	4b4d      	ldr	r3, [pc, #308]	; (8002ad0 <HAL_RCC_OscConfig+0x4d4>)
 800299c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d0f0      	beq.n	8002988 <HAL_RCC_OscConfig+0x38c>
 80029a6:	e015      	b.n	80029d4 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029a8:	4b4e      	ldr	r3, [pc, #312]	; (8002ae4 <HAL_RCC_OscConfig+0x4e8>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ae:	f7ff fa3f 	bl	8001e30 <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029b6:	f7ff fa3b 	bl	8001e30 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e140      	b.n	8002c4a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029c8:	4b41      	ldr	r3, [pc, #260]	; (8002ad0 <HAL_RCC_OscConfig+0x4d4>)
 80029ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1f0      	bne.n	80029b6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 80b5 	beq.w	8002b4c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029e2:	2300      	movs	r3, #0
 80029e4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029e6:	4b3a      	ldr	r3, [pc, #232]	; (8002ad0 <HAL_RCC_OscConfig+0x4d4>)
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10d      	bne.n	8002a0e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029f2:	4b37      	ldr	r3, [pc, #220]	; (8002ad0 <HAL_RCC_OscConfig+0x4d4>)
 80029f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f6:	4a36      	ldr	r2, [pc, #216]	; (8002ad0 <HAL_RCC_OscConfig+0x4d4>)
 80029f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029fc:	6253      	str	r3, [r2, #36]	; 0x24
 80029fe:	4b34      	ldr	r3, [pc, #208]	; (8002ad0 <HAL_RCC_OscConfig+0x4d4>)
 8002a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a06:	60bb      	str	r3, [r7, #8]
 8002a08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a0e:	4b36      	ldr	r3, [pc, #216]	; (8002ae8 <HAL_RCC_OscConfig+0x4ec>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d118      	bne.n	8002a4c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a1a:	4b33      	ldr	r3, [pc, #204]	; (8002ae8 <HAL_RCC_OscConfig+0x4ec>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a32      	ldr	r2, [pc, #200]	; (8002ae8 <HAL_RCC_OscConfig+0x4ec>)
 8002a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a26:	f7ff fa03 	bl	8001e30 <HAL_GetTick>
 8002a2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a2c:	e008      	b.n	8002a40 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a2e:	f7ff f9ff 	bl	8001e30 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b64      	cmp	r3, #100	; 0x64
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e104      	b.n	8002c4a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a40:	4b29      	ldr	r3, [pc, #164]	; (8002ae8 <HAL_RCC_OscConfig+0x4ec>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d0f0      	beq.n	8002a2e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d106      	bne.n	8002a62 <HAL_RCC_OscConfig+0x466>
 8002a54:	4b1e      	ldr	r3, [pc, #120]	; (8002ad0 <HAL_RCC_OscConfig+0x4d4>)
 8002a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a58:	4a1d      	ldr	r2, [pc, #116]	; (8002ad0 <HAL_RCC_OscConfig+0x4d4>)
 8002a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a5e:	6353      	str	r3, [r2, #52]	; 0x34
 8002a60:	e02d      	b.n	8002abe <HAL_RCC_OscConfig+0x4c2>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10c      	bne.n	8002a84 <HAL_RCC_OscConfig+0x488>
 8002a6a:	4b19      	ldr	r3, [pc, #100]	; (8002ad0 <HAL_RCC_OscConfig+0x4d4>)
 8002a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a6e:	4a18      	ldr	r2, [pc, #96]	; (8002ad0 <HAL_RCC_OscConfig+0x4d4>)
 8002a70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a74:	6353      	str	r3, [r2, #52]	; 0x34
 8002a76:	4b16      	ldr	r3, [pc, #88]	; (8002ad0 <HAL_RCC_OscConfig+0x4d4>)
 8002a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a7a:	4a15      	ldr	r2, [pc, #84]	; (8002ad0 <HAL_RCC_OscConfig+0x4d4>)
 8002a7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a80:	6353      	str	r3, [r2, #52]	; 0x34
 8002a82:	e01c      	b.n	8002abe <HAL_RCC_OscConfig+0x4c2>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	2b05      	cmp	r3, #5
 8002a8a:	d10c      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x4aa>
 8002a8c:	4b10      	ldr	r3, [pc, #64]	; (8002ad0 <HAL_RCC_OscConfig+0x4d4>)
 8002a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a90:	4a0f      	ldr	r2, [pc, #60]	; (8002ad0 <HAL_RCC_OscConfig+0x4d4>)
 8002a92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a96:	6353      	str	r3, [r2, #52]	; 0x34
 8002a98:	4b0d      	ldr	r3, [pc, #52]	; (8002ad0 <HAL_RCC_OscConfig+0x4d4>)
 8002a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a9c:	4a0c      	ldr	r2, [pc, #48]	; (8002ad0 <HAL_RCC_OscConfig+0x4d4>)
 8002a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aa2:	6353      	str	r3, [r2, #52]	; 0x34
 8002aa4:	e00b      	b.n	8002abe <HAL_RCC_OscConfig+0x4c2>
 8002aa6:	4b0a      	ldr	r3, [pc, #40]	; (8002ad0 <HAL_RCC_OscConfig+0x4d4>)
 8002aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aaa:	4a09      	ldr	r2, [pc, #36]	; (8002ad0 <HAL_RCC_OscConfig+0x4d4>)
 8002aac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ab0:	6353      	str	r3, [r2, #52]	; 0x34
 8002ab2:	4b07      	ldr	r3, [pc, #28]	; (8002ad0 <HAL_RCC_OscConfig+0x4d4>)
 8002ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab6:	4a06      	ldr	r2, [pc, #24]	; (8002ad0 <HAL_RCC_OscConfig+0x4d4>)
 8002ab8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002abc:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d024      	beq.n	8002b10 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac6:	f7ff f9b3 	bl	8001e30 <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002acc:	e019      	b.n	8002b02 <HAL_RCC_OscConfig+0x506>
 8002ace:	bf00      	nop
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	08005404 	.word	0x08005404
 8002ad8:	20000000 	.word	0x20000000
 8002adc:	20000004 	.word	0x20000004
 8002ae0:	42470020 	.word	0x42470020
 8002ae4:	42470680 	.word	0x42470680
 8002ae8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aec:	f7ff f9a0 	bl	8001e30 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e0a3      	b.n	8002c4a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b02:	4b54      	ldr	r3, [pc, #336]	; (8002c54 <HAL_RCC_OscConfig+0x658>)
 8002b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d0ee      	beq.n	8002aec <HAL_RCC_OscConfig+0x4f0>
 8002b0e:	e014      	b.n	8002b3a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b10:	f7ff f98e 	bl	8001e30 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b16:	e00a      	b.n	8002b2e <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b18:	f7ff f98a 	bl	8001e30 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e08d      	b.n	8002c4a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b2e:	4b49      	ldr	r3, [pc, #292]	; (8002c54 <HAL_RCC_OscConfig+0x658>)
 8002b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1ee      	bne.n	8002b18 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b3a:	7ffb      	ldrb	r3, [r7, #31]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d105      	bne.n	8002b4c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b40:	4b44      	ldr	r3, [pc, #272]	; (8002c54 <HAL_RCC_OscConfig+0x658>)
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	4a43      	ldr	r2, [pc, #268]	; (8002c54 <HAL_RCC_OscConfig+0x658>)
 8002b46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b4a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d079      	beq.n	8002c48 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	2b0c      	cmp	r3, #12
 8002b58:	d056      	beq.n	8002c08 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d13b      	bne.n	8002bda <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b62:	4b3d      	ldr	r3, [pc, #244]	; (8002c58 <HAL_RCC_OscConfig+0x65c>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b68:	f7ff f962 	bl	8001e30 <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b70:	f7ff f95e 	bl	8001e30 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e063      	b.n	8002c4a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b82:	4b34      	ldr	r3, [pc, #208]	; (8002c54 <HAL_RCC_OscConfig+0x658>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1f0      	bne.n	8002b70 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b8e:	4b31      	ldr	r3, [pc, #196]	; (8002c54 <HAL_RCC_OscConfig+0x658>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9e:	4319      	orrs	r1, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba4:	430b      	orrs	r3, r1
 8002ba6:	492b      	ldr	r1, [pc, #172]	; (8002c54 <HAL_RCC_OscConfig+0x658>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bac:	4b2a      	ldr	r3, [pc, #168]	; (8002c58 <HAL_RCC_OscConfig+0x65c>)
 8002bae:	2201      	movs	r2, #1
 8002bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb2:	f7ff f93d 	bl	8001e30 <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bba:	f7ff f939 	bl	8001e30 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e03e      	b.n	8002c4a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bcc:	4b21      	ldr	r3, [pc, #132]	; (8002c54 <HAL_RCC_OscConfig+0x658>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d0f0      	beq.n	8002bba <HAL_RCC_OscConfig+0x5be>
 8002bd8:	e036      	b.n	8002c48 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bda:	4b1f      	ldr	r3, [pc, #124]	; (8002c58 <HAL_RCC_OscConfig+0x65c>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be0:	f7ff f926 	bl	8001e30 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002be8:	f7ff f922 	bl	8001e30 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e027      	b.n	8002c4a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bfa:	4b16      	ldr	r3, [pc, #88]	; (8002c54 <HAL_RCC_OscConfig+0x658>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1f0      	bne.n	8002be8 <HAL_RCC_OscConfig+0x5ec>
 8002c06:	e01f      	b.n	8002c48 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d101      	bne.n	8002c14 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e01a      	b.n	8002c4a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c14:	4b0f      	ldr	r3, [pc, #60]	; (8002c54 <HAL_RCC_OscConfig+0x658>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d10d      	bne.n	8002c44 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d106      	bne.n	8002c44 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d001      	beq.n	8002c48 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e000      	b.n	8002c4a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3720      	adds	r7, #32
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40023800 	.word	0x40023800
 8002c58:	42470060 	.word	0x42470060

08002c5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e11a      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c70:	4b8f      	ldr	r3, [pc, #572]	; (8002eb0 <HAL_RCC_ClockConfig+0x254>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d919      	bls.n	8002cb2 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d105      	bne.n	8002c90 <HAL_RCC_ClockConfig+0x34>
 8002c84:	4b8a      	ldr	r3, [pc, #552]	; (8002eb0 <HAL_RCC_ClockConfig+0x254>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a89      	ldr	r2, [pc, #548]	; (8002eb0 <HAL_RCC_ClockConfig+0x254>)
 8002c8a:	f043 0304 	orr.w	r3, r3, #4
 8002c8e:	6013      	str	r3, [r2, #0]
 8002c90:	4b87      	ldr	r3, [pc, #540]	; (8002eb0 <HAL_RCC_ClockConfig+0x254>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f023 0201 	bic.w	r2, r3, #1
 8002c98:	4985      	ldr	r1, [pc, #532]	; (8002eb0 <HAL_RCC_ClockConfig+0x254>)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ca0:	4b83      	ldr	r3, [pc, #524]	; (8002eb0 <HAL_RCC_ClockConfig+0x254>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d001      	beq.n	8002cb2 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e0f9      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d008      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cbe:	4b7d      	ldr	r3, [pc, #500]	; (8002eb4 <HAL_RCC_ClockConfig+0x258>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	497a      	ldr	r1, [pc, #488]	; (8002eb4 <HAL_RCC_ClockConfig+0x258>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 808e 	beq.w	8002dfa <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d107      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ce6:	4b73      	ldr	r3, [pc, #460]	; (8002eb4 <HAL_RCC_ClockConfig+0x258>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d121      	bne.n	8002d36 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e0d7      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b03      	cmp	r3, #3
 8002cfc:	d107      	bne.n	8002d0e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cfe:	4b6d      	ldr	r3, [pc, #436]	; (8002eb4 <HAL_RCC_ClockConfig+0x258>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d115      	bne.n	8002d36 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e0cb      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d107      	bne.n	8002d26 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d16:	4b67      	ldr	r3, [pc, #412]	; (8002eb4 <HAL_RCC_ClockConfig+0x258>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d109      	bne.n	8002d36 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e0bf      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002d26:	4b63      	ldr	r3, [pc, #396]	; (8002eb4 <HAL_RCC_ClockConfig+0x258>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e0b7      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d36:	4b5f      	ldr	r3, [pc, #380]	; (8002eb4 <HAL_RCC_ClockConfig+0x258>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f023 0203 	bic.w	r2, r3, #3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	495c      	ldr	r1, [pc, #368]	; (8002eb4 <HAL_RCC_ClockConfig+0x258>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d48:	f7ff f872 	bl	8001e30 <HAL_GetTick>
 8002d4c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d112      	bne.n	8002d7c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d56:	e00a      	b.n	8002d6e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d58:	f7ff f86a 	bl	8001e30 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e09b      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d6e:	4b51      	ldr	r3, [pc, #324]	; (8002eb4 <HAL_RCC_ClockConfig+0x258>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 030c 	and.w	r3, r3, #12
 8002d76:	2b08      	cmp	r3, #8
 8002d78:	d1ee      	bne.n	8002d58 <HAL_RCC_ClockConfig+0xfc>
 8002d7a:	e03e      	b.n	8002dfa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	2b03      	cmp	r3, #3
 8002d82:	d112      	bne.n	8002daa <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d84:	e00a      	b.n	8002d9c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d86:	f7ff f853 	bl	8001e30 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e084      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d9c:	4b45      	ldr	r3, [pc, #276]	; (8002eb4 <HAL_RCC_ClockConfig+0x258>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f003 030c 	and.w	r3, r3, #12
 8002da4:	2b0c      	cmp	r3, #12
 8002da6:	d1ee      	bne.n	8002d86 <HAL_RCC_ClockConfig+0x12a>
 8002da8:	e027      	b.n	8002dfa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d11d      	bne.n	8002dee <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002db2:	e00a      	b.n	8002dca <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002db4:	f7ff f83c 	bl	8001e30 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e06d      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dca:	4b3a      	ldr	r3, [pc, #232]	; (8002eb4 <HAL_RCC_ClockConfig+0x258>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 030c 	and.w	r3, r3, #12
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	d1ee      	bne.n	8002db4 <HAL_RCC_ClockConfig+0x158>
 8002dd6:	e010      	b.n	8002dfa <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd8:	f7ff f82a 	bl	8001e30 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e05b      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002dee:	4b31      	ldr	r3, [pc, #196]	; (8002eb4 <HAL_RCC_ClockConfig+0x258>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 030c 	and.w	r3, r3, #12
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1ee      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dfa:	4b2d      	ldr	r3, [pc, #180]	; (8002eb0 <HAL_RCC_ClockConfig+0x254>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d219      	bcs.n	8002e3c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d105      	bne.n	8002e1a <HAL_RCC_ClockConfig+0x1be>
 8002e0e:	4b28      	ldr	r3, [pc, #160]	; (8002eb0 <HAL_RCC_ClockConfig+0x254>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a27      	ldr	r2, [pc, #156]	; (8002eb0 <HAL_RCC_ClockConfig+0x254>)
 8002e14:	f043 0304 	orr.w	r3, r3, #4
 8002e18:	6013      	str	r3, [r2, #0]
 8002e1a:	4b25      	ldr	r3, [pc, #148]	; (8002eb0 <HAL_RCC_ClockConfig+0x254>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f023 0201 	bic.w	r2, r3, #1
 8002e22:	4923      	ldr	r1, [pc, #140]	; (8002eb0 <HAL_RCC_ClockConfig+0x254>)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2a:	4b21      	ldr	r3, [pc, #132]	; (8002eb0 <HAL_RCC_ClockConfig+0x254>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d001      	beq.n	8002e3c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e034      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d008      	beq.n	8002e5a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e48:	4b1a      	ldr	r3, [pc, #104]	; (8002eb4 <HAL_RCC_ClockConfig+0x258>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	4917      	ldr	r1, [pc, #92]	; (8002eb4 <HAL_RCC_ClockConfig+0x258>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0308 	and.w	r3, r3, #8
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d009      	beq.n	8002e7a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e66:	4b13      	ldr	r3, [pc, #76]	; (8002eb4 <HAL_RCC_ClockConfig+0x258>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	490f      	ldr	r1, [pc, #60]	; (8002eb4 <HAL_RCC_ClockConfig+0x258>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e7a:	f000 f823 	bl	8002ec4 <HAL_RCC_GetSysClockFreq>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	4b0c      	ldr	r3, [pc, #48]	; (8002eb4 <HAL_RCC_ClockConfig+0x258>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	091b      	lsrs	r3, r3, #4
 8002e86:	f003 030f 	and.w	r3, r3, #15
 8002e8a:	490b      	ldr	r1, [pc, #44]	; (8002eb8 <HAL_RCC_ClockConfig+0x25c>)
 8002e8c:	5ccb      	ldrb	r3, [r1, r3]
 8002e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e92:	4a0a      	ldr	r2, [pc, #40]	; (8002ebc <HAL_RCC_ClockConfig+0x260>)
 8002e94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e96:	4b0a      	ldr	r3, [pc, #40]	; (8002ec0 <HAL_RCC_ClockConfig+0x264>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fe ff7c 	bl	8001d98 <HAL_InitTick>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ea4:	7afb      	ldrb	r3, [r7, #11]
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40023c00 	.word	0x40023c00
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	08005404 	.word	0x08005404
 8002ebc:	20000000 	.word	0x20000000
 8002ec0:	20000004 	.word	0x20000004

08002ec4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ec4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ec8:	b092      	sub	sp, #72	; 0x48
 8002eca:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002ecc:	4b79      	ldr	r3, [pc, #484]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ed4:	f003 030c 	and.w	r3, r3, #12
 8002ed8:	2b0c      	cmp	r3, #12
 8002eda:	d00d      	beq.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x34>
 8002edc:	2b0c      	cmp	r3, #12
 8002ede:	f200 80d5 	bhi.w	800308c <HAL_RCC_GetSysClockFreq+0x1c8>
 8002ee2:	2b04      	cmp	r3, #4
 8002ee4:	d002      	beq.n	8002eec <HAL_RCC_GetSysClockFreq+0x28>
 8002ee6:	2b08      	cmp	r3, #8
 8002ee8:	d003      	beq.n	8002ef2 <HAL_RCC_GetSysClockFreq+0x2e>
 8002eea:	e0cf      	b.n	800308c <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002eec:	4b72      	ldr	r3, [pc, #456]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8002eee:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002ef0:	e0da      	b.n	80030a8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ef2:	4b72      	ldr	r3, [pc, #456]	; (80030bc <HAL_RCC_GetSysClockFreq+0x1f8>)
 8002ef4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002ef6:	e0d7      	b.n	80030a8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002efa:	0c9b      	lsrs	r3, r3, #18
 8002efc:	f003 020f 	and.w	r2, r3, #15
 8002f00:	4b6f      	ldr	r3, [pc, #444]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002f02:	5c9b      	ldrb	r3, [r3, r2]
 8002f04:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f08:	0d9b      	lsrs	r3, r3, #22
 8002f0a:	f003 0303 	and.w	r3, r3, #3
 8002f0e:	3301      	adds	r3, #1
 8002f10:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f12:	4b68      	ldr	r3, [pc, #416]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d05d      	beq.n	8002fda <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f20:	2200      	movs	r2, #0
 8002f22:	4618      	mov	r0, r3
 8002f24:	4611      	mov	r1, r2
 8002f26:	4604      	mov	r4, r0
 8002f28:	460d      	mov	r5, r1
 8002f2a:	4622      	mov	r2, r4
 8002f2c:	462b      	mov	r3, r5
 8002f2e:	f04f 0000 	mov.w	r0, #0
 8002f32:	f04f 0100 	mov.w	r1, #0
 8002f36:	0159      	lsls	r1, r3, #5
 8002f38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f3c:	0150      	lsls	r0, r2, #5
 8002f3e:	4602      	mov	r2, r0
 8002f40:	460b      	mov	r3, r1
 8002f42:	4621      	mov	r1, r4
 8002f44:	1a51      	subs	r1, r2, r1
 8002f46:	6139      	str	r1, [r7, #16]
 8002f48:	4629      	mov	r1, r5
 8002f4a:	eb63 0301 	sbc.w	r3, r3, r1
 8002f4e:	617b      	str	r3, [r7, #20]
 8002f50:	f04f 0200 	mov.w	r2, #0
 8002f54:	f04f 0300 	mov.w	r3, #0
 8002f58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f5c:	4659      	mov	r1, fp
 8002f5e:	018b      	lsls	r3, r1, #6
 8002f60:	4651      	mov	r1, sl
 8002f62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f66:	4651      	mov	r1, sl
 8002f68:	018a      	lsls	r2, r1, #6
 8002f6a:	46d4      	mov	ip, sl
 8002f6c:	ebb2 080c 	subs.w	r8, r2, ip
 8002f70:	4659      	mov	r1, fp
 8002f72:	eb63 0901 	sbc.w	r9, r3, r1
 8002f76:	f04f 0200 	mov.w	r2, #0
 8002f7a:	f04f 0300 	mov.w	r3, #0
 8002f7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f8a:	4690      	mov	r8, r2
 8002f8c:	4699      	mov	r9, r3
 8002f8e:	4623      	mov	r3, r4
 8002f90:	eb18 0303 	adds.w	r3, r8, r3
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	462b      	mov	r3, r5
 8002f98:	eb49 0303 	adc.w	r3, r9, r3
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	f04f 0200 	mov.w	r2, #0
 8002fa2:	f04f 0300 	mov.w	r3, #0
 8002fa6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002faa:	4629      	mov	r1, r5
 8002fac:	024b      	lsls	r3, r1, #9
 8002fae:	4620      	mov	r0, r4
 8002fb0:	4629      	mov	r1, r5
 8002fb2:	4604      	mov	r4, r0
 8002fb4:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8002fb8:	4601      	mov	r1, r0
 8002fba:	024a      	lsls	r2, r1, #9
 8002fbc:	4610      	mov	r0, r2
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fc8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fcc:	f7fd f8e8 	bl	80001a0 <__aeabi_uldivmod>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	647b      	str	r3, [r7, #68]	; 0x44
 8002fd8:	e055      	b.n	8003086 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fdc:	2200      	movs	r2, #0
 8002fde:	623b      	str	r3, [r7, #32]
 8002fe0:	627a      	str	r2, [r7, #36]	; 0x24
 8002fe2:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002fe6:	4642      	mov	r2, r8
 8002fe8:	464b      	mov	r3, r9
 8002fea:	f04f 0000 	mov.w	r0, #0
 8002fee:	f04f 0100 	mov.w	r1, #0
 8002ff2:	0159      	lsls	r1, r3, #5
 8002ff4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ff8:	0150      	lsls	r0, r2, #5
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	46c4      	mov	ip, r8
 8003000:	ebb2 0a0c 	subs.w	sl, r2, ip
 8003004:	4640      	mov	r0, r8
 8003006:	4649      	mov	r1, r9
 8003008:	468c      	mov	ip, r1
 800300a:	eb63 0b0c 	sbc.w	fp, r3, ip
 800300e:	f04f 0200 	mov.w	r2, #0
 8003012:	f04f 0300 	mov.w	r3, #0
 8003016:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800301a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800301e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003022:	ebb2 040a 	subs.w	r4, r2, sl
 8003026:	eb63 050b 	sbc.w	r5, r3, fp
 800302a:	f04f 0200 	mov.w	r2, #0
 800302e:	f04f 0300 	mov.w	r3, #0
 8003032:	00eb      	lsls	r3, r5, #3
 8003034:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003038:	00e2      	lsls	r2, r4, #3
 800303a:	4614      	mov	r4, r2
 800303c:	461d      	mov	r5, r3
 800303e:	4603      	mov	r3, r0
 8003040:	18e3      	adds	r3, r4, r3
 8003042:	603b      	str	r3, [r7, #0]
 8003044:	460b      	mov	r3, r1
 8003046:	eb45 0303 	adc.w	r3, r5, r3
 800304a:	607b      	str	r3, [r7, #4]
 800304c:	f04f 0200 	mov.w	r2, #0
 8003050:	f04f 0300 	mov.w	r3, #0
 8003054:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003058:	4629      	mov	r1, r5
 800305a:	028b      	lsls	r3, r1, #10
 800305c:	4620      	mov	r0, r4
 800305e:	4629      	mov	r1, r5
 8003060:	4604      	mov	r4, r0
 8003062:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003066:	4601      	mov	r1, r0
 8003068:	028a      	lsls	r2, r1, #10
 800306a:	4610      	mov	r0, r2
 800306c:	4619      	mov	r1, r3
 800306e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003070:	2200      	movs	r2, #0
 8003072:	61bb      	str	r3, [r7, #24]
 8003074:	61fa      	str	r2, [r7, #28]
 8003076:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800307a:	f7fd f891 	bl	80001a0 <__aeabi_uldivmod>
 800307e:	4602      	mov	r2, r0
 8003080:	460b      	mov	r3, r1
 8003082:	4613      	mov	r3, r2
 8003084:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8003086:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003088:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800308a:	e00d      	b.n	80030a8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800308c:	4b09      	ldr	r3, [pc, #36]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	0b5b      	lsrs	r3, r3, #13
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309a:	3301      	adds	r3, #1
 800309c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80030a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3748      	adds	r7, #72	; 0x48
 80030ae:	46bd      	mov	sp, r7
 80030b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030b4:	40023800 	.word	0x40023800
 80030b8:	00f42400 	.word	0x00f42400
 80030bc:	007a1200 	.word	0x007a1200
 80030c0:	080053f8 	.word	0x080053f8

080030c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030c8:	4b02      	ldr	r3, [pc, #8]	; (80030d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80030ca:	681b      	ldr	r3, [r3, #0]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr
 80030d4:	20000000 	.word	0x20000000

080030d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030dc:	f7ff fff2 	bl	80030c4 <HAL_RCC_GetHCLKFreq>
 80030e0:	4602      	mov	r2, r0
 80030e2:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	0a1b      	lsrs	r3, r3, #8
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	4903      	ldr	r1, [pc, #12]	; (80030fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ee:	5ccb      	ldrb	r3, [r1, r3]
 80030f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40023800 	.word	0x40023800
 80030fc:	08005414 	.word	0x08005414

08003100 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003104:	f7ff ffde 	bl	80030c4 <HAL_RCC_GetHCLKFreq>
 8003108:	4602      	mov	r2, r0
 800310a:	4b05      	ldr	r3, [pc, #20]	; (8003120 <HAL_RCC_GetPCLK2Freq+0x20>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	0adb      	lsrs	r3, r3, #11
 8003110:	f003 0307 	and.w	r3, r3, #7
 8003114:	4903      	ldr	r1, [pc, #12]	; (8003124 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003116:	5ccb      	ldrb	r3, [r1, r3]
 8003118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800311c:	4618      	mov	r0, r3
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40023800 	.word	0x40023800
 8003124:	08005414 	.word	0x08005414

08003128 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003128:	b480      	push	{r7}
 800312a:	b087      	sub	sp, #28
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003130:	2300      	movs	r3, #0
 8003132:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003134:	4b29      	ldr	r3, [pc, #164]	; (80031dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d12c      	bne.n	800319a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003140:	4b26      	ldr	r3, [pc, #152]	; (80031dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d005      	beq.n	8003158 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800314c:	4b24      	ldr	r3, [pc, #144]	; (80031e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003154:	617b      	str	r3, [r7, #20]
 8003156:	e016      	b.n	8003186 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003158:	4b20      	ldr	r3, [pc, #128]	; (80031dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	4a1f      	ldr	r2, [pc, #124]	; (80031dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800315e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003162:	6253      	str	r3, [r2, #36]	; 0x24
 8003164:	4b1d      	ldr	r3, [pc, #116]	; (80031dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003170:	4b1b      	ldr	r3, [pc, #108]	; (80031e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003178:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800317a:	4b18      	ldr	r3, [pc, #96]	; (80031dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	4a17      	ldr	r2, [pc, #92]	; (80031dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003180:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003184:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800318c:	d105      	bne.n	800319a <RCC_SetFlashLatencyFromMSIRange+0x72>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003194:	d101      	bne.n	800319a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003196:	2301      	movs	r3, #1
 8003198:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d105      	bne.n	80031ac <RCC_SetFlashLatencyFromMSIRange+0x84>
 80031a0:	4b10      	ldr	r3, [pc, #64]	; (80031e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a0f      	ldr	r2, [pc, #60]	; (80031e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031a6:	f043 0304 	orr.w	r3, r3, #4
 80031aa:	6013      	str	r3, [r2, #0]
 80031ac:	4b0d      	ldr	r3, [pc, #52]	; (80031e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f023 0201 	bic.w	r2, r3, #1
 80031b4:	490b      	ldr	r1, [pc, #44]	; (80031e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031bc:	4b09      	ldr	r3, [pc, #36]	; (80031e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d001      	beq.n	80031ce <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e000      	b.n	80031d0 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	371c      	adds	r7, #28
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bc80      	pop	{r7}
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	40023800 	.word	0x40023800
 80031e0:	40007000 	.word	0x40007000
 80031e4:	40023c00 	.word	0x40023c00

080031e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e042      	b.n	8003280 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d106      	bne.n	8003214 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7fe fb76 	bl	8001900 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2224      	movs	r2, #36	; 0x24
 8003218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800322a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 fb89 	bl	8003944 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003240:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	695a      	ldr	r2, [r3, #20]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003250:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68da      	ldr	r2, [r3, #12]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003260:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2220      	movs	r2, #32
 800326c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2220      	movs	r2, #32
 8003274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	3708      	adds	r7, #8
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b08a      	sub	sp, #40	; 0x28
 800328c:	af02      	add	r7, sp, #8
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	603b      	str	r3, [r7, #0]
 8003294:	4613      	mov	r3, r2
 8003296:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003298:	2300      	movs	r3, #0
 800329a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b20      	cmp	r3, #32
 80032a6:	d16d      	bne.n	8003384 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d002      	beq.n	80032b4 <HAL_UART_Transmit+0x2c>
 80032ae:	88fb      	ldrh	r3, [r7, #6]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d101      	bne.n	80032b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e066      	b.n	8003386 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2221      	movs	r2, #33	; 0x21
 80032c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032c6:	f7fe fdb3 	bl	8001e30 <HAL_GetTick>
 80032ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	88fa      	ldrh	r2, [r7, #6]
 80032d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	88fa      	ldrh	r2, [r7, #6]
 80032d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032e0:	d108      	bne.n	80032f4 <HAL_UART_Transmit+0x6c>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d104      	bne.n	80032f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80032ea:	2300      	movs	r3, #0
 80032ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	61bb      	str	r3, [r7, #24]
 80032f2:	e003      	b.n	80032fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032f8:	2300      	movs	r3, #0
 80032fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80032fc:	e02a      	b.n	8003354 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	2200      	movs	r2, #0
 8003306:	2180      	movs	r1, #128	; 0x80
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f000 f989 	bl	8003620 <UART_WaitOnFlagUntilTimeout>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e036      	b.n	8003386 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10b      	bne.n	8003336 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	881b      	ldrh	r3, [r3, #0]
 8003322:	461a      	mov	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800332c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	3302      	adds	r3, #2
 8003332:	61bb      	str	r3, [r7, #24]
 8003334:	e007      	b.n	8003346 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	781a      	ldrb	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	3301      	adds	r3, #1
 8003344:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800334a:	b29b      	uxth	r3, r3
 800334c:	3b01      	subs	r3, #1
 800334e:	b29a      	uxth	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003358:	b29b      	uxth	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1cf      	bne.n	80032fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	9300      	str	r3, [sp, #0]
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	2200      	movs	r2, #0
 8003366:	2140      	movs	r1, #64	; 0x40
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f000 f959 	bl	8003620 <UART_WaitOnFlagUntilTimeout>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e006      	b.n	8003386 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2220      	movs	r2, #32
 800337c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003380:	2300      	movs	r3, #0
 8003382:	e000      	b.n	8003386 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003384:	2302      	movs	r3, #2
  }
}
 8003386:	4618      	mov	r0, r3
 8003388:	3720      	adds	r7, #32
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b084      	sub	sp, #16
 8003392:	af00      	add	r7, sp, #0
 8003394:	60f8      	str	r0, [r7, #12]
 8003396:	60b9      	str	r1, [r7, #8]
 8003398:	4613      	mov	r3, r2
 800339a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b20      	cmp	r3, #32
 80033a6:	d112      	bne.n	80033ce <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d002      	beq.n	80033b4 <HAL_UART_Receive_DMA+0x26>
 80033ae:	88fb      	ldrh	r3, [r7, #6]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d101      	bne.n	80033b8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e00b      	b.n	80033d0 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80033be:	88fb      	ldrh	r3, [r7, #6]
 80033c0:	461a      	mov	r2, r3
 80033c2:	68b9      	ldr	r1, [r7, #8]
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f000 f999 	bl	80036fc <UART_Start_Receive_DMA>
 80033ca:	4603      	mov	r3, r0
 80033cc:	e000      	b.n	80033d0 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80033ce:	2302      	movs	r3, #2
  }
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bc80      	pop	{r7}
 80033e8:	4770      	bx	lr

080033ea <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b083      	sub	sp, #12
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80033f2:	bf00      	nop
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bc80      	pop	{r7}
 80033fa:	4770      	bx	lr

080033fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	bc80      	pop	{r7}
 800340c:	4770      	bx	lr

0800340e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800340e:	b480      	push	{r7}
 8003410:	b083      	sub	sp, #12
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
 8003416:	460b      	mov	r3, r1
 8003418:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	bc80      	pop	{r7}
 8003422:	4770      	bx	lr

08003424 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b09c      	sub	sp, #112	; 0x70
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0320 	and.w	r3, r3, #32
 800343c:	2b00      	cmp	r3, #0
 800343e:	d172      	bne.n	8003526 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003442:	2200      	movs	r2, #0
 8003444:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	330c      	adds	r3, #12
 800344c:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800344e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003450:	e853 3f00 	ldrex	r3, [r3]
 8003454:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003458:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800345c:	66bb      	str	r3, [r7, #104]	; 0x68
 800345e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	330c      	adds	r3, #12
 8003464:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003466:	65ba      	str	r2, [r7, #88]	; 0x58
 8003468:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800346a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800346c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800346e:	e841 2300 	strex	r3, r2, [r1]
 8003472:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003474:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1e5      	bne.n	8003446 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800347a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	3314      	adds	r3, #20
 8003480:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003484:	e853 3f00 	ldrex	r3, [r3]
 8003488:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800348a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800348c:	f023 0301 	bic.w	r3, r3, #1
 8003490:	667b      	str	r3, [r7, #100]	; 0x64
 8003492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	3314      	adds	r3, #20
 8003498:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800349a:	647a      	str	r2, [r7, #68]	; 0x44
 800349c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800349e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80034a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034a2:	e841 2300 	strex	r3, r2, [r1]
 80034a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80034a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1e5      	bne.n	800347a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	3314      	adds	r3, #20
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b8:	e853 3f00 	ldrex	r3, [r3]
 80034bc:	623b      	str	r3, [r7, #32]
   return(result);
 80034be:	6a3b      	ldr	r3, [r7, #32]
 80034c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034c4:	663b      	str	r3, [r7, #96]	; 0x60
 80034c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	3314      	adds	r3, #20
 80034cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80034ce:	633a      	str	r2, [r7, #48]	; 0x30
 80034d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034d6:	e841 2300 	strex	r3, r2, [r1]
 80034da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80034dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1e5      	bne.n	80034ae <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80034e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034e4:	2220      	movs	r2, #32
 80034e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d119      	bne.n	8003526 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	330c      	adds	r3, #12
 80034f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	e853 3f00 	ldrex	r3, [r3]
 8003500:	60fb      	str	r3, [r7, #12]
   return(result);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f023 0310 	bic.w	r3, r3, #16
 8003508:	65fb      	str	r3, [r7, #92]	; 0x5c
 800350a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	330c      	adds	r3, #12
 8003510:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003512:	61fa      	str	r2, [r7, #28]
 8003514:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003516:	69b9      	ldr	r1, [r7, #24]
 8003518:	69fa      	ldr	r2, [r7, #28]
 800351a:	e841 2300 	strex	r3, r2, [r1]
 800351e:	617b      	str	r3, [r7, #20]
   return(result);
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1e5      	bne.n	80034f2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003526:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003528:	2200      	movs	r2, #0
 800352a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800352c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800352e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003530:	2b01      	cmp	r3, #1
 8003532:	d106      	bne.n	8003542 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003536:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003538:	4619      	mov	r1, r3
 800353a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800353c:	f7ff ff67 	bl	800340e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003540:	e002      	b.n	8003548 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003542:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003544:	f7ff ff48 	bl	80033d8 <HAL_UART_RxCpltCallback>
}
 8003548:	bf00      	nop
 800354a:	3770      	adds	r7, #112	; 0x70
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2201      	movs	r2, #1
 8003562:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003568:	2b01      	cmp	r3, #1
 800356a:	d108      	bne.n	800357e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003570:	085b      	lsrs	r3, r3, #1
 8003572:	b29b      	uxth	r3, r3
 8003574:	4619      	mov	r1, r3
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f7ff ff49 	bl	800340e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800357c:	e002      	b.n	8003584 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f7ff ff33 	bl	80033ea <HAL_UART_RxHalfCpltCallback>
}
 8003584:	bf00      	nop
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003594:	2300      	movs	r3, #0
 8003596:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a8:	2b80      	cmp	r3, #128	; 0x80
 80035aa:	bf0c      	ite	eq
 80035ac:	2301      	moveq	r3, #1
 80035ae:	2300      	movne	r3, #0
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b21      	cmp	r3, #33	; 0x21
 80035be:	d108      	bne.n	80035d2 <UART_DMAError+0x46>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d005      	beq.n	80035d2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	2200      	movs	r2, #0
 80035ca:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80035cc:	68b8      	ldr	r0, [r7, #8]
 80035ce:	f000 f92f 	bl	8003830 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035dc:	2b40      	cmp	r3, #64	; 0x40
 80035de:	bf0c      	ite	eq
 80035e0:	2301      	moveq	r3, #1
 80035e2:	2300      	movne	r3, #0
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b22      	cmp	r3, #34	; 0x22
 80035f2:	d108      	bne.n	8003606 <UART_DMAError+0x7a>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d005      	beq.n	8003606 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	2200      	movs	r2, #0
 80035fe:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003600:	68b8      	ldr	r0, [r7, #8]
 8003602:	f000 f93c 	bl	800387e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360a:	f043 0210 	orr.w	r2, r3, #16
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003612:	68b8      	ldr	r0, [r7, #8]
 8003614:	f7ff fef2 	bl	80033fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003618:	bf00      	nop
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b090      	sub	sp, #64	; 0x40
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	603b      	str	r3, [r7, #0]
 800362c:	4613      	mov	r3, r2
 800362e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003630:	e050      	b.n	80036d4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003632:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003638:	d04c      	beq.n	80036d4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800363a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800363c:	2b00      	cmp	r3, #0
 800363e:	d007      	beq.n	8003650 <UART_WaitOnFlagUntilTimeout+0x30>
 8003640:	f7fe fbf6 	bl	8001e30 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800364c:	429a      	cmp	r2, r3
 800364e:	d241      	bcs.n	80036d4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	330c      	adds	r3, #12
 8003656:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365a:	e853 3f00 	ldrex	r3, [r3]
 800365e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003662:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003666:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	330c      	adds	r3, #12
 800366e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003670:	637a      	str	r2, [r7, #52]	; 0x34
 8003672:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003674:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003676:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003678:	e841 2300 	strex	r3, r2, [r1]
 800367c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800367e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1e5      	bne.n	8003650 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	3314      	adds	r3, #20
 800368a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	e853 3f00 	ldrex	r3, [r3]
 8003692:	613b      	str	r3, [r7, #16]
   return(result);
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	f023 0301 	bic.w	r3, r3, #1
 800369a:	63bb      	str	r3, [r7, #56]	; 0x38
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	3314      	adds	r3, #20
 80036a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036a4:	623a      	str	r2, [r7, #32]
 80036a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a8:	69f9      	ldr	r1, [r7, #28]
 80036aa:	6a3a      	ldr	r2, [r7, #32]
 80036ac:	e841 2300 	strex	r3, r2, [r1]
 80036b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1e5      	bne.n	8003684 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2220      	movs	r2, #32
 80036bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e00f      	b.n	80036f4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	4013      	ands	r3, r2
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	bf0c      	ite	eq
 80036e4:	2301      	moveq	r3, #1
 80036e6:	2300      	movne	r3, #0
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	461a      	mov	r2, r3
 80036ec:	79fb      	ldrb	r3, [r7, #7]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d09f      	beq.n	8003632 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3740      	adds	r7, #64	; 0x40
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b098      	sub	sp, #96	; 0x60
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	4613      	mov	r3, r2
 8003708:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	88fa      	ldrh	r2, [r7, #6]
 8003714:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2222      	movs	r2, #34	; 0x22
 8003720:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003728:	4a3e      	ldr	r2, [pc, #248]	; (8003824 <UART_Start_Receive_DMA+0x128>)
 800372a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003730:	4a3d      	ldr	r2, [pc, #244]	; (8003828 <UART_Start_Receive_DMA+0x12c>)
 8003732:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003738:	4a3c      	ldr	r2, [pc, #240]	; (800382c <UART_Start_Receive_DMA+0x130>)
 800373a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003740:	2200      	movs	r2, #0
 8003742:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003744:	f107 0308 	add.w	r3, r7, #8
 8003748:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	3304      	adds	r3, #4
 8003754:	4619      	mov	r1, r3
 8003756:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	88fb      	ldrh	r3, [r7, #6]
 800375c:	f7fe fd16 	bl	800218c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003760:	2300      	movs	r3, #0
 8003762:	613b      	str	r3, [r7, #16]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	613b      	str	r3, [r7, #16]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	613b      	str	r3, [r7, #16]
 8003774:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d019      	beq.n	80037b2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	330c      	adds	r3, #12
 8003784:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003786:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003788:	e853 3f00 	ldrex	r3, [r3]
 800378c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800378e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003794:	65bb      	str	r3, [r7, #88]	; 0x58
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	330c      	adds	r3, #12
 800379c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800379e:	64fa      	str	r2, [r7, #76]	; 0x4c
 80037a0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80037a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037a6:	e841 2300 	strex	r3, r2, [r1]
 80037aa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80037ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1e5      	bne.n	800377e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	3314      	adds	r3, #20
 80037b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037bc:	e853 3f00 	ldrex	r3, [r3]
 80037c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80037c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c4:	f043 0301 	orr.w	r3, r3, #1
 80037c8:	657b      	str	r3, [r7, #84]	; 0x54
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	3314      	adds	r3, #20
 80037d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80037d2:	63ba      	str	r2, [r7, #56]	; 0x38
 80037d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80037d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037da:	e841 2300 	strex	r3, r2, [r1]
 80037de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80037e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1e5      	bne.n	80037b2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	3314      	adds	r3, #20
 80037ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	e853 3f00 	ldrex	r3, [r3]
 80037f4:	617b      	str	r3, [r7, #20]
   return(result);
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037fc:	653b      	str	r3, [r7, #80]	; 0x50
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	3314      	adds	r3, #20
 8003804:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003806:	627a      	str	r2, [r7, #36]	; 0x24
 8003808:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380a:	6a39      	ldr	r1, [r7, #32]
 800380c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800380e:	e841 2300 	strex	r3, r2, [r1]
 8003812:	61fb      	str	r3, [r7, #28]
   return(result);
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1e5      	bne.n	80037e6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3760      	adds	r7, #96	; 0x60
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	08003425 	.word	0x08003425
 8003828:	08003551 	.word	0x08003551
 800382c:	0800358d 	.word	0x0800358d

08003830 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003830:	b480      	push	{r7}
 8003832:	b089      	sub	sp, #36	; 0x24
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	330c      	adds	r3, #12
 800383e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	e853 3f00 	ldrex	r3, [r3]
 8003846:	60bb      	str	r3, [r7, #8]
   return(result);
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800384e:	61fb      	str	r3, [r7, #28]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	330c      	adds	r3, #12
 8003856:	69fa      	ldr	r2, [r7, #28]
 8003858:	61ba      	str	r2, [r7, #24]
 800385a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385c:	6979      	ldr	r1, [r7, #20]
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	e841 2300 	strex	r3, r2, [r1]
 8003864:	613b      	str	r3, [r7, #16]
   return(result);
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1e5      	bne.n	8003838 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2220      	movs	r2, #32
 8003870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8003874:	bf00      	nop
 8003876:	3724      	adds	r7, #36	; 0x24
 8003878:	46bd      	mov	sp, r7
 800387a:	bc80      	pop	{r7}
 800387c:	4770      	bx	lr

0800387e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800387e:	b480      	push	{r7}
 8003880:	b095      	sub	sp, #84	; 0x54
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	330c      	adds	r3, #12
 800388c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003890:	e853 3f00 	ldrex	r3, [r3]
 8003894:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003898:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800389c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	330c      	adds	r3, #12
 80038a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038a6:	643a      	str	r2, [r7, #64]	; 0x40
 80038a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80038ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80038ae:	e841 2300 	strex	r3, r2, [r1]
 80038b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1e5      	bne.n	8003886 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	3314      	adds	r3, #20
 80038c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	e853 3f00 	ldrex	r3, [r3]
 80038c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	f023 0301 	bic.w	r3, r3, #1
 80038d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	3314      	adds	r3, #20
 80038d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038e2:	e841 2300 	strex	r3, r2, [r1]
 80038e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1e5      	bne.n	80038ba <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d119      	bne.n	800392a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	330c      	adds	r3, #12
 80038fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	e853 3f00 	ldrex	r3, [r3]
 8003904:	60bb      	str	r3, [r7, #8]
   return(result);
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	f023 0310 	bic.w	r3, r3, #16
 800390c:	647b      	str	r3, [r7, #68]	; 0x44
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	330c      	adds	r3, #12
 8003914:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003916:	61ba      	str	r2, [r7, #24]
 8003918:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391a:	6979      	ldr	r1, [r7, #20]
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	e841 2300 	strex	r3, r2, [r1]
 8003922:	613b      	str	r3, [r7, #16]
   return(result);
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1e5      	bne.n	80038f6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2220      	movs	r2, #32
 800392e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003938:	bf00      	nop
 800393a:	3754      	adds	r7, #84	; 0x54
 800393c:	46bd      	mov	sp, r7
 800393e:	bc80      	pop	{r7}
 8003940:	4770      	bx	lr
	...

08003944 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68da      	ldr	r2, [r3, #12]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	430a      	orrs	r2, r1
 8003960:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	689a      	ldr	r2, [r3, #8]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	431a      	orrs	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	4313      	orrs	r3, r2
 8003978:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003984:	f023 030c 	bic.w	r3, r3, #12
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	6812      	ldr	r2, [r2, #0]
 800398c:	68b9      	ldr	r1, [r7, #8]
 800398e:	430b      	orrs	r3, r1
 8003990:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	699a      	ldr	r2, [r3, #24]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a55      	ldr	r2, [pc, #340]	; (8003b04 <UART_SetConfig+0x1c0>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d103      	bne.n	80039ba <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80039b2:	f7ff fba5 	bl	8003100 <HAL_RCC_GetPCLK2Freq>
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	e002      	b.n	80039c0 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80039ba:	f7ff fb8d 	bl	80030d8 <HAL_RCC_GetPCLK1Freq>
 80039be:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	69db      	ldr	r3, [r3, #28]
 80039c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039c8:	d14c      	bne.n	8003a64 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	4613      	mov	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4413      	add	r3, r2
 80039d2:	009a      	lsls	r2, r3, #2
 80039d4:	441a      	add	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e0:	4a49      	ldr	r2, [pc, #292]	; (8003b08 <UART_SetConfig+0x1c4>)
 80039e2:	fba2 2303 	umull	r2, r3, r2, r3
 80039e6:	095b      	lsrs	r3, r3, #5
 80039e8:	0119      	lsls	r1, r3, #4
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	4613      	mov	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4413      	add	r3, r2
 80039f2:	009a      	lsls	r2, r3, #2
 80039f4:	441a      	add	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a00:	4b41      	ldr	r3, [pc, #260]	; (8003b08 <UART_SetConfig+0x1c4>)
 8003a02:	fba3 0302 	umull	r0, r3, r3, r2
 8003a06:	095b      	lsrs	r3, r3, #5
 8003a08:	2064      	movs	r0, #100	; 0x64
 8003a0a:	fb00 f303 	mul.w	r3, r0, r3
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	00db      	lsls	r3, r3, #3
 8003a12:	3332      	adds	r3, #50	; 0x32
 8003a14:	4a3c      	ldr	r2, [pc, #240]	; (8003b08 <UART_SetConfig+0x1c4>)
 8003a16:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1a:	095b      	lsrs	r3, r3, #5
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a22:	4419      	add	r1, r3
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	4613      	mov	r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	4413      	add	r3, r2
 8003a2c:	009a      	lsls	r2, r3, #2
 8003a2e:	441a      	add	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a3a:	4b33      	ldr	r3, [pc, #204]	; (8003b08 <UART_SetConfig+0x1c4>)
 8003a3c:	fba3 0302 	umull	r0, r3, r3, r2
 8003a40:	095b      	lsrs	r3, r3, #5
 8003a42:	2064      	movs	r0, #100	; 0x64
 8003a44:	fb00 f303 	mul.w	r3, r0, r3
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	3332      	adds	r3, #50	; 0x32
 8003a4e:	4a2e      	ldr	r2, [pc, #184]	; (8003b08 <UART_SetConfig+0x1c4>)
 8003a50:	fba2 2303 	umull	r2, r3, r2, r3
 8003a54:	095b      	lsrs	r3, r3, #5
 8003a56:	f003 0207 	and.w	r2, r3, #7
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	440a      	add	r2, r1
 8003a60:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a62:	e04a      	b.n	8003afa <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	4613      	mov	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	009a      	lsls	r2, r3, #2
 8003a6e:	441a      	add	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7a:	4a23      	ldr	r2, [pc, #140]	; (8003b08 <UART_SetConfig+0x1c4>)
 8003a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a80:	095b      	lsrs	r3, r3, #5
 8003a82:	0119      	lsls	r1, r3, #4
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	4613      	mov	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4413      	add	r3, r2
 8003a8c:	009a      	lsls	r2, r3, #2
 8003a8e:	441a      	add	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a9a:	4b1b      	ldr	r3, [pc, #108]	; (8003b08 <UART_SetConfig+0x1c4>)
 8003a9c:	fba3 0302 	umull	r0, r3, r3, r2
 8003aa0:	095b      	lsrs	r3, r3, #5
 8003aa2:	2064      	movs	r0, #100	; 0x64
 8003aa4:	fb00 f303 	mul.w	r3, r0, r3
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	011b      	lsls	r3, r3, #4
 8003aac:	3332      	adds	r3, #50	; 0x32
 8003aae:	4a16      	ldr	r2, [pc, #88]	; (8003b08 <UART_SetConfig+0x1c4>)
 8003ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab4:	095b      	lsrs	r3, r3, #5
 8003ab6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003aba:	4419      	add	r1, r3
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	4413      	add	r3, r2
 8003ac4:	009a      	lsls	r2, r3, #2
 8003ac6:	441a      	add	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ad2:	4b0d      	ldr	r3, [pc, #52]	; (8003b08 <UART_SetConfig+0x1c4>)
 8003ad4:	fba3 0302 	umull	r0, r3, r3, r2
 8003ad8:	095b      	lsrs	r3, r3, #5
 8003ada:	2064      	movs	r0, #100	; 0x64
 8003adc:	fb00 f303 	mul.w	r3, r0, r3
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	011b      	lsls	r3, r3, #4
 8003ae4:	3332      	adds	r3, #50	; 0x32
 8003ae6:	4a08      	ldr	r2, [pc, #32]	; (8003b08 <UART_SetConfig+0x1c4>)
 8003ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8003aec:	095b      	lsrs	r3, r3, #5
 8003aee:	f003 020f 	and.w	r2, r3, #15
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	440a      	add	r2, r1
 8003af8:	609a      	str	r2, [r3, #8]
}
 8003afa:	bf00      	nop
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	40013800 	.word	0x40013800
 8003b08:	51eb851f 	.word	0x51eb851f

08003b0c <__errno>:
 8003b0c:	4b01      	ldr	r3, [pc, #4]	; (8003b14 <__errno+0x8>)
 8003b0e:	6818      	ldr	r0, [r3, #0]
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	2000000c 	.word	0x2000000c

08003b18 <__libc_init_array>:
 8003b18:	b570      	push	{r4, r5, r6, lr}
 8003b1a:	2600      	movs	r6, #0
 8003b1c:	4d0c      	ldr	r5, [pc, #48]	; (8003b50 <__libc_init_array+0x38>)
 8003b1e:	4c0d      	ldr	r4, [pc, #52]	; (8003b54 <__libc_init_array+0x3c>)
 8003b20:	1b64      	subs	r4, r4, r5
 8003b22:	10a4      	asrs	r4, r4, #2
 8003b24:	42a6      	cmp	r6, r4
 8003b26:	d109      	bne.n	8003b3c <__libc_init_array+0x24>
 8003b28:	f001 f9da 	bl	8004ee0 <_init>
 8003b2c:	2600      	movs	r6, #0
 8003b2e:	4d0a      	ldr	r5, [pc, #40]	; (8003b58 <__libc_init_array+0x40>)
 8003b30:	4c0a      	ldr	r4, [pc, #40]	; (8003b5c <__libc_init_array+0x44>)
 8003b32:	1b64      	subs	r4, r4, r5
 8003b34:	10a4      	asrs	r4, r4, #2
 8003b36:	42a6      	cmp	r6, r4
 8003b38:	d105      	bne.n	8003b46 <__libc_init_array+0x2e>
 8003b3a:	bd70      	pop	{r4, r5, r6, pc}
 8003b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b40:	4798      	blx	r3
 8003b42:	3601      	adds	r6, #1
 8003b44:	e7ee      	b.n	8003b24 <__libc_init_array+0xc>
 8003b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b4a:	4798      	blx	r3
 8003b4c:	3601      	adds	r6, #1
 8003b4e:	e7f2      	b.n	8003b36 <__libc_init_array+0x1e>
 8003b50:	08005590 	.word	0x08005590
 8003b54:	08005590 	.word	0x08005590
 8003b58:	08005590 	.word	0x08005590
 8003b5c:	08005594 	.word	0x08005594

08003b60 <__itoa>:
 8003b60:	1e93      	subs	r3, r2, #2
 8003b62:	2b22      	cmp	r3, #34	; 0x22
 8003b64:	b510      	push	{r4, lr}
 8003b66:	460c      	mov	r4, r1
 8003b68:	d904      	bls.n	8003b74 <__itoa+0x14>
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	461c      	mov	r4, r3
 8003b6e:	700b      	strb	r3, [r1, #0]
 8003b70:	4620      	mov	r0, r4
 8003b72:	bd10      	pop	{r4, pc}
 8003b74:	2a0a      	cmp	r2, #10
 8003b76:	d109      	bne.n	8003b8c <__itoa+0x2c>
 8003b78:	2800      	cmp	r0, #0
 8003b7a:	da07      	bge.n	8003b8c <__itoa+0x2c>
 8003b7c:	232d      	movs	r3, #45	; 0x2d
 8003b7e:	700b      	strb	r3, [r1, #0]
 8003b80:	2101      	movs	r1, #1
 8003b82:	4240      	negs	r0, r0
 8003b84:	4421      	add	r1, r4
 8003b86:	f000 f94f 	bl	8003e28 <__utoa>
 8003b8a:	e7f1      	b.n	8003b70 <__itoa+0x10>
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	e7f9      	b.n	8003b84 <__itoa+0x24>

08003b90 <itoa>:
 8003b90:	f7ff bfe6 	b.w	8003b60 <__itoa>

08003b94 <memset>:
 8003b94:	4603      	mov	r3, r0
 8003b96:	4402      	add	r2, r0
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d100      	bne.n	8003b9e <memset+0xa>
 8003b9c:	4770      	bx	lr
 8003b9e:	f803 1b01 	strb.w	r1, [r3], #1
 8003ba2:	e7f9      	b.n	8003b98 <memset+0x4>

08003ba4 <iprintf>:
 8003ba4:	b40f      	push	{r0, r1, r2, r3}
 8003ba6:	4b0a      	ldr	r3, [pc, #40]	; (8003bd0 <iprintf+0x2c>)
 8003ba8:	b513      	push	{r0, r1, r4, lr}
 8003baa:	681c      	ldr	r4, [r3, #0]
 8003bac:	b124      	cbz	r4, 8003bb8 <iprintf+0x14>
 8003bae:	69a3      	ldr	r3, [r4, #24]
 8003bb0:	b913      	cbnz	r3, 8003bb8 <iprintf+0x14>
 8003bb2:	4620      	mov	r0, r4
 8003bb4:	f000 fb6e 	bl	8004294 <__sinit>
 8003bb8:	ab05      	add	r3, sp, #20
 8003bba:	4620      	mov	r0, r4
 8003bbc:	9a04      	ldr	r2, [sp, #16]
 8003bbe:	68a1      	ldr	r1, [r4, #8]
 8003bc0:	9301      	str	r3, [sp, #4]
 8003bc2:	f000 fd9d 	bl	8004700 <_vfiprintf_r>
 8003bc6:	b002      	add	sp, #8
 8003bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bcc:	b004      	add	sp, #16
 8003bce:	4770      	bx	lr
 8003bd0:	2000000c 	.word	0x2000000c

08003bd4 <_puts_r>:
 8003bd4:	b570      	push	{r4, r5, r6, lr}
 8003bd6:	460e      	mov	r6, r1
 8003bd8:	4605      	mov	r5, r0
 8003bda:	b118      	cbz	r0, 8003be4 <_puts_r+0x10>
 8003bdc:	6983      	ldr	r3, [r0, #24]
 8003bde:	b90b      	cbnz	r3, 8003be4 <_puts_r+0x10>
 8003be0:	f000 fb58 	bl	8004294 <__sinit>
 8003be4:	69ab      	ldr	r3, [r5, #24]
 8003be6:	68ac      	ldr	r4, [r5, #8]
 8003be8:	b913      	cbnz	r3, 8003bf0 <_puts_r+0x1c>
 8003bea:	4628      	mov	r0, r5
 8003bec:	f000 fb52 	bl	8004294 <__sinit>
 8003bf0:	4b2c      	ldr	r3, [pc, #176]	; (8003ca4 <_puts_r+0xd0>)
 8003bf2:	429c      	cmp	r4, r3
 8003bf4:	d120      	bne.n	8003c38 <_puts_r+0x64>
 8003bf6:	686c      	ldr	r4, [r5, #4]
 8003bf8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003bfa:	07db      	lsls	r3, r3, #31
 8003bfc:	d405      	bmi.n	8003c0a <_puts_r+0x36>
 8003bfe:	89a3      	ldrh	r3, [r4, #12]
 8003c00:	0598      	lsls	r0, r3, #22
 8003c02:	d402      	bmi.n	8003c0a <_puts_r+0x36>
 8003c04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c06:	f000 fc08 	bl	800441a <__retarget_lock_acquire_recursive>
 8003c0a:	89a3      	ldrh	r3, [r4, #12]
 8003c0c:	0719      	lsls	r1, r3, #28
 8003c0e:	d51d      	bpl.n	8003c4c <_puts_r+0x78>
 8003c10:	6923      	ldr	r3, [r4, #16]
 8003c12:	b1db      	cbz	r3, 8003c4c <_puts_r+0x78>
 8003c14:	3e01      	subs	r6, #1
 8003c16:	68a3      	ldr	r3, [r4, #8]
 8003c18:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	60a3      	str	r3, [r4, #8]
 8003c20:	bb39      	cbnz	r1, 8003c72 <_puts_r+0x9e>
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	da38      	bge.n	8003c98 <_puts_r+0xc4>
 8003c26:	4622      	mov	r2, r4
 8003c28:	210a      	movs	r1, #10
 8003c2a:	4628      	mov	r0, r5
 8003c2c:	f000 f93e 	bl	8003eac <__swbuf_r>
 8003c30:	3001      	adds	r0, #1
 8003c32:	d011      	beq.n	8003c58 <_puts_r+0x84>
 8003c34:	250a      	movs	r5, #10
 8003c36:	e011      	b.n	8003c5c <_puts_r+0x88>
 8003c38:	4b1b      	ldr	r3, [pc, #108]	; (8003ca8 <_puts_r+0xd4>)
 8003c3a:	429c      	cmp	r4, r3
 8003c3c:	d101      	bne.n	8003c42 <_puts_r+0x6e>
 8003c3e:	68ac      	ldr	r4, [r5, #8]
 8003c40:	e7da      	b.n	8003bf8 <_puts_r+0x24>
 8003c42:	4b1a      	ldr	r3, [pc, #104]	; (8003cac <_puts_r+0xd8>)
 8003c44:	429c      	cmp	r4, r3
 8003c46:	bf08      	it	eq
 8003c48:	68ec      	ldreq	r4, [r5, #12]
 8003c4a:	e7d5      	b.n	8003bf8 <_puts_r+0x24>
 8003c4c:	4621      	mov	r1, r4
 8003c4e:	4628      	mov	r0, r5
 8003c50:	f000 f97e 	bl	8003f50 <__swsetup_r>
 8003c54:	2800      	cmp	r0, #0
 8003c56:	d0dd      	beq.n	8003c14 <_puts_r+0x40>
 8003c58:	f04f 35ff 	mov.w	r5, #4294967295
 8003c5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c5e:	07da      	lsls	r2, r3, #31
 8003c60:	d405      	bmi.n	8003c6e <_puts_r+0x9a>
 8003c62:	89a3      	ldrh	r3, [r4, #12]
 8003c64:	059b      	lsls	r3, r3, #22
 8003c66:	d402      	bmi.n	8003c6e <_puts_r+0x9a>
 8003c68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c6a:	f000 fbd7 	bl	800441c <__retarget_lock_release_recursive>
 8003c6e:	4628      	mov	r0, r5
 8003c70:	bd70      	pop	{r4, r5, r6, pc}
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	da04      	bge.n	8003c80 <_puts_r+0xac>
 8003c76:	69a2      	ldr	r2, [r4, #24]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	dc06      	bgt.n	8003c8a <_puts_r+0xb6>
 8003c7c:	290a      	cmp	r1, #10
 8003c7e:	d004      	beq.n	8003c8a <_puts_r+0xb6>
 8003c80:	6823      	ldr	r3, [r4, #0]
 8003c82:	1c5a      	adds	r2, r3, #1
 8003c84:	6022      	str	r2, [r4, #0]
 8003c86:	7019      	strb	r1, [r3, #0]
 8003c88:	e7c5      	b.n	8003c16 <_puts_r+0x42>
 8003c8a:	4622      	mov	r2, r4
 8003c8c:	4628      	mov	r0, r5
 8003c8e:	f000 f90d 	bl	8003eac <__swbuf_r>
 8003c92:	3001      	adds	r0, #1
 8003c94:	d1bf      	bne.n	8003c16 <_puts_r+0x42>
 8003c96:	e7df      	b.n	8003c58 <_puts_r+0x84>
 8003c98:	250a      	movs	r5, #10
 8003c9a:	6823      	ldr	r3, [r4, #0]
 8003c9c:	1c5a      	adds	r2, r3, #1
 8003c9e:	6022      	str	r2, [r4, #0]
 8003ca0:	701d      	strb	r5, [r3, #0]
 8003ca2:	e7db      	b.n	8003c5c <_puts_r+0x88>
 8003ca4:	08005514 	.word	0x08005514
 8003ca8:	08005534 	.word	0x08005534
 8003cac:	080054f4 	.word	0x080054f4

08003cb0 <puts>:
 8003cb0:	4b02      	ldr	r3, [pc, #8]	; (8003cbc <puts+0xc>)
 8003cb2:	4601      	mov	r1, r0
 8003cb4:	6818      	ldr	r0, [r3, #0]
 8003cb6:	f7ff bf8d 	b.w	8003bd4 <_puts_r>
 8003cba:	bf00      	nop
 8003cbc:	2000000c 	.word	0x2000000c

08003cc0 <srand>:
 8003cc0:	b538      	push	{r3, r4, r5, lr}
 8003cc2:	4b10      	ldr	r3, [pc, #64]	; (8003d04 <srand+0x44>)
 8003cc4:	4604      	mov	r4, r0
 8003cc6:	681d      	ldr	r5, [r3, #0]
 8003cc8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003cca:	b9b3      	cbnz	r3, 8003cfa <srand+0x3a>
 8003ccc:	2018      	movs	r0, #24
 8003cce:	f000 fc0b 	bl	80044e8 <malloc>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	63a8      	str	r0, [r5, #56]	; 0x38
 8003cd6:	b920      	cbnz	r0, 8003ce2 <srand+0x22>
 8003cd8:	2142      	movs	r1, #66	; 0x42
 8003cda:	4b0b      	ldr	r3, [pc, #44]	; (8003d08 <srand+0x48>)
 8003cdc:	480b      	ldr	r0, [pc, #44]	; (8003d0c <srand+0x4c>)
 8003cde:	f000 f9a5 	bl	800402c <__assert_func>
 8003ce2:	490b      	ldr	r1, [pc, #44]	; (8003d10 <srand+0x50>)
 8003ce4:	4b0b      	ldr	r3, [pc, #44]	; (8003d14 <srand+0x54>)
 8003ce6:	e9c0 1300 	strd	r1, r3, [r0]
 8003cea:	4b0b      	ldr	r3, [pc, #44]	; (8003d18 <srand+0x58>)
 8003cec:	2100      	movs	r1, #0
 8003cee:	6083      	str	r3, [r0, #8]
 8003cf0:	230b      	movs	r3, #11
 8003cf2:	8183      	strh	r3, [r0, #12]
 8003cf4:	2001      	movs	r0, #1
 8003cf6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003cfe:	611c      	str	r4, [r3, #16]
 8003d00:	615a      	str	r2, [r3, #20]
 8003d02:	bd38      	pop	{r3, r4, r5, pc}
 8003d04:	2000000c 	.word	0x2000000c
 8003d08:	08005420 	.word	0x08005420
 8003d0c:	08005437 	.word	0x08005437
 8003d10:	abcd330e 	.word	0xabcd330e
 8003d14:	e66d1234 	.word	0xe66d1234
 8003d18:	0005deec 	.word	0x0005deec

08003d1c <rand>:
 8003d1c:	4b16      	ldr	r3, [pc, #88]	; (8003d78 <rand+0x5c>)
 8003d1e:	b510      	push	{r4, lr}
 8003d20:	681c      	ldr	r4, [r3, #0]
 8003d22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d24:	b9b3      	cbnz	r3, 8003d54 <rand+0x38>
 8003d26:	2018      	movs	r0, #24
 8003d28:	f000 fbde 	bl	80044e8 <malloc>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	63a0      	str	r0, [r4, #56]	; 0x38
 8003d30:	b920      	cbnz	r0, 8003d3c <rand+0x20>
 8003d32:	214e      	movs	r1, #78	; 0x4e
 8003d34:	4b11      	ldr	r3, [pc, #68]	; (8003d7c <rand+0x60>)
 8003d36:	4812      	ldr	r0, [pc, #72]	; (8003d80 <rand+0x64>)
 8003d38:	f000 f978 	bl	800402c <__assert_func>
 8003d3c:	4911      	ldr	r1, [pc, #68]	; (8003d84 <rand+0x68>)
 8003d3e:	4b12      	ldr	r3, [pc, #72]	; (8003d88 <rand+0x6c>)
 8003d40:	e9c0 1300 	strd	r1, r3, [r0]
 8003d44:	4b11      	ldr	r3, [pc, #68]	; (8003d8c <rand+0x70>)
 8003d46:	2100      	movs	r1, #0
 8003d48:	6083      	str	r3, [r0, #8]
 8003d4a:	230b      	movs	r3, #11
 8003d4c:	8183      	strh	r3, [r0, #12]
 8003d4e:	2001      	movs	r0, #1
 8003d50:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003d54:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8003d56:	4a0e      	ldr	r2, [pc, #56]	; (8003d90 <rand+0x74>)
 8003d58:	6920      	ldr	r0, [r4, #16]
 8003d5a:	6963      	ldr	r3, [r4, #20]
 8003d5c:	4342      	muls	r2, r0
 8003d5e:	490d      	ldr	r1, [pc, #52]	; (8003d94 <rand+0x78>)
 8003d60:	fb01 2203 	mla	r2, r1, r3, r2
 8003d64:	fba0 0101 	umull	r0, r1, r0, r1
 8003d68:	1c43      	adds	r3, r0, #1
 8003d6a:	eb42 0001 	adc.w	r0, r2, r1
 8003d6e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8003d72:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003d76:	bd10      	pop	{r4, pc}
 8003d78:	2000000c 	.word	0x2000000c
 8003d7c:	08005420 	.word	0x08005420
 8003d80:	08005437 	.word	0x08005437
 8003d84:	abcd330e 	.word	0xabcd330e
 8003d88:	e66d1234 	.word	0xe66d1234
 8003d8c:	0005deec 	.word	0x0005deec
 8003d90:	5851f42d 	.word	0x5851f42d
 8003d94:	4c957f2d 	.word	0x4c957f2d

08003d98 <strcat>:
 8003d98:	4602      	mov	r2, r0
 8003d9a:	b510      	push	{r4, lr}
 8003d9c:	7814      	ldrb	r4, [r2, #0]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	3201      	adds	r2, #1
 8003da2:	2c00      	cmp	r4, #0
 8003da4:	d1fa      	bne.n	8003d9c <strcat+0x4>
 8003da6:	3b01      	subs	r3, #1
 8003da8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003dac:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003db0:	2a00      	cmp	r2, #0
 8003db2:	d1f9      	bne.n	8003da8 <strcat+0x10>
 8003db4:	bd10      	pop	{r4, pc}

08003db6 <strcpy>:
 8003db6:	4603      	mov	r3, r0
 8003db8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003dbc:	f803 2b01 	strb.w	r2, [r3], #1
 8003dc0:	2a00      	cmp	r2, #0
 8003dc2:	d1f9      	bne.n	8003db8 <strcpy+0x2>
 8003dc4:	4770      	bx	lr

08003dc6 <strstr>:
 8003dc6:	780a      	ldrb	r2, [r1, #0]
 8003dc8:	b570      	push	{r4, r5, r6, lr}
 8003dca:	b96a      	cbnz	r2, 8003de8 <strstr+0x22>
 8003dcc:	bd70      	pop	{r4, r5, r6, pc}
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d109      	bne.n	8003de6 <strstr+0x20>
 8003dd2:	460c      	mov	r4, r1
 8003dd4:	4605      	mov	r5, r0
 8003dd6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d0f6      	beq.n	8003dcc <strstr+0x6>
 8003dde:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003de2:	429e      	cmp	r6, r3
 8003de4:	d0f7      	beq.n	8003dd6 <strstr+0x10>
 8003de6:	3001      	adds	r0, #1
 8003de8:	7803      	ldrb	r3, [r0, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1ef      	bne.n	8003dce <strstr+0x8>
 8003dee:	4618      	mov	r0, r3
 8003df0:	e7ec      	b.n	8003dcc <strstr+0x6>
	...

08003df4 <time>:
 8003df4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003df6:	4b0b      	ldr	r3, [pc, #44]	; (8003e24 <time+0x30>)
 8003df8:	4604      	mov	r4, r0
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	4669      	mov	r1, sp
 8003dfe:	6818      	ldr	r0, [r3, #0]
 8003e00:	f000 faf8 	bl	80043f4 <_gettimeofday_r>
 8003e04:	2800      	cmp	r0, #0
 8003e06:	da05      	bge.n	8003e14 <time+0x20>
 8003e08:	f04f 32ff 	mov.w	r2, #4294967295
 8003e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e10:	e9cd 2300 	strd	r2, r3, [sp]
 8003e14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003e18:	b10c      	cbz	r4, 8003e1e <time+0x2a>
 8003e1a:	e9c4 0100 	strd	r0, r1, [r4]
 8003e1e:	b004      	add	sp, #16
 8003e20:	bd10      	pop	{r4, pc}
 8003e22:	bf00      	nop
 8003e24:	2000000c 	.word	0x2000000c

08003e28 <__utoa>:
 8003e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e2a:	b08b      	sub	sp, #44	; 0x2c
 8003e2c:	4605      	mov	r5, r0
 8003e2e:	460b      	mov	r3, r1
 8003e30:	466e      	mov	r6, sp
 8003e32:	4c1d      	ldr	r4, [pc, #116]	; (8003ea8 <__utoa+0x80>)
 8003e34:	f104 0c20 	add.w	ip, r4, #32
 8003e38:	4637      	mov	r7, r6
 8003e3a:	6820      	ldr	r0, [r4, #0]
 8003e3c:	6861      	ldr	r1, [r4, #4]
 8003e3e:	3408      	adds	r4, #8
 8003e40:	c703      	stmia	r7!, {r0, r1}
 8003e42:	4564      	cmp	r4, ip
 8003e44:	463e      	mov	r6, r7
 8003e46:	d1f7      	bne.n	8003e38 <__utoa+0x10>
 8003e48:	7921      	ldrb	r1, [r4, #4]
 8003e4a:	6820      	ldr	r0, [r4, #0]
 8003e4c:	7139      	strb	r1, [r7, #4]
 8003e4e:	1e91      	subs	r1, r2, #2
 8003e50:	2922      	cmp	r1, #34	; 0x22
 8003e52:	6038      	str	r0, [r7, #0]
 8003e54:	f04f 0100 	mov.w	r1, #0
 8003e58:	d904      	bls.n	8003e64 <__utoa+0x3c>
 8003e5a:	7019      	strb	r1, [r3, #0]
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	4618      	mov	r0, r3
 8003e60:	b00b      	add	sp, #44	; 0x2c
 8003e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e64:	1e58      	subs	r0, r3, #1
 8003e66:	4684      	mov	ip, r0
 8003e68:	fbb5 f7f2 	udiv	r7, r5, r2
 8003e6c:	fb02 5617 	mls	r6, r2, r7, r5
 8003e70:	3628      	adds	r6, #40	; 0x28
 8003e72:	446e      	add	r6, sp
 8003e74:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8003e78:	460c      	mov	r4, r1
 8003e7a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8003e7e:	462e      	mov	r6, r5
 8003e80:	42b2      	cmp	r2, r6
 8003e82:	463d      	mov	r5, r7
 8003e84:	f101 0101 	add.w	r1, r1, #1
 8003e88:	d9ee      	bls.n	8003e68 <__utoa+0x40>
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	545a      	strb	r2, [r3, r1]
 8003e8e:	1919      	adds	r1, r3, r4
 8003e90:	1aa5      	subs	r5, r4, r2
 8003e92:	42aa      	cmp	r2, r5
 8003e94:	dae3      	bge.n	8003e5e <__utoa+0x36>
 8003e96:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003e9a:	780e      	ldrb	r6, [r1, #0]
 8003e9c:	3201      	adds	r2, #1
 8003e9e:	7006      	strb	r6, [r0, #0]
 8003ea0:	f801 5901 	strb.w	r5, [r1], #-1
 8003ea4:	e7f4      	b.n	8003e90 <__utoa+0x68>
 8003ea6:	bf00      	nop
 8003ea8:	08005492 	.word	0x08005492

08003eac <__swbuf_r>:
 8003eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eae:	460e      	mov	r6, r1
 8003eb0:	4614      	mov	r4, r2
 8003eb2:	4605      	mov	r5, r0
 8003eb4:	b118      	cbz	r0, 8003ebe <__swbuf_r+0x12>
 8003eb6:	6983      	ldr	r3, [r0, #24]
 8003eb8:	b90b      	cbnz	r3, 8003ebe <__swbuf_r+0x12>
 8003eba:	f000 f9eb 	bl	8004294 <__sinit>
 8003ebe:	4b21      	ldr	r3, [pc, #132]	; (8003f44 <__swbuf_r+0x98>)
 8003ec0:	429c      	cmp	r4, r3
 8003ec2:	d12b      	bne.n	8003f1c <__swbuf_r+0x70>
 8003ec4:	686c      	ldr	r4, [r5, #4]
 8003ec6:	69a3      	ldr	r3, [r4, #24]
 8003ec8:	60a3      	str	r3, [r4, #8]
 8003eca:	89a3      	ldrh	r3, [r4, #12]
 8003ecc:	071a      	lsls	r2, r3, #28
 8003ece:	d52f      	bpl.n	8003f30 <__swbuf_r+0x84>
 8003ed0:	6923      	ldr	r3, [r4, #16]
 8003ed2:	b36b      	cbz	r3, 8003f30 <__swbuf_r+0x84>
 8003ed4:	6923      	ldr	r3, [r4, #16]
 8003ed6:	6820      	ldr	r0, [r4, #0]
 8003ed8:	b2f6      	uxtb	r6, r6
 8003eda:	1ac0      	subs	r0, r0, r3
 8003edc:	6963      	ldr	r3, [r4, #20]
 8003ede:	4637      	mov	r7, r6
 8003ee0:	4283      	cmp	r3, r0
 8003ee2:	dc04      	bgt.n	8003eee <__swbuf_r+0x42>
 8003ee4:	4621      	mov	r1, r4
 8003ee6:	4628      	mov	r0, r5
 8003ee8:	f000 f940 	bl	800416c <_fflush_r>
 8003eec:	bb30      	cbnz	r0, 8003f3c <__swbuf_r+0x90>
 8003eee:	68a3      	ldr	r3, [r4, #8]
 8003ef0:	3001      	adds	r0, #1
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	60a3      	str	r3, [r4, #8]
 8003ef6:	6823      	ldr	r3, [r4, #0]
 8003ef8:	1c5a      	adds	r2, r3, #1
 8003efa:	6022      	str	r2, [r4, #0]
 8003efc:	701e      	strb	r6, [r3, #0]
 8003efe:	6963      	ldr	r3, [r4, #20]
 8003f00:	4283      	cmp	r3, r0
 8003f02:	d004      	beq.n	8003f0e <__swbuf_r+0x62>
 8003f04:	89a3      	ldrh	r3, [r4, #12]
 8003f06:	07db      	lsls	r3, r3, #31
 8003f08:	d506      	bpl.n	8003f18 <__swbuf_r+0x6c>
 8003f0a:	2e0a      	cmp	r6, #10
 8003f0c:	d104      	bne.n	8003f18 <__swbuf_r+0x6c>
 8003f0e:	4621      	mov	r1, r4
 8003f10:	4628      	mov	r0, r5
 8003f12:	f000 f92b 	bl	800416c <_fflush_r>
 8003f16:	b988      	cbnz	r0, 8003f3c <__swbuf_r+0x90>
 8003f18:	4638      	mov	r0, r7
 8003f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f1c:	4b0a      	ldr	r3, [pc, #40]	; (8003f48 <__swbuf_r+0x9c>)
 8003f1e:	429c      	cmp	r4, r3
 8003f20:	d101      	bne.n	8003f26 <__swbuf_r+0x7a>
 8003f22:	68ac      	ldr	r4, [r5, #8]
 8003f24:	e7cf      	b.n	8003ec6 <__swbuf_r+0x1a>
 8003f26:	4b09      	ldr	r3, [pc, #36]	; (8003f4c <__swbuf_r+0xa0>)
 8003f28:	429c      	cmp	r4, r3
 8003f2a:	bf08      	it	eq
 8003f2c:	68ec      	ldreq	r4, [r5, #12]
 8003f2e:	e7ca      	b.n	8003ec6 <__swbuf_r+0x1a>
 8003f30:	4621      	mov	r1, r4
 8003f32:	4628      	mov	r0, r5
 8003f34:	f000 f80c 	bl	8003f50 <__swsetup_r>
 8003f38:	2800      	cmp	r0, #0
 8003f3a:	d0cb      	beq.n	8003ed4 <__swbuf_r+0x28>
 8003f3c:	f04f 37ff 	mov.w	r7, #4294967295
 8003f40:	e7ea      	b.n	8003f18 <__swbuf_r+0x6c>
 8003f42:	bf00      	nop
 8003f44:	08005514 	.word	0x08005514
 8003f48:	08005534 	.word	0x08005534
 8003f4c:	080054f4 	.word	0x080054f4

08003f50 <__swsetup_r>:
 8003f50:	4b32      	ldr	r3, [pc, #200]	; (800401c <__swsetup_r+0xcc>)
 8003f52:	b570      	push	{r4, r5, r6, lr}
 8003f54:	681d      	ldr	r5, [r3, #0]
 8003f56:	4606      	mov	r6, r0
 8003f58:	460c      	mov	r4, r1
 8003f5a:	b125      	cbz	r5, 8003f66 <__swsetup_r+0x16>
 8003f5c:	69ab      	ldr	r3, [r5, #24]
 8003f5e:	b913      	cbnz	r3, 8003f66 <__swsetup_r+0x16>
 8003f60:	4628      	mov	r0, r5
 8003f62:	f000 f997 	bl	8004294 <__sinit>
 8003f66:	4b2e      	ldr	r3, [pc, #184]	; (8004020 <__swsetup_r+0xd0>)
 8003f68:	429c      	cmp	r4, r3
 8003f6a:	d10f      	bne.n	8003f8c <__swsetup_r+0x3c>
 8003f6c:	686c      	ldr	r4, [r5, #4]
 8003f6e:	89a3      	ldrh	r3, [r4, #12]
 8003f70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f74:	0719      	lsls	r1, r3, #28
 8003f76:	d42c      	bmi.n	8003fd2 <__swsetup_r+0x82>
 8003f78:	06dd      	lsls	r5, r3, #27
 8003f7a:	d411      	bmi.n	8003fa0 <__swsetup_r+0x50>
 8003f7c:	2309      	movs	r3, #9
 8003f7e:	6033      	str	r3, [r6, #0]
 8003f80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003f84:	f04f 30ff 	mov.w	r0, #4294967295
 8003f88:	81a3      	strh	r3, [r4, #12]
 8003f8a:	e03e      	b.n	800400a <__swsetup_r+0xba>
 8003f8c:	4b25      	ldr	r3, [pc, #148]	; (8004024 <__swsetup_r+0xd4>)
 8003f8e:	429c      	cmp	r4, r3
 8003f90:	d101      	bne.n	8003f96 <__swsetup_r+0x46>
 8003f92:	68ac      	ldr	r4, [r5, #8]
 8003f94:	e7eb      	b.n	8003f6e <__swsetup_r+0x1e>
 8003f96:	4b24      	ldr	r3, [pc, #144]	; (8004028 <__swsetup_r+0xd8>)
 8003f98:	429c      	cmp	r4, r3
 8003f9a:	bf08      	it	eq
 8003f9c:	68ec      	ldreq	r4, [r5, #12]
 8003f9e:	e7e6      	b.n	8003f6e <__swsetup_r+0x1e>
 8003fa0:	0758      	lsls	r0, r3, #29
 8003fa2:	d512      	bpl.n	8003fca <__swsetup_r+0x7a>
 8003fa4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003fa6:	b141      	cbz	r1, 8003fba <__swsetup_r+0x6a>
 8003fa8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003fac:	4299      	cmp	r1, r3
 8003fae:	d002      	beq.n	8003fb6 <__swsetup_r+0x66>
 8003fb0:	4630      	mov	r0, r6
 8003fb2:	f000 faa1 	bl	80044f8 <_free_r>
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	6363      	str	r3, [r4, #52]	; 0x34
 8003fba:	89a3      	ldrh	r3, [r4, #12]
 8003fbc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003fc0:	81a3      	strh	r3, [r4, #12]
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	6063      	str	r3, [r4, #4]
 8003fc6:	6923      	ldr	r3, [r4, #16]
 8003fc8:	6023      	str	r3, [r4, #0]
 8003fca:	89a3      	ldrh	r3, [r4, #12]
 8003fcc:	f043 0308 	orr.w	r3, r3, #8
 8003fd0:	81a3      	strh	r3, [r4, #12]
 8003fd2:	6923      	ldr	r3, [r4, #16]
 8003fd4:	b94b      	cbnz	r3, 8003fea <__swsetup_r+0x9a>
 8003fd6:	89a3      	ldrh	r3, [r4, #12]
 8003fd8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003fdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fe0:	d003      	beq.n	8003fea <__swsetup_r+0x9a>
 8003fe2:	4621      	mov	r1, r4
 8003fe4:	4630      	mov	r0, r6
 8003fe6:	f000 fa3f 	bl	8004468 <__smakebuf_r>
 8003fea:	89a0      	ldrh	r0, [r4, #12]
 8003fec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ff0:	f010 0301 	ands.w	r3, r0, #1
 8003ff4:	d00a      	beq.n	800400c <__swsetup_r+0xbc>
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60a3      	str	r3, [r4, #8]
 8003ffa:	6963      	ldr	r3, [r4, #20]
 8003ffc:	425b      	negs	r3, r3
 8003ffe:	61a3      	str	r3, [r4, #24]
 8004000:	6923      	ldr	r3, [r4, #16]
 8004002:	b943      	cbnz	r3, 8004016 <__swsetup_r+0xc6>
 8004004:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004008:	d1ba      	bne.n	8003f80 <__swsetup_r+0x30>
 800400a:	bd70      	pop	{r4, r5, r6, pc}
 800400c:	0781      	lsls	r1, r0, #30
 800400e:	bf58      	it	pl
 8004010:	6963      	ldrpl	r3, [r4, #20]
 8004012:	60a3      	str	r3, [r4, #8]
 8004014:	e7f4      	b.n	8004000 <__swsetup_r+0xb0>
 8004016:	2000      	movs	r0, #0
 8004018:	e7f7      	b.n	800400a <__swsetup_r+0xba>
 800401a:	bf00      	nop
 800401c:	2000000c 	.word	0x2000000c
 8004020:	08005514 	.word	0x08005514
 8004024:	08005534 	.word	0x08005534
 8004028:	080054f4 	.word	0x080054f4

0800402c <__assert_func>:
 800402c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800402e:	4614      	mov	r4, r2
 8004030:	461a      	mov	r2, r3
 8004032:	4b09      	ldr	r3, [pc, #36]	; (8004058 <__assert_func+0x2c>)
 8004034:	4605      	mov	r5, r0
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68d8      	ldr	r0, [r3, #12]
 800403a:	b14c      	cbz	r4, 8004050 <__assert_func+0x24>
 800403c:	4b07      	ldr	r3, [pc, #28]	; (800405c <__assert_func+0x30>)
 800403e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004042:	9100      	str	r1, [sp, #0]
 8004044:	462b      	mov	r3, r5
 8004046:	4906      	ldr	r1, [pc, #24]	; (8004060 <__assert_func+0x34>)
 8004048:	f000 f9a2 	bl	8004390 <fiprintf>
 800404c:	f000 fe84 	bl	8004d58 <abort>
 8004050:	4b04      	ldr	r3, [pc, #16]	; (8004064 <__assert_func+0x38>)
 8004052:	461c      	mov	r4, r3
 8004054:	e7f3      	b.n	800403e <__assert_func+0x12>
 8004056:	bf00      	nop
 8004058:	2000000c 	.word	0x2000000c
 800405c:	080054b7 	.word	0x080054b7
 8004060:	080054c4 	.word	0x080054c4
 8004064:	080054f2 	.word	0x080054f2

08004068 <__sflush_r>:
 8004068:	898a      	ldrh	r2, [r1, #12]
 800406a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800406c:	4605      	mov	r5, r0
 800406e:	0710      	lsls	r0, r2, #28
 8004070:	460c      	mov	r4, r1
 8004072:	d457      	bmi.n	8004124 <__sflush_r+0xbc>
 8004074:	684b      	ldr	r3, [r1, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	dc04      	bgt.n	8004084 <__sflush_r+0x1c>
 800407a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800407c:	2b00      	cmp	r3, #0
 800407e:	dc01      	bgt.n	8004084 <__sflush_r+0x1c>
 8004080:	2000      	movs	r0, #0
 8004082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004084:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004086:	2e00      	cmp	r6, #0
 8004088:	d0fa      	beq.n	8004080 <__sflush_r+0x18>
 800408a:	2300      	movs	r3, #0
 800408c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004090:	682f      	ldr	r7, [r5, #0]
 8004092:	602b      	str	r3, [r5, #0]
 8004094:	d032      	beq.n	80040fc <__sflush_r+0x94>
 8004096:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004098:	89a3      	ldrh	r3, [r4, #12]
 800409a:	075a      	lsls	r2, r3, #29
 800409c:	d505      	bpl.n	80040aa <__sflush_r+0x42>
 800409e:	6863      	ldr	r3, [r4, #4]
 80040a0:	1ac0      	subs	r0, r0, r3
 80040a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80040a4:	b10b      	cbz	r3, 80040aa <__sflush_r+0x42>
 80040a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040a8:	1ac0      	subs	r0, r0, r3
 80040aa:	2300      	movs	r3, #0
 80040ac:	4602      	mov	r2, r0
 80040ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80040b0:	4628      	mov	r0, r5
 80040b2:	6a21      	ldr	r1, [r4, #32]
 80040b4:	47b0      	blx	r6
 80040b6:	1c43      	adds	r3, r0, #1
 80040b8:	89a3      	ldrh	r3, [r4, #12]
 80040ba:	d106      	bne.n	80040ca <__sflush_r+0x62>
 80040bc:	6829      	ldr	r1, [r5, #0]
 80040be:	291d      	cmp	r1, #29
 80040c0:	d82c      	bhi.n	800411c <__sflush_r+0xb4>
 80040c2:	4a29      	ldr	r2, [pc, #164]	; (8004168 <__sflush_r+0x100>)
 80040c4:	40ca      	lsrs	r2, r1
 80040c6:	07d6      	lsls	r6, r2, #31
 80040c8:	d528      	bpl.n	800411c <__sflush_r+0xb4>
 80040ca:	2200      	movs	r2, #0
 80040cc:	6062      	str	r2, [r4, #4]
 80040ce:	6922      	ldr	r2, [r4, #16]
 80040d0:	04d9      	lsls	r1, r3, #19
 80040d2:	6022      	str	r2, [r4, #0]
 80040d4:	d504      	bpl.n	80040e0 <__sflush_r+0x78>
 80040d6:	1c42      	adds	r2, r0, #1
 80040d8:	d101      	bne.n	80040de <__sflush_r+0x76>
 80040da:	682b      	ldr	r3, [r5, #0]
 80040dc:	b903      	cbnz	r3, 80040e0 <__sflush_r+0x78>
 80040de:	6560      	str	r0, [r4, #84]	; 0x54
 80040e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040e2:	602f      	str	r7, [r5, #0]
 80040e4:	2900      	cmp	r1, #0
 80040e6:	d0cb      	beq.n	8004080 <__sflush_r+0x18>
 80040e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040ec:	4299      	cmp	r1, r3
 80040ee:	d002      	beq.n	80040f6 <__sflush_r+0x8e>
 80040f0:	4628      	mov	r0, r5
 80040f2:	f000 fa01 	bl	80044f8 <_free_r>
 80040f6:	2000      	movs	r0, #0
 80040f8:	6360      	str	r0, [r4, #52]	; 0x34
 80040fa:	e7c2      	b.n	8004082 <__sflush_r+0x1a>
 80040fc:	6a21      	ldr	r1, [r4, #32]
 80040fe:	2301      	movs	r3, #1
 8004100:	4628      	mov	r0, r5
 8004102:	47b0      	blx	r6
 8004104:	1c41      	adds	r1, r0, #1
 8004106:	d1c7      	bne.n	8004098 <__sflush_r+0x30>
 8004108:	682b      	ldr	r3, [r5, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d0c4      	beq.n	8004098 <__sflush_r+0x30>
 800410e:	2b1d      	cmp	r3, #29
 8004110:	d001      	beq.n	8004116 <__sflush_r+0xae>
 8004112:	2b16      	cmp	r3, #22
 8004114:	d101      	bne.n	800411a <__sflush_r+0xb2>
 8004116:	602f      	str	r7, [r5, #0]
 8004118:	e7b2      	b.n	8004080 <__sflush_r+0x18>
 800411a:	89a3      	ldrh	r3, [r4, #12]
 800411c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004120:	81a3      	strh	r3, [r4, #12]
 8004122:	e7ae      	b.n	8004082 <__sflush_r+0x1a>
 8004124:	690f      	ldr	r7, [r1, #16]
 8004126:	2f00      	cmp	r7, #0
 8004128:	d0aa      	beq.n	8004080 <__sflush_r+0x18>
 800412a:	0793      	lsls	r3, r2, #30
 800412c:	bf18      	it	ne
 800412e:	2300      	movne	r3, #0
 8004130:	680e      	ldr	r6, [r1, #0]
 8004132:	bf08      	it	eq
 8004134:	694b      	ldreq	r3, [r1, #20]
 8004136:	1bf6      	subs	r6, r6, r7
 8004138:	600f      	str	r7, [r1, #0]
 800413a:	608b      	str	r3, [r1, #8]
 800413c:	2e00      	cmp	r6, #0
 800413e:	dd9f      	ble.n	8004080 <__sflush_r+0x18>
 8004140:	4633      	mov	r3, r6
 8004142:	463a      	mov	r2, r7
 8004144:	4628      	mov	r0, r5
 8004146:	6a21      	ldr	r1, [r4, #32]
 8004148:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800414c:	47e0      	blx	ip
 800414e:	2800      	cmp	r0, #0
 8004150:	dc06      	bgt.n	8004160 <__sflush_r+0xf8>
 8004152:	89a3      	ldrh	r3, [r4, #12]
 8004154:	f04f 30ff 	mov.w	r0, #4294967295
 8004158:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800415c:	81a3      	strh	r3, [r4, #12]
 800415e:	e790      	b.n	8004082 <__sflush_r+0x1a>
 8004160:	4407      	add	r7, r0
 8004162:	1a36      	subs	r6, r6, r0
 8004164:	e7ea      	b.n	800413c <__sflush_r+0xd4>
 8004166:	bf00      	nop
 8004168:	20400001 	.word	0x20400001

0800416c <_fflush_r>:
 800416c:	b538      	push	{r3, r4, r5, lr}
 800416e:	690b      	ldr	r3, [r1, #16]
 8004170:	4605      	mov	r5, r0
 8004172:	460c      	mov	r4, r1
 8004174:	b913      	cbnz	r3, 800417c <_fflush_r+0x10>
 8004176:	2500      	movs	r5, #0
 8004178:	4628      	mov	r0, r5
 800417a:	bd38      	pop	{r3, r4, r5, pc}
 800417c:	b118      	cbz	r0, 8004186 <_fflush_r+0x1a>
 800417e:	6983      	ldr	r3, [r0, #24]
 8004180:	b90b      	cbnz	r3, 8004186 <_fflush_r+0x1a>
 8004182:	f000 f887 	bl	8004294 <__sinit>
 8004186:	4b14      	ldr	r3, [pc, #80]	; (80041d8 <_fflush_r+0x6c>)
 8004188:	429c      	cmp	r4, r3
 800418a:	d11b      	bne.n	80041c4 <_fflush_r+0x58>
 800418c:	686c      	ldr	r4, [r5, #4]
 800418e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d0ef      	beq.n	8004176 <_fflush_r+0xa>
 8004196:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004198:	07d0      	lsls	r0, r2, #31
 800419a:	d404      	bmi.n	80041a6 <_fflush_r+0x3a>
 800419c:	0599      	lsls	r1, r3, #22
 800419e:	d402      	bmi.n	80041a6 <_fflush_r+0x3a>
 80041a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041a2:	f000 f93a 	bl	800441a <__retarget_lock_acquire_recursive>
 80041a6:	4628      	mov	r0, r5
 80041a8:	4621      	mov	r1, r4
 80041aa:	f7ff ff5d 	bl	8004068 <__sflush_r>
 80041ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80041b0:	4605      	mov	r5, r0
 80041b2:	07da      	lsls	r2, r3, #31
 80041b4:	d4e0      	bmi.n	8004178 <_fflush_r+0xc>
 80041b6:	89a3      	ldrh	r3, [r4, #12]
 80041b8:	059b      	lsls	r3, r3, #22
 80041ba:	d4dd      	bmi.n	8004178 <_fflush_r+0xc>
 80041bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041be:	f000 f92d 	bl	800441c <__retarget_lock_release_recursive>
 80041c2:	e7d9      	b.n	8004178 <_fflush_r+0xc>
 80041c4:	4b05      	ldr	r3, [pc, #20]	; (80041dc <_fflush_r+0x70>)
 80041c6:	429c      	cmp	r4, r3
 80041c8:	d101      	bne.n	80041ce <_fflush_r+0x62>
 80041ca:	68ac      	ldr	r4, [r5, #8]
 80041cc:	e7df      	b.n	800418e <_fflush_r+0x22>
 80041ce:	4b04      	ldr	r3, [pc, #16]	; (80041e0 <_fflush_r+0x74>)
 80041d0:	429c      	cmp	r4, r3
 80041d2:	bf08      	it	eq
 80041d4:	68ec      	ldreq	r4, [r5, #12]
 80041d6:	e7da      	b.n	800418e <_fflush_r+0x22>
 80041d8:	08005514 	.word	0x08005514
 80041dc:	08005534 	.word	0x08005534
 80041e0:	080054f4 	.word	0x080054f4

080041e4 <std>:
 80041e4:	2300      	movs	r3, #0
 80041e6:	b510      	push	{r4, lr}
 80041e8:	4604      	mov	r4, r0
 80041ea:	e9c0 3300 	strd	r3, r3, [r0]
 80041ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80041f2:	6083      	str	r3, [r0, #8]
 80041f4:	8181      	strh	r1, [r0, #12]
 80041f6:	6643      	str	r3, [r0, #100]	; 0x64
 80041f8:	81c2      	strh	r2, [r0, #14]
 80041fa:	6183      	str	r3, [r0, #24]
 80041fc:	4619      	mov	r1, r3
 80041fe:	2208      	movs	r2, #8
 8004200:	305c      	adds	r0, #92	; 0x5c
 8004202:	f7ff fcc7 	bl	8003b94 <memset>
 8004206:	4b05      	ldr	r3, [pc, #20]	; (800421c <std+0x38>)
 8004208:	6224      	str	r4, [r4, #32]
 800420a:	6263      	str	r3, [r4, #36]	; 0x24
 800420c:	4b04      	ldr	r3, [pc, #16]	; (8004220 <std+0x3c>)
 800420e:	62a3      	str	r3, [r4, #40]	; 0x28
 8004210:	4b04      	ldr	r3, [pc, #16]	; (8004224 <std+0x40>)
 8004212:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004214:	4b04      	ldr	r3, [pc, #16]	; (8004228 <std+0x44>)
 8004216:	6323      	str	r3, [r4, #48]	; 0x30
 8004218:	bd10      	pop	{r4, pc}
 800421a:	bf00      	nop
 800421c:	08004cad 	.word	0x08004cad
 8004220:	08004ccf 	.word	0x08004ccf
 8004224:	08004d07 	.word	0x08004d07
 8004228:	08004d2b 	.word	0x08004d2b

0800422c <_cleanup_r>:
 800422c:	4901      	ldr	r1, [pc, #4]	; (8004234 <_cleanup_r+0x8>)
 800422e:	f000 b8c1 	b.w	80043b4 <_fwalk_reent>
 8004232:	bf00      	nop
 8004234:	0800416d 	.word	0x0800416d

08004238 <__sfmoreglue>:
 8004238:	2268      	movs	r2, #104	; 0x68
 800423a:	b570      	push	{r4, r5, r6, lr}
 800423c:	1e4d      	subs	r5, r1, #1
 800423e:	4355      	muls	r5, r2
 8004240:	460e      	mov	r6, r1
 8004242:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004246:	f000 f9bf 	bl	80045c8 <_malloc_r>
 800424a:	4604      	mov	r4, r0
 800424c:	b140      	cbz	r0, 8004260 <__sfmoreglue+0x28>
 800424e:	2100      	movs	r1, #0
 8004250:	e9c0 1600 	strd	r1, r6, [r0]
 8004254:	300c      	adds	r0, #12
 8004256:	60a0      	str	r0, [r4, #8]
 8004258:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800425c:	f7ff fc9a 	bl	8003b94 <memset>
 8004260:	4620      	mov	r0, r4
 8004262:	bd70      	pop	{r4, r5, r6, pc}

08004264 <__sfp_lock_acquire>:
 8004264:	4801      	ldr	r0, [pc, #4]	; (800426c <__sfp_lock_acquire+0x8>)
 8004266:	f000 b8d8 	b.w	800441a <__retarget_lock_acquire_recursive>
 800426a:	bf00      	nop
 800426c:	20001211 	.word	0x20001211

08004270 <__sfp_lock_release>:
 8004270:	4801      	ldr	r0, [pc, #4]	; (8004278 <__sfp_lock_release+0x8>)
 8004272:	f000 b8d3 	b.w	800441c <__retarget_lock_release_recursive>
 8004276:	bf00      	nop
 8004278:	20001211 	.word	0x20001211

0800427c <__sinit_lock_acquire>:
 800427c:	4801      	ldr	r0, [pc, #4]	; (8004284 <__sinit_lock_acquire+0x8>)
 800427e:	f000 b8cc 	b.w	800441a <__retarget_lock_acquire_recursive>
 8004282:	bf00      	nop
 8004284:	20001212 	.word	0x20001212

08004288 <__sinit_lock_release>:
 8004288:	4801      	ldr	r0, [pc, #4]	; (8004290 <__sinit_lock_release+0x8>)
 800428a:	f000 b8c7 	b.w	800441c <__retarget_lock_release_recursive>
 800428e:	bf00      	nop
 8004290:	20001212 	.word	0x20001212

08004294 <__sinit>:
 8004294:	b510      	push	{r4, lr}
 8004296:	4604      	mov	r4, r0
 8004298:	f7ff fff0 	bl	800427c <__sinit_lock_acquire>
 800429c:	69a3      	ldr	r3, [r4, #24]
 800429e:	b11b      	cbz	r3, 80042a8 <__sinit+0x14>
 80042a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042a4:	f7ff bff0 	b.w	8004288 <__sinit_lock_release>
 80042a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80042ac:	6523      	str	r3, [r4, #80]	; 0x50
 80042ae:	4b13      	ldr	r3, [pc, #76]	; (80042fc <__sinit+0x68>)
 80042b0:	4a13      	ldr	r2, [pc, #76]	; (8004300 <__sinit+0x6c>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80042b6:	42a3      	cmp	r3, r4
 80042b8:	bf08      	it	eq
 80042ba:	2301      	moveq	r3, #1
 80042bc:	4620      	mov	r0, r4
 80042be:	bf08      	it	eq
 80042c0:	61a3      	streq	r3, [r4, #24]
 80042c2:	f000 f81f 	bl	8004304 <__sfp>
 80042c6:	6060      	str	r0, [r4, #4]
 80042c8:	4620      	mov	r0, r4
 80042ca:	f000 f81b 	bl	8004304 <__sfp>
 80042ce:	60a0      	str	r0, [r4, #8]
 80042d0:	4620      	mov	r0, r4
 80042d2:	f000 f817 	bl	8004304 <__sfp>
 80042d6:	2200      	movs	r2, #0
 80042d8:	2104      	movs	r1, #4
 80042da:	60e0      	str	r0, [r4, #12]
 80042dc:	6860      	ldr	r0, [r4, #4]
 80042de:	f7ff ff81 	bl	80041e4 <std>
 80042e2:	2201      	movs	r2, #1
 80042e4:	2109      	movs	r1, #9
 80042e6:	68a0      	ldr	r0, [r4, #8]
 80042e8:	f7ff ff7c 	bl	80041e4 <std>
 80042ec:	2202      	movs	r2, #2
 80042ee:	2112      	movs	r1, #18
 80042f0:	68e0      	ldr	r0, [r4, #12]
 80042f2:	f7ff ff77 	bl	80041e4 <std>
 80042f6:	2301      	movs	r3, #1
 80042f8:	61a3      	str	r3, [r4, #24]
 80042fa:	e7d1      	b.n	80042a0 <__sinit+0xc>
 80042fc:	0800541c 	.word	0x0800541c
 8004300:	0800422d 	.word	0x0800422d

08004304 <__sfp>:
 8004304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004306:	4607      	mov	r7, r0
 8004308:	f7ff ffac 	bl	8004264 <__sfp_lock_acquire>
 800430c:	4b1e      	ldr	r3, [pc, #120]	; (8004388 <__sfp+0x84>)
 800430e:	681e      	ldr	r6, [r3, #0]
 8004310:	69b3      	ldr	r3, [r6, #24]
 8004312:	b913      	cbnz	r3, 800431a <__sfp+0x16>
 8004314:	4630      	mov	r0, r6
 8004316:	f7ff ffbd 	bl	8004294 <__sinit>
 800431a:	3648      	adds	r6, #72	; 0x48
 800431c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004320:	3b01      	subs	r3, #1
 8004322:	d503      	bpl.n	800432c <__sfp+0x28>
 8004324:	6833      	ldr	r3, [r6, #0]
 8004326:	b30b      	cbz	r3, 800436c <__sfp+0x68>
 8004328:	6836      	ldr	r6, [r6, #0]
 800432a:	e7f7      	b.n	800431c <__sfp+0x18>
 800432c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004330:	b9d5      	cbnz	r5, 8004368 <__sfp+0x64>
 8004332:	4b16      	ldr	r3, [pc, #88]	; (800438c <__sfp+0x88>)
 8004334:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004338:	60e3      	str	r3, [r4, #12]
 800433a:	6665      	str	r5, [r4, #100]	; 0x64
 800433c:	f000 f86c 	bl	8004418 <__retarget_lock_init_recursive>
 8004340:	f7ff ff96 	bl	8004270 <__sfp_lock_release>
 8004344:	2208      	movs	r2, #8
 8004346:	4629      	mov	r1, r5
 8004348:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800434c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004350:	6025      	str	r5, [r4, #0]
 8004352:	61a5      	str	r5, [r4, #24]
 8004354:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004358:	f7ff fc1c 	bl	8003b94 <memset>
 800435c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004360:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004364:	4620      	mov	r0, r4
 8004366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004368:	3468      	adds	r4, #104	; 0x68
 800436a:	e7d9      	b.n	8004320 <__sfp+0x1c>
 800436c:	2104      	movs	r1, #4
 800436e:	4638      	mov	r0, r7
 8004370:	f7ff ff62 	bl	8004238 <__sfmoreglue>
 8004374:	4604      	mov	r4, r0
 8004376:	6030      	str	r0, [r6, #0]
 8004378:	2800      	cmp	r0, #0
 800437a:	d1d5      	bne.n	8004328 <__sfp+0x24>
 800437c:	f7ff ff78 	bl	8004270 <__sfp_lock_release>
 8004380:	230c      	movs	r3, #12
 8004382:	603b      	str	r3, [r7, #0]
 8004384:	e7ee      	b.n	8004364 <__sfp+0x60>
 8004386:	bf00      	nop
 8004388:	0800541c 	.word	0x0800541c
 800438c:	ffff0001 	.word	0xffff0001

08004390 <fiprintf>:
 8004390:	b40e      	push	{r1, r2, r3}
 8004392:	b503      	push	{r0, r1, lr}
 8004394:	4601      	mov	r1, r0
 8004396:	ab03      	add	r3, sp, #12
 8004398:	4805      	ldr	r0, [pc, #20]	; (80043b0 <fiprintf+0x20>)
 800439a:	f853 2b04 	ldr.w	r2, [r3], #4
 800439e:	6800      	ldr	r0, [r0, #0]
 80043a0:	9301      	str	r3, [sp, #4]
 80043a2:	f000 f9ad 	bl	8004700 <_vfiprintf_r>
 80043a6:	b002      	add	sp, #8
 80043a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80043ac:	b003      	add	sp, #12
 80043ae:	4770      	bx	lr
 80043b0:	2000000c 	.word	0x2000000c

080043b4 <_fwalk_reent>:
 80043b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043b8:	4606      	mov	r6, r0
 80043ba:	4688      	mov	r8, r1
 80043bc:	2700      	movs	r7, #0
 80043be:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80043c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80043c6:	f1b9 0901 	subs.w	r9, r9, #1
 80043ca:	d505      	bpl.n	80043d8 <_fwalk_reent+0x24>
 80043cc:	6824      	ldr	r4, [r4, #0]
 80043ce:	2c00      	cmp	r4, #0
 80043d0:	d1f7      	bne.n	80043c2 <_fwalk_reent+0xe>
 80043d2:	4638      	mov	r0, r7
 80043d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043d8:	89ab      	ldrh	r3, [r5, #12]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d907      	bls.n	80043ee <_fwalk_reent+0x3a>
 80043de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80043e2:	3301      	adds	r3, #1
 80043e4:	d003      	beq.n	80043ee <_fwalk_reent+0x3a>
 80043e6:	4629      	mov	r1, r5
 80043e8:	4630      	mov	r0, r6
 80043ea:	47c0      	blx	r8
 80043ec:	4307      	orrs	r7, r0
 80043ee:	3568      	adds	r5, #104	; 0x68
 80043f0:	e7e9      	b.n	80043c6 <_fwalk_reent+0x12>
	...

080043f4 <_gettimeofday_r>:
 80043f4:	b538      	push	{r3, r4, r5, lr}
 80043f6:	2300      	movs	r3, #0
 80043f8:	4d06      	ldr	r5, [pc, #24]	; (8004414 <_gettimeofday_r+0x20>)
 80043fa:	4604      	mov	r4, r0
 80043fc:	4608      	mov	r0, r1
 80043fe:	4611      	mov	r1, r2
 8004400:	602b      	str	r3, [r5, #0]
 8004402:	f000 fd65 	bl	8004ed0 <_gettimeofday>
 8004406:	1c43      	adds	r3, r0, #1
 8004408:	d102      	bne.n	8004410 <_gettimeofday_r+0x1c>
 800440a:	682b      	ldr	r3, [r5, #0]
 800440c:	b103      	cbz	r3, 8004410 <_gettimeofday_r+0x1c>
 800440e:	6023      	str	r3, [r4, #0]
 8004410:	bd38      	pop	{r3, r4, r5, pc}
 8004412:	bf00      	nop
 8004414:	2000121c 	.word	0x2000121c

08004418 <__retarget_lock_init_recursive>:
 8004418:	4770      	bx	lr

0800441a <__retarget_lock_acquire_recursive>:
 800441a:	4770      	bx	lr

0800441c <__retarget_lock_release_recursive>:
 800441c:	4770      	bx	lr

0800441e <__swhatbuf_r>:
 800441e:	b570      	push	{r4, r5, r6, lr}
 8004420:	460e      	mov	r6, r1
 8004422:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004426:	4614      	mov	r4, r2
 8004428:	2900      	cmp	r1, #0
 800442a:	461d      	mov	r5, r3
 800442c:	b096      	sub	sp, #88	; 0x58
 800442e:	da08      	bge.n	8004442 <__swhatbuf_r+0x24>
 8004430:	2200      	movs	r2, #0
 8004432:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004436:	602a      	str	r2, [r5, #0]
 8004438:	061a      	lsls	r2, r3, #24
 800443a:	d410      	bmi.n	800445e <__swhatbuf_r+0x40>
 800443c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004440:	e00e      	b.n	8004460 <__swhatbuf_r+0x42>
 8004442:	466a      	mov	r2, sp
 8004444:	f000 fca0 	bl	8004d88 <_fstat_r>
 8004448:	2800      	cmp	r0, #0
 800444a:	dbf1      	blt.n	8004430 <__swhatbuf_r+0x12>
 800444c:	9a01      	ldr	r2, [sp, #4]
 800444e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004452:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004456:	425a      	negs	r2, r3
 8004458:	415a      	adcs	r2, r3
 800445a:	602a      	str	r2, [r5, #0]
 800445c:	e7ee      	b.n	800443c <__swhatbuf_r+0x1e>
 800445e:	2340      	movs	r3, #64	; 0x40
 8004460:	2000      	movs	r0, #0
 8004462:	6023      	str	r3, [r4, #0]
 8004464:	b016      	add	sp, #88	; 0x58
 8004466:	bd70      	pop	{r4, r5, r6, pc}

08004468 <__smakebuf_r>:
 8004468:	898b      	ldrh	r3, [r1, #12]
 800446a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800446c:	079d      	lsls	r5, r3, #30
 800446e:	4606      	mov	r6, r0
 8004470:	460c      	mov	r4, r1
 8004472:	d507      	bpl.n	8004484 <__smakebuf_r+0x1c>
 8004474:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004478:	6023      	str	r3, [r4, #0]
 800447a:	6123      	str	r3, [r4, #16]
 800447c:	2301      	movs	r3, #1
 800447e:	6163      	str	r3, [r4, #20]
 8004480:	b002      	add	sp, #8
 8004482:	bd70      	pop	{r4, r5, r6, pc}
 8004484:	466a      	mov	r2, sp
 8004486:	ab01      	add	r3, sp, #4
 8004488:	f7ff ffc9 	bl	800441e <__swhatbuf_r>
 800448c:	9900      	ldr	r1, [sp, #0]
 800448e:	4605      	mov	r5, r0
 8004490:	4630      	mov	r0, r6
 8004492:	f000 f899 	bl	80045c8 <_malloc_r>
 8004496:	b948      	cbnz	r0, 80044ac <__smakebuf_r+0x44>
 8004498:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800449c:	059a      	lsls	r2, r3, #22
 800449e:	d4ef      	bmi.n	8004480 <__smakebuf_r+0x18>
 80044a0:	f023 0303 	bic.w	r3, r3, #3
 80044a4:	f043 0302 	orr.w	r3, r3, #2
 80044a8:	81a3      	strh	r3, [r4, #12]
 80044aa:	e7e3      	b.n	8004474 <__smakebuf_r+0xc>
 80044ac:	4b0d      	ldr	r3, [pc, #52]	; (80044e4 <__smakebuf_r+0x7c>)
 80044ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80044b0:	89a3      	ldrh	r3, [r4, #12]
 80044b2:	6020      	str	r0, [r4, #0]
 80044b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044b8:	81a3      	strh	r3, [r4, #12]
 80044ba:	9b00      	ldr	r3, [sp, #0]
 80044bc:	6120      	str	r0, [r4, #16]
 80044be:	6163      	str	r3, [r4, #20]
 80044c0:	9b01      	ldr	r3, [sp, #4]
 80044c2:	b15b      	cbz	r3, 80044dc <__smakebuf_r+0x74>
 80044c4:	4630      	mov	r0, r6
 80044c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044ca:	f000 fc6f 	bl	8004dac <_isatty_r>
 80044ce:	b128      	cbz	r0, 80044dc <__smakebuf_r+0x74>
 80044d0:	89a3      	ldrh	r3, [r4, #12]
 80044d2:	f023 0303 	bic.w	r3, r3, #3
 80044d6:	f043 0301 	orr.w	r3, r3, #1
 80044da:	81a3      	strh	r3, [r4, #12]
 80044dc:	89a0      	ldrh	r0, [r4, #12]
 80044de:	4305      	orrs	r5, r0
 80044e0:	81a5      	strh	r5, [r4, #12]
 80044e2:	e7cd      	b.n	8004480 <__smakebuf_r+0x18>
 80044e4:	0800422d 	.word	0x0800422d

080044e8 <malloc>:
 80044e8:	4b02      	ldr	r3, [pc, #8]	; (80044f4 <malloc+0xc>)
 80044ea:	4601      	mov	r1, r0
 80044ec:	6818      	ldr	r0, [r3, #0]
 80044ee:	f000 b86b 	b.w	80045c8 <_malloc_r>
 80044f2:	bf00      	nop
 80044f4:	2000000c 	.word	0x2000000c

080044f8 <_free_r>:
 80044f8:	b538      	push	{r3, r4, r5, lr}
 80044fa:	4605      	mov	r5, r0
 80044fc:	2900      	cmp	r1, #0
 80044fe:	d040      	beq.n	8004582 <_free_r+0x8a>
 8004500:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004504:	1f0c      	subs	r4, r1, #4
 8004506:	2b00      	cmp	r3, #0
 8004508:	bfb8      	it	lt
 800450a:	18e4      	addlt	r4, r4, r3
 800450c:	f000 fc7e 	bl	8004e0c <__malloc_lock>
 8004510:	4a1c      	ldr	r2, [pc, #112]	; (8004584 <_free_r+0x8c>)
 8004512:	6813      	ldr	r3, [r2, #0]
 8004514:	b933      	cbnz	r3, 8004524 <_free_r+0x2c>
 8004516:	6063      	str	r3, [r4, #4]
 8004518:	6014      	str	r4, [r2, #0]
 800451a:	4628      	mov	r0, r5
 800451c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004520:	f000 bc7a 	b.w	8004e18 <__malloc_unlock>
 8004524:	42a3      	cmp	r3, r4
 8004526:	d908      	bls.n	800453a <_free_r+0x42>
 8004528:	6820      	ldr	r0, [r4, #0]
 800452a:	1821      	adds	r1, r4, r0
 800452c:	428b      	cmp	r3, r1
 800452e:	bf01      	itttt	eq
 8004530:	6819      	ldreq	r1, [r3, #0]
 8004532:	685b      	ldreq	r3, [r3, #4]
 8004534:	1809      	addeq	r1, r1, r0
 8004536:	6021      	streq	r1, [r4, #0]
 8004538:	e7ed      	b.n	8004516 <_free_r+0x1e>
 800453a:	461a      	mov	r2, r3
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	b10b      	cbz	r3, 8004544 <_free_r+0x4c>
 8004540:	42a3      	cmp	r3, r4
 8004542:	d9fa      	bls.n	800453a <_free_r+0x42>
 8004544:	6811      	ldr	r1, [r2, #0]
 8004546:	1850      	adds	r0, r2, r1
 8004548:	42a0      	cmp	r0, r4
 800454a:	d10b      	bne.n	8004564 <_free_r+0x6c>
 800454c:	6820      	ldr	r0, [r4, #0]
 800454e:	4401      	add	r1, r0
 8004550:	1850      	adds	r0, r2, r1
 8004552:	4283      	cmp	r3, r0
 8004554:	6011      	str	r1, [r2, #0]
 8004556:	d1e0      	bne.n	800451a <_free_r+0x22>
 8004558:	6818      	ldr	r0, [r3, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	4401      	add	r1, r0
 800455e:	6011      	str	r1, [r2, #0]
 8004560:	6053      	str	r3, [r2, #4]
 8004562:	e7da      	b.n	800451a <_free_r+0x22>
 8004564:	d902      	bls.n	800456c <_free_r+0x74>
 8004566:	230c      	movs	r3, #12
 8004568:	602b      	str	r3, [r5, #0]
 800456a:	e7d6      	b.n	800451a <_free_r+0x22>
 800456c:	6820      	ldr	r0, [r4, #0]
 800456e:	1821      	adds	r1, r4, r0
 8004570:	428b      	cmp	r3, r1
 8004572:	bf01      	itttt	eq
 8004574:	6819      	ldreq	r1, [r3, #0]
 8004576:	685b      	ldreq	r3, [r3, #4]
 8004578:	1809      	addeq	r1, r1, r0
 800457a:	6021      	streq	r1, [r4, #0]
 800457c:	6063      	str	r3, [r4, #4]
 800457e:	6054      	str	r4, [r2, #4]
 8004580:	e7cb      	b.n	800451a <_free_r+0x22>
 8004582:	bd38      	pop	{r3, r4, r5, pc}
 8004584:	20001214 	.word	0x20001214

08004588 <sbrk_aligned>:
 8004588:	b570      	push	{r4, r5, r6, lr}
 800458a:	4e0e      	ldr	r6, [pc, #56]	; (80045c4 <sbrk_aligned+0x3c>)
 800458c:	460c      	mov	r4, r1
 800458e:	6831      	ldr	r1, [r6, #0]
 8004590:	4605      	mov	r5, r0
 8004592:	b911      	cbnz	r1, 800459a <sbrk_aligned+0x12>
 8004594:	f000 fb7a 	bl	8004c8c <_sbrk_r>
 8004598:	6030      	str	r0, [r6, #0]
 800459a:	4621      	mov	r1, r4
 800459c:	4628      	mov	r0, r5
 800459e:	f000 fb75 	bl	8004c8c <_sbrk_r>
 80045a2:	1c43      	adds	r3, r0, #1
 80045a4:	d00a      	beq.n	80045bc <sbrk_aligned+0x34>
 80045a6:	1cc4      	adds	r4, r0, #3
 80045a8:	f024 0403 	bic.w	r4, r4, #3
 80045ac:	42a0      	cmp	r0, r4
 80045ae:	d007      	beq.n	80045c0 <sbrk_aligned+0x38>
 80045b0:	1a21      	subs	r1, r4, r0
 80045b2:	4628      	mov	r0, r5
 80045b4:	f000 fb6a 	bl	8004c8c <_sbrk_r>
 80045b8:	3001      	adds	r0, #1
 80045ba:	d101      	bne.n	80045c0 <sbrk_aligned+0x38>
 80045bc:	f04f 34ff 	mov.w	r4, #4294967295
 80045c0:	4620      	mov	r0, r4
 80045c2:	bd70      	pop	{r4, r5, r6, pc}
 80045c4:	20001218 	.word	0x20001218

080045c8 <_malloc_r>:
 80045c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045cc:	1ccd      	adds	r5, r1, #3
 80045ce:	f025 0503 	bic.w	r5, r5, #3
 80045d2:	3508      	adds	r5, #8
 80045d4:	2d0c      	cmp	r5, #12
 80045d6:	bf38      	it	cc
 80045d8:	250c      	movcc	r5, #12
 80045da:	2d00      	cmp	r5, #0
 80045dc:	4607      	mov	r7, r0
 80045de:	db01      	blt.n	80045e4 <_malloc_r+0x1c>
 80045e0:	42a9      	cmp	r1, r5
 80045e2:	d905      	bls.n	80045f0 <_malloc_r+0x28>
 80045e4:	230c      	movs	r3, #12
 80045e6:	2600      	movs	r6, #0
 80045e8:	603b      	str	r3, [r7, #0]
 80045ea:	4630      	mov	r0, r6
 80045ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045f0:	4e2e      	ldr	r6, [pc, #184]	; (80046ac <_malloc_r+0xe4>)
 80045f2:	f000 fc0b 	bl	8004e0c <__malloc_lock>
 80045f6:	6833      	ldr	r3, [r6, #0]
 80045f8:	461c      	mov	r4, r3
 80045fa:	bb34      	cbnz	r4, 800464a <_malloc_r+0x82>
 80045fc:	4629      	mov	r1, r5
 80045fe:	4638      	mov	r0, r7
 8004600:	f7ff ffc2 	bl	8004588 <sbrk_aligned>
 8004604:	1c43      	adds	r3, r0, #1
 8004606:	4604      	mov	r4, r0
 8004608:	d14d      	bne.n	80046a6 <_malloc_r+0xde>
 800460a:	6834      	ldr	r4, [r6, #0]
 800460c:	4626      	mov	r6, r4
 800460e:	2e00      	cmp	r6, #0
 8004610:	d140      	bne.n	8004694 <_malloc_r+0xcc>
 8004612:	6823      	ldr	r3, [r4, #0]
 8004614:	4631      	mov	r1, r6
 8004616:	4638      	mov	r0, r7
 8004618:	eb04 0803 	add.w	r8, r4, r3
 800461c:	f000 fb36 	bl	8004c8c <_sbrk_r>
 8004620:	4580      	cmp	r8, r0
 8004622:	d13a      	bne.n	800469a <_malloc_r+0xd2>
 8004624:	6821      	ldr	r1, [r4, #0]
 8004626:	3503      	adds	r5, #3
 8004628:	1a6d      	subs	r5, r5, r1
 800462a:	f025 0503 	bic.w	r5, r5, #3
 800462e:	3508      	adds	r5, #8
 8004630:	2d0c      	cmp	r5, #12
 8004632:	bf38      	it	cc
 8004634:	250c      	movcc	r5, #12
 8004636:	4638      	mov	r0, r7
 8004638:	4629      	mov	r1, r5
 800463a:	f7ff ffa5 	bl	8004588 <sbrk_aligned>
 800463e:	3001      	adds	r0, #1
 8004640:	d02b      	beq.n	800469a <_malloc_r+0xd2>
 8004642:	6823      	ldr	r3, [r4, #0]
 8004644:	442b      	add	r3, r5
 8004646:	6023      	str	r3, [r4, #0]
 8004648:	e00e      	b.n	8004668 <_malloc_r+0xa0>
 800464a:	6822      	ldr	r2, [r4, #0]
 800464c:	1b52      	subs	r2, r2, r5
 800464e:	d41e      	bmi.n	800468e <_malloc_r+0xc6>
 8004650:	2a0b      	cmp	r2, #11
 8004652:	d916      	bls.n	8004682 <_malloc_r+0xba>
 8004654:	1961      	adds	r1, r4, r5
 8004656:	42a3      	cmp	r3, r4
 8004658:	6025      	str	r5, [r4, #0]
 800465a:	bf18      	it	ne
 800465c:	6059      	strne	r1, [r3, #4]
 800465e:	6863      	ldr	r3, [r4, #4]
 8004660:	bf08      	it	eq
 8004662:	6031      	streq	r1, [r6, #0]
 8004664:	5162      	str	r2, [r4, r5]
 8004666:	604b      	str	r3, [r1, #4]
 8004668:	4638      	mov	r0, r7
 800466a:	f104 060b 	add.w	r6, r4, #11
 800466e:	f000 fbd3 	bl	8004e18 <__malloc_unlock>
 8004672:	f026 0607 	bic.w	r6, r6, #7
 8004676:	1d23      	adds	r3, r4, #4
 8004678:	1af2      	subs	r2, r6, r3
 800467a:	d0b6      	beq.n	80045ea <_malloc_r+0x22>
 800467c:	1b9b      	subs	r3, r3, r6
 800467e:	50a3      	str	r3, [r4, r2]
 8004680:	e7b3      	b.n	80045ea <_malloc_r+0x22>
 8004682:	6862      	ldr	r2, [r4, #4]
 8004684:	42a3      	cmp	r3, r4
 8004686:	bf0c      	ite	eq
 8004688:	6032      	streq	r2, [r6, #0]
 800468a:	605a      	strne	r2, [r3, #4]
 800468c:	e7ec      	b.n	8004668 <_malloc_r+0xa0>
 800468e:	4623      	mov	r3, r4
 8004690:	6864      	ldr	r4, [r4, #4]
 8004692:	e7b2      	b.n	80045fa <_malloc_r+0x32>
 8004694:	4634      	mov	r4, r6
 8004696:	6876      	ldr	r6, [r6, #4]
 8004698:	e7b9      	b.n	800460e <_malloc_r+0x46>
 800469a:	230c      	movs	r3, #12
 800469c:	4638      	mov	r0, r7
 800469e:	603b      	str	r3, [r7, #0]
 80046a0:	f000 fbba 	bl	8004e18 <__malloc_unlock>
 80046a4:	e7a1      	b.n	80045ea <_malloc_r+0x22>
 80046a6:	6025      	str	r5, [r4, #0]
 80046a8:	e7de      	b.n	8004668 <_malloc_r+0xa0>
 80046aa:	bf00      	nop
 80046ac:	20001214 	.word	0x20001214

080046b0 <__sfputc_r>:
 80046b0:	6893      	ldr	r3, [r2, #8]
 80046b2:	b410      	push	{r4}
 80046b4:	3b01      	subs	r3, #1
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	6093      	str	r3, [r2, #8]
 80046ba:	da07      	bge.n	80046cc <__sfputc_r+0x1c>
 80046bc:	6994      	ldr	r4, [r2, #24]
 80046be:	42a3      	cmp	r3, r4
 80046c0:	db01      	blt.n	80046c6 <__sfputc_r+0x16>
 80046c2:	290a      	cmp	r1, #10
 80046c4:	d102      	bne.n	80046cc <__sfputc_r+0x1c>
 80046c6:	bc10      	pop	{r4}
 80046c8:	f7ff bbf0 	b.w	8003eac <__swbuf_r>
 80046cc:	6813      	ldr	r3, [r2, #0]
 80046ce:	1c58      	adds	r0, r3, #1
 80046d0:	6010      	str	r0, [r2, #0]
 80046d2:	7019      	strb	r1, [r3, #0]
 80046d4:	4608      	mov	r0, r1
 80046d6:	bc10      	pop	{r4}
 80046d8:	4770      	bx	lr

080046da <__sfputs_r>:
 80046da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046dc:	4606      	mov	r6, r0
 80046de:	460f      	mov	r7, r1
 80046e0:	4614      	mov	r4, r2
 80046e2:	18d5      	adds	r5, r2, r3
 80046e4:	42ac      	cmp	r4, r5
 80046e6:	d101      	bne.n	80046ec <__sfputs_r+0x12>
 80046e8:	2000      	movs	r0, #0
 80046ea:	e007      	b.n	80046fc <__sfputs_r+0x22>
 80046ec:	463a      	mov	r2, r7
 80046ee:	4630      	mov	r0, r6
 80046f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046f4:	f7ff ffdc 	bl	80046b0 <__sfputc_r>
 80046f8:	1c43      	adds	r3, r0, #1
 80046fa:	d1f3      	bne.n	80046e4 <__sfputs_r+0xa>
 80046fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004700 <_vfiprintf_r>:
 8004700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004704:	460d      	mov	r5, r1
 8004706:	4614      	mov	r4, r2
 8004708:	4698      	mov	r8, r3
 800470a:	4606      	mov	r6, r0
 800470c:	b09d      	sub	sp, #116	; 0x74
 800470e:	b118      	cbz	r0, 8004718 <_vfiprintf_r+0x18>
 8004710:	6983      	ldr	r3, [r0, #24]
 8004712:	b90b      	cbnz	r3, 8004718 <_vfiprintf_r+0x18>
 8004714:	f7ff fdbe 	bl	8004294 <__sinit>
 8004718:	4b89      	ldr	r3, [pc, #548]	; (8004940 <_vfiprintf_r+0x240>)
 800471a:	429d      	cmp	r5, r3
 800471c:	d11b      	bne.n	8004756 <_vfiprintf_r+0x56>
 800471e:	6875      	ldr	r5, [r6, #4]
 8004720:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004722:	07d9      	lsls	r1, r3, #31
 8004724:	d405      	bmi.n	8004732 <_vfiprintf_r+0x32>
 8004726:	89ab      	ldrh	r3, [r5, #12]
 8004728:	059a      	lsls	r2, r3, #22
 800472a:	d402      	bmi.n	8004732 <_vfiprintf_r+0x32>
 800472c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800472e:	f7ff fe74 	bl	800441a <__retarget_lock_acquire_recursive>
 8004732:	89ab      	ldrh	r3, [r5, #12]
 8004734:	071b      	lsls	r3, r3, #28
 8004736:	d501      	bpl.n	800473c <_vfiprintf_r+0x3c>
 8004738:	692b      	ldr	r3, [r5, #16]
 800473a:	b9eb      	cbnz	r3, 8004778 <_vfiprintf_r+0x78>
 800473c:	4629      	mov	r1, r5
 800473e:	4630      	mov	r0, r6
 8004740:	f7ff fc06 	bl	8003f50 <__swsetup_r>
 8004744:	b1c0      	cbz	r0, 8004778 <_vfiprintf_r+0x78>
 8004746:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004748:	07dc      	lsls	r4, r3, #31
 800474a:	d50e      	bpl.n	800476a <_vfiprintf_r+0x6a>
 800474c:	f04f 30ff 	mov.w	r0, #4294967295
 8004750:	b01d      	add	sp, #116	; 0x74
 8004752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004756:	4b7b      	ldr	r3, [pc, #492]	; (8004944 <_vfiprintf_r+0x244>)
 8004758:	429d      	cmp	r5, r3
 800475a:	d101      	bne.n	8004760 <_vfiprintf_r+0x60>
 800475c:	68b5      	ldr	r5, [r6, #8]
 800475e:	e7df      	b.n	8004720 <_vfiprintf_r+0x20>
 8004760:	4b79      	ldr	r3, [pc, #484]	; (8004948 <_vfiprintf_r+0x248>)
 8004762:	429d      	cmp	r5, r3
 8004764:	bf08      	it	eq
 8004766:	68f5      	ldreq	r5, [r6, #12]
 8004768:	e7da      	b.n	8004720 <_vfiprintf_r+0x20>
 800476a:	89ab      	ldrh	r3, [r5, #12]
 800476c:	0598      	lsls	r0, r3, #22
 800476e:	d4ed      	bmi.n	800474c <_vfiprintf_r+0x4c>
 8004770:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004772:	f7ff fe53 	bl	800441c <__retarget_lock_release_recursive>
 8004776:	e7e9      	b.n	800474c <_vfiprintf_r+0x4c>
 8004778:	2300      	movs	r3, #0
 800477a:	9309      	str	r3, [sp, #36]	; 0x24
 800477c:	2320      	movs	r3, #32
 800477e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004782:	2330      	movs	r3, #48	; 0x30
 8004784:	f04f 0901 	mov.w	r9, #1
 8004788:	f8cd 800c 	str.w	r8, [sp, #12]
 800478c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800494c <_vfiprintf_r+0x24c>
 8004790:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004794:	4623      	mov	r3, r4
 8004796:	469a      	mov	sl, r3
 8004798:	f813 2b01 	ldrb.w	r2, [r3], #1
 800479c:	b10a      	cbz	r2, 80047a2 <_vfiprintf_r+0xa2>
 800479e:	2a25      	cmp	r2, #37	; 0x25
 80047a0:	d1f9      	bne.n	8004796 <_vfiprintf_r+0x96>
 80047a2:	ebba 0b04 	subs.w	fp, sl, r4
 80047a6:	d00b      	beq.n	80047c0 <_vfiprintf_r+0xc0>
 80047a8:	465b      	mov	r3, fp
 80047aa:	4622      	mov	r2, r4
 80047ac:	4629      	mov	r1, r5
 80047ae:	4630      	mov	r0, r6
 80047b0:	f7ff ff93 	bl	80046da <__sfputs_r>
 80047b4:	3001      	adds	r0, #1
 80047b6:	f000 80aa 	beq.w	800490e <_vfiprintf_r+0x20e>
 80047ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047bc:	445a      	add	r2, fp
 80047be:	9209      	str	r2, [sp, #36]	; 0x24
 80047c0:	f89a 3000 	ldrb.w	r3, [sl]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 80a2 	beq.w	800490e <_vfiprintf_r+0x20e>
 80047ca:	2300      	movs	r3, #0
 80047cc:	f04f 32ff 	mov.w	r2, #4294967295
 80047d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047d4:	f10a 0a01 	add.w	sl, sl, #1
 80047d8:	9304      	str	r3, [sp, #16]
 80047da:	9307      	str	r3, [sp, #28]
 80047dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80047e0:	931a      	str	r3, [sp, #104]	; 0x68
 80047e2:	4654      	mov	r4, sl
 80047e4:	2205      	movs	r2, #5
 80047e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047ea:	4858      	ldr	r0, [pc, #352]	; (800494c <_vfiprintf_r+0x24c>)
 80047ec:	f000 fb00 	bl	8004df0 <memchr>
 80047f0:	9a04      	ldr	r2, [sp, #16]
 80047f2:	b9d8      	cbnz	r0, 800482c <_vfiprintf_r+0x12c>
 80047f4:	06d1      	lsls	r1, r2, #27
 80047f6:	bf44      	itt	mi
 80047f8:	2320      	movmi	r3, #32
 80047fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047fe:	0713      	lsls	r3, r2, #28
 8004800:	bf44      	itt	mi
 8004802:	232b      	movmi	r3, #43	; 0x2b
 8004804:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004808:	f89a 3000 	ldrb.w	r3, [sl]
 800480c:	2b2a      	cmp	r3, #42	; 0x2a
 800480e:	d015      	beq.n	800483c <_vfiprintf_r+0x13c>
 8004810:	4654      	mov	r4, sl
 8004812:	2000      	movs	r0, #0
 8004814:	f04f 0c0a 	mov.w	ip, #10
 8004818:	9a07      	ldr	r2, [sp, #28]
 800481a:	4621      	mov	r1, r4
 800481c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004820:	3b30      	subs	r3, #48	; 0x30
 8004822:	2b09      	cmp	r3, #9
 8004824:	d94e      	bls.n	80048c4 <_vfiprintf_r+0x1c4>
 8004826:	b1b0      	cbz	r0, 8004856 <_vfiprintf_r+0x156>
 8004828:	9207      	str	r2, [sp, #28]
 800482a:	e014      	b.n	8004856 <_vfiprintf_r+0x156>
 800482c:	eba0 0308 	sub.w	r3, r0, r8
 8004830:	fa09 f303 	lsl.w	r3, r9, r3
 8004834:	4313      	orrs	r3, r2
 8004836:	46a2      	mov	sl, r4
 8004838:	9304      	str	r3, [sp, #16]
 800483a:	e7d2      	b.n	80047e2 <_vfiprintf_r+0xe2>
 800483c:	9b03      	ldr	r3, [sp, #12]
 800483e:	1d19      	adds	r1, r3, #4
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	9103      	str	r1, [sp, #12]
 8004844:	2b00      	cmp	r3, #0
 8004846:	bfbb      	ittet	lt
 8004848:	425b      	neglt	r3, r3
 800484a:	f042 0202 	orrlt.w	r2, r2, #2
 800484e:	9307      	strge	r3, [sp, #28]
 8004850:	9307      	strlt	r3, [sp, #28]
 8004852:	bfb8      	it	lt
 8004854:	9204      	strlt	r2, [sp, #16]
 8004856:	7823      	ldrb	r3, [r4, #0]
 8004858:	2b2e      	cmp	r3, #46	; 0x2e
 800485a:	d10c      	bne.n	8004876 <_vfiprintf_r+0x176>
 800485c:	7863      	ldrb	r3, [r4, #1]
 800485e:	2b2a      	cmp	r3, #42	; 0x2a
 8004860:	d135      	bne.n	80048ce <_vfiprintf_r+0x1ce>
 8004862:	9b03      	ldr	r3, [sp, #12]
 8004864:	3402      	adds	r4, #2
 8004866:	1d1a      	adds	r2, r3, #4
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	9203      	str	r2, [sp, #12]
 800486c:	2b00      	cmp	r3, #0
 800486e:	bfb8      	it	lt
 8004870:	f04f 33ff 	movlt.w	r3, #4294967295
 8004874:	9305      	str	r3, [sp, #20]
 8004876:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8004950 <_vfiprintf_r+0x250>
 800487a:	2203      	movs	r2, #3
 800487c:	4650      	mov	r0, sl
 800487e:	7821      	ldrb	r1, [r4, #0]
 8004880:	f000 fab6 	bl	8004df0 <memchr>
 8004884:	b140      	cbz	r0, 8004898 <_vfiprintf_r+0x198>
 8004886:	2340      	movs	r3, #64	; 0x40
 8004888:	eba0 000a 	sub.w	r0, r0, sl
 800488c:	fa03 f000 	lsl.w	r0, r3, r0
 8004890:	9b04      	ldr	r3, [sp, #16]
 8004892:	3401      	adds	r4, #1
 8004894:	4303      	orrs	r3, r0
 8004896:	9304      	str	r3, [sp, #16]
 8004898:	f814 1b01 	ldrb.w	r1, [r4], #1
 800489c:	2206      	movs	r2, #6
 800489e:	482d      	ldr	r0, [pc, #180]	; (8004954 <_vfiprintf_r+0x254>)
 80048a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80048a4:	f000 faa4 	bl	8004df0 <memchr>
 80048a8:	2800      	cmp	r0, #0
 80048aa:	d03f      	beq.n	800492c <_vfiprintf_r+0x22c>
 80048ac:	4b2a      	ldr	r3, [pc, #168]	; (8004958 <_vfiprintf_r+0x258>)
 80048ae:	bb1b      	cbnz	r3, 80048f8 <_vfiprintf_r+0x1f8>
 80048b0:	9b03      	ldr	r3, [sp, #12]
 80048b2:	3307      	adds	r3, #7
 80048b4:	f023 0307 	bic.w	r3, r3, #7
 80048b8:	3308      	adds	r3, #8
 80048ba:	9303      	str	r3, [sp, #12]
 80048bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048be:	443b      	add	r3, r7
 80048c0:	9309      	str	r3, [sp, #36]	; 0x24
 80048c2:	e767      	b.n	8004794 <_vfiprintf_r+0x94>
 80048c4:	460c      	mov	r4, r1
 80048c6:	2001      	movs	r0, #1
 80048c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80048cc:	e7a5      	b.n	800481a <_vfiprintf_r+0x11a>
 80048ce:	2300      	movs	r3, #0
 80048d0:	f04f 0c0a 	mov.w	ip, #10
 80048d4:	4619      	mov	r1, r3
 80048d6:	3401      	adds	r4, #1
 80048d8:	9305      	str	r3, [sp, #20]
 80048da:	4620      	mov	r0, r4
 80048dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048e0:	3a30      	subs	r2, #48	; 0x30
 80048e2:	2a09      	cmp	r2, #9
 80048e4:	d903      	bls.n	80048ee <_vfiprintf_r+0x1ee>
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d0c5      	beq.n	8004876 <_vfiprintf_r+0x176>
 80048ea:	9105      	str	r1, [sp, #20]
 80048ec:	e7c3      	b.n	8004876 <_vfiprintf_r+0x176>
 80048ee:	4604      	mov	r4, r0
 80048f0:	2301      	movs	r3, #1
 80048f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80048f6:	e7f0      	b.n	80048da <_vfiprintf_r+0x1da>
 80048f8:	ab03      	add	r3, sp, #12
 80048fa:	9300      	str	r3, [sp, #0]
 80048fc:	462a      	mov	r2, r5
 80048fe:	4630      	mov	r0, r6
 8004900:	4b16      	ldr	r3, [pc, #88]	; (800495c <_vfiprintf_r+0x25c>)
 8004902:	a904      	add	r1, sp, #16
 8004904:	f3af 8000 	nop.w
 8004908:	4607      	mov	r7, r0
 800490a:	1c78      	adds	r0, r7, #1
 800490c:	d1d6      	bne.n	80048bc <_vfiprintf_r+0x1bc>
 800490e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004910:	07d9      	lsls	r1, r3, #31
 8004912:	d405      	bmi.n	8004920 <_vfiprintf_r+0x220>
 8004914:	89ab      	ldrh	r3, [r5, #12]
 8004916:	059a      	lsls	r2, r3, #22
 8004918:	d402      	bmi.n	8004920 <_vfiprintf_r+0x220>
 800491a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800491c:	f7ff fd7e 	bl	800441c <__retarget_lock_release_recursive>
 8004920:	89ab      	ldrh	r3, [r5, #12]
 8004922:	065b      	lsls	r3, r3, #25
 8004924:	f53f af12 	bmi.w	800474c <_vfiprintf_r+0x4c>
 8004928:	9809      	ldr	r0, [sp, #36]	; 0x24
 800492a:	e711      	b.n	8004750 <_vfiprintf_r+0x50>
 800492c:	ab03      	add	r3, sp, #12
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	462a      	mov	r2, r5
 8004932:	4630      	mov	r0, r6
 8004934:	4b09      	ldr	r3, [pc, #36]	; (800495c <_vfiprintf_r+0x25c>)
 8004936:	a904      	add	r1, sp, #16
 8004938:	f000 f882 	bl	8004a40 <_printf_i>
 800493c:	e7e4      	b.n	8004908 <_vfiprintf_r+0x208>
 800493e:	bf00      	nop
 8004940:	08005514 	.word	0x08005514
 8004944:	08005534 	.word	0x08005534
 8004948:	080054f4 	.word	0x080054f4
 800494c:	08005554 	.word	0x08005554
 8004950:	0800555a 	.word	0x0800555a
 8004954:	0800555e 	.word	0x0800555e
 8004958:	00000000 	.word	0x00000000
 800495c:	080046db 	.word	0x080046db

08004960 <_printf_common>:
 8004960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004964:	4616      	mov	r6, r2
 8004966:	4699      	mov	r9, r3
 8004968:	688a      	ldr	r2, [r1, #8]
 800496a:	690b      	ldr	r3, [r1, #16]
 800496c:	4607      	mov	r7, r0
 800496e:	4293      	cmp	r3, r2
 8004970:	bfb8      	it	lt
 8004972:	4613      	movlt	r3, r2
 8004974:	6033      	str	r3, [r6, #0]
 8004976:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800497a:	460c      	mov	r4, r1
 800497c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004980:	b10a      	cbz	r2, 8004986 <_printf_common+0x26>
 8004982:	3301      	adds	r3, #1
 8004984:	6033      	str	r3, [r6, #0]
 8004986:	6823      	ldr	r3, [r4, #0]
 8004988:	0699      	lsls	r1, r3, #26
 800498a:	bf42      	ittt	mi
 800498c:	6833      	ldrmi	r3, [r6, #0]
 800498e:	3302      	addmi	r3, #2
 8004990:	6033      	strmi	r3, [r6, #0]
 8004992:	6825      	ldr	r5, [r4, #0]
 8004994:	f015 0506 	ands.w	r5, r5, #6
 8004998:	d106      	bne.n	80049a8 <_printf_common+0x48>
 800499a:	f104 0a19 	add.w	sl, r4, #25
 800499e:	68e3      	ldr	r3, [r4, #12]
 80049a0:	6832      	ldr	r2, [r6, #0]
 80049a2:	1a9b      	subs	r3, r3, r2
 80049a4:	42ab      	cmp	r3, r5
 80049a6:	dc28      	bgt.n	80049fa <_printf_common+0x9a>
 80049a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80049ac:	1e13      	subs	r3, r2, #0
 80049ae:	6822      	ldr	r2, [r4, #0]
 80049b0:	bf18      	it	ne
 80049b2:	2301      	movne	r3, #1
 80049b4:	0692      	lsls	r2, r2, #26
 80049b6:	d42d      	bmi.n	8004a14 <_printf_common+0xb4>
 80049b8:	4649      	mov	r1, r9
 80049ba:	4638      	mov	r0, r7
 80049bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049c0:	47c0      	blx	r8
 80049c2:	3001      	adds	r0, #1
 80049c4:	d020      	beq.n	8004a08 <_printf_common+0xa8>
 80049c6:	6823      	ldr	r3, [r4, #0]
 80049c8:	68e5      	ldr	r5, [r4, #12]
 80049ca:	f003 0306 	and.w	r3, r3, #6
 80049ce:	2b04      	cmp	r3, #4
 80049d0:	bf18      	it	ne
 80049d2:	2500      	movne	r5, #0
 80049d4:	6832      	ldr	r2, [r6, #0]
 80049d6:	f04f 0600 	mov.w	r6, #0
 80049da:	68a3      	ldr	r3, [r4, #8]
 80049dc:	bf08      	it	eq
 80049de:	1aad      	subeq	r5, r5, r2
 80049e0:	6922      	ldr	r2, [r4, #16]
 80049e2:	bf08      	it	eq
 80049e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049e8:	4293      	cmp	r3, r2
 80049ea:	bfc4      	itt	gt
 80049ec:	1a9b      	subgt	r3, r3, r2
 80049ee:	18ed      	addgt	r5, r5, r3
 80049f0:	341a      	adds	r4, #26
 80049f2:	42b5      	cmp	r5, r6
 80049f4:	d11a      	bne.n	8004a2c <_printf_common+0xcc>
 80049f6:	2000      	movs	r0, #0
 80049f8:	e008      	b.n	8004a0c <_printf_common+0xac>
 80049fa:	2301      	movs	r3, #1
 80049fc:	4652      	mov	r2, sl
 80049fe:	4649      	mov	r1, r9
 8004a00:	4638      	mov	r0, r7
 8004a02:	47c0      	blx	r8
 8004a04:	3001      	adds	r0, #1
 8004a06:	d103      	bne.n	8004a10 <_printf_common+0xb0>
 8004a08:	f04f 30ff 	mov.w	r0, #4294967295
 8004a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a10:	3501      	adds	r5, #1
 8004a12:	e7c4      	b.n	800499e <_printf_common+0x3e>
 8004a14:	2030      	movs	r0, #48	; 0x30
 8004a16:	18e1      	adds	r1, r4, r3
 8004a18:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a1c:	1c5a      	adds	r2, r3, #1
 8004a1e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a22:	4422      	add	r2, r4
 8004a24:	3302      	adds	r3, #2
 8004a26:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a2a:	e7c5      	b.n	80049b8 <_printf_common+0x58>
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	4622      	mov	r2, r4
 8004a30:	4649      	mov	r1, r9
 8004a32:	4638      	mov	r0, r7
 8004a34:	47c0      	blx	r8
 8004a36:	3001      	adds	r0, #1
 8004a38:	d0e6      	beq.n	8004a08 <_printf_common+0xa8>
 8004a3a:	3601      	adds	r6, #1
 8004a3c:	e7d9      	b.n	80049f2 <_printf_common+0x92>
	...

08004a40 <_printf_i>:
 8004a40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a44:	7e0f      	ldrb	r7, [r1, #24]
 8004a46:	4691      	mov	r9, r2
 8004a48:	2f78      	cmp	r7, #120	; 0x78
 8004a4a:	4680      	mov	r8, r0
 8004a4c:	460c      	mov	r4, r1
 8004a4e:	469a      	mov	sl, r3
 8004a50:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004a56:	d807      	bhi.n	8004a68 <_printf_i+0x28>
 8004a58:	2f62      	cmp	r7, #98	; 0x62
 8004a5a:	d80a      	bhi.n	8004a72 <_printf_i+0x32>
 8004a5c:	2f00      	cmp	r7, #0
 8004a5e:	f000 80d9 	beq.w	8004c14 <_printf_i+0x1d4>
 8004a62:	2f58      	cmp	r7, #88	; 0x58
 8004a64:	f000 80a4 	beq.w	8004bb0 <_printf_i+0x170>
 8004a68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a70:	e03a      	b.n	8004ae8 <_printf_i+0xa8>
 8004a72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a76:	2b15      	cmp	r3, #21
 8004a78:	d8f6      	bhi.n	8004a68 <_printf_i+0x28>
 8004a7a:	a101      	add	r1, pc, #4	; (adr r1, 8004a80 <_printf_i+0x40>)
 8004a7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a80:	08004ad9 	.word	0x08004ad9
 8004a84:	08004aed 	.word	0x08004aed
 8004a88:	08004a69 	.word	0x08004a69
 8004a8c:	08004a69 	.word	0x08004a69
 8004a90:	08004a69 	.word	0x08004a69
 8004a94:	08004a69 	.word	0x08004a69
 8004a98:	08004aed 	.word	0x08004aed
 8004a9c:	08004a69 	.word	0x08004a69
 8004aa0:	08004a69 	.word	0x08004a69
 8004aa4:	08004a69 	.word	0x08004a69
 8004aa8:	08004a69 	.word	0x08004a69
 8004aac:	08004bfb 	.word	0x08004bfb
 8004ab0:	08004b1d 	.word	0x08004b1d
 8004ab4:	08004bdd 	.word	0x08004bdd
 8004ab8:	08004a69 	.word	0x08004a69
 8004abc:	08004a69 	.word	0x08004a69
 8004ac0:	08004c1d 	.word	0x08004c1d
 8004ac4:	08004a69 	.word	0x08004a69
 8004ac8:	08004b1d 	.word	0x08004b1d
 8004acc:	08004a69 	.word	0x08004a69
 8004ad0:	08004a69 	.word	0x08004a69
 8004ad4:	08004be5 	.word	0x08004be5
 8004ad8:	682b      	ldr	r3, [r5, #0]
 8004ada:	1d1a      	adds	r2, r3, #4
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	602a      	str	r2, [r5, #0]
 8004ae0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ae4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e0a4      	b.n	8004c36 <_printf_i+0x1f6>
 8004aec:	6820      	ldr	r0, [r4, #0]
 8004aee:	6829      	ldr	r1, [r5, #0]
 8004af0:	0606      	lsls	r6, r0, #24
 8004af2:	f101 0304 	add.w	r3, r1, #4
 8004af6:	d50a      	bpl.n	8004b0e <_printf_i+0xce>
 8004af8:	680e      	ldr	r6, [r1, #0]
 8004afa:	602b      	str	r3, [r5, #0]
 8004afc:	2e00      	cmp	r6, #0
 8004afe:	da03      	bge.n	8004b08 <_printf_i+0xc8>
 8004b00:	232d      	movs	r3, #45	; 0x2d
 8004b02:	4276      	negs	r6, r6
 8004b04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b08:	230a      	movs	r3, #10
 8004b0a:	485e      	ldr	r0, [pc, #376]	; (8004c84 <_printf_i+0x244>)
 8004b0c:	e019      	b.n	8004b42 <_printf_i+0x102>
 8004b0e:	680e      	ldr	r6, [r1, #0]
 8004b10:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b14:	602b      	str	r3, [r5, #0]
 8004b16:	bf18      	it	ne
 8004b18:	b236      	sxthne	r6, r6
 8004b1a:	e7ef      	b.n	8004afc <_printf_i+0xbc>
 8004b1c:	682b      	ldr	r3, [r5, #0]
 8004b1e:	6820      	ldr	r0, [r4, #0]
 8004b20:	1d19      	adds	r1, r3, #4
 8004b22:	6029      	str	r1, [r5, #0]
 8004b24:	0601      	lsls	r1, r0, #24
 8004b26:	d501      	bpl.n	8004b2c <_printf_i+0xec>
 8004b28:	681e      	ldr	r6, [r3, #0]
 8004b2a:	e002      	b.n	8004b32 <_printf_i+0xf2>
 8004b2c:	0646      	lsls	r6, r0, #25
 8004b2e:	d5fb      	bpl.n	8004b28 <_printf_i+0xe8>
 8004b30:	881e      	ldrh	r6, [r3, #0]
 8004b32:	2f6f      	cmp	r7, #111	; 0x6f
 8004b34:	bf0c      	ite	eq
 8004b36:	2308      	moveq	r3, #8
 8004b38:	230a      	movne	r3, #10
 8004b3a:	4852      	ldr	r0, [pc, #328]	; (8004c84 <_printf_i+0x244>)
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b42:	6865      	ldr	r5, [r4, #4]
 8004b44:	2d00      	cmp	r5, #0
 8004b46:	bfa8      	it	ge
 8004b48:	6821      	ldrge	r1, [r4, #0]
 8004b4a:	60a5      	str	r5, [r4, #8]
 8004b4c:	bfa4      	itt	ge
 8004b4e:	f021 0104 	bicge.w	r1, r1, #4
 8004b52:	6021      	strge	r1, [r4, #0]
 8004b54:	b90e      	cbnz	r6, 8004b5a <_printf_i+0x11a>
 8004b56:	2d00      	cmp	r5, #0
 8004b58:	d04d      	beq.n	8004bf6 <_printf_i+0x1b6>
 8004b5a:	4615      	mov	r5, r2
 8004b5c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b60:	fb03 6711 	mls	r7, r3, r1, r6
 8004b64:	5dc7      	ldrb	r7, [r0, r7]
 8004b66:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b6a:	4637      	mov	r7, r6
 8004b6c:	42bb      	cmp	r3, r7
 8004b6e:	460e      	mov	r6, r1
 8004b70:	d9f4      	bls.n	8004b5c <_printf_i+0x11c>
 8004b72:	2b08      	cmp	r3, #8
 8004b74:	d10b      	bne.n	8004b8e <_printf_i+0x14e>
 8004b76:	6823      	ldr	r3, [r4, #0]
 8004b78:	07de      	lsls	r6, r3, #31
 8004b7a:	d508      	bpl.n	8004b8e <_printf_i+0x14e>
 8004b7c:	6923      	ldr	r3, [r4, #16]
 8004b7e:	6861      	ldr	r1, [r4, #4]
 8004b80:	4299      	cmp	r1, r3
 8004b82:	bfde      	ittt	le
 8004b84:	2330      	movle	r3, #48	; 0x30
 8004b86:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b8a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b8e:	1b52      	subs	r2, r2, r5
 8004b90:	6122      	str	r2, [r4, #16]
 8004b92:	464b      	mov	r3, r9
 8004b94:	4621      	mov	r1, r4
 8004b96:	4640      	mov	r0, r8
 8004b98:	f8cd a000 	str.w	sl, [sp]
 8004b9c:	aa03      	add	r2, sp, #12
 8004b9e:	f7ff fedf 	bl	8004960 <_printf_common>
 8004ba2:	3001      	adds	r0, #1
 8004ba4:	d14c      	bne.n	8004c40 <_printf_i+0x200>
 8004ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8004baa:	b004      	add	sp, #16
 8004bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bb0:	4834      	ldr	r0, [pc, #208]	; (8004c84 <_printf_i+0x244>)
 8004bb2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004bb6:	6829      	ldr	r1, [r5, #0]
 8004bb8:	6823      	ldr	r3, [r4, #0]
 8004bba:	f851 6b04 	ldr.w	r6, [r1], #4
 8004bbe:	6029      	str	r1, [r5, #0]
 8004bc0:	061d      	lsls	r5, r3, #24
 8004bc2:	d514      	bpl.n	8004bee <_printf_i+0x1ae>
 8004bc4:	07df      	lsls	r7, r3, #31
 8004bc6:	bf44      	itt	mi
 8004bc8:	f043 0320 	orrmi.w	r3, r3, #32
 8004bcc:	6023      	strmi	r3, [r4, #0]
 8004bce:	b91e      	cbnz	r6, 8004bd8 <_printf_i+0x198>
 8004bd0:	6823      	ldr	r3, [r4, #0]
 8004bd2:	f023 0320 	bic.w	r3, r3, #32
 8004bd6:	6023      	str	r3, [r4, #0]
 8004bd8:	2310      	movs	r3, #16
 8004bda:	e7af      	b.n	8004b3c <_printf_i+0xfc>
 8004bdc:	6823      	ldr	r3, [r4, #0]
 8004bde:	f043 0320 	orr.w	r3, r3, #32
 8004be2:	6023      	str	r3, [r4, #0]
 8004be4:	2378      	movs	r3, #120	; 0x78
 8004be6:	4828      	ldr	r0, [pc, #160]	; (8004c88 <_printf_i+0x248>)
 8004be8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004bec:	e7e3      	b.n	8004bb6 <_printf_i+0x176>
 8004bee:	0659      	lsls	r1, r3, #25
 8004bf0:	bf48      	it	mi
 8004bf2:	b2b6      	uxthmi	r6, r6
 8004bf4:	e7e6      	b.n	8004bc4 <_printf_i+0x184>
 8004bf6:	4615      	mov	r5, r2
 8004bf8:	e7bb      	b.n	8004b72 <_printf_i+0x132>
 8004bfa:	682b      	ldr	r3, [r5, #0]
 8004bfc:	6826      	ldr	r6, [r4, #0]
 8004bfe:	1d18      	adds	r0, r3, #4
 8004c00:	6961      	ldr	r1, [r4, #20]
 8004c02:	6028      	str	r0, [r5, #0]
 8004c04:	0635      	lsls	r5, r6, #24
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	d501      	bpl.n	8004c0e <_printf_i+0x1ce>
 8004c0a:	6019      	str	r1, [r3, #0]
 8004c0c:	e002      	b.n	8004c14 <_printf_i+0x1d4>
 8004c0e:	0670      	lsls	r0, r6, #25
 8004c10:	d5fb      	bpl.n	8004c0a <_printf_i+0x1ca>
 8004c12:	8019      	strh	r1, [r3, #0]
 8004c14:	2300      	movs	r3, #0
 8004c16:	4615      	mov	r5, r2
 8004c18:	6123      	str	r3, [r4, #16]
 8004c1a:	e7ba      	b.n	8004b92 <_printf_i+0x152>
 8004c1c:	682b      	ldr	r3, [r5, #0]
 8004c1e:	2100      	movs	r1, #0
 8004c20:	1d1a      	adds	r2, r3, #4
 8004c22:	602a      	str	r2, [r5, #0]
 8004c24:	681d      	ldr	r5, [r3, #0]
 8004c26:	6862      	ldr	r2, [r4, #4]
 8004c28:	4628      	mov	r0, r5
 8004c2a:	f000 f8e1 	bl	8004df0 <memchr>
 8004c2e:	b108      	cbz	r0, 8004c34 <_printf_i+0x1f4>
 8004c30:	1b40      	subs	r0, r0, r5
 8004c32:	6060      	str	r0, [r4, #4]
 8004c34:	6863      	ldr	r3, [r4, #4]
 8004c36:	6123      	str	r3, [r4, #16]
 8004c38:	2300      	movs	r3, #0
 8004c3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c3e:	e7a8      	b.n	8004b92 <_printf_i+0x152>
 8004c40:	462a      	mov	r2, r5
 8004c42:	4649      	mov	r1, r9
 8004c44:	4640      	mov	r0, r8
 8004c46:	6923      	ldr	r3, [r4, #16]
 8004c48:	47d0      	blx	sl
 8004c4a:	3001      	adds	r0, #1
 8004c4c:	d0ab      	beq.n	8004ba6 <_printf_i+0x166>
 8004c4e:	6823      	ldr	r3, [r4, #0]
 8004c50:	079b      	lsls	r3, r3, #30
 8004c52:	d413      	bmi.n	8004c7c <_printf_i+0x23c>
 8004c54:	68e0      	ldr	r0, [r4, #12]
 8004c56:	9b03      	ldr	r3, [sp, #12]
 8004c58:	4298      	cmp	r0, r3
 8004c5a:	bfb8      	it	lt
 8004c5c:	4618      	movlt	r0, r3
 8004c5e:	e7a4      	b.n	8004baa <_printf_i+0x16a>
 8004c60:	2301      	movs	r3, #1
 8004c62:	4632      	mov	r2, r6
 8004c64:	4649      	mov	r1, r9
 8004c66:	4640      	mov	r0, r8
 8004c68:	47d0      	blx	sl
 8004c6a:	3001      	adds	r0, #1
 8004c6c:	d09b      	beq.n	8004ba6 <_printf_i+0x166>
 8004c6e:	3501      	adds	r5, #1
 8004c70:	68e3      	ldr	r3, [r4, #12]
 8004c72:	9903      	ldr	r1, [sp, #12]
 8004c74:	1a5b      	subs	r3, r3, r1
 8004c76:	42ab      	cmp	r3, r5
 8004c78:	dcf2      	bgt.n	8004c60 <_printf_i+0x220>
 8004c7a:	e7eb      	b.n	8004c54 <_printf_i+0x214>
 8004c7c:	2500      	movs	r5, #0
 8004c7e:	f104 0619 	add.w	r6, r4, #25
 8004c82:	e7f5      	b.n	8004c70 <_printf_i+0x230>
 8004c84:	08005565 	.word	0x08005565
 8004c88:	08005576 	.word	0x08005576

08004c8c <_sbrk_r>:
 8004c8c:	b538      	push	{r3, r4, r5, lr}
 8004c8e:	2300      	movs	r3, #0
 8004c90:	4d05      	ldr	r5, [pc, #20]	; (8004ca8 <_sbrk_r+0x1c>)
 8004c92:	4604      	mov	r4, r0
 8004c94:	4608      	mov	r0, r1
 8004c96:	602b      	str	r3, [r5, #0]
 8004c98:	f7fd f804 	bl	8001ca4 <_sbrk>
 8004c9c:	1c43      	adds	r3, r0, #1
 8004c9e:	d102      	bne.n	8004ca6 <_sbrk_r+0x1a>
 8004ca0:	682b      	ldr	r3, [r5, #0]
 8004ca2:	b103      	cbz	r3, 8004ca6 <_sbrk_r+0x1a>
 8004ca4:	6023      	str	r3, [r4, #0]
 8004ca6:	bd38      	pop	{r3, r4, r5, pc}
 8004ca8:	2000121c 	.word	0x2000121c

08004cac <__sread>:
 8004cac:	b510      	push	{r4, lr}
 8004cae:	460c      	mov	r4, r1
 8004cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cb4:	f000 f8b6 	bl	8004e24 <_read_r>
 8004cb8:	2800      	cmp	r0, #0
 8004cba:	bfab      	itete	ge
 8004cbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004cbe:	89a3      	ldrhlt	r3, [r4, #12]
 8004cc0:	181b      	addge	r3, r3, r0
 8004cc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004cc6:	bfac      	ite	ge
 8004cc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8004cca:	81a3      	strhlt	r3, [r4, #12]
 8004ccc:	bd10      	pop	{r4, pc}

08004cce <__swrite>:
 8004cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cd2:	461f      	mov	r7, r3
 8004cd4:	898b      	ldrh	r3, [r1, #12]
 8004cd6:	4605      	mov	r5, r0
 8004cd8:	05db      	lsls	r3, r3, #23
 8004cda:	460c      	mov	r4, r1
 8004cdc:	4616      	mov	r6, r2
 8004cde:	d505      	bpl.n	8004cec <__swrite+0x1e>
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ce8:	f000 f870 	bl	8004dcc <_lseek_r>
 8004cec:	89a3      	ldrh	r3, [r4, #12]
 8004cee:	4632      	mov	r2, r6
 8004cf0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cf4:	81a3      	strh	r3, [r4, #12]
 8004cf6:	4628      	mov	r0, r5
 8004cf8:	463b      	mov	r3, r7
 8004cfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d02:	f000 b817 	b.w	8004d34 <_write_r>

08004d06 <__sseek>:
 8004d06:	b510      	push	{r4, lr}
 8004d08:	460c      	mov	r4, r1
 8004d0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d0e:	f000 f85d 	bl	8004dcc <_lseek_r>
 8004d12:	1c43      	adds	r3, r0, #1
 8004d14:	89a3      	ldrh	r3, [r4, #12]
 8004d16:	bf15      	itete	ne
 8004d18:	6560      	strne	r0, [r4, #84]	; 0x54
 8004d1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004d1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004d22:	81a3      	strheq	r3, [r4, #12]
 8004d24:	bf18      	it	ne
 8004d26:	81a3      	strhne	r3, [r4, #12]
 8004d28:	bd10      	pop	{r4, pc}

08004d2a <__sclose>:
 8004d2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d2e:	f000 b81b 	b.w	8004d68 <_close_r>
	...

08004d34 <_write_r>:
 8004d34:	b538      	push	{r3, r4, r5, lr}
 8004d36:	4604      	mov	r4, r0
 8004d38:	4608      	mov	r0, r1
 8004d3a:	4611      	mov	r1, r2
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	4d05      	ldr	r5, [pc, #20]	; (8004d54 <_write_r+0x20>)
 8004d40:	602a      	str	r2, [r5, #0]
 8004d42:	461a      	mov	r2, r3
 8004d44:	f7fc ff62 	bl	8001c0c <_write>
 8004d48:	1c43      	adds	r3, r0, #1
 8004d4a:	d102      	bne.n	8004d52 <_write_r+0x1e>
 8004d4c:	682b      	ldr	r3, [r5, #0]
 8004d4e:	b103      	cbz	r3, 8004d52 <_write_r+0x1e>
 8004d50:	6023      	str	r3, [r4, #0]
 8004d52:	bd38      	pop	{r3, r4, r5, pc}
 8004d54:	2000121c 	.word	0x2000121c

08004d58 <abort>:
 8004d58:	2006      	movs	r0, #6
 8004d5a:	b508      	push	{r3, lr}
 8004d5c:	f000 f89c 	bl	8004e98 <raise>
 8004d60:	2001      	movs	r0, #1
 8004d62:	f7fc ff2c 	bl	8001bbe <_exit>
	...

08004d68 <_close_r>:
 8004d68:	b538      	push	{r3, r4, r5, lr}
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	4d05      	ldr	r5, [pc, #20]	; (8004d84 <_close_r+0x1c>)
 8004d6e:	4604      	mov	r4, r0
 8004d70:	4608      	mov	r0, r1
 8004d72:	602b      	str	r3, [r5, #0]
 8004d74:	f7fc ff66 	bl	8001c44 <_close>
 8004d78:	1c43      	adds	r3, r0, #1
 8004d7a:	d102      	bne.n	8004d82 <_close_r+0x1a>
 8004d7c:	682b      	ldr	r3, [r5, #0]
 8004d7e:	b103      	cbz	r3, 8004d82 <_close_r+0x1a>
 8004d80:	6023      	str	r3, [r4, #0]
 8004d82:	bd38      	pop	{r3, r4, r5, pc}
 8004d84:	2000121c 	.word	0x2000121c

08004d88 <_fstat_r>:
 8004d88:	b538      	push	{r3, r4, r5, lr}
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	4d06      	ldr	r5, [pc, #24]	; (8004da8 <_fstat_r+0x20>)
 8004d8e:	4604      	mov	r4, r0
 8004d90:	4608      	mov	r0, r1
 8004d92:	4611      	mov	r1, r2
 8004d94:	602b      	str	r3, [r5, #0]
 8004d96:	f7fc ff60 	bl	8001c5a <_fstat>
 8004d9a:	1c43      	adds	r3, r0, #1
 8004d9c:	d102      	bne.n	8004da4 <_fstat_r+0x1c>
 8004d9e:	682b      	ldr	r3, [r5, #0]
 8004da0:	b103      	cbz	r3, 8004da4 <_fstat_r+0x1c>
 8004da2:	6023      	str	r3, [r4, #0]
 8004da4:	bd38      	pop	{r3, r4, r5, pc}
 8004da6:	bf00      	nop
 8004da8:	2000121c 	.word	0x2000121c

08004dac <_isatty_r>:
 8004dac:	b538      	push	{r3, r4, r5, lr}
 8004dae:	2300      	movs	r3, #0
 8004db0:	4d05      	ldr	r5, [pc, #20]	; (8004dc8 <_isatty_r+0x1c>)
 8004db2:	4604      	mov	r4, r0
 8004db4:	4608      	mov	r0, r1
 8004db6:	602b      	str	r3, [r5, #0]
 8004db8:	f7fc ff5e 	bl	8001c78 <_isatty>
 8004dbc:	1c43      	adds	r3, r0, #1
 8004dbe:	d102      	bne.n	8004dc6 <_isatty_r+0x1a>
 8004dc0:	682b      	ldr	r3, [r5, #0]
 8004dc2:	b103      	cbz	r3, 8004dc6 <_isatty_r+0x1a>
 8004dc4:	6023      	str	r3, [r4, #0]
 8004dc6:	bd38      	pop	{r3, r4, r5, pc}
 8004dc8:	2000121c 	.word	0x2000121c

08004dcc <_lseek_r>:
 8004dcc:	b538      	push	{r3, r4, r5, lr}
 8004dce:	4604      	mov	r4, r0
 8004dd0:	4608      	mov	r0, r1
 8004dd2:	4611      	mov	r1, r2
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	4d05      	ldr	r5, [pc, #20]	; (8004dec <_lseek_r+0x20>)
 8004dd8:	602a      	str	r2, [r5, #0]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	f7fc ff56 	bl	8001c8c <_lseek>
 8004de0:	1c43      	adds	r3, r0, #1
 8004de2:	d102      	bne.n	8004dea <_lseek_r+0x1e>
 8004de4:	682b      	ldr	r3, [r5, #0]
 8004de6:	b103      	cbz	r3, 8004dea <_lseek_r+0x1e>
 8004de8:	6023      	str	r3, [r4, #0]
 8004dea:	bd38      	pop	{r3, r4, r5, pc}
 8004dec:	2000121c 	.word	0x2000121c

08004df0 <memchr>:
 8004df0:	4603      	mov	r3, r0
 8004df2:	b510      	push	{r4, lr}
 8004df4:	b2c9      	uxtb	r1, r1
 8004df6:	4402      	add	r2, r0
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	d101      	bne.n	8004e02 <memchr+0x12>
 8004dfe:	2000      	movs	r0, #0
 8004e00:	e003      	b.n	8004e0a <memchr+0x1a>
 8004e02:	7804      	ldrb	r4, [r0, #0]
 8004e04:	3301      	adds	r3, #1
 8004e06:	428c      	cmp	r4, r1
 8004e08:	d1f6      	bne.n	8004df8 <memchr+0x8>
 8004e0a:	bd10      	pop	{r4, pc}

08004e0c <__malloc_lock>:
 8004e0c:	4801      	ldr	r0, [pc, #4]	; (8004e14 <__malloc_lock+0x8>)
 8004e0e:	f7ff bb04 	b.w	800441a <__retarget_lock_acquire_recursive>
 8004e12:	bf00      	nop
 8004e14:	20001210 	.word	0x20001210

08004e18 <__malloc_unlock>:
 8004e18:	4801      	ldr	r0, [pc, #4]	; (8004e20 <__malloc_unlock+0x8>)
 8004e1a:	f7ff baff 	b.w	800441c <__retarget_lock_release_recursive>
 8004e1e:	bf00      	nop
 8004e20:	20001210 	.word	0x20001210

08004e24 <_read_r>:
 8004e24:	b538      	push	{r3, r4, r5, lr}
 8004e26:	4604      	mov	r4, r0
 8004e28:	4608      	mov	r0, r1
 8004e2a:	4611      	mov	r1, r2
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	4d05      	ldr	r5, [pc, #20]	; (8004e44 <_read_r+0x20>)
 8004e30:	602a      	str	r2, [r5, #0]
 8004e32:	461a      	mov	r2, r3
 8004e34:	f7fc fecd 	bl	8001bd2 <_read>
 8004e38:	1c43      	adds	r3, r0, #1
 8004e3a:	d102      	bne.n	8004e42 <_read_r+0x1e>
 8004e3c:	682b      	ldr	r3, [r5, #0]
 8004e3e:	b103      	cbz	r3, 8004e42 <_read_r+0x1e>
 8004e40:	6023      	str	r3, [r4, #0]
 8004e42:	bd38      	pop	{r3, r4, r5, pc}
 8004e44:	2000121c 	.word	0x2000121c

08004e48 <_raise_r>:
 8004e48:	291f      	cmp	r1, #31
 8004e4a:	b538      	push	{r3, r4, r5, lr}
 8004e4c:	4604      	mov	r4, r0
 8004e4e:	460d      	mov	r5, r1
 8004e50:	d904      	bls.n	8004e5c <_raise_r+0x14>
 8004e52:	2316      	movs	r3, #22
 8004e54:	6003      	str	r3, [r0, #0]
 8004e56:	f04f 30ff 	mov.w	r0, #4294967295
 8004e5a:	bd38      	pop	{r3, r4, r5, pc}
 8004e5c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004e5e:	b112      	cbz	r2, 8004e66 <_raise_r+0x1e>
 8004e60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004e64:	b94b      	cbnz	r3, 8004e7a <_raise_r+0x32>
 8004e66:	4620      	mov	r0, r4
 8004e68:	f000 f830 	bl	8004ecc <_getpid_r>
 8004e6c:	462a      	mov	r2, r5
 8004e6e:	4601      	mov	r1, r0
 8004e70:	4620      	mov	r0, r4
 8004e72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e76:	f000 b817 	b.w	8004ea8 <_kill_r>
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d00a      	beq.n	8004e94 <_raise_r+0x4c>
 8004e7e:	1c59      	adds	r1, r3, #1
 8004e80:	d103      	bne.n	8004e8a <_raise_r+0x42>
 8004e82:	2316      	movs	r3, #22
 8004e84:	6003      	str	r3, [r0, #0]
 8004e86:	2001      	movs	r0, #1
 8004e88:	e7e7      	b.n	8004e5a <_raise_r+0x12>
 8004e8a:	2400      	movs	r4, #0
 8004e8c:	4628      	mov	r0, r5
 8004e8e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004e92:	4798      	blx	r3
 8004e94:	2000      	movs	r0, #0
 8004e96:	e7e0      	b.n	8004e5a <_raise_r+0x12>

08004e98 <raise>:
 8004e98:	4b02      	ldr	r3, [pc, #8]	; (8004ea4 <raise+0xc>)
 8004e9a:	4601      	mov	r1, r0
 8004e9c:	6818      	ldr	r0, [r3, #0]
 8004e9e:	f7ff bfd3 	b.w	8004e48 <_raise_r>
 8004ea2:	bf00      	nop
 8004ea4:	2000000c 	.word	0x2000000c

08004ea8 <_kill_r>:
 8004ea8:	b538      	push	{r3, r4, r5, lr}
 8004eaa:	2300      	movs	r3, #0
 8004eac:	4d06      	ldr	r5, [pc, #24]	; (8004ec8 <_kill_r+0x20>)
 8004eae:	4604      	mov	r4, r0
 8004eb0:	4608      	mov	r0, r1
 8004eb2:	4611      	mov	r1, r2
 8004eb4:	602b      	str	r3, [r5, #0]
 8004eb6:	f7fc fe72 	bl	8001b9e <_kill>
 8004eba:	1c43      	adds	r3, r0, #1
 8004ebc:	d102      	bne.n	8004ec4 <_kill_r+0x1c>
 8004ebe:	682b      	ldr	r3, [r5, #0]
 8004ec0:	b103      	cbz	r3, 8004ec4 <_kill_r+0x1c>
 8004ec2:	6023      	str	r3, [r4, #0]
 8004ec4:	bd38      	pop	{r3, r4, r5, pc}
 8004ec6:	bf00      	nop
 8004ec8:	2000121c 	.word	0x2000121c

08004ecc <_getpid_r>:
 8004ecc:	f7fc be60 	b.w	8001b90 <_getpid>

08004ed0 <_gettimeofday>:
 8004ed0:	2258      	movs	r2, #88	; 0x58
 8004ed2:	4b02      	ldr	r3, [pc, #8]	; (8004edc <_gettimeofday+0xc>)
 8004ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ed8:	601a      	str	r2, [r3, #0]
 8004eda:	4770      	bx	lr
 8004edc:	2000121c 	.word	0x2000121c

08004ee0 <_init>:
 8004ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ee2:	bf00      	nop
 8004ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ee6:	bc08      	pop	{r3}
 8004ee8:	469e      	mov	lr, r3
 8004eea:	4770      	bx	lr

08004eec <_fini>:
 8004eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eee:	bf00      	nop
 8004ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ef2:	bc08      	pop	{r3}
 8004ef4:	469e      	mov	lr, r3
 8004ef6:	4770      	bx	lr
