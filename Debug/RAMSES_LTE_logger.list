
RAMSES_LTE_logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062e4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000978  08006420  08006420  00016420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d98  08006d98  000205a0  2**0
                  CONTENTS
  4 .ARM          00000008  08006d98  08006d98  00016d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006da0  08006da0  000205a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006da0  08006da0  00016da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006da4  08006da4  00016da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005a0  20000000  08006da8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003700  200005a0  08007348  000205a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003ca0  08007348  00023ca0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000205a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bdf3  00000000  00000000  000205c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002079  00000000  00000000  0002c3bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000940  00000000  00000000  0002e438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000878  00000000  00000000  0002ed78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017314  00000000  00000000  0002f5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000badb  00000000  00000000  00046904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d307  00000000  00000000  000523df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000df6e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030e8  00000000  00000000  000df738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  000e2820  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000e2844  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200005a0 	.word	0x200005a0
 8000158:	00000000 	.word	0x00000000
 800015c:	08006408 	.word	0x08006408

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200005a4 	.word	0x200005a4
 8000178:	08006408 	.word	0x08006408

0800017c <strcmp>:
 800017c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000180:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000184:	2a01      	cmp	r2, #1
 8000186:	bf28      	it	cs
 8000188:	429a      	cmpcs	r2, r3
 800018a:	d0f7      	beq.n	800017c <strcmp>
 800018c:	1ad0      	subs	r0, r2, r3
 800018e:	4770      	bx	lr

08000190 <strlen>:
 8000190:	4603      	mov	r3, r0
 8000192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000196:	2a00      	cmp	r2, #0
 8000198:	d1fb      	bne.n	8000192 <strlen+0x2>
 800019a:	1a18      	subs	r0, r3, r0
 800019c:	3801      	subs	r0, #1
 800019e:	4770      	bx	lr

080001a0 <__aeabi_uldivmod>:
 80001a0:	b953      	cbnz	r3, 80001b8 <__aeabi_uldivmod+0x18>
 80001a2:	b94a      	cbnz	r2, 80001b8 <__aeabi_uldivmod+0x18>
 80001a4:	2900      	cmp	r1, #0
 80001a6:	bf08      	it	eq
 80001a8:	2800      	cmpeq	r0, #0
 80001aa:	bf1c      	itt	ne
 80001ac:	f04f 31ff 	movne.w	r1, #4294967295
 80001b0:	f04f 30ff 	movne.w	r0, #4294967295
 80001b4:	f000 b976 	b.w	80004a4 <__aeabi_idiv0>
 80001b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001c0:	f000 f806 	bl	80001d0 <__udivmoddi4>
 80001c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001cc:	b004      	add	sp, #16
 80001ce:	4770      	bx	lr

080001d0 <__udivmoddi4>:
 80001d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001d4:	9e08      	ldr	r6, [sp, #32]
 80001d6:	460d      	mov	r5, r1
 80001d8:	4604      	mov	r4, r0
 80001da:	4688      	mov	r8, r1
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d14d      	bne.n	800027c <__udivmoddi4+0xac>
 80001e0:	428a      	cmp	r2, r1
 80001e2:	4694      	mov	ip, r2
 80001e4:	d968      	bls.n	80002b8 <__udivmoddi4+0xe8>
 80001e6:	fab2 f282 	clz	r2, r2
 80001ea:	b152      	cbz	r2, 8000202 <__udivmoddi4+0x32>
 80001ec:	fa01 f302 	lsl.w	r3, r1, r2
 80001f0:	f1c2 0120 	rsb	r1, r2, #32
 80001f4:	fa20 f101 	lsr.w	r1, r0, r1
 80001f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80001fc:	ea41 0803 	orr.w	r8, r1, r3
 8000200:	4094      	lsls	r4, r2
 8000202:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000206:	fbb8 f7f1 	udiv	r7, r8, r1
 800020a:	fa1f fe8c 	uxth.w	lr, ip
 800020e:	fb01 8817 	mls	r8, r1, r7, r8
 8000212:	fb07 f00e 	mul.w	r0, r7, lr
 8000216:	0c23      	lsrs	r3, r4, #16
 8000218:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800021c:	4298      	cmp	r0, r3
 800021e:	d90a      	bls.n	8000236 <__udivmoddi4+0x66>
 8000220:	eb1c 0303 	adds.w	r3, ip, r3
 8000224:	f107 35ff 	add.w	r5, r7, #4294967295
 8000228:	f080 811e 	bcs.w	8000468 <__udivmoddi4+0x298>
 800022c:	4298      	cmp	r0, r3
 800022e:	f240 811b 	bls.w	8000468 <__udivmoddi4+0x298>
 8000232:	3f02      	subs	r7, #2
 8000234:	4463      	add	r3, ip
 8000236:	1a1b      	subs	r3, r3, r0
 8000238:	fbb3 f0f1 	udiv	r0, r3, r1
 800023c:	fb01 3310 	mls	r3, r1, r0, r3
 8000240:	fb00 fe0e 	mul.w	lr, r0, lr
 8000244:	b2a4      	uxth	r4, r4
 8000246:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800024a:	45a6      	cmp	lr, r4
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x94>
 800024e:	eb1c 0404 	adds.w	r4, ip, r4
 8000252:	f100 33ff 	add.w	r3, r0, #4294967295
 8000256:	f080 8109 	bcs.w	800046c <__udivmoddi4+0x29c>
 800025a:	45a6      	cmp	lr, r4
 800025c:	f240 8106 	bls.w	800046c <__udivmoddi4+0x29c>
 8000260:	4464      	add	r4, ip
 8000262:	3802      	subs	r0, #2
 8000264:	2100      	movs	r1, #0
 8000266:	eba4 040e 	sub.w	r4, r4, lr
 800026a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800026e:	b11e      	cbz	r6, 8000278 <__udivmoddi4+0xa8>
 8000270:	2300      	movs	r3, #0
 8000272:	40d4      	lsrs	r4, r2
 8000274:	e9c6 4300 	strd	r4, r3, [r6]
 8000278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027c:	428b      	cmp	r3, r1
 800027e:	d908      	bls.n	8000292 <__udivmoddi4+0xc2>
 8000280:	2e00      	cmp	r6, #0
 8000282:	f000 80ee 	beq.w	8000462 <__udivmoddi4+0x292>
 8000286:	2100      	movs	r1, #0
 8000288:	e9c6 0500 	strd	r0, r5, [r6]
 800028c:	4608      	mov	r0, r1
 800028e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000292:	fab3 f183 	clz	r1, r3
 8000296:	2900      	cmp	r1, #0
 8000298:	d14a      	bne.n	8000330 <__udivmoddi4+0x160>
 800029a:	42ab      	cmp	r3, r5
 800029c:	d302      	bcc.n	80002a4 <__udivmoddi4+0xd4>
 800029e:	4282      	cmp	r2, r0
 80002a0:	f200 80fc 	bhi.w	800049c <__udivmoddi4+0x2cc>
 80002a4:	1a84      	subs	r4, r0, r2
 80002a6:	eb65 0303 	sbc.w	r3, r5, r3
 80002aa:	2001      	movs	r0, #1
 80002ac:	4698      	mov	r8, r3
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	d0e2      	beq.n	8000278 <__udivmoddi4+0xa8>
 80002b2:	e9c6 4800 	strd	r4, r8, [r6]
 80002b6:	e7df      	b.n	8000278 <__udivmoddi4+0xa8>
 80002b8:	b902      	cbnz	r2, 80002bc <__udivmoddi4+0xec>
 80002ba:	deff      	udf	#255	; 0xff
 80002bc:	fab2 f282 	clz	r2, r2
 80002c0:	2a00      	cmp	r2, #0
 80002c2:	f040 8091 	bne.w	80003e8 <__udivmoddi4+0x218>
 80002c6:	eba1 000c 	sub.w	r0, r1, ip
 80002ca:	2101      	movs	r1, #1
 80002cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d0:	fa1f fe8c 	uxth.w	lr, ip
 80002d4:	fbb0 f3f7 	udiv	r3, r0, r7
 80002d8:	fb07 0013 	mls	r0, r7, r3, r0
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002e2:	fb0e f003 	mul.w	r0, lr, r3
 80002e6:	42a8      	cmp	r0, r5
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0x12c>
 80002ea:	eb1c 0505 	adds.w	r5, ip, r5
 80002ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x12a>
 80002f4:	42a8      	cmp	r0, r5
 80002f6:	f200 80ce 	bhi.w	8000496 <__udivmoddi4+0x2c6>
 80002fa:	4643      	mov	r3, r8
 80002fc:	1a2d      	subs	r5, r5, r0
 80002fe:	fbb5 f0f7 	udiv	r0, r5, r7
 8000302:	fb07 5510 	mls	r5, r7, r0, r5
 8000306:	fb0e fe00 	mul.w	lr, lr, r0
 800030a:	b2a4      	uxth	r4, r4
 800030c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000310:	45a6      	cmp	lr, r4
 8000312:	d908      	bls.n	8000326 <__udivmoddi4+0x156>
 8000314:	eb1c 0404 	adds.w	r4, ip, r4
 8000318:	f100 35ff 	add.w	r5, r0, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x154>
 800031e:	45a6      	cmp	lr, r4
 8000320:	f200 80b6 	bhi.w	8000490 <__udivmoddi4+0x2c0>
 8000324:	4628      	mov	r0, r5
 8000326:	eba4 040e 	sub.w	r4, r4, lr
 800032a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800032e:	e79e      	b.n	800026e <__udivmoddi4+0x9e>
 8000330:	f1c1 0720 	rsb	r7, r1, #32
 8000334:	408b      	lsls	r3, r1
 8000336:	fa22 fc07 	lsr.w	ip, r2, r7
 800033a:	ea4c 0c03 	orr.w	ip, ip, r3
 800033e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000342:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000346:	fbba f8f9 	udiv	r8, sl, r9
 800034a:	fa20 f307 	lsr.w	r3, r0, r7
 800034e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000352:	408d      	lsls	r5, r1
 8000354:	fa1f fe8c 	uxth.w	lr, ip
 8000358:	431d      	orrs	r5, r3
 800035a:	fa00 f301 	lsl.w	r3, r0, r1
 800035e:	fb08 f00e 	mul.w	r0, r8, lr
 8000362:	0c2c      	lsrs	r4, r5, #16
 8000364:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000368:	42a0      	cmp	r0, r4
 800036a:	fa02 f201 	lsl.w	r2, r2, r1
 800036e:	d90b      	bls.n	8000388 <__udivmoddi4+0x1b8>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f108 3aff 	add.w	sl, r8, #4294967295
 8000378:	f080 8088 	bcs.w	800048c <__udivmoddi4+0x2bc>
 800037c:	42a0      	cmp	r0, r4
 800037e:	f240 8085 	bls.w	800048c <__udivmoddi4+0x2bc>
 8000382:	f1a8 0802 	sub.w	r8, r8, #2
 8000386:	4464      	add	r4, ip
 8000388:	1a24      	subs	r4, r4, r0
 800038a:	fbb4 f0f9 	udiv	r0, r4, r9
 800038e:	fb09 4410 	mls	r4, r9, r0, r4
 8000392:	fb00 fe0e 	mul.w	lr, r0, lr
 8000396:	b2ad      	uxth	r5, r5
 8000398:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800039c:	45a6      	cmp	lr, r4
 800039e:	d908      	bls.n	80003b2 <__udivmoddi4+0x1e2>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f100 35ff 	add.w	r5, r0, #4294967295
 80003a8:	d26c      	bcs.n	8000484 <__udivmoddi4+0x2b4>
 80003aa:	45a6      	cmp	lr, r4
 80003ac:	d96a      	bls.n	8000484 <__udivmoddi4+0x2b4>
 80003ae:	3802      	subs	r0, #2
 80003b0:	4464      	add	r4, ip
 80003b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003b6:	fba0 9502 	umull	r9, r5, r0, r2
 80003ba:	eba4 040e 	sub.w	r4, r4, lr
 80003be:	42ac      	cmp	r4, r5
 80003c0:	46c8      	mov	r8, r9
 80003c2:	46ae      	mov	lr, r5
 80003c4:	d356      	bcc.n	8000474 <__udivmoddi4+0x2a4>
 80003c6:	d053      	beq.n	8000470 <__udivmoddi4+0x2a0>
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d069      	beq.n	80004a0 <__udivmoddi4+0x2d0>
 80003cc:	ebb3 0208 	subs.w	r2, r3, r8
 80003d0:	eb64 040e 	sbc.w	r4, r4, lr
 80003d4:	fa22 f301 	lsr.w	r3, r2, r1
 80003d8:	fa04 f707 	lsl.w	r7, r4, r7
 80003dc:	431f      	orrs	r7, r3
 80003de:	40cc      	lsrs	r4, r1
 80003e0:	e9c6 7400 	strd	r7, r4, [r6]
 80003e4:	2100      	movs	r1, #0
 80003e6:	e747      	b.n	8000278 <__udivmoddi4+0xa8>
 80003e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ec:	f1c2 0120 	rsb	r1, r2, #32
 80003f0:	fa25 f301 	lsr.w	r3, r5, r1
 80003f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f8:	fa20 f101 	lsr.w	r1, r0, r1
 80003fc:	4095      	lsls	r5, r2
 80003fe:	430d      	orrs	r5, r1
 8000400:	fbb3 f1f7 	udiv	r1, r3, r7
 8000404:	fb07 3311 	mls	r3, r7, r1, r3
 8000408:	fa1f fe8c 	uxth.w	lr, ip
 800040c:	0c28      	lsrs	r0, r5, #16
 800040e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000412:	fb01 f30e 	mul.w	r3, r1, lr
 8000416:	4283      	cmp	r3, r0
 8000418:	fa04 f402 	lsl.w	r4, r4, r2
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x260>
 800041e:	eb1c 0000 	adds.w	r0, ip, r0
 8000422:	f101 38ff 	add.w	r8, r1, #4294967295
 8000426:	d22f      	bcs.n	8000488 <__udivmoddi4+0x2b8>
 8000428:	4283      	cmp	r3, r0
 800042a:	d92d      	bls.n	8000488 <__udivmoddi4+0x2b8>
 800042c:	3902      	subs	r1, #2
 800042e:	4460      	add	r0, ip
 8000430:	1ac0      	subs	r0, r0, r3
 8000432:	fbb0 f3f7 	udiv	r3, r0, r7
 8000436:	fb07 0013 	mls	r0, r7, r3, r0
 800043a:	b2ad      	uxth	r5, r5
 800043c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000440:	fb03 f00e 	mul.w	r0, r3, lr
 8000444:	42a8      	cmp	r0, r5
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x28a>
 8000448:	eb1c 0505 	adds.w	r5, ip, r5
 800044c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000450:	d216      	bcs.n	8000480 <__udivmoddi4+0x2b0>
 8000452:	42a8      	cmp	r0, r5
 8000454:	d914      	bls.n	8000480 <__udivmoddi4+0x2b0>
 8000456:	3b02      	subs	r3, #2
 8000458:	4465      	add	r5, ip
 800045a:	1a28      	subs	r0, r5, r0
 800045c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000460:	e738      	b.n	80002d4 <__udivmoddi4+0x104>
 8000462:	4631      	mov	r1, r6
 8000464:	4630      	mov	r0, r6
 8000466:	e707      	b.n	8000278 <__udivmoddi4+0xa8>
 8000468:	462f      	mov	r7, r5
 800046a:	e6e4      	b.n	8000236 <__udivmoddi4+0x66>
 800046c:	4618      	mov	r0, r3
 800046e:	e6f9      	b.n	8000264 <__udivmoddi4+0x94>
 8000470:	454b      	cmp	r3, r9
 8000472:	d2a9      	bcs.n	80003c8 <__udivmoddi4+0x1f8>
 8000474:	ebb9 0802 	subs.w	r8, r9, r2
 8000478:	eb65 0e0c 	sbc.w	lr, r5, ip
 800047c:	3801      	subs	r0, #1
 800047e:	e7a3      	b.n	80003c8 <__udivmoddi4+0x1f8>
 8000480:	4643      	mov	r3, r8
 8000482:	e7ea      	b.n	800045a <__udivmoddi4+0x28a>
 8000484:	4628      	mov	r0, r5
 8000486:	e794      	b.n	80003b2 <__udivmoddi4+0x1e2>
 8000488:	4641      	mov	r1, r8
 800048a:	e7d1      	b.n	8000430 <__udivmoddi4+0x260>
 800048c:	46d0      	mov	r8, sl
 800048e:	e77b      	b.n	8000388 <__udivmoddi4+0x1b8>
 8000490:	4464      	add	r4, ip
 8000492:	3802      	subs	r0, #2
 8000494:	e747      	b.n	8000326 <__udivmoddi4+0x156>
 8000496:	3b02      	subs	r3, #2
 8000498:	4465      	add	r5, ip
 800049a:	e72f      	b.n	80002fc <__udivmoddi4+0x12c>
 800049c:	4608      	mov	r0, r1
 800049e:	e706      	b.n	80002ae <__udivmoddi4+0xde>
 80004a0:	4631      	mov	r1, r6
 80004a2:	e6e9      	b.n	8000278 <__udivmoddi4+0xa8>

080004a4 <__aeabi_idiv0>:
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop

080004a8 <UARTDMA_UartIrqHandler>:
#include "string.h"
#include "scheduler.h"


void UARTDMA_UartIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
	if(huartdma->huart->Instance->SR & UART_FLAG_IDLE)       // Check if Idle flag is set
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	f003 0310 	and.w	r3, r3, #16
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d01a      	beq.n	80004f6 <UARTDMA_UartIrqHandler+0x4e>
	{

		volatile uint32_t tmp;
		tmp = huartdma->huart->Instance->SR;                      // Read status register
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	60fb      	str	r3, [r7, #12]
		tmp = huartdma->huart->Instance->DR;                      // Read data register
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	685b      	ldr	r3, [r3, #4]
 80004d2:	60fb      	str	r3, [r7, #12]
		huartdma->huart->hdmarx->Instance->CCR &= ~DMA_CCR_EN; 	  // Disable DMA - it will force Transfer Complete interrupt if it's enabled
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	f022 0201 	bic.w	r2, r2, #1
 80004ea:	601a      	str	r2, [r3, #0]
																  // BUT! It's only for DMA Streams(i.e F4), not for Channels like there in F103!
		tmp = tmp; // For unused warning
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	60fb      	str	r3, [r7, #12]
		UARTDMA_DmaIrqHandler(huartdma); // Since DMA IRQ won't start independently for Channels, we have to handle it manually
 80004f0:	6878      	ldr	r0, [r7, #4]
 80004f2:	f000 f804 	bl	80004fe <UARTDMA_DmaIrqHandler>
	}
}
 80004f6:	bf00      	nop
 80004f8:	3710      	adds	r7, #16
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <UARTDMA_DmaIrqHandler>:

void UARTDMA_DmaIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 80004fe:	b480      	push	{r7}
 8000500:	b089      	sub	sp, #36	; 0x24
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
	{
		__IO uint32_t ISR;   // DMA interrupt status register
		__IO uint32_t IFCR;  // DMA interrupt flag clear register
	} DMA_Base_Registers;

	DMA_Base_Registers *DmaRegisters = (DMA_Base_Registers *) huartdma->huart->hdmarx->DmaBaseAddress; // Take registers base address
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800050c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800050e:	61bb      	str	r3, [r7, #24]

	if (__HAL_DMA_GET_IT_SOURCE(huartdma->huart->hdmarx, DMA_IT_TC) != RESET) // Check if interrupt source is Transfer Complete
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f003 0302 	and.w	r3, r3, #2
 800051e:	2b00      	cmp	r3, #0
 8000520:	d079      	beq.n	8000616 <UARTDMA_DmaIrqHandler+0x118>
	{
		DmaRegisters->IFCR = DMA_IFCR_CTCIF1 << huartdma->huart->hdmarx->ChannelIndex;	// Clear Transfer Complete flag
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052a:	2202      	movs	r2, #2
 800052c:	409a      	lsls	r2, r3
 800052e:	69bb      	ldr	r3, [r7, #24]
 8000530:	605a      	str	r2, [r3, #4]

		Length = DMA_RX_BUFFER_SIZE - huartdma->huart->hdmarx->Instance->CNDTR; // Get the Length of transfered data
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8000540:	617b      	str	r3, [r7, #20]

		UartBufferPointer = huartdma->UART_Buffer;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8000548:	613b      	str	r3, [r7, #16]
		DmaBufferPointer = 	huartdma->DMA_RX_Buffer;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	3304      	adds	r3, #4
 800054e:	60fb      	str	r3, [r7, #12]

		// Write received data for UART main buffer - circular buffer
		for(i = 0; i < Length; i++)
 8000550:	2300      	movs	r3, #0
 8000552:	83fb      	strh	r3, [r7, #30]
 8000554:	e035      	b.n	80005c2 <UARTDMA_DmaIrqHandler+0xc4>
		{
			TempHead = (huartdma->UartBufferHead + 1) % UART_BUFFER_SIZE;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	f8b3 3c04 	ldrh.w	r3, [r3, #3076]	; 0xc04
 800055c:	3301      	adds	r3, #1
 800055e:	425a      	negs	r2, r3
 8000560:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000564:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000568:	bf58      	it	pl
 800056a:	4253      	negpl	r3, r2
 800056c:	817b      	strh	r3, [r7, #10]
			if(TempHead == huartdma->UartBufferTail)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 8000574:	897a      	ldrh	r2, [r7, #10]
 8000576:	429a      	cmp	r2, r3
 8000578:	d106      	bne.n	8000588 <UARTDMA_DmaIrqHandler+0x8a>
			{
				huartdma->UartBufferHead = huartdma->UartBufferTail;	// No room for new data
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	f8b3 2c06 	ldrh.w	r2, [r3, #3078]	; 0xc06
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	f8a3 2c04 	strh.w	r2, [r3, #3076]	; 0xc04
 8000586:	e019      	b.n	80005bc <UARTDMA_DmaIrqHandler+0xbe>
			}
			else
			{
				UartBufferPointer[TempHead] = DmaBufferPointer[i];
 8000588:	8bfb      	ldrh	r3, [r7, #30]
 800058a:	68fa      	ldr	r2, [r7, #12]
 800058c:	441a      	add	r2, r3
 800058e:	897b      	ldrh	r3, [r7, #10]
 8000590:	6939      	ldr	r1, [r7, #16]
 8000592:	440b      	add	r3, r1
 8000594:	7812      	ldrb	r2, [r2, #0]
 8000596:	701a      	strb	r2, [r3, #0]
				if(UartBufferPointer[TempHead] == '\n')
 8000598:	897b      	ldrh	r3, [r7, #10]
 800059a:	693a      	ldr	r2, [r7, #16]
 800059c:	4413      	add	r3, r2
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b0a      	cmp	r3, #10
 80005a2:	d107      	bne.n	80005b4 <UARTDMA_DmaIrqHandler+0xb6>
				{
					huartdma->UartBufferLines++;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f893 3c08 	ldrb.w	r3, [r3, #3080]	; 0xc08
 80005aa:	3301      	adds	r3, #1
 80005ac:	b2da      	uxtb	r2, r3
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	f883 2c08 	strb.w	r2, [r3, #3080]	; 0xc08
				}
				huartdma->UartBufferHead = TempHead;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	897a      	ldrh	r2, [r7, #10]
 80005b8:	f8a3 2c04 	strh.w	r2, [r3, #3076]	; 0xc04
		for(i = 0; i < Length; i++)
 80005bc:	8bfb      	ldrh	r3, [r7, #30]
 80005be:	3301      	adds	r3, #1
 80005c0:	83fb      	strh	r3, [r7, #30]
 80005c2:	8bfb      	ldrh	r3, [r7, #30]
 80005c4:	697a      	ldr	r2, [r7, #20]
 80005c6:	429a      	cmp	r2, r3
 80005c8:	d8c5      	bhi.n	8000556 <UARTDMA_DmaIrqHandler+0x58>
			}
		}

		huartdma->UartTransferCompleted = 1;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2201      	movs	r2, #1
 80005ce:	f883 2c09 	strb.w	r2, [r3, #3081]	; 0xc09


		DmaRegisters->IFCR = 0x0FU << huartdma->huart->hdmarx->ChannelIndex; 		// Clear all interrupts
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005da:	220f      	movs	r2, #15
 80005dc:	409a      	lsls	r2, r3
 80005de:	69bb      	ldr	r3, [r7, #24]
 80005e0:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CMAR = (uint32_t) huartdma->DMA_RX_Buffer; // Set memory address for DMA again
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	1d1a      	adds	r2, r3, #4
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	60da      	str	r2, [r3, #12]
		huartdma->huart->hdmarx->Instance->CNDTR = DMA_RX_BUFFER_SIZE; // Set number of bytes to receive
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005fc:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CCR |= DMA_CCR_EN;            	// Start DMA transfer
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f042 0201 	orr.w	r2, r2, #1
 8000614:	601a      	str	r2, [r3, #0]
	}
}
 8000616:	bf00      	nop
 8000618:	3724      	adds	r7, #36	; 0x24
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr

08000620 <UARTDMA_GetCharFromBuffer>:

int UARTDMA_GetCharFromBuffer(UARTDMA_HandleTypeDef *huartdma)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	if(huartdma->UartBufferHead == huartdma->UartBufferTail)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	f8b3 2c04 	ldrh.w	r2, [r3, #3076]	; 0xc04
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 8000634:	429a      	cmp	r2, r3
 8000636:	d106      	bne.n	8000646 <UARTDMA_GetCharFromBuffer+0x26>
	{
		huartdma->UartTransferCompleted = 0;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	2200      	movs	r2, #0
 800063c:	f883 2c09 	strb.w	r2, [r3, #3081]	; 0xc09
		return -1; // error - no char to return
 8000640:	f04f 33ff 	mov.w	r3, #4294967295
 8000644:	e016      	b.n	8000674 <UARTDMA_GetCharFromBuffer+0x54>
	}
	huartdma->UartBufferTail = (huartdma->UartBufferTail + 1) % UART_BUFFER_SIZE;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 800064c:	3301      	adds	r3, #1
 800064e:	425a      	negs	r2, r3
 8000650:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000654:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000658:	bf58      	it	pl
 800065a:	4253      	negpl	r3, r2
 800065c:	b29a      	uxth	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	f8a3 2c06 	strh.w	r2, [r3, #3078]	; 0xc06

	return huartdma->UART_Buffer[huartdma->UartBufferTail];
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 800066a:	461a      	mov	r2, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4413      	add	r3, r2
 8000670:	f893 3404 	ldrb.w	r3, [r3, #1028]	; 0x404
}
 8000674:	4618      	mov	r0, r3
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	bc80      	pop	{r7}
 800067c:	4770      	bx	lr

0800067e <UARTDMA_IsDataReady>:

uint8_t UARTDMA_IsDataReady(UARTDMA_HandleTypeDef *huartdma)
{
 800067e:	b480      	push	{r7}
 8000680:	b083      	sub	sp, #12
 8000682:	af00      	add	r7, sp, #0
 8000684:	6078      	str	r0, [r7, #4]
	if(huartdma->UartBufferLines)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	f893 3c08 	ldrb.w	r3, [r3, #3080]	; 0xc08
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <UARTDMA_IsDataReady+0x16>
		return 1;
 8000690:	2301      	movs	r3, #1
 8000692:	e000      	b.n	8000696 <UARTDMA_IsDataReady+0x18>
	else
		return 0;
 8000694:	2300      	movs	r3, #0
}
 8000696:	4618      	mov	r0, r3
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr

080006a0 <UARTDMA_GetLineFromBuffer>:

int UARTDMA_GetLineFromBuffer(UARTDMA_HandleTypeDef *huartdma, char *OutBuffer)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	6039      	str	r1, [r7, #0]
	char TempChar;
	char* LinePointer = OutBuffer;
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	60fb      	str	r3, [r7, #12]
	if(huartdma->UartBufferLines)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	f893 3c08 	ldrb.w	r3, [r3, #3080]	; 0xc08
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d024      	beq.n	8000702 <UARTDMA_GetLineFromBuffer+0x62>
	{
		while((TempChar = UARTDMA_GetCharFromBuffer(huartdma)))
 80006b8:	e00e      	b.n	80006d8 <UARTDMA_GetLineFromBuffer+0x38>
		{
			if(TempChar == '\n')
 80006ba:	7afb      	ldrb	r3, [r7, #11]
 80006bc:	2b0a      	cmp	r3, #10
 80006be:	d014      	beq.n	80006ea <UARTDMA_GetLineFromBuffer+0x4a>
			{
				break;
			}
			if((TempChar != '\n') && (TempChar != '\r')){
 80006c0:	7afb      	ldrb	r3, [r7, #11]
 80006c2:	2b0a      	cmp	r3, #10
 80006c4:	d008      	beq.n	80006d8 <UARTDMA_GetLineFromBuffer+0x38>
 80006c6:	7afb      	ldrb	r3, [r7, #11]
 80006c8:	2b0d      	cmp	r3, #13
 80006ca:	d005      	beq.n	80006d8 <UARTDMA_GetLineFromBuffer+0x38>
				*LinePointer = TempChar;
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	7afa      	ldrb	r2, [r7, #11]
 80006d0:	701a      	strb	r2, [r3, #0]
				LinePointer++;
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	3301      	adds	r3, #1
 80006d6:	60fb      	str	r3, [r7, #12]
		while((TempChar = UARTDMA_GetCharFromBuffer(huartdma)))
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f7ff ffa1 	bl	8000620 <UARTDMA_GetCharFromBuffer>
 80006de:	4603      	mov	r3, r0
 80006e0:	72fb      	strb	r3, [r7, #11]
 80006e2:	7afb      	ldrb	r3, [r7, #11]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d1e8      	bne.n	80006ba <UARTDMA_GetLineFromBuffer+0x1a>
 80006e8:	e000      	b.n	80006ec <UARTDMA_GetLineFromBuffer+0x4c>
				break;
 80006ea:	bf00      	nop
			}
		}
		*LinePointer = 0; // end of cstring
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	2200      	movs	r2, #0
 80006f0:	701a      	strb	r2, [r3, #0]
		huartdma->UartBufferLines--; // decrement line counter
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	f893 3c08 	ldrb.w	r3, [r3, #3080]	; 0xc08
 80006f8:	3b01      	subs	r3, #1
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	f883 2c08 	strb.w	r2, [r3, #3080]	; 0xc08
	}
	return 0;
 8000702:	2300      	movs	r3, #0
}
 8000704:	4618      	mov	r0, r3
 8000706:	3710      	adds	r7, #16
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <UARTDMA_Init>:

void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
	huartdma->huart = huart;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	683a      	ldr	r2, [r7, #0]
 800071a:	601a      	str	r2, [r3, #0]

	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	68da      	ldr	r2, [r3, #12]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f042 0210 	orr.w	r2, r2, #16
 800072e:	60da      	str	r2, [r3, #12]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f042 0202 	orr.w	r2, r2, #2
 8000746:	601a      	str	r2, [r3, #0]

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	6818      	ldr	r0, [r3, #0]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	3304      	adds	r3, #4
 8000750:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000754:	4619      	mov	r1, r3
 8000756:	f004 f824 	bl	80047a2 <HAL_UART_Receive_DMA>

	huartdma->huart->hdmarx->Instance->CCR &= ~DMA_CCR_HTIE; // Disable DMA Half Complete interrupt
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f022 0204 	bic.w	r2, r2, #4
 8000770:	601a      	str	r2, [r3, #0]
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000784:	1d39      	adds	r1, r7, #4
 8000786:	f04f 33ff 	mov.w	r3, #4294967295
 800078a:	2201      	movs	r2, #1
 800078c:	4803      	ldr	r0, [pc, #12]	; (800079c <__io_putchar+0x20>)
 800078e:	f003 ff85 	bl	800469c <HAL_UART_Transmit>
	return ch;
 8000792:	687b      	ldr	r3, [r7, #4]
}
 8000794:	4618      	mov	r0, r3
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20002a34 	.word	0x20002a34

080007a0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80007a0:	b5b0      	push	{r4, r5, r7, lr}
 80007a2:	f5ad 5de9 	sub.w	sp, sp, #7456	; 0x1d20
 80007a6:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80007a8:	f002 fa1b 	bl	8002be2 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80007ac:	f001 fa90 	bl	8001cd0 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */

	srand(time(NULL));
 80007b0:	2000      	movs	r0, #0
 80007b2:	f004 fdb3 	bl	800531c <time>
 80007b6:	4602      	mov	r2, r0
 80007b8:	460b      	mov	r3, r1
 80007ba:	4613      	mov	r3, r2
 80007bc:	4618      	mov	r0, r3
 80007be:	f004 fc8d 	bl	80050dc <srand>

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80007c2:	f001 fc2b 	bl	800201c <MX_GPIO_Init>
	MX_DMA_Init();
 80007c6:	f001 fbfb 	bl	8001fc0 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80007ca:	f001 fba5 	bl	8001f18 <MX_USART2_UART_Init>
	MX_UART4_Init();
 80007ce:	f001 fb25 	bl	8001e1c <MX_UART4_Init>
	MX_USART1_UART_Init();
 80007d2:	f001 fb77 	bl	8001ec4 <MX_USART1_UART_Init>
	MX_USART3_UART_Init();
 80007d6:	f001 fbc9 	bl	8001f6c <MX_USART3_UART_Init>
	MX_ADC_Init();
 80007da:	f001 fac7 	bl	8001d6c <MX_ADC_Init>
	MX_UART5_Init();
 80007de:	f001 fb47 	bl	8001e70 <MX_UART5_Init>
	/* USER CODE BEGIN 2 */

	UARTDMA_Init(&hLTE_uart2dma6, &huart2); // receives LTE modem serial
 80007e2:	49d2      	ldr	r1, [pc, #840]	; (8000b2c <main+0x38c>)
 80007e4:	48d2      	ldr	r0, [pc, #840]	; (8000b30 <main+0x390>)
 80007e6:	f7ff ff91 	bl	800070c <UARTDMA_Init>
	UARTDMA_Init(&hRAM_1_uart1dma5, &huart1); // receives RAMSES 1 serial
 80007ea:	49d2      	ldr	r1, [pc, #840]	; (8000b34 <main+0x394>)
 80007ec:	48d2      	ldr	r0, [pc, #840]	; (8000b38 <main+0x398>)
 80007ee:	f7ff ff8d 	bl	800070c <UARTDMA_Init>
	UARTDMA_Init(&hRAM_2_uart3dma3, &huart3); // receives RAMSES 2 serial
 80007f2:	49d2      	ldr	r1, [pc, #840]	; (8000b3c <main+0x39c>)
 80007f4:	48d2      	ldr	r0, [pc, #840]	; (8000b40 <main+0x3a0>)
 80007f6:	f7ff ff89 	bl	800070c <UARTDMA_Init>

	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, SET);
 80007fa:	2201      	movs	r2, #1
 80007fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000800:	48d0      	ldr	r0, [pc, #832]	; (8000b44 <main+0x3a4>)
 8000802:	f003 f8d3 	bl	80039ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, SET);
 8000806:	2201      	movs	r2, #1
 8000808:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800080c:	48cd      	ldr	r0, [pc, #820]	; (8000b44 <main+0x3a4>)
 800080e:	f003 f8cd 	bl	80039ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, SET);
 8000812:	2201      	movs	r2, #1
 8000814:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000818:	48ca      	ldr	r0, [pc, #808]	; (8000b44 <main+0x3a4>)
 800081a:	f003 f8c7 	bl	80039ac <HAL_GPIO_WritePin>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */


	char random[20]; 				// create an initial file name, in case LTE won't get time fix
	itoa(rand(), random, 10);
 800081e:	f004 fc8b 	bl	8005138 <rand>
 8000822:	f507 53e6 	add.w	r3, r7, #7360	; 0x1cc0
 8000826:	f103 030c 	add.w	r3, r3, #12
 800082a:	220a      	movs	r2, #10
 800082c:	4619      	mov	r1, r3
 800082e:	f004 fbbd 	bl	8004fac <itoa>
	strcat((char*)g_fileName, random);
 8000832:	f507 53e6 	add.w	r3, r7, #7360	; 0x1cc0
 8000836:	f103 030c 	add.w	r3, r3, #12
 800083a:	4619      	mov	r1, r3
 800083c:	48c2      	ldr	r0, [pc, #776]	; (8000b48 <main+0x3a8>)
 800083e:	f004 fcb9 	bl	80051b4 <strcat>
	strcat((char*)g_fileName, ".txt\"\r\n");
 8000842:	48c1      	ldr	r0, [pc, #772]	; (8000b48 <main+0x3a8>)
 8000844:	f7ff fca4 	bl	8000190 <strlen>
 8000848:	4603      	mov	r3, r0
 800084a:	461a      	mov	r2, r3
 800084c:	4bbe      	ldr	r3, [pc, #760]	; (8000b48 <main+0x3a8>)
 800084e:	4413      	add	r3, r2
 8000850:	49be      	ldr	r1, [pc, #760]	; (8000b4c <main+0x3ac>)
 8000852:	461a      	mov	r2, r3
 8000854:	460b      	mov	r3, r1
 8000856:	cb03      	ldmia	r3!, {r0, r1}
 8000858:	6010      	str	r0, [r2, #0]
 800085a:	6051      	str	r1, [r2, #4]


	printf("\t\tFILE_RAND: %s\r\n", g_fileName);
 800085c:	49ba      	ldr	r1, [pc, #744]	; (8000b48 <main+0x3a8>)
 800085e:	48bc      	ldr	r0, [pc, #752]	; (8000b50 <main+0x3b0>)
 8000860:	f004 fbae 	bl	8004fc0 <iprintf>


	// query, sample, dataSize, data


	uint8_t current_action = 0; // currently executed action
 8000864:	2300      	movs	r3, #0
 8000866:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 800086a:	f102 020f 	add.w	r2, r2, #15
 800086e:	7013      	strb	r3, [r2, #0]

	uint8_t filename_time_set = 0; // flag to see if random file name was updated with LTE time
 8000870:	2300      	movs	r3, #0
 8000872:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 8000876:	f102 020e 	add.w	r2, r2, #14
 800087a:	7013      	strb	r3, [r2, #0]
	//uint8_t transfer_status = 0;

	command action_list[255]; // list of actions to perform


	uint8_t startup = 0; // flag to see if we just reset the processor to check LTE modem - if it is On or Off
 800087c:	2300      	movs	r3, #0
 800087e:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 8000882:	f102 020d 	add.w	r2, r2, #13
 8000886:	7013      	strb	r3, [r2, #0]

	int resolution = 0; // reduces amount of printf, helpful in case there's no delay between loops
 8000888:	2300      	movs	r3, #0
 800088a:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 800088e:	f102 0208 	add.w	r2, r2, #8
 8000892:	6013      	str	r3, [r2, #0]


	action_list[0] = LTE_sim_check_active;
 8000894:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000898:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 800089c:	4aad      	ldr	r2, [pc, #692]	; (8000b54 <main+0x3b4>)
 800089e:	461c      	mov	r4, r3
 80008a0:	4615      	mov	r5, r2
 80008a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[1] = LTE_disable_echo;
 80008ae:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 80008b2:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 80008b6:	4aa8      	ldr	r2, [pc, #672]	; (8000b58 <main+0x3b8>)
 80008b8:	f103 041c 	add.w	r4, r3, #28
 80008bc:	4615      	mov	r5, r2
 80008be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[2] = LTE_deactivate_gprs;
 80008ca:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 80008ce:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 80008d2:	4aa2      	ldr	r2, [pc, #648]	; (8000b5c <main+0x3bc>)
 80008d4:	f103 0438 	add.w	r4, r3, #56	; 0x38
 80008d8:	4615      	mov	r5, r2
 80008da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[3] = LTE_attach_gprs;
 80008e6:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 80008ea:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 80008ee:	4a9c      	ldr	r2, [pc, #624]	; (8000b60 <main+0x3c0>)
 80008f0:	f103 0454 	add.w	r4, r3, #84	; 0x54
 80008f4:	4615      	mov	r5, r2
 80008f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[4] = LTE_set_apn;
 8000902:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000906:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 800090a:	4a96      	ldr	r2, [pc, #600]	; (8000b64 <main+0x3c4>)
 800090c:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8000910:	4615      	mov	r5, r2
 8000912:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000914:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000916:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800091a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[5] = LTE_gprs_up;
 800091e:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000922:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000926:	4a90      	ldr	r2, [pc, #576]	; (8000b68 <main+0x3c8>)
 8000928:	f103 048c 	add.w	r4, r3, #140	; 0x8c
 800092c:	4615      	mov	r5, r2
 800092e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000930:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000932:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000936:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[6] = LTE_get_ip;
 800093a:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 800093e:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000942:	4a8a      	ldr	r2, [pc, #552]	; (8000b6c <main+0x3cc>)
 8000944:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8000948:	4615      	mov	r5, r2
 800094a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800094c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800094e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000952:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[7] = LTE_init_gps;
 8000956:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 800095a:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 800095e:	4a84      	ldr	r2, [pc, #528]	; (8000b70 <main+0x3d0>)
 8000960:	f103 04c4 	add.w	r4, r3, #196	; 0xc4
 8000964:	4615      	mov	r5, r2
 8000966:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000968:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800096a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800096e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[8] = LTE_reset_action;
 8000972:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000976:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 800097a:	4a7e      	ldr	r2, [pc, #504]	; (8000b74 <main+0x3d4>)
 800097c:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 8000980:	4615      	mov	r5, r2
 8000982:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000984:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000986:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800098a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[9] = LTE_bearer_1;
 800098e:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000992:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000996:	4a78      	ldr	r2, [pc, #480]	; (8000b78 <main+0x3d8>)
 8000998:	f103 04fc 	add.w	r4, r3, #252	; 0xfc
 800099c:	4615      	mov	r5, r2
 800099e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[10] = LTE_bearer_2;
 80009aa:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 80009ae:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 80009b2:	4a72      	ldr	r2, [pc, #456]	; (8000b7c <main+0x3dc>)
 80009b4:	f503 748c 	add.w	r4, r3, #280	; 0x118
 80009b8:	4615      	mov	r5, r2
 80009ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[11] = LTE_bearer_3;
 80009c6:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 80009ca:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 80009ce:	4a6c      	ldr	r2, [pc, #432]	; (8000b80 <main+0x3e0>)
 80009d0:	f503 749a 	add.w	r4, r3, #308	; 0x134
 80009d4:	4615      	mov	r5, r2
 80009d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[12] = LTE_set_dns;
 80009e2:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 80009e6:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 80009ea:	4a66      	ldr	r2, [pc, #408]	; (8000b84 <main+0x3e4>)
 80009ec:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 80009f0:	4615      	mov	r5, r2
 80009f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[13] = RAM_1_query;
 80009fe:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000a02:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000a06:	4a60      	ldr	r2, [pc, #384]	; (8000b88 <main+0x3e8>)
 8000a08:	f503 74b6 	add.w	r4, r3, #364	; 0x16c
 8000a0c:	4615      	mov	r5, r2
 8000a0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a12:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a16:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[14] = LTE_get_position;
 8000a1a:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000a1e:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000a22:	4a5a      	ldr	r2, [pc, #360]	; (8000b8c <main+0x3ec>)
 8000a24:	f503 74c4 	add.w	r4, r3, #392	; 0x188
 8000a28:	4615      	mov	r5, r2
 8000a2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a2e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a32:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[15] = RAM_2_query;
 8000a36:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000a3a:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000a3e:	4a54      	ldr	r2, [pc, #336]	; (8000b90 <main+0x3f0>)
 8000a40:	f503 74d2 	add.w	r4, r3, #420	; 0x1a4
 8000a44:	4615      	mov	r5, r2
 8000a46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a4a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[16] = LTE_get_time;
 8000a52:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000a56:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000a5a:	4a4e      	ldr	r2, [pc, #312]	; (8000b94 <main+0x3f4>)
 8000a5c:	f503 74e0 	add.w	r4, r3, #448	; 0x1c0
 8000a60:	4615      	mov	r5, r2
 8000a62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a66:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[17] = LTE_ftp_quit;
 8000a6e:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000a72:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000a76:	4a48      	ldr	r2, [pc, #288]	; (8000b98 <main+0x3f8>)
 8000a78:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 8000a7c:	4615      	mov	r5, r2
 8000a7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a82:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[18] = LTE_ftp_bearer;
 8000a8a:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000a8e:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000a92:	4a42      	ldr	r2, [pc, #264]	; (8000b9c <main+0x3fc>)
 8000a94:	f503 74fc 	add.w	r4, r3, #504	; 0x1f8
 8000a98:	4615      	mov	r5, r2
 8000a9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000aa2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[19] = LTE_ftp_type_binary;
 8000aa6:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000aaa:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000aae:	4a3c      	ldr	r2, [pc, #240]	; (8000ba0 <main+0x400>)
 8000ab0:	f503 7405 	add.w	r4, r3, #532	; 0x214
 8000ab4:	4615      	mov	r5, r2
 8000ab6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ab8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000abe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[20] = LTE_ftp_append;
 8000ac2:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000ac6:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000aca:	4a36      	ldr	r2, [pc, #216]	; (8000ba4 <main+0x404>)
 8000acc:	f503 740c 	add.w	r4, r3, #560	; 0x230
 8000ad0:	4615      	mov	r5, r2
 8000ad2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ad4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ad6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ada:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[21] = LTE_ftp_ip;
 8000ade:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000ae2:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000ae6:	4a30      	ldr	r2, [pc, #192]	; (8000ba8 <main+0x408>)
 8000ae8:	f503 7413 	add.w	r4, r3, #588	; 0x24c
 8000aec:	4615      	mov	r5, r2
 8000aee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000af0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000af2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000af6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[22] = LTE_ftp_user;
 8000afa:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000afe:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000b02:	4a2a      	ldr	r2, [pc, #168]	; (8000bac <main+0x40c>)
 8000b04:	f503 741a 	add.w	r4, r3, #616	; 0x268
 8000b08:	4615      	mov	r5, r2
 8000b0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b0e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[23] = LTE_ftp_pass;
 8000b16:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000b1a:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000b1e:	4a24      	ldr	r2, [pc, #144]	; (8000bb0 <main+0x410>)
 8000b20:	f503 7421 	add.w	r4, r3, #644	; 0x284
 8000b24:	4615      	mov	r5, r2
 8000b26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b28:	e044      	b.n	8000bb4 <main+0x414>
 8000b2a:	bf00      	nop
 8000b2c:	20002b0c 	.word	0x20002b0c
 8000b30:	200005bc 	.word	0x200005bc
 8000b34:	20002ac4 	.word	0x20002ac4
 8000b38:	200011c8 	.word	0x200011c8
 8000b3c:	20002b54 	.word	0x20002b54
 8000b40:	20001dd4 	.word	0x20001dd4
 8000b44:	40020400 	.word	0x40020400
 8000b48:	20000000 	.word	0x20000000
 8000b4c:	080066ec 	.word	0x080066ec
 8000b50:	080066f4 	.word	0x080066f4
 8000b54:	200000b4 	.word	0x200000b4
 8000b58:	200000d0 	.word	0x200000d0
 8000b5c:	200000ec 	.word	0x200000ec
 8000b60:	20000108 	.word	0x20000108
 8000b64:	20000124 	.word	0x20000124
 8000b68:	20000140 	.word	0x20000140
 8000b6c:	2000015c 	.word	0x2000015c
 8000b70:	20000178 	.word	0x20000178
 8000b74:	200003c4 	.word	0x200003c4
 8000b78:	200001cc 	.word	0x200001cc
 8000b7c:	200001e8 	.word	0x200001e8
 8000b80:	20000204 	.word	0x20000204
 8000b84:	20000220 	.word	0x20000220
 8000b88:	200003e0 	.word	0x200003e0
 8000b8c:	20000194 	.word	0x20000194
 8000b90:	20000418 	.word	0x20000418
 8000b94:	2000031c 	.word	0x2000031c
 8000b98:	200001b0 	.word	0x200001b0
 8000b9c:	2000023c 	.word	0x2000023c
 8000ba0:	20000258 	.word	0x20000258
 8000ba4:	20000274 	.word	0x20000274
 8000ba8:	20000290 	.word	0x20000290
 8000bac:	200002ac 	.word	0x200002ac
 8000bb0:	200002c8 	.word	0x200002c8
 8000bb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[24] = LTE_ftp_port;
 8000bbe:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000bc2:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000bc6:	4ad1      	ldr	r2, [pc, #836]	; (8000f0c <main+0x76c>)
 8000bc8:	f503 7428 	add.w	r4, r3, #672	; 0x2a0
 8000bcc:	4615      	mov	r5, r2
 8000bce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bd2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bd6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[25] = LTE_ftp_path;
 8000bda:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000bde:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000be2:	4acb      	ldr	r2, [pc, #812]	; (8000f10 <main+0x770>)
 8000be4:	f503 742f 	add.w	r4, r3, #700	; 0x2bc
 8000be8:	4615      	mov	r5, r2
 8000bea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bf2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[26] = LTE_ftp_filename;
 8000bf6:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000bfa:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000bfe:	4ac5      	ldr	r2, [pc, #788]	; (8000f14 <main+0x774>)
 8000c00:	f503 7436 	add.w	r4, r3, #728	; 0x2d8
 8000c04:	4615      	mov	r5, r2
 8000c06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c0a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[27] = LTE_ftp_start_put;
 8000c12:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000c16:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000c1a:	4abf      	ldr	r2, [pc, #764]	; (8000f18 <main+0x778>)
 8000c1c:	f503 743d 	add.w	r4, r3, #756	; 0x2f4
 8000c20:	4615      	mov	r5, r2
 8000c22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c26:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[28] = LTE_ftp_put_data_size;
 8000c2e:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000c32:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000c36:	4ab9      	ldr	r2, [pc, #740]	; (8000f1c <main+0x77c>)
 8000c38:	f503 7444 	add.w	r4, r3, #784	; 0x310
 8000c3c:	4615      	mov	r5, r2
 8000c3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c42:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[29] = LTE_ftp_put_data;
 8000c4a:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000c4e:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000c52:	4ab3      	ldr	r2, [pc, #716]	; (8000f20 <main+0x780>)
 8000c54:	f503 744b 	add.w	r4, r3, #812	; 0x32c
 8000c58:	4615      	mov	r5, r2
 8000c5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c5e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c62:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[30] = LTE_ftp_put_RAM_1_preamble_size;
 8000c66:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000c6a:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000c6e:	4aad      	ldr	r2, [pc, #692]	; (8000f24 <main+0x784>)
 8000c70:	f503 7452 	add.w	r4, r3, #840	; 0x348
 8000c74:	4615      	mov	r5, r2
 8000c76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c7a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[31] = LTE_ftp_put_RAM_1_preamble;
 8000c82:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000c86:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000c8a:	4aa7      	ldr	r2, [pc, #668]	; (8000f28 <main+0x788>)
 8000c8c:	f503 7459 	add.w	r4, r3, #868	; 0x364
 8000c90:	4615      	mov	r5, r2
 8000c92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c96:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[32] = LTE_ftp_put_RAM_1_data_size;
 8000c9e:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000ca2:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000ca6:	4aa1      	ldr	r2, [pc, #644]	; (8000f2c <main+0x78c>)
 8000ca8:	f503 7460 	add.w	r4, r3, #896	; 0x380
 8000cac:	4615      	mov	r5, r2
 8000cae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cb2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[33] = LTE_ftp_put_RAM_1_data;
 8000cba:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000cbe:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000cc2:	4a9b      	ldr	r2, [pc, #620]	; (8000f30 <main+0x790>)
 8000cc4:	f503 7467 	add.w	r4, r3, #924	; 0x39c
 8000cc8:	4615      	mov	r5, r2
 8000cca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ccc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[34] = LTE_ftp_put_RAM_2_preamble_size;
 8000cd6:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000cda:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000cde:	4a95      	ldr	r2, [pc, #596]	; (8000f34 <main+0x794>)
 8000ce0:	f503 746e 	add.w	r4, r3, #952	; 0x3b8
 8000ce4:	4615      	mov	r5, r2
 8000ce6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ce8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[35] = LTE_ftp_put_RAM_2_preamble;
 8000cf2:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000cf6:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000cfa:	4a8f      	ldr	r2, [pc, #572]	; (8000f38 <main+0x798>)
 8000cfc:	f503 7475 	add.w	r4, r3, #980	; 0x3d4
 8000d00:	4615      	mov	r5, r2
 8000d02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d06:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[36] = LTE_ftp_put_RAM_2_data_size;
 8000d0e:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000d12:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000d16:	4a89      	ldr	r2, [pc, #548]	; (8000f3c <main+0x79c>)
 8000d18:	f503 747c 	add.w	r4, r3, #1008	; 0x3f0
 8000d1c:	4615      	mov	r5, r2
 8000d1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d22:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[37] = LTE_ftp_put_RAM_2_data;
 8000d2a:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000d2e:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000d32:	4a83      	ldr	r2, [pc, #524]	; (8000f40 <main+0x7a0>)
 8000d34:	f203 440c 	addw	r4, r3, #1036	; 0x40c
 8000d38:	4615      	mov	r5, r2
 8000d3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d42:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[38] = LTE_ftp_end_put;
 8000d46:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000d4a:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000d4e:	4a7d      	ldr	r2, [pc, #500]	; (8000f44 <main+0x7a4>)
 8000d50:	f503 6485 	add.w	r4, r3, #1064	; 0x428
 8000d54:	4615      	mov	r5, r2
 8000d56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d5a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}


	action_list[39] = RAM_1_sample;
 8000d62:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000d66:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000d6a:	4a77      	ldr	r2, [pc, #476]	; (8000f48 <main+0x7a8>)
 8000d6c:	f203 4444 	addw	r4, r3, #1092	; 0x444
 8000d70:	4615      	mov	r5, r2
 8000d72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d76:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[40] = LTE_get_position;
 8000d7e:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000d82:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000d86:	4a71      	ldr	r2, [pc, #452]	; (8000f4c <main+0x7ac>)
 8000d88:	f503 648c 	add.w	r4, r3, #1120	; 0x460
 8000d8c:	4615      	mov	r5, r2
 8000d8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d92:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d96:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[41] = RAM_2_sample;
 8000d9a:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000d9e:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000da2:	4a6b      	ldr	r2, [pc, #428]	; (8000f50 <main+0x7b0>)
 8000da4:	f203 447c 	addw	r4, r3, #1148	; 0x47c
 8000da8:	4615      	mov	r5, r2
 8000daa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000db2:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[42] = LTE_get_time;
 8000db6:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000dba:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000dbe:	4a65      	ldr	r2, [pc, #404]	; (8000f54 <main+0x7b4>)
 8000dc0:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8000dc4:	4615      	mov	r5, r2
 8000dc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dce:	e884 0007 	stmia.w	r4, {r0, r1, r2}


	// sample loop cycle below


	action_list[43] = LTE_ftp_start_put;
 8000dd2:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000dd6:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000dda:	4a4f      	ldr	r2, [pc, #316]	; (8000f18 <main+0x778>)
 8000ddc:	f203 44b4 	addw	r4, r3, #1204	; 0x4b4
 8000de0:	4615      	mov	r5, r2
 8000de2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000de4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000de6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[44] = LTE_ftp_put_data_size;
 8000dee:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000df2:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000df6:	4a49      	ldr	r2, [pc, #292]	; (8000f1c <main+0x77c>)
 8000df8:	f503 649a 	add.w	r4, r3, #1232	; 0x4d0
 8000dfc:	4615      	mov	r5, r2
 8000dfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[45] = LTE_ftp_put_data;
 8000e0a:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000e0e:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000e12:	4a43      	ldr	r2, [pc, #268]	; (8000f20 <main+0x780>)
 8000e14:	f203 44ec 	addw	r4, r3, #1260	; 0x4ec
 8000e18:	4615      	mov	r5, r2
 8000e1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e1e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e22:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[46] = LTE_ftp_put_RAM_1_preamble_size;
 8000e26:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000e2a:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000e2e:	4a3d      	ldr	r2, [pc, #244]	; (8000f24 <main+0x784>)
 8000e30:	f503 64a1 	add.w	r4, r3, #1288	; 0x508
 8000e34:	4615      	mov	r5, r2
 8000e36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e3a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[47] = LTE_ftp_put_RAM_1_preamble;
 8000e42:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000e46:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000e4a:	4a37      	ldr	r2, [pc, #220]	; (8000f28 <main+0x788>)
 8000e4c:	f203 5424 	addw	r4, r3, #1316	; 0x524
 8000e50:	4615      	mov	r5, r2
 8000e52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e56:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[48] = LTE_ftp_put_RAM_1_data_size;
 8000e5e:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000e62:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000e66:	4a31      	ldr	r2, [pc, #196]	; (8000f2c <main+0x78c>)
 8000e68:	f503 64a8 	add.w	r4, r3, #1344	; 0x540
 8000e6c:	4615      	mov	r5, r2
 8000e6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e72:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[49] = LTE_ftp_put_RAM_1_data;
 8000e7a:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000e7e:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000e82:	4a2b      	ldr	r2, [pc, #172]	; (8000f30 <main+0x790>)
 8000e84:	f203 545c 	addw	r4, r3, #1372	; 0x55c
 8000e88:	4615      	mov	r5, r2
 8000e8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e8e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e92:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[50] = LTE_ftp_put_RAM_2_preamble_size;
 8000e96:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000e9a:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000e9e:	4a25      	ldr	r2, [pc, #148]	; (8000f34 <main+0x794>)
 8000ea0:	f503 64af 	add.w	r4, r3, #1400	; 0x578
 8000ea4:	4615      	mov	r5, r2
 8000ea6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ea8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eaa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000eae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[51] = LTE_ftp_put_RAM_2_preamble;
 8000eb2:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000eb6:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000eba:	4a1f      	ldr	r2, [pc, #124]	; (8000f38 <main+0x798>)
 8000ebc:	f203 5494 	addw	r4, r3, #1428	; 0x594
 8000ec0:	4615      	mov	r5, r2
 8000ec2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ec4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ec6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000eca:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[52] = LTE_ftp_put_RAM_2_data_size;
 8000ece:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000ed2:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000ed6:	4a19      	ldr	r2, [pc, #100]	; (8000f3c <main+0x79c>)
 8000ed8:	f503 64b6 	add.w	r4, r3, #1456	; 0x5b0
 8000edc:	4615      	mov	r5, r2
 8000ede:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ee0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ee2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ee6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[53] = LTE_ftp_put_RAM_2_data;
 8000eea:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000eee:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000ef2:	4a13      	ldr	r2, [pc, #76]	; (8000f40 <main+0x7a0>)
 8000ef4:	f203 54cc 	addw	r4, r3, #1484	; 0x5cc
 8000ef8:	4615      	mov	r5, r2
 8000efa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000efc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000efe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f02:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[54] = LTE_ftp_end_put;
 8000f06:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000f0a:	e025      	b.n	8000f58 <main+0x7b8>
 8000f0c:	200002e4 	.word	0x200002e4
 8000f10:	20000300 	.word	0x20000300
 8000f14:	20000338 	.word	0x20000338
 8000f18:	20000354 	.word	0x20000354
 8000f1c:	20000370 	.word	0x20000370
 8000f20:	2000038c 	.word	0x2000038c
 8000f24:	200004c0 	.word	0x200004c0
 8000f28:	200004dc 	.word	0x200004dc
 8000f2c:	20000450 	.word	0x20000450
 8000f30:	20000488 	.word	0x20000488
 8000f34:	200004f8 	.word	0x200004f8
 8000f38:	20000514 	.word	0x20000514
 8000f3c:	2000046c 	.word	0x2000046c
 8000f40:	200004a4 	.word	0x200004a4
 8000f44:	200003a8 	.word	0x200003a8
 8000f48:	200003fc 	.word	0x200003fc
 8000f4c:	20000194 	.word	0x20000194
 8000f50:	20000434 	.word	0x20000434
 8000f54:	2000031c 	.word	0x2000031c
 8000f58:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000f5c:	4ac9      	ldr	r2, [pc, #804]	; (8001284 <main+0xae4>)
 8000f5e:	f503 64bd 	add.w	r4, r3, #1512	; 0x5e8
 8000f62:	4615      	mov	r5, r2
 8000f64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f68:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	// get new data
	action_list[55] = RAM_1_sample; 				// list ends with request for new data. A new cycle should be triggered when both RAMSESEs sends data
 8000f70:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000f74:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000f78:	4ac3      	ldr	r2, [pc, #780]	; (8001288 <main+0xae8>)
 8000f7a:	f203 6404 	addw	r4, r3, #1540	; 0x604
 8000f7e:	4615      	mov	r5, r2
 8000f80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f84:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f88:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[56] = LTE_get_position;
 8000f8c:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000f90:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000f94:	4abd      	ldr	r2, [pc, #756]	; (800128c <main+0xaec>)
 8000f96:	f503 64c4 	add.w	r4, r3, #1568	; 0x620
 8000f9a:	4615      	mov	r5, r2
 8000f9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fa0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fa4:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[57] = RAM_2_sample;
 8000fa8:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000fac:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000fb0:	4ab7      	ldr	r2, [pc, #732]	; (8001290 <main+0xaf0>)
 8000fb2:	f203 643c 	addw	r4, r3, #1596	; 0x63c
 8000fb6:	4615      	mov	r5, r2
 8000fb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fbc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fc0:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[58] = LTE_get_time;
 8000fc4:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000fc8:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000fcc:	4ab1      	ldr	r2, [pc, #708]	; (8001294 <main+0xaf4>)
 8000fce:	f503 64cb 	add.w	r4, r3, #1624	; 0x658
 8000fd2:	4615      	mov	r5, r2
 8000fd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fd8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fdc:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[59] = LTE_reset_action;
 8000fe0:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000fe4:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000fe8:	4aab      	ldr	r2, [pc, #684]	; (8001298 <main+0xaf8>)
 8000fea:	f203 6474 	addw	r4, r3, #1652	; 0x674
 8000fee:	4615      	mov	r5, r2
 8000ff0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ff2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ff4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ff8:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	uint8_t last_action = 59; // number of the last action we want to execute
 8000ffc:	233b      	movs	r3, #59	; 0x3b
 8000ffe:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8001002:	f102 0213 	add.w	r2, r2, #19
 8001006:	7013      	strb	r3, [r2, #0]
	uint8_t cycle_start_action = 43; // number of the last action we want to execute
 8001008:	232b      	movs	r3, #43	; 0x2b
 800100a:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 800100e:	f102 0212 	add.w	r2, r2, #18
 8001012:	7013      	strb	r3, [r2, #0]


	//uint8_t ftp_transfer_active = 0;


	Clear_Array(g_LTE_ParseBuffer, BUFFER_SIZE); // let's start with clean LTE buffer
 8001014:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001018:	48a0      	ldr	r0, [pc, #640]	; (800129c <main+0xafc>)
 800101a:	f001 f8a9 	bl	8002170 <Clear_Array>


	hRAM_1_uart1dma5.UartTransferCompleted = 0;
 800101e:	4ba0      	ldr	r3, [pc, #640]	; (80012a0 <main+0xb00>)
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2c09 	strb.w	r2, [r3, #3081]	; 0xc09
	hRAM_2_uart3dma3.UartTransferCompleted = 0;
 8001026:	4b9f      	ldr	r3, [pc, #636]	; (80012a4 <main+0xb04>)
 8001028:	2200      	movs	r2, #0
 800102a:	f883 2c09 	strb.w	r2, [r3, #3081]	; 0xc09

	uint8_t ftp_flag = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 8001034:	f102 0207 	add.w	r2, r2, #7
 8001038:	7013      	strb	r3, [r2, #0]


	while (1)
	{

		if(current_action > last_action){ // wait with a cycle, until RAMSES data is ready
 800103a:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 800103e:	f103 030f 	add.w	r3, r3, #15
 8001042:	781a      	ldrb	r2, [r3, #0]
 8001044:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001048:	f103 0313 	add.w	r3, r3, #19
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	429a      	cmp	r2, r3
 8001050:	d921      	bls.n	8001096 <main+0x8f6>
			if(g_RAM_1_data_ready == 1 && g_RAM_2_data_ready == 1){
 8001052:	4b95      	ldr	r3, [pc, #596]	; (80012a8 <main+0xb08>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d10e      	bne.n	8001078 <main+0x8d8>
 800105a:	4b94      	ldr	r3, [pc, #592]	; (80012ac <main+0xb0c>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d10a      	bne.n	8001078 <main+0x8d8>
				current_action = cycle_start_action; // WARNING, the end of the list must trigger RAMSES measurements (or RAMSES timeout)
 8001062:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001066:	f103 0312 	add.w	r3, r3, #18
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 8001070:	f102 020f 	add.w	r2, r2, #15
 8001074:	7013      	strb	r3, [r2, #0]
 8001076:	e009      	b.n	800108c <main+0x8ec>
			}else{
				current_action = last_action;
 8001078:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 800107c:	f103 0313 	add.w	r3, r3, #19
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 8001086:	f102 020f 	add.w	r2, r2, #15
 800108a:	7013      	strb	r3, [r2, #0]
			}
			Clear_Array(g_LTE_ParseBuffer, BUFFER_SIZE);
 800108c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001090:	4882      	ldr	r0, [pc, #520]	; (800129c <main+0xafc>)
 8001092:	f001 f86d 	bl	8002170 <Clear_Array>
		}

		if(action_list[current_action].cmd == LTE_ftp_quit.cmd){ // ftp connection process starts, start blinking blue led.
 8001096:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 800109a:	f103 030f 	add.w	r3, r3, #15
 800109e:	781a      	ldrb	r2, [r3, #0]
 80010a0:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 80010a4:	f6a3 4128 	subw	r1, r3, #3112	; 0xc28
 80010a8:	4613      	mov	r3, r2
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	1a9b      	subs	r3, r3, r2
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	440b      	add	r3, r1
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b7e      	ldr	r3, [pc, #504]	; (80012b0 <main+0xb10>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d105      	bne.n	80010c8 <main+0x928>
			ftp_flag = 1;
 80010bc:	2301      	movs	r3, #1
 80010be:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 80010c2:	f102 0207 	add.w	r2, r2, #7
 80010c6:	7013      	strb	r3, [r2, #0]
		}

		if((resolution % 50) == 0){ // reducing UI speed
 80010c8:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 80010cc:	f103 0308 	add.w	r3, r3, #8
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	4b78      	ldr	r3, [pc, #480]	; (80012b4 <main+0xb14>)
 80010d4:	fb83 1302 	smull	r1, r3, r3, r2
 80010d8:	1119      	asrs	r1, r3, #4
 80010da:	17d3      	asrs	r3, r2, #31
 80010dc:	1acb      	subs	r3, r1, r3
 80010de:	2132      	movs	r1, #50	; 0x32
 80010e0:	fb01 f303 	mul.w	r3, r1, r3
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d114      	bne.n	8001114 <main+0x974>
			//printf("TRYING: >>%s<<\r\n", action_list[current_action].cmd);
			printf("TRYING: >>%d<<\r\n", current_action);
 80010ea:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 80010ee:	f103 030f 	add.w	r3, r3, #15
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	4619      	mov	r1, r3
 80010f6:	4870      	ldr	r0, [pc, #448]	; (80012b8 <main+0xb18>)
 80010f8:	f003 ff62 	bl	8004fc0 <iprintf>

			if(ftp_flag == 1){
 80010fc:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 8001100:	f103 0307 	add.w	r3, r3, #7
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d104      	bne.n	8001114 <main+0x974>
				HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin); //  ftp connection process starts, start blinking blue led.
 800110a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800110e:	486b      	ldr	r0, [pc, #428]	; (80012bc <main+0xb1c>)
 8001110:	f002 fc64 	bl	80039dc <HAL_GPIO_TogglePin>
			}
		}



		enum State state = Do_Action(action_list[current_action], g_LTE_ParseBuffer);
 8001114:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 8001118:	f103 030f 	add.w	r3, r3, #15
 800111c:	781a      	ldrb	r2, [r3, #0]
 800111e:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8001122:	f6a3 4128 	subw	r1, r3, #3112	; 0xc28
 8001126:	4613      	mov	r3, r2
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	1a9b      	subs	r3, r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	440b      	add	r3, r1
 8001130:	4a5a      	ldr	r2, [pc, #360]	; (800129c <main+0xafc>)
 8001132:	9203      	str	r2, [sp, #12]
 8001134:	466c      	mov	r4, sp
 8001136:	f103 0210 	add.w	r2, r3, #16
 800113a:	ca07      	ldmia	r2, {r0, r1, r2}
 800113c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001140:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001142:	f001 f90f 	bl	8002364 <Do_Action>
 8001146:	4603      	mov	r3, r0
 8001148:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 800114c:	f102 0211 	add.w	r2, r2, #17
 8001150:	7013      	strb	r3, [r2, #0]
		resolution++;
 8001152:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 8001156:	f103 0308 	add.w	r3, r3, #8
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	3301      	adds	r3, #1
 800115e:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 8001162:	f102 0208 	add.w	r2, r2, #8
 8001166:	6013      	str	r3, [r2, #0]

		//uint8_t query[] = { 0x23, 0x00, 0x00, 0x80, 0xB0, 0x00, 0x00, 0x01 };
		//uint8_t query[] = { 0x23, 0x00, 0x00, 0x00, 0xA8, 0x00, 0x81, 0x01 };

		switch (state){
 8001168:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 800116c:	f103 0311 	add.w	r3, r3, #17
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b05      	cmp	r3, #5
 8001174:	f200 81be 	bhi.w	80014f4 <main+0xd54>
 8001178:	a201      	add	r2, pc, #4	; (adr r2, 8001180 <main+0x9e0>)
 800117a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800117e:	bf00      	nop
 8001180:	0800125f 	.word	0x0800125f
 8001184:	080014f5 	.word	0x080014f5
 8001188:	08001199 	.word	0x08001199
 800118c:	0800140b 	.word	0x0800140b
 8001190:	080012c9 	.word	0x080012c9
 8001194:	080014f5 	.word	0x080014f5
		case GOOD_ANSWER:
			//HAL_UART_Transmit(&huart1, query, SAMPLE_CMD_SIZE, 500);
			//HAL_UART_Transmit(&huart3, sam, SAMPLE_CMD_SIZE, 500);


			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, SET); // Good answer - turn off yellow LED
 8001198:	2201      	movs	r2, #1
 800119a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800119e:	4847      	ldr	r0, [pc, #284]	; (80012bc <main+0xb1c>)
 80011a0:	f002 fc04 	bl	80039ac <HAL_GPIO_WritePin>

			if(action_list[current_action].cmd == LTE_ftp_put_data.cmd){
 80011a4:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 80011a8:	f103 030f 	add.w	r3, r3, #15
 80011ac:	781a      	ldrb	r2, [r3, #0]
 80011ae:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 80011b2:	f6a3 4128 	subw	r1, r3, #3112	; 0xc28
 80011b6:	4613      	mov	r3, r2
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	1a9b      	subs	r3, r3, r2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	440b      	add	r3, r1
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	4b3f      	ldr	r3, [pc, #252]	; (80012c0 <main+0xb20>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d10b      	bne.n	80011e2 <main+0xa42>
				HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011d0:	483a      	ldr	r0, [pc, #232]	; (80012bc <main+0xb1c>)
 80011d2:	f002 fbeb 	bl	80039ac <HAL_GPIO_WritePin>
				ftp_flag = 2;
 80011d6:	2302      	movs	r3, #2
 80011d8:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 80011dc:	f102 0207 	add.w	r2, r2, #7
 80011e0:	7013      	strb	r3, [r2, #0]
			}

			//printf("%s - %s\r\n", action_list[current_action].cmd, action_list[current_action].good_answer);
			printf("\tREPLY: >>%s<<\r\n", (char*)g_LTE_ParseBuffer);
 80011e2:	492e      	ldr	r1, [pc, #184]	; (800129c <main+0xafc>)
 80011e4:	4837      	ldr	r0, [pc, #220]	; (80012c4 <main+0xb24>)
 80011e6:	f003 feeb 	bl	8004fc0 <iprintf>

			// printf("\t\t\tTIME: >>%d<<\r\n", HAL_GetTick());

			Do_Action(LTE_reset_action, g_LTE_ParseBuffer);
 80011ea:	4b2b      	ldr	r3, [pc, #172]	; (8001298 <main+0xaf8>)
 80011ec:	4a2b      	ldr	r2, [pc, #172]	; (800129c <main+0xafc>)
 80011ee:	9203      	str	r2, [sp, #12]
 80011f0:	466c      	mov	r4, sp
 80011f2:	f103 0210 	add.w	r2, r3, #16
 80011f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80011f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80011fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011fe:	f001 f8b1 	bl	8002364 <Do_Action>
			current_action++;
 8001202:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 8001206:	f103 030f 	add.w	r3, r3, #15
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	3301      	adds	r3, #1
 800120e:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 8001212:	f102 020f 	add.w	r2, r2, #15
 8001216:	7013      	strb	r3, [r2, #0]
			HAL_Delay(action_list[current_action].timeout / 2);
 8001218:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 800121c:	f103 030f 	add.w	r3, r3, #15
 8001220:	781a      	ldrb	r2, [r3, #0]
 8001222:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8001226:	f6a3 4128 	subw	r1, r3, #3112	; 0xc28
 800122a:	4613      	mov	r3, r2
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	1a9b      	subs	r3, r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	440b      	add	r3, r1
 8001234:	330c      	adds	r3, #12
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	0fda      	lsrs	r2, r3, #31
 800123a:	4413      	add	r3, r2
 800123c:	105b      	asrs	r3, r3, #1
 800123e:	4618      	mov	r0, r3
 8001240:	f001 fd3e 	bl	8002cc0 <HAL_Delay>
			startup = 5;
 8001244:	2305      	movs	r3, #5
 8001246:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 800124a:	f102 020d 	add.w	r2, r2, #13
 800124e:	7013      	strb	r3, [r2, #0]
			resolution = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 8001256:	f102 0208 	add.w	r2, r2, #8
 800125a:	6013      	str	r3, [r2, #0]
			break;
 800125c:	e14b      	b.n	80014f6 <main+0xd56>
		case READY:
			//printf("%s - READY\r\n", action_list[current_action].cmd);
			//printf("BUFFER: >>%s<<\r\n", (char*)LTE_ParseBuffer);
			current_action++;
 800125e:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 8001262:	f103 030f 	add.w	r3, r3, #15
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	3301      	adds	r3, #1
 800126a:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 800126e:	f102 020f 	add.w	r2, r2, #15
 8001272:	7013      	strb	r3, [r2, #0]
			resolution = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 800127a:	f102 0208 	add.w	r2, r2, #8
 800127e:	6013      	str	r3, [r2, #0]
			break;
 8001280:	e139      	b.n	80014f6 <main+0xd56>
 8001282:	bf00      	nop
 8001284:	200003a8 	.word	0x200003a8
 8001288:	200003fc 	.word	0x200003fc
 800128c:	20000194 	.word	0x20000194
 8001290:	20000434 	.word	0x20000434
 8001294:	2000031c 	.word	0x2000031c
 8001298:	200003c4 	.word	0x200003c4
 800129c:	20002c68 	.word	0x20002c68
 80012a0:	200011c8 	.word	0x200011c8
 80012a4:	20001dd4 	.word	0x20001dd4
 80012a8:	2000386a 	.word	0x2000386a
 80012ac:	20003c76 	.word	0x20003c76
 80012b0:	200001b0 	.word	0x200001b0
 80012b4:	51eb851f 	.word	0x51eb851f
 80012b8:	08006708 	.word	0x08006708
 80012bc:	40020400 	.word	0x40020400
 80012c0:	2000038c 	.word	0x2000038c
 80012c4:	0800671c 	.word	0x0800671c
		case TIMEOUT:
			printf("%s - Timeout\r\n", action_list[current_action].cmd);
 80012c8:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 80012cc:	f103 030f 	add.w	r3, r3, #15
 80012d0:	781a      	ldrb	r2, [r3, #0]
 80012d2:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 80012d6:	f6a3 4128 	subw	r1, r3, #3112	; 0xc28
 80012da:	4613      	mov	r3, r2
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	1a9b      	subs	r3, r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	440b      	add	r3, r1
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4619      	mov	r1, r3
 80012e8:	488a      	ldr	r0, [pc, #552]	; (8001514 <main+0xd74>)
 80012ea:	f003 fe69 	bl	8004fc0 <iprintf>
			if(startup < 2){
 80012ee:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 80012f2:	f103 030d 	add.w	r3, r3, #13
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d822      	bhi.n	8001342 <main+0xba2>
				printf("INIT\r\n");
 80012fc:	4886      	ldr	r0, [pc, #536]	; (8001518 <main+0xd78>)
 80012fe:	f003 fee5 	bl	80050cc <puts>
				printf("TURN ON\r\n");
 8001302:	4886      	ldr	r0, [pc, #536]	; (800151c <main+0xd7c>)
 8001304:	f003 fee2 	bl	80050cc <puts>
				HAL_GPIO_WritePin(GPIOA,  GPIO_PIN_6, GPIO_PIN_SET);
 8001308:	2201      	movs	r2, #1
 800130a:	2140      	movs	r1, #64	; 0x40
 800130c:	4884      	ldr	r0, [pc, #528]	; (8001520 <main+0xd80>)
 800130e:	f002 fb4d 	bl	80039ac <HAL_GPIO_WritePin>
				HAL_Delay(1500);
 8001312:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001316:	f001 fcd3 	bl	8002cc0 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOA,  GPIO_PIN_6, GPIO_PIN_RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	2140      	movs	r1, #64	; 0x40
 800131e:	4880      	ldr	r0, [pc, #512]	; (8001520 <main+0xd80>)
 8001320:	f002 fb44 	bl	80039ac <HAL_GPIO_WritePin>
				HAL_Delay(5000);
 8001324:	f241 3088 	movw	r0, #5000	; 0x1388
 8001328:	f001 fcca 	bl	8002cc0 <HAL_Delay>
				startup++;
 800132c:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 8001330:	f103 030d 	add.w	r3, r3, #13
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	3301      	adds	r3, #1
 8001338:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 800133c:	f102 020d 	add.w	r2, r2, #13
 8001340:	7013      	strb	r3, [r2, #0]
			}

			if(action_list[current_action].cmd == LTE_ftp_put_data.cmd){ // turn off Blue LED, since ftp failed
 8001342:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 8001346:	f103 030f 	add.w	r3, r3, #15
 800134a:	781a      	ldrb	r2, [r3, #0]
 800134c:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8001350:	f6a3 4128 	subw	r1, r3, #3112	; 0xc28
 8001354:	4613      	mov	r3, r2
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	1a9b      	subs	r3, r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	440b      	add	r3, r1
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4b70      	ldr	r3, [pc, #448]	; (8001524 <main+0xd84>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	429a      	cmp	r2, r3
 8001366:	d10b      	bne.n	8001380 <main+0xbe0>
				HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, SET);
 8001368:	2201      	movs	r2, #1
 800136a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800136e:	486e      	ldr	r0, [pc, #440]	; (8001528 <main+0xd88>)
 8001370:	f002 fb1c 	bl	80039ac <HAL_GPIO_WritePin>
				ftp_flag = 3;
 8001374:	2303      	movs	r3, #3
 8001376:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 800137a:	f102 0207 	add.w	r2, r2, #7
 800137e:	7013      	strb	r3, [r2, #0]
			}


			Do_Action(LTE_reset_action, (uint8_t*)g_LTE_ParseBuffer);
 8001380:	4b6a      	ldr	r3, [pc, #424]	; (800152c <main+0xd8c>)
 8001382:	4a6b      	ldr	r2, [pc, #428]	; (8001530 <main+0xd90>)
 8001384:	9203      	str	r2, [sp, #12]
 8001386:	466c      	mov	r4, sp
 8001388:	f103 0210 	add.w	r2, r3, #16
 800138c:	ca07      	ldmia	r2, {r0, r1, r2}
 800138e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001392:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001394:	f000 ffe6 	bl	8002364 <Do_Action>

			if(action_list[current_action].cmd != LTE_sim_check_active.cmd){ // the sim active command can timeout, because modem is off by default
 8001398:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 800139c:	f103 030f 	add.w	r3, r3, #15
 80013a0:	781a      	ldrb	r2, [r3, #0]
 80013a2:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 80013a6:	f6a3 4128 	subw	r1, r3, #3112	; 0xc28
 80013aa:	4613      	mov	r3, r2
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	1a9b      	subs	r3, r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	440b      	add	r3, r1
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	4b5f      	ldr	r3, [pc, #380]	; (8001534 <main+0xd94>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d005      	beq.n	80013ca <main+0xc2a>
				HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, RESET); // TIMEOUT - turn on red LED
 80013be:	2200      	movs	r2, #0
 80013c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013c4:	4858      	ldr	r0, [pc, #352]	; (8001528 <main+0xd88>)
 80013c6:	f002 faf1 	bl	80039ac <HAL_GPIO_WritePin>
			}


			HAL_Delay(action_list[current_action].timeout);
 80013ca:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 80013ce:	f103 030f 	add.w	r3, r3, #15
 80013d2:	781a      	ldrb	r2, [r3, #0]
 80013d4:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 80013d8:	f6a3 4128 	subw	r1, r3, #3112	; 0xc28
 80013dc:	4613      	mov	r3, r2
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	1a9b      	subs	r3, r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	440b      	add	r3, r1
 80013e6:	330c      	adds	r3, #12
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f001 fc68 	bl	8002cc0 <HAL_Delay>
			current_action=0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 80013f6:	f102 020f 	add.w	r2, r2, #15
 80013fa:	7013      	strb	r3, [r2, #0]
			resolution = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 8001402:	f102 0208 	add.w	r2, r2, #8
 8001406:	6013      	str	r3, [r2, #0]
			break;
 8001408:	e075      	b.n	80014f6 <main+0xd56>
		case BAD_ANSWER:

			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, RESET); // Bad answer - turn on yellow LED
 800140a:	2200      	movs	r2, #0
 800140c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001410:	4845      	ldr	r0, [pc, #276]	; (8001528 <main+0xd88>)
 8001412:	f002 facb 	bl	80039ac <HAL_GPIO_WritePin>

			if(action_list[current_action].cmd == LTE_ftp_put_data.cmd){ // turn off Blue LED, since ftp failed
 8001416:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 800141a:	f103 030f 	add.w	r3, r3, #15
 800141e:	781a      	ldrb	r2, [r3, #0]
 8001420:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8001424:	f6a3 4128 	subw	r1, r3, #3112	; 0xc28
 8001428:	4613      	mov	r3, r2
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	1a9b      	subs	r3, r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	440b      	add	r3, r1
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	4b3b      	ldr	r3, [pc, #236]	; (8001524 <main+0xd84>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	429a      	cmp	r2, r3
 800143a:	d10b      	bne.n	8001454 <main+0xcb4>
				HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, SET);
 800143c:	2201      	movs	r2, #1
 800143e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001442:	4839      	ldr	r0, [pc, #228]	; (8001528 <main+0xd88>)
 8001444:	f002 fab2 	bl	80039ac <HAL_GPIO_WritePin>
				ftp_flag = 3;
 8001448:	2303      	movs	r3, #3
 800144a:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 800144e:	f102 0207 	add.w	r2, r2, #7
 8001452:	7013      	strb	r3, [r2, #0]
			}

			printf("%s - %s\r\n", action_list[current_action].cmd, action_list[current_action].bad_answer);
 8001454:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 8001458:	f103 030f 	add.w	r3, r3, #15
 800145c:	781a      	ldrb	r2, [r3, #0]
 800145e:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8001462:	f6a3 4128 	subw	r1, r3, #3112	; 0xc28
 8001466:	4613      	mov	r3, r2
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	1a9b      	subs	r3, r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	440b      	add	r3, r1
 8001470:	6818      	ldr	r0, [r3, #0]
 8001472:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 8001476:	f103 030f 	add.w	r3, r3, #15
 800147a:	781a      	ldrb	r2, [r3, #0]
 800147c:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8001480:	f6a3 4128 	subw	r1, r3, #3112	; 0xc28
 8001484:	4613      	mov	r3, r2
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	1a9b      	subs	r3, r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	440b      	add	r3, r1
 800148e:	3310      	adds	r3, #16
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	461a      	mov	r2, r3
 8001494:	4601      	mov	r1, r0
 8001496:	4828      	ldr	r0, [pc, #160]	; (8001538 <main+0xd98>)
 8001498:	f003 fd92 	bl	8004fc0 <iprintf>
			Do_Action(LTE_reset_action, (uint8_t*)g_LTE_ParseBuffer);
 800149c:	4b23      	ldr	r3, [pc, #140]	; (800152c <main+0xd8c>)
 800149e:	4a24      	ldr	r2, [pc, #144]	; (8001530 <main+0xd90>)
 80014a0:	9203      	str	r2, [sp, #12]
 80014a2:	466c      	mov	r4, sp
 80014a4:	f103 0210 	add.w	r2, r3, #16
 80014a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80014aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80014ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014b0:	f000 ff58 	bl	8002364 <Do_Action>
			HAL_Delay(action_list[current_action].timeout);
 80014b4:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 80014b8:	f103 030f 	add.w	r3, r3, #15
 80014bc:	781a      	ldrb	r2, [r3, #0]
 80014be:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 80014c2:	f6a3 4128 	subw	r1, r3, #3112	; 0xc28
 80014c6:	4613      	mov	r3, r2
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	1a9b      	subs	r3, r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	440b      	add	r3, r1
 80014d0:	330c      	adds	r3, #12
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f001 fbf3 	bl	8002cc0 <HAL_Delay>
			startup = 5;
 80014da:	2305      	movs	r3, #5
 80014dc:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 80014e0:	f102 020d 	add.w	r2, r2, #13
 80014e4:	7013      	strb	r3, [r2, #0]
			resolution = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 80014ec:	f102 0208 	add.w	r2, r2, #8
 80014f0:	6013      	str	r3, [r2, #0]
			break;
 80014f2:	e000      	b.n	80014f6 <main+0xd56>
		case FTP_ACTIVE:

			break;
		default:
			break;
 80014f4:	bf00      	nop
		};


		if(hRAM_1_uart1dma5.UartTransferCompleted == 1)
 80014f6:	4b11      	ldr	r3, [pc, #68]	; (800153c <main+0xd9c>)
 80014f8:	f893 3c09 	ldrb.w	r3, [r3, #3081]	; 0xc09
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	f040 80b6 	bne.w	800166e <main+0xece>
		{
			printf("\t\t\t\tRAMSES_1\r\n");
 8001502:	480f      	ldr	r0, [pc, #60]	; (8001540 <main+0xda0>)
 8001504:	f003 fde2 	bl	80050cc <puts>
			// remember about timeout


			int tmpByte;
			int count = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 800150e:	6013      	str	r3, [r2, #0]
			//uint8_t* LinePointer = g_RAM_1_data_latest;

			while((tmpByte = UARTDMA_GetCharFromBuffer(&hRAM_1_uart1dma5)) != -1){ // it use a feature that I read 8 bit data, so I can use 16bit negative to detect end of queue
 8001510:	e032      	b.n	8001578 <main+0xdd8>
 8001512:	bf00      	nop
 8001514:	08006730 	.word	0x08006730
 8001518:	08006740 	.word	0x08006740
 800151c:	08006748 	.word	0x08006748
 8001520:	40020000 	.word	0x40020000
 8001524:	2000038c 	.word	0x2000038c
 8001528:	40020400 	.word	0x40020400
 800152c:	200003c4 	.word	0x200003c4
 8001530:	20002c68 	.word	0x20002c68
 8001534:	200000b4 	.word	0x200000b4
 8001538:	08006754 	.word	0x08006754
 800153c:	200011c8 	.word	0x200011c8
 8001540:	08006760 	.word	0x08006760
				//	*LinePointer = (uint8_t) tmpByte;
				//	LinePointer++;
				//printf("\t\t\t\tRAMSES_1: >>%c<<\r\n", (char)tmpByte);
				printf("\t\t\t\t\tRAMSES_1: >>%d<<\r\n", count);
 8001544:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 8001548:	6819      	ldr	r1, [r3, #0]
 800154a:	4851      	ldr	r0, [pc, #324]	; (8001690 <main+0xef0>)
 800154c:	f003 fd38 	bl	8004fc0 <iprintf>
				g_RAM_1_data_latest[count]= (uint8_t)tmpByte;
 8001550:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001554:	f103 030c 	add.w	r3, r3, #12
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	b2d9      	uxtb	r1, r3
 800155c:	4a4d      	ldr	r2, [pc, #308]	; (8001694 <main+0xef4>)
 800155e:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4413      	add	r3, r2
 8001566:	460a      	mov	r2, r1
 8001568:	701a      	strb	r2, [r3, #0]
				count++;
 800156a:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	3301      	adds	r3, #1
 8001572:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 8001576:	6013      	str	r3, [r2, #0]
			while((tmpByte = UARTDMA_GetCharFromBuffer(&hRAM_1_uart1dma5)) != -1){ // it use a feature that I read 8 bit data, so I can use 16bit negative to detect end of queue
 8001578:	4847      	ldr	r0, [pc, #284]	; (8001698 <main+0xef8>)
 800157a:	f7ff f851 	bl	8000620 <UARTDMA_GetCharFromBuffer>
 800157e:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001582:	f103 030c 	add.w	r3, r3, #12
 8001586:	6018      	str	r0, [r3, #0]
 8001588:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 800158c:	f103 030c 	add.w	r3, r3, #12
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001596:	d1d5      	bne.n	8001544 <main+0xda4>
			}
			//g_RAM_1_data_latest[count]= '\0';
			printf("\t\t\t\tRAMSES_1: >>%d<<\r\n", count);
 8001598:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 800159c:	6819      	ldr	r1, [r3, #0]
 800159e:	483f      	ldr	r0, [pc, #252]	; (800169c <main+0xefc>)
 80015a0:	f003 fd0e 	bl	8004fc0 <iprintf>

			g_RAM_1_data_size = count;
 80015a4:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	4b3c      	ldr	r3, [pc, #240]	; (80016a0 <main+0xf00>)
 80015ae:	801a      	strh	r2, [r3, #0]

			char save[100] = "AT+FTPPUT=2,";
 80015b0:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 80015b4:	f5a3 6551 	sub.w	r5, r3, #3344	; 0xd10
 80015b8:	4b3a      	ldr	r3, [pc, #232]	; (80016a4 <main+0xf04>)
 80015ba:	462c      	mov	r4, r5
 80015bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015be:	c407      	stmia	r4!, {r0, r1, r2}
 80015c0:	7023      	strb	r3, [r4, #0]
 80015c2:	f105 030d 	add.w	r3, r5, #13
 80015c6:	2257      	movs	r2, #87	; 0x57
 80015c8:	2100      	movs	r1, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	f003 fcf0 	bl	8004fb0 <memset>
			char len[10];
			itoa(g_RAM_1_data_size, len, 10);
 80015d0:	4b33      	ldr	r3, [pc, #204]	; (80016a0 <main+0xf00>)
 80015d2:	881b      	ldrh	r3, [r3, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80015da:	3b14      	subs	r3, #20
 80015dc:	220a      	movs	r2, #10
 80015de:	4619      	mov	r1, r3
 80015e0:	f003 fce4 	bl	8004fac <itoa>
			strcat(save, len);
 80015e4:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80015e8:	3a14      	subs	r2, #20
 80015ea:	f107 0310 	add.w	r3, r7, #16
 80015ee:	3b10      	subs	r3, #16
 80015f0:	4611      	mov	r1, r2
 80015f2:	4618      	mov	r0, r3
 80015f4:	f003 fdde 	bl	80051b4 <strcat>
			strcat(save, "\r\n");
 80015f8:	f107 0310 	add.w	r3, r7, #16
 80015fc:	3b10      	subs	r3, #16
 80015fe:	4618      	mov	r0, r3
 8001600:	f7fe fdc6 	bl	8000190 <strlen>
 8001604:	4603      	mov	r3, r0
 8001606:	461a      	mov	r2, r3
 8001608:	f107 0310 	add.w	r3, r7, #16
 800160c:	3b10      	subs	r3, #16
 800160e:	4413      	add	r3, r2
 8001610:	4a25      	ldr	r2, [pc, #148]	; (80016a8 <main+0xf08>)
 8001612:	8811      	ldrh	r1, [r2, #0]
 8001614:	7892      	ldrb	r2, [r2, #2]
 8001616:	8019      	strh	r1, [r3, #0]
 8001618:	709a      	strb	r2, [r3, #2]

			strcpy((char*)g_RAM_1_dataSize, save);
 800161a:	f107 0310 	add.w	r3, r7, #16
 800161e:	3b10      	subs	r3, #16
 8001620:	4619      	mov	r1, r3
 8001622:	4822      	ldr	r0, [pc, #136]	; (80016ac <main+0xf0c>)
 8001624:	f003 fdd5 	bl	80051d2 <strcpy>

			char save2[100] = "+FTPPUT: 2,";
 8001628:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 800162c:	f6a3 43ac 	subw	r3, r3, #3244	; 0xcac
 8001630:	4a1f      	ldr	r2, [pc, #124]	; (80016b0 <main+0xf10>)
 8001632:	461c      	mov	r4, r3
 8001634:	ca07      	ldmia	r2, {r0, r1, r2}
 8001636:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800163a:	330c      	adds	r3, #12
 800163c:	2258      	movs	r2, #88	; 0x58
 800163e:	2100      	movs	r1, #0
 8001640:	4618      	mov	r0, r3
 8001642:	f003 fcb5 	bl	8004fb0 <memset>
			strcat(save2, len);
 8001646:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800164a:	3a14      	subs	r2, #20
 800164c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001650:	3b0c      	subs	r3, #12
 8001652:	4611      	mov	r1, r2
 8001654:	4618      	mov	r0, r3
 8001656:	f003 fdad 	bl	80051b4 <strcat>

			strcpy((char*)g_RAM_1_dataSizeResponse, save2);
 800165a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800165e:	3b0c      	subs	r3, #12
 8001660:	4619      	mov	r1, r3
 8001662:	4814      	ldr	r0, [pc, #80]	; (80016b4 <main+0xf14>)
 8001664:	f003 fdb5 	bl	80051d2 <strcpy>

			g_RAM_1_data_ready = 1;
 8001668:	4b13      	ldr	r3, [pc, #76]	; (80016b8 <main+0xf18>)
 800166a:	2201      	movs	r2, #1
 800166c:	701a      	strb	r2, [r3, #0]
		}

		if(hRAM_2_uart3dma3.UartTransferCompleted == 1)
 800166e:	4b13      	ldr	r3, [pc, #76]	; (80016bc <main+0xf1c>)
 8001670:	f893 3c09 	ldrb.w	r3, [r3, #3081]	; 0xc09
 8001674:	2b01      	cmp	r3, #1
 8001676:	f040 80c3 	bne.w	8001800 <main+0x1060>
		{
			printf("\t\t\t\tRAMSES_2\r\n");
 800167a:	4811      	ldr	r0, [pc, #68]	; (80016c0 <main+0xf20>)
 800167c:	f003 fd26 	bl	80050cc <puts>

			int tmpByte;
			int count = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8001686:	f102 021c 	add.w	r2, r2, #28
 800168a:	6013      	str	r3, [r2, #0]
			//uint8_t* LinePointer = g_RAM_1_data_latest;

			while((tmpByte = UARTDMA_GetCharFromBuffer(&hRAM_2_uart3dma3)) != -1){ // it use a feature that I read 8 bit data, so I can use 16bit negative to detect end of queue
 800168c:	e03c      	b.n	8001708 <main+0xf68>
 800168e:	bf00      	nop
 8001690:	08006770 	.word	0x08006770
 8001694:	20003468 	.word	0x20003468
 8001698:	200011c8 	.word	0x200011c8
 800169c:	08006788 	.word	0x08006788
 80016a0:	20003868 	.word	0x20003868
 80016a4:	0800691c 	.word	0x0800691c
 80016a8:	080067a0 	.word	0x080067a0
 80016ac:	20000064 	.word	0x20000064
 80016b0:	08006980 	.word	0x08006980
 80016b4:	20000078 	.word	0x20000078
 80016b8:	2000386a 	.word	0x2000386a
 80016bc:	20001dd4 	.word	0x20001dd4
 80016c0:	080067a4 	.word	0x080067a4
				//	*LinePointer = (uint8_t) tmpByte;
				//	LinePointer++;
				//printf("\t\t\t\tRAMSES_1: >>%c<<\r\n", (char)tmpByte);
				printf("\t\t\t\t\tRAMSES_2: >>%d<<\r\n", count);
 80016c4:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 80016c8:	f103 031c 	add.w	r3, r3, #28
 80016cc:	6819      	ldr	r1, [r3, #0]
 80016ce:	48a1      	ldr	r0, [pc, #644]	; (8001954 <main+0x11b4>)
 80016d0:	f003 fc76 	bl	8004fc0 <iprintf>
				g_RAM_2_data_latest[count]= (uint8_t)tmpByte;
 80016d4:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 80016d8:	f103 0308 	add.w	r3, r3, #8
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	b2d9      	uxtb	r1, r3
 80016e0:	4a9d      	ldr	r2, [pc, #628]	; (8001958 <main+0x11b8>)
 80016e2:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 80016e6:	f103 031c 	add.w	r3, r3, #28
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4413      	add	r3, r2
 80016ee:	460a      	mov	r2, r1
 80016f0:	701a      	strb	r2, [r3, #0]
				count++;
 80016f2:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 80016f6:	f103 031c 	add.w	r3, r3, #28
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	3301      	adds	r3, #1
 80016fe:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8001702:	f102 021c 	add.w	r2, r2, #28
 8001706:	6013      	str	r3, [r2, #0]
			while((tmpByte = UARTDMA_GetCharFromBuffer(&hRAM_2_uart3dma3)) != -1){ // it use a feature that I read 8 bit data, so I can use 16bit negative to detect end of queue
 8001708:	4894      	ldr	r0, [pc, #592]	; (800195c <main+0x11bc>)
 800170a:	f7fe ff89 	bl	8000620 <UARTDMA_GetCharFromBuffer>
 800170e:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001712:	f103 0308 	add.w	r3, r3, #8
 8001716:	6018      	str	r0, [r3, #0]
 8001718:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 800171c:	f103 0308 	add.w	r3, r3, #8
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001726:	d1cd      	bne.n	80016c4 <main+0xf24>
			}
			//g_RAM_1_data_latest[count]= '\0';
			printf("\t\t\t\tRAMSES_2: >>%d<<\r\n", count);
 8001728:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 800172c:	f103 031c 	add.w	r3, r3, #28
 8001730:	6819      	ldr	r1, [r3, #0]
 8001732:	488b      	ldr	r0, [pc, #556]	; (8001960 <main+0x11c0>)
 8001734:	f003 fc44 	bl	8004fc0 <iprintf>

			g_RAM_2_data_size = count;
 8001738:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 800173c:	f103 031c 	add.w	r3, r3, #28
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	b29a      	uxth	r2, r3
 8001744:	4b87      	ldr	r3, [pc, #540]	; (8001964 <main+0x11c4>)
 8001746:	801a      	strh	r2, [r3, #0]

			char save[100] = "AT+FTPPUT=2,";
 8001748:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 800174c:	f5a3 6551 	sub.w	r5, r3, #3344	; 0xd10
 8001750:	4b85      	ldr	r3, [pc, #532]	; (8001968 <main+0x11c8>)
 8001752:	462c      	mov	r4, r5
 8001754:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001756:	c407      	stmia	r4!, {r0, r1, r2}
 8001758:	7023      	strb	r3, [r4, #0]
 800175a:	f105 030d 	add.w	r3, r5, #13
 800175e:	2257      	movs	r2, #87	; 0x57
 8001760:	2100      	movs	r1, #0
 8001762:	4618      	mov	r0, r3
 8001764:	f003 fc24 	bl	8004fb0 <memset>
			char len[10];
			itoa(g_RAM_2_data_size, len, 10);
 8001768:	4b7e      	ldr	r3, [pc, #504]	; (8001964 <main+0x11c4>)
 800176a:	881b      	ldrh	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001772:	220a      	movs	r2, #10
 8001774:	4619      	mov	r1, r3
 8001776:	f003 fc19 	bl	8004fac <itoa>
			strcat(save, len);
 800177a:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800177e:	f107 0310 	add.w	r3, r7, #16
 8001782:	3b10      	subs	r3, #16
 8001784:	4611      	mov	r1, r2
 8001786:	4618      	mov	r0, r3
 8001788:	f003 fd14 	bl	80051b4 <strcat>
			strcat(save, "\r\n");
 800178c:	f107 0310 	add.w	r3, r7, #16
 8001790:	3b10      	subs	r3, #16
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe fcfc 	bl	8000190 <strlen>
 8001798:	4603      	mov	r3, r0
 800179a:	461a      	mov	r2, r3
 800179c:	f107 0310 	add.w	r3, r7, #16
 80017a0:	3b10      	subs	r3, #16
 80017a2:	4413      	add	r3, r2
 80017a4:	4a71      	ldr	r2, [pc, #452]	; (800196c <main+0x11cc>)
 80017a6:	8811      	ldrh	r1, [r2, #0]
 80017a8:	7892      	ldrb	r2, [r2, #2]
 80017aa:	8019      	strh	r1, [r3, #0]
 80017ac:	709a      	strb	r2, [r3, #2]

			strcpy((char*)g_RAM_2_dataSize, save);
 80017ae:	f107 0310 	add.w	r3, r7, #16
 80017b2:	3b10      	subs	r3, #16
 80017b4:	4619      	mov	r1, r3
 80017b6:	486e      	ldr	r0, [pc, #440]	; (8001970 <main+0x11d0>)
 80017b8:	f003 fd0b 	bl	80051d2 <strcpy>

			char save2[100] = "+FTPPUT: 2,";
 80017bc:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 80017c0:	f6a3 43ac 	subw	r3, r3, #3244	; 0xcac
 80017c4:	4a6b      	ldr	r2, [pc, #428]	; (8001974 <main+0x11d4>)
 80017c6:	461c      	mov	r4, r3
 80017c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80017ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80017ce:	330c      	adds	r3, #12
 80017d0:	2258      	movs	r2, #88	; 0x58
 80017d2:	2100      	movs	r1, #0
 80017d4:	4618      	mov	r0, r3
 80017d6:	f003 fbeb 	bl	8004fb0 <memset>
			strcat(save2, len);
 80017da:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80017de:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017e2:	3b0c      	subs	r3, #12
 80017e4:	4611      	mov	r1, r2
 80017e6:	4618      	mov	r0, r3
 80017e8:	f003 fce4 	bl	80051b4 <strcat>

			strcpy((char*)g_RAM_2_dataSizeResponse, save2);
 80017ec:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017f0:	3b0c      	subs	r3, #12
 80017f2:	4619      	mov	r1, r3
 80017f4:	4860      	ldr	r0, [pc, #384]	; (8001978 <main+0x11d8>)
 80017f6:	f003 fcec 	bl	80051d2 <strcpy>

			g_RAM_2_data_ready = 1;
 80017fa:	4b60      	ldr	r3, [pc, #384]	; (800197c <main+0x11dc>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	701a      	strb	r2, [r3, #0]

		}


		if(g_RAM_1_triggered == 1 && ((g_RAM_1_timer + RAMSES_TIMEOUT) < HAL_GetTick()) && g_RAM_1_data_ready == 0){
 8001800:	4b5f      	ldr	r3, [pc, #380]	; (8001980 <main+0x11e0>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d12b      	bne.n	8001860 <main+0x10c0>
 8001808:	4b5e      	ldr	r3, [pc, #376]	; (8001984 <main+0x11e4>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8001810:	3320      	adds	r3, #32
 8001812:	461c      	mov	r4, r3
 8001814:	f001 fa4a 	bl	8002cac <HAL_GetTick>
 8001818:	4603      	mov	r3, r0
 800181a:	429c      	cmp	r4, r3
 800181c:	d220      	bcs.n	8001860 <main+0x10c0>
 800181e:	4b5a      	ldr	r3, [pc, #360]	; (8001988 <main+0x11e8>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d11c      	bne.n	8001860 <main+0x10c0>
			// RAMSES timeout
			// if no response, report timeout
			printf("\t\t\t\tRAMSES_1 TIMEOUT\r\n");
 8001826:	4859      	ldr	r0, [pc, #356]	; (800198c <main+0x11ec>)
 8001828:	f003 fc50 	bl	80050cc <puts>
			strcpy((char*)g_RAM_1_data_latest, "#+RAM_1_TIMEOUT");
 800182c:	4a58      	ldr	r2, [pc, #352]	; (8001990 <main+0x11f0>)
 800182e:	4b59      	ldr	r3, [pc, #356]	; (8001994 <main+0x11f4>)
 8001830:	4614      	mov	r4, r2
 8001832:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001834:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			strcpy((char*)g_RAM_1_dataSize, "AT+FTPPUT=2,15\r\n");
 8001838:	4a57      	ldr	r2, [pc, #348]	; (8001998 <main+0x11f8>)
 800183a:	4b58      	ldr	r3, [pc, #352]	; (800199c <main+0x11fc>)
 800183c:	4614      	mov	r4, r2
 800183e:	461d      	mov	r5, r3
 8001840:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001842:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001844:	682b      	ldr	r3, [r5, #0]
 8001846:	7023      	strb	r3, [r4, #0]
			strcpy((char*)g_RAM_1_dataSizeResponse, "+FTPPUT: 2,15");
 8001848:	4a55      	ldr	r2, [pc, #340]	; (80019a0 <main+0x1200>)
 800184a:	4b56      	ldr	r3, [pc, #344]	; (80019a4 <main+0x1204>)
 800184c:	4614      	mov	r4, r2
 800184e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001850:	c407      	stmia	r4!, {r0, r1, r2}
 8001852:	8023      	strh	r3, [r4, #0]

			g_RAM_1_data_ready = 1;
 8001854:	4b4c      	ldr	r3, [pc, #304]	; (8001988 <main+0x11e8>)
 8001856:	2201      	movs	r2, #1
 8001858:	701a      	strb	r2, [r3, #0]
			g_RAM_1_triggered = 0;
 800185a:	4b49      	ldr	r3, [pc, #292]	; (8001980 <main+0x11e0>)
 800185c:	2200      	movs	r2, #0
 800185e:	701a      	strb	r2, [r3, #0]
		}

		if(g_RAM_2_triggered == 1 && ((g_RAM_2_timer + RAMSES_TIMEOUT) < HAL_GetTick()) && g_RAM_2_data_ready == 0){
 8001860:	4b51      	ldr	r3, [pc, #324]	; (80019a8 <main+0x1208>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d12b      	bne.n	80018c0 <main+0x1120>
 8001868:	4b50      	ldr	r3, [pc, #320]	; (80019ac <main+0x120c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8001870:	3320      	adds	r3, #32
 8001872:	461c      	mov	r4, r3
 8001874:	f001 fa1a 	bl	8002cac <HAL_GetTick>
 8001878:	4603      	mov	r3, r0
 800187a:	429c      	cmp	r4, r3
 800187c:	d220      	bcs.n	80018c0 <main+0x1120>
 800187e:	4b3f      	ldr	r3, [pc, #252]	; (800197c <main+0x11dc>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d11c      	bne.n	80018c0 <main+0x1120>
			// RAMSES timeout
			printf("\t\t\t\tRAMSES_2 TIMEOUT\r\n");
 8001886:	484a      	ldr	r0, [pc, #296]	; (80019b0 <main+0x1210>)
 8001888:	f003 fc20 	bl	80050cc <puts>

			strcpy((char*)g_RAM_2_data_latest, "#+RAM_2_TIMEOUT");
 800188c:	4a32      	ldr	r2, [pc, #200]	; (8001958 <main+0x11b8>)
 800188e:	4b49      	ldr	r3, [pc, #292]	; (80019b4 <main+0x1214>)
 8001890:	4614      	mov	r4, r2
 8001892:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001894:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			strcpy((char*)g_RAM_2_dataSize, "AT+FTPPUT=2,15\r\n");
 8001898:	4a35      	ldr	r2, [pc, #212]	; (8001970 <main+0x11d0>)
 800189a:	4b40      	ldr	r3, [pc, #256]	; (800199c <main+0x11fc>)
 800189c:	4614      	mov	r4, r2
 800189e:	461d      	mov	r5, r3
 80018a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018a4:	682b      	ldr	r3, [r5, #0]
 80018a6:	7023      	strb	r3, [r4, #0]
			strcpy((char*)g_RAM_2_dataSizeResponse, "+FTPPUT: 2,15");
 80018a8:	4a33      	ldr	r2, [pc, #204]	; (8001978 <main+0x11d8>)
 80018aa:	4b3e      	ldr	r3, [pc, #248]	; (80019a4 <main+0x1204>)
 80018ac:	4614      	mov	r4, r2
 80018ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018b0:	c407      	stmia	r4!, {r0, r1, r2}
 80018b2:	8023      	strh	r3, [r4, #0]

			g_RAM_2_data_ready = 1;
 80018b4:	4b31      	ldr	r3, [pc, #196]	; (800197c <main+0x11dc>)
 80018b6:	2201      	movs	r2, #1
 80018b8:	701a      	strb	r2, [r3, #0]
			g_RAM_2_triggered = 0;
 80018ba:	4b3b      	ldr	r3, [pc, #236]	; (80019a8 <main+0x1208>)
 80018bc:	2200      	movs	r2, #0
 80018be:	701a      	strb	r2, [r3, #0]
		}


		if(UARTDMA_IsDataReady(&hLTE_uart2dma6))
 80018c0:	483d      	ldr	r0, [pc, #244]	; (80019b8 <main+0x1218>)
 80018c2:	f7fe fedc 	bl	800067e <UARTDMA_IsDataReady>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f000 81da 	beq.w	8001c82 <main+0x14e2>
		{
			UARTDMA_GetLineFromBuffer(&hLTE_uart2dma6, (char*)g_LTE_ParseBuffer);
 80018ce:	493b      	ldr	r1, [pc, #236]	; (80019bc <main+0x121c>)
 80018d0:	4839      	ldr	r0, [pc, #228]	; (80019b8 <main+0x1218>)
 80018d2:	f7fe fee5 	bl	80006a0 <UARTDMA_GetLineFromBuffer>
			printf("\tBUFFER: >>%s<<\r\n", (char*)g_LTE_ParseBuffer);
 80018d6:	4939      	ldr	r1, [pc, #228]	; (80019bc <main+0x121c>)
 80018d8:	4839      	ldr	r0, [pc, #228]	; (80019c0 <main+0x1220>)
 80018da:	f003 fb71 	bl	8004fc0 <iprintf>

			// if message is time, update FTP filename
			char* ptr;
			if((ptr = strstr((char*)g_LTE_ParseBuffer, "+CCLK: ")) != NULL){
 80018de:	4939      	ldr	r1, [pc, #228]	; (80019c4 <main+0x1224>)
 80018e0:	4836      	ldr	r0, [pc, #216]	; (80019bc <main+0x121c>)
 80018e2:	f003 fc7e 	bl	80051e2 <strstr>
 80018e6:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 80018ea:	f103 0304 	add.w	r3, r3, #4
 80018ee:	6018      	str	r0, [r3, #0]
 80018f0:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 80018f4:	f103 0304 	add.w	r3, r3, #4
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 8154 	beq.w	8001ba8 <main+0x1408>
				printf("\t\tTIME: %s\r\n", (char*)g_LTE_ParseBuffer);
 8001900:	492e      	ldr	r1, [pc, #184]	; (80019bc <main+0x121c>)
 8001902:	4831      	ldr	r0, [pc, #196]	; (80019c8 <main+0x1228>)
 8001904:	f003 fb5c 	bl	8004fc0 <iprintf>

				strcat((char*)gps_data_latest,(char*)g_LTE_ParseBuffer); // append GPS data with LTE time
 8001908:	492c      	ldr	r1, [pc, #176]	; (80019bc <main+0x121c>)
 800190a:	4830      	ldr	r0, [pc, #192]	; (80019cc <main+0x122c>)
 800190c:	f003 fc52 	bl	80051b4 <strcat>
				//strcat(gps_data_latest,"\r\n");

				printf("GPS BUFFER AT TIME: %s\r\n", gps_data_latest);
 8001910:	492e      	ldr	r1, [pc, #184]	; (80019cc <main+0x122c>)
 8001912:	482f      	ldr	r0, [pc, #188]	; (80019d0 <main+0x1230>)
 8001914:	f003 fb54 	bl	8004fc0 <iprintf>

				if(filename_time_set == 0){ // it's the first time I receive, and I will set FTP file name based on it
 8001918:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 800191c:	f103 030e 	add.w	r3, r3, #14
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	f040 80dc 	bne.w	8001ae0 <main+0x1340>


					filename_time_set = 1; // do not repeat
 8001928:	2301      	movs	r3, #1
 800192a:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 800192e:	f102 020e 	add.w	r2, r2, #14
 8001932:	7013      	strb	r3, [r2, #0]

					char* timeString = ptr+8;
 8001934:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001938:	f103 0304 	add.w	r3, r3, #4
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	3308      	adds	r3, #8
 8001940:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8001944:	6013      	str	r3, [r2, #0]

					for (int i = 0; i < strlen(timeString); i++)
 8001946:	2300      	movs	r3, #0
 8001948:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 800194c:	f102 0218 	add.w	r2, r2, #24
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	e07f      	b.n	8001a54 <main+0x12b4>
 8001954:	080067b4 	.word	0x080067b4
 8001958:	20003874 	.word	0x20003874
 800195c:	20001dd4 	.word	0x20001dd4
 8001960:	080067cc 	.word	0x080067cc
 8001964:	20003c74 	.word	0x20003c74
 8001968:	0800691c 	.word	0x0800691c
 800196c:	080067a0 	.word	0x080067a0
 8001970:	2000008c 	.word	0x2000008c
 8001974:	08006980 	.word	0x08006980
 8001978:	200000a0 	.word	0x200000a0
 800197c:	20003c76 	.word	0x20003c76
 8001980:	20003870 	.word	0x20003870
 8001984:	2000386c 	.word	0x2000386c
 8001988:	2000386a 	.word	0x2000386a
 800198c:	080067e4 	.word	0x080067e4
 8001990:	20003468 	.word	0x20003468
 8001994:	080067fc 	.word	0x080067fc
 8001998:	20000064 	.word	0x20000064
 800199c:	0800680c 	.word	0x0800680c
 80019a0:	20000078 	.word	0x20000078
 80019a4:	08006820 	.word	0x08006820
 80019a8:	20003c7c 	.word	0x20003c7c
 80019ac:	20003c78 	.word	0x20003c78
 80019b0:	08006830 	.word	0x08006830
 80019b4:	08006848 	.word	0x08006848
 80019b8:	200005bc 	.word	0x200005bc
 80019bc:	20002c68 	.word	0x20002c68
 80019c0:	08006858 	.word	0x08006858
 80019c4:	0800686c 	.word	0x0800686c
 80019c8:	08006874 	.word	0x08006874
 80019cc:	20003068 	.word	0x20003068
 80019d0:	08006884 	.word	0x08006884
					{
						if ((timeString[i] > '9') || (timeString[i] < '0')){
 80019d4:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 80019d8:	f103 0318 	add.w	r3, r3, #24
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	4413      	add	r3, r2
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b39      	cmp	r3, #57	; 0x39
 80019ea:	d80b      	bhi.n	8001a04 <main+0x1264>
 80019ec:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 80019f0:	f103 0318 	add.w	r3, r3, #24
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 80019fa:	6812      	ldr	r2, [r2, #0]
 80019fc:	4413      	add	r3, r2
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b2f      	cmp	r3, #47	; 0x2f
 8001a02:	d80a      	bhi.n	8001a1a <main+0x127a>
							timeString[i] = '_';
 8001a04:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001a08:	f103 0318 	add.w	r3, r3, #24
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8001a12:	6812      	ldr	r2, [r2, #0]
 8001a14:	4413      	add	r3, r2
 8001a16:	225f      	movs	r2, #95	; 0x5f
 8001a18:	701a      	strb	r2, [r3, #0]
						}
						if(i>19){
 8001a1a:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001a1e:	f103 0318 	add.w	r3, r3, #24
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2b13      	cmp	r3, #19
 8001a26:	dd0a      	ble.n	8001a3e <main+0x129e>
							timeString[i] = '\0';
 8001a28:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001a2c:	f103 0318 	add.w	r3, r3, #24
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8001a36:	6812      	ldr	r2, [r2, #0]
 8001a38:	4413      	add	r3, r2
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < strlen(timeString); i++)
 8001a3e:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001a42:	f103 0318 	add.w	r3, r3, #24
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8001a4e:	f102 0218 	add.w	r2, r2, #24
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001a58:	6818      	ldr	r0, [r3, #0]
 8001a5a:	f7fe fb99 	bl	8000190 <strlen>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001a64:	f103 0318 	add.w	r3, r3, #24
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d8b2      	bhi.n	80019d4 <main+0x1234>
						}
					}

					char fileNameLocal[60] = "AT+FTPPUTNAME=\"";
 8001a6e:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8001a72:	f6a3 44ac 	subw	r4, r3, #3244	; 0xcac
 8001a76:	4b86      	ldr	r3, [pc, #536]	; (8001c90 <main+0x14f0>)
 8001a78:	4625      	mov	r5, r4
 8001a7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a7c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001a80:	f104 0310 	add.w	r3, r4, #16
 8001a84:	222c      	movs	r2, #44	; 0x2c
 8001a86:	2100      	movs	r1, #0
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f003 fa91 	bl	8004fb0 <memset>
					strcat(fileNameLocal, timeString);
 8001a8e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a92:	3b0c      	subs	r3, #12
 8001a94:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8001a98:	6811      	ldr	r1, [r2, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f003 fb8a 	bl	80051b4 <strcat>
					strcat(fileNameLocal, ".txt\"\r\n");
 8001aa0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001aa4:	3b0c      	subs	r3, #12
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7fe fb72 	bl	8000190 <strlen>
 8001aac:	4603      	mov	r3, r0
 8001aae:	461a      	mov	r2, r3
 8001ab0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001ab4:	3b0c      	subs	r3, #12
 8001ab6:	4413      	add	r3, r2
 8001ab8:	4976      	ldr	r1, [pc, #472]	; (8001c94 <main+0x14f4>)
 8001aba:	461a      	mov	r2, r3
 8001abc:	460b      	mov	r3, r1
 8001abe:	cb03      	ldmia	r3!, {r0, r1}
 8001ac0:	6010      	str	r0, [r2, #0]
 8001ac2:	6051      	str	r1, [r2, #4]


					printf("\tFILENAME_TIME_CHANGE: %s\r\n", fileNameLocal);
 8001ac4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001ac8:	3b0c      	subs	r3, #12
 8001aca:	4619      	mov	r1, r3
 8001acc:	4872      	ldr	r0, [pc, #456]	; (8001c98 <main+0x14f8>)
 8001ace:	f003 fa77 	bl	8004fc0 <iprintf>

					strcpy((char*)g_fileName, fileNameLocal);
 8001ad2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001ad6:	3b0c      	subs	r3, #12
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4870      	ldr	r0, [pc, #448]	; (8001c9c <main+0x14fc>)
 8001adc:	f003 fb79 	bl	80051d2 <strcpy>

				}

				char save[100] = "AT+FTPPUT=2,";
 8001ae0:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8001ae4:	f5a3 6551 	sub.w	r5, r3, #3344	; 0xd10
 8001ae8:	4b6d      	ldr	r3, [pc, #436]	; (8001ca0 <main+0x1500>)
 8001aea:	462c      	mov	r4, r5
 8001aec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001aee:	c407      	stmia	r4!, {r0, r1, r2}
 8001af0:	7023      	strb	r3, [r4, #0]
 8001af2:	f105 030d 	add.w	r3, r5, #13
 8001af6:	2257      	movs	r2, #87	; 0x57
 8001af8:	2100      	movs	r1, #0
 8001afa:	4618      	mov	r0, r3
 8001afc:	f003 fa58 	bl	8004fb0 <memset>
				char len[5];
				itoa(strlen((char*)gps_data_latest), len, 10);
 8001b00:	4868      	ldr	r0, [pc, #416]	; (8001ca4 <main+0x1504>)
 8001b02:	f7fe fb45 	bl	8000190 <strlen>
 8001b06:	4603      	mov	r3, r0
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001b0e:	3b08      	subs	r3, #8
 8001b10:	220a      	movs	r2, #10
 8001b12:	4619      	mov	r1, r3
 8001b14:	f003 fa4a 	bl	8004fac <itoa>
				strcat(save, len);
 8001b18:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8001b1c:	3a08      	subs	r2, #8
 8001b1e:	f107 0310 	add.w	r3, r7, #16
 8001b22:	3b10      	subs	r3, #16
 8001b24:	4611      	mov	r1, r2
 8001b26:	4618      	mov	r0, r3
 8001b28:	f003 fb44 	bl	80051b4 <strcat>
				strcat(save, "\r\n");
 8001b2c:	f107 0310 	add.w	r3, r7, #16
 8001b30:	3b10      	subs	r3, #16
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7fe fb2c 	bl	8000190 <strlen>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	f107 0310 	add.w	r3, r7, #16
 8001b40:	3b10      	subs	r3, #16
 8001b42:	4413      	add	r3, r2
 8001b44:	4a58      	ldr	r2, [pc, #352]	; (8001ca8 <main+0x1508>)
 8001b46:	8811      	ldrh	r1, [r2, #0]
 8001b48:	7892      	ldrb	r2, [r2, #2]
 8001b4a:	8019      	strh	r1, [r3, #0]
 8001b4c:	709a      	strb	r2, [r3, #2]

				strcpy((char*)g_dataSize, save);
 8001b4e:	f107 0310 	add.w	r3, r7, #16
 8001b52:	3b10      	subs	r3, #16
 8001b54:	4619      	mov	r1, r3
 8001b56:	4855      	ldr	r0, [pc, #340]	; (8001cac <main+0x150c>)
 8001b58:	f003 fb3b 	bl	80051d2 <strcpy>

				char save2[100] = "+FTPPUT: 2,";
 8001b5c:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8001b60:	f6a3 43ac 	subw	r3, r3, #3244	; 0xcac
 8001b64:	4a52      	ldr	r2, [pc, #328]	; (8001cb0 <main+0x1510>)
 8001b66:	461c      	mov	r4, r3
 8001b68:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001b6e:	330c      	adds	r3, #12
 8001b70:	2258      	movs	r2, #88	; 0x58
 8001b72:	2100      	movs	r1, #0
 8001b74:	4618      	mov	r0, r3
 8001b76:	f003 fa1b 	bl	8004fb0 <memset>
				strcat(save2, len);
 8001b7a:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8001b7e:	3a08      	subs	r2, #8
 8001b80:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001b84:	3b0c      	subs	r3, #12
 8001b86:	4611      	mov	r1, r2
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f003 fb13 	bl	80051b4 <strcat>

				strcpy((char*)g_dataSizeResponse, save2);
 8001b8e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001b92:	3b0c      	subs	r3, #12
 8001b94:	4619      	mov	r1, r3
 8001b96:	4847      	ldr	r0, [pc, #284]	; (8001cb4 <main+0x1514>)
 8001b98:	f003 fb1b 	bl	80051d2 <strcpy>

				printf("\tASSERT_EXPECTED_REPLY: %s\r\n", g_dataSizeResponse);
 8001b9c:	4945      	ldr	r1, [pc, #276]	; (8001cb4 <main+0x1514>)
 8001b9e:	4846      	ldr	r0, [pc, #280]	; (8001cb8 <main+0x1518>)
 8001ba0:	f003 fa0e 	bl	8004fc0 <iprintf>
 8001ba4:	f7ff ba49 	b.w	800103a <main+0x89a>
				//				}else{
				//					printf("\t\t\t\tCALLOC_FAIL_DATA");
				//				}


			}else if((ptr = strstr((char*)g_LTE_ParseBuffer, "+FTPPUT: 1,1,")) != NULL){ // else, if message is FTP server ready for data response
 8001ba8:	4944      	ldr	r1, [pc, #272]	; (8001cbc <main+0x151c>)
 8001baa:	4845      	ldr	r0, [pc, #276]	; (8001cc0 <main+0x1520>)
 8001bac:	f003 fb19 	bl	80051e2 <strstr>
 8001bb0:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001bb4:	f103 0304 	add.w	r3, r3, #4
 8001bb8:	6018      	str	r0, [r3, #0]
 8001bba:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001bbe:	f103 0304 	add.w	r3, r3, #4
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d00f      	beq.n	8001be8 <main+0x1448>
				//ftp_transfer_active = 1;
				//transfer_status++;
				printf("FTP #: %d\r\n", atoi(ptr+13));
 8001bc8:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001bcc:	f103 0304 	add.w	r3, r3, #4
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	330d      	adds	r3, #13
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f003 f9a3 	bl	8004f20 <atoi>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4839      	ldr	r0, [pc, #228]	; (8001cc4 <main+0x1524>)
 8001be0:	f003 f9ee 	bl	8004fc0 <iprintf>
 8001be4:	f7ff ba29 	b.w	800103a <main+0x89a>
			}else if((ptr = strstr((char*)g_LTE_ParseBuffer, "+CGNSINF")) != NULL){ // save GPS data
 8001be8:	4937      	ldr	r1, [pc, #220]	; (8001cc8 <main+0x1528>)
 8001bea:	4835      	ldr	r0, [pc, #212]	; (8001cc0 <main+0x1520>)
 8001bec:	f003 faf9 	bl	80051e2 <strstr>
 8001bf0:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001bf4:	f103 0304 	add.w	r3, r3, #4
 8001bf8:	6018      	str	r0, [r3, #0]
 8001bfa:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001bfe:	f103 0304 	add.w	r3, r3, #4
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f43f aa18 	beq.w	800103a <main+0x89a>
				//ftp_transfer_active = 0;
				//transfer_status = 0; // I receive new GPS data, which means I don't transmit

				Clear_Array(gps_data_latest, BUFFER_SIZE); // clean old entries
 8001c0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c0e:	4825      	ldr	r0, [pc, #148]	; (8001ca4 <main+0x1504>)
 8001c10:	f000 faae 	bl	8002170 <Clear_Array>

				gps_data_latest[0] = '#'; // preamble
 8001c14:	4b23      	ldr	r3, [pc, #140]	; (8001ca4 <main+0x1504>)
 8001c16:	2223      	movs	r2, #35	; 0x23
 8001c18:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<strlen((char*)g_LTE_ParseBuffer)-1; i++){ // -1 because I added preamble
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8001c20:	f102 0214 	add.w	r2, r2, #20
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	e01a      	b.n	8001c5e <main+0x14be>
					gps_data_latest[i+1] = g_LTE_ParseBuffer[i];
 8001c28:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001c2c:	f103 0314 	add.w	r3, r3, #20
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	3301      	adds	r3, #1
 8001c34:	4922      	ldr	r1, [pc, #136]	; (8001cc0 <main+0x1520>)
 8001c36:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8001c3a:	f102 0214 	add.w	r2, r2, #20
 8001c3e:	6812      	ldr	r2, [r2, #0]
 8001c40:	440a      	add	r2, r1
 8001c42:	7811      	ldrb	r1, [r2, #0]
 8001c44:	4a17      	ldr	r2, [pc, #92]	; (8001ca4 <main+0x1504>)
 8001c46:	54d1      	strb	r1, [r2, r3]
				for(int i=0; i<strlen((char*)g_LTE_ParseBuffer)-1; i++){ // -1 because I added preamble
 8001c48:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001c4c:	f103 0314 	add.w	r3, r3, #20
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	3301      	adds	r3, #1
 8001c54:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8001c58:	f102 0214 	add.w	r2, r2, #20
 8001c5c:	6013      	str	r3, [r2, #0]
 8001c5e:	4818      	ldr	r0, [pc, #96]	; (8001cc0 <main+0x1520>)
 8001c60:	f7fe fa96 	bl	8000190 <strlen>
 8001c64:	4603      	mov	r3, r0
 8001c66:	1e5a      	subs	r2, r3, #1
 8001c68:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001c6c:	f103 0314 	add.w	r3, r3, #20
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d8d8      	bhi.n	8001c28 <main+0x1488>
				//char fake[BUFFER_SIZE] = "+CGNSINF: 5109.0262308,N,11401.8407342,203522.00,A,5109.0262308,N,11401.8407342,W,0.004,133.4,130522,0.0,E,D*2B";
				//				for(int i=0; i<strlen(fake); i++){
				//					gps_data_latest[i] = fake[i];
				//				}

				printf("GPS DATA LOCKED: %s\r\n", gps_data_latest);
 8001c76:	490b      	ldr	r1, [pc, #44]	; (8001ca4 <main+0x1504>)
 8001c78:	4814      	ldr	r0, [pc, #80]	; (8001ccc <main+0x152c>)
 8001c7a:	f003 f9a1 	bl	8004fc0 <iprintf>
 8001c7e:	f7ff b9dc 	b.w	800103a <main+0x89a>

			}

		}else{
			Clear_Array(g_LTE_ParseBuffer, BUFFER_SIZE);
 8001c82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c86:	480e      	ldr	r0, [pc, #56]	; (8001cc0 <main+0x1520>)
 8001c88:	f000 fa72 	bl	8002170 <Clear_Array>
	{
 8001c8c:	f7ff b9d5 	b.w	800103a <main+0x89a>
 8001c90:	080069e4 	.word	0x080069e4
 8001c94:	080066ec 	.word	0x080066ec
 8001c98:	080068a0 	.word	0x080068a0
 8001c9c:	20000000 	.word	0x20000000
 8001ca0:	0800691c 	.word	0x0800691c
 8001ca4:	20003068 	.word	0x20003068
 8001ca8:	080067a0 	.word	0x080067a0
 8001cac:	2000003c 	.word	0x2000003c
 8001cb0:	08006980 	.word	0x08006980
 8001cb4:	20000050 	.word	0x20000050
 8001cb8:	080068bc 	.word	0x080068bc
 8001cbc:	080068dc 	.word	0x080068dc
 8001cc0:	20002c68 	.word	0x20002c68
 8001cc4:	080068ec 	.word	0x080068ec
 8001cc8:	080068f8 	.word	0x080068f8
 8001ccc:	08006904 	.word	0x08006904

08001cd0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b092      	sub	sp, #72	; 0x48
 8001cd4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cd6:	f107 0314 	add.w	r3, r7, #20
 8001cda:	2234      	movs	r2, #52	; 0x34
 8001cdc:	2100      	movs	r1, #0
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f003 f966 	bl	8004fb0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ce4:	463b      	mov	r3, r7
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	605a      	str	r2, [r3, #4]
 8001cec:	609a      	str	r2, [r3, #8]
 8001cee:	60da      	str	r2, [r3, #12]
 8001cf0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cf2:	4b1d      	ldr	r3, [pc, #116]	; (8001d68 <SystemClock_Config+0x98>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001cfa:	4a1b      	ldr	r2, [pc, #108]	; (8001d68 <SystemClock_Config+0x98>)
 8001cfc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d00:	6013      	str	r3, [r2, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d02:	2302      	movs	r3, #2
 8001d04:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d06:	2301      	movs	r3, #1
 8001d08:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d0a:	2310      	movs	r3, #16
 8001d0c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d12:	2300      	movs	r3, #0
 8001d14:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001d16:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001d1a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001d1c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001d20:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d22:	f107 0314 	add.w	r3, r7, #20
 8001d26:	4618      	mov	r0, r3
 8001d28:	f001 fe72 	bl	8003a10 <HAL_RCC_OscConfig>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <SystemClock_Config+0x66>
	{
		Error_Handler();
 8001d32:	f000 f9fd 	bl	8002130 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d36:	230f      	movs	r3, #15
 8001d38:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d46:	2300      	movs	r3, #0
 8001d48:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001d4a:	463b      	mov	r3, r7
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f002 f98e 	bl	8004070 <HAL_RCC_ClockConfig>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <SystemClock_Config+0x8e>
	{
		Error_Handler();
 8001d5a:	f000 f9e9 	bl	8002130 <Error_Handler>
	}
}
 8001d5e:	bf00      	nop
 8001d60:	3748      	adds	r7, #72	; 0x48
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40007000 	.word	0x40007000

08001d6c <MX_ADC_Init>:
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8001d72:	1d3b      	adds	r3, r7, #4
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 8001d7c:	4b25      	ldr	r3, [pc, #148]	; (8001e14 <MX_ADC_Init+0xa8>)
 8001d7e:	4a26      	ldr	r2, [pc, #152]	; (8001e18 <MX_ADC_Init+0xac>)
 8001d80:	601a      	str	r2, [r3, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001d82:	4b24      	ldr	r3, [pc, #144]	; (8001e14 <MX_ADC_Init+0xa8>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001d88:	4b22      	ldr	r3, [pc, #136]	; (8001e14 <MX_ADC_Init+0xa8>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	609a      	str	r2, [r3, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d8e:	4b21      	ldr	r3, [pc, #132]	; (8001e14 <MX_ADC_Init+0xa8>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	60da      	str	r2, [r3, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d94:	4b1f      	ldr	r3, [pc, #124]	; (8001e14 <MX_ADC_Init+0xa8>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	611a      	str	r2, [r3, #16]
	hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001d9a:	4b1e      	ldr	r3, [pc, #120]	; (8001e14 <MX_ADC_Init+0xa8>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	615a      	str	r2, [r3, #20]
	hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001da0:	4b1c      	ldr	r3, [pc, #112]	; (8001e14 <MX_ADC_Init+0xa8>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	619a      	str	r2, [r3, #24]
	hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8001da6:	4b1b      	ldr	r3, [pc, #108]	; (8001e14 <MX_ADC_Init+0xa8>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	61da      	str	r2, [r3, #28]
	hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001dac:	4b19      	ldr	r3, [pc, #100]	; (8001e14 <MX_ADC_Init+0xa8>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	621a      	str	r2, [r3, #32]
	hadc.Init.ContinuousConvMode = DISABLE;
 8001db2:	4b18      	ldr	r3, [pc, #96]	; (8001e14 <MX_ADC_Init+0xa8>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc.Init.NbrOfConversion = 1;
 8001dba:	4b16      	ldr	r3, [pc, #88]	; (8001e14 <MX_ADC_Init+0xa8>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	629a      	str	r2, [r3, #40]	; 0x28
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8001dc0:	4b14      	ldr	r3, [pc, #80]	; (8001e14 <MX_ADC_Init+0xa8>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001dc8:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <MX_ADC_Init+0xa8>)
 8001dca:	2210      	movs	r2, #16
 8001dcc:	635a      	str	r2, [r3, #52]	; 0x34
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001dce:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <MX_ADC_Init+0xa8>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	639a      	str	r2, [r3, #56]	; 0x38
	hadc.Init.DMAContinuousRequests = DISABLE;
 8001dd4:	4b0f      	ldr	r3, [pc, #60]	; (8001e14 <MX_ADC_Init+0xa8>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001ddc:	480d      	ldr	r0, [pc, #52]	; (8001e14 <MX_ADC_Init+0xa8>)
 8001dde:	f000 ff91 	bl	8002d04 <HAL_ADC_Init>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_ADC_Init+0x80>
	{
		Error_Handler();
 8001de8:	f000 f9a2 	bl	8002130 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001df0:	2301      	movs	r3, #1
 8001df2:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8001df4:	2300      	movs	r3, #0
 8001df6:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001df8:	1d3b      	adds	r3, r7, #4
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4805      	ldr	r0, [pc, #20]	; (8001e14 <MX_ADC_Init+0xa8>)
 8001dfe:	f001 f8c7 	bl	8002f90 <HAL_ADC_ConfigChannel>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_ADC_Init+0xa0>
	{
		Error_Handler();
 8001e08:	f000 f992 	bl	8002130 <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 8001e0c:	bf00      	nop
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	200029e0 	.word	0x200029e0
 8001e18:	40012400 	.word	0x40012400

08001e1c <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8001e20:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <MX_UART4_Init+0x4c>)
 8001e22:	4a12      	ldr	r2, [pc, #72]	; (8001e6c <MX_UART4_Init+0x50>)
 8001e24:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 8001e26:	4b10      	ldr	r3, [pc, #64]	; (8001e68 <MX_UART4_Init+0x4c>)
 8001e28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e2c:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001e2e:	4b0e      	ldr	r3, [pc, #56]	; (8001e68 <MX_UART4_Init+0x4c>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8001e34:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <MX_UART4_Init+0x4c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8001e3a:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <MX_UART4_Init+0x4c>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8001e40:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <MX_UART4_Init+0x4c>)
 8001e42:	220c      	movs	r2, #12
 8001e44:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e46:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <MX_UART4_Init+0x4c>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e4c:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <MX_UART4_Init+0x4c>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK)
 8001e52:	4805      	ldr	r0, [pc, #20]	; (8001e68 <MX_UART4_Init+0x4c>)
 8001e54:	f002 fbd2 	bl	80045fc <HAL_UART_Init>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_UART4_Init+0x46>
	{
		Error_Handler();
 8001e5e:	f000 f967 	bl	8002130 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20002a34 	.word	0x20002a34
 8001e6c:	40004c00 	.word	0x40004c00

08001e70 <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 8001e74:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <MX_UART5_Init+0x4c>)
 8001e76:	4a12      	ldr	r2, [pc, #72]	; (8001ec0 <MX_UART5_Init+0x50>)
 8001e78:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 8001e7a:	4b10      	ldr	r3, [pc, #64]	; (8001ebc <MX_UART5_Init+0x4c>)
 8001e7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e80:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001e82:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <MX_UART5_Init+0x4c>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8001e88:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <MX_UART5_Init+0x4c>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 8001e8e:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <MX_UART5_Init+0x4c>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8001e94:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <MX_UART5_Init+0x4c>)
 8001e96:	220c      	movs	r2, #12
 8001e98:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e9a:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <MX_UART5_Init+0x4c>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea0:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <MX_UART5_Init+0x4c>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart5) != HAL_OK)
 8001ea6:	4805      	ldr	r0, [pc, #20]	; (8001ebc <MX_UART5_Init+0x4c>)
 8001ea8:	f002 fba8 	bl	80045fc <HAL_UART_Init>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_UART5_Init+0x46>
	{
		Error_Handler();
 8001eb2:	f000 f93d 	bl	8002130 <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20002a7c 	.word	0x20002a7c
 8001ec0:	40005000 	.word	0x40005000

08001ec4 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001ec8:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <MX_USART1_UART_Init+0x4c>)
 8001eca:	4a12      	ldr	r2, [pc, #72]	; (8001f14 <MX_USART1_UART_Init+0x50>)
 8001ecc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8001ece:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <MX_USART1_UART_Init+0x4c>)
 8001ed0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ed4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ed6:	4b0e      	ldr	r3, [pc, #56]	; (8001f10 <MX_USART1_UART_Init+0x4c>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001edc:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <MX_USART1_UART_Init+0x4c>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001ee2:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <MX_USART1_UART_Init+0x4c>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001ee8:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <MX_USART1_UART_Init+0x4c>)
 8001eea:	220c      	movs	r2, #12
 8001eec:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eee:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <MX_USART1_UART_Init+0x4c>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ef4:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <MX_USART1_UART_Init+0x4c>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001efa:	4805      	ldr	r0, [pc, #20]	; (8001f10 <MX_USART1_UART_Init+0x4c>)
 8001efc:	f002 fb7e 	bl	80045fc <HAL_UART_Init>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8001f06:	f000 f913 	bl	8002130 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20002ac4 	.word	0x20002ac4
 8001f14:	40013800 	.word	0x40013800

08001f18 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001f1c:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <MX_USART2_UART_Init+0x4c>)
 8001f1e:	4a12      	ldr	r2, [pc, #72]	; (8001f68 <MX_USART2_UART_Init+0x50>)
 8001f20:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 57600;
 8001f22:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <MX_USART2_UART_Init+0x4c>)
 8001f24:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001f28:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <MX_USART2_UART_Init+0x4c>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001f30:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <MX_USART2_UART_Init+0x4c>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001f36:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <MX_USART2_UART_Init+0x4c>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001f3c:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <MX_USART2_UART_Init+0x4c>)
 8001f3e:	220c      	movs	r2, #12
 8001f40:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f42:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <MX_USART2_UART_Init+0x4c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f48:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <MX_USART2_UART_Init+0x4c>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f4e:	4805      	ldr	r0, [pc, #20]	; (8001f64 <MX_USART2_UART_Init+0x4c>)
 8001f50:	f002 fb54 	bl	80045fc <HAL_UART_Init>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8001f5a:	f000 f8e9 	bl	8002130 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20002b0c 	.word	0x20002b0c
 8001f68:	40004400 	.word	0x40004400

08001f6c <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001f70:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001f72:	4a12      	ldr	r2, [pc, #72]	; (8001fbc <MX_USART3_UART_Init+0x50>)
 8001f74:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 8001f76:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001f78:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f7c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f7e:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001f84:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001f8a:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001f90:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001f92:	220c      	movs	r2, #12
 8001f94:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f96:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f9c:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fa2:	4805      	ldr	r0, [pc, #20]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001fa4:	f002 fb2a 	bl	80045fc <HAL_UART_Init>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 8001fae:	f000 f8bf 	bl	8002130 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20002b54 	.word	0x20002b54
 8001fbc:	40004800 	.word	0x40004800

08001fc0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001fc6:	4b14      	ldr	r3, [pc, #80]	; (8002018 <MX_DMA_Init+0x58>)
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	4a13      	ldr	r2, [pc, #76]	; (8002018 <MX_DMA_Init+0x58>)
 8001fcc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fd0:	61d3      	str	r3, [r2, #28]
 8001fd2:	4b11      	ldr	r3, [pc, #68]	; (8002018 <MX_DMA_Init+0x58>)
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fda:	607b      	str	r3, [r7, #4]
 8001fdc:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	200d      	movs	r0, #13
 8001fe4:	f001 fa17 	bl	8003416 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001fe8:	200d      	movs	r0, #13
 8001fea:	f001 fa30 	bl	800344e <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	200f      	movs	r0, #15
 8001ff4:	f001 fa0f 	bl	8003416 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001ff8:	200f      	movs	r0, #15
 8001ffa:	f001 fa28 	bl	800344e <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001ffe:	2200      	movs	r2, #0
 8002000:	2100      	movs	r1, #0
 8002002:	2010      	movs	r0, #16
 8002004:	f001 fa07 	bl	8003416 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002008:	2010      	movs	r0, #16
 800200a:	f001 fa20 	bl	800344e <HAL_NVIC_EnableIRQ>

}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40023800 	.word	0x40023800

0800201c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08a      	sub	sp, #40	; 0x28
 8002020:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002022:	f107 0314 	add.w	r3, r7, #20
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	605a      	str	r2, [r3, #4]
 800202c:	609a      	str	r2, [r3, #8]
 800202e:	60da      	str	r2, [r3, #12]
 8002030:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002032:	4b3b      	ldr	r3, [pc, #236]	; (8002120 <MX_GPIO_Init+0x104>)
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	4a3a      	ldr	r2, [pc, #232]	; (8002120 <MX_GPIO_Init+0x104>)
 8002038:	f043 0304 	orr.w	r3, r3, #4
 800203c:	61d3      	str	r3, [r2, #28]
 800203e:	4b38      	ldr	r3, [pc, #224]	; (8002120 <MX_GPIO_Init+0x104>)
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	f003 0304 	and.w	r3, r3, #4
 8002046:	613b      	str	r3, [r7, #16]
 8002048:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800204a:	4b35      	ldr	r3, [pc, #212]	; (8002120 <MX_GPIO_Init+0x104>)
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	4a34      	ldr	r2, [pc, #208]	; (8002120 <MX_GPIO_Init+0x104>)
 8002050:	f043 0320 	orr.w	r3, r3, #32
 8002054:	61d3      	str	r3, [r2, #28]
 8002056:	4b32      	ldr	r3, [pc, #200]	; (8002120 <MX_GPIO_Init+0x104>)
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	f003 0320 	and.w	r3, r3, #32
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002062:	4b2f      	ldr	r3, [pc, #188]	; (8002120 <MX_GPIO_Init+0x104>)
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	4a2e      	ldr	r2, [pc, #184]	; (8002120 <MX_GPIO_Init+0x104>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	61d3      	str	r3, [r2, #28]
 800206e:	4b2c      	ldr	r3, [pc, #176]	; (8002120 <MX_GPIO_Init+0x104>)
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	60bb      	str	r3, [r7, #8]
 8002078:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800207a:	4b29      	ldr	r3, [pc, #164]	; (8002120 <MX_GPIO_Init+0x104>)
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	4a28      	ldr	r2, [pc, #160]	; (8002120 <MX_GPIO_Init+0x104>)
 8002080:	f043 0302 	orr.w	r3, r3, #2
 8002084:	61d3      	str	r3, [r2, #28]
 8002086:	4b26      	ldr	r3, [pc, #152]	; (8002120 <MX_GPIO_Init+0x104>)
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	607b      	str	r3, [r7, #4]
 8002090:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002092:	4b23      	ldr	r3, [pc, #140]	; (8002120 <MX_GPIO_Init+0x104>)
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	4a22      	ldr	r2, [pc, #136]	; (8002120 <MX_GPIO_Init+0x104>)
 8002098:	f043 0308 	orr.w	r3, r3, #8
 800209c:	61d3      	str	r3, [r2, #28]
 800209e:	4b20      	ldr	r3, [pc, #128]	; (8002120 <MX_GPIO_Init+0x104>)
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	f003 0308 	and.w	r3, r3, #8
 80020a6:	603b      	str	r3, [r7, #0]
 80020a8:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 80020aa:	2200      	movs	r2, #0
 80020ac:	2160      	movs	r1, #96	; 0x60
 80020ae:	481d      	ldr	r0, [pc, #116]	; (8002124 <MX_GPIO_Init+0x108>)
 80020b0:	f001 fc7c 	bl	80039ac <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 80020b4:	2200      	movs	r2, #0
 80020b6:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80020ba:	481b      	ldr	r0, [pc, #108]	; (8002128 <MX_GPIO_Init+0x10c>)
 80020bc:	f001 fc76 	bl	80039ac <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80020c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020c4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020c6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80020ca:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80020d0:	f107 0314 	add.w	r3, r7, #20
 80020d4:	4619      	mov	r1, r3
 80020d6:	4815      	ldr	r0, [pc, #84]	; (800212c <MX_GPIO_Init+0x110>)
 80020d8:	f001 fad8 	bl	800368c <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin PA6 */
	GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
 80020dc:	2360      	movs	r3, #96	; 0x60
 80020de:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e0:	2301      	movs	r3, #1
 80020e2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e8:	2300      	movs	r3, #0
 80020ea:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ec:	f107 0314 	add.w	r3, r7, #20
 80020f0:	4619      	mov	r1, r3
 80020f2:	480c      	ldr	r0, [pc, #48]	; (8002124 <MX_GPIO_Init+0x108>)
 80020f4:	f001 faca 	bl	800368c <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin */
	GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin;
 80020f8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80020fc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020fe:	2301      	movs	r3, #1
 8002100:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002102:	2300      	movs	r3, #0
 8002104:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002106:	2300      	movs	r3, #0
 8002108:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800210a:	f107 0314 	add.w	r3, r7, #20
 800210e:	4619      	mov	r1, r3
 8002110:	4805      	ldr	r0, [pc, #20]	; (8002128 <MX_GPIO_Init+0x10c>)
 8002112:	f001 fabb 	bl	800368c <HAL_GPIO_Init>

}
 8002116:	bf00      	nop
 8002118:	3728      	adds	r7, #40	; 0x28
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40023800 	.word	0x40023800
 8002124:	40020000 	.word	0x40020000
 8002128:	40020400 	.word	0x40020400
 800212c:	40020800 	.word	0x40020800

08002130 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002134:	b672      	cpsid	i
}
 8002136:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002138:	e7fe      	b.n	8002138 <Error_Handler+0x8>
	...

0800213c <Send_LTE>:
extern uint8_t g_RAM_2_data_ready;

extern uint8_t g_RAM_1_triggered;
extern uint8_t g_RAM_2_triggered;

void Send_LTE(uint8_t* cmd, uint16_t len){
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	460b      	mov	r3, r1
 8002146:	807b      	strh	r3, [r7, #2]
	if (len == 0){ // lenghts of arrays of chars can be computed here
 8002148:	887b      	ldrh	r3, [r7, #2]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d104      	bne.n	8002158 <Send_LTE+0x1c>
		len = strlen((char*)cmd);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7fe f81e 	bl	8000190 <strlen>
 8002154:	4603      	mov	r3, r0
 8002156:	807b      	strh	r3, [r7, #2]
	}
	//printf("%s, %d - SIZEOF\r\n", (char*)cmd, sizeof(cmd));
	//	strcat(cmd, "\r\n");
	//printf("%s, %d - SIZEOF\r\n", cmd, strlen(cmd));
	HAL_UART_Transmit(&huart2,cmd,len,250);
 8002158:	887a      	ldrh	r2, [r7, #2]
 800215a:	23fa      	movs	r3, #250	; 0xfa
 800215c:	6879      	ldr	r1, [r7, #4]
 800215e:	4803      	ldr	r0, [pc, #12]	; (800216c <Send_LTE+0x30>)
 8002160:	f002 fa9c 	bl	800469c <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart2,(uint8_t*)"\r\n",2,10);
}
 8002164:	bf00      	nop
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	20002b0c 	.word	0x20002b0c

08002170 <Clear_Array>:

void Get_LTE_data(){
	UARTDMA_IsDataReady(&hLTE_uart2dma6);
}

void Clear_Array(uint8_t* array, unsigned int size) {
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < size; i++) {
 800217a:	2300      	movs	r3, #0
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	e007      	b.n	8002190 <Clear_Array+0x20>
		array[i] = 0;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	4413      	add	r3, r2
 8002186:	2200      	movs	r2, #0
 8002188:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; i++) {
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	3301      	adds	r3, #1
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	429a      	cmp	r2, r3
 8002196:	d8f3      	bhi.n	8002180 <Clear_Array+0x10>
	}
}
 8002198:	bf00      	nop
 800219a:	bf00      	nop
 800219c:	3714      	adds	r7, #20
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr

080021a4 <Do_Action_RAMSES>:

enum State Do_Action_RAMSES(const command *cmd) {
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
	// DO RAMSES ACTION
	if (strcmp((char*)cmd->cmd, "RAMSES_1_2_SAMPLE") == 0)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4958      	ldr	r1, [pc, #352]	; (8002314 <Do_Action_RAMSES+0x170>)
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fd ffe2 	bl	800017c <strcmp>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d125      	bne.n	800220a <Do_Action_RAMSES+0x66>
	{
		HAL_UART_Transmit(&huart1, g_RAMSES_RADIANCE_Sample, SAMPLE_RADIANCE_CMD_SIZE, 50);
 80021be:	2332      	movs	r3, #50	; 0x32
 80021c0:	2210      	movs	r2, #16
 80021c2:	4955      	ldr	r1, [pc, #340]	; (8002318 <Do_Action_RAMSES+0x174>)
 80021c4:	4855      	ldr	r0, [pc, #340]	; (800231c <Do_Action_RAMSES+0x178>)
 80021c6:	f002 fa69 	bl	800469c <HAL_UART_Transmit>
		g_RAM_1_timer = HAL_GetTick();
 80021ca:	f000 fd6f 	bl	8002cac <HAL_GetTick>
 80021ce:	4603      	mov	r3, r0
 80021d0:	461a      	mov	r2, r3
 80021d2:	4b53      	ldr	r3, [pc, #332]	; (8002320 <Do_Action_RAMSES+0x17c>)
 80021d4:	601a      	str	r2, [r3, #0]
		g_RAM_1_data_ready = 0;
 80021d6:	4b53      	ldr	r3, [pc, #332]	; (8002324 <Do_Action_RAMSES+0x180>)
 80021d8:	2200      	movs	r2, #0
 80021da:	701a      	strb	r2, [r3, #0]
		g_RAM_1_triggered = 1;
 80021dc:	4b52      	ldr	r3, [pc, #328]	; (8002328 <Do_Action_RAMSES+0x184>)
 80021de:	2201      	movs	r2, #1
 80021e0:	701a      	strb	r2, [r3, #0]

		HAL_UART_Transmit(&huart3, g_RAMSES_Sample, SAMPLE_CMD_SIZE, 50);
 80021e2:	2332      	movs	r3, #50	; 0x32
 80021e4:	2208      	movs	r2, #8
 80021e6:	4951      	ldr	r1, [pc, #324]	; (800232c <Do_Action_RAMSES+0x188>)
 80021e8:	4851      	ldr	r0, [pc, #324]	; (8002330 <Do_Action_RAMSES+0x18c>)
 80021ea:	f002 fa57 	bl	800469c <HAL_UART_Transmit>
		g_RAM_2_timer = HAL_GetTick();
 80021ee:	f000 fd5d 	bl	8002cac <HAL_GetTick>
 80021f2:	4603      	mov	r3, r0
 80021f4:	461a      	mov	r2, r3
 80021f6:	4b4f      	ldr	r3, [pc, #316]	; (8002334 <Do_Action_RAMSES+0x190>)
 80021f8:	601a      	str	r2, [r3, #0]
		g_RAM_2_data_ready = 0;
 80021fa:	4b4f      	ldr	r3, [pc, #316]	; (8002338 <Do_Action_RAMSES+0x194>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	701a      	strb	r2, [r3, #0]
		g_RAM_2_triggered = 1;
 8002200:	4b4e      	ldr	r3, [pc, #312]	; (800233c <Do_Action_RAMSES+0x198>)
 8002202:	2201      	movs	r2, #1
 8002204:	701a      	strb	r2, [r3, #0]
		return READY;
 8002206:	2300      	movs	r3, #0
 8002208:	e080      	b.n	800230c <Do_Action_RAMSES+0x168>
	} else if (strcmp((char*)cmd->cmd, "RAMSES_1_SAMPLE") == 0)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	494c      	ldr	r1, [pc, #304]	; (8002340 <Do_Action_RAMSES+0x19c>)
 8002210:	4618      	mov	r0, r3
 8002212:	f7fd ffb3 	bl	800017c <strcmp>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d116      	bne.n	800224a <Do_Action_RAMSES+0xa6>
	{
		printf("\t\t\t\tRAMSES_1_SAMPLE\r\n");
 800221c:	4849      	ldr	r0, [pc, #292]	; (8002344 <Do_Action_RAMSES+0x1a0>)
 800221e:	f002 ff55 	bl	80050cc <puts>
		HAL_UART_Transmit(&huart1, g_RAMSES_RADIANCE_Sample, SAMPLE_RADIANCE_CMD_SIZE, 50);
 8002222:	2332      	movs	r3, #50	; 0x32
 8002224:	2210      	movs	r2, #16
 8002226:	493c      	ldr	r1, [pc, #240]	; (8002318 <Do_Action_RAMSES+0x174>)
 8002228:	483c      	ldr	r0, [pc, #240]	; (800231c <Do_Action_RAMSES+0x178>)
 800222a:	f002 fa37 	bl	800469c <HAL_UART_Transmit>
		g_RAM_1_timer = HAL_GetTick();
 800222e:	f000 fd3d 	bl	8002cac <HAL_GetTick>
 8002232:	4603      	mov	r3, r0
 8002234:	461a      	mov	r2, r3
 8002236:	4b3a      	ldr	r3, [pc, #232]	; (8002320 <Do_Action_RAMSES+0x17c>)
 8002238:	601a      	str	r2, [r3, #0]
		g_RAM_1_data_ready = 0;
 800223a:	4b3a      	ldr	r3, [pc, #232]	; (8002324 <Do_Action_RAMSES+0x180>)
 800223c:	2200      	movs	r2, #0
 800223e:	701a      	strb	r2, [r3, #0]
		g_RAM_1_triggered = 1;
 8002240:	4b39      	ldr	r3, [pc, #228]	; (8002328 <Do_Action_RAMSES+0x184>)
 8002242:	2201      	movs	r2, #1
 8002244:	701a      	strb	r2, [r3, #0]
		return READY;
 8002246:	2300      	movs	r3, #0
 8002248:	e060      	b.n	800230c <Do_Action_RAMSES+0x168>

	} else if (strcmp((char*)cmd->cmd, "RAMSES_2_SAMPLE") == 0)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	493e      	ldr	r1, [pc, #248]	; (8002348 <Do_Action_RAMSES+0x1a4>)
 8002250:	4618      	mov	r0, r3
 8002252:	f7fd ff93 	bl	800017c <strcmp>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d116      	bne.n	800228a <Do_Action_RAMSES+0xe6>
	{
		printf("\t\t\t\tRAMSES_2_SAMPLE\r\n");
 800225c:	483b      	ldr	r0, [pc, #236]	; (800234c <Do_Action_RAMSES+0x1a8>)
 800225e:	f002 ff35 	bl	80050cc <puts>
		HAL_UART_Transmit(&huart3, g_RAMSES_Sample, SAMPLE_CMD_SIZE, 50);
 8002262:	2332      	movs	r3, #50	; 0x32
 8002264:	2208      	movs	r2, #8
 8002266:	4931      	ldr	r1, [pc, #196]	; (800232c <Do_Action_RAMSES+0x188>)
 8002268:	4831      	ldr	r0, [pc, #196]	; (8002330 <Do_Action_RAMSES+0x18c>)
 800226a:	f002 fa17 	bl	800469c <HAL_UART_Transmit>
		g_RAM_2_timer = HAL_GetTick();
 800226e:	f000 fd1d 	bl	8002cac <HAL_GetTick>
 8002272:	4603      	mov	r3, r0
 8002274:	461a      	mov	r2, r3
 8002276:	4b2f      	ldr	r3, [pc, #188]	; (8002334 <Do_Action_RAMSES+0x190>)
 8002278:	601a      	str	r2, [r3, #0]
		g_RAM_2_data_ready = 0;
 800227a:	4b2f      	ldr	r3, [pc, #188]	; (8002338 <Do_Action_RAMSES+0x194>)
 800227c:	2200      	movs	r2, #0
 800227e:	701a      	strb	r2, [r3, #0]
		g_RAM_2_triggered = 1;
 8002280:	4b2e      	ldr	r3, [pc, #184]	; (800233c <Do_Action_RAMSES+0x198>)
 8002282:	2201      	movs	r2, #1
 8002284:	701a      	strb	r2, [r3, #0]
		return READY;
 8002286:	2300      	movs	r3, #0
 8002288:	e040      	b.n	800230c <Do_Action_RAMSES+0x168>

	} else if (strcmp((char*)cmd->cmd, "RAMSES_1_QUERY") == 0)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4930      	ldr	r1, [pc, #192]	; (8002350 <Do_Action_RAMSES+0x1ac>)
 8002290:	4618      	mov	r0, r3
 8002292:	f7fd ff73 	bl	800017c <strcmp>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d116      	bne.n	80022ca <Do_Action_RAMSES+0x126>
	{
		printf("\t\t\t\tRAMSES_1_QUERY\r\n");
 800229c:	482d      	ldr	r0, [pc, #180]	; (8002354 <Do_Action_RAMSES+0x1b0>)
 800229e:	f002 ff15 	bl	80050cc <puts>
		HAL_UART_Transmit(&huart1, g_RAMSES_Query, QUERY_CMD_SIZE, 50);
 80022a2:	2332      	movs	r3, #50	; 0x32
 80022a4:	2208      	movs	r2, #8
 80022a6:	492c      	ldr	r1, [pc, #176]	; (8002358 <Do_Action_RAMSES+0x1b4>)
 80022a8:	481c      	ldr	r0, [pc, #112]	; (800231c <Do_Action_RAMSES+0x178>)
 80022aa:	f002 f9f7 	bl	800469c <HAL_UART_Transmit>
		g_RAM_1_timer = HAL_GetTick();
 80022ae:	f000 fcfd 	bl	8002cac <HAL_GetTick>
 80022b2:	4603      	mov	r3, r0
 80022b4:	461a      	mov	r2, r3
 80022b6:	4b1a      	ldr	r3, [pc, #104]	; (8002320 <Do_Action_RAMSES+0x17c>)
 80022b8:	601a      	str	r2, [r3, #0]
		g_RAM_1_data_ready = 0;
 80022ba:	4b1a      	ldr	r3, [pc, #104]	; (8002324 <Do_Action_RAMSES+0x180>)
 80022bc:	2200      	movs	r2, #0
 80022be:	701a      	strb	r2, [r3, #0]
		g_RAM_1_triggered = 1;
 80022c0:	4b19      	ldr	r3, [pc, #100]	; (8002328 <Do_Action_RAMSES+0x184>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	701a      	strb	r2, [r3, #0]
		return READY;
 80022c6:	2300      	movs	r3, #0
 80022c8:	e020      	b.n	800230c <Do_Action_RAMSES+0x168>
	} else if (strcmp((char*)cmd->cmd, "RAMSES_2_QUERY") == 0)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4923      	ldr	r1, [pc, #140]	; (800235c <Do_Action_RAMSES+0x1b8>)
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7fd ff53 	bl	800017c <strcmp>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d116      	bne.n	800230a <Do_Action_RAMSES+0x166>
	{
		printf("\t\t\t\tRAMSES_2_QUERY\r\n");
 80022dc:	4820      	ldr	r0, [pc, #128]	; (8002360 <Do_Action_RAMSES+0x1bc>)
 80022de:	f002 fef5 	bl	80050cc <puts>
		HAL_UART_Transmit(&huart3, g_RAMSES_Query, QUERY_CMD_SIZE, 50);
 80022e2:	2332      	movs	r3, #50	; 0x32
 80022e4:	2208      	movs	r2, #8
 80022e6:	491c      	ldr	r1, [pc, #112]	; (8002358 <Do_Action_RAMSES+0x1b4>)
 80022e8:	4811      	ldr	r0, [pc, #68]	; (8002330 <Do_Action_RAMSES+0x18c>)
 80022ea:	f002 f9d7 	bl	800469c <HAL_UART_Transmit>
		g_RAM_2_timer = HAL_GetTick();
 80022ee:	f000 fcdd 	bl	8002cac <HAL_GetTick>
 80022f2:	4603      	mov	r3, r0
 80022f4:	461a      	mov	r2, r3
 80022f6:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <Do_Action_RAMSES+0x190>)
 80022f8:	601a      	str	r2, [r3, #0]
		g_RAM_2_data_ready = 0;
 80022fa:	4b0f      	ldr	r3, [pc, #60]	; (8002338 <Do_Action_RAMSES+0x194>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	701a      	strb	r2, [r3, #0]
		g_RAM_2_triggered = 1;
 8002300:	4b0e      	ldr	r3, [pc, #56]	; (800233c <Do_Action_RAMSES+0x198>)
 8002302:	2201      	movs	r2, #1
 8002304:	701a      	strb	r2, [r3, #0]
		return READY;
 8002306:	2300      	movs	r3, #0
 8002308:	e000      	b.n	800230c <Do_Action_RAMSES+0x168>
	}

	return READY;
 800230a:	2300      	movs	r3, #0
	// if send, check if there's data, if not check if timout has passed, if yes, send timeout, if not send data, CHECKING_ANSWER can be the mode to send while waiting

}
 800230c:	4618      	mov	r0, r3
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	08006a20 	.word	0x08006a20
 8002318:	08006af8 	.word	0x08006af8
 800231c:	20002ac4 	.word	0x20002ac4
 8002320:	2000386c 	.word	0x2000386c
 8002324:	2000386a 	.word	0x2000386a
 8002328:	20003870 	.word	0x20003870
 800232c:	08006af0 	.word	0x08006af0
 8002330:	20002b54 	.word	0x20002b54
 8002334:	20003c78 	.word	0x20003c78
 8002338:	20003c76 	.word	0x20003c76
 800233c:	20003c7c 	.word	0x20003c7c
 8002340:	08006a34 	.word	0x08006a34
 8002344:	08006a44 	.word	0x08006a44
 8002348:	08006a5c 	.word	0x08006a5c
 800234c:	08006a6c 	.word	0x08006a6c
 8002350:	08006a84 	.word	0x08006a84
 8002354:	08006a94 	.word	0x08006a94
 8002358:	08006ae8 	.word	0x08006ae8
 800235c:	08006aa8 	.word	0x08006aa8
 8002360:	08006ab8 	.word	0x08006ab8

08002364 <Do_Action>:

enum State Do_Action(command cmd, uint8_t* uart_data){
 8002364:	b084      	sub	sp, #16
 8002366:	b590      	push	{r4, r7, lr}
 8002368:	b085      	sub	sp, #20
 800236a:	af04      	add	r7, sp, #16
 800236c:	f107 0410 	add.w	r4, r7, #16
 8002370:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	static enum State state = READY;
	static unsigned int retry;
	static int start_time;

	if(strstr((char*)cmd.cmd, "RAMSES") != NULL){ // DO RAMSES ACTION
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	4954      	ldr	r1, [pc, #336]	; (80024c8 <Do_Action+0x164>)
 8002378:	4618      	mov	r0, r3
 800237a:	f002 ff32 	bl	80051e2 <strstr>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00a      	beq.n	800239a <Do_Action+0x36>
		state = Do_Action_RAMSES(&cmd);
 8002384:	f107 0010 	add.w	r0, r7, #16
 8002388:	f7ff ff0c 	bl	80021a4 <Do_Action_RAMSES>
 800238c:	4603      	mov	r3, r0
 800238e:	461a      	mov	r2, r3
 8002390:	4b4e      	ldr	r3, [pc, #312]	; (80024cc <Do_Action+0x168>)
 8002392:	701a      	strb	r2, [r3, #0]
		return state;
 8002394:	4b4d      	ldr	r3, [pc, #308]	; (80024cc <Do_Action+0x168>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	e08f      	b.n	80024ba <Do_Action+0x156>

	}else{ // DO LTE ACTION


		if(strcmp((char*)cmd.cmd, "RESET_ACTION") == 0){
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	494c      	ldr	r1, [pc, #304]	; (80024d0 <Do_Action+0x16c>)
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fd feec 	bl	800017c <strcmp>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10d      	bne.n	80023c6 <Do_Action+0x62>
			Clear_Array(uart_data, BUFFER_SIZE);  // ZOLICH _ modified without test
 80023aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80023b0:	f7ff fede 	bl	8002170 <Clear_Array>
			retry = 0;
 80023b4:	4b47      	ldr	r3, [pc, #284]	; (80024d4 <Do_Action+0x170>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]
			state = READY;
 80023ba:	4b44      	ldr	r3, [pc, #272]	; (80024cc <Do_Action+0x168>)
 80023bc:	2200      	movs	r2, #0
 80023be:	701a      	strb	r2, [r3, #0]
			return state;
 80023c0:	4b42      	ldr	r3, [pc, #264]	; (80024cc <Do_Action+0x168>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	e079      	b.n	80024ba <Do_Action+0x156>
		}

		if(state == READY){ 					// ready to send new command
 80023c6:	4b41      	ldr	r3, [pc, #260]	; (80024cc <Do_Action+0x168>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d119      	bne.n	8002402 <Do_Action+0x9e>
			start_time = HAL_GetTick();		// save send time
 80023ce:	f000 fc6d 	bl	8002cac <HAL_GetTick>
 80023d2:	4603      	mov	r3, r0
 80023d4:	461a      	mov	r2, r3
 80023d6:	4b40      	ldr	r3, [pc, #256]	; (80024d8 <Do_Action+0x174>)
 80023d8:	601a      	str	r2, [r3, #0]
			state = CHECKING_ANSWER;			// notify that now we wait for a reply
 80023da:	4b3c      	ldr	r3, [pc, #240]	; (80024cc <Do_Action+0x168>)
 80023dc:	2201      	movs	r2, #1
 80023de:	701a      	strb	r2, [r3, #0]
			retry = 0;
 80023e0:	4b3c      	ldr	r3, [pc, #240]	; (80024d4 <Do_Action+0x170>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
			Clear_Array(uart_data, BUFFER_SIZE);  // ZOLICH _ modified without test
 80023e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80023ec:	f7ff fec0 	bl	8002170 <Clear_Array>
			if(cmd.length != -1){
				Send_LTE(cmd.cmd, cmd.length);				// send new command
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	8aba      	ldrh	r2, [r7, #20]
 80023f4:	4611      	mov	r1, r2
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff fea0 	bl	800213c <Send_LTE>
			}else{
				printf("NO DATA TO TRANSFER, LENGTH -1, SKIPPING\r\n");
				state = READY;
			}
			return state;
 80023fc:	4b33      	ldr	r3, [pc, #204]	; (80024cc <Do_Action+0x168>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	e05b      	b.n	80024ba <Do_Action+0x156>

		}else if(state == CHECKING_ANSWER){	// if we expect a reply now
 8002402:	4b32      	ldr	r3, [pc, #200]	; (80024cc <Do_Action+0x168>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d155      	bne.n	80024b6 <Do_Action+0x152>

			if((start_time + cmd.timeout) < HAL_GetTick()){	// if we wait too long, report timeout
 800240a:	69fa      	ldr	r2, [r7, #28]
 800240c:	4b32      	ldr	r3, [pc, #200]	; (80024d8 <Do_Action+0x174>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4413      	add	r3, r2
 8002412:	461c      	mov	r4, r3
 8002414:	f000 fc4a 	bl	8002cac <HAL_GetTick>
 8002418:	4603      	mov	r3, r0
 800241a:	429c      	cmp	r4, r3
 800241c:	d205      	bcs.n	800242a <Do_Action+0xc6>
				state = TIMEOUT;
 800241e:	4b2b      	ldr	r3, [pc, #172]	; (80024cc <Do_Action+0x168>)
 8002420:	2204      	movs	r2, #4
 8002422:	701a      	strb	r2, [r3, #0]
				return state;
 8002424:	4b29      	ldr	r3, [pc, #164]	; (80024cc <Do_Action+0x168>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	e047      	b.n	80024ba <Do_Action+0x156>
			}

			if((strcmp((char*)cmd.good_answer, (char*)uart_data) == 0) || strcmp((char*)cmd.good_answer, "ANY") == 0){ 		// if the reply is OK, return success
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800242e:	4618      	mov	r0, r3
 8002430:	f7fd fea4 	bl	800017c <strcmp>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d007      	beq.n	800244a <Do_Action+0xe6>
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	4927      	ldr	r1, [pc, #156]	; (80024dc <Do_Action+0x178>)
 800243e:	4618      	mov	r0, r3
 8002440:	f7fd fe9c 	bl	800017c <strcmp>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d105      	bne.n	8002456 <Do_Action+0xf2>
				state = GOOD_ANSWER;
 800244a:	4b20      	ldr	r3, [pc, #128]	; (80024cc <Do_Action+0x168>)
 800244c:	2202      	movs	r2, #2
 800244e:	701a      	strb	r2, [r3, #0]
				return state;
 8002450:	4b1e      	ldr	r3, [pc, #120]	; (80024cc <Do_Action+0x168>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	e031      	b.n	80024ba <Do_Action+0x156>
			}else if(strcmp((char*)cmd.bad_answer, (char*)uart_data) == 0){	// if the reply suggest an error...
 8002456:	6a3b      	ldr	r3, [r7, #32]
 8002458:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800245a:	4618      	mov	r0, r3
 800245c:	f7fd fe8e 	bl	800017c <strcmp>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d127      	bne.n	80024b6 <Do_Action+0x152>
				state = BAD_ANSWER;
 8002466:	4b19      	ldr	r3, [pc, #100]	; (80024cc <Do_Action+0x168>)
 8002468:	2203      	movs	r2, #3
 800246a:	701a      	strb	r2, [r3, #0]
				if(retry < cmd.retry_counter){				// retry if structure suggest that behaviour
 800246c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800246e:	461a      	mov	r2, r3
 8002470:	4b18      	ldr	r3, [pc, #96]	; (80024d4 <Do_Action+0x170>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	429a      	cmp	r2, r3
 8002476:	d915      	bls.n	80024a4 <Do_Action+0x140>
					retry++;
 8002478:	4b16      	ldr	r3, [pc, #88]	; (80024d4 <Do_Action+0x170>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	3301      	adds	r3, #1
 800247e:	4a15      	ldr	r2, [pc, #84]	; (80024d4 <Do_Action+0x170>)
 8002480:	6013      	str	r3, [r2, #0]
					Do_Action(cmd, uart_data);
 8002482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002484:	9303      	str	r3, [sp, #12]
 8002486:	466c      	mov	r4, sp
 8002488:	f107 0320 	add.w	r3, r7, #32
 800248c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002490:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002494:	f107 0310 	add.w	r3, r7, #16
 8002498:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800249a:	f7ff ff63 	bl	8002364 <Do_Action>
				}else{										// if retries still give an error, or no replies suggested, report error
					retry = 0;
					state = BAD_ANSWER;
					return state;
				}
				return state;
 800249e:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <Do_Action+0x168>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	e00a      	b.n	80024ba <Do_Action+0x156>
					retry = 0;
 80024a4:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <Do_Action+0x170>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	601a      	str	r2, [r3, #0]
					state = BAD_ANSWER;
 80024aa:	4b08      	ldr	r3, [pc, #32]	; (80024cc <Do_Action+0x168>)
 80024ac:	2203      	movs	r2, #3
 80024ae:	701a      	strb	r2, [r3, #0]
					return state;
 80024b0:	4b06      	ldr	r3, [pc, #24]	; (80024cc <Do_Action+0x168>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	e001      	b.n	80024ba <Do_Action+0x156>
			}
		}
	}

	return state;
 80024b6:	4b05      	ldr	r3, [pc, #20]	; (80024cc <Do_Action+0x168>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3704      	adds	r7, #4
 80024be:	46bd      	mov	sp, r7
 80024c0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80024c4:	b004      	add	sp, #16
 80024c6:	4770      	bx	lr
 80024c8:	08006acc 	.word	0x08006acc
 80024cc:	20003c7d 	.word	0x20003c7d
 80024d0:	08006ad4 	.word	0x08006ad4
 80024d4:	20003c80 	.word	0x20003c80
 80024d8:	20003c84 	.word	0x20003c84
 80024dc:	08006ae4 	.word	0x08006ae4

080024e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80024e6:	4b15      	ldr	r3, [pc, #84]	; (800253c <HAL_MspInit+0x5c>)
 80024e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ea:	4a14      	ldr	r2, [pc, #80]	; (800253c <HAL_MspInit+0x5c>)
 80024ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024f0:	6253      	str	r3, [r2, #36]	; 0x24
 80024f2:	4b12      	ldr	r3, [pc, #72]	; (800253c <HAL_MspInit+0x5c>)
 80024f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024fe:	4b0f      	ldr	r3, [pc, #60]	; (800253c <HAL_MspInit+0x5c>)
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	4a0e      	ldr	r2, [pc, #56]	; (800253c <HAL_MspInit+0x5c>)
 8002504:	f043 0301 	orr.w	r3, r3, #1
 8002508:	6213      	str	r3, [r2, #32]
 800250a:	4b0c      	ldr	r3, [pc, #48]	; (800253c <HAL_MspInit+0x5c>)
 800250c:	6a1b      	ldr	r3, [r3, #32]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	60bb      	str	r3, [r7, #8]
 8002514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002516:	4b09      	ldr	r3, [pc, #36]	; (800253c <HAL_MspInit+0x5c>)
 8002518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251a:	4a08      	ldr	r2, [pc, #32]	; (800253c <HAL_MspInit+0x5c>)
 800251c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002520:	6253      	str	r3, [r2, #36]	; 0x24
 8002522:	4b06      	ldr	r3, [pc, #24]	; (800253c <HAL_MspInit+0x5c>)
 8002524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252a:	607b      	str	r3, [r7, #4]
 800252c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800252e:	2007      	movs	r0, #7
 8002530:	f000 ff66 	bl	8003400 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002534:	bf00      	nop
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40023800 	.word	0x40023800

08002540 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b08a      	sub	sp, #40	; 0x28
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002548:	f107 0314 	add.w	r3, r7, #20
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	605a      	str	r2, [r3, #4]
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	60da      	str	r2, [r3, #12]
 8002556:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a15      	ldr	r2, [pc, #84]	; (80025b4 <HAL_ADC_MspInit+0x74>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d123      	bne.n	80025aa <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002562:	4b15      	ldr	r3, [pc, #84]	; (80025b8 <HAL_ADC_MspInit+0x78>)
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	4a14      	ldr	r2, [pc, #80]	; (80025b8 <HAL_ADC_MspInit+0x78>)
 8002568:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800256c:	6213      	str	r3, [r2, #32]
 800256e:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <HAL_ADC_MspInit+0x78>)
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002576:	613b      	str	r3, [r7, #16]
 8002578:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800257a:	4b0f      	ldr	r3, [pc, #60]	; (80025b8 <HAL_ADC_MspInit+0x78>)
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	4a0e      	ldr	r2, [pc, #56]	; (80025b8 <HAL_ADC_MspInit+0x78>)
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	61d3      	str	r3, [r2, #28]
 8002586:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <HAL_ADC_MspInit+0x78>)
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002592:	2301      	movs	r3, #1
 8002594:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002596:	2303      	movs	r3, #3
 8002598:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259a:	2300      	movs	r3, #0
 800259c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800259e:	f107 0314 	add.w	r3, r7, #20
 80025a2:	4619      	mov	r1, r3
 80025a4:	4805      	ldr	r0, [pc, #20]	; (80025bc <HAL_ADC_MspInit+0x7c>)
 80025a6:	f001 f871 	bl	800368c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80025aa:	bf00      	nop
 80025ac:	3728      	adds	r7, #40	; 0x28
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40012400 	.word	0x40012400
 80025b8:	40023800 	.word	0x40023800
 80025bc:	40020000 	.word	0x40020000

080025c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b092      	sub	sp, #72	; 0x48
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	609a      	str	r2, [r3, #8]
 80025d4:	60da      	str	r2, [r3, #12]
 80025d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a98      	ldr	r2, [pc, #608]	; (8002840 <HAL_UART_MspInit+0x280>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d129      	bne.n	8002636 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80025e2:	4b98      	ldr	r3, [pc, #608]	; (8002844 <HAL_UART_MspInit+0x284>)
 80025e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e6:	4a97      	ldr	r2, [pc, #604]	; (8002844 <HAL_UART_MspInit+0x284>)
 80025e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80025ec:	6253      	str	r3, [r2, #36]	; 0x24
 80025ee:	4b95      	ldr	r3, [pc, #596]	; (8002844 <HAL_UART_MspInit+0x284>)
 80025f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025f6:	633b      	str	r3, [r7, #48]	; 0x30
 80025f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025fa:	4b92      	ldr	r3, [pc, #584]	; (8002844 <HAL_UART_MspInit+0x284>)
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	4a91      	ldr	r2, [pc, #580]	; (8002844 <HAL_UART_MspInit+0x284>)
 8002600:	f043 0304 	orr.w	r3, r3, #4
 8002604:	61d3      	str	r3, [r2, #28]
 8002606:	4b8f      	ldr	r3, [pc, #572]	; (8002844 <HAL_UART_MspInit+0x284>)
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	f003 0304 	and.w	r3, r3, #4
 800260e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002612:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002616:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002618:	2302      	movs	r3, #2
 800261a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800261c:	2301      	movs	r3, #1
 800261e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002620:	2303      	movs	r3, #3
 8002622:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002624:	2308      	movs	r3, #8
 8002626:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002628:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800262c:	4619      	mov	r1, r3
 800262e:	4886      	ldr	r0, [pc, #536]	; (8002848 <HAL_UART_MspInit+0x288>)
 8002630:	f001 f82c 	bl	800368c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002634:	e178      	b.n	8002928 <HAL_UART_MspInit+0x368>
  else if(huart->Instance==UART5)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a84      	ldr	r2, [pc, #528]	; (800284c <HAL_UART_MspInit+0x28c>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d145      	bne.n	80026cc <HAL_UART_MspInit+0x10c>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002640:	4b80      	ldr	r3, [pc, #512]	; (8002844 <HAL_UART_MspInit+0x284>)
 8002642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002644:	4a7f      	ldr	r2, [pc, #508]	; (8002844 <HAL_UART_MspInit+0x284>)
 8002646:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800264a:	6253      	str	r3, [r2, #36]	; 0x24
 800264c:	4b7d      	ldr	r3, [pc, #500]	; (8002844 <HAL_UART_MspInit+0x284>)
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002654:	62bb      	str	r3, [r7, #40]	; 0x28
 8002656:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002658:	4b7a      	ldr	r3, [pc, #488]	; (8002844 <HAL_UART_MspInit+0x284>)
 800265a:	69db      	ldr	r3, [r3, #28]
 800265c:	4a79      	ldr	r2, [pc, #484]	; (8002844 <HAL_UART_MspInit+0x284>)
 800265e:	f043 0304 	orr.w	r3, r3, #4
 8002662:	61d3      	str	r3, [r2, #28]
 8002664:	4b77      	ldr	r3, [pc, #476]	; (8002844 <HAL_UART_MspInit+0x284>)
 8002666:	69db      	ldr	r3, [r3, #28]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	627b      	str	r3, [r7, #36]	; 0x24
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002670:	4b74      	ldr	r3, [pc, #464]	; (8002844 <HAL_UART_MspInit+0x284>)
 8002672:	69db      	ldr	r3, [r3, #28]
 8002674:	4a73      	ldr	r2, [pc, #460]	; (8002844 <HAL_UART_MspInit+0x284>)
 8002676:	f043 0308 	orr.w	r3, r3, #8
 800267a:	61d3      	str	r3, [r2, #28]
 800267c:	4b71      	ldr	r3, [pc, #452]	; (8002844 <HAL_UART_MspInit+0x284>)
 800267e:	69db      	ldr	r3, [r3, #28]
 8002680:	f003 0308 	and.w	r3, r3, #8
 8002684:	623b      	str	r3, [r7, #32]
 8002686:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800268c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268e:	2302      	movs	r3, #2
 8002690:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002692:	2301      	movs	r3, #1
 8002694:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002696:	2303      	movs	r3, #3
 8002698:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800269a:	2308      	movs	r3, #8
 800269c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800269e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026a2:	4619      	mov	r1, r3
 80026a4:	4868      	ldr	r0, [pc, #416]	; (8002848 <HAL_UART_MspInit+0x288>)
 80026a6:	f000 fff1 	bl	800368c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80026aa:	2304      	movs	r3, #4
 80026ac:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ae:	2302      	movs	r3, #2
 80026b0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026b2:	2301      	movs	r3, #1
 80026b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b6:	2303      	movs	r3, #3
 80026b8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80026ba:	2308      	movs	r3, #8
 80026bc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026c2:	4619      	mov	r1, r3
 80026c4:	4862      	ldr	r0, [pc, #392]	; (8002850 <HAL_UART_MspInit+0x290>)
 80026c6:	f000 ffe1 	bl	800368c <HAL_GPIO_Init>
}
 80026ca:	e12d      	b.n	8002928 <HAL_UART_MspInit+0x368>
  else if(huart->Instance==USART1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a60      	ldr	r2, [pc, #384]	; (8002854 <HAL_UART_MspInit+0x294>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d157      	bne.n	8002786 <HAL_UART_MspInit+0x1c6>
    __HAL_RCC_USART1_CLK_ENABLE();
 80026d6:	4b5b      	ldr	r3, [pc, #364]	; (8002844 <HAL_UART_MspInit+0x284>)
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	4a5a      	ldr	r2, [pc, #360]	; (8002844 <HAL_UART_MspInit+0x284>)
 80026dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026e0:	6213      	str	r3, [r2, #32]
 80026e2:	4b58      	ldr	r3, [pc, #352]	; (8002844 <HAL_UART_MspInit+0x284>)
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ea:	61fb      	str	r3, [r7, #28]
 80026ec:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ee:	4b55      	ldr	r3, [pc, #340]	; (8002844 <HAL_UART_MspInit+0x284>)
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	4a54      	ldr	r2, [pc, #336]	; (8002844 <HAL_UART_MspInit+0x284>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	61d3      	str	r3, [r2, #28]
 80026fa:	4b52      	ldr	r3, [pc, #328]	; (8002844 <HAL_UART_MspInit+0x284>)
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	61bb      	str	r3, [r7, #24]
 8002704:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002706:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800270a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270c:	2302      	movs	r3, #2
 800270e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002710:	2300      	movs	r3, #0
 8002712:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002714:	2303      	movs	r3, #3
 8002716:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002718:	2307      	movs	r3, #7
 800271a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800271c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002720:	4619      	mov	r1, r3
 8002722:	484d      	ldr	r0, [pc, #308]	; (8002858 <HAL_UART_MspInit+0x298>)
 8002724:	f000 ffb2 	bl	800368c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002728:	4b4c      	ldr	r3, [pc, #304]	; (800285c <HAL_UART_MspInit+0x29c>)
 800272a:	4a4d      	ldr	r2, [pc, #308]	; (8002860 <HAL_UART_MspInit+0x2a0>)
 800272c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800272e:	4b4b      	ldr	r3, [pc, #300]	; (800285c <HAL_UART_MspInit+0x29c>)
 8002730:	2200      	movs	r2, #0
 8002732:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002734:	4b49      	ldr	r3, [pc, #292]	; (800285c <HAL_UART_MspInit+0x29c>)
 8002736:	2200      	movs	r2, #0
 8002738:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800273a:	4b48      	ldr	r3, [pc, #288]	; (800285c <HAL_UART_MspInit+0x29c>)
 800273c:	2280      	movs	r2, #128	; 0x80
 800273e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002740:	4b46      	ldr	r3, [pc, #280]	; (800285c <HAL_UART_MspInit+0x29c>)
 8002742:	2200      	movs	r2, #0
 8002744:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002746:	4b45      	ldr	r3, [pc, #276]	; (800285c <HAL_UART_MspInit+0x29c>)
 8002748:	2200      	movs	r2, #0
 800274a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800274c:	4b43      	ldr	r3, [pc, #268]	; (800285c <HAL_UART_MspInit+0x29c>)
 800274e:	2200      	movs	r2, #0
 8002750:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002752:	4b42      	ldr	r3, [pc, #264]	; (800285c <HAL_UART_MspInit+0x29c>)
 8002754:	2200      	movs	r2, #0
 8002756:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002758:	4840      	ldr	r0, [pc, #256]	; (800285c <HAL_UART_MspInit+0x29c>)
 800275a:	f000 fe93 	bl	8003484 <HAL_DMA_Init>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8002764:	f7ff fce4 	bl	8002130 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a3c      	ldr	r2, [pc, #240]	; (800285c <HAL_UART_MspInit+0x29c>)
 800276c:	63da      	str	r2, [r3, #60]	; 0x3c
 800276e:	4a3b      	ldr	r2, [pc, #236]	; (800285c <HAL_UART_MspInit+0x29c>)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002774:	2200      	movs	r2, #0
 8002776:	2100      	movs	r1, #0
 8002778:	2025      	movs	r0, #37	; 0x25
 800277a:	f000 fe4c 	bl	8003416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800277e:	2025      	movs	r0, #37	; 0x25
 8002780:	f000 fe65 	bl	800344e <HAL_NVIC_EnableIRQ>
}
 8002784:	e0d0      	b.n	8002928 <HAL_UART_MspInit+0x368>
  else if(huart->Instance==USART2)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a36      	ldr	r2, [pc, #216]	; (8002864 <HAL_UART_MspInit+0x2a4>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d16f      	bne.n	8002870 <HAL_UART_MspInit+0x2b0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002790:	4b2c      	ldr	r3, [pc, #176]	; (8002844 <HAL_UART_MspInit+0x284>)
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	4a2b      	ldr	r2, [pc, #172]	; (8002844 <HAL_UART_MspInit+0x284>)
 8002796:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800279a:	6253      	str	r3, [r2, #36]	; 0x24
 800279c:	4b29      	ldr	r3, [pc, #164]	; (8002844 <HAL_UART_MspInit+0x284>)
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a4:	617b      	str	r3, [r7, #20]
 80027a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a8:	4b26      	ldr	r3, [pc, #152]	; (8002844 <HAL_UART_MspInit+0x284>)
 80027aa:	69db      	ldr	r3, [r3, #28]
 80027ac:	4a25      	ldr	r2, [pc, #148]	; (8002844 <HAL_UART_MspInit+0x284>)
 80027ae:	f043 0301 	orr.w	r3, r3, #1
 80027b2:	61d3      	str	r3, [r2, #28]
 80027b4:	4b23      	ldr	r3, [pc, #140]	; (8002844 <HAL_UART_MspInit+0x284>)
 80027b6:	69db      	ldr	r3, [r3, #28]
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	613b      	str	r3, [r7, #16]
 80027be:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80027c0:	230c      	movs	r3, #12
 80027c2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c4:	2302      	movs	r3, #2
 80027c6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c8:	2300      	movs	r3, #0
 80027ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027cc:	2303      	movs	r3, #3
 80027ce:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027d0:	2307      	movs	r3, #7
 80027d2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80027d8:	4619      	mov	r1, r3
 80027da:	481f      	ldr	r0, [pc, #124]	; (8002858 <HAL_UART_MspInit+0x298>)
 80027dc:	f000 ff56 	bl	800368c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80027e0:	4b21      	ldr	r3, [pc, #132]	; (8002868 <HAL_UART_MspInit+0x2a8>)
 80027e2:	4a22      	ldr	r2, [pc, #136]	; (800286c <HAL_UART_MspInit+0x2ac>)
 80027e4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027e6:	4b20      	ldr	r3, [pc, #128]	; (8002868 <HAL_UART_MspInit+0x2a8>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027ec:	4b1e      	ldr	r3, [pc, #120]	; (8002868 <HAL_UART_MspInit+0x2a8>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027f2:	4b1d      	ldr	r3, [pc, #116]	; (8002868 <HAL_UART_MspInit+0x2a8>)
 80027f4:	2280      	movs	r2, #128	; 0x80
 80027f6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027f8:	4b1b      	ldr	r3, [pc, #108]	; (8002868 <HAL_UART_MspInit+0x2a8>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027fe:	4b1a      	ldr	r3, [pc, #104]	; (8002868 <HAL_UART_MspInit+0x2a8>)
 8002800:	2200      	movs	r2, #0
 8002802:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002804:	4b18      	ldr	r3, [pc, #96]	; (8002868 <HAL_UART_MspInit+0x2a8>)
 8002806:	2200      	movs	r2, #0
 8002808:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800280a:	4b17      	ldr	r3, [pc, #92]	; (8002868 <HAL_UART_MspInit+0x2a8>)
 800280c:	2200      	movs	r2, #0
 800280e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002810:	4815      	ldr	r0, [pc, #84]	; (8002868 <HAL_UART_MspInit+0x2a8>)
 8002812:	f000 fe37 	bl	8003484 <HAL_DMA_Init>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <HAL_UART_MspInit+0x260>
      Error_Handler();
 800281c:	f7ff fc88 	bl	8002130 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a11      	ldr	r2, [pc, #68]	; (8002868 <HAL_UART_MspInit+0x2a8>)
 8002824:	63da      	str	r2, [r3, #60]	; 0x3c
 8002826:	4a10      	ldr	r2, [pc, #64]	; (8002868 <HAL_UART_MspInit+0x2a8>)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800282c:	2200      	movs	r2, #0
 800282e:	2100      	movs	r1, #0
 8002830:	2026      	movs	r0, #38	; 0x26
 8002832:	f000 fdf0 	bl	8003416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002836:	2026      	movs	r0, #38	; 0x26
 8002838:	f000 fe09 	bl	800344e <HAL_NVIC_EnableIRQ>
}
 800283c:	e074      	b.n	8002928 <HAL_UART_MspInit+0x368>
 800283e:	bf00      	nop
 8002840:	40004c00 	.word	0x40004c00
 8002844:	40023800 	.word	0x40023800
 8002848:	40020800 	.word	0x40020800
 800284c:	40005000 	.word	0x40005000
 8002850:	40020c00 	.word	0x40020c00
 8002854:	40013800 	.word	0x40013800
 8002858:	40020000 	.word	0x40020000
 800285c:	20002b9c 	.word	0x20002b9c
 8002860:	40026058 	.word	0x40026058
 8002864:	40004400 	.word	0x40004400
 8002868:	20002be0 	.word	0x20002be0
 800286c:	4002606c 	.word	0x4002606c
  else if(huart->Instance==USART3)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a2e      	ldr	r2, [pc, #184]	; (8002930 <HAL_UART_MspInit+0x370>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d156      	bne.n	8002928 <HAL_UART_MspInit+0x368>
    __HAL_RCC_USART3_CLK_ENABLE();
 800287a:	4b2e      	ldr	r3, [pc, #184]	; (8002934 <HAL_UART_MspInit+0x374>)
 800287c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287e:	4a2d      	ldr	r2, [pc, #180]	; (8002934 <HAL_UART_MspInit+0x374>)
 8002880:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002884:	6253      	str	r3, [r2, #36]	; 0x24
 8002886:	4b2b      	ldr	r3, [pc, #172]	; (8002934 <HAL_UART_MspInit+0x374>)
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002892:	4b28      	ldr	r3, [pc, #160]	; (8002934 <HAL_UART_MspInit+0x374>)
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	4a27      	ldr	r2, [pc, #156]	; (8002934 <HAL_UART_MspInit+0x374>)
 8002898:	f043 0302 	orr.w	r3, r3, #2
 800289c:	61d3      	str	r3, [r2, #28]
 800289e:	4b25      	ldr	r3, [pc, #148]	; (8002934 <HAL_UART_MspInit+0x374>)
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	60bb      	str	r3, [r7, #8]
 80028a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80028aa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80028ae:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b0:	2302      	movs	r3, #2
 80028b2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b4:	2300      	movs	r3, #0
 80028b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b8:	2303      	movs	r3, #3
 80028ba:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80028bc:	2307      	movs	r3, #7
 80028be:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028c4:	4619      	mov	r1, r3
 80028c6:	481c      	ldr	r0, [pc, #112]	; (8002938 <HAL_UART_MspInit+0x378>)
 80028c8:	f000 fee0 	bl	800368c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80028cc:	4b1b      	ldr	r3, [pc, #108]	; (800293c <HAL_UART_MspInit+0x37c>)
 80028ce:	4a1c      	ldr	r2, [pc, #112]	; (8002940 <HAL_UART_MspInit+0x380>)
 80028d0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028d2:	4b1a      	ldr	r3, [pc, #104]	; (800293c <HAL_UART_MspInit+0x37c>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028d8:	4b18      	ldr	r3, [pc, #96]	; (800293c <HAL_UART_MspInit+0x37c>)
 80028da:	2200      	movs	r2, #0
 80028dc:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028de:	4b17      	ldr	r3, [pc, #92]	; (800293c <HAL_UART_MspInit+0x37c>)
 80028e0:	2280      	movs	r2, #128	; 0x80
 80028e2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028e4:	4b15      	ldr	r3, [pc, #84]	; (800293c <HAL_UART_MspInit+0x37c>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028ea:	4b14      	ldr	r3, [pc, #80]	; (800293c <HAL_UART_MspInit+0x37c>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80028f0:	4b12      	ldr	r3, [pc, #72]	; (800293c <HAL_UART_MspInit+0x37c>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80028f6:	4b11      	ldr	r3, [pc, #68]	; (800293c <HAL_UART_MspInit+0x37c>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80028fc:	480f      	ldr	r0, [pc, #60]	; (800293c <HAL_UART_MspInit+0x37c>)
 80028fe:	f000 fdc1 	bl	8003484 <HAL_DMA_Init>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <HAL_UART_MspInit+0x34c>
      Error_Handler();
 8002908:	f7ff fc12 	bl	8002130 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a0b      	ldr	r2, [pc, #44]	; (800293c <HAL_UART_MspInit+0x37c>)
 8002910:	63da      	str	r2, [r3, #60]	; 0x3c
 8002912:	4a0a      	ldr	r2, [pc, #40]	; (800293c <HAL_UART_MspInit+0x37c>)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002918:	2200      	movs	r2, #0
 800291a:	2100      	movs	r1, #0
 800291c:	2027      	movs	r0, #39	; 0x27
 800291e:	f000 fd7a 	bl	8003416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002922:	2027      	movs	r0, #39	; 0x27
 8002924:	f000 fd93 	bl	800344e <HAL_NVIC_EnableIRQ>
}
 8002928:	bf00      	nop
 800292a:	3748      	adds	r7, #72	; 0x48
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40004800 	.word	0x40004800
 8002934:	40023800 	.word	0x40023800
 8002938:	40020400 	.word	0x40020400
 800293c:	20002c24 	.word	0x20002c24
 8002940:	40026030 	.word	0x40026030

08002944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002948:	e7fe      	b.n	8002948 <NMI_Handler+0x4>

0800294a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800294a:	b480      	push	{r7}
 800294c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800294e:	e7fe      	b.n	800294e <HardFault_Handler+0x4>

08002950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002954:	e7fe      	b.n	8002954 <MemManage_Handler+0x4>

08002956 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002956:	b480      	push	{r7}
 8002958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800295a:	e7fe      	b.n	800295a <BusFault_Handler+0x4>

0800295c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002960:	e7fe      	b.n	8002960 <UsageFault_Handler+0x4>

08002962 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002962:	b480      	push	{r7}
 8002964:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002966:	bf00      	nop
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr

0800296e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800296e:	b480      	push	{r7}
 8002970:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002972:	bf00      	nop
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr

0800297a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800297a:	b480      	push	{r7}
 800297c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800297e:	bf00      	nop
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr

08002986 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800298a:	f000 f97d 	bl	8002c88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800298e:	bf00      	nop
 8002990:	bd80      	pop	{r7, pc}
	...

08002994 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */
	  UARTDMA_DmaIrqHandler(&hRAM_2_uart3dma3);
 8002998:	4802      	ldr	r0, [pc, #8]	; (80029a4 <DMA1_Channel3_IRQHandler+0x10>)
 800299a:	f7fd fdb0 	bl	80004fe <UARTDMA_DmaIrqHandler>
	  return;
 800299e:	bf00      	nop
  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	20001dd4 	.word	0x20001dd4

080029a8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */
	  UARTDMA_DmaIrqHandler(&hRAM_1_uart1dma5);
 80029ac:	4802      	ldr	r0, [pc, #8]	; (80029b8 <DMA1_Channel5_IRQHandler+0x10>)
 80029ae:	f7fd fda6 	bl	80004fe <UARTDMA_DmaIrqHandler>
	  return;
 80029b2:	bf00      	nop
  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	200011c8 	.word	0x200011c8

080029bc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
  UARTDMA_DmaIrqHandler(&hLTE_uart2dma6);
 80029c0:	4802      	ldr	r0, [pc, #8]	; (80029cc <DMA1_Channel6_IRQHandler+0x10>)
 80029c2:	f7fd fd9c 	bl	80004fe <UARTDMA_DmaIrqHandler>
  return;
 80029c6:	bf00      	nop
  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	200005bc 	.word	0x200005bc

080029d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	  UARTDMA_UartIrqHandler(&hRAM_1_uart1dma5);
 80029d4:	4802      	ldr	r0, [pc, #8]	; (80029e0 <USART1_IRQHandler+0x10>)
 80029d6:	f7fd fd67 	bl	80004a8 <UARTDMA_UartIrqHandler>
	  return;
 80029da:	bf00      	nop
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	200011c8 	.word	0x200011c8

080029e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  UARTDMA_UartIrqHandler(&hLTE_uart2dma6);
 80029e8:	4802      	ldr	r0, [pc, #8]	; (80029f4 <USART2_IRQHandler+0x10>)
 80029ea:	f7fd fd5d 	bl	80004a8 <UARTDMA_UartIrqHandler>
  return;
 80029ee:	bf00      	nop
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	200005bc 	.word	0x200005bc

080029f8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	  UARTDMA_UartIrqHandler(&hRAM_2_uart3dma3);
 80029fc:	4802      	ldr	r0, [pc, #8]	; (8002a08 <USART3_IRQHandler+0x10>)
 80029fe:	f7fd fd53 	bl	80004a8 <UARTDMA_UartIrqHandler>
	  return;
 8002a02:	bf00      	nop
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	20001dd4 	.word	0x20001dd4

08002a0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  return 1;
 8002a10:	2301      	movs	r3, #1
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc80      	pop	{r7}
 8002a18:	4770      	bx	lr

08002a1a <_kill>:

int _kill(int pid, int sig)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b082      	sub	sp, #8
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
 8002a22:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a24:	f002 fa80 	bl	8004f28 <__errno>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2216      	movs	r2, #22
 8002a2c:	601a      	str	r2, [r3, #0]
  return -1;
 8002a2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <_exit>:

void _exit (int status)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b082      	sub	sp, #8
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a42:	f04f 31ff 	mov.w	r1, #4294967295
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7ff ffe7 	bl	8002a1a <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a4c:	e7fe      	b.n	8002a4c <_exit+0x12>

08002a4e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b086      	sub	sp, #24
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	60f8      	str	r0, [r7, #12]
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
 8002a5e:	e00a      	b.n	8002a76 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a60:	f3af 8000 	nop.w
 8002a64:	4601      	mov	r1, r0
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	1c5a      	adds	r2, r3, #1
 8002a6a:	60ba      	str	r2, [r7, #8]
 8002a6c:	b2ca      	uxtb	r2, r1
 8002a6e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	3301      	adds	r3, #1
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	dbf0      	blt.n	8002a60 <_read+0x12>
  }

  return len;
 8002a7e:	687b      	ldr	r3, [r7, #4]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a94:	2300      	movs	r3, #0
 8002a96:	617b      	str	r3, [r7, #20]
 8002a98:	e009      	b.n	8002aae <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	1c5a      	adds	r2, r3, #1
 8002a9e:	60ba      	str	r2, [r7, #8]
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7fd fe6a 	bl	800077c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	dbf1      	blt.n	8002a9a <_write+0x12>
  }
  return len;
 8002ab6:	687b      	ldr	r3, [r7, #4]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3718      	adds	r7, #24
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <_close>:

int _close(int file)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ac8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	4770      	bx	lr

08002ad6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
 8002ade:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ae6:	605a      	str	r2, [r3, #4]
  return 0;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr

08002af4 <_isatty>:

int _isatty(int file)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002afc:	2301      	movs	r3, #1
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr

08002b08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr

08002b20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b28:	4a14      	ldr	r2, [pc, #80]	; (8002b7c <_sbrk+0x5c>)
 8002b2a:	4b15      	ldr	r3, [pc, #84]	; (8002b80 <_sbrk+0x60>)
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b34:	4b13      	ldr	r3, [pc, #76]	; (8002b84 <_sbrk+0x64>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d102      	bne.n	8002b42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b3c:	4b11      	ldr	r3, [pc, #68]	; (8002b84 <_sbrk+0x64>)
 8002b3e:	4a12      	ldr	r2, [pc, #72]	; (8002b88 <_sbrk+0x68>)
 8002b40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b42:	4b10      	ldr	r3, [pc, #64]	; (8002b84 <_sbrk+0x64>)
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4413      	add	r3, r2
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d207      	bcs.n	8002b60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b50:	f002 f9ea 	bl	8004f28 <__errno>
 8002b54:	4603      	mov	r3, r0
 8002b56:	220c      	movs	r2, #12
 8002b58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b5e:	e009      	b.n	8002b74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b60:	4b08      	ldr	r3, [pc, #32]	; (8002b84 <_sbrk+0x64>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b66:	4b07      	ldr	r3, [pc, #28]	; (8002b84 <_sbrk+0x64>)
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	4a05      	ldr	r2, [pc, #20]	; (8002b84 <_sbrk+0x64>)
 8002b70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b72:	68fb      	ldr	r3, [r7, #12]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	20014000 	.word	0x20014000
 8002b80:	00000400 	.word	0x00000400
 8002b84:	20003c88 	.word	0x20003c88
 8002b88:	20003ca0 	.word	0x20003ca0

08002b8c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b90:	bf00      	nop
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr

08002b98 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b98:	f7ff fff8 	bl	8002b8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b9c:	480b      	ldr	r0, [pc, #44]	; (8002bcc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002b9e:	490c      	ldr	r1, [pc, #48]	; (8002bd0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002ba0:	4a0c      	ldr	r2, [pc, #48]	; (8002bd4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ba4:	e002      	b.n	8002bac <LoopCopyDataInit>

08002ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002baa:	3304      	adds	r3, #4

08002bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bb0:	d3f9      	bcc.n	8002ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bb2:	4a09      	ldr	r2, [pc, #36]	; (8002bd8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002bb4:	4c09      	ldr	r4, [pc, #36]	; (8002bdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bb8:	e001      	b.n	8002bbe <LoopFillZerobss>

08002bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bbc:	3204      	adds	r2, #4

08002bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bc0:	d3fb      	bcc.n	8002bba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002bc2:	f002 f9b7 	bl	8004f34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002bc6:	f7fd fdeb 	bl	80007a0 <main>
  bx lr
 8002bca:	4770      	bx	lr
  ldr r0, =_sdata
 8002bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bd0:	200005a0 	.word	0x200005a0
  ldr r2, =_sidata
 8002bd4:	08006da8 	.word	0x08006da8
  ldr r2, =_sbss
 8002bd8:	200005a0 	.word	0x200005a0
  ldr r4, =_ebss
 8002bdc:	20003ca0 	.word	0x20003ca0

08002be0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002be0:	e7fe      	b.n	8002be0 <ADC1_IRQHandler>

08002be2 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b082      	sub	sp, #8
 8002be6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002be8:	2300      	movs	r3, #0
 8002bea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bec:	2003      	movs	r0, #3
 8002bee:	f000 fc07 	bl	8003400 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002bf2:	2000      	movs	r0, #0
 8002bf4:	f000 f80e 	bl	8002c14 <HAL_InitTick>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d002      	beq.n	8002c04 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	71fb      	strb	r3, [r7, #7]
 8002c02:	e001      	b.n	8002c08 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c04:	f7ff fc6c 	bl	80024e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c08:	79fb      	ldrb	r3, [r7, #7]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
	...

08002c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002c20:	4b16      	ldr	r3, [pc, #88]	; (8002c7c <HAL_InitTick+0x68>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d022      	beq.n	8002c6e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002c28:	4b15      	ldr	r3, [pc, #84]	; (8002c80 <HAL_InitTick+0x6c>)
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	4b13      	ldr	r3, [pc, #76]	; (8002c7c <HAL_InitTick+0x68>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002c34:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f000 fc14 	bl	800346a <HAL_SYSTICK_Config>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10f      	bne.n	8002c68 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b0f      	cmp	r3, #15
 8002c4c:	d809      	bhi.n	8002c62 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c4e:	2200      	movs	r2, #0
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	f04f 30ff 	mov.w	r0, #4294967295
 8002c56:	f000 fbde 	bl	8003416 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c5a:	4a0a      	ldr	r2, [pc, #40]	; (8002c84 <HAL_InitTick+0x70>)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6013      	str	r3, [r2, #0]
 8002c60:	e007      	b.n	8002c72 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	73fb      	strb	r3, [r7, #15]
 8002c66:	e004      	b.n	8002c72 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	73fb      	strb	r3, [r7, #15]
 8002c6c:	e001      	b.n	8002c72 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	20000538 	.word	0x20000538
 8002c80:	20000530 	.word	0x20000530
 8002c84:	20000534 	.word	0x20000534

08002c88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c8c:	4b05      	ldr	r3, [pc, #20]	; (8002ca4 <HAL_IncTick+0x1c>)
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	4b05      	ldr	r3, [pc, #20]	; (8002ca8 <HAL_IncTick+0x20>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4413      	add	r3, r2
 8002c96:	4a03      	ldr	r2, [pc, #12]	; (8002ca4 <HAL_IncTick+0x1c>)
 8002c98:	6013      	str	r3, [r2, #0]
}
 8002c9a:	bf00      	nop
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bc80      	pop	{r7}
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	20003c8c 	.word	0x20003c8c
 8002ca8:	20000538 	.word	0x20000538

08002cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  return uwTick;
 8002cb0:	4b02      	ldr	r3, [pc, #8]	; (8002cbc <HAL_GetTick+0x10>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr
 8002cbc:	20003c8c 	.word	0x20003c8c

08002cc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cc8:	f7ff fff0 	bl	8002cac <HAL_GetTick>
 8002ccc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd8:	d004      	beq.n	8002ce4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cda:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <HAL_Delay+0x40>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ce4:	bf00      	nop
 8002ce6:	f7ff ffe1 	bl	8002cac <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d8f7      	bhi.n	8002ce6 <HAL_Delay+0x26>
  {
  }
}
 8002cf6:	bf00      	nop
 8002cf8:	bf00      	nop
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	20000538 	.word	0x20000538

08002d04 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b08e      	sub	sp, #56	; 0x38
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8002d12:	2300      	movs	r3, #0
 8002d14:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8002d16:	2300      	movs	r3, #0
 8002d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e127      	b.n	8002f74 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d115      	bne.n	8002d5e <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d40:	4b8e      	ldr	r3, [pc, #568]	; (8002f7c <HAL_ADC_Init+0x278>)
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	4a8d      	ldr	r2, [pc, #564]	; (8002f7c <HAL_ADC_Init+0x278>)
 8002d46:	f043 0301 	orr.w	r3, r3, #1
 8002d4a:	6213      	str	r3, [r2, #32]
 8002d4c:	4b8b      	ldr	r3, [pc, #556]	; (8002f7c <HAL_ADC_Init+0x278>)
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	60bb      	str	r3, [r7, #8]
 8002d56:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f7ff fbf1 	bl	8002540 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d62:	f003 0310 	and.w	r3, r3, #16
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f040 80ff 	bne.w	8002f6a <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d70:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d74:	f023 0302 	bic.w	r3, r3, #2
 8002d78:	f043 0202 	orr.w	r2, r3, #2
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8002d80:	4b7f      	ldr	r3, [pc, #508]	; (8002f80 <HAL_ADC_Init+0x27c>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	497c      	ldr	r1, [pc, #496]	; (8002f80 <HAL_ADC_Init+0x27c>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8002d9a:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002da2:	4619      	mov	r1, r3
 8002da4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002da8:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	fa93 f3a3 	rbit	r3, r3
 8002db0:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	fab3 f383 	clz	r3, r3
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8002dbe:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002dc4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002dcc:	4619      	mov	r1, r3
 8002dce:	2302      	movs	r3, #2
 8002dd0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd4:	fa93 f3a3 	rbit	r3, r3
 8002dd8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ddc:	fab3 f383 	clz	r3, r3
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8002de6:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8002de8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dea:	4313      	orrs	r3, r2
 8002dec:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df2:	2b10      	cmp	r3, #16
 8002df4:	d007      	beq.n	8002e06 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e02:	4313      	orrs	r3, r2
 8002e04:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e10:	2b40      	cmp	r3, #64	; 0x40
 8002e12:	d04f      	beq.n	8002eb4 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002e26:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6912      	ldr	r2, [r2, #16]
 8002e2c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002e30:	d003      	beq.n	8002e3a <HAL_ADC_Init+0x136>
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	6912      	ldr	r2, [r2, #16]
 8002e36:	2a01      	cmp	r2, #1
 8002e38:	d102      	bne.n	8002e40 <HAL_ADC_Init+0x13c>
 8002e3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e3e:	e000      	b.n	8002e42 <HAL_ADC_Init+0x13e>
 8002e40:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8002e42:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e46:	4313      	orrs	r3, r2
 8002e48:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d125      	bne.n	8002ea0 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d114      	bne.n	8002e88 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	3b01      	subs	r3, #1
 8002e64:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8002e68:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	fa92 f2a2 	rbit	r2, r2
 8002e70:	617a      	str	r2, [r7, #20]
  return result;
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	fab2 f282 	clz	r2, r2
 8002e78:	b2d2      	uxtb	r2, r2
 8002e7a:	4093      	lsls	r3, r2
 8002e7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e82:	4313      	orrs	r3, r2
 8002e84:	633b      	str	r3, [r7, #48]	; 0x30
 8002e86:	e00b      	b.n	8002ea0 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e8c:	f043 0220 	orr.w	r2, r3, #32
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e98:	f043 0201 	orr.w	r2, r3, #1
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	4b37      	ldr	r3, [pc, #220]	; (8002f84 <HAL_ADC_Init+0x280>)
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6812      	ldr	r2, [r2, #0]
 8002eae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002eb0:	430b      	orrs	r3, r1
 8002eb2:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689a      	ldr	r2, [r3, #8]
 8002eba:	4b33      	ldr	r3, [pc, #204]	; (8002f88 <HAL_ADC_Init+0x284>)
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	6812      	ldr	r2, [r2, #0]
 8002ec2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ec4:	430b      	orrs	r3, r1
 8002ec6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ed0:	d003      	beq.n	8002eda <HAL_ADC_Init+0x1d6>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d119      	bne.n	8002f0e <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee0:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8002eee:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	fa92 f2a2 	rbit	r2, r2
 8002ef6:	60fa      	str	r2, [r7, #12]
  return result;
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	fab2 f282 	clz	r2, r2
 8002efe:	b2d2      	uxtb	r2, r2
 8002f00:	fa03 f202 	lsl.w	r2, r3, r2
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	631a      	str	r2, [r3, #48]	; 0x30
 8002f0c:	e007      	b.n	8002f1e <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8002f1c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	4b19      	ldr	r3, [pc, #100]	; (8002f8c <HAL_ADC_Init+0x288>)
 8002f26:	4013      	ands	r3, r2
 8002f28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d10b      	bne.n	8002f46 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f38:	f023 0303 	bic.w	r3, r3, #3
 8002f3c:	f043 0201 	orr.w	r2, r3, #1
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	64da      	str	r2, [r3, #76]	; 0x4c
 8002f44:	e014      	b.n	8002f70 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f4a:	f023 0312 	bic.w	r3, r3, #18
 8002f4e:	f043 0210 	orr.w	r2, r3, #16
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f5a:	f043 0201 	orr.w	r2, r3, #1
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002f68:	e002      	b.n	8002f70 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3738      	adds	r7, #56	; 0x38
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	40023800 	.word	0x40023800
 8002f80:	40012700 	.word	0x40012700
 8002f84:	fcfc16ff 	.word	0xfcfc16ff
 8002f88:	c0fff189 	.word	0xc0fff189
 8002f8c:	bf80fffe 	.word	0xbf80fffe

08002f90 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d101      	bne.n	8002fb0 <HAL_ADC_ConfigChannel+0x20>
 8002fac:	2302      	movs	r3, #2
 8002fae:	e14f      	b.n	8003250 <HAL_ADC_ConfigChannel+0x2c0>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2b06      	cmp	r3, #6
 8002fbe:	d81c      	bhi.n	8002ffa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685a      	ldr	r2, [r3, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	3b05      	subs	r3, #5
 8002fd2:	221f      	movs	r2, #31
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	4019      	ands	r1, r3
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	6818      	ldr	r0, [r3, #0]
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	3b05      	subs	r3, #5
 8002fec:	fa00 f203 	lsl.w	r2, r0, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	641a      	str	r2, [r3, #64]	; 0x40
 8002ff8:	e07e      	b.n	80030f8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2b0c      	cmp	r3, #12
 8003000:	d81c      	bhi.n	800303c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	4613      	mov	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	3b23      	subs	r3, #35	; 0x23
 8003014:	221f      	movs	r2, #31
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	43db      	mvns	r3, r3
 800301c:	4019      	ands	r1, r3
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	6818      	ldr	r0, [r3, #0]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685a      	ldr	r2, [r3, #4]
 8003026:	4613      	mov	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4413      	add	r3, r2
 800302c:	3b23      	subs	r3, #35	; 0x23
 800302e:	fa00 f203 	lsl.w	r2, r0, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	63da      	str	r2, [r3, #60]	; 0x3c
 800303a:	e05d      	b.n	80030f8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	2b12      	cmp	r3, #18
 8003042:	d81c      	bhi.n	800307e <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	4613      	mov	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	3b41      	subs	r3, #65	; 0x41
 8003056:	221f      	movs	r2, #31
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	43db      	mvns	r3, r3
 800305e:	4019      	ands	r1, r3
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	6818      	ldr	r0, [r3, #0]
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	4613      	mov	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4413      	add	r3, r2
 800306e:	3b41      	subs	r3, #65	; 0x41
 8003070:	fa00 f203 	lsl.w	r2, r0, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	639a      	str	r2, [r3, #56]	; 0x38
 800307c:	e03c      	b.n	80030f8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b18      	cmp	r3, #24
 8003084:	d81c      	bhi.n	80030c0 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	4613      	mov	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	3b5f      	subs	r3, #95	; 0x5f
 8003098:	221f      	movs	r2, #31
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	43db      	mvns	r3, r3
 80030a0:	4019      	ands	r1, r3
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	6818      	ldr	r0, [r3, #0]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	3b5f      	subs	r3, #95	; 0x5f
 80030b2:	fa00 f203 	lsl.w	r2, r0, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	635a      	str	r2, [r3, #52]	; 0x34
 80030be:	e01b      	b.n	80030f8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685a      	ldr	r2, [r3, #4]
 80030ca:	4613      	mov	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	3b7d      	subs	r3, #125	; 0x7d
 80030d2:	221f      	movs	r2, #31
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	4019      	ands	r1, r3
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	6818      	ldr	r0, [r3, #0]
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	4613      	mov	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	3b7d      	subs	r3, #125	; 0x7d
 80030ec:	fa00 f203 	lsl.w	r2, r0, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2b09      	cmp	r3, #9
 80030fe:	d81a      	bhi.n	8003136 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6959      	ldr	r1, [r3, #20]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	4613      	mov	r3, r2
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	4413      	add	r3, r2
 8003110:	2207      	movs	r2, #7
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	43db      	mvns	r3, r3
 8003118:	4019      	ands	r1, r3
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	6898      	ldr	r0, [r3, #8]
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	4613      	mov	r3, r2
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	4413      	add	r3, r2
 8003128:	fa00 f203 	lsl.w	r2, r0, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	430a      	orrs	r2, r1
 8003132:	615a      	str	r2, [r3, #20]
 8003134:	e05d      	b.n	80031f2 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2b13      	cmp	r3, #19
 800313c:	d81c      	bhi.n	8003178 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	6919      	ldr	r1, [r3, #16]
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	4613      	mov	r3, r2
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	4413      	add	r3, r2
 800314e:	3b1e      	subs	r3, #30
 8003150:	2207      	movs	r2, #7
 8003152:	fa02 f303 	lsl.w	r3, r2, r3
 8003156:	43db      	mvns	r3, r3
 8003158:	4019      	ands	r1, r3
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	6898      	ldr	r0, [r3, #8]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	4613      	mov	r3, r2
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	4413      	add	r3, r2
 8003168:	3b1e      	subs	r3, #30
 800316a:	fa00 f203 	lsl.w	r2, r0, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	611a      	str	r2, [r3, #16]
 8003176:	e03c      	b.n	80031f2 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2b1d      	cmp	r3, #29
 800317e:	d81c      	bhi.n	80031ba <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68d9      	ldr	r1, [r3, #12]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	4613      	mov	r3, r2
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	4413      	add	r3, r2
 8003190:	3b3c      	subs	r3, #60	; 0x3c
 8003192:	2207      	movs	r2, #7
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	43db      	mvns	r3, r3
 800319a:	4019      	ands	r1, r3
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	6898      	ldr	r0, [r3, #8]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	4613      	mov	r3, r2
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	4413      	add	r3, r2
 80031aa:	3b3c      	subs	r3, #60	; 0x3c
 80031ac:	fa00 f203 	lsl.w	r2, r0, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	60da      	str	r2, [r3, #12]
 80031b8:	e01b      	b.n	80031f2 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	4613      	mov	r3, r2
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	4413      	add	r3, r2
 80031ca:	3b5a      	subs	r3, #90	; 0x5a
 80031cc:	2207      	movs	r2, #7
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	43db      	mvns	r3, r3
 80031d4:	4019      	ands	r1, r3
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	6898      	ldr	r0, [r3, #8]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	4613      	mov	r3, r2
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	4413      	add	r3, r2
 80031e4:	3b5a      	subs	r3, #90	; 0x5a
 80031e6:	fa00 f203 	lsl.w	r2, r0, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2b10      	cmp	r3, #16
 80031f8:	d003      	beq.n	8003202 <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80031fe:	2b11      	cmp	r3, #17
 8003200:	d121      	bne.n	8003246 <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8003202:	4b16      	ldr	r3, [pc, #88]	; (800325c <HAL_ADC_ConfigChannel+0x2cc>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d11b      	bne.n	8003246 <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 800320e:	4b13      	ldr	r3, [pc, #76]	; (800325c <HAL_ADC_ConfigChannel+0x2cc>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	4a12      	ldr	r2, [pc, #72]	; (800325c <HAL_ADC_ConfigChannel+0x2cc>)
 8003214:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003218:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2b10      	cmp	r3, #16
 8003220:	d111      	bne.n	8003246 <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003222:	4b0f      	ldr	r3, [pc, #60]	; (8003260 <HAL_ADC_ConfigChannel+0x2d0>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a0f      	ldr	r2, [pc, #60]	; (8003264 <HAL_ADC_ConfigChannel+0x2d4>)
 8003228:	fba2 2303 	umull	r2, r3, r2, r3
 800322c:	0c9a      	lsrs	r2, r3, #18
 800322e:	4613      	mov	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4413      	add	r3, r2
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8003238:	e002      	b.n	8003240 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	3b01      	subs	r3, #1
 800323e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1f9      	bne.n	800323a <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800324e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003250:	4618      	mov	r0, r3
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	bc80      	pop	{r7}
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	40012700 	.word	0x40012700
 8003260:	20000530 	.word	0x20000530
 8003264:	431bde83 	.word	0x431bde83

08003268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f003 0307 	and.w	r3, r3, #7
 8003276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003278:	4b0c      	ldr	r3, [pc, #48]	; (80032ac <__NVIC_SetPriorityGrouping+0x44>)
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003284:	4013      	ands	r3, r2
 8003286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003290:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800329a:	4a04      	ldr	r2, [pc, #16]	; (80032ac <__NVIC_SetPriorityGrouping+0x44>)
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	60d3      	str	r3, [r2, #12]
}
 80032a0:	bf00      	nop
 80032a2:	3714      	adds	r7, #20
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bc80      	pop	{r7}
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	e000ed00 	.word	0xe000ed00

080032b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032b4:	4b04      	ldr	r3, [pc, #16]	; (80032c8 <__NVIC_GetPriorityGrouping+0x18>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	0a1b      	lsrs	r3, r3, #8
 80032ba:	f003 0307 	and.w	r3, r3, #7
}
 80032be:	4618      	mov	r0, r3
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bc80      	pop	{r7}
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	e000ed00 	.word	0xe000ed00

080032cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	4603      	mov	r3, r0
 80032d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	db0b      	blt.n	80032f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032de:	79fb      	ldrb	r3, [r7, #7]
 80032e0:	f003 021f 	and.w	r2, r3, #31
 80032e4:	4906      	ldr	r1, [pc, #24]	; (8003300 <__NVIC_EnableIRQ+0x34>)
 80032e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ea:	095b      	lsrs	r3, r3, #5
 80032ec:	2001      	movs	r0, #1
 80032ee:	fa00 f202 	lsl.w	r2, r0, r2
 80032f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032f6:	bf00      	nop
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bc80      	pop	{r7}
 80032fe:	4770      	bx	lr
 8003300:	e000e100 	.word	0xe000e100

08003304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	4603      	mov	r3, r0
 800330c:	6039      	str	r1, [r7, #0]
 800330e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003314:	2b00      	cmp	r3, #0
 8003316:	db0a      	blt.n	800332e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	b2da      	uxtb	r2, r3
 800331c:	490c      	ldr	r1, [pc, #48]	; (8003350 <__NVIC_SetPriority+0x4c>)
 800331e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003322:	0112      	lsls	r2, r2, #4
 8003324:	b2d2      	uxtb	r2, r2
 8003326:	440b      	add	r3, r1
 8003328:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800332c:	e00a      	b.n	8003344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	b2da      	uxtb	r2, r3
 8003332:	4908      	ldr	r1, [pc, #32]	; (8003354 <__NVIC_SetPriority+0x50>)
 8003334:	79fb      	ldrb	r3, [r7, #7]
 8003336:	f003 030f 	and.w	r3, r3, #15
 800333a:	3b04      	subs	r3, #4
 800333c:	0112      	lsls	r2, r2, #4
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	440b      	add	r3, r1
 8003342:	761a      	strb	r2, [r3, #24]
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	bc80      	pop	{r7}
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	e000e100 	.word	0xe000e100
 8003354:	e000ed00 	.word	0xe000ed00

08003358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003358:	b480      	push	{r7}
 800335a:	b089      	sub	sp, #36	; 0x24
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f003 0307 	and.w	r3, r3, #7
 800336a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f1c3 0307 	rsb	r3, r3, #7
 8003372:	2b04      	cmp	r3, #4
 8003374:	bf28      	it	cs
 8003376:	2304      	movcs	r3, #4
 8003378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	3304      	adds	r3, #4
 800337e:	2b06      	cmp	r3, #6
 8003380:	d902      	bls.n	8003388 <NVIC_EncodePriority+0x30>
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	3b03      	subs	r3, #3
 8003386:	e000      	b.n	800338a <NVIC_EncodePriority+0x32>
 8003388:	2300      	movs	r3, #0
 800338a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800338c:	f04f 32ff 	mov.w	r2, #4294967295
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	43da      	mvns	r2, r3
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	401a      	ands	r2, r3
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033a0:	f04f 31ff 	mov.w	r1, #4294967295
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	fa01 f303 	lsl.w	r3, r1, r3
 80033aa:	43d9      	mvns	r1, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033b0:	4313      	orrs	r3, r2
         );
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3724      	adds	r7, #36	; 0x24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bc80      	pop	{r7}
 80033ba:	4770      	bx	lr

080033bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3b01      	subs	r3, #1
 80033c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033cc:	d301      	bcc.n	80033d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033ce:	2301      	movs	r3, #1
 80033d0:	e00f      	b.n	80033f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033d2:	4a0a      	ldr	r2, [pc, #40]	; (80033fc <SysTick_Config+0x40>)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3b01      	subs	r3, #1
 80033d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033da:	210f      	movs	r1, #15
 80033dc:	f04f 30ff 	mov.w	r0, #4294967295
 80033e0:	f7ff ff90 	bl	8003304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033e4:	4b05      	ldr	r3, [pc, #20]	; (80033fc <SysTick_Config+0x40>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033ea:	4b04      	ldr	r3, [pc, #16]	; (80033fc <SysTick_Config+0x40>)
 80033ec:	2207      	movs	r2, #7
 80033ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	e000e010 	.word	0xe000e010

08003400 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f7ff ff2d 	bl	8003268 <__NVIC_SetPriorityGrouping>
}
 800340e:	bf00      	nop
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b086      	sub	sp, #24
 800341a:	af00      	add	r7, sp, #0
 800341c:	4603      	mov	r3, r0
 800341e:	60b9      	str	r1, [r7, #8]
 8003420:	607a      	str	r2, [r7, #4]
 8003422:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003424:	2300      	movs	r3, #0
 8003426:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003428:	f7ff ff42 	bl	80032b0 <__NVIC_GetPriorityGrouping>
 800342c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	68b9      	ldr	r1, [r7, #8]
 8003432:	6978      	ldr	r0, [r7, #20]
 8003434:	f7ff ff90 	bl	8003358 <NVIC_EncodePriority>
 8003438:	4602      	mov	r2, r0
 800343a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800343e:	4611      	mov	r1, r2
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff ff5f 	bl	8003304 <__NVIC_SetPriority>
}
 8003446:	bf00      	nop
 8003448:	3718      	adds	r7, #24
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b082      	sub	sp, #8
 8003452:	af00      	add	r7, sp, #0
 8003454:	4603      	mov	r3, r0
 8003456:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345c:	4618      	mov	r0, r3
 800345e:	f7ff ff35 	bl	80032cc <__NVIC_EnableIRQ>
}
 8003462:	bf00      	nop
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b082      	sub	sp, #8
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f7ff ffa2 	bl	80033bc <SysTick_Config>
 8003478:	4603      	mov	r3, r0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
	...

08003484 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e059      	b.n	800354a <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	461a      	mov	r2, r3
 800349c:	4b2d      	ldr	r3, [pc, #180]	; (8003554 <HAL_DMA_Init+0xd0>)
 800349e:	429a      	cmp	r2, r3
 80034a0:	d80f      	bhi.n	80034c2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	461a      	mov	r2, r3
 80034a8:	4b2b      	ldr	r3, [pc, #172]	; (8003558 <HAL_DMA_Init+0xd4>)
 80034aa:	4413      	add	r3, r2
 80034ac:	4a2b      	ldr	r2, [pc, #172]	; (800355c <HAL_DMA_Init+0xd8>)
 80034ae:	fba2 2303 	umull	r2, r3, r2, r3
 80034b2:	091b      	lsrs	r3, r3, #4
 80034b4:	009a      	lsls	r2, r3, #2
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a28      	ldr	r2, [pc, #160]	; (8003560 <HAL_DMA_Init+0xdc>)
 80034be:	63da      	str	r2, [r3, #60]	; 0x3c
 80034c0:	e00e      	b.n	80034e0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	461a      	mov	r2, r3
 80034c8:	4b26      	ldr	r3, [pc, #152]	; (8003564 <HAL_DMA_Init+0xe0>)
 80034ca:	4413      	add	r3, r2
 80034cc:	4a23      	ldr	r2, [pc, #140]	; (800355c <HAL_DMA_Init+0xd8>)
 80034ce:	fba2 2303 	umull	r2, r3, r2, r3
 80034d2:	091b      	lsrs	r3, r3, #4
 80034d4:	009a      	lsls	r2, r3, #2
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a22      	ldr	r2, [pc, #136]	; (8003568 <HAL_DMA_Init+0xe4>)
 80034de:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80034f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003504:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003510:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800351c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	4313      	orrs	r3, r2
 8003528:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	bc80      	pop	{r7}
 8003552:	4770      	bx	lr
 8003554:	40026407 	.word	0x40026407
 8003558:	bffd9ff8 	.word	0xbffd9ff8
 800355c:	cccccccd 	.word	0xcccccccd
 8003560:	40026000 	.word	0x40026000
 8003564:	bffd9bf8 	.word	0xbffd9bf8
 8003568:	40026400 	.word	0x40026400

0800356c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
 8003578:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800357a:	2300      	movs	r3, #0
 800357c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d101      	bne.n	800358c <HAL_DMA_Start_IT+0x20>
 8003588:	2302      	movs	r3, #2
 800358a:	e04b      	b.n	8003624 <HAL_DMA_Start_IT+0xb8>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b01      	cmp	r3, #1
 800359e:	d13a      	bne.n	8003616 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2202      	movs	r2, #2
 80035a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 0201 	bic.w	r2, r2, #1
 80035bc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	68b9      	ldr	r1, [r7, #8]
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f000 f831 	bl	800362c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d008      	beq.n	80035e4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f042 020e 	orr.w	r2, r2, #14
 80035e0:	601a      	str	r2, [r3, #0]
 80035e2:	e00f      	b.n	8003604 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 0204 	bic.w	r2, r2, #4
 80035f2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f042 020a 	orr.w	r2, r2, #10
 8003602:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f042 0201 	orr.w	r2, r2, #1
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	e005      	b.n	8003622 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800361e:	2302      	movs	r3, #2
 8003620:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003622:	7dfb      	ldrb	r3, [r7, #23]
}
 8003624:	4618      	mov	r0, r3
 8003626:	3718      	adds	r7, #24
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
 8003638:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	f003 021c 	and.w	r2, r3, #28
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003646:	2101      	movs	r1, #1
 8003648:	fa01 f202 	lsl.w	r2, r1, r2
 800364c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b10      	cmp	r3, #16
 800365c:	d108      	bne.n	8003670 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800366e:	e007      	b.n	8003680 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	60da      	str	r2, [r3, #12]
}
 8003680:	bf00      	nop
 8003682:	3714      	adds	r7, #20
 8003684:	46bd      	mov	sp, r7
 8003686:	bc80      	pop	{r7}
 8003688:	4770      	bx	lr
	...

0800368c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800368c:	b480      	push	{r7}
 800368e:	b087      	sub	sp, #28
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003696:	2300      	movs	r3, #0
 8003698:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800369a:	2300      	movs	r3, #0
 800369c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800369e:	2300      	movs	r3, #0
 80036a0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80036a2:	e160      	b.n	8003966 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	2101      	movs	r1, #1
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	fa01 f303 	lsl.w	r3, r1, r3
 80036b0:	4013      	ands	r3, r2
 80036b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f000 8152 	beq.w	8003960 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f003 0303 	and.w	r3, r3, #3
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d005      	beq.n	80036d4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d130      	bne.n	8003736 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	2203      	movs	r2, #3
 80036e0:	fa02 f303 	lsl.w	r3, r2, r3
 80036e4:	43db      	mvns	r3, r3
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	4013      	ands	r3, r2
 80036ea:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	68da      	ldr	r2, [r3, #12]
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800370a:	2201      	movs	r2, #1
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	fa02 f303 	lsl.w	r3, r2, r3
 8003712:	43db      	mvns	r3, r3
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	4013      	ands	r3, r2
 8003718:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	091b      	lsrs	r3, r3, #4
 8003720:	f003 0201 	and.w	r2, r3, #1
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	fa02 f303 	lsl.w	r3, r2, r3
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	4313      	orrs	r3, r2
 800372e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f003 0303 	and.w	r3, r3, #3
 800373e:	2b03      	cmp	r3, #3
 8003740:	d017      	beq.n	8003772 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	2203      	movs	r2, #3
 800374e:	fa02 f303 	lsl.w	r3, r2, r3
 8003752:	43db      	mvns	r3, r3
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	4013      	ands	r3, r2
 8003758:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	689a      	ldr	r2, [r3, #8]
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	fa02 f303 	lsl.w	r3, r2, r3
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	4313      	orrs	r3, r2
 800376a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d123      	bne.n	80037c6 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	08da      	lsrs	r2, r3, #3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	3208      	adds	r2, #8
 8003786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800378a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f003 0307 	and.w	r3, r3, #7
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	220f      	movs	r2, #15
 8003796:	fa02 f303 	lsl.w	r3, r2, r3
 800379a:	43db      	mvns	r3, r3
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	4013      	ands	r3, r2
 80037a0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	691a      	ldr	r2, [r3, #16]
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	fa02 f303 	lsl.w	r3, r2, r3
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	08da      	lsrs	r2, r3, #3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3208      	adds	r2, #8
 80037c0:	6939      	ldr	r1, [r7, #16]
 80037c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	2203      	movs	r2, #3
 80037d2:	fa02 f303 	lsl.w	r3, r2, r3
 80037d6:	43db      	mvns	r3, r3
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	4013      	ands	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f003 0203 	and.w	r2, r3, #3
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	fa02 f303 	lsl.w	r3, r2, r3
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003802:	2b00      	cmp	r3, #0
 8003804:	f000 80ac 	beq.w	8003960 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003808:	4b5e      	ldr	r3, [pc, #376]	; (8003984 <HAL_GPIO_Init+0x2f8>)
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	4a5d      	ldr	r2, [pc, #372]	; (8003984 <HAL_GPIO_Init+0x2f8>)
 800380e:	f043 0301 	orr.w	r3, r3, #1
 8003812:	6213      	str	r3, [r2, #32]
 8003814:	4b5b      	ldr	r3, [pc, #364]	; (8003984 <HAL_GPIO_Init+0x2f8>)
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	60bb      	str	r3, [r7, #8]
 800381e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8003820:	4a59      	ldr	r2, [pc, #356]	; (8003988 <HAL_GPIO_Init+0x2fc>)
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	089b      	lsrs	r3, r3, #2
 8003826:	3302      	adds	r3, #2
 8003828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800382c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f003 0303 	and.w	r3, r3, #3
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	220f      	movs	r2, #15
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	43db      	mvns	r3, r3
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	4013      	ands	r3, r2
 8003842:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a51      	ldr	r2, [pc, #324]	; (800398c <HAL_GPIO_Init+0x300>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d025      	beq.n	8003898 <HAL_GPIO_Init+0x20c>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a50      	ldr	r2, [pc, #320]	; (8003990 <HAL_GPIO_Init+0x304>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d01f      	beq.n	8003894 <HAL_GPIO_Init+0x208>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a4f      	ldr	r2, [pc, #316]	; (8003994 <HAL_GPIO_Init+0x308>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d019      	beq.n	8003890 <HAL_GPIO_Init+0x204>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a4e      	ldr	r2, [pc, #312]	; (8003998 <HAL_GPIO_Init+0x30c>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d013      	beq.n	800388c <HAL_GPIO_Init+0x200>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a4d      	ldr	r2, [pc, #308]	; (800399c <HAL_GPIO_Init+0x310>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d00d      	beq.n	8003888 <HAL_GPIO_Init+0x1fc>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a4c      	ldr	r2, [pc, #304]	; (80039a0 <HAL_GPIO_Init+0x314>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d007      	beq.n	8003884 <HAL_GPIO_Init+0x1f8>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a4b      	ldr	r2, [pc, #300]	; (80039a4 <HAL_GPIO_Init+0x318>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d101      	bne.n	8003880 <HAL_GPIO_Init+0x1f4>
 800387c:	2306      	movs	r3, #6
 800387e:	e00c      	b.n	800389a <HAL_GPIO_Init+0x20e>
 8003880:	2307      	movs	r3, #7
 8003882:	e00a      	b.n	800389a <HAL_GPIO_Init+0x20e>
 8003884:	2305      	movs	r3, #5
 8003886:	e008      	b.n	800389a <HAL_GPIO_Init+0x20e>
 8003888:	2304      	movs	r3, #4
 800388a:	e006      	b.n	800389a <HAL_GPIO_Init+0x20e>
 800388c:	2303      	movs	r3, #3
 800388e:	e004      	b.n	800389a <HAL_GPIO_Init+0x20e>
 8003890:	2302      	movs	r3, #2
 8003892:	e002      	b.n	800389a <HAL_GPIO_Init+0x20e>
 8003894:	2301      	movs	r3, #1
 8003896:	e000      	b.n	800389a <HAL_GPIO_Init+0x20e>
 8003898:	2300      	movs	r3, #0
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	f002 0203 	and.w	r2, r2, #3
 80038a0:	0092      	lsls	r2, r2, #2
 80038a2:	4093      	lsls	r3, r2
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80038aa:	4937      	ldr	r1, [pc, #220]	; (8003988 <HAL_GPIO_Init+0x2fc>)
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	089b      	lsrs	r3, r3, #2
 80038b0:	3302      	adds	r3, #2
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038b8:	4b3b      	ldr	r3, [pc, #236]	; (80039a8 <HAL_GPIO_Init+0x31c>)
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	43db      	mvns	r3, r3
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	4013      	ands	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d003      	beq.n	80038dc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	4313      	orrs	r3, r2
 80038da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80038dc:	4a32      	ldr	r2, [pc, #200]	; (80039a8 <HAL_GPIO_Init+0x31c>)
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038e2:	4b31      	ldr	r3, [pc, #196]	; (80039a8 <HAL_GPIO_Init+0x31c>)
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	43db      	mvns	r3, r3
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	4013      	ands	r3, r2
 80038f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d003      	beq.n	8003906 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	4313      	orrs	r3, r2
 8003904:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003906:	4a28      	ldr	r2, [pc, #160]	; (80039a8 <HAL_GPIO_Init+0x31c>)
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800390c:	4b26      	ldr	r3, [pc, #152]	; (80039a8 <HAL_GPIO_Init+0x31c>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	43db      	mvns	r3, r3
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	4013      	ands	r3, r2
 800391a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	4313      	orrs	r3, r2
 800392e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003930:	4a1d      	ldr	r2, [pc, #116]	; (80039a8 <HAL_GPIO_Init+0x31c>)
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003936:	4b1c      	ldr	r3, [pc, #112]	; (80039a8 <HAL_GPIO_Init+0x31c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	43db      	mvns	r3, r3
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	4013      	ands	r3, r2
 8003944:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4313      	orrs	r3, r2
 8003958:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800395a:	4a13      	ldr	r2, [pc, #76]	; (80039a8 <HAL_GPIO_Init+0x31c>)
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	3301      	adds	r3, #1
 8003964:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	fa22 f303 	lsr.w	r3, r2, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	f47f ae97 	bne.w	80036a4 <HAL_GPIO_Init+0x18>
  }
}
 8003976:	bf00      	nop
 8003978:	bf00      	nop
 800397a:	371c      	adds	r7, #28
 800397c:	46bd      	mov	sp, r7
 800397e:	bc80      	pop	{r7}
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	40023800 	.word	0x40023800
 8003988:	40010000 	.word	0x40010000
 800398c:	40020000 	.word	0x40020000
 8003990:	40020400 	.word	0x40020400
 8003994:	40020800 	.word	0x40020800
 8003998:	40020c00 	.word	0x40020c00
 800399c:	40021000 	.word	0x40021000
 80039a0:	40021400 	.word	0x40021400
 80039a4:	40021800 	.word	0x40021800
 80039a8:	40010400 	.word	0x40010400

080039ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	460b      	mov	r3, r1
 80039b6:	807b      	strh	r3, [r7, #2]
 80039b8:	4613      	mov	r3, r2
 80039ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039bc:	787b      	ldrb	r3, [r7, #1]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d003      	beq.n	80039ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039c2:	887a      	ldrh	r2, [r7, #2]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80039c8:	e003      	b.n	80039d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80039ca:	887b      	ldrh	r3, [r7, #2]
 80039cc:	041a      	lsls	r2, r3, #16
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	619a      	str	r2, [r3, #24]
}
 80039d2:	bf00      	nop
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bc80      	pop	{r7}
 80039da:	4770      	bx	lr

080039dc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	460b      	mov	r3, r1
 80039e6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80039ee:	887a      	ldrh	r2, [r7, #2]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	4013      	ands	r3, r2
 80039f4:	041a      	lsls	r2, r3, #16
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	43d9      	mvns	r1, r3
 80039fa:	887b      	ldrh	r3, [r7, #2]
 80039fc:	400b      	ands	r3, r1
 80039fe:	431a      	orrs	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	619a      	str	r2, [r3, #24]
}
 8003a04:	bf00      	nop
 8003a06:	3714      	adds	r7, #20
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bc80      	pop	{r7}
 8003a0c:	4770      	bx	lr
	...

08003a10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b088      	sub	sp, #32
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e31d      	b.n	800405e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a22:	4b94      	ldr	r3, [pc, #592]	; (8003c74 <HAL_RCC_OscConfig+0x264>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 030c 	and.w	r3, r3, #12
 8003a2a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a2c:	4b91      	ldr	r3, [pc, #580]	; (8003c74 <HAL_RCC_OscConfig+0x264>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a34:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d07b      	beq.n	8003b3a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	2b08      	cmp	r3, #8
 8003a46:	d006      	beq.n	8003a56 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	2b0c      	cmp	r3, #12
 8003a4c:	d10f      	bne.n	8003a6e <HAL_RCC_OscConfig+0x5e>
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a54:	d10b      	bne.n	8003a6e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a56:	4b87      	ldr	r3, [pc, #540]	; (8003c74 <HAL_RCC_OscConfig+0x264>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d06a      	beq.n	8003b38 <HAL_RCC_OscConfig+0x128>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d166      	bne.n	8003b38 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e2f7      	b.n	800405e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d106      	bne.n	8003a84 <HAL_RCC_OscConfig+0x74>
 8003a76:	4b7f      	ldr	r3, [pc, #508]	; (8003c74 <HAL_RCC_OscConfig+0x264>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a7e      	ldr	r2, [pc, #504]	; (8003c74 <HAL_RCC_OscConfig+0x264>)
 8003a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	e02d      	b.n	8003ae0 <HAL_RCC_OscConfig+0xd0>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10c      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x96>
 8003a8c:	4b79      	ldr	r3, [pc, #484]	; (8003c74 <HAL_RCC_OscConfig+0x264>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a78      	ldr	r2, [pc, #480]	; (8003c74 <HAL_RCC_OscConfig+0x264>)
 8003a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a96:	6013      	str	r3, [r2, #0]
 8003a98:	4b76      	ldr	r3, [pc, #472]	; (8003c74 <HAL_RCC_OscConfig+0x264>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a75      	ldr	r2, [pc, #468]	; (8003c74 <HAL_RCC_OscConfig+0x264>)
 8003a9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aa2:	6013      	str	r3, [r2, #0]
 8003aa4:	e01c      	b.n	8003ae0 <HAL_RCC_OscConfig+0xd0>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2b05      	cmp	r3, #5
 8003aac:	d10c      	bne.n	8003ac8 <HAL_RCC_OscConfig+0xb8>
 8003aae:	4b71      	ldr	r3, [pc, #452]	; (8003c74 <HAL_RCC_OscConfig+0x264>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a70      	ldr	r2, [pc, #448]	; (8003c74 <HAL_RCC_OscConfig+0x264>)
 8003ab4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ab8:	6013      	str	r3, [r2, #0]
 8003aba:	4b6e      	ldr	r3, [pc, #440]	; (8003c74 <HAL_RCC_OscConfig+0x264>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a6d      	ldr	r2, [pc, #436]	; (8003c74 <HAL_RCC_OscConfig+0x264>)
 8003ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ac4:	6013      	str	r3, [r2, #0]
 8003ac6:	e00b      	b.n	8003ae0 <HAL_RCC_OscConfig+0xd0>
 8003ac8:	4b6a      	ldr	r3, [pc, #424]	; (8003c74 <HAL_RCC_OscConfig+0x264>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a69      	ldr	r2, [pc, #420]	; (8003c74 <HAL_RCC_OscConfig+0x264>)
 8003ace:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ad2:	6013      	str	r3, [r2, #0]
 8003ad4:	4b67      	ldr	r3, [pc, #412]	; (8003c74 <HAL_RCC_OscConfig+0x264>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a66      	ldr	r2, [pc, #408]	; (8003c74 <HAL_RCC_OscConfig+0x264>)
 8003ada:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ade:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d013      	beq.n	8003b10 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae8:	f7ff f8e0 	bl	8002cac <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003aee:	e008      	b.n	8003b02 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003af0:	f7ff f8dc 	bl	8002cac <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b64      	cmp	r3, #100	; 0x64
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e2ad      	b.n	800405e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b02:	4b5c      	ldr	r3, [pc, #368]	; (8003c74 <HAL_RCC_OscConfig+0x264>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d0f0      	beq.n	8003af0 <HAL_RCC_OscConfig+0xe0>
 8003b0e:	e014      	b.n	8003b3a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b10:	f7ff f8cc 	bl	8002cac <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b16:	e008      	b.n	8003b2a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b18:	f7ff f8c8 	bl	8002cac <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b64      	cmp	r3, #100	; 0x64
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e299      	b.n	800405e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b2a:	4b52      	ldr	r3, [pc, #328]	; (8003c74 <HAL_RCC_OscConfig+0x264>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1f0      	bne.n	8003b18 <HAL_RCC_OscConfig+0x108>
 8003b36:	e000      	b.n	8003b3a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d05a      	beq.n	8003bfc <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	2b04      	cmp	r3, #4
 8003b4a:	d005      	beq.n	8003b58 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	2b0c      	cmp	r3, #12
 8003b50:	d119      	bne.n	8003b86 <HAL_RCC_OscConfig+0x176>
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d116      	bne.n	8003b86 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b58:	4b46      	ldr	r3, [pc, #280]	; (8003c74 <HAL_RCC_OscConfig+0x264>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d005      	beq.n	8003b70 <HAL_RCC_OscConfig+0x160>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d001      	beq.n	8003b70 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e276      	b.n	800405e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b70:	4b40      	ldr	r3, [pc, #256]	; (8003c74 <HAL_RCC_OscConfig+0x264>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	021b      	lsls	r3, r3, #8
 8003b7e:	493d      	ldr	r1, [pc, #244]	; (8003c74 <HAL_RCC_OscConfig+0x264>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b84:	e03a      	b.n	8003bfc <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d020      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b8e:	4b3a      	ldr	r3, [pc, #232]	; (8003c78 <HAL_RCC_OscConfig+0x268>)
 8003b90:	2201      	movs	r2, #1
 8003b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b94:	f7ff f88a 	bl	8002cac <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b9c:	f7ff f886 	bl	8002cac <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e257      	b.n	800405e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bae:	4b31      	ldr	r3, [pc, #196]	; (8003c74 <HAL_RCC_OscConfig+0x264>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0f0      	beq.n	8003b9c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bba:	4b2e      	ldr	r3, [pc, #184]	; (8003c74 <HAL_RCC_OscConfig+0x264>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	021b      	lsls	r3, r3, #8
 8003bc8:	492a      	ldr	r1, [pc, #168]	; (8003c74 <HAL_RCC_OscConfig+0x264>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	604b      	str	r3, [r1, #4]
 8003bce:	e015      	b.n	8003bfc <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bd0:	4b29      	ldr	r3, [pc, #164]	; (8003c78 <HAL_RCC_OscConfig+0x268>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd6:	f7ff f869 	bl	8002cac <HAL_GetTick>
 8003bda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003bdc:	e008      	b.n	8003bf0 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bde:	f7ff f865 	bl	8002cac <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e236      	b.n	800405e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003bf0:	4b20      	ldr	r3, [pc, #128]	; (8003c74 <HAL_RCC_OscConfig+0x264>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1f0      	bne.n	8003bde <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0310 	and.w	r3, r3, #16
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 80b8 	beq.w	8003d7a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d170      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c10:	4b18      	ldr	r3, [pc, #96]	; (8003c74 <HAL_RCC_OscConfig+0x264>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d005      	beq.n	8003c28 <HAL_RCC_OscConfig+0x218>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d101      	bne.n	8003c28 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e21a      	b.n	800405e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a1a      	ldr	r2, [r3, #32]
 8003c2c:	4b11      	ldr	r3, [pc, #68]	; (8003c74 <HAL_RCC_OscConfig+0x264>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d921      	bls.n	8003c7c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f000 fc7d 	bl	800453c <RCC_SetFlashLatencyFromMSIRange>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d001      	beq.n	8003c4c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e208      	b.n	800405e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c4c:	4b09      	ldr	r3, [pc, #36]	; (8003c74 <HAL_RCC_OscConfig+0x264>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	4906      	ldr	r1, [pc, #24]	; (8003c74 <HAL_RCC_OscConfig+0x264>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c5e:	4b05      	ldr	r3, [pc, #20]	; (8003c74 <HAL_RCC_OscConfig+0x264>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	69db      	ldr	r3, [r3, #28]
 8003c6a:	061b      	lsls	r3, r3, #24
 8003c6c:	4901      	ldr	r1, [pc, #4]	; (8003c74 <HAL_RCC_OscConfig+0x264>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	604b      	str	r3, [r1, #4]
 8003c72:	e020      	b.n	8003cb6 <HAL_RCC_OscConfig+0x2a6>
 8003c74:	40023800 	.word	0x40023800
 8003c78:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c7c:	4b99      	ldr	r3, [pc, #612]	; (8003ee4 <HAL_RCC_OscConfig+0x4d4>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a1b      	ldr	r3, [r3, #32]
 8003c88:	4996      	ldr	r1, [pc, #600]	; (8003ee4 <HAL_RCC_OscConfig+0x4d4>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c8e:	4b95      	ldr	r3, [pc, #596]	; (8003ee4 <HAL_RCC_OscConfig+0x4d4>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	061b      	lsls	r3, r3, #24
 8003c9c:	4991      	ldr	r1, [pc, #580]	; (8003ee4 <HAL_RCC_OscConfig+0x4d4>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 fc48 	bl	800453c <RCC_SetFlashLatencyFromMSIRange>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e1d3      	b.n	800405e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a1b      	ldr	r3, [r3, #32]
 8003cba:	0b5b      	lsrs	r3, r3, #13
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003cc2:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003cc6:	4a87      	ldr	r2, [pc, #540]	; (8003ee4 <HAL_RCC_OscConfig+0x4d4>)
 8003cc8:	6892      	ldr	r2, [r2, #8]
 8003cca:	0912      	lsrs	r2, r2, #4
 8003ccc:	f002 020f 	and.w	r2, r2, #15
 8003cd0:	4985      	ldr	r1, [pc, #532]	; (8003ee8 <HAL_RCC_OscConfig+0x4d8>)
 8003cd2:	5c8a      	ldrb	r2, [r1, r2]
 8003cd4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003cd6:	4a85      	ldr	r2, [pc, #532]	; (8003eec <HAL_RCC_OscConfig+0x4dc>)
 8003cd8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003cda:	4b85      	ldr	r3, [pc, #532]	; (8003ef0 <HAL_RCC_OscConfig+0x4e0>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7fe ff98 	bl	8002c14 <HAL_InitTick>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003ce8:	7bfb      	ldrb	r3, [r7, #15]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d045      	beq.n	8003d7a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8003cee:	7bfb      	ldrb	r3, [r7, #15]
 8003cf0:	e1b5      	b.n	800405e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d029      	beq.n	8003d4e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003cfa:	4b7e      	ldr	r3, [pc, #504]	; (8003ef4 <HAL_RCC_OscConfig+0x4e4>)
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d00:	f7fe ffd4 	bl	8002cac <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d08:	f7fe ffd0 	bl	8002cac <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e1a1      	b.n	800405e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003d1a:	4b72      	ldr	r3, [pc, #456]	; (8003ee4 <HAL_RCC_OscConfig+0x4d4>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d0f0      	beq.n	8003d08 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d26:	4b6f      	ldr	r3, [pc, #444]	; (8003ee4 <HAL_RCC_OscConfig+0x4d4>)
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	496c      	ldr	r1, [pc, #432]	; (8003ee4 <HAL_RCC_OscConfig+0x4d4>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d38:	4b6a      	ldr	r3, [pc, #424]	; (8003ee4 <HAL_RCC_OscConfig+0x4d4>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	69db      	ldr	r3, [r3, #28]
 8003d44:	061b      	lsls	r3, r3, #24
 8003d46:	4967      	ldr	r1, [pc, #412]	; (8003ee4 <HAL_RCC_OscConfig+0x4d4>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	604b      	str	r3, [r1, #4]
 8003d4c:	e015      	b.n	8003d7a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d4e:	4b69      	ldr	r3, [pc, #420]	; (8003ef4 <HAL_RCC_OscConfig+0x4e4>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d54:	f7fe ffaa 	bl	8002cac <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d5c:	f7fe ffa6 	bl	8002cac <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e177      	b.n	800405e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003d6e:	4b5d      	ldr	r3, [pc, #372]	; (8003ee4 <HAL_RCC_OscConfig+0x4d4>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1f0      	bne.n	8003d5c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0308 	and.w	r3, r3, #8
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d030      	beq.n	8003de8 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d016      	beq.n	8003dbc <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d8e:	4b5a      	ldr	r3, [pc, #360]	; (8003ef8 <HAL_RCC_OscConfig+0x4e8>)
 8003d90:	2201      	movs	r2, #1
 8003d92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d94:	f7fe ff8a 	bl	8002cac <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d9c:	f7fe ff86 	bl	8002cac <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e157      	b.n	800405e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003dae:	4b4d      	ldr	r3, [pc, #308]	; (8003ee4 <HAL_RCC_OscConfig+0x4d4>)
 8003db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0f0      	beq.n	8003d9c <HAL_RCC_OscConfig+0x38c>
 8003dba:	e015      	b.n	8003de8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dbc:	4b4e      	ldr	r3, [pc, #312]	; (8003ef8 <HAL_RCC_OscConfig+0x4e8>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dc2:	f7fe ff73 	bl	8002cac <HAL_GetTick>
 8003dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003dc8:	e008      	b.n	8003ddc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dca:	f7fe ff6f 	bl	8002cac <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d901      	bls.n	8003ddc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e140      	b.n	800405e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003ddc:	4b41      	ldr	r3, [pc, #260]	; (8003ee4 <HAL_RCC_OscConfig+0x4d4>)
 8003dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1f0      	bne.n	8003dca <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0304 	and.w	r3, r3, #4
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f000 80b5 	beq.w	8003f60 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003df6:	2300      	movs	r3, #0
 8003df8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dfa:	4b3a      	ldr	r3, [pc, #232]	; (8003ee4 <HAL_RCC_OscConfig+0x4d4>)
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10d      	bne.n	8003e22 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e06:	4b37      	ldr	r3, [pc, #220]	; (8003ee4 <HAL_RCC_OscConfig+0x4d4>)
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	4a36      	ldr	r2, [pc, #216]	; (8003ee4 <HAL_RCC_OscConfig+0x4d4>)
 8003e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e10:	6253      	str	r3, [r2, #36]	; 0x24
 8003e12:	4b34      	ldr	r3, [pc, #208]	; (8003ee4 <HAL_RCC_OscConfig+0x4d4>)
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e1a:	60bb      	str	r3, [r7, #8]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e22:	4b36      	ldr	r3, [pc, #216]	; (8003efc <HAL_RCC_OscConfig+0x4ec>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d118      	bne.n	8003e60 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e2e:	4b33      	ldr	r3, [pc, #204]	; (8003efc <HAL_RCC_OscConfig+0x4ec>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a32      	ldr	r2, [pc, #200]	; (8003efc <HAL_RCC_OscConfig+0x4ec>)
 8003e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e3a:	f7fe ff37 	bl	8002cac <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e40:	e008      	b.n	8003e54 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e42:	f7fe ff33 	bl	8002cac <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b64      	cmp	r3, #100	; 0x64
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e104      	b.n	800405e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e54:	4b29      	ldr	r3, [pc, #164]	; (8003efc <HAL_RCC_OscConfig+0x4ec>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0f0      	beq.n	8003e42 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d106      	bne.n	8003e76 <HAL_RCC_OscConfig+0x466>
 8003e68:	4b1e      	ldr	r3, [pc, #120]	; (8003ee4 <HAL_RCC_OscConfig+0x4d4>)
 8003e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e6c:	4a1d      	ldr	r2, [pc, #116]	; (8003ee4 <HAL_RCC_OscConfig+0x4d4>)
 8003e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e72:	6353      	str	r3, [r2, #52]	; 0x34
 8003e74:	e02d      	b.n	8003ed2 <HAL_RCC_OscConfig+0x4c2>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10c      	bne.n	8003e98 <HAL_RCC_OscConfig+0x488>
 8003e7e:	4b19      	ldr	r3, [pc, #100]	; (8003ee4 <HAL_RCC_OscConfig+0x4d4>)
 8003e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e82:	4a18      	ldr	r2, [pc, #96]	; (8003ee4 <HAL_RCC_OscConfig+0x4d4>)
 8003e84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e88:	6353      	str	r3, [r2, #52]	; 0x34
 8003e8a:	4b16      	ldr	r3, [pc, #88]	; (8003ee4 <HAL_RCC_OscConfig+0x4d4>)
 8003e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e8e:	4a15      	ldr	r2, [pc, #84]	; (8003ee4 <HAL_RCC_OscConfig+0x4d4>)
 8003e90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e94:	6353      	str	r3, [r2, #52]	; 0x34
 8003e96:	e01c      	b.n	8003ed2 <HAL_RCC_OscConfig+0x4c2>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	2b05      	cmp	r3, #5
 8003e9e:	d10c      	bne.n	8003eba <HAL_RCC_OscConfig+0x4aa>
 8003ea0:	4b10      	ldr	r3, [pc, #64]	; (8003ee4 <HAL_RCC_OscConfig+0x4d4>)
 8003ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea4:	4a0f      	ldr	r2, [pc, #60]	; (8003ee4 <HAL_RCC_OscConfig+0x4d4>)
 8003ea6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003eaa:	6353      	str	r3, [r2, #52]	; 0x34
 8003eac:	4b0d      	ldr	r3, [pc, #52]	; (8003ee4 <HAL_RCC_OscConfig+0x4d4>)
 8003eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb0:	4a0c      	ldr	r2, [pc, #48]	; (8003ee4 <HAL_RCC_OscConfig+0x4d4>)
 8003eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eb6:	6353      	str	r3, [r2, #52]	; 0x34
 8003eb8:	e00b      	b.n	8003ed2 <HAL_RCC_OscConfig+0x4c2>
 8003eba:	4b0a      	ldr	r3, [pc, #40]	; (8003ee4 <HAL_RCC_OscConfig+0x4d4>)
 8003ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ebe:	4a09      	ldr	r2, [pc, #36]	; (8003ee4 <HAL_RCC_OscConfig+0x4d4>)
 8003ec0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ec4:	6353      	str	r3, [r2, #52]	; 0x34
 8003ec6:	4b07      	ldr	r3, [pc, #28]	; (8003ee4 <HAL_RCC_OscConfig+0x4d4>)
 8003ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eca:	4a06      	ldr	r2, [pc, #24]	; (8003ee4 <HAL_RCC_OscConfig+0x4d4>)
 8003ecc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ed0:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d024      	beq.n	8003f24 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eda:	f7fe fee7 	bl	8002cac <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ee0:	e019      	b.n	8003f16 <HAL_RCC_OscConfig+0x506>
 8003ee2:	bf00      	nop
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	08006b14 	.word	0x08006b14
 8003eec:	20000530 	.word	0x20000530
 8003ef0:	20000534 	.word	0x20000534
 8003ef4:	42470020 	.word	0x42470020
 8003ef8:	42470680 	.word	0x42470680
 8003efc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f00:	f7fe fed4 	bl	8002cac <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e0a3      	b.n	800405e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f16:	4b54      	ldr	r3, [pc, #336]	; (8004068 <HAL_RCC_OscConfig+0x658>)
 8003f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d0ee      	beq.n	8003f00 <HAL_RCC_OscConfig+0x4f0>
 8003f22:	e014      	b.n	8003f4e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f24:	f7fe fec2 	bl	8002cac <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f2a:	e00a      	b.n	8003f42 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f2c:	f7fe febe 	bl	8002cac <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e08d      	b.n	800405e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f42:	4b49      	ldr	r3, [pc, #292]	; (8004068 <HAL_RCC_OscConfig+0x658>)
 8003f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1ee      	bne.n	8003f2c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f4e:	7ffb      	ldrb	r3, [r7, #31]
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d105      	bne.n	8003f60 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f54:	4b44      	ldr	r3, [pc, #272]	; (8004068 <HAL_RCC_OscConfig+0x658>)
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	4a43      	ldr	r2, [pc, #268]	; (8004068 <HAL_RCC_OscConfig+0x658>)
 8003f5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f5e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d079      	beq.n	800405c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	2b0c      	cmp	r3, #12
 8003f6c:	d056      	beq.n	800401c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d13b      	bne.n	8003fee <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f76:	4b3d      	ldr	r3, [pc, #244]	; (800406c <HAL_RCC_OscConfig+0x65c>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f7c:	f7fe fe96 	bl	8002cac <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f84:	f7fe fe92 	bl	8002cac <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e063      	b.n	800405e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f96:	4b34      	ldr	r3, [pc, #208]	; (8004068 <HAL_RCC_OscConfig+0x658>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1f0      	bne.n	8003f84 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fa2:	4b31      	ldr	r3, [pc, #196]	; (8004068 <HAL_RCC_OscConfig+0x658>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb2:	4319      	orrs	r1, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb8:	430b      	orrs	r3, r1
 8003fba:	492b      	ldr	r1, [pc, #172]	; (8004068 <HAL_RCC_OscConfig+0x658>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fc0:	4b2a      	ldr	r3, [pc, #168]	; (800406c <HAL_RCC_OscConfig+0x65c>)
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc6:	f7fe fe71 	bl	8002cac <HAL_GetTick>
 8003fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fcc:	e008      	b.n	8003fe0 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fce:	f7fe fe6d 	bl	8002cac <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e03e      	b.n	800405e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fe0:	4b21      	ldr	r3, [pc, #132]	; (8004068 <HAL_RCC_OscConfig+0x658>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d0f0      	beq.n	8003fce <HAL_RCC_OscConfig+0x5be>
 8003fec:	e036      	b.n	800405c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fee:	4b1f      	ldr	r3, [pc, #124]	; (800406c <HAL_RCC_OscConfig+0x65c>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff4:	f7fe fe5a 	bl	8002cac <HAL_GetTick>
 8003ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ffa:	e008      	b.n	800400e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ffc:	f7fe fe56 	bl	8002cac <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e027      	b.n	800405e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800400e:	4b16      	ldr	r3, [pc, #88]	; (8004068 <HAL_RCC_OscConfig+0x658>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1f0      	bne.n	8003ffc <HAL_RCC_OscConfig+0x5ec>
 800401a:	e01f      	b.n	800405c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	2b01      	cmp	r3, #1
 8004022:	d101      	bne.n	8004028 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e01a      	b.n	800405e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004028:	4b0f      	ldr	r3, [pc, #60]	; (8004068 <HAL_RCC_OscConfig+0x658>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004038:	429a      	cmp	r2, r3
 800403a:	d10d      	bne.n	8004058 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004046:	429a      	cmp	r2, r3
 8004048:	d106      	bne.n	8004058 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004054:	429a      	cmp	r2, r3
 8004056:	d001      	beq.n	800405c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e000      	b.n	800405e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3720      	adds	r7, #32
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	40023800 	.word	0x40023800
 800406c:	42470060 	.word	0x42470060

08004070 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d101      	bne.n	8004084 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e11a      	b.n	80042ba <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004084:	4b8f      	ldr	r3, [pc, #572]	; (80042c4 <HAL_RCC_ClockConfig+0x254>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	429a      	cmp	r2, r3
 8004090:	d919      	bls.n	80040c6 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d105      	bne.n	80040a4 <HAL_RCC_ClockConfig+0x34>
 8004098:	4b8a      	ldr	r3, [pc, #552]	; (80042c4 <HAL_RCC_ClockConfig+0x254>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a89      	ldr	r2, [pc, #548]	; (80042c4 <HAL_RCC_ClockConfig+0x254>)
 800409e:	f043 0304 	orr.w	r3, r3, #4
 80040a2:	6013      	str	r3, [r2, #0]
 80040a4:	4b87      	ldr	r3, [pc, #540]	; (80042c4 <HAL_RCC_ClockConfig+0x254>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f023 0201 	bic.w	r2, r3, #1
 80040ac:	4985      	ldr	r1, [pc, #532]	; (80042c4 <HAL_RCC_ClockConfig+0x254>)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040b4:	4b83      	ldr	r3, [pc, #524]	; (80042c4 <HAL_RCC_ClockConfig+0x254>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0301 	and.w	r3, r3, #1
 80040bc:	683a      	ldr	r2, [r7, #0]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d001      	beq.n	80040c6 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e0f9      	b.n	80042ba <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d008      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040d2:	4b7d      	ldr	r3, [pc, #500]	; (80042c8 <HAL_RCC_ClockConfig+0x258>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	497a      	ldr	r1, [pc, #488]	; (80042c8 <HAL_RCC_ClockConfig+0x258>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f000 808e 	beq.w	800420e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d107      	bne.n	800410a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040fa:	4b73      	ldr	r3, [pc, #460]	; (80042c8 <HAL_RCC_ClockConfig+0x258>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d121      	bne.n	800414a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e0d7      	b.n	80042ba <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	2b03      	cmp	r3, #3
 8004110:	d107      	bne.n	8004122 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004112:	4b6d      	ldr	r3, [pc, #436]	; (80042c8 <HAL_RCC_ClockConfig+0x258>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d115      	bne.n	800414a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e0cb      	b.n	80042ba <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d107      	bne.n	800413a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800412a:	4b67      	ldr	r3, [pc, #412]	; (80042c8 <HAL_RCC_ClockConfig+0x258>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d109      	bne.n	800414a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e0bf      	b.n	80042ba <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800413a:	4b63      	ldr	r3, [pc, #396]	; (80042c8 <HAL_RCC_ClockConfig+0x258>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e0b7      	b.n	80042ba <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800414a:	4b5f      	ldr	r3, [pc, #380]	; (80042c8 <HAL_RCC_ClockConfig+0x258>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f023 0203 	bic.w	r2, r3, #3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	495c      	ldr	r1, [pc, #368]	; (80042c8 <HAL_RCC_ClockConfig+0x258>)
 8004158:	4313      	orrs	r3, r2
 800415a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800415c:	f7fe fda6 	bl	8002cac <HAL_GetTick>
 8004160:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2b02      	cmp	r3, #2
 8004168:	d112      	bne.n	8004190 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800416a:	e00a      	b.n	8004182 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800416c:	f7fe fd9e 	bl	8002cac <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	f241 3288 	movw	r2, #5000	; 0x1388
 800417a:	4293      	cmp	r3, r2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e09b      	b.n	80042ba <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004182:	4b51      	ldr	r3, [pc, #324]	; (80042c8 <HAL_RCC_ClockConfig+0x258>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 030c 	and.w	r3, r3, #12
 800418a:	2b08      	cmp	r3, #8
 800418c:	d1ee      	bne.n	800416c <HAL_RCC_ClockConfig+0xfc>
 800418e:	e03e      	b.n	800420e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	2b03      	cmp	r3, #3
 8004196:	d112      	bne.n	80041be <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004198:	e00a      	b.n	80041b0 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800419a:	f7fe fd87 	bl	8002cac <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d901      	bls.n	80041b0 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e084      	b.n	80042ba <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041b0:	4b45      	ldr	r3, [pc, #276]	; (80042c8 <HAL_RCC_ClockConfig+0x258>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f003 030c 	and.w	r3, r3, #12
 80041b8:	2b0c      	cmp	r3, #12
 80041ba:	d1ee      	bne.n	800419a <HAL_RCC_ClockConfig+0x12a>
 80041bc:	e027      	b.n	800420e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d11d      	bne.n	8004202 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80041c6:	e00a      	b.n	80041de <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041c8:	f7fe fd70 	bl	8002cac <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e06d      	b.n	80042ba <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80041de:	4b3a      	ldr	r3, [pc, #232]	; (80042c8 <HAL_RCC_ClockConfig+0x258>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 030c 	and.w	r3, r3, #12
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	d1ee      	bne.n	80041c8 <HAL_RCC_ClockConfig+0x158>
 80041ea:	e010      	b.n	800420e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041ec:	f7fe fd5e 	bl	8002cac <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e05b      	b.n	80042ba <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004202:	4b31      	ldr	r3, [pc, #196]	; (80042c8 <HAL_RCC_ClockConfig+0x258>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 030c 	and.w	r3, r3, #12
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1ee      	bne.n	80041ec <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800420e:	4b2d      	ldr	r3, [pc, #180]	; (80042c4 <HAL_RCC_ClockConfig+0x254>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	429a      	cmp	r2, r3
 800421a:	d219      	bcs.n	8004250 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d105      	bne.n	800422e <HAL_RCC_ClockConfig+0x1be>
 8004222:	4b28      	ldr	r3, [pc, #160]	; (80042c4 <HAL_RCC_ClockConfig+0x254>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a27      	ldr	r2, [pc, #156]	; (80042c4 <HAL_RCC_ClockConfig+0x254>)
 8004228:	f043 0304 	orr.w	r3, r3, #4
 800422c:	6013      	str	r3, [r2, #0]
 800422e:	4b25      	ldr	r3, [pc, #148]	; (80042c4 <HAL_RCC_ClockConfig+0x254>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f023 0201 	bic.w	r2, r3, #1
 8004236:	4923      	ldr	r1, [pc, #140]	; (80042c4 <HAL_RCC_ClockConfig+0x254>)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	4313      	orrs	r3, r2
 800423c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800423e:	4b21      	ldr	r3, [pc, #132]	; (80042c4 <HAL_RCC_ClockConfig+0x254>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	429a      	cmp	r2, r3
 800424a:	d001      	beq.n	8004250 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e034      	b.n	80042ba <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b00      	cmp	r3, #0
 800425a:	d008      	beq.n	800426e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800425c:	4b1a      	ldr	r3, [pc, #104]	; (80042c8 <HAL_RCC_ClockConfig+0x258>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	4917      	ldr	r1, [pc, #92]	; (80042c8 <HAL_RCC_ClockConfig+0x258>)
 800426a:	4313      	orrs	r3, r2
 800426c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0308 	and.w	r3, r3, #8
 8004276:	2b00      	cmp	r3, #0
 8004278:	d009      	beq.n	800428e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800427a:	4b13      	ldr	r3, [pc, #76]	; (80042c8 <HAL_RCC_ClockConfig+0x258>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	00db      	lsls	r3, r3, #3
 8004288:	490f      	ldr	r1, [pc, #60]	; (80042c8 <HAL_RCC_ClockConfig+0x258>)
 800428a:	4313      	orrs	r3, r2
 800428c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800428e:	f000 f823 	bl	80042d8 <HAL_RCC_GetSysClockFreq>
 8004292:	4602      	mov	r2, r0
 8004294:	4b0c      	ldr	r3, [pc, #48]	; (80042c8 <HAL_RCC_ClockConfig+0x258>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	091b      	lsrs	r3, r3, #4
 800429a:	f003 030f 	and.w	r3, r3, #15
 800429e:	490b      	ldr	r1, [pc, #44]	; (80042cc <HAL_RCC_ClockConfig+0x25c>)
 80042a0:	5ccb      	ldrb	r3, [r1, r3]
 80042a2:	fa22 f303 	lsr.w	r3, r2, r3
 80042a6:	4a0a      	ldr	r2, [pc, #40]	; (80042d0 <HAL_RCC_ClockConfig+0x260>)
 80042a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80042aa:	4b0a      	ldr	r3, [pc, #40]	; (80042d4 <HAL_RCC_ClockConfig+0x264>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7fe fcb0 	bl	8002c14 <HAL_InitTick>
 80042b4:	4603      	mov	r3, r0
 80042b6:	72fb      	strb	r3, [r7, #11]

  return status;
 80042b8:	7afb      	ldrb	r3, [r7, #11]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	40023c00 	.word	0x40023c00
 80042c8:	40023800 	.word	0x40023800
 80042cc:	08006b14 	.word	0x08006b14
 80042d0:	20000530 	.word	0x20000530
 80042d4:	20000534 	.word	0x20000534

080042d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042dc:	b092      	sub	sp, #72	; 0x48
 80042de:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80042e0:	4b79      	ldr	r3, [pc, #484]	; (80044c8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80042e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042e8:	f003 030c 	and.w	r3, r3, #12
 80042ec:	2b0c      	cmp	r3, #12
 80042ee:	d00d      	beq.n	800430c <HAL_RCC_GetSysClockFreq+0x34>
 80042f0:	2b0c      	cmp	r3, #12
 80042f2:	f200 80d5 	bhi.w	80044a0 <HAL_RCC_GetSysClockFreq+0x1c8>
 80042f6:	2b04      	cmp	r3, #4
 80042f8:	d002      	beq.n	8004300 <HAL_RCC_GetSysClockFreq+0x28>
 80042fa:	2b08      	cmp	r3, #8
 80042fc:	d003      	beq.n	8004306 <HAL_RCC_GetSysClockFreq+0x2e>
 80042fe:	e0cf      	b.n	80044a0 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004300:	4b72      	ldr	r3, [pc, #456]	; (80044cc <HAL_RCC_GetSysClockFreq+0x1f4>)
 8004302:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004304:	e0da      	b.n	80044bc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004306:	4b72      	ldr	r3, [pc, #456]	; (80044d0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004308:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800430a:	e0d7      	b.n	80044bc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800430c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800430e:	0c9b      	lsrs	r3, r3, #18
 8004310:	f003 020f 	and.w	r2, r3, #15
 8004314:	4b6f      	ldr	r3, [pc, #444]	; (80044d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004316:	5c9b      	ldrb	r3, [r3, r2]
 8004318:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800431a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800431c:	0d9b      	lsrs	r3, r3, #22
 800431e:	f003 0303 	and.w	r3, r3, #3
 8004322:	3301      	adds	r3, #1
 8004324:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004326:	4b68      	ldr	r3, [pc, #416]	; (80044c8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d05d      	beq.n	80043ee <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004334:	2200      	movs	r2, #0
 8004336:	4618      	mov	r0, r3
 8004338:	4611      	mov	r1, r2
 800433a:	4604      	mov	r4, r0
 800433c:	460d      	mov	r5, r1
 800433e:	4622      	mov	r2, r4
 8004340:	462b      	mov	r3, r5
 8004342:	f04f 0000 	mov.w	r0, #0
 8004346:	f04f 0100 	mov.w	r1, #0
 800434a:	0159      	lsls	r1, r3, #5
 800434c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004350:	0150      	lsls	r0, r2, #5
 8004352:	4602      	mov	r2, r0
 8004354:	460b      	mov	r3, r1
 8004356:	4621      	mov	r1, r4
 8004358:	1a51      	subs	r1, r2, r1
 800435a:	6139      	str	r1, [r7, #16]
 800435c:	4629      	mov	r1, r5
 800435e:	eb63 0301 	sbc.w	r3, r3, r1
 8004362:	617b      	str	r3, [r7, #20]
 8004364:	f04f 0200 	mov.w	r2, #0
 8004368:	f04f 0300 	mov.w	r3, #0
 800436c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004370:	4659      	mov	r1, fp
 8004372:	018b      	lsls	r3, r1, #6
 8004374:	4651      	mov	r1, sl
 8004376:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800437a:	4651      	mov	r1, sl
 800437c:	018a      	lsls	r2, r1, #6
 800437e:	46d4      	mov	ip, sl
 8004380:	ebb2 080c 	subs.w	r8, r2, ip
 8004384:	4659      	mov	r1, fp
 8004386:	eb63 0901 	sbc.w	r9, r3, r1
 800438a:	f04f 0200 	mov.w	r2, #0
 800438e:	f04f 0300 	mov.w	r3, #0
 8004392:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004396:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800439a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800439e:	4690      	mov	r8, r2
 80043a0:	4699      	mov	r9, r3
 80043a2:	4623      	mov	r3, r4
 80043a4:	eb18 0303 	adds.w	r3, r8, r3
 80043a8:	60bb      	str	r3, [r7, #8]
 80043aa:	462b      	mov	r3, r5
 80043ac:	eb49 0303 	adc.w	r3, r9, r3
 80043b0:	60fb      	str	r3, [r7, #12]
 80043b2:	f04f 0200 	mov.w	r2, #0
 80043b6:	f04f 0300 	mov.w	r3, #0
 80043ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80043be:	4629      	mov	r1, r5
 80043c0:	024b      	lsls	r3, r1, #9
 80043c2:	4620      	mov	r0, r4
 80043c4:	4629      	mov	r1, r5
 80043c6:	4604      	mov	r4, r0
 80043c8:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80043cc:	4601      	mov	r1, r0
 80043ce:	024a      	lsls	r2, r1, #9
 80043d0:	4610      	mov	r0, r2
 80043d2:	4619      	mov	r1, r3
 80043d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043d6:	2200      	movs	r2, #0
 80043d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80043da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043e0:	f7fb fede 	bl	80001a0 <__aeabi_uldivmod>
 80043e4:	4602      	mov	r2, r0
 80043e6:	460b      	mov	r3, r1
 80043e8:	4613      	mov	r3, r2
 80043ea:	647b      	str	r3, [r7, #68]	; 0x44
 80043ec:	e055      	b.n	800449a <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80043ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f0:	2200      	movs	r2, #0
 80043f2:	623b      	str	r3, [r7, #32]
 80043f4:	627a      	str	r2, [r7, #36]	; 0x24
 80043f6:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043fa:	4642      	mov	r2, r8
 80043fc:	464b      	mov	r3, r9
 80043fe:	f04f 0000 	mov.w	r0, #0
 8004402:	f04f 0100 	mov.w	r1, #0
 8004406:	0159      	lsls	r1, r3, #5
 8004408:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800440c:	0150      	lsls	r0, r2, #5
 800440e:	4602      	mov	r2, r0
 8004410:	460b      	mov	r3, r1
 8004412:	46c4      	mov	ip, r8
 8004414:	ebb2 0a0c 	subs.w	sl, r2, ip
 8004418:	4640      	mov	r0, r8
 800441a:	4649      	mov	r1, r9
 800441c:	468c      	mov	ip, r1
 800441e:	eb63 0b0c 	sbc.w	fp, r3, ip
 8004422:	f04f 0200 	mov.w	r2, #0
 8004426:	f04f 0300 	mov.w	r3, #0
 800442a:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800442e:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004432:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004436:	ebb2 040a 	subs.w	r4, r2, sl
 800443a:	eb63 050b 	sbc.w	r5, r3, fp
 800443e:	f04f 0200 	mov.w	r2, #0
 8004442:	f04f 0300 	mov.w	r3, #0
 8004446:	00eb      	lsls	r3, r5, #3
 8004448:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800444c:	00e2      	lsls	r2, r4, #3
 800444e:	4614      	mov	r4, r2
 8004450:	461d      	mov	r5, r3
 8004452:	4603      	mov	r3, r0
 8004454:	18e3      	adds	r3, r4, r3
 8004456:	603b      	str	r3, [r7, #0]
 8004458:	460b      	mov	r3, r1
 800445a:	eb45 0303 	adc.w	r3, r5, r3
 800445e:	607b      	str	r3, [r7, #4]
 8004460:	f04f 0200 	mov.w	r2, #0
 8004464:	f04f 0300 	mov.w	r3, #0
 8004468:	e9d7 4500 	ldrd	r4, r5, [r7]
 800446c:	4629      	mov	r1, r5
 800446e:	028b      	lsls	r3, r1, #10
 8004470:	4620      	mov	r0, r4
 8004472:	4629      	mov	r1, r5
 8004474:	4604      	mov	r4, r0
 8004476:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800447a:	4601      	mov	r1, r0
 800447c:	028a      	lsls	r2, r1, #10
 800447e:	4610      	mov	r0, r2
 8004480:	4619      	mov	r1, r3
 8004482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004484:	2200      	movs	r2, #0
 8004486:	61bb      	str	r3, [r7, #24]
 8004488:	61fa      	str	r2, [r7, #28]
 800448a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800448e:	f7fb fe87 	bl	80001a0 <__aeabi_uldivmod>
 8004492:	4602      	mov	r2, r0
 8004494:	460b      	mov	r3, r1
 8004496:	4613      	mov	r3, r2
 8004498:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 800449a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800449c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800449e:	e00d      	b.n	80044bc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80044a0:	4b09      	ldr	r3, [pc, #36]	; (80044c8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	0b5b      	lsrs	r3, r3, #13
 80044a6:	f003 0307 	and.w	r3, r3, #7
 80044aa:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80044ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ae:	3301      	adds	r3, #1
 80044b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80044b4:	fa02 f303 	lsl.w	r3, r2, r3
 80044b8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80044ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3748      	adds	r7, #72	; 0x48
 80044c2:	46bd      	mov	sp, r7
 80044c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044c8:	40023800 	.word	0x40023800
 80044cc:	00f42400 	.word	0x00f42400
 80044d0:	007a1200 	.word	0x007a1200
 80044d4:	08006b08 	.word	0x08006b08

080044d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044d8:	b480      	push	{r7}
 80044da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044dc:	4b02      	ldr	r3, [pc, #8]	; (80044e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80044de:	681b      	ldr	r3, [r3, #0]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bc80      	pop	{r7}
 80044e6:	4770      	bx	lr
 80044e8:	20000530 	.word	0x20000530

080044ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044f0:	f7ff fff2 	bl	80044d8 <HAL_RCC_GetHCLKFreq>
 80044f4:	4602      	mov	r2, r0
 80044f6:	4b05      	ldr	r3, [pc, #20]	; (800450c <HAL_RCC_GetPCLK1Freq+0x20>)
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	0a1b      	lsrs	r3, r3, #8
 80044fc:	f003 0307 	and.w	r3, r3, #7
 8004500:	4903      	ldr	r1, [pc, #12]	; (8004510 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004502:	5ccb      	ldrb	r3, [r1, r3]
 8004504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004508:	4618      	mov	r0, r3
 800450a:	bd80      	pop	{r7, pc}
 800450c:	40023800 	.word	0x40023800
 8004510:	08006b24 	.word	0x08006b24

08004514 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004518:	f7ff ffde 	bl	80044d8 <HAL_RCC_GetHCLKFreq>
 800451c:	4602      	mov	r2, r0
 800451e:	4b05      	ldr	r3, [pc, #20]	; (8004534 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	0adb      	lsrs	r3, r3, #11
 8004524:	f003 0307 	and.w	r3, r3, #7
 8004528:	4903      	ldr	r1, [pc, #12]	; (8004538 <HAL_RCC_GetPCLK2Freq+0x24>)
 800452a:	5ccb      	ldrb	r3, [r1, r3]
 800452c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004530:	4618      	mov	r0, r3
 8004532:	bd80      	pop	{r7, pc}
 8004534:	40023800 	.word	0x40023800
 8004538:	08006b24 	.word	0x08006b24

0800453c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800453c:	b480      	push	{r7}
 800453e:	b087      	sub	sp, #28
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004544:	2300      	movs	r3, #0
 8004546:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004548:	4b29      	ldr	r3, [pc, #164]	; (80045f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d12c      	bne.n	80045ae <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004554:	4b26      	ldr	r3, [pc, #152]	; (80045f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d005      	beq.n	800456c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004560:	4b24      	ldr	r3, [pc, #144]	; (80045f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004568:	617b      	str	r3, [r7, #20]
 800456a:	e016      	b.n	800459a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800456c:	4b20      	ldr	r3, [pc, #128]	; (80045f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	4a1f      	ldr	r2, [pc, #124]	; (80045f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004576:	6253      	str	r3, [r2, #36]	; 0x24
 8004578:	4b1d      	ldr	r3, [pc, #116]	; (80045f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004580:	60fb      	str	r3, [r7, #12]
 8004582:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004584:	4b1b      	ldr	r3, [pc, #108]	; (80045f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800458c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800458e:	4b18      	ldr	r3, [pc, #96]	; (80045f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004592:	4a17      	ldr	r2, [pc, #92]	; (80045f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004594:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004598:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80045a0:	d105      	bne.n	80045ae <RCC_SetFlashLatencyFromMSIRange+0x72>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80045a8:	d101      	bne.n	80045ae <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80045aa:	2301      	movs	r3, #1
 80045ac:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d105      	bne.n	80045c0 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80045b4:	4b10      	ldr	r3, [pc, #64]	; (80045f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a0f      	ldr	r2, [pc, #60]	; (80045f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045ba:	f043 0304 	orr.w	r3, r3, #4
 80045be:	6013      	str	r3, [r2, #0]
 80045c0:	4b0d      	ldr	r3, [pc, #52]	; (80045f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f023 0201 	bic.w	r2, r3, #1
 80045c8:	490b      	ldr	r1, [pc, #44]	; (80045f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80045d0:	4b09      	ldr	r3, [pc, #36]	; (80045f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d001      	beq.n	80045e2 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e000      	b.n	80045e4 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	371c      	adds	r7, #28
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bc80      	pop	{r7}
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	40023800 	.word	0x40023800
 80045f4:	40007000 	.word	0x40007000
 80045f8:	40023c00 	.word	0x40023c00

080045fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e042      	b.n	8004694 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d106      	bne.n	8004628 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7fd ffcc 	bl	80025c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2224      	movs	r2, #36	; 0x24
 800462c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68da      	ldr	r2, [r3, #12]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800463e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 fb89 	bl	8004d58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	691a      	ldr	r2, [r3, #16]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004654:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	695a      	ldr	r2, [r3, #20]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004664:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68da      	ldr	r2, [r3, #12]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004674:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2220      	movs	r2, #32
 8004680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2220      	movs	r2, #32
 8004688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3708      	adds	r7, #8
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b08a      	sub	sp, #40	; 0x28
 80046a0:	af02      	add	r7, sp, #8
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	603b      	str	r3, [r7, #0]
 80046a8:	4613      	mov	r3, r2
 80046aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80046ac:	2300      	movs	r3, #0
 80046ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	2b20      	cmp	r3, #32
 80046ba:	d16d      	bne.n	8004798 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d002      	beq.n	80046c8 <HAL_UART_Transmit+0x2c>
 80046c2:	88fb      	ldrh	r3, [r7, #6]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e066      	b.n	800479a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2221      	movs	r2, #33	; 0x21
 80046d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046da:	f7fe fae7 	bl	8002cac <HAL_GetTick>
 80046de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	88fa      	ldrh	r2, [r7, #6]
 80046e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	88fa      	ldrh	r2, [r7, #6]
 80046ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046f4:	d108      	bne.n	8004708 <HAL_UART_Transmit+0x6c>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d104      	bne.n	8004708 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80046fe:	2300      	movs	r3, #0
 8004700:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	61bb      	str	r3, [r7, #24]
 8004706:	e003      	b.n	8004710 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800470c:	2300      	movs	r3, #0
 800470e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004710:	e02a      	b.n	8004768 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	2200      	movs	r2, #0
 800471a:	2180      	movs	r1, #128	; 0x80
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f000 f989 	bl	8004a34 <UART_WaitOnFlagUntilTimeout>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d001      	beq.n	800472c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e036      	b.n	800479a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10b      	bne.n	800474a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	881b      	ldrh	r3, [r3, #0]
 8004736:	461a      	mov	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004740:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	3302      	adds	r3, #2
 8004746:	61bb      	str	r3, [r7, #24]
 8004748:	e007      	b.n	800475a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	781a      	ldrb	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	3301      	adds	r3, #1
 8004758:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800475e:	b29b      	uxth	r3, r3
 8004760:	3b01      	subs	r3, #1
 8004762:	b29a      	uxth	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800476c:	b29b      	uxth	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1cf      	bne.n	8004712 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	9300      	str	r3, [sp, #0]
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	2200      	movs	r2, #0
 800477a:	2140      	movs	r1, #64	; 0x40
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f000 f959 	bl	8004a34 <UART_WaitOnFlagUntilTimeout>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d001      	beq.n	800478c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e006      	b.n	800479a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2220      	movs	r2, #32
 8004790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004794:	2300      	movs	r3, #0
 8004796:	e000      	b.n	800479a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004798:	2302      	movs	r3, #2
  }
}
 800479a:	4618      	mov	r0, r3
 800479c:	3720      	adds	r7, #32
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b084      	sub	sp, #16
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	60f8      	str	r0, [r7, #12]
 80047aa:	60b9      	str	r1, [r7, #8]
 80047ac:	4613      	mov	r3, r2
 80047ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	2b20      	cmp	r3, #32
 80047ba:	d112      	bne.n	80047e2 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d002      	beq.n	80047c8 <HAL_UART_Receive_DMA+0x26>
 80047c2:	88fb      	ldrh	r3, [r7, #6]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d101      	bne.n	80047cc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e00b      	b.n	80047e4 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80047d2:	88fb      	ldrh	r3, [r7, #6]
 80047d4:	461a      	mov	r2, r3
 80047d6:	68b9      	ldr	r1, [r7, #8]
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f000 f999 	bl	8004b10 <UART_Start_Receive_DMA>
 80047de:	4603      	mov	r3, r0
 80047e0:	e000      	b.n	80047e4 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80047e2:	2302      	movs	r3, #2
  }
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bc80      	pop	{r7}
 80047fc:	4770      	bx	lr

080047fe <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80047fe:	b480      	push	{r7}
 8004800:	b083      	sub	sp, #12
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004806:	bf00      	nop
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	bc80      	pop	{r7}
 800480e:	4770      	bx	lr

08004810 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	bc80      	pop	{r7}
 8004820:	4770      	bx	lr

08004822 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004822:	b480      	push	{r7}
 8004824:	b083      	sub	sp, #12
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
 800482a:	460b      	mov	r3, r1
 800482c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800482e:	bf00      	nop
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	bc80      	pop	{r7}
 8004836:	4770      	bx	lr

08004838 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b09c      	sub	sp, #112	; 0x70
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004844:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0320 	and.w	r3, r3, #32
 8004850:	2b00      	cmp	r3, #0
 8004852:	d172      	bne.n	800493a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004856:	2200      	movs	r2, #0
 8004858:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800485a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	330c      	adds	r3, #12
 8004860:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004864:	e853 3f00 	ldrex	r3, [r3]
 8004868:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800486a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800486c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004870:	66bb      	str	r3, [r7, #104]	; 0x68
 8004872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	330c      	adds	r3, #12
 8004878:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800487a:	65ba      	str	r2, [r7, #88]	; 0x58
 800487c:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004880:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004882:	e841 2300 	strex	r3, r2, [r1]
 8004886:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004888:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1e5      	bne.n	800485a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800488e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	3314      	adds	r3, #20
 8004894:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004898:	e853 3f00 	ldrex	r3, [r3]
 800489c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800489e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a0:	f023 0301 	bic.w	r3, r3, #1
 80048a4:	667b      	str	r3, [r7, #100]	; 0x64
 80048a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	3314      	adds	r3, #20
 80048ac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80048ae:	647a      	str	r2, [r7, #68]	; 0x44
 80048b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048b6:	e841 2300 	strex	r3, r2, [r1]
 80048ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80048bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1e5      	bne.n	800488e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	3314      	adds	r3, #20
 80048c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	e853 3f00 	ldrex	r3, [r3]
 80048d0:	623b      	str	r3, [r7, #32]
   return(result);
 80048d2:	6a3b      	ldr	r3, [r7, #32]
 80048d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048d8:	663b      	str	r3, [r7, #96]	; 0x60
 80048da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	3314      	adds	r3, #20
 80048e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80048e2:	633a      	str	r2, [r7, #48]	; 0x30
 80048e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048ea:	e841 2300 	strex	r3, r2, [r1]
 80048ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1e5      	bne.n	80048c2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80048f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048f8:	2220      	movs	r2, #32
 80048fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004902:	2b01      	cmp	r3, #1
 8004904:	d119      	bne.n	800493a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	330c      	adds	r3, #12
 800490c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	e853 3f00 	ldrex	r3, [r3]
 8004914:	60fb      	str	r3, [r7, #12]
   return(result);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f023 0310 	bic.w	r3, r3, #16
 800491c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800491e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	330c      	adds	r3, #12
 8004924:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004926:	61fa      	str	r2, [r7, #28]
 8004928:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492a:	69b9      	ldr	r1, [r7, #24]
 800492c:	69fa      	ldr	r2, [r7, #28]
 800492e:	e841 2300 	strex	r3, r2, [r1]
 8004932:	617b      	str	r3, [r7, #20]
   return(result);
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1e5      	bne.n	8004906 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800493a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800493c:	2200      	movs	r2, #0
 800493e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004940:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004944:	2b01      	cmp	r3, #1
 8004946:	d106      	bne.n	8004956 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800494a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800494c:	4619      	mov	r1, r3
 800494e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004950:	f7ff ff67 	bl	8004822 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004954:	e002      	b.n	800495c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004956:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004958:	f7ff ff48 	bl	80047ec <HAL_UART_RxCpltCallback>
}
 800495c:	bf00      	nop
 800495e:	3770      	adds	r7, #112	; 0x70
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004970:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2201      	movs	r2, #1
 8004976:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497c:	2b01      	cmp	r3, #1
 800497e:	d108      	bne.n	8004992 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004984:	085b      	lsrs	r3, r3, #1
 8004986:	b29b      	uxth	r3, r3
 8004988:	4619      	mov	r1, r3
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f7ff ff49 	bl	8004822 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004990:	e002      	b.n	8004998 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f7ff ff33 	bl	80047fe <HAL_UART_RxHalfCpltCallback>
}
 8004998:	bf00      	nop
 800499a:	3710      	adds	r7, #16
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80049a8:	2300      	movs	r3, #0
 80049aa:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049bc:	2b80      	cmp	r3, #128	; 0x80
 80049be:	bf0c      	ite	eq
 80049c0:	2301      	moveq	r3, #1
 80049c2:	2300      	movne	r3, #0
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b21      	cmp	r3, #33	; 0x21
 80049d2:	d108      	bne.n	80049e6 <UART_DMAError+0x46>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d005      	beq.n	80049e6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	2200      	movs	r2, #0
 80049de:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80049e0:	68b8      	ldr	r0, [r7, #8]
 80049e2:	f000 f92f 	bl	8004c44 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f0:	2b40      	cmp	r3, #64	; 0x40
 80049f2:	bf0c      	ite	eq
 80049f4:	2301      	moveq	r3, #1
 80049f6:	2300      	movne	r3, #0
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	2b22      	cmp	r3, #34	; 0x22
 8004a06:	d108      	bne.n	8004a1a <UART_DMAError+0x7a>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d005      	beq.n	8004a1a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	2200      	movs	r2, #0
 8004a12:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004a14:	68b8      	ldr	r0, [r7, #8]
 8004a16:	f000 f93c 	bl	8004c92 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a1e:	f043 0210 	orr.w	r2, r3, #16
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a26:	68b8      	ldr	r0, [r7, #8]
 8004a28:	f7ff fef2 	bl	8004810 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a2c:	bf00      	nop
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b090      	sub	sp, #64	; 0x40
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	603b      	str	r3, [r7, #0]
 8004a40:	4613      	mov	r3, r2
 8004a42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a44:	e050      	b.n	8004ae8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a4c:	d04c      	beq.n	8004ae8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d007      	beq.n	8004a64 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a54:	f7fe f92a 	bl	8002cac <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d241      	bcs.n	8004ae8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	330c      	adds	r3, #12
 8004a6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6e:	e853 3f00 	ldrex	r3, [r3]
 8004a72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a76:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	330c      	adds	r3, #12
 8004a82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a84:	637a      	str	r2, [r7, #52]	; 0x34
 8004a86:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a8c:	e841 2300 	strex	r3, r2, [r1]
 8004a90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1e5      	bne.n	8004a64 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	3314      	adds	r3, #20
 8004a9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	e853 3f00 	ldrex	r3, [r3]
 8004aa6:	613b      	str	r3, [r7, #16]
   return(result);
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	f023 0301 	bic.w	r3, r3, #1
 8004aae:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	3314      	adds	r3, #20
 8004ab6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ab8:	623a      	str	r2, [r7, #32]
 8004aba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004abc:	69f9      	ldr	r1, [r7, #28]
 8004abe:	6a3a      	ldr	r2, [r7, #32]
 8004ac0:	e841 2300 	strex	r3, r2, [r1]
 8004ac4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1e5      	bne.n	8004a98 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e00f      	b.n	8004b08 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	4013      	ands	r3, r2
 8004af2:	68ba      	ldr	r2, [r7, #8]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	bf0c      	ite	eq
 8004af8:	2301      	moveq	r3, #1
 8004afa:	2300      	movne	r3, #0
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	461a      	mov	r2, r3
 8004b00:	79fb      	ldrb	r3, [r7, #7]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d09f      	beq.n	8004a46 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3740      	adds	r7, #64	; 0x40
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b098      	sub	sp, #96	; 0x60
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004b1e:	68ba      	ldr	r2, [r7, #8]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	88fa      	ldrh	r2, [r7, #6]
 8004b28:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2222      	movs	r2, #34	; 0x22
 8004b34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b3c:	4a3e      	ldr	r2, [pc, #248]	; (8004c38 <UART_Start_Receive_DMA+0x128>)
 8004b3e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b44:	4a3d      	ldr	r2, [pc, #244]	; (8004c3c <UART_Start_Receive_DMA+0x12c>)
 8004b46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b4c:	4a3c      	ldr	r2, [pc, #240]	; (8004c40 <UART_Start_Receive_DMA+0x130>)
 8004b4e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b54:	2200      	movs	r2, #0
 8004b56:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004b58:	f107 0308 	add.w	r3, r7, #8
 8004b5c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	3304      	adds	r3, #4
 8004b68:	4619      	mov	r1, r3
 8004b6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	88fb      	ldrh	r3, [r7, #6]
 8004b70:	f7fe fcfc 	bl	800356c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004b74:	2300      	movs	r3, #0
 8004b76:	613b      	str	r3, [r7, #16]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	613b      	str	r3, [r7, #16]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	613b      	str	r3, [r7, #16]
 8004b88:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d019      	beq.n	8004bc6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	330c      	adds	r3, #12
 8004b98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b9c:	e853 3f00 	ldrex	r3, [r3]
 8004ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ba8:	65bb      	str	r3, [r7, #88]	; 0x58
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	330c      	adds	r3, #12
 8004bb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004bb2:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004bb4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004bb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bba:	e841 2300 	strex	r3, r2, [r1]
 8004bbe:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004bc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1e5      	bne.n	8004b92 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	3314      	adds	r3, #20
 8004bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd0:	e853 3f00 	ldrex	r3, [r3]
 8004bd4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd8:	f043 0301 	orr.w	r3, r3, #1
 8004bdc:	657b      	str	r3, [r7, #84]	; 0x54
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	3314      	adds	r3, #20
 8004be4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004be6:	63ba      	str	r2, [r7, #56]	; 0x38
 8004be8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004bec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bee:	e841 2300 	strex	r3, r2, [r1]
 8004bf2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1e5      	bne.n	8004bc6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	3314      	adds	r3, #20
 8004c00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	e853 3f00 	ldrex	r3, [r3]
 8004c08:	617b      	str	r3, [r7, #20]
   return(result);
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c10:	653b      	str	r3, [r7, #80]	; 0x50
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	3314      	adds	r3, #20
 8004c18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004c1a:	627a      	str	r2, [r7, #36]	; 0x24
 8004c1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1e:	6a39      	ldr	r1, [r7, #32]
 8004c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c22:	e841 2300 	strex	r3, r2, [r1]
 8004c26:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1e5      	bne.n	8004bfa <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3760      	adds	r7, #96	; 0x60
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	08004839 	.word	0x08004839
 8004c3c:	08004965 	.word	0x08004965
 8004c40:	080049a1 	.word	0x080049a1

08004c44 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b089      	sub	sp, #36	; 0x24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	330c      	adds	r3, #12
 8004c52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	e853 3f00 	ldrex	r3, [r3]
 8004c5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004c62:	61fb      	str	r3, [r7, #28]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	330c      	adds	r3, #12
 8004c6a:	69fa      	ldr	r2, [r7, #28]
 8004c6c:	61ba      	str	r2, [r7, #24]
 8004c6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c70:	6979      	ldr	r1, [r7, #20]
 8004c72:	69ba      	ldr	r2, [r7, #24]
 8004c74:	e841 2300 	strex	r3, r2, [r1]
 8004c78:	613b      	str	r3, [r7, #16]
   return(result);
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1e5      	bne.n	8004c4c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2220      	movs	r2, #32
 8004c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8004c88:	bf00      	nop
 8004c8a:	3724      	adds	r7, #36	; 0x24
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bc80      	pop	{r7}
 8004c90:	4770      	bx	lr

08004c92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b095      	sub	sp, #84	; 0x54
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	330c      	adds	r3, #12
 8004ca0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ca4:	e853 3f00 	ldrex	r3, [r3]
 8004ca8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	330c      	adds	r3, #12
 8004cb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004cba:	643a      	str	r2, [r7, #64]	; 0x40
 8004cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cbe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004cc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004cc2:	e841 2300 	strex	r3, r2, [r1]
 8004cc6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1e5      	bne.n	8004c9a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	3314      	adds	r3, #20
 8004cd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd6:	6a3b      	ldr	r3, [r7, #32]
 8004cd8:	e853 3f00 	ldrex	r3, [r3]
 8004cdc:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	f023 0301 	bic.w	r3, r3, #1
 8004ce4:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	3314      	adds	r3, #20
 8004cec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cf0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cf6:	e841 2300 	strex	r3, r2, [r1]
 8004cfa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1e5      	bne.n	8004cce <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d119      	bne.n	8004d3e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	330c      	adds	r3, #12
 8004d10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	e853 3f00 	ldrex	r3, [r3]
 8004d18:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	f023 0310 	bic.w	r3, r3, #16
 8004d20:	647b      	str	r3, [r7, #68]	; 0x44
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	330c      	adds	r3, #12
 8004d28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d2a:	61ba      	str	r2, [r7, #24]
 8004d2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2e:	6979      	ldr	r1, [r7, #20]
 8004d30:	69ba      	ldr	r2, [r7, #24]
 8004d32:	e841 2300 	strex	r3, r2, [r1]
 8004d36:	613b      	str	r3, [r7, #16]
   return(result);
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1e5      	bne.n	8004d0a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2220      	movs	r2, #32
 8004d42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004d4c:	bf00      	nop
 8004d4e:	3754      	adds	r7, #84	; 0x54
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bc80      	pop	{r7}
 8004d54:	4770      	bx	lr
	...

08004d58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68da      	ldr	r2, [r3, #12]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	430a      	orrs	r2, r1
 8004d74:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	689a      	ldr	r2, [r3, #8]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	431a      	orrs	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	69db      	ldr	r3, [r3, #28]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004d98:	f023 030c 	bic.w	r3, r3, #12
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	6812      	ldr	r2, [r2, #0]
 8004da0:	68b9      	ldr	r1, [r7, #8]
 8004da2:	430b      	orrs	r3, r1
 8004da4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	695b      	ldr	r3, [r3, #20]
 8004dac:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	699a      	ldr	r2, [r3, #24]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	430a      	orrs	r2, r1
 8004dba:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a55      	ldr	r2, [pc, #340]	; (8004f18 <UART_SetConfig+0x1c0>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d103      	bne.n	8004dce <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004dc6:	f7ff fba5 	bl	8004514 <HAL_RCC_GetPCLK2Freq>
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	e002      	b.n	8004dd4 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004dce:	f7ff fb8d 	bl	80044ec <HAL_RCC_GetPCLK1Freq>
 8004dd2:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	69db      	ldr	r3, [r3, #28]
 8004dd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ddc:	d14c      	bne.n	8004e78 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	4613      	mov	r3, r2
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	4413      	add	r3, r2
 8004de6:	009a      	lsls	r2, r3, #2
 8004de8:	441a      	add	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	005b      	lsls	r3, r3, #1
 8004df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df4:	4a49      	ldr	r2, [pc, #292]	; (8004f1c <UART_SetConfig+0x1c4>)
 8004df6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfa:	095b      	lsrs	r3, r3, #5
 8004dfc:	0119      	lsls	r1, r3, #4
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	4613      	mov	r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4413      	add	r3, r2
 8004e06:	009a      	lsls	r2, r3, #2
 8004e08:	441a      	add	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	005b      	lsls	r3, r3, #1
 8004e10:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e14:	4b41      	ldr	r3, [pc, #260]	; (8004f1c <UART_SetConfig+0x1c4>)
 8004e16:	fba3 0302 	umull	r0, r3, r3, r2
 8004e1a:	095b      	lsrs	r3, r3, #5
 8004e1c:	2064      	movs	r0, #100	; 0x64
 8004e1e:	fb00 f303 	mul.w	r3, r0, r3
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	00db      	lsls	r3, r3, #3
 8004e26:	3332      	adds	r3, #50	; 0x32
 8004e28:	4a3c      	ldr	r2, [pc, #240]	; (8004f1c <UART_SetConfig+0x1c4>)
 8004e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e2e:	095b      	lsrs	r3, r3, #5
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e36:	4419      	add	r1, r3
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	4413      	add	r3, r2
 8004e40:	009a      	lsls	r2, r3, #2
 8004e42:	441a      	add	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	005b      	lsls	r3, r3, #1
 8004e4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e4e:	4b33      	ldr	r3, [pc, #204]	; (8004f1c <UART_SetConfig+0x1c4>)
 8004e50:	fba3 0302 	umull	r0, r3, r3, r2
 8004e54:	095b      	lsrs	r3, r3, #5
 8004e56:	2064      	movs	r0, #100	; 0x64
 8004e58:	fb00 f303 	mul.w	r3, r0, r3
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	00db      	lsls	r3, r3, #3
 8004e60:	3332      	adds	r3, #50	; 0x32
 8004e62:	4a2e      	ldr	r2, [pc, #184]	; (8004f1c <UART_SetConfig+0x1c4>)
 8004e64:	fba2 2303 	umull	r2, r3, r2, r3
 8004e68:	095b      	lsrs	r3, r3, #5
 8004e6a:	f003 0207 	and.w	r2, r3, #7
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	440a      	add	r2, r1
 8004e74:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e76:	e04a      	b.n	8004f0e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	4413      	add	r3, r2
 8004e80:	009a      	lsls	r2, r3, #2
 8004e82:	441a      	add	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e8e:	4a23      	ldr	r2, [pc, #140]	; (8004f1c <UART_SetConfig+0x1c4>)
 8004e90:	fba2 2303 	umull	r2, r3, r2, r3
 8004e94:	095b      	lsrs	r3, r3, #5
 8004e96:	0119      	lsls	r1, r3, #4
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	4413      	add	r3, r2
 8004ea0:	009a      	lsls	r2, r3, #2
 8004ea2:	441a      	add	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	fbb2 f2f3 	udiv	r2, r2, r3
 8004eae:	4b1b      	ldr	r3, [pc, #108]	; (8004f1c <UART_SetConfig+0x1c4>)
 8004eb0:	fba3 0302 	umull	r0, r3, r3, r2
 8004eb4:	095b      	lsrs	r3, r3, #5
 8004eb6:	2064      	movs	r0, #100	; 0x64
 8004eb8:	fb00 f303 	mul.w	r3, r0, r3
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	011b      	lsls	r3, r3, #4
 8004ec0:	3332      	adds	r3, #50	; 0x32
 8004ec2:	4a16      	ldr	r2, [pc, #88]	; (8004f1c <UART_SetConfig+0x1c4>)
 8004ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec8:	095b      	lsrs	r3, r3, #5
 8004eca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ece:	4419      	add	r1, r3
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	4413      	add	r3, r2
 8004ed8:	009a      	lsls	r2, r3, #2
 8004eda:	441a      	add	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ee6:	4b0d      	ldr	r3, [pc, #52]	; (8004f1c <UART_SetConfig+0x1c4>)
 8004ee8:	fba3 0302 	umull	r0, r3, r3, r2
 8004eec:	095b      	lsrs	r3, r3, #5
 8004eee:	2064      	movs	r0, #100	; 0x64
 8004ef0:	fb00 f303 	mul.w	r3, r0, r3
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	011b      	lsls	r3, r3, #4
 8004ef8:	3332      	adds	r3, #50	; 0x32
 8004efa:	4a08      	ldr	r2, [pc, #32]	; (8004f1c <UART_SetConfig+0x1c4>)
 8004efc:	fba2 2303 	umull	r2, r3, r2, r3
 8004f00:	095b      	lsrs	r3, r3, #5
 8004f02:	f003 020f 	and.w	r2, r3, #15
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	440a      	add	r2, r1
 8004f0c:	609a      	str	r2, [r3, #8]
}
 8004f0e:	bf00      	nop
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	40013800 	.word	0x40013800
 8004f1c:	51eb851f 	.word	0x51eb851f

08004f20 <atoi>:
 8004f20:	220a      	movs	r2, #10
 8004f22:	2100      	movs	r1, #0
 8004f24:	f000 b9f0 	b.w	8005308 <strtol>

08004f28 <__errno>:
 8004f28:	4b01      	ldr	r3, [pc, #4]	; (8004f30 <__errno+0x8>)
 8004f2a:	6818      	ldr	r0, [r3, #0]
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	2000053c 	.word	0x2000053c

08004f34 <__libc_init_array>:
 8004f34:	b570      	push	{r4, r5, r6, lr}
 8004f36:	2600      	movs	r6, #0
 8004f38:	4d0c      	ldr	r5, [pc, #48]	; (8004f6c <__libc_init_array+0x38>)
 8004f3a:	4c0d      	ldr	r4, [pc, #52]	; (8004f70 <__libc_init_array+0x3c>)
 8004f3c:	1b64      	subs	r4, r4, r5
 8004f3e:	10a4      	asrs	r4, r4, #2
 8004f40:	42a6      	cmp	r6, r4
 8004f42:	d109      	bne.n	8004f58 <__libc_init_array+0x24>
 8004f44:	f001 fa60 	bl	8006408 <_init>
 8004f48:	2600      	movs	r6, #0
 8004f4a:	4d0a      	ldr	r5, [pc, #40]	; (8004f74 <__libc_init_array+0x40>)
 8004f4c:	4c0a      	ldr	r4, [pc, #40]	; (8004f78 <__libc_init_array+0x44>)
 8004f4e:	1b64      	subs	r4, r4, r5
 8004f50:	10a4      	asrs	r4, r4, #2
 8004f52:	42a6      	cmp	r6, r4
 8004f54:	d105      	bne.n	8004f62 <__libc_init_array+0x2e>
 8004f56:	bd70      	pop	{r4, r5, r6, pc}
 8004f58:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f5c:	4798      	blx	r3
 8004f5e:	3601      	adds	r6, #1
 8004f60:	e7ee      	b.n	8004f40 <__libc_init_array+0xc>
 8004f62:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f66:	4798      	blx	r3
 8004f68:	3601      	adds	r6, #1
 8004f6a:	e7f2      	b.n	8004f52 <__libc_init_array+0x1e>
 8004f6c:	08006da0 	.word	0x08006da0
 8004f70:	08006da0 	.word	0x08006da0
 8004f74:	08006da0 	.word	0x08006da0
 8004f78:	08006da4 	.word	0x08006da4

08004f7c <__itoa>:
 8004f7c:	1e93      	subs	r3, r2, #2
 8004f7e:	2b22      	cmp	r3, #34	; 0x22
 8004f80:	b510      	push	{r4, lr}
 8004f82:	460c      	mov	r4, r1
 8004f84:	d904      	bls.n	8004f90 <__itoa+0x14>
 8004f86:	2300      	movs	r3, #0
 8004f88:	461c      	mov	r4, r3
 8004f8a:	700b      	strb	r3, [r1, #0]
 8004f8c:	4620      	mov	r0, r4
 8004f8e:	bd10      	pop	{r4, pc}
 8004f90:	2a0a      	cmp	r2, #10
 8004f92:	d109      	bne.n	8004fa8 <__itoa+0x2c>
 8004f94:	2800      	cmp	r0, #0
 8004f96:	da07      	bge.n	8004fa8 <__itoa+0x2c>
 8004f98:	232d      	movs	r3, #45	; 0x2d
 8004f9a:	700b      	strb	r3, [r1, #0]
 8004f9c:	2101      	movs	r1, #1
 8004f9e:	4240      	negs	r0, r0
 8004fa0:	4421      	add	r1, r4
 8004fa2:	f000 f9d5 	bl	8005350 <__utoa>
 8004fa6:	e7f1      	b.n	8004f8c <__itoa+0x10>
 8004fa8:	2100      	movs	r1, #0
 8004faa:	e7f9      	b.n	8004fa0 <__itoa+0x24>

08004fac <itoa>:
 8004fac:	f7ff bfe6 	b.w	8004f7c <__itoa>

08004fb0 <memset>:
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	4402      	add	r2, r0
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d100      	bne.n	8004fba <memset+0xa>
 8004fb8:	4770      	bx	lr
 8004fba:	f803 1b01 	strb.w	r1, [r3], #1
 8004fbe:	e7f9      	b.n	8004fb4 <memset+0x4>

08004fc0 <iprintf>:
 8004fc0:	b40f      	push	{r0, r1, r2, r3}
 8004fc2:	4b0a      	ldr	r3, [pc, #40]	; (8004fec <iprintf+0x2c>)
 8004fc4:	b513      	push	{r0, r1, r4, lr}
 8004fc6:	681c      	ldr	r4, [r3, #0]
 8004fc8:	b124      	cbz	r4, 8004fd4 <iprintf+0x14>
 8004fca:	69a3      	ldr	r3, [r4, #24]
 8004fcc:	b913      	cbnz	r3, 8004fd4 <iprintf+0x14>
 8004fce:	4620      	mov	r0, r4
 8004fd0:	f000 fbf4 	bl	80057bc <__sinit>
 8004fd4:	ab05      	add	r3, sp, #20
 8004fd6:	4620      	mov	r0, r4
 8004fd8:	9a04      	ldr	r2, [sp, #16]
 8004fda:	68a1      	ldr	r1, [r4, #8]
 8004fdc:	9301      	str	r3, [sp, #4]
 8004fde:	f000 fe23 	bl	8005c28 <_vfiprintf_r>
 8004fe2:	b002      	add	sp, #8
 8004fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fe8:	b004      	add	sp, #16
 8004fea:	4770      	bx	lr
 8004fec:	2000053c 	.word	0x2000053c

08004ff0 <_puts_r>:
 8004ff0:	b570      	push	{r4, r5, r6, lr}
 8004ff2:	460e      	mov	r6, r1
 8004ff4:	4605      	mov	r5, r0
 8004ff6:	b118      	cbz	r0, 8005000 <_puts_r+0x10>
 8004ff8:	6983      	ldr	r3, [r0, #24]
 8004ffa:	b90b      	cbnz	r3, 8005000 <_puts_r+0x10>
 8004ffc:	f000 fbde 	bl	80057bc <__sinit>
 8005000:	69ab      	ldr	r3, [r5, #24]
 8005002:	68ac      	ldr	r4, [r5, #8]
 8005004:	b913      	cbnz	r3, 800500c <_puts_r+0x1c>
 8005006:	4628      	mov	r0, r5
 8005008:	f000 fbd8 	bl	80057bc <__sinit>
 800500c:	4b2c      	ldr	r3, [pc, #176]	; (80050c0 <_puts_r+0xd0>)
 800500e:	429c      	cmp	r4, r3
 8005010:	d120      	bne.n	8005054 <_puts_r+0x64>
 8005012:	686c      	ldr	r4, [r5, #4]
 8005014:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005016:	07db      	lsls	r3, r3, #31
 8005018:	d405      	bmi.n	8005026 <_puts_r+0x36>
 800501a:	89a3      	ldrh	r3, [r4, #12]
 800501c:	0598      	lsls	r0, r3, #22
 800501e:	d402      	bmi.n	8005026 <_puts_r+0x36>
 8005020:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005022:	f000 fc8e 	bl	8005942 <__retarget_lock_acquire_recursive>
 8005026:	89a3      	ldrh	r3, [r4, #12]
 8005028:	0719      	lsls	r1, r3, #28
 800502a:	d51d      	bpl.n	8005068 <_puts_r+0x78>
 800502c:	6923      	ldr	r3, [r4, #16]
 800502e:	b1db      	cbz	r3, 8005068 <_puts_r+0x78>
 8005030:	3e01      	subs	r6, #1
 8005032:	68a3      	ldr	r3, [r4, #8]
 8005034:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005038:	3b01      	subs	r3, #1
 800503a:	60a3      	str	r3, [r4, #8]
 800503c:	bb39      	cbnz	r1, 800508e <_puts_r+0x9e>
 800503e:	2b00      	cmp	r3, #0
 8005040:	da38      	bge.n	80050b4 <_puts_r+0xc4>
 8005042:	4622      	mov	r2, r4
 8005044:	210a      	movs	r1, #10
 8005046:	4628      	mov	r0, r5
 8005048:	f000 f9c4 	bl	80053d4 <__swbuf_r>
 800504c:	3001      	adds	r0, #1
 800504e:	d011      	beq.n	8005074 <_puts_r+0x84>
 8005050:	250a      	movs	r5, #10
 8005052:	e011      	b.n	8005078 <_puts_r+0x88>
 8005054:	4b1b      	ldr	r3, [pc, #108]	; (80050c4 <_puts_r+0xd4>)
 8005056:	429c      	cmp	r4, r3
 8005058:	d101      	bne.n	800505e <_puts_r+0x6e>
 800505a:	68ac      	ldr	r4, [r5, #8]
 800505c:	e7da      	b.n	8005014 <_puts_r+0x24>
 800505e:	4b1a      	ldr	r3, [pc, #104]	; (80050c8 <_puts_r+0xd8>)
 8005060:	429c      	cmp	r4, r3
 8005062:	bf08      	it	eq
 8005064:	68ec      	ldreq	r4, [r5, #12]
 8005066:	e7d5      	b.n	8005014 <_puts_r+0x24>
 8005068:	4621      	mov	r1, r4
 800506a:	4628      	mov	r0, r5
 800506c:	f000 fa04 	bl	8005478 <__swsetup_r>
 8005070:	2800      	cmp	r0, #0
 8005072:	d0dd      	beq.n	8005030 <_puts_r+0x40>
 8005074:	f04f 35ff 	mov.w	r5, #4294967295
 8005078:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800507a:	07da      	lsls	r2, r3, #31
 800507c:	d405      	bmi.n	800508a <_puts_r+0x9a>
 800507e:	89a3      	ldrh	r3, [r4, #12]
 8005080:	059b      	lsls	r3, r3, #22
 8005082:	d402      	bmi.n	800508a <_puts_r+0x9a>
 8005084:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005086:	f000 fc5d 	bl	8005944 <__retarget_lock_release_recursive>
 800508a:	4628      	mov	r0, r5
 800508c:	bd70      	pop	{r4, r5, r6, pc}
 800508e:	2b00      	cmp	r3, #0
 8005090:	da04      	bge.n	800509c <_puts_r+0xac>
 8005092:	69a2      	ldr	r2, [r4, #24]
 8005094:	429a      	cmp	r2, r3
 8005096:	dc06      	bgt.n	80050a6 <_puts_r+0xb6>
 8005098:	290a      	cmp	r1, #10
 800509a:	d004      	beq.n	80050a6 <_puts_r+0xb6>
 800509c:	6823      	ldr	r3, [r4, #0]
 800509e:	1c5a      	adds	r2, r3, #1
 80050a0:	6022      	str	r2, [r4, #0]
 80050a2:	7019      	strb	r1, [r3, #0]
 80050a4:	e7c5      	b.n	8005032 <_puts_r+0x42>
 80050a6:	4622      	mov	r2, r4
 80050a8:	4628      	mov	r0, r5
 80050aa:	f000 f993 	bl	80053d4 <__swbuf_r>
 80050ae:	3001      	adds	r0, #1
 80050b0:	d1bf      	bne.n	8005032 <_puts_r+0x42>
 80050b2:	e7df      	b.n	8005074 <_puts_r+0x84>
 80050b4:	250a      	movs	r5, #10
 80050b6:	6823      	ldr	r3, [r4, #0]
 80050b8:	1c5a      	adds	r2, r3, #1
 80050ba:	6022      	str	r2, [r4, #0]
 80050bc:	701d      	strb	r5, [r3, #0]
 80050be:	e7db      	b.n	8005078 <_puts_r+0x88>
 80050c0:	08006d24 	.word	0x08006d24
 80050c4:	08006d44 	.word	0x08006d44
 80050c8:	08006d04 	.word	0x08006d04

080050cc <puts>:
 80050cc:	4b02      	ldr	r3, [pc, #8]	; (80050d8 <puts+0xc>)
 80050ce:	4601      	mov	r1, r0
 80050d0:	6818      	ldr	r0, [r3, #0]
 80050d2:	f7ff bf8d 	b.w	8004ff0 <_puts_r>
 80050d6:	bf00      	nop
 80050d8:	2000053c 	.word	0x2000053c

080050dc <srand>:
 80050dc:	b538      	push	{r3, r4, r5, lr}
 80050de:	4b10      	ldr	r3, [pc, #64]	; (8005120 <srand+0x44>)
 80050e0:	4604      	mov	r4, r0
 80050e2:	681d      	ldr	r5, [r3, #0]
 80050e4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80050e6:	b9b3      	cbnz	r3, 8005116 <srand+0x3a>
 80050e8:	2018      	movs	r0, #24
 80050ea:	f000 fc91 	bl	8005a10 <malloc>
 80050ee:	4602      	mov	r2, r0
 80050f0:	63a8      	str	r0, [r5, #56]	; 0x38
 80050f2:	b920      	cbnz	r0, 80050fe <srand+0x22>
 80050f4:	2142      	movs	r1, #66	; 0x42
 80050f6:	4b0b      	ldr	r3, [pc, #44]	; (8005124 <srand+0x48>)
 80050f8:	480b      	ldr	r0, [pc, #44]	; (8005128 <srand+0x4c>)
 80050fa:	f000 fa2b 	bl	8005554 <__assert_func>
 80050fe:	490b      	ldr	r1, [pc, #44]	; (800512c <srand+0x50>)
 8005100:	4b0b      	ldr	r3, [pc, #44]	; (8005130 <srand+0x54>)
 8005102:	e9c0 1300 	strd	r1, r3, [r0]
 8005106:	4b0b      	ldr	r3, [pc, #44]	; (8005134 <srand+0x58>)
 8005108:	2100      	movs	r1, #0
 800510a:	6083      	str	r3, [r0, #8]
 800510c:	230b      	movs	r3, #11
 800510e:	8183      	strh	r3, [r0, #12]
 8005110:	2001      	movs	r0, #1
 8005112:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005116:	2200      	movs	r2, #0
 8005118:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800511a:	611c      	str	r4, [r3, #16]
 800511c:	615a      	str	r2, [r3, #20]
 800511e:	bd38      	pop	{r3, r4, r5, pc}
 8005120:	2000053c 	.word	0x2000053c
 8005124:	08006b30 	.word	0x08006b30
 8005128:	08006b47 	.word	0x08006b47
 800512c:	abcd330e 	.word	0xabcd330e
 8005130:	e66d1234 	.word	0xe66d1234
 8005134:	0005deec 	.word	0x0005deec

08005138 <rand>:
 8005138:	4b16      	ldr	r3, [pc, #88]	; (8005194 <rand+0x5c>)
 800513a:	b510      	push	{r4, lr}
 800513c:	681c      	ldr	r4, [r3, #0]
 800513e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005140:	b9b3      	cbnz	r3, 8005170 <rand+0x38>
 8005142:	2018      	movs	r0, #24
 8005144:	f000 fc64 	bl	8005a10 <malloc>
 8005148:	4602      	mov	r2, r0
 800514a:	63a0      	str	r0, [r4, #56]	; 0x38
 800514c:	b920      	cbnz	r0, 8005158 <rand+0x20>
 800514e:	214e      	movs	r1, #78	; 0x4e
 8005150:	4b11      	ldr	r3, [pc, #68]	; (8005198 <rand+0x60>)
 8005152:	4812      	ldr	r0, [pc, #72]	; (800519c <rand+0x64>)
 8005154:	f000 f9fe 	bl	8005554 <__assert_func>
 8005158:	4911      	ldr	r1, [pc, #68]	; (80051a0 <rand+0x68>)
 800515a:	4b12      	ldr	r3, [pc, #72]	; (80051a4 <rand+0x6c>)
 800515c:	e9c0 1300 	strd	r1, r3, [r0]
 8005160:	4b11      	ldr	r3, [pc, #68]	; (80051a8 <rand+0x70>)
 8005162:	2100      	movs	r1, #0
 8005164:	6083      	str	r3, [r0, #8]
 8005166:	230b      	movs	r3, #11
 8005168:	8183      	strh	r3, [r0, #12]
 800516a:	2001      	movs	r0, #1
 800516c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005170:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8005172:	4a0e      	ldr	r2, [pc, #56]	; (80051ac <rand+0x74>)
 8005174:	6920      	ldr	r0, [r4, #16]
 8005176:	6963      	ldr	r3, [r4, #20]
 8005178:	4342      	muls	r2, r0
 800517a:	490d      	ldr	r1, [pc, #52]	; (80051b0 <rand+0x78>)
 800517c:	fb01 2203 	mla	r2, r1, r3, r2
 8005180:	fba0 0101 	umull	r0, r1, r0, r1
 8005184:	1c43      	adds	r3, r0, #1
 8005186:	eb42 0001 	adc.w	r0, r2, r1
 800518a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800518e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005192:	bd10      	pop	{r4, pc}
 8005194:	2000053c 	.word	0x2000053c
 8005198:	08006b30 	.word	0x08006b30
 800519c:	08006b47 	.word	0x08006b47
 80051a0:	abcd330e 	.word	0xabcd330e
 80051a4:	e66d1234 	.word	0xe66d1234
 80051a8:	0005deec 	.word	0x0005deec
 80051ac:	5851f42d 	.word	0x5851f42d
 80051b0:	4c957f2d 	.word	0x4c957f2d

080051b4 <strcat>:
 80051b4:	4602      	mov	r2, r0
 80051b6:	b510      	push	{r4, lr}
 80051b8:	7814      	ldrb	r4, [r2, #0]
 80051ba:	4613      	mov	r3, r2
 80051bc:	3201      	adds	r2, #1
 80051be:	2c00      	cmp	r4, #0
 80051c0:	d1fa      	bne.n	80051b8 <strcat+0x4>
 80051c2:	3b01      	subs	r3, #1
 80051c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051c8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80051cc:	2a00      	cmp	r2, #0
 80051ce:	d1f9      	bne.n	80051c4 <strcat+0x10>
 80051d0:	bd10      	pop	{r4, pc}

080051d2 <strcpy>:
 80051d2:	4603      	mov	r3, r0
 80051d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051d8:	f803 2b01 	strb.w	r2, [r3], #1
 80051dc:	2a00      	cmp	r2, #0
 80051de:	d1f9      	bne.n	80051d4 <strcpy+0x2>
 80051e0:	4770      	bx	lr

080051e2 <strstr>:
 80051e2:	780a      	ldrb	r2, [r1, #0]
 80051e4:	b570      	push	{r4, r5, r6, lr}
 80051e6:	b96a      	cbnz	r2, 8005204 <strstr+0x22>
 80051e8:	bd70      	pop	{r4, r5, r6, pc}
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d109      	bne.n	8005202 <strstr+0x20>
 80051ee:	460c      	mov	r4, r1
 80051f0:	4605      	mov	r5, r0
 80051f2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d0f6      	beq.n	80051e8 <strstr+0x6>
 80051fa:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80051fe:	429e      	cmp	r6, r3
 8005200:	d0f7      	beq.n	80051f2 <strstr+0x10>
 8005202:	3001      	adds	r0, #1
 8005204:	7803      	ldrb	r3, [r0, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1ef      	bne.n	80051ea <strstr+0x8>
 800520a:	4618      	mov	r0, r3
 800520c:	e7ec      	b.n	80051e8 <strstr+0x6>
	...

08005210 <_strtol_l.constprop.0>:
 8005210:	2b01      	cmp	r3, #1
 8005212:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005216:	4680      	mov	r8, r0
 8005218:	d001      	beq.n	800521e <_strtol_l.constprop.0+0xe>
 800521a:	2b24      	cmp	r3, #36	; 0x24
 800521c:	d906      	bls.n	800522c <_strtol_l.constprop.0+0x1c>
 800521e:	f7ff fe83 	bl	8004f28 <__errno>
 8005222:	2316      	movs	r3, #22
 8005224:	6003      	str	r3, [r0, #0]
 8005226:	2000      	movs	r0, #0
 8005228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800522c:	460d      	mov	r5, r1
 800522e:	4f35      	ldr	r7, [pc, #212]	; (8005304 <_strtol_l.constprop.0+0xf4>)
 8005230:	4628      	mov	r0, r5
 8005232:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005236:	5de6      	ldrb	r6, [r4, r7]
 8005238:	f016 0608 	ands.w	r6, r6, #8
 800523c:	d1f8      	bne.n	8005230 <_strtol_l.constprop.0+0x20>
 800523e:	2c2d      	cmp	r4, #45	; 0x2d
 8005240:	d12f      	bne.n	80052a2 <_strtol_l.constprop.0+0x92>
 8005242:	2601      	movs	r6, #1
 8005244:	782c      	ldrb	r4, [r5, #0]
 8005246:	1c85      	adds	r5, r0, #2
 8005248:	2b00      	cmp	r3, #0
 800524a:	d057      	beq.n	80052fc <_strtol_l.constprop.0+0xec>
 800524c:	2b10      	cmp	r3, #16
 800524e:	d109      	bne.n	8005264 <_strtol_l.constprop.0+0x54>
 8005250:	2c30      	cmp	r4, #48	; 0x30
 8005252:	d107      	bne.n	8005264 <_strtol_l.constprop.0+0x54>
 8005254:	7828      	ldrb	r0, [r5, #0]
 8005256:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800525a:	2858      	cmp	r0, #88	; 0x58
 800525c:	d149      	bne.n	80052f2 <_strtol_l.constprop.0+0xe2>
 800525e:	2310      	movs	r3, #16
 8005260:	786c      	ldrb	r4, [r5, #1]
 8005262:	3502      	adds	r5, #2
 8005264:	2700      	movs	r7, #0
 8005266:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800526a:	f10e 3eff 	add.w	lr, lr, #4294967295
 800526e:	fbbe f9f3 	udiv	r9, lr, r3
 8005272:	4638      	mov	r0, r7
 8005274:	fb03 ea19 	mls	sl, r3, r9, lr
 8005278:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800527c:	f1bc 0f09 	cmp.w	ip, #9
 8005280:	d814      	bhi.n	80052ac <_strtol_l.constprop.0+0x9c>
 8005282:	4664      	mov	r4, ip
 8005284:	42a3      	cmp	r3, r4
 8005286:	dd22      	ble.n	80052ce <_strtol_l.constprop.0+0xbe>
 8005288:	2f00      	cmp	r7, #0
 800528a:	db1d      	blt.n	80052c8 <_strtol_l.constprop.0+0xb8>
 800528c:	4581      	cmp	r9, r0
 800528e:	d31b      	bcc.n	80052c8 <_strtol_l.constprop.0+0xb8>
 8005290:	d101      	bne.n	8005296 <_strtol_l.constprop.0+0x86>
 8005292:	45a2      	cmp	sl, r4
 8005294:	db18      	blt.n	80052c8 <_strtol_l.constprop.0+0xb8>
 8005296:	2701      	movs	r7, #1
 8005298:	fb00 4003 	mla	r0, r0, r3, r4
 800529c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80052a0:	e7ea      	b.n	8005278 <_strtol_l.constprop.0+0x68>
 80052a2:	2c2b      	cmp	r4, #43	; 0x2b
 80052a4:	bf04      	itt	eq
 80052a6:	782c      	ldrbeq	r4, [r5, #0]
 80052a8:	1c85      	addeq	r5, r0, #2
 80052aa:	e7cd      	b.n	8005248 <_strtol_l.constprop.0+0x38>
 80052ac:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80052b0:	f1bc 0f19 	cmp.w	ip, #25
 80052b4:	d801      	bhi.n	80052ba <_strtol_l.constprop.0+0xaa>
 80052b6:	3c37      	subs	r4, #55	; 0x37
 80052b8:	e7e4      	b.n	8005284 <_strtol_l.constprop.0+0x74>
 80052ba:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80052be:	f1bc 0f19 	cmp.w	ip, #25
 80052c2:	d804      	bhi.n	80052ce <_strtol_l.constprop.0+0xbe>
 80052c4:	3c57      	subs	r4, #87	; 0x57
 80052c6:	e7dd      	b.n	8005284 <_strtol_l.constprop.0+0x74>
 80052c8:	f04f 37ff 	mov.w	r7, #4294967295
 80052cc:	e7e6      	b.n	800529c <_strtol_l.constprop.0+0x8c>
 80052ce:	2f00      	cmp	r7, #0
 80052d0:	da07      	bge.n	80052e2 <_strtol_l.constprop.0+0xd2>
 80052d2:	2322      	movs	r3, #34	; 0x22
 80052d4:	4670      	mov	r0, lr
 80052d6:	f8c8 3000 	str.w	r3, [r8]
 80052da:	2a00      	cmp	r2, #0
 80052dc:	d0a4      	beq.n	8005228 <_strtol_l.constprop.0+0x18>
 80052de:	1e69      	subs	r1, r5, #1
 80052e0:	e005      	b.n	80052ee <_strtol_l.constprop.0+0xde>
 80052e2:	b106      	cbz	r6, 80052e6 <_strtol_l.constprop.0+0xd6>
 80052e4:	4240      	negs	r0, r0
 80052e6:	2a00      	cmp	r2, #0
 80052e8:	d09e      	beq.n	8005228 <_strtol_l.constprop.0+0x18>
 80052ea:	2f00      	cmp	r7, #0
 80052ec:	d1f7      	bne.n	80052de <_strtol_l.constprop.0+0xce>
 80052ee:	6011      	str	r1, [r2, #0]
 80052f0:	e79a      	b.n	8005228 <_strtol_l.constprop.0+0x18>
 80052f2:	2430      	movs	r4, #48	; 0x30
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d1b5      	bne.n	8005264 <_strtol_l.constprop.0+0x54>
 80052f8:	2308      	movs	r3, #8
 80052fa:	e7b3      	b.n	8005264 <_strtol_l.constprop.0+0x54>
 80052fc:	2c30      	cmp	r4, #48	; 0x30
 80052fe:	d0a9      	beq.n	8005254 <_strtol_l.constprop.0+0x44>
 8005300:	230a      	movs	r3, #10
 8005302:	e7af      	b.n	8005264 <_strtol_l.constprop.0+0x54>
 8005304:	08006c04 	.word	0x08006c04

08005308 <strtol>:
 8005308:	4613      	mov	r3, r2
 800530a:	460a      	mov	r2, r1
 800530c:	4601      	mov	r1, r0
 800530e:	4802      	ldr	r0, [pc, #8]	; (8005318 <strtol+0x10>)
 8005310:	6800      	ldr	r0, [r0, #0]
 8005312:	f7ff bf7d 	b.w	8005210 <_strtol_l.constprop.0>
 8005316:	bf00      	nop
 8005318:	2000053c 	.word	0x2000053c

0800531c <time>:
 800531c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800531e:	4b0b      	ldr	r3, [pc, #44]	; (800534c <time+0x30>)
 8005320:	4604      	mov	r4, r0
 8005322:	2200      	movs	r2, #0
 8005324:	4669      	mov	r1, sp
 8005326:	6818      	ldr	r0, [r3, #0]
 8005328:	f000 faf8 	bl	800591c <_gettimeofday_r>
 800532c:	2800      	cmp	r0, #0
 800532e:	da05      	bge.n	800533c <time+0x20>
 8005330:	f04f 32ff 	mov.w	r2, #4294967295
 8005334:	f04f 33ff 	mov.w	r3, #4294967295
 8005338:	e9cd 2300 	strd	r2, r3, [sp]
 800533c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005340:	b10c      	cbz	r4, 8005346 <time+0x2a>
 8005342:	e9c4 0100 	strd	r0, r1, [r4]
 8005346:	b004      	add	sp, #16
 8005348:	bd10      	pop	{r4, pc}
 800534a:	bf00      	nop
 800534c:	2000053c 	.word	0x2000053c

08005350 <__utoa>:
 8005350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005352:	b08b      	sub	sp, #44	; 0x2c
 8005354:	4605      	mov	r5, r0
 8005356:	460b      	mov	r3, r1
 8005358:	466e      	mov	r6, sp
 800535a:	4c1d      	ldr	r4, [pc, #116]	; (80053d0 <__utoa+0x80>)
 800535c:	f104 0c20 	add.w	ip, r4, #32
 8005360:	4637      	mov	r7, r6
 8005362:	6820      	ldr	r0, [r4, #0]
 8005364:	6861      	ldr	r1, [r4, #4]
 8005366:	3408      	adds	r4, #8
 8005368:	c703      	stmia	r7!, {r0, r1}
 800536a:	4564      	cmp	r4, ip
 800536c:	463e      	mov	r6, r7
 800536e:	d1f7      	bne.n	8005360 <__utoa+0x10>
 8005370:	7921      	ldrb	r1, [r4, #4]
 8005372:	6820      	ldr	r0, [r4, #0]
 8005374:	7139      	strb	r1, [r7, #4]
 8005376:	1e91      	subs	r1, r2, #2
 8005378:	2922      	cmp	r1, #34	; 0x22
 800537a:	6038      	str	r0, [r7, #0]
 800537c:	f04f 0100 	mov.w	r1, #0
 8005380:	d904      	bls.n	800538c <__utoa+0x3c>
 8005382:	7019      	strb	r1, [r3, #0]
 8005384:	460b      	mov	r3, r1
 8005386:	4618      	mov	r0, r3
 8005388:	b00b      	add	sp, #44	; 0x2c
 800538a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800538c:	1e58      	subs	r0, r3, #1
 800538e:	4684      	mov	ip, r0
 8005390:	fbb5 f7f2 	udiv	r7, r5, r2
 8005394:	fb02 5617 	mls	r6, r2, r7, r5
 8005398:	3628      	adds	r6, #40	; 0x28
 800539a:	446e      	add	r6, sp
 800539c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80053a0:	460c      	mov	r4, r1
 80053a2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80053a6:	462e      	mov	r6, r5
 80053a8:	42b2      	cmp	r2, r6
 80053aa:	463d      	mov	r5, r7
 80053ac:	f101 0101 	add.w	r1, r1, #1
 80053b0:	d9ee      	bls.n	8005390 <__utoa+0x40>
 80053b2:	2200      	movs	r2, #0
 80053b4:	545a      	strb	r2, [r3, r1]
 80053b6:	1919      	adds	r1, r3, r4
 80053b8:	1aa5      	subs	r5, r4, r2
 80053ba:	42aa      	cmp	r2, r5
 80053bc:	dae3      	bge.n	8005386 <__utoa+0x36>
 80053be:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80053c2:	780e      	ldrb	r6, [r1, #0]
 80053c4:	3201      	adds	r2, #1
 80053c6:	7006      	strb	r6, [r0, #0]
 80053c8:	f801 5901 	strb.w	r5, [r1], #-1
 80053cc:	e7f4      	b.n	80053b8 <__utoa+0x68>
 80053ce:	bf00      	nop
 80053d0:	08006ba2 	.word	0x08006ba2

080053d4 <__swbuf_r>:
 80053d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053d6:	460e      	mov	r6, r1
 80053d8:	4614      	mov	r4, r2
 80053da:	4605      	mov	r5, r0
 80053dc:	b118      	cbz	r0, 80053e6 <__swbuf_r+0x12>
 80053de:	6983      	ldr	r3, [r0, #24]
 80053e0:	b90b      	cbnz	r3, 80053e6 <__swbuf_r+0x12>
 80053e2:	f000 f9eb 	bl	80057bc <__sinit>
 80053e6:	4b21      	ldr	r3, [pc, #132]	; (800546c <__swbuf_r+0x98>)
 80053e8:	429c      	cmp	r4, r3
 80053ea:	d12b      	bne.n	8005444 <__swbuf_r+0x70>
 80053ec:	686c      	ldr	r4, [r5, #4]
 80053ee:	69a3      	ldr	r3, [r4, #24]
 80053f0:	60a3      	str	r3, [r4, #8]
 80053f2:	89a3      	ldrh	r3, [r4, #12]
 80053f4:	071a      	lsls	r2, r3, #28
 80053f6:	d52f      	bpl.n	8005458 <__swbuf_r+0x84>
 80053f8:	6923      	ldr	r3, [r4, #16]
 80053fa:	b36b      	cbz	r3, 8005458 <__swbuf_r+0x84>
 80053fc:	6923      	ldr	r3, [r4, #16]
 80053fe:	6820      	ldr	r0, [r4, #0]
 8005400:	b2f6      	uxtb	r6, r6
 8005402:	1ac0      	subs	r0, r0, r3
 8005404:	6963      	ldr	r3, [r4, #20]
 8005406:	4637      	mov	r7, r6
 8005408:	4283      	cmp	r3, r0
 800540a:	dc04      	bgt.n	8005416 <__swbuf_r+0x42>
 800540c:	4621      	mov	r1, r4
 800540e:	4628      	mov	r0, r5
 8005410:	f000 f940 	bl	8005694 <_fflush_r>
 8005414:	bb30      	cbnz	r0, 8005464 <__swbuf_r+0x90>
 8005416:	68a3      	ldr	r3, [r4, #8]
 8005418:	3001      	adds	r0, #1
 800541a:	3b01      	subs	r3, #1
 800541c:	60a3      	str	r3, [r4, #8]
 800541e:	6823      	ldr	r3, [r4, #0]
 8005420:	1c5a      	adds	r2, r3, #1
 8005422:	6022      	str	r2, [r4, #0]
 8005424:	701e      	strb	r6, [r3, #0]
 8005426:	6963      	ldr	r3, [r4, #20]
 8005428:	4283      	cmp	r3, r0
 800542a:	d004      	beq.n	8005436 <__swbuf_r+0x62>
 800542c:	89a3      	ldrh	r3, [r4, #12]
 800542e:	07db      	lsls	r3, r3, #31
 8005430:	d506      	bpl.n	8005440 <__swbuf_r+0x6c>
 8005432:	2e0a      	cmp	r6, #10
 8005434:	d104      	bne.n	8005440 <__swbuf_r+0x6c>
 8005436:	4621      	mov	r1, r4
 8005438:	4628      	mov	r0, r5
 800543a:	f000 f92b 	bl	8005694 <_fflush_r>
 800543e:	b988      	cbnz	r0, 8005464 <__swbuf_r+0x90>
 8005440:	4638      	mov	r0, r7
 8005442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005444:	4b0a      	ldr	r3, [pc, #40]	; (8005470 <__swbuf_r+0x9c>)
 8005446:	429c      	cmp	r4, r3
 8005448:	d101      	bne.n	800544e <__swbuf_r+0x7a>
 800544a:	68ac      	ldr	r4, [r5, #8]
 800544c:	e7cf      	b.n	80053ee <__swbuf_r+0x1a>
 800544e:	4b09      	ldr	r3, [pc, #36]	; (8005474 <__swbuf_r+0xa0>)
 8005450:	429c      	cmp	r4, r3
 8005452:	bf08      	it	eq
 8005454:	68ec      	ldreq	r4, [r5, #12]
 8005456:	e7ca      	b.n	80053ee <__swbuf_r+0x1a>
 8005458:	4621      	mov	r1, r4
 800545a:	4628      	mov	r0, r5
 800545c:	f000 f80c 	bl	8005478 <__swsetup_r>
 8005460:	2800      	cmp	r0, #0
 8005462:	d0cb      	beq.n	80053fc <__swbuf_r+0x28>
 8005464:	f04f 37ff 	mov.w	r7, #4294967295
 8005468:	e7ea      	b.n	8005440 <__swbuf_r+0x6c>
 800546a:	bf00      	nop
 800546c:	08006d24 	.word	0x08006d24
 8005470:	08006d44 	.word	0x08006d44
 8005474:	08006d04 	.word	0x08006d04

08005478 <__swsetup_r>:
 8005478:	4b32      	ldr	r3, [pc, #200]	; (8005544 <__swsetup_r+0xcc>)
 800547a:	b570      	push	{r4, r5, r6, lr}
 800547c:	681d      	ldr	r5, [r3, #0]
 800547e:	4606      	mov	r6, r0
 8005480:	460c      	mov	r4, r1
 8005482:	b125      	cbz	r5, 800548e <__swsetup_r+0x16>
 8005484:	69ab      	ldr	r3, [r5, #24]
 8005486:	b913      	cbnz	r3, 800548e <__swsetup_r+0x16>
 8005488:	4628      	mov	r0, r5
 800548a:	f000 f997 	bl	80057bc <__sinit>
 800548e:	4b2e      	ldr	r3, [pc, #184]	; (8005548 <__swsetup_r+0xd0>)
 8005490:	429c      	cmp	r4, r3
 8005492:	d10f      	bne.n	80054b4 <__swsetup_r+0x3c>
 8005494:	686c      	ldr	r4, [r5, #4]
 8005496:	89a3      	ldrh	r3, [r4, #12]
 8005498:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800549c:	0719      	lsls	r1, r3, #28
 800549e:	d42c      	bmi.n	80054fa <__swsetup_r+0x82>
 80054a0:	06dd      	lsls	r5, r3, #27
 80054a2:	d411      	bmi.n	80054c8 <__swsetup_r+0x50>
 80054a4:	2309      	movs	r3, #9
 80054a6:	6033      	str	r3, [r6, #0]
 80054a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80054ac:	f04f 30ff 	mov.w	r0, #4294967295
 80054b0:	81a3      	strh	r3, [r4, #12]
 80054b2:	e03e      	b.n	8005532 <__swsetup_r+0xba>
 80054b4:	4b25      	ldr	r3, [pc, #148]	; (800554c <__swsetup_r+0xd4>)
 80054b6:	429c      	cmp	r4, r3
 80054b8:	d101      	bne.n	80054be <__swsetup_r+0x46>
 80054ba:	68ac      	ldr	r4, [r5, #8]
 80054bc:	e7eb      	b.n	8005496 <__swsetup_r+0x1e>
 80054be:	4b24      	ldr	r3, [pc, #144]	; (8005550 <__swsetup_r+0xd8>)
 80054c0:	429c      	cmp	r4, r3
 80054c2:	bf08      	it	eq
 80054c4:	68ec      	ldreq	r4, [r5, #12]
 80054c6:	e7e6      	b.n	8005496 <__swsetup_r+0x1e>
 80054c8:	0758      	lsls	r0, r3, #29
 80054ca:	d512      	bpl.n	80054f2 <__swsetup_r+0x7a>
 80054cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054ce:	b141      	cbz	r1, 80054e2 <__swsetup_r+0x6a>
 80054d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054d4:	4299      	cmp	r1, r3
 80054d6:	d002      	beq.n	80054de <__swsetup_r+0x66>
 80054d8:	4630      	mov	r0, r6
 80054da:	f000 faa1 	bl	8005a20 <_free_r>
 80054de:	2300      	movs	r3, #0
 80054e0:	6363      	str	r3, [r4, #52]	; 0x34
 80054e2:	89a3      	ldrh	r3, [r4, #12]
 80054e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80054e8:	81a3      	strh	r3, [r4, #12]
 80054ea:	2300      	movs	r3, #0
 80054ec:	6063      	str	r3, [r4, #4]
 80054ee:	6923      	ldr	r3, [r4, #16]
 80054f0:	6023      	str	r3, [r4, #0]
 80054f2:	89a3      	ldrh	r3, [r4, #12]
 80054f4:	f043 0308 	orr.w	r3, r3, #8
 80054f8:	81a3      	strh	r3, [r4, #12]
 80054fa:	6923      	ldr	r3, [r4, #16]
 80054fc:	b94b      	cbnz	r3, 8005512 <__swsetup_r+0x9a>
 80054fe:	89a3      	ldrh	r3, [r4, #12]
 8005500:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005508:	d003      	beq.n	8005512 <__swsetup_r+0x9a>
 800550a:	4621      	mov	r1, r4
 800550c:	4630      	mov	r0, r6
 800550e:	f000 fa3f 	bl	8005990 <__smakebuf_r>
 8005512:	89a0      	ldrh	r0, [r4, #12]
 8005514:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005518:	f010 0301 	ands.w	r3, r0, #1
 800551c:	d00a      	beq.n	8005534 <__swsetup_r+0xbc>
 800551e:	2300      	movs	r3, #0
 8005520:	60a3      	str	r3, [r4, #8]
 8005522:	6963      	ldr	r3, [r4, #20]
 8005524:	425b      	negs	r3, r3
 8005526:	61a3      	str	r3, [r4, #24]
 8005528:	6923      	ldr	r3, [r4, #16]
 800552a:	b943      	cbnz	r3, 800553e <__swsetup_r+0xc6>
 800552c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005530:	d1ba      	bne.n	80054a8 <__swsetup_r+0x30>
 8005532:	bd70      	pop	{r4, r5, r6, pc}
 8005534:	0781      	lsls	r1, r0, #30
 8005536:	bf58      	it	pl
 8005538:	6963      	ldrpl	r3, [r4, #20]
 800553a:	60a3      	str	r3, [r4, #8]
 800553c:	e7f4      	b.n	8005528 <__swsetup_r+0xb0>
 800553e:	2000      	movs	r0, #0
 8005540:	e7f7      	b.n	8005532 <__swsetup_r+0xba>
 8005542:	bf00      	nop
 8005544:	2000053c 	.word	0x2000053c
 8005548:	08006d24 	.word	0x08006d24
 800554c:	08006d44 	.word	0x08006d44
 8005550:	08006d04 	.word	0x08006d04

08005554 <__assert_func>:
 8005554:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005556:	4614      	mov	r4, r2
 8005558:	461a      	mov	r2, r3
 800555a:	4b09      	ldr	r3, [pc, #36]	; (8005580 <__assert_func+0x2c>)
 800555c:	4605      	mov	r5, r0
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68d8      	ldr	r0, [r3, #12]
 8005562:	b14c      	cbz	r4, 8005578 <__assert_func+0x24>
 8005564:	4b07      	ldr	r3, [pc, #28]	; (8005584 <__assert_func+0x30>)
 8005566:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800556a:	9100      	str	r1, [sp, #0]
 800556c:	462b      	mov	r3, r5
 800556e:	4906      	ldr	r1, [pc, #24]	; (8005588 <__assert_func+0x34>)
 8005570:	f000 f9a2 	bl	80058b8 <fiprintf>
 8005574:	f000 fe84 	bl	8006280 <abort>
 8005578:	4b04      	ldr	r3, [pc, #16]	; (800558c <__assert_func+0x38>)
 800557a:	461c      	mov	r4, r3
 800557c:	e7f3      	b.n	8005566 <__assert_func+0x12>
 800557e:	bf00      	nop
 8005580:	2000053c 	.word	0x2000053c
 8005584:	08006bc7 	.word	0x08006bc7
 8005588:	08006bd4 	.word	0x08006bd4
 800558c:	08006c02 	.word	0x08006c02

08005590 <__sflush_r>:
 8005590:	898a      	ldrh	r2, [r1, #12]
 8005592:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005594:	4605      	mov	r5, r0
 8005596:	0710      	lsls	r0, r2, #28
 8005598:	460c      	mov	r4, r1
 800559a:	d457      	bmi.n	800564c <__sflush_r+0xbc>
 800559c:	684b      	ldr	r3, [r1, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	dc04      	bgt.n	80055ac <__sflush_r+0x1c>
 80055a2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	dc01      	bgt.n	80055ac <__sflush_r+0x1c>
 80055a8:	2000      	movs	r0, #0
 80055aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80055ae:	2e00      	cmp	r6, #0
 80055b0:	d0fa      	beq.n	80055a8 <__sflush_r+0x18>
 80055b2:	2300      	movs	r3, #0
 80055b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80055b8:	682f      	ldr	r7, [r5, #0]
 80055ba:	602b      	str	r3, [r5, #0]
 80055bc:	d032      	beq.n	8005624 <__sflush_r+0x94>
 80055be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80055c0:	89a3      	ldrh	r3, [r4, #12]
 80055c2:	075a      	lsls	r2, r3, #29
 80055c4:	d505      	bpl.n	80055d2 <__sflush_r+0x42>
 80055c6:	6863      	ldr	r3, [r4, #4]
 80055c8:	1ac0      	subs	r0, r0, r3
 80055ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80055cc:	b10b      	cbz	r3, 80055d2 <__sflush_r+0x42>
 80055ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055d0:	1ac0      	subs	r0, r0, r3
 80055d2:	2300      	movs	r3, #0
 80055d4:	4602      	mov	r2, r0
 80055d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80055d8:	4628      	mov	r0, r5
 80055da:	6a21      	ldr	r1, [r4, #32]
 80055dc:	47b0      	blx	r6
 80055de:	1c43      	adds	r3, r0, #1
 80055e0:	89a3      	ldrh	r3, [r4, #12]
 80055e2:	d106      	bne.n	80055f2 <__sflush_r+0x62>
 80055e4:	6829      	ldr	r1, [r5, #0]
 80055e6:	291d      	cmp	r1, #29
 80055e8:	d82c      	bhi.n	8005644 <__sflush_r+0xb4>
 80055ea:	4a29      	ldr	r2, [pc, #164]	; (8005690 <__sflush_r+0x100>)
 80055ec:	40ca      	lsrs	r2, r1
 80055ee:	07d6      	lsls	r6, r2, #31
 80055f0:	d528      	bpl.n	8005644 <__sflush_r+0xb4>
 80055f2:	2200      	movs	r2, #0
 80055f4:	6062      	str	r2, [r4, #4]
 80055f6:	6922      	ldr	r2, [r4, #16]
 80055f8:	04d9      	lsls	r1, r3, #19
 80055fa:	6022      	str	r2, [r4, #0]
 80055fc:	d504      	bpl.n	8005608 <__sflush_r+0x78>
 80055fe:	1c42      	adds	r2, r0, #1
 8005600:	d101      	bne.n	8005606 <__sflush_r+0x76>
 8005602:	682b      	ldr	r3, [r5, #0]
 8005604:	b903      	cbnz	r3, 8005608 <__sflush_r+0x78>
 8005606:	6560      	str	r0, [r4, #84]	; 0x54
 8005608:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800560a:	602f      	str	r7, [r5, #0]
 800560c:	2900      	cmp	r1, #0
 800560e:	d0cb      	beq.n	80055a8 <__sflush_r+0x18>
 8005610:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005614:	4299      	cmp	r1, r3
 8005616:	d002      	beq.n	800561e <__sflush_r+0x8e>
 8005618:	4628      	mov	r0, r5
 800561a:	f000 fa01 	bl	8005a20 <_free_r>
 800561e:	2000      	movs	r0, #0
 8005620:	6360      	str	r0, [r4, #52]	; 0x34
 8005622:	e7c2      	b.n	80055aa <__sflush_r+0x1a>
 8005624:	6a21      	ldr	r1, [r4, #32]
 8005626:	2301      	movs	r3, #1
 8005628:	4628      	mov	r0, r5
 800562a:	47b0      	blx	r6
 800562c:	1c41      	adds	r1, r0, #1
 800562e:	d1c7      	bne.n	80055c0 <__sflush_r+0x30>
 8005630:	682b      	ldr	r3, [r5, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d0c4      	beq.n	80055c0 <__sflush_r+0x30>
 8005636:	2b1d      	cmp	r3, #29
 8005638:	d001      	beq.n	800563e <__sflush_r+0xae>
 800563a:	2b16      	cmp	r3, #22
 800563c:	d101      	bne.n	8005642 <__sflush_r+0xb2>
 800563e:	602f      	str	r7, [r5, #0]
 8005640:	e7b2      	b.n	80055a8 <__sflush_r+0x18>
 8005642:	89a3      	ldrh	r3, [r4, #12]
 8005644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005648:	81a3      	strh	r3, [r4, #12]
 800564a:	e7ae      	b.n	80055aa <__sflush_r+0x1a>
 800564c:	690f      	ldr	r7, [r1, #16]
 800564e:	2f00      	cmp	r7, #0
 8005650:	d0aa      	beq.n	80055a8 <__sflush_r+0x18>
 8005652:	0793      	lsls	r3, r2, #30
 8005654:	bf18      	it	ne
 8005656:	2300      	movne	r3, #0
 8005658:	680e      	ldr	r6, [r1, #0]
 800565a:	bf08      	it	eq
 800565c:	694b      	ldreq	r3, [r1, #20]
 800565e:	1bf6      	subs	r6, r6, r7
 8005660:	600f      	str	r7, [r1, #0]
 8005662:	608b      	str	r3, [r1, #8]
 8005664:	2e00      	cmp	r6, #0
 8005666:	dd9f      	ble.n	80055a8 <__sflush_r+0x18>
 8005668:	4633      	mov	r3, r6
 800566a:	463a      	mov	r2, r7
 800566c:	4628      	mov	r0, r5
 800566e:	6a21      	ldr	r1, [r4, #32]
 8005670:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005674:	47e0      	blx	ip
 8005676:	2800      	cmp	r0, #0
 8005678:	dc06      	bgt.n	8005688 <__sflush_r+0xf8>
 800567a:	89a3      	ldrh	r3, [r4, #12]
 800567c:	f04f 30ff 	mov.w	r0, #4294967295
 8005680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005684:	81a3      	strh	r3, [r4, #12]
 8005686:	e790      	b.n	80055aa <__sflush_r+0x1a>
 8005688:	4407      	add	r7, r0
 800568a:	1a36      	subs	r6, r6, r0
 800568c:	e7ea      	b.n	8005664 <__sflush_r+0xd4>
 800568e:	bf00      	nop
 8005690:	20400001 	.word	0x20400001

08005694 <_fflush_r>:
 8005694:	b538      	push	{r3, r4, r5, lr}
 8005696:	690b      	ldr	r3, [r1, #16]
 8005698:	4605      	mov	r5, r0
 800569a:	460c      	mov	r4, r1
 800569c:	b913      	cbnz	r3, 80056a4 <_fflush_r+0x10>
 800569e:	2500      	movs	r5, #0
 80056a0:	4628      	mov	r0, r5
 80056a2:	bd38      	pop	{r3, r4, r5, pc}
 80056a4:	b118      	cbz	r0, 80056ae <_fflush_r+0x1a>
 80056a6:	6983      	ldr	r3, [r0, #24]
 80056a8:	b90b      	cbnz	r3, 80056ae <_fflush_r+0x1a>
 80056aa:	f000 f887 	bl	80057bc <__sinit>
 80056ae:	4b14      	ldr	r3, [pc, #80]	; (8005700 <_fflush_r+0x6c>)
 80056b0:	429c      	cmp	r4, r3
 80056b2:	d11b      	bne.n	80056ec <_fflush_r+0x58>
 80056b4:	686c      	ldr	r4, [r5, #4]
 80056b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d0ef      	beq.n	800569e <_fflush_r+0xa>
 80056be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80056c0:	07d0      	lsls	r0, r2, #31
 80056c2:	d404      	bmi.n	80056ce <_fflush_r+0x3a>
 80056c4:	0599      	lsls	r1, r3, #22
 80056c6:	d402      	bmi.n	80056ce <_fflush_r+0x3a>
 80056c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056ca:	f000 f93a 	bl	8005942 <__retarget_lock_acquire_recursive>
 80056ce:	4628      	mov	r0, r5
 80056d0:	4621      	mov	r1, r4
 80056d2:	f7ff ff5d 	bl	8005590 <__sflush_r>
 80056d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80056d8:	4605      	mov	r5, r0
 80056da:	07da      	lsls	r2, r3, #31
 80056dc:	d4e0      	bmi.n	80056a0 <_fflush_r+0xc>
 80056de:	89a3      	ldrh	r3, [r4, #12]
 80056e0:	059b      	lsls	r3, r3, #22
 80056e2:	d4dd      	bmi.n	80056a0 <_fflush_r+0xc>
 80056e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056e6:	f000 f92d 	bl	8005944 <__retarget_lock_release_recursive>
 80056ea:	e7d9      	b.n	80056a0 <_fflush_r+0xc>
 80056ec:	4b05      	ldr	r3, [pc, #20]	; (8005704 <_fflush_r+0x70>)
 80056ee:	429c      	cmp	r4, r3
 80056f0:	d101      	bne.n	80056f6 <_fflush_r+0x62>
 80056f2:	68ac      	ldr	r4, [r5, #8]
 80056f4:	e7df      	b.n	80056b6 <_fflush_r+0x22>
 80056f6:	4b04      	ldr	r3, [pc, #16]	; (8005708 <_fflush_r+0x74>)
 80056f8:	429c      	cmp	r4, r3
 80056fa:	bf08      	it	eq
 80056fc:	68ec      	ldreq	r4, [r5, #12]
 80056fe:	e7da      	b.n	80056b6 <_fflush_r+0x22>
 8005700:	08006d24 	.word	0x08006d24
 8005704:	08006d44 	.word	0x08006d44
 8005708:	08006d04 	.word	0x08006d04

0800570c <std>:
 800570c:	2300      	movs	r3, #0
 800570e:	b510      	push	{r4, lr}
 8005710:	4604      	mov	r4, r0
 8005712:	e9c0 3300 	strd	r3, r3, [r0]
 8005716:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800571a:	6083      	str	r3, [r0, #8]
 800571c:	8181      	strh	r1, [r0, #12]
 800571e:	6643      	str	r3, [r0, #100]	; 0x64
 8005720:	81c2      	strh	r2, [r0, #14]
 8005722:	6183      	str	r3, [r0, #24]
 8005724:	4619      	mov	r1, r3
 8005726:	2208      	movs	r2, #8
 8005728:	305c      	adds	r0, #92	; 0x5c
 800572a:	f7ff fc41 	bl	8004fb0 <memset>
 800572e:	4b05      	ldr	r3, [pc, #20]	; (8005744 <std+0x38>)
 8005730:	6224      	str	r4, [r4, #32]
 8005732:	6263      	str	r3, [r4, #36]	; 0x24
 8005734:	4b04      	ldr	r3, [pc, #16]	; (8005748 <std+0x3c>)
 8005736:	62a3      	str	r3, [r4, #40]	; 0x28
 8005738:	4b04      	ldr	r3, [pc, #16]	; (800574c <std+0x40>)
 800573a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800573c:	4b04      	ldr	r3, [pc, #16]	; (8005750 <std+0x44>)
 800573e:	6323      	str	r3, [r4, #48]	; 0x30
 8005740:	bd10      	pop	{r4, pc}
 8005742:	bf00      	nop
 8005744:	080061d5 	.word	0x080061d5
 8005748:	080061f7 	.word	0x080061f7
 800574c:	0800622f 	.word	0x0800622f
 8005750:	08006253 	.word	0x08006253

08005754 <_cleanup_r>:
 8005754:	4901      	ldr	r1, [pc, #4]	; (800575c <_cleanup_r+0x8>)
 8005756:	f000 b8c1 	b.w	80058dc <_fwalk_reent>
 800575a:	bf00      	nop
 800575c:	08005695 	.word	0x08005695

08005760 <__sfmoreglue>:
 8005760:	2268      	movs	r2, #104	; 0x68
 8005762:	b570      	push	{r4, r5, r6, lr}
 8005764:	1e4d      	subs	r5, r1, #1
 8005766:	4355      	muls	r5, r2
 8005768:	460e      	mov	r6, r1
 800576a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800576e:	f000 f9bf 	bl	8005af0 <_malloc_r>
 8005772:	4604      	mov	r4, r0
 8005774:	b140      	cbz	r0, 8005788 <__sfmoreglue+0x28>
 8005776:	2100      	movs	r1, #0
 8005778:	e9c0 1600 	strd	r1, r6, [r0]
 800577c:	300c      	adds	r0, #12
 800577e:	60a0      	str	r0, [r4, #8]
 8005780:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005784:	f7ff fc14 	bl	8004fb0 <memset>
 8005788:	4620      	mov	r0, r4
 800578a:	bd70      	pop	{r4, r5, r6, pc}

0800578c <__sfp_lock_acquire>:
 800578c:	4801      	ldr	r0, [pc, #4]	; (8005794 <__sfp_lock_acquire+0x8>)
 800578e:	f000 b8d8 	b.w	8005942 <__retarget_lock_acquire_recursive>
 8005792:	bf00      	nop
 8005794:	20003c91 	.word	0x20003c91

08005798 <__sfp_lock_release>:
 8005798:	4801      	ldr	r0, [pc, #4]	; (80057a0 <__sfp_lock_release+0x8>)
 800579a:	f000 b8d3 	b.w	8005944 <__retarget_lock_release_recursive>
 800579e:	bf00      	nop
 80057a0:	20003c91 	.word	0x20003c91

080057a4 <__sinit_lock_acquire>:
 80057a4:	4801      	ldr	r0, [pc, #4]	; (80057ac <__sinit_lock_acquire+0x8>)
 80057a6:	f000 b8cc 	b.w	8005942 <__retarget_lock_acquire_recursive>
 80057aa:	bf00      	nop
 80057ac:	20003c92 	.word	0x20003c92

080057b0 <__sinit_lock_release>:
 80057b0:	4801      	ldr	r0, [pc, #4]	; (80057b8 <__sinit_lock_release+0x8>)
 80057b2:	f000 b8c7 	b.w	8005944 <__retarget_lock_release_recursive>
 80057b6:	bf00      	nop
 80057b8:	20003c92 	.word	0x20003c92

080057bc <__sinit>:
 80057bc:	b510      	push	{r4, lr}
 80057be:	4604      	mov	r4, r0
 80057c0:	f7ff fff0 	bl	80057a4 <__sinit_lock_acquire>
 80057c4:	69a3      	ldr	r3, [r4, #24]
 80057c6:	b11b      	cbz	r3, 80057d0 <__sinit+0x14>
 80057c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057cc:	f7ff bff0 	b.w	80057b0 <__sinit_lock_release>
 80057d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80057d4:	6523      	str	r3, [r4, #80]	; 0x50
 80057d6:	4b13      	ldr	r3, [pc, #76]	; (8005824 <__sinit+0x68>)
 80057d8:	4a13      	ldr	r2, [pc, #76]	; (8005828 <__sinit+0x6c>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80057de:	42a3      	cmp	r3, r4
 80057e0:	bf08      	it	eq
 80057e2:	2301      	moveq	r3, #1
 80057e4:	4620      	mov	r0, r4
 80057e6:	bf08      	it	eq
 80057e8:	61a3      	streq	r3, [r4, #24]
 80057ea:	f000 f81f 	bl	800582c <__sfp>
 80057ee:	6060      	str	r0, [r4, #4]
 80057f0:	4620      	mov	r0, r4
 80057f2:	f000 f81b 	bl	800582c <__sfp>
 80057f6:	60a0      	str	r0, [r4, #8]
 80057f8:	4620      	mov	r0, r4
 80057fa:	f000 f817 	bl	800582c <__sfp>
 80057fe:	2200      	movs	r2, #0
 8005800:	2104      	movs	r1, #4
 8005802:	60e0      	str	r0, [r4, #12]
 8005804:	6860      	ldr	r0, [r4, #4]
 8005806:	f7ff ff81 	bl	800570c <std>
 800580a:	2201      	movs	r2, #1
 800580c:	2109      	movs	r1, #9
 800580e:	68a0      	ldr	r0, [r4, #8]
 8005810:	f7ff ff7c 	bl	800570c <std>
 8005814:	2202      	movs	r2, #2
 8005816:	2112      	movs	r1, #18
 8005818:	68e0      	ldr	r0, [r4, #12]
 800581a:	f7ff ff77 	bl	800570c <std>
 800581e:	2301      	movs	r3, #1
 8005820:	61a3      	str	r3, [r4, #24]
 8005822:	e7d1      	b.n	80057c8 <__sinit+0xc>
 8005824:	08006b2c 	.word	0x08006b2c
 8005828:	08005755 	.word	0x08005755

0800582c <__sfp>:
 800582c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800582e:	4607      	mov	r7, r0
 8005830:	f7ff ffac 	bl	800578c <__sfp_lock_acquire>
 8005834:	4b1e      	ldr	r3, [pc, #120]	; (80058b0 <__sfp+0x84>)
 8005836:	681e      	ldr	r6, [r3, #0]
 8005838:	69b3      	ldr	r3, [r6, #24]
 800583a:	b913      	cbnz	r3, 8005842 <__sfp+0x16>
 800583c:	4630      	mov	r0, r6
 800583e:	f7ff ffbd 	bl	80057bc <__sinit>
 8005842:	3648      	adds	r6, #72	; 0x48
 8005844:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005848:	3b01      	subs	r3, #1
 800584a:	d503      	bpl.n	8005854 <__sfp+0x28>
 800584c:	6833      	ldr	r3, [r6, #0]
 800584e:	b30b      	cbz	r3, 8005894 <__sfp+0x68>
 8005850:	6836      	ldr	r6, [r6, #0]
 8005852:	e7f7      	b.n	8005844 <__sfp+0x18>
 8005854:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005858:	b9d5      	cbnz	r5, 8005890 <__sfp+0x64>
 800585a:	4b16      	ldr	r3, [pc, #88]	; (80058b4 <__sfp+0x88>)
 800585c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005860:	60e3      	str	r3, [r4, #12]
 8005862:	6665      	str	r5, [r4, #100]	; 0x64
 8005864:	f000 f86c 	bl	8005940 <__retarget_lock_init_recursive>
 8005868:	f7ff ff96 	bl	8005798 <__sfp_lock_release>
 800586c:	2208      	movs	r2, #8
 800586e:	4629      	mov	r1, r5
 8005870:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005874:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005878:	6025      	str	r5, [r4, #0]
 800587a:	61a5      	str	r5, [r4, #24]
 800587c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005880:	f7ff fb96 	bl	8004fb0 <memset>
 8005884:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005888:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800588c:	4620      	mov	r0, r4
 800588e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005890:	3468      	adds	r4, #104	; 0x68
 8005892:	e7d9      	b.n	8005848 <__sfp+0x1c>
 8005894:	2104      	movs	r1, #4
 8005896:	4638      	mov	r0, r7
 8005898:	f7ff ff62 	bl	8005760 <__sfmoreglue>
 800589c:	4604      	mov	r4, r0
 800589e:	6030      	str	r0, [r6, #0]
 80058a0:	2800      	cmp	r0, #0
 80058a2:	d1d5      	bne.n	8005850 <__sfp+0x24>
 80058a4:	f7ff ff78 	bl	8005798 <__sfp_lock_release>
 80058a8:	230c      	movs	r3, #12
 80058aa:	603b      	str	r3, [r7, #0]
 80058ac:	e7ee      	b.n	800588c <__sfp+0x60>
 80058ae:	bf00      	nop
 80058b0:	08006b2c 	.word	0x08006b2c
 80058b4:	ffff0001 	.word	0xffff0001

080058b8 <fiprintf>:
 80058b8:	b40e      	push	{r1, r2, r3}
 80058ba:	b503      	push	{r0, r1, lr}
 80058bc:	4601      	mov	r1, r0
 80058be:	ab03      	add	r3, sp, #12
 80058c0:	4805      	ldr	r0, [pc, #20]	; (80058d8 <fiprintf+0x20>)
 80058c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80058c6:	6800      	ldr	r0, [r0, #0]
 80058c8:	9301      	str	r3, [sp, #4]
 80058ca:	f000 f9ad 	bl	8005c28 <_vfiprintf_r>
 80058ce:	b002      	add	sp, #8
 80058d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80058d4:	b003      	add	sp, #12
 80058d6:	4770      	bx	lr
 80058d8:	2000053c 	.word	0x2000053c

080058dc <_fwalk_reent>:
 80058dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058e0:	4606      	mov	r6, r0
 80058e2:	4688      	mov	r8, r1
 80058e4:	2700      	movs	r7, #0
 80058e6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80058ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80058ee:	f1b9 0901 	subs.w	r9, r9, #1
 80058f2:	d505      	bpl.n	8005900 <_fwalk_reent+0x24>
 80058f4:	6824      	ldr	r4, [r4, #0]
 80058f6:	2c00      	cmp	r4, #0
 80058f8:	d1f7      	bne.n	80058ea <_fwalk_reent+0xe>
 80058fa:	4638      	mov	r0, r7
 80058fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005900:	89ab      	ldrh	r3, [r5, #12]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d907      	bls.n	8005916 <_fwalk_reent+0x3a>
 8005906:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800590a:	3301      	adds	r3, #1
 800590c:	d003      	beq.n	8005916 <_fwalk_reent+0x3a>
 800590e:	4629      	mov	r1, r5
 8005910:	4630      	mov	r0, r6
 8005912:	47c0      	blx	r8
 8005914:	4307      	orrs	r7, r0
 8005916:	3568      	adds	r5, #104	; 0x68
 8005918:	e7e9      	b.n	80058ee <_fwalk_reent+0x12>
	...

0800591c <_gettimeofday_r>:
 800591c:	b538      	push	{r3, r4, r5, lr}
 800591e:	2300      	movs	r3, #0
 8005920:	4d06      	ldr	r5, [pc, #24]	; (800593c <_gettimeofday_r+0x20>)
 8005922:	4604      	mov	r4, r0
 8005924:	4608      	mov	r0, r1
 8005926:	4611      	mov	r1, r2
 8005928:	602b      	str	r3, [r5, #0]
 800592a:	f000 fd65 	bl	80063f8 <_gettimeofday>
 800592e:	1c43      	adds	r3, r0, #1
 8005930:	d102      	bne.n	8005938 <_gettimeofday_r+0x1c>
 8005932:	682b      	ldr	r3, [r5, #0]
 8005934:	b103      	cbz	r3, 8005938 <_gettimeofday_r+0x1c>
 8005936:	6023      	str	r3, [r4, #0]
 8005938:	bd38      	pop	{r3, r4, r5, pc}
 800593a:	bf00      	nop
 800593c:	20003c9c 	.word	0x20003c9c

08005940 <__retarget_lock_init_recursive>:
 8005940:	4770      	bx	lr

08005942 <__retarget_lock_acquire_recursive>:
 8005942:	4770      	bx	lr

08005944 <__retarget_lock_release_recursive>:
 8005944:	4770      	bx	lr

08005946 <__swhatbuf_r>:
 8005946:	b570      	push	{r4, r5, r6, lr}
 8005948:	460e      	mov	r6, r1
 800594a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800594e:	4614      	mov	r4, r2
 8005950:	2900      	cmp	r1, #0
 8005952:	461d      	mov	r5, r3
 8005954:	b096      	sub	sp, #88	; 0x58
 8005956:	da08      	bge.n	800596a <__swhatbuf_r+0x24>
 8005958:	2200      	movs	r2, #0
 800595a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800595e:	602a      	str	r2, [r5, #0]
 8005960:	061a      	lsls	r2, r3, #24
 8005962:	d410      	bmi.n	8005986 <__swhatbuf_r+0x40>
 8005964:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005968:	e00e      	b.n	8005988 <__swhatbuf_r+0x42>
 800596a:	466a      	mov	r2, sp
 800596c:	f000 fca0 	bl	80062b0 <_fstat_r>
 8005970:	2800      	cmp	r0, #0
 8005972:	dbf1      	blt.n	8005958 <__swhatbuf_r+0x12>
 8005974:	9a01      	ldr	r2, [sp, #4]
 8005976:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800597a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800597e:	425a      	negs	r2, r3
 8005980:	415a      	adcs	r2, r3
 8005982:	602a      	str	r2, [r5, #0]
 8005984:	e7ee      	b.n	8005964 <__swhatbuf_r+0x1e>
 8005986:	2340      	movs	r3, #64	; 0x40
 8005988:	2000      	movs	r0, #0
 800598a:	6023      	str	r3, [r4, #0]
 800598c:	b016      	add	sp, #88	; 0x58
 800598e:	bd70      	pop	{r4, r5, r6, pc}

08005990 <__smakebuf_r>:
 8005990:	898b      	ldrh	r3, [r1, #12]
 8005992:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005994:	079d      	lsls	r5, r3, #30
 8005996:	4606      	mov	r6, r0
 8005998:	460c      	mov	r4, r1
 800599a:	d507      	bpl.n	80059ac <__smakebuf_r+0x1c>
 800599c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80059a0:	6023      	str	r3, [r4, #0]
 80059a2:	6123      	str	r3, [r4, #16]
 80059a4:	2301      	movs	r3, #1
 80059a6:	6163      	str	r3, [r4, #20]
 80059a8:	b002      	add	sp, #8
 80059aa:	bd70      	pop	{r4, r5, r6, pc}
 80059ac:	466a      	mov	r2, sp
 80059ae:	ab01      	add	r3, sp, #4
 80059b0:	f7ff ffc9 	bl	8005946 <__swhatbuf_r>
 80059b4:	9900      	ldr	r1, [sp, #0]
 80059b6:	4605      	mov	r5, r0
 80059b8:	4630      	mov	r0, r6
 80059ba:	f000 f899 	bl	8005af0 <_malloc_r>
 80059be:	b948      	cbnz	r0, 80059d4 <__smakebuf_r+0x44>
 80059c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059c4:	059a      	lsls	r2, r3, #22
 80059c6:	d4ef      	bmi.n	80059a8 <__smakebuf_r+0x18>
 80059c8:	f023 0303 	bic.w	r3, r3, #3
 80059cc:	f043 0302 	orr.w	r3, r3, #2
 80059d0:	81a3      	strh	r3, [r4, #12]
 80059d2:	e7e3      	b.n	800599c <__smakebuf_r+0xc>
 80059d4:	4b0d      	ldr	r3, [pc, #52]	; (8005a0c <__smakebuf_r+0x7c>)
 80059d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80059d8:	89a3      	ldrh	r3, [r4, #12]
 80059da:	6020      	str	r0, [r4, #0]
 80059dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059e0:	81a3      	strh	r3, [r4, #12]
 80059e2:	9b00      	ldr	r3, [sp, #0]
 80059e4:	6120      	str	r0, [r4, #16]
 80059e6:	6163      	str	r3, [r4, #20]
 80059e8:	9b01      	ldr	r3, [sp, #4]
 80059ea:	b15b      	cbz	r3, 8005a04 <__smakebuf_r+0x74>
 80059ec:	4630      	mov	r0, r6
 80059ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059f2:	f000 fc6f 	bl	80062d4 <_isatty_r>
 80059f6:	b128      	cbz	r0, 8005a04 <__smakebuf_r+0x74>
 80059f8:	89a3      	ldrh	r3, [r4, #12]
 80059fa:	f023 0303 	bic.w	r3, r3, #3
 80059fe:	f043 0301 	orr.w	r3, r3, #1
 8005a02:	81a3      	strh	r3, [r4, #12]
 8005a04:	89a0      	ldrh	r0, [r4, #12]
 8005a06:	4305      	orrs	r5, r0
 8005a08:	81a5      	strh	r5, [r4, #12]
 8005a0a:	e7cd      	b.n	80059a8 <__smakebuf_r+0x18>
 8005a0c:	08005755 	.word	0x08005755

08005a10 <malloc>:
 8005a10:	4b02      	ldr	r3, [pc, #8]	; (8005a1c <malloc+0xc>)
 8005a12:	4601      	mov	r1, r0
 8005a14:	6818      	ldr	r0, [r3, #0]
 8005a16:	f000 b86b 	b.w	8005af0 <_malloc_r>
 8005a1a:	bf00      	nop
 8005a1c:	2000053c 	.word	0x2000053c

08005a20 <_free_r>:
 8005a20:	b538      	push	{r3, r4, r5, lr}
 8005a22:	4605      	mov	r5, r0
 8005a24:	2900      	cmp	r1, #0
 8005a26:	d040      	beq.n	8005aaa <_free_r+0x8a>
 8005a28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a2c:	1f0c      	subs	r4, r1, #4
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	bfb8      	it	lt
 8005a32:	18e4      	addlt	r4, r4, r3
 8005a34:	f000 fc7e 	bl	8006334 <__malloc_lock>
 8005a38:	4a1c      	ldr	r2, [pc, #112]	; (8005aac <_free_r+0x8c>)
 8005a3a:	6813      	ldr	r3, [r2, #0]
 8005a3c:	b933      	cbnz	r3, 8005a4c <_free_r+0x2c>
 8005a3e:	6063      	str	r3, [r4, #4]
 8005a40:	6014      	str	r4, [r2, #0]
 8005a42:	4628      	mov	r0, r5
 8005a44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a48:	f000 bc7a 	b.w	8006340 <__malloc_unlock>
 8005a4c:	42a3      	cmp	r3, r4
 8005a4e:	d908      	bls.n	8005a62 <_free_r+0x42>
 8005a50:	6820      	ldr	r0, [r4, #0]
 8005a52:	1821      	adds	r1, r4, r0
 8005a54:	428b      	cmp	r3, r1
 8005a56:	bf01      	itttt	eq
 8005a58:	6819      	ldreq	r1, [r3, #0]
 8005a5a:	685b      	ldreq	r3, [r3, #4]
 8005a5c:	1809      	addeq	r1, r1, r0
 8005a5e:	6021      	streq	r1, [r4, #0]
 8005a60:	e7ed      	b.n	8005a3e <_free_r+0x1e>
 8005a62:	461a      	mov	r2, r3
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	b10b      	cbz	r3, 8005a6c <_free_r+0x4c>
 8005a68:	42a3      	cmp	r3, r4
 8005a6a:	d9fa      	bls.n	8005a62 <_free_r+0x42>
 8005a6c:	6811      	ldr	r1, [r2, #0]
 8005a6e:	1850      	adds	r0, r2, r1
 8005a70:	42a0      	cmp	r0, r4
 8005a72:	d10b      	bne.n	8005a8c <_free_r+0x6c>
 8005a74:	6820      	ldr	r0, [r4, #0]
 8005a76:	4401      	add	r1, r0
 8005a78:	1850      	adds	r0, r2, r1
 8005a7a:	4283      	cmp	r3, r0
 8005a7c:	6011      	str	r1, [r2, #0]
 8005a7e:	d1e0      	bne.n	8005a42 <_free_r+0x22>
 8005a80:	6818      	ldr	r0, [r3, #0]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	4401      	add	r1, r0
 8005a86:	6011      	str	r1, [r2, #0]
 8005a88:	6053      	str	r3, [r2, #4]
 8005a8a:	e7da      	b.n	8005a42 <_free_r+0x22>
 8005a8c:	d902      	bls.n	8005a94 <_free_r+0x74>
 8005a8e:	230c      	movs	r3, #12
 8005a90:	602b      	str	r3, [r5, #0]
 8005a92:	e7d6      	b.n	8005a42 <_free_r+0x22>
 8005a94:	6820      	ldr	r0, [r4, #0]
 8005a96:	1821      	adds	r1, r4, r0
 8005a98:	428b      	cmp	r3, r1
 8005a9a:	bf01      	itttt	eq
 8005a9c:	6819      	ldreq	r1, [r3, #0]
 8005a9e:	685b      	ldreq	r3, [r3, #4]
 8005aa0:	1809      	addeq	r1, r1, r0
 8005aa2:	6021      	streq	r1, [r4, #0]
 8005aa4:	6063      	str	r3, [r4, #4]
 8005aa6:	6054      	str	r4, [r2, #4]
 8005aa8:	e7cb      	b.n	8005a42 <_free_r+0x22>
 8005aaa:	bd38      	pop	{r3, r4, r5, pc}
 8005aac:	20003c94 	.word	0x20003c94

08005ab0 <sbrk_aligned>:
 8005ab0:	b570      	push	{r4, r5, r6, lr}
 8005ab2:	4e0e      	ldr	r6, [pc, #56]	; (8005aec <sbrk_aligned+0x3c>)
 8005ab4:	460c      	mov	r4, r1
 8005ab6:	6831      	ldr	r1, [r6, #0]
 8005ab8:	4605      	mov	r5, r0
 8005aba:	b911      	cbnz	r1, 8005ac2 <sbrk_aligned+0x12>
 8005abc:	f000 fb7a 	bl	80061b4 <_sbrk_r>
 8005ac0:	6030      	str	r0, [r6, #0]
 8005ac2:	4621      	mov	r1, r4
 8005ac4:	4628      	mov	r0, r5
 8005ac6:	f000 fb75 	bl	80061b4 <_sbrk_r>
 8005aca:	1c43      	adds	r3, r0, #1
 8005acc:	d00a      	beq.n	8005ae4 <sbrk_aligned+0x34>
 8005ace:	1cc4      	adds	r4, r0, #3
 8005ad0:	f024 0403 	bic.w	r4, r4, #3
 8005ad4:	42a0      	cmp	r0, r4
 8005ad6:	d007      	beq.n	8005ae8 <sbrk_aligned+0x38>
 8005ad8:	1a21      	subs	r1, r4, r0
 8005ada:	4628      	mov	r0, r5
 8005adc:	f000 fb6a 	bl	80061b4 <_sbrk_r>
 8005ae0:	3001      	adds	r0, #1
 8005ae2:	d101      	bne.n	8005ae8 <sbrk_aligned+0x38>
 8005ae4:	f04f 34ff 	mov.w	r4, #4294967295
 8005ae8:	4620      	mov	r0, r4
 8005aea:	bd70      	pop	{r4, r5, r6, pc}
 8005aec:	20003c98 	.word	0x20003c98

08005af0 <_malloc_r>:
 8005af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005af4:	1ccd      	adds	r5, r1, #3
 8005af6:	f025 0503 	bic.w	r5, r5, #3
 8005afa:	3508      	adds	r5, #8
 8005afc:	2d0c      	cmp	r5, #12
 8005afe:	bf38      	it	cc
 8005b00:	250c      	movcc	r5, #12
 8005b02:	2d00      	cmp	r5, #0
 8005b04:	4607      	mov	r7, r0
 8005b06:	db01      	blt.n	8005b0c <_malloc_r+0x1c>
 8005b08:	42a9      	cmp	r1, r5
 8005b0a:	d905      	bls.n	8005b18 <_malloc_r+0x28>
 8005b0c:	230c      	movs	r3, #12
 8005b0e:	2600      	movs	r6, #0
 8005b10:	603b      	str	r3, [r7, #0]
 8005b12:	4630      	mov	r0, r6
 8005b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b18:	4e2e      	ldr	r6, [pc, #184]	; (8005bd4 <_malloc_r+0xe4>)
 8005b1a:	f000 fc0b 	bl	8006334 <__malloc_lock>
 8005b1e:	6833      	ldr	r3, [r6, #0]
 8005b20:	461c      	mov	r4, r3
 8005b22:	bb34      	cbnz	r4, 8005b72 <_malloc_r+0x82>
 8005b24:	4629      	mov	r1, r5
 8005b26:	4638      	mov	r0, r7
 8005b28:	f7ff ffc2 	bl	8005ab0 <sbrk_aligned>
 8005b2c:	1c43      	adds	r3, r0, #1
 8005b2e:	4604      	mov	r4, r0
 8005b30:	d14d      	bne.n	8005bce <_malloc_r+0xde>
 8005b32:	6834      	ldr	r4, [r6, #0]
 8005b34:	4626      	mov	r6, r4
 8005b36:	2e00      	cmp	r6, #0
 8005b38:	d140      	bne.n	8005bbc <_malloc_r+0xcc>
 8005b3a:	6823      	ldr	r3, [r4, #0]
 8005b3c:	4631      	mov	r1, r6
 8005b3e:	4638      	mov	r0, r7
 8005b40:	eb04 0803 	add.w	r8, r4, r3
 8005b44:	f000 fb36 	bl	80061b4 <_sbrk_r>
 8005b48:	4580      	cmp	r8, r0
 8005b4a:	d13a      	bne.n	8005bc2 <_malloc_r+0xd2>
 8005b4c:	6821      	ldr	r1, [r4, #0]
 8005b4e:	3503      	adds	r5, #3
 8005b50:	1a6d      	subs	r5, r5, r1
 8005b52:	f025 0503 	bic.w	r5, r5, #3
 8005b56:	3508      	adds	r5, #8
 8005b58:	2d0c      	cmp	r5, #12
 8005b5a:	bf38      	it	cc
 8005b5c:	250c      	movcc	r5, #12
 8005b5e:	4638      	mov	r0, r7
 8005b60:	4629      	mov	r1, r5
 8005b62:	f7ff ffa5 	bl	8005ab0 <sbrk_aligned>
 8005b66:	3001      	adds	r0, #1
 8005b68:	d02b      	beq.n	8005bc2 <_malloc_r+0xd2>
 8005b6a:	6823      	ldr	r3, [r4, #0]
 8005b6c:	442b      	add	r3, r5
 8005b6e:	6023      	str	r3, [r4, #0]
 8005b70:	e00e      	b.n	8005b90 <_malloc_r+0xa0>
 8005b72:	6822      	ldr	r2, [r4, #0]
 8005b74:	1b52      	subs	r2, r2, r5
 8005b76:	d41e      	bmi.n	8005bb6 <_malloc_r+0xc6>
 8005b78:	2a0b      	cmp	r2, #11
 8005b7a:	d916      	bls.n	8005baa <_malloc_r+0xba>
 8005b7c:	1961      	adds	r1, r4, r5
 8005b7e:	42a3      	cmp	r3, r4
 8005b80:	6025      	str	r5, [r4, #0]
 8005b82:	bf18      	it	ne
 8005b84:	6059      	strne	r1, [r3, #4]
 8005b86:	6863      	ldr	r3, [r4, #4]
 8005b88:	bf08      	it	eq
 8005b8a:	6031      	streq	r1, [r6, #0]
 8005b8c:	5162      	str	r2, [r4, r5]
 8005b8e:	604b      	str	r3, [r1, #4]
 8005b90:	4638      	mov	r0, r7
 8005b92:	f104 060b 	add.w	r6, r4, #11
 8005b96:	f000 fbd3 	bl	8006340 <__malloc_unlock>
 8005b9a:	f026 0607 	bic.w	r6, r6, #7
 8005b9e:	1d23      	adds	r3, r4, #4
 8005ba0:	1af2      	subs	r2, r6, r3
 8005ba2:	d0b6      	beq.n	8005b12 <_malloc_r+0x22>
 8005ba4:	1b9b      	subs	r3, r3, r6
 8005ba6:	50a3      	str	r3, [r4, r2]
 8005ba8:	e7b3      	b.n	8005b12 <_malloc_r+0x22>
 8005baa:	6862      	ldr	r2, [r4, #4]
 8005bac:	42a3      	cmp	r3, r4
 8005bae:	bf0c      	ite	eq
 8005bb0:	6032      	streq	r2, [r6, #0]
 8005bb2:	605a      	strne	r2, [r3, #4]
 8005bb4:	e7ec      	b.n	8005b90 <_malloc_r+0xa0>
 8005bb6:	4623      	mov	r3, r4
 8005bb8:	6864      	ldr	r4, [r4, #4]
 8005bba:	e7b2      	b.n	8005b22 <_malloc_r+0x32>
 8005bbc:	4634      	mov	r4, r6
 8005bbe:	6876      	ldr	r6, [r6, #4]
 8005bc0:	e7b9      	b.n	8005b36 <_malloc_r+0x46>
 8005bc2:	230c      	movs	r3, #12
 8005bc4:	4638      	mov	r0, r7
 8005bc6:	603b      	str	r3, [r7, #0]
 8005bc8:	f000 fbba 	bl	8006340 <__malloc_unlock>
 8005bcc:	e7a1      	b.n	8005b12 <_malloc_r+0x22>
 8005bce:	6025      	str	r5, [r4, #0]
 8005bd0:	e7de      	b.n	8005b90 <_malloc_r+0xa0>
 8005bd2:	bf00      	nop
 8005bd4:	20003c94 	.word	0x20003c94

08005bd8 <__sfputc_r>:
 8005bd8:	6893      	ldr	r3, [r2, #8]
 8005bda:	b410      	push	{r4}
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	6093      	str	r3, [r2, #8]
 8005be2:	da07      	bge.n	8005bf4 <__sfputc_r+0x1c>
 8005be4:	6994      	ldr	r4, [r2, #24]
 8005be6:	42a3      	cmp	r3, r4
 8005be8:	db01      	blt.n	8005bee <__sfputc_r+0x16>
 8005bea:	290a      	cmp	r1, #10
 8005bec:	d102      	bne.n	8005bf4 <__sfputc_r+0x1c>
 8005bee:	bc10      	pop	{r4}
 8005bf0:	f7ff bbf0 	b.w	80053d4 <__swbuf_r>
 8005bf4:	6813      	ldr	r3, [r2, #0]
 8005bf6:	1c58      	adds	r0, r3, #1
 8005bf8:	6010      	str	r0, [r2, #0]
 8005bfa:	7019      	strb	r1, [r3, #0]
 8005bfc:	4608      	mov	r0, r1
 8005bfe:	bc10      	pop	{r4}
 8005c00:	4770      	bx	lr

08005c02 <__sfputs_r>:
 8005c02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c04:	4606      	mov	r6, r0
 8005c06:	460f      	mov	r7, r1
 8005c08:	4614      	mov	r4, r2
 8005c0a:	18d5      	adds	r5, r2, r3
 8005c0c:	42ac      	cmp	r4, r5
 8005c0e:	d101      	bne.n	8005c14 <__sfputs_r+0x12>
 8005c10:	2000      	movs	r0, #0
 8005c12:	e007      	b.n	8005c24 <__sfputs_r+0x22>
 8005c14:	463a      	mov	r2, r7
 8005c16:	4630      	mov	r0, r6
 8005c18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c1c:	f7ff ffdc 	bl	8005bd8 <__sfputc_r>
 8005c20:	1c43      	adds	r3, r0, #1
 8005c22:	d1f3      	bne.n	8005c0c <__sfputs_r+0xa>
 8005c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005c28 <_vfiprintf_r>:
 8005c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c2c:	460d      	mov	r5, r1
 8005c2e:	4614      	mov	r4, r2
 8005c30:	4698      	mov	r8, r3
 8005c32:	4606      	mov	r6, r0
 8005c34:	b09d      	sub	sp, #116	; 0x74
 8005c36:	b118      	cbz	r0, 8005c40 <_vfiprintf_r+0x18>
 8005c38:	6983      	ldr	r3, [r0, #24]
 8005c3a:	b90b      	cbnz	r3, 8005c40 <_vfiprintf_r+0x18>
 8005c3c:	f7ff fdbe 	bl	80057bc <__sinit>
 8005c40:	4b89      	ldr	r3, [pc, #548]	; (8005e68 <_vfiprintf_r+0x240>)
 8005c42:	429d      	cmp	r5, r3
 8005c44:	d11b      	bne.n	8005c7e <_vfiprintf_r+0x56>
 8005c46:	6875      	ldr	r5, [r6, #4]
 8005c48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c4a:	07d9      	lsls	r1, r3, #31
 8005c4c:	d405      	bmi.n	8005c5a <_vfiprintf_r+0x32>
 8005c4e:	89ab      	ldrh	r3, [r5, #12]
 8005c50:	059a      	lsls	r2, r3, #22
 8005c52:	d402      	bmi.n	8005c5a <_vfiprintf_r+0x32>
 8005c54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c56:	f7ff fe74 	bl	8005942 <__retarget_lock_acquire_recursive>
 8005c5a:	89ab      	ldrh	r3, [r5, #12]
 8005c5c:	071b      	lsls	r3, r3, #28
 8005c5e:	d501      	bpl.n	8005c64 <_vfiprintf_r+0x3c>
 8005c60:	692b      	ldr	r3, [r5, #16]
 8005c62:	b9eb      	cbnz	r3, 8005ca0 <_vfiprintf_r+0x78>
 8005c64:	4629      	mov	r1, r5
 8005c66:	4630      	mov	r0, r6
 8005c68:	f7ff fc06 	bl	8005478 <__swsetup_r>
 8005c6c:	b1c0      	cbz	r0, 8005ca0 <_vfiprintf_r+0x78>
 8005c6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c70:	07dc      	lsls	r4, r3, #31
 8005c72:	d50e      	bpl.n	8005c92 <_vfiprintf_r+0x6a>
 8005c74:	f04f 30ff 	mov.w	r0, #4294967295
 8005c78:	b01d      	add	sp, #116	; 0x74
 8005c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c7e:	4b7b      	ldr	r3, [pc, #492]	; (8005e6c <_vfiprintf_r+0x244>)
 8005c80:	429d      	cmp	r5, r3
 8005c82:	d101      	bne.n	8005c88 <_vfiprintf_r+0x60>
 8005c84:	68b5      	ldr	r5, [r6, #8]
 8005c86:	e7df      	b.n	8005c48 <_vfiprintf_r+0x20>
 8005c88:	4b79      	ldr	r3, [pc, #484]	; (8005e70 <_vfiprintf_r+0x248>)
 8005c8a:	429d      	cmp	r5, r3
 8005c8c:	bf08      	it	eq
 8005c8e:	68f5      	ldreq	r5, [r6, #12]
 8005c90:	e7da      	b.n	8005c48 <_vfiprintf_r+0x20>
 8005c92:	89ab      	ldrh	r3, [r5, #12]
 8005c94:	0598      	lsls	r0, r3, #22
 8005c96:	d4ed      	bmi.n	8005c74 <_vfiprintf_r+0x4c>
 8005c98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c9a:	f7ff fe53 	bl	8005944 <__retarget_lock_release_recursive>
 8005c9e:	e7e9      	b.n	8005c74 <_vfiprintf_r+0x4c>
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	9309      	str	r3, [sp, #36]	; 0x24
 8005ca4:	2320      	movs	r3, #32
 8005ca6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005caa:	2330      	movs	r3, #48	; 0x30
 8005cac:	f04f 0901 	mov.w	r9, #1
 8005cb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005cb4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005e74 <_vfiprintf_r+0x24c>
 8005cb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005cbc:	4623      	mov	r3, r4
 8005cbe:	469a      	mov	sl, r3
 8005cc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cc4:	b10a      	cbz	r2, 8005cca <_vfiprintf_r+0xa2>
 8005cc6:	2a25      	cmp	r2, #37	; 0x25
 8005cc8:	d1f9      	bne.n	8005cbe <_vfiprintf_r+0x96>
 8005cca:	ebba 0b04 	subs.w	fp, sl, r4
 8005cce:	d00b      	beq.n	8005ce8 <_vfiprintf_r+0xc0>
 8005cd0:	465b      	mov	r3, fp
 8005cd2:	4622      	mov	r2, r4
 8005cd4:	4629      	mov	r1, r5
 8005cd6:	4630      	mov	r0, r6
 8005cd8:	f7ff ff93 	bl	8005c02 <__sfputs_r>
 8005cdc:	3001      	adds	r0, #1
 8005cde:	f000 80aa 	beq.w	8005e36 <_vfiprintf_r+0x20e>
 8005ce2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ce4:	445a      	add	r2, fp
 8005ce6:	9209      	str	r2, [sp, #36]	; 0x24
 8005ce8:	f89a 3000 	ldrb.w	r3, [sl]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f000 80a2 	beq.w	8005e36 <_vfiprintf_r+0x20e>
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8005cf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cfc:	f10a 0a01 	add.w	sl, sl, #1
 8005d00:	9304      	str	r3, [sp, #16]
 8005d02:	9307      	str	r3, [sp, #28]
 8005d04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d08:	931a      	str	r3, [sp, #104]	; 0x68
 8005d0a:	4654      	mov	r4, sl
 8005d0c:	2205      	movs	r2, #5
 8005d0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d12:	4858      	ldr	r0, [pc, #352]	; (8005e74 <_vfiprintf_r+0x24c>)
 8005d14:	f000 fb00 	bl	8006318 <memchr>
 8005d18:	9a04      	ldr	r2, [sp, #16]
 8005d1a:	b9d8      	cbnz	r0, 8005d54 <_vfiprintf_r+0x12c>
 8005d1c:	06d1      	lsls	r1, r2, #27
 8005d1e:	bf44      	itt	mi
 8005d20:	2320      	movmi	r3, #32
 8005d22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d26:	0713      	lsls	r3, r2, #28
 8005d28:	bf44      	itt	mi
 8005d2a:	232b      	movmi	r3, #43	; 0x2b
 8005d2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d30:	f89a 3000 	ldrb.w	r3, [sl]
 8005d34:	2b2a      	cmp	r3, #42	; 0x2a
 8005d36:	d015      	beq.n	8005d64 <_vfiprintf_r+0x13c>
 8005d38:	4654      	mov	r4, sl
 8005d3a:	2000      	movs	r0, #0
 8005d3c:	f04f 0c0a 	mov.w	ip, #10
 8005d40:	9a07      	ldr	r2, [sp, #28]
 8005d42:	4621      	mov	r1, r4
 8005d44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d48:	3b30      	subs	r3, #48	; 0x30
 8005d4a:	2b09      	cmp	r3, #9
 8005d4c:	d94e      	bls.n	8005dec <_vfiprintf_r+0x1c4>
 8005d4e:	b1b0      	cbz	r0, 8005d7e <_vfiprintf_r+0x156>
 8005d50:	9207      	str	r2, [sp, #28]
 8005d52:	e014      	b.n	8005d7e <_vfiprintf_r+0x156>
 8005d54:	eba0 0308 	sub.w	r3, r0, r8
 8005d58:	fa09 f303 	lsl.w	r3, r9, r3
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	46a2      	mov	sl, r4
 8005d60:	9304      	str	r3, [sp, #16]
 8005d62:	e7d2      	b.n	8005d0a <_vfiprintf_r+0xe2>
 8005d64:	9b03      	ldr	r3, [sp, #12]
 8005d66:	1d19      	adds	r1, r3, #4
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	9103      	str	r1, [sp, #12]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	bfbb      	ittet	lt
 8005d70:	425b      	neglt	r3, r3
 8005d72:	f042 0202 	orrlt.w	r2, r2, #2
 8005d76:	9307      	strge	r3, [sp, #28]
 8005d78:	9307      	strlt	r3, [sp, #28]
 8005d7a:	bfb8      	it	lt
 8005d7c:	9204      	strlt	r2, [sp, #16]
 8005d7e:	7823      	ldrb	r3, [r4, #0]
 8005d80:	2b2e      	cmp	r3, #46	; 0x2e
 8005d82:	d10c      	bne.n	8005d9e <_vfiprintf_r+0x176>
 8005d84:	7863      	ldrb	r3, [r4, #1]
 8005d86:	2b2a      	cmp	r3, #42	; 0x2a
 8005d88:	d135      	bne.n	8005df6 <_vfiprintf_r+0x1ce>
 8005d8a:	9b03      	ldr	r3, [sp, #12]
 8005d8c:	3402      	adds	r4, #2
 8005d8e:	1d1a      	adds	r2, r3, #4
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	9203      	str	r2, [sp, #12]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	bfb8      	it	lt
 8005d98:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d9c:	9305      	str	r3, [sp, #20]
 8005d9e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005e78 <_vfiprintf_r+0x250>
 8005da2:	2203      	movs	r2, #3
 8005da4:	4650      	mov	r0, sl
 8005da6:	7821      	ldrb	r1, [r4, #0]
 8005da8:	f000 fab6 	bl	8006318 <memchr>
 8005dac:	b140      	cbz	r0, 8005dc0 <_vfiprintf_r+0x198>
 8005dae:	2340      	movs	r3, #64	; 0x40
 8005db0:	eba0 000a 	sub.w	r0, r0, sl
 8005db4:	fa03 f000 	lsl.w	r0, r3, r0
 8005db8:	9b04      	ldr	r3, [sp, #16]
 8005dba:	3401      	adds	r4, #1
 8005dbc:	4303      	orrs	r3, r0
 8005dbe:	9304      	str	r3, [sp, #16]
 8005dc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dc4:	2206      	movs	r2, #6
 8005dc6:	482d      	ldr	r0, [pc, #180]	; (8005e7c <_vfiprintf_r+0x254>)
 8005dc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005dcc:	f000 faa4 	bl	8006318 <memchr>
 8005dd0:	2800      	cmp	r0, #0
 8005dd2:	d03f      	beq.n	8005e54 <_vfiprintf_r+0x22c>
 8005dd4:	4b2a      	ldr	r3, [pc, #168]	; (8005e80 <_vfiprintf_r+0x258>)
 8005dd6:	bb1b      	cbnz	r3, 8005e20 <_vfiprintf_r+0x1f8>
 8005dd8:	9b03      	ldr	r3, [sp, #12]
 8005dda:	3307      	adds	r3, #7
 8005ddc:	f023 0307 	bic.w	r3, r3, #7
 8005de0:	3308      	adds	r3, #8
 8005de2:	9303      	str	r3, [sp, #12]
 8005de4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005de6:	443b      	add	r3, r7
 8005de8:	9309      	str	r3, [sp, #36]	; 0x24
 8005dea:	e767      	b.n	8005cbc <_vfiprintf_r+0x94>
 8005dec:	460c      	mov	r4, r1
 8005dee:	2001      	movs	r0, #1
 8005df0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005df4:	e7a5      	b.n	8005d42 <_vfiprintf_r+0x11a>
 8005df6:	2300      	movs	r3, #0
 8005df8:	f04f 0c0a 	mov.w	ip, #10
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	3401      	adds	r4, #1
 8005e00:	9305      	str	r3, [sp, #20]
 8005e02:	4620      	mov	r0, r4
 8005e04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e08:	3a30      	subs	r2, #48	; 0x30
 8005e0a:	2a09      	cmp	r2, #9
 8005e0c:	d903      	bls.n	8005e16 <_vfiprintf_r+0x1ee>
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d0c5      	beq.n	8005d9e <_vfiprintf_r+0x176>
 8005e12:	9105      	str	r1, [sp, #20]
 8005e14:	e7c3      	b.n	8005d9e <_vfiprintf_r+0x176>
 8005e16:	4604      	mov	r4, r0
 8005e18:	2301      	movs	r3, #1
 8005e1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e1e:	e7f0      	b.n	8005e02 <_vfiprintf_r+0x1da>
 8005e20:	ab03      	add	r3, sp, #12
 8005e22:	9300      	str	r3, [sp, #0]
 8005e24:	462a      	mov	r2, r5
 8005e26:	4630      	mov	r0, r6
 8005e28:	4b16      	ldr	r3, [pc, #88]	; (8005e84 <_vfiprintf_r+0x25c>)
 8005e2a:	a904      	add	r1, sp, #16
 8005e2c:	f3af 8000 	nop.w
 8005e30:	4607      	mov	r7, r0
 8005e32:	1c78      	adds	r0, r7, #1
 8005e34:	d1d6      	bne.n	8005de4 <_vfiprintf_r+0x1bc>
 8005e36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e38:	07d9      	lsls	r1, r3, #31
 8005e3a:	d405      	bmi.n	8005e48 <_vfiprintf_r+0x220>
 8005e3c:	89ab      	ldrh	r3, [r5, #12]
 8005e3e:	059a      	lsls	r2, r3, #22
 8005e40:	d402      	bmi.n	8005e48 <_vfiprintf_r+0x220>
 8005e42:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e44:	f7ff fd7e 	bl	8005944 <__retarget_lock_release_recursive>
 8005e48:	89ab      	ldrh	r3, [r5, #12]
 8005e4a:	065b      	lsls	r3, r3, #25
 8005e4c:	f53f af12 	bmi.w	8005c74 <_vfiprintf_r+0x4c>
 8005e50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e52:	e711      	b.n	8005c78 <_vfiprintf_r+0x50>
 8005e54:	ab03      	add	r3, sp, #12
 8005e56:	9300      	str	r3, [sp, #0]
 8005e58:	462a      	mov	r2, r5
 8005e5a:	4630      	mov	r0, r6
 8005e5c:	4b09      	ldr	r3, [pc, #36]	; (8005e84 <_vfiprintf_r+0x25c>)
 8005e5e:	a904      	add	r1, sp, #16
 8005e60:	f000 f882 	bl	8005f68 <_printf_i>
 8005e64:	e7e4      	b.n	8005e30 <_vfiprintf_r+0x208>
 8005e66:	bf00      	nop
 8005e68:	08006d24 	.word	0x08006d24
 8005e6c:	08006d44 	.word	0x08006d44
 8005e70:	08006d04 	.word	0x08006d04
 8005e74:	08006d64 	.word	0x08006d64
 8005e78:	08006d6a 	.word	0x08006d6a
 8005e7c:	08006d6e 	.word	0x08006d6e
 8005e80:	00000000 	.word	0x00000000
 8005e84:	08005c03 	.word	0x08005c03

08005e88 <_printf_common>:
 8005e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e8c:	4616      	mov	r6, r2
 8005e8e:	4699      	mov	r9, r3
 8005e90:	688a      	ldr	r2, [r1, #8]
 8005e92:	690b      	ldr	r3, [r1, #16]
 8005e94:	4607      	mov	r7, r0
 8005e96:	4293      	cmp	r3, r2
 8005e98:	bfb8      	it	lt
 8005e9a:	4613      	movlt	r3, r2
 8005e9c:	6033      	str	r3, [r6, #0]
 8005e9e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ea2:	460c      	mov	r4, r1
 8005ea4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ea8:	b10a      	cbz	r2, 8005eae <_printf_common+0x26>
 8005eaa:	3301      	adds	r3, #1
 8005eac:	6033      	str	r3, [r6, #0]
 8005eae:	6823      	ldr	r3, [r4, #0]
 8005eb0:	0699      	lsls	r1, r3, #26
 8005eb2:	bf42      	ittt	mi
 8005eb4:	6833      	ldrmi	r3, [r6, #0]
 8005eb6:	3302      	addmi	r3, #2
 8005eb8:	6033      	strmi	r3, [r6, #0]
 8005eba:	6825      	ldr	r5, [r4, #0]
 8005ebc:	f015 0506 	ands.w	r5, r5, #6
 8005ec0:	d106      	bne.n	8005ed0 <_printf_common+0x48>
 8005ec2:	f104 0a19 	add.w	sl, r4, #25
 8005ec6:	68e3      	ldr	r3, [r4, #12]
 8005ec8:	6832      	ldr	r2, [r6, #0]
 8005eca:	1a9b      	subs	r3, r3, r2
 8005ecc:	42ab      	cmp	r3, r5
 8005ece:	dc28      	bgt.n	8005f22 <_printf_common+0x9a>
 8005ed0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ed4:	1e13      	subs	r3, r2, #0
 8005ed6:	6822      	ldr	r2, [r4, #0]
 8005ed8:	bf18      	it	ne
 8005eda:	2301      	movne	r3, #1
 8005edc:	0692      	lsls	r2, r2, #26
 8005ede:	d42d      	bmi.n	8005f3c <_printf_common+0xb4>
 8005ee0:	4649      	mov	r1, r9
 8005ee2:	4638      	mov	r0, r7
 8005ee4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ee8:	47c0      	blx	r8
 8005eea:	3001      	adds	r0, #1
 8005eec:	d020      	beq.n	8005f30 <_printf_common+0xa8>
 8005eee:	6823      	ldr	r3, [r4, #0]
 8005ef0:	68e5      	ldr	r5, [r4, #12]
 8005ef2:	f003 0306 	and.w	r3, r3, #6
 8005ef6:	2b04      	cmp	r3, #4
 8005ef8:	bf18      	it	ne
 8005efa:	2500      	movne	r5, #0
 8005efc:	6832      	ldr	r2, [r6, #0]
 8005efe:	f04f 0600 	mov.w	r6, #0
 8005f02:	68a3      	ldr	r3, [r4, #8]
 8005f04:	bf08      	it	eq
 8005f06:	1aad      	subeq	r5, r5, r2
 8005f08:	6922      	ldr	r2, [r4, #16]
 8005f0a:	bf08      	it	eq
 8005f0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f10:	4293      	cmp	r3, r2
 8005f12:	bfc4      	itt	gt
 8005f14:	1a9b      	subgt	r3, r3, r2
 8005f16:	18ed      	addgt	r5, r5, r3
 8005f18:	341a      	adds	r4, #26
 8005f1a:	42b5      	cmp	r5, r6
 8005f1c:	d11a      	bne.n	8005f54 <_printf_common+0xcc>
 8005f1e:	2000      	movs	r0, #0
 8005f20:	e008      	b.n	8005f34 <_printf_common+0xac>
 8005f22:	2301      	movs	r3, #1
 8005f24:	4652      	mov	r2, sl
 8005f26:	4649      	mov	r1, r9
 8005f28:	4638      	mov	r0, r7
 8005f2a:	47c0      	blx	r8
 8005f2c:	3001      	adds	r0, #1
 8005f2e:	d103      	bne.n	8005f38 <_printf_common+0xb0>
 8005f30:	f04f 30ff 	mov.w	r0, #4294967295
 8005f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f38:	3501      	adds	r5, #1
 8005f3a:	e7c4      	b.n	8005ec6 <_printf_common+0x3e>
 8005f3c:	2030      	movs	r0, #48	; 0x30
 8005f3e:	18e1      	adds	r1, r4, r3
 8005f40:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f44:	1c5a      	adds	r2, r3, #1
 8005f46:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f4a:	4422      	add	r2, r4
 8005f4c:	3302      	adds	r3, #2
 8005f4e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f52:	e7c5      	b.n	8005ee0 <_printf_common+0x58>
 8005f54:	2301      	movs	r3, #1
 8005f56:	4622      	mov	r2, r4
 8005f58:	4649      	mov	r1, r9
 8005f5a:	4638      	mov	r0, r7
 8005f5c:	47c0      	blx	r8
 8005f5e:	3001      	adds	r0, #1
 8005f60:	d0e6      	beq.n	8005f30 <_printf_common+0xa8>
 8005f62:	3601      	adds	r6, #1
 8005f64:	e7d9      	b.n	8005f1a <_printf_common+0x92>
	...

08005f68 <_printf_i>:
 8005f68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f6c:	7e0f      	ldrb	r7, [r1, #24]
 8005f6e:	4691      	mov	r9, r2
 8005f70:	2f78      	cmp	r7, #120	; 0x78
 8005f72:	4680      	mov	r8, r0
 8005f74:	460c      	mov	r4, r1
 8005f76:	469a      	mov	sl, r3
 8005f78:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f7e:	d807      	bhi.n	8005f90 <_printf_i+0x28>
 8005f80:	2f62      	cmp	r7, #98	; 0x62
 8005f82:	d80a      	bhi.n	8005f9a <_printf_i+0x32>
 8005f84:	2f00      	cmp	r7, #0
 8005f86:	f000 80d9 	beq.w	800613c <_printf_i+0x1d4>
 8005f8a:	2f58      	cmp	r7, #88	; 0x58
 8005f8c:	f000 80a4 	beq.w	80060d8 <_printf_i+0x170>
 8005f90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f98:	e03a      	b.n	8006010 <_printf_i+0xa8>
 8005f9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f9e:	2b15      	cmp	r3, #21
 8005fa0:	d8f6      	bhi.n	8005f90 <_printf_i+0x28>
 8005fa2:	a101      	add	r1, pc, #4	; (adr r1, 8005fa8 <_printf_i+0x40>)
 8005fa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005fa8:	08006001 	.word	0x08006001
 8005fac:	08006015 	.word	0x08006015
 8005fb0:	08005f91 	.word	0x08005f91
 8005fb4:	08005f91 	.word	0x08005f91
 8005fb8:	08005f91 	.word	0x08005f91
 8005fbc:	08005f91 	.word	0x08005f91
 8005fc0:	08006015 	.word	0x08006015
 8005fc4:	08005f91 	.word	0x08005f91
 8005fc8:	08005f91 	.word	0x08005f91
 8005fcc:	08005f91 	.word	0x08005f91
 8005fd0:	08005f91 	.word	0x08005f91
 8005fd4:	08006123 	.word	0x08006123
 8005fd8:	08006045 	.word	0x08006045
 8005fdc:	08006105 	.word	0x08006105
 8005fe0:	08005f91 	.word	0x08005f91
 8005fe4:	08005f91 	.word	0x08005f91
 8005fe8:	08006145 	.word	0x08006145
 8005fec:	08005f91 	.word	0x08005f91
 8005ff0:	08006045 	.word	0x08006045
 8005ff4:	08005f91 	.word	0x08005f91
 8005ff8:	08005f91 	.word	0x08005f91
 8005ffc:	0800610d 	.word	0x0800610d
 8006000:	682b      	ldr	r3, [r5, #0]
 8006002:	1d1a      	adds	r2, r3, #4
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	602a      	str	r2, [r5, #0]
 8006008:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800600c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006010:	2301      	movs	r3, #1
 8006012:	e0a4      	b.n	800615e <_printf_i+0x1f6>
 8006014:	6820      	ldr	r0, [r4, #0]
 8006016:	6829      	ldr	r1, [r5, #0]
 8006018:	0606      	lsls	r6, r0, #24
 800601a:	f101 0304 	add.w	r3, r1, #4
 800601e:	d50a      	bpl.n	8006036 <_printf_i+0xce>
 8006020:	680e      	ldr	r6, [r1, #0]
 8006022:	602b      	str	r3, [r5, #0]
 8006024:	2e00      	cmp	r6, #0
 8006026:	da03      	bge.n	8006030 <_printf_i+0xc8>
 8006028:	232d      	movs	r3, #45	; 0x2d
 800602a:	4276      	negs	r6, r6
 800602c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006030:	230a      	movs	r3, #10
 8006032:	485e      	ldr	r0, [pc, #376]	; (80061ac <_printf_i+0x244>)
 8006034:	e019      	b.n	800606a <_printf_i+0x102>
 8006036:	680e      	ldr	r6, [r1, #0]
 8006038:	f010 0f40 	tst.w	r0, #64	; 0x40
 800603c:	602b      	str	r3, [r5, #0]
 800603e:	bf18      	it	ne
 8006040:	b236      	sxthne	r6, r6
 8006042:	e7ef      	b.n	8006024 <_printf_i+0xbc>
 8006044:	682b      	ldr	r3, [r5, #0]
 8006046:	6820      	ldr	r0, [r4, #0]
 8006048:	1d19      	adds	r1, r3, #4
 800604a:	6029      	str	r1, [r5, #0]
 800604c:	0601      	lsls	r1, r0, #24
 800604e:	d501      	bpl.n	8006054 <_printf_i+0xec>
 8006050:	681e      	ldr	r6, [r3, #0]
 8006052:	e002      	b.n	800605a <_printf_i+0xf2>
 8006054:	0646      	lsls	r6, r0, #25
 8006056:	d5fb      	bpl.n	8006050 <_printf_i+0xe8>
 8006058:	881e      	ldrh	r6, [r3, #0]
 800605a:	2f6f      	cmp	r7, #111	; 0x6f
 800605c:	bf0c      	ite	eq
 800605e:	2308      	moveq	r3, #8
 8006060:	230a      	movne	r3, #10
 8006062:	4852      	ldr	r0, [pc, #328]	; (80061ac <_printf_i+0x244>)
 8006064:	2100      	movs	r1, #0
 8006066:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800606a:	6865      	ldr	r5, [r4, #4]
 800606c:	2d00      	cmp	r5, #0
 800606e:	bfa8      	it	ge
 8006070:	6821      	ldrge	r1, [r4, #0]
 8006072:	60a5      	str	r5, [r4, #8]
 8006074:	bfa4      	itt	ge
 8006076:	f021 0104 	bicge.w	r1, r1, #4
 800607a:	6021      	strge	r1, [r4, #0]
 800607c:	b90e      	cbnz	r6, 8006082 <_printf_i+0x11a>
 800607e:	2d00      	cmp	r5, #0
 8006080:	d04d      	beq.n	800611e <_printf_i+0x1b6>
 8006082:	4615      	mov	r5, r2
 8006084:	fbb6 f1f3 	udiv	r1, r6, r3
 8006088:	fb03 6711 	mls	r7, r3, r1, r6
 800608c:	5dc7      	ldrb	r7, [r0, r7]
 800608e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006092:	4637      	mov	r7, r6
 8006094:	42bb      	cmp	r3, r7
 8006096:	460e      	mov	r6, r1
 8006098:	d9f4      	bls.n	8006084 <_printf_i+0x11c>
 800609a:	2b08      	cmp	r3, #8
 800609c:	d10b      	bne.n	80060b6 <_printf_i+0x14e>
 800609e:	6823      	ldr	r3, [r4, #0]
 80060a0:	07de      	lsls	r6, r3, #31
 80060a2:	d508      	bpl.n	80060b6 <_printf_i+0x14e>
 80060a4:	6923      	ldr	r3, [r4, #16]
 80060a6:	6861      	ldr	r1, [r4, #4]
 80060a8:	4299      	cmp	r1, r3
 80060aa:	bfde      	ittt	le
 80060ac:	2330      	movle	r3, #48	; 0x30
 80060ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 80060b2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80060b6:	1b52      	subs	r2, r2, r5
 80060b8:	6122      	str	r2, [r4, #16]
 80060ba:	464b      	mov	r3, r9
 80060bc:	4621      	mov	r1, r4
 80060be:	4640      	mov	r0, r8
 80060c0:	f8cd a000 	str.w	sl, [sp]
 80060c4:	aa03      	add	r2, sp, #12
 80060c6:	f7ff fedf 	bl	8005e88 <_printf_common>
 80060ca:	3001      	adds	r0, #1
 80060cc:	d14c      	bne.n	8006168 <_printf_i+0x200>
 80060ce:	f04f 30ff 	mov.w	r0, #4294967295
 80060d2:	b004      	add	sp, #16
 80060d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060d8:	4834      	ldr	r0, [pc, #208]	; (80061ac <_printf_i+0x244>)
 80060da:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80060de:	6829      	ldr	r1, [r5, #0]
 80060e0:	6823      	ldr	r3, [r4, #0]
 80060e2:	f851 6b04 	ldr.w	r6, [r1], #4
 80060e6:	6029      	str	r1, [r5, #0]
 80060e8:	061d      	lsls	r5, r3, #24
 80060ea:	d514      	bpl.n	8006116 <_printf_i+0x1ae>
 80060ec:	07df      	lsls	r7, r3, #31
 80060ee:	bf44      	itt	mi
 80060f0:	f043 0320 	orrmi.w	r3, r3, #32
 80060f4:	6023      	strmi	r3, [r4, #0]
 80060f6:	b91e      	cbnz	r6, 8006100 <_printf_i+0x198>
 80060f8:	6823      	ldr	r3, [r4, #0]
 80060fa:	f023 0320 	bic.w	r3, r3, #32
 80060fe:	6023      	str	r3, [r4, #0]
 8006100:	2310      	movs	r3, #16
 8006102:	e7af      	b.n	8006064 <_printf_i+0xfc>
 8006104:	6823      	ldr	r3, [r4, #0]
 8006106:	f043 0320 	orr.w	r3, r3, #32
 800610a:	6023      	str	r3, [r4, #0]
 800610c:	2378      	movs	r3, #120	; 0x78
 800610e:	4828      	ldr	r0, [pc, #160]	; (80061b0 <_printf_i+0x248>)
 8006110:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006114:	e7e3      	b.n	80060de <_printf_i+0x176>
 8006116:	0659      	lsls	r1, r3, #25
 8006118:	bf48      	it	mi
 800611a:	b2b6      	uxthmi	r6, r6
 800611c:	e7e6      	b.n	80060ec <_printf_i+0x184>
 800611e:	4615      	mov	r5, r2
 8006120:	e7bb      	b.n	800609a <_printf_i+0x132>
 8006122:	682b      	ldr	r3, [r5, #0]
 8006124:	6826      	ldr	r6, [r4, #0]
 8006126:	1d18      	adds	r0, r3, #4
 8006128:	6961      	ldr	r1, [r4, #20]
 800612a:	6028      	str	r0, [r5, #0]
 800612c:	0635      	lsls	r5, r6, #24
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	d501      	bpl.n	8006136 <_printf_i+0x1ce>
 8006132:	6019      	str	r1, [r3, #0]
 8006134:	e002      	b.n	800613c <_printf_i+0x1d4>
 8006136:	0670      	lsls	r0, r6, #25
 8006138:	d5fb      	bpl.n	8006132 <_printf_i+0x1ca>
 800613a:	8019      	strh	r1, [r3, #0]
 800613c:	2300      	movs	r3, #0
 800613e:	4615      	mov	r5, r2
 8006140:	6123      	str	r3, [r4, #16]
 8006142:	e7ba      	b.n	80060ba <_printf_i+0x152>
 8006144:	682b      	ldr	r3, [r5, #0]
 8006146:	2100      	movs	r1, #0
 8006148:	1d1a      	adds	r2, r3, #4
 800614a:	602a      	str	r2, [r5, #0]
 800614c:	681d      	ldr	r5, [r3, #0]
 800614e:	6862      	ldr	r2, [r4, #4]
 8006150:	4628      	mov	r0, r5
 8006152:	f000 f8e1 	bl	8006318 <memchr>
 8006156:	b108      	cbz	r0, 800615c <_printf_i+0x1f4>
 8006158:	1b40      	subs	r0, r0, r5
 800615a:	6060      	str	r0, [r4, #4]
 800615c:	6863      	ldr	r3, [r4, #4]
 800615e:	6123      	str	r3, [r4, #16]
 8006160:	2300      	movs	r3, #0
 8006162:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006166:	e7a8      	b.n	80060ba <_printf_i+0x152>
 8006168:	462a      	mov	r2, r5
 800616a:	4649      	mov	r1, r9
 800616c:	4640      	mov	r0, r8
 800616e:	6923      	ldr	r3, [r4, #16]
 8006170:	47d0      	blx	sl
 8006172:	3001      	adds	r0, #1
 8006174:	d0ab      	beq.n	80060ce <_printf_i+0x166>
 8006176:	6823      	ldr	r3, [r4, #0]
 8006178:	079b      	lsls	r3, r3, #30
 800617a:	d413      	bmi.n	80061a4 <_printf_i+0x23c>
 800617c:	68e0      	ldr	r0, [r4, #12]
 800617e:	9b03      	ldr	r3, [sp, #12]
 8006180:	4298      	cmp	r0, r3
 8006182:	bfb8      	it	lt
 8006184:	4618      	movlt	r0, r3
 8006186:	e7a4      	b.n	80060d2 <_printf_i+0x16a>
 8006188:	2301      	movs	r3, #1
 800618a:	4632      	mov	r2, r6
 800618c:	4649      	mov	r1, r9
 800618e:	4640      	mov	r0, r8
 8006190:	47d0      	blx	sl
 8006192:	3001      	adds	r0, #1
 8006194:	d09b      	beq.n	80060ce <_printf_i+0x166>
 8006196:	3501      	adds	r5, #1
 8006198:	68e3      	ldr	r3, [r4, #12]
 800619a:	9903      	ldr	r1, [sp, #12]
 800619c:	1a5b      	subs	r3, r3, r1
 800619e:	42ab      	cmp	r3, r5
 80061a0:	dcf2      	bgt.n	8006188 <_printf_i+0x220>
 80061a2:	e7eb      	b.n	800617c <_printf_i+0x214>
 80061a4:	2500      	movs	r5, #0
 80061a6:	f104 0619 	add.w	r6, r4, #25
 80061aa:	e7f5      	b.n	8006198 <_printf_i+0x230>
 80061ac:	08006d75 	.word	0x08006d75
 80061b0:	08006d86 	.word	0x08006d86

080061b4 <_sbrk_r>:
 80061b4:	b538      	push	{r3, r4, r5, lr}
 80061b6:	2300      	movs	r3, #0
 80061b8:	4d05      	ldr	r5, [pc, #20]	; (80061d0 <_sbrk_r+0x1c>)
 80061ba:	4604      	mov	r4, r0
 80061bc:	4608      	mov	r0, r1
 80061be:	602b      	str	r3, [r5, #0]
 80061c0:	f7fc fcae 	bl	8002b20 <_sbrk>
 80061c4:	1c43      	adds	r3, r0, #1
 80061c6:	d102      	bne.n	80061ce <_sbrk_r+0x1a>
 80061c8:	682b      	ldr	r3, [r5, #0]
 80061ca:	b103      	cbz	r3, 80061ce <_sbrk_r+0x1a>
 80061cc:	6023      	str	r3, [r4, #0]
 80061ce:	bd38      	pop	{r3, r4, r5, pc}
 80061d0:	20003c9c 	.word	0x20003c9c

080061d4 <__sread>:
 80061d4:	b510      	push	{r4, lr}
 80061d6:	460c      	mov	r4, r1
 80061d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061dc:	f000 f8b6 	bl	800634c <_read_r>
 80061e0:	2800      	cmp	r0, #0
 80061e2:	bfab      	itete	ge
 80061e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80061e6:	89a3      	ldrhlt	r3, [r4, #12]
 80061e8:	181b      	addge	r3, r3, r0
 80061ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80061ee:	bfac      	ite	ge
 80061f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80061f2:	81a3      	strhlt	r3, [r4, #12]
 80061f4:	bd10      	pop	{r4, pc}

080061f6 <__swrite>:
 80061f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061fa:	461f      	mov	r7, r3
 80061fc:	898b      	ldrh	r3, [r1, #12]
 80061fe:	4605      	mov	r5, r0
 8006200:	05db      	lsls	r3, r3, #23
 8006202:	460c      	mov	r4, r1
 8006204:	4616      	mov	r6, r2
 8006206:	d505      	bpl.n	8006214 <__swrite+0x1e>
 8006208:	2302      	movs	r3, #2
 800620a:	2200      	movs	r2, #0
 800620c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006210:	f000 f870 	bl	80062f4 <_lseek_r>
 8006214:	89a3      	ldrh	r3, [r4, #12]
 8006216:	4632      	mov	r2, r6
 8006218:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800621c:	81a3      	strh	r3, [r4, #12]
 800621e:	4628      	mov	r0, r5
 8006220:	463b      	mov	r3, r7
 8006222:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006226:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800622a:	f000 b817 	b.w	800625c <_write_r>

0800622e <__sseek>:
 800622e:	b510      	push	{r4, lr}
 8006230:	460c      	mov	r4, r1
 8006232:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006236:	f000 f85d 	bl	80062f4 <_lseek_r>
 800623a:	1c43      	adds	r3, r0, #1
 800623c:	89a3      	ldrh	r3, [r4, #12]
 800623e:	bf15      	itete	ne
 8006240:	6560      	strne	r0, [r4, #84]	; 0x54
 8006242:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006246:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800624a:	81a3      	strheq	r3, [r4, #12]
 800624c:	bf18      	it	ne
 800624e:	81a3      	strhne	r3, [r4, #12]
 8006250:	bd10      	pop	{r4, pc}

08006252 <__sclose>:
 8006252:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006256:	f000 b81b 	b.w	8006290 <_close_r>
	...

0800625c <_write_r>:
 800625c:	b538      	push	{r3, r4, r5, lr}
 800625e:	4604      	mov	r4, r0
 8006260:	4608      	mov	r0, r1
 8006262:	4611      	mov	r1, r2
 8006264:	2200      	movs	r2, #0
 8006266:	4d05      	ldr	r5, [pc, #20]	; (800627c <_write_r+0x20>)
 8006268:	602a      	str	r2, [r5, #0]
 800626a:	461a      	mov	r2, r3
 800626c:	f7fc fc0c 	bl	8002a88 <_write>
 8006270:	1c43      	adds	r3, r0, #1
 8006272:	d102      	bne.n	800627a <_write_r+0x1e>
 8006274:	682b      	ldr	r3, [r5, #0]
 8006276:	b103      	cbz	r3, 800627a <_write_r+0x1e>
 8006278:	6023      	str	r3, [r4, #0]
 800627a:	bd38      	pop	{r3, r4, r5, pc}
 800627c:	20003c9c 	.word	0x20003c9c

08006280 <abort>:
 8006280:	2006      	movs	r0, #6
 8006282:	b508      	push	{r3, lr}
 8006284:	f000 f89c 	bl	80063c0 <raise>
 8006288:	2001      	movs	r0, #1
 800628a:	f7fc fbd6 	bl	8002a3a <_exit>
	...

08006290 <_close_r>:
 8006290:	b538      	push	{r3, r4, r5, lr}
 8006292:	2300      	movs	r3, #0
 8006294:	4d05      	ldr	r5, [pc, #20]	; (80062ac <_close_r+0x1c>)
 8006296:	4604      	mov	r4, r0
 8006298:	4608      	mov	r0, r1
 800629a:	602b      	str	r3, [r5, #0]
 800629c:	f7fc fc10 	bl	8002ac0 <_close>
 80062a0:	1c43      	adds	r3, r0, #1
 80062a2:	d102      	bne.n	80062aa <_close_r+0x1a>
 80062a4:	682b      	ldr	r3, [r5, #0]
 80062a6:	b103      	cbz	r3, 80062aa <_close_r+0x1a>
 80062a8:	6023      	str	r3, [r4, #0]
 80062aa:	bd38      	pop	{r3, r4, r5, pc}
 80062ac:	20003c9c 	.word	0x20003c9c

080062b0 <_fstat_r>:
 80062b0:	b538      	push	{r3, r4, r5, lr}
 80062b2:	2300      	movs	r3, #0
 80062b4:	4d06      	ldr	r5, [pc, #24]	; (80062d0 <_fstat_r+0x20>)
 80062b6:	4604      	mov	r4, r0
 80062b8:	4608      	mov	r0, r1
 80062ba:	4611      	mov	r1, r2
 80062bc:	602b      	str	r3, [r5, #0]
 80062be:	f7fc fc0a 	bl	8002ad6 <_fstat>
 80062c2:	1c43      	adds	r3, r0, #1
 80062c4:	d102      	bne.n	80062cc <_fstat_r+0x1c>
 80062c6:	682b      	ldr	r3, [r5, #0]
 80062c8:	b103      	cbz	r3, 80062cc <_fstat_r+0x1c>
 80062ca:	6023      	str	r3, [r4, #0]
 80062cc:	bd38      	pop	{r3, r4, r5, pc}
 80062ce:	bf00      	nop
 80062d0:	20003c9c 	.word	0x20003c9c

080062d4 <_isatty_r>:
 80062d4:	b538      	push	{r3, r4, r5, lr}
 80062d6:	2300      	movs	r3, #0
 80062d8:	4d05      	ldr	r5, [pc, #20]	; (80062f0 <_isatty_r+0x1c>)
 80062da:	4604      	mov	r4, r0
 80062dc:	4608      	mov	r0, r1
 80062de:	602b      	str	r3, [r5, #0]
 80062e0:	f7fc fc08 	bl	8002af4 <_isatty>
 80062e4:	1c43      	adds	r3, r0, #1
 80062e6:	d102      	bne.n	80062ee <_isatty_r+0x1a>
 80062e8:	682b      	ldr	r3, [r5, #0]
 80062ea:	b103      	cbz	r3, 80062ee <_isatty_r+0x1a>
 80062ec:	6023      	str	r3, [r4, #0]
 80062ee:	bd38      	pop	{r3, r4, r5, pc}
 80062f0:	20003c9c 	.word	0x20003c9c

080062f4 <_lseek_r>:
 80062f4:	b538      	push	{r3, r4, r5, lr}
 80062f6:	4604      	mov	r4, r0
 80062f8:	4608      	mov	r0, r1
 80062fa:	4611      	mov	r1, r2
 80062fc:	2200      	movs	r2, #0
 80062fe:	4d05      	ldr	r5, [pc, #20]	; (8006314 <_lseek_r+0x20>)
 8006300:	602a      	str	r2, [r5, #0]
 8006302:	461a      	mov	r2, r3
 8006304:	f7fc fc00 	bl	8002b08 <_lseek>
 8006308:	1c43      	adds	r3, r0, #1
 800630a:	d102      	bne.n	8006312 <_lseek_r+0x1e>
 800630c:	682b      	ldr	r3, [r5, #0]
 800630e:	b103      	cbz	r3, 8006312 <_lseek_r+0x1e>
 8006310:	6023      	str	r3, [r4, #0]
 8006312:	bd38      	pop	{r3, r4, r5, pc}
 8006314:	20003c9c 	.word	0x20003c9c

08006318 <memchr>:
 8006318:	4603      	mov	r3, r0
 800631a:	b510      	push	{r4, lr}
 800631c:	b2c9      	uxtb	r1, r1
 800631e:	4402      	add	r2, r0
 8006320:	4293      	cmp	r3, r2
 8006322:	4618      	mov	r0, r3
 8006324:	d101      	bne.n	800632a <memchr+0x12>
 8006326:	2000      	movs	r0, #0
 8006328:	e003      	b.n	8006332 <memchr+0x1a>
 800632a:	7804      	ldrb	r4, [r0, #0]
 800632c:	3301      	adds	r3, #1
 800632e:	428c      	cmp	r4, r1
 8006330:	d1f6      	bne.n	8006320 <memchr+0x8>
 8006332:	bd10      	pop	{r4, pc}

08006334 <__malloc_lock>:
 8006334:	4801      	ldr	r0, [pc, #4]	; (800633c <__malloc_lock+0x8>)
 8006336:	f7ff bb04 	b.w	8005942 <__retarget_lock_acquire_recursive>
 800633a:	bf00      	nop
 800633c:	20003c90 	.word	0x20003c90

08006340 <__malloc_unlock>:
 8006340:	4801      	ldr	r0, [pc, #4]	; (8006348 <__malloc_unlock+0x8>)
 8006342:	f7ff baff 	b.w	8005944 <__retarget_lock_release_recursive>
 8006346:	bf00      	nop
 8006348:	20003c90 	.word	0x20003c90

0800634c <_read_r>:
 800634c:	b538      	push	{r3, r4, r5, lr}
 800634e:	4604      	mov	r4, r0
 8006350:	4608      	mov	r0, r1
 8006352:	4611      	mov	r1, r2
 8006354:	2200      	movs	r2, #0
 8006356:	4d05      	ldr	r5, [pc, #20]	; (800636c <_read_r+0x20>)
 8006358:	602a      	str	r2, [r5, #0]
 800635a:	461a      	mov	r2, r3
 800635c:	f7fc fb77 	bl	8002a4e <_read>
 8006360:	1c43      	adds	r3, r0, #1
 8006362:	d102      	bne.n	800636a <_read_r+0x1e>
 8006364:	682b      	ldr	r3, [r5, #0]
 8006366:	b103      	cbz	r3, 800636a <_read_r+0x1e>
 8006368:	6023      	str	r3, [r4, #0]
 800636a:	bd38      	pop	{r3, r4, r5, pc}
 800636c:	20003c9c 	.word	0x20003c9c

08006370 <_raise_r>:
 8006370:	291f      	cmp	r1, #31
 8006372:	b538      	push	{r3, r4, r5, lr}
 8006374:	4604      	mov	r4, r0
 8006376:	460d      	mov	r5, r1
 8006378:	d904      	bls.n	8006384 <_raise_r+0x14>
 800637a:	2316      	movs	r3, #22
 800637c:	6003      	str	r3, [r0, #0]
 800637e:	f04f 30ff 	mov.w	r0, #4294967295
 8006382:	bd38      	pop	{r3, r4, r5, pc}
 8006384:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006386:	b112      	cbz	r2, 800638e <_raise_r+0x1e>
 8006388:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800638c:	b94b      	cbnz	r3, 80063a2 <_raise_r+0x32>
 800638e:	4620      	mov	r0, r4
 8006390:	f000 f830 	bl	80063f4 <_getpid_r>
 8006394:	462a      	mov	r2, r5
 8006396:	4601      	mov	r1, r0
 8006398:	4620      	mov	r0, r4
 800639a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800639e:	f000 b817 	b.w	80063d0 <_kill_r>
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d00a      	beq.n	80063bc <_raise_r+0x4c>
 80063a6:	1c59      	adds	r1, r3, #1
 80063a8:	d103      	bne.n	80063b2 <_raise_r+0x42>
 80063aa:	2316      	movs	r3, #22
 80063ac:	6003      	str	r3, [r0, #0]
 80063ae:	2001      	movs	r0, #1
 80063b0:	e7e7      	b.n	8006382 <_raise_r+0x12>
 80063b2:	2400      	movs	r4, #0
 80063b4:	4628      	mov	r0, r5
 80063b6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80063ba:	4798      	blx	r3
 80063bc:	2000      	movs	r0, #0
 80063be:	e7e0      	b.n	8006382 <_raise_r+0x12>

080063c0 <raise>:
 80063c0:	4b02      	ldr	r3, [pc, #8]	; (80063cc <raise+0xc>)
 80063c2:	4601      	mov	r1, r0
 80063c4:	6818      	ldr	r0, [r3, #0]
 80063c6:	f7ff bfd3 	b.w	8006370 <_raise_r>
 80063ca:	bf00      	nop
 80063cc:	2000053c 	.word	0x2000053c

080063d0 <_kill_r>:
 80063d0:	b538      	push	{r3, r4, r5, lr}
 80063d2:	2300      	movs	r3, #0
 80063d4:	4d06      	ldr	r5, [pc, #24]	; (80063f0 <_kill_r+0x20>)
 80063d6:	4604      	mov	r4, r0
 80063d8:	4608      	mov	r0, r1
 80063da:	4611      	mov	r1, r2
 80063dc:	602b      	str	r3, [r5, #0]
 80063de:	f7fc fb1c 	bl	8002a1a <_kill>
 80063e2:	1c43      	adds	r3, r0, #1
 80063e4:	d102      	bne.n	80063ec <_kill_r+0x1c>
 80063e6:	682b      	ldr	r3, [r5, #0]
 80063e8:	b103      	cbz	r3, 80063ec <_kill_r+0x1c>
 80063ea:	6023      	str	r3, [r4, #0]
 80063ec:	bd38      	pop	{r3, r4, r5, pc}
 80063ee:	bf00      	nop
 80063f0:	20003c9c 	.word	0x20003c9c

080063f4 <_getpid_r>:
 80063f4:	f7fc bb0a 	b.w	8002a0c <_getpid>

080063f8 <_gettimeofday>:
 80063f8:	2258      	movs	r2, #88	; 0x58
 80063fa:	4b02      	ldr	r3, [pc, #8]	; (8006404 <_gettimeofday+0xc>)
 80063fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006400:	601a      	str	r2, [r3, #0]
 8006402:	4770      	bx	lr
 8006404:	20003c9c 	.word	0x20003c9c

08006408 <_init>:
 8006408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800640a:	bf00      	nop
 800640c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800640e:	bc08      	pop	{r3}
 8006410:	469e      	mov	lr, r3
 8006412:	4770      	bx	lr

08006414 <_fini>:
 8006414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006416:	bf00      	nop
 8006418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800641a:	bc08      	pop	{r3}
 800641c:	469e      	mov	lr, r3
 800641e:	4770      	bx	lr
