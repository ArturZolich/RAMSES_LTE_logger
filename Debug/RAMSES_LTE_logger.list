
RAMSES_LTE_logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043dc  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  08004518  08004518  00014518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004794  08004794  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004794  08004794  00014794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800479c  0800479c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800479c  0800479c  0001479c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047a0  080047a0  000147a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080047a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011b0  20000070  08004814  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001220  08004814  00021220  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d10  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d5a  00000000  00000000  00029da9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000800  00000000  00000000  0002bb08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000748  00000000  00000000  0002c308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001686f  00000000  00000000  0002ca50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a446  00000000  00000000  000432bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086337  00000000  00000000  0004d705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d3a3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000274c  00000000  00000000  000d3a8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	08004500 	.word	0x08004500

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	08004500 	.word	0x08004500

0800017c <strcmp>:
 800017c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000180:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000184:	2a01      	cmp	r2, #1
 8000186:	bf28      	it	cs
 8000188:	429a      	cmpcs	r2, r3
 800018a:	d0f7      	beq.n	800017c <strcmp>
 800018c:	1ad0      	subs	r0, r2, r3
 800018e:	4770      	bx	lr

08000190 <strlen>:
 8000190:	4603      	mov	r3, r0
 8000192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000196:	2a00      	cmp	r2, #0
 8000198:	d1fb      	bne.n	8000192 <strlen+0x2>
 800019a:	1a18      	subs	r0, r3, r0
 800019c:	3801      	subs	r0, #1
 800019e:	4770      	bx	lr

080001a0 <__aeabi_uldivmod>:
 80001a0:	b953      	cbnz	r3, 80001b8 <__aeabi_uldivmod+0x18>
 80001a2:	b94a      	cbnz	r2, 80001b8 <__aeabi_uldivmod+0x18>
 80001a4:	2900      	cmp	r1, #0
 80001a6:	bf08      	it	eq
 80001a8:	2800      	cmpeq	r0, #0
 80001aa:	bf1c      	itt	ne
 80001ac:	f04f 31ff 	movne.w	r1, #4294967295
 80001b0:	f04f 30ff 	movne.w	r0, #4294967295
 80001b4:	f000 b976 	b.w	80004a4 <__aeabi_idiv0>
 80001b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001c0:	f000 f806 	bl	80001d0 <__udivmoddi4>
 80001c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001cc:	b004      	add	sp, #16
 80001ce:	4770      	bx	lr

080001d0 <__udivmoddi4>:
 80001d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001d4:	9e08      	ldr	r6, [sp, #32]
 80001d6:	460d      	mov	r5, r1
 80001d8:	4604      	mov	r4, r0
 80001da:	4688      	mov	r8, r1
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d14d      	bne.n	800027c <__udivmoddi4+0xac>
 80001e0:	428a      	cmp	r2, r1
 80001e2:	4694      	mov	ip, r2
 80001e4:	d968      	bls.n	80002b8 <__udivmoddi4+0xe8>
 80001e6:	fab2 f282 	clz	r2, r2
 80001ea:	b152      	cbz	r2, 8000202 <__udivmoddi4+0x32>
 80001ec:	fa01 f302 	lsl.w	r3, r1, r2
 80001f0:	f1c2 0120 	rsb	r1, r2, #32
 80001f4:	fa20 f101 	lsr.w	r1, r0, r1
 80001f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80001fc:	ea41 0803 	orr.w	r8, r1, r3
 8000200:	4094      	lsls	r4, r2
 8000202:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000206:	fbb8 f7f1 	udiv	r7, r8, r1
 800020a:	fa1f fe8c 	uxth.w	lr, ip
 800020e:	fb01 8817 	mls	r8, r1, r7, r8
 8000212:	fb07 f00e 	mul.w	r0, r7, lr
 8000216:	0c23      	lsrs	r3, r4, #16
 8000218:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800021c:	4298      	cmp	r0, r3
 800021e:	d90a      	bls.n	8000236 <__udivmoddi4+0x66>
 8000220:	eb1c 0303 	adds.w	r3, ip, r3
 8000224:	f107 35ff 	add.w	r5, r7, #4294967295
 8000228:	f080 811e 	bcs.w	8000468 <__udivmoddi4+0x298>
 800022c:	4298      	cmp	r0, r3
 800022e:	f240 811b 	bls.w	8000468 <__udivmoddi4+0x298>
 8000232:	3f02      	subs	r7, #2
 8000234:	4463      	add	r3, ip
 8000236:	1a1b      	subs	r3, r3, r0
 8000238:	fbb3 f0f1 	udiv	r0, r3, r1
 800023c:	fb01 3310 	mls	r3, r1, r0, r3
 8000240:	fb00 fe0e 	mul.w	lr, r0, lr
 8000244:	b2a4      	uxth	r4, r4
 8000246:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800024a:	45a6      	cmp	lr, r4
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x94>
 800024e:	eb1c 0404 	adds.w	r4, ip, r4
 8000252:	f100 33ff 	add.w	r3, r0, #4294967295
 8000256:	f080 8109 	bcs.w	800046c <__udivmoddi4+0x29c>
 800025a:	45a6      	cmp	lr, r4
 800025c:	f240 8106 	bls.w	800046c <__udivmoddi4+0x29c>
 8000260:	4464      	add	r4, ip
 8000262:	3802      	subs	r0, #2
 8000264:	2100      	movs	r1, #0
 8000266:	eba4 040e 	sub.w	r4, r4, lr
 800026a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800026e:	b11e      	cbz	r6, 8000278 <__udivmoddi4+0xa8>
 8000270:	2300      	movs	r3, #0
 8000272:	40d4      	lsrs	r4, r2
 8000274:	e9c6 4300 	strd	r4, r3, [r6]
 8000278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027c:	428b      	cmp	r3, r1
 800027e:	d908      	bls.n	8000292 <__udivmoddi4+0xc2>
 8000280:	2e00      	cmp	r6, #0
 8000282:	f000 80ee 	beq.w	8000462 <__udivmoddi4+0x292>
 8000286:	2100      	movs	r1, #0
 8000288:	e9c6 0500 	strd	r0, r5, [r6]
 800028c:	4608      	mov	r0, r1
 800028e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000292:	fab3 f183 	clz	r1, r3
 8000296:	2900      	cmp	r1, #0
 8000298:	d14a      	bne.n	8000330 <__udivmoddi4+0x160>
 800029a:	42ab      	cmp	r3, r5
 800029c:	d302      	bcc.n	80002a4 <__udivmoddi4+0xd4>
 800029e:	4282      	cmp	r2, r0
 80002a0:	f200 80fc 	bhi.w	800049c <__udivmoddi4+0x2cc>
 80002a4:	1a84      	subs	r4, r0, r2
 80002a6:	eb65 0303 	sbc.w	r3, r5, r3
 80002aa:	2001      	movs	r0, #1
 80002ac:	4698      	mov	r8, r3
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	d0e2      	beq.n	8000278 <__udivmoddi4+0xa8>
 80002b2:	e9c6 4800 	strd	r4, r8, [r6]
 80002b6:	e7df      	b.n	8000278 <__udivmoddi4+0xa8>
 80002b8:	b902      	cbnz	r2, 80002bc <__udivmoddi4+0xec>
 80002ba:	deff      	udf	#255	; 0xff
 80002bc:	fab2 f282 	clz	r2, r2
 80002c0:	2a00      	cmp	r2, #0
 80002c2:	f040 8091 	bne.w	80003e8 <__udivmoddi4+0x218>
 80002c6:	eba1 000c 	sub.w	r0, r1, ip
 80002ca:	2101      	movs	r1, #1
 80002cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d0:	fa1f fe8c 	uxth.w	lr, ip
 80002d4:	fbb0 f3f7 	udiv	r3, r0, r7
 80002d8:	fb07 0013 	mls	r0, r7, r3, r0
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002e2:	fb0e f003 	mul.w	r0, lr, r3
 80002e6:	42a8      	cmp	r0, r5
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0x12c>
 80002ea:	eb1c 0505 	adds.w	r5, ip, r5
 80002ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x12a>
 80002f4:	42a8      	cmp	r0, r5
 80002f6:	f200 80ce 	bhi.w	8000496 <__udivmoddi4+0x2c6>
 80002fa:	4643      	mov	r3, r8
 80002fc:	1a2d      	subs	r5, r5, r0
 80002fe:	fbb5 f0f7 	udiv	r0, r5, r7
 8000302:	fb07 5510 	mls	r5, r7, r0, r5
 8000306:	fb0e fe00 	mul.w	lr, lr, r0
 800030a:	b2a4      	uxth	r4, r4
 800030c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000310:	45a6      	cmp	lr, r4
 8000312:	d908      	bls.n	8000326 <__udivmoddi4+0x156>
 8000314:	eb1c 0404 	adds.w	r4, ip, r4
 8000318:	f100 35ff 	add.w	r5, r0, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x154>
 800031e:	45a6      	cmp	lr, r4
 8000320:	f200 80b6 	bhi.w	8000490 <__udivmoddi4+0x2c0>
 8000324:	4628      	mov	r0, r5
 8000326:	eba4 040e 	sub.w	r4, r4, lr
 800032a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800032e:	e79e      	b.n	800026e <__udivmoddi4+0x9e>
 8000330:	f1c1 0720 	rsb	r7, r1, #32
 8000334:	408b      	lsls	r3, r1
 8000336:	fa22 fc07 	lsr.w	ip, r2, r7
 800033a:	ea4c 0c03 	orr.w	ip, ip, r3
 800033e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000342:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000346:	fbba f8f9 	udiv	r8, sl, r9
 800034a:	fa20 f307 	lsr.w	r3, r0, r7
 800034e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000352:	408d      	lsls	r5, r1
 8000354:	fa1f fe8c 	uxth.w	lr, ip
 8000358:	431d      	orrs	r5, r3
 800035a:	fa00 f301 	lsl.w	r3, r0, r1
 800035e:	fb08 f00e 	mul.w	r0, r8, lr
 8000362:	0c2c      	lsrs	r4, r5, #16
 8000364:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000368:	42a0      	cmp	r0, r4
 800036a:	fa02 f201 	lsl.w	r2, r2, r1
 800036e:	d90b      	bls.n	8000388 <__udivmoddi4+0x1b8>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f108 3aff 	add.w	sl, r8, #4294967295
 8000378:	f080 8088 	bcs.w	800048c <__udivmoddi4+0x2bc>
 800037c:	42a0      	cmp	r0, r4
 800037e:	f240 8085 	bls.w	800048c <__udivmoddi4+0x2bc>
 8000382:	f1a8 0802 	sub.w	r8, r8, #2
 8000386:	4464      	add	r4, ip
 8000388:	1a24      	subs	r4, r4, r0
 800038a:	fbb4 f0f9 	udiv	r0, r4, r9
 800038e:	fb09 4410 	mls	r4, r9, r0, r4
 8000392:	fb00 fe0e 	mul.w	lr, r0, lr
 8000396:	b2ad      	uxth	r5, r5
 8000398:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800039c:	45a6      	cmp	lr, r4
 800039e:	d908      	bls.n	80003b2 <__udivmoddi4+0x1e2>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f100 35ff 	add.w	r5, r0, #4294967295
 80003a8:	d26c      	bcs.n	8000484 <__udivmoddi4+0x2b4>
 80003aa:	45a6      	cmp	lr, r4
 80003ac:	d96a      	bls.n	8000484 <__udivmoddi4+0x2b4>
 80003ae:	3802      	subs	r0, #2
 80003b0:	4464      	add	r4, ip
 80003b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003b6:	fba0 9502 	umull	r9, r5, r0, r2
 80003ba:	eba4 040e 	sub.w	r4, r4, lr
 80003be:	42ac      	cmp	r4, r5
 80003c0:	46c8      	mov	r8, r9
 80003c2:	46ae      	mov	lr, r5
 80003c4:	d356      	bcc.n	8000474 <__udivmoddi4+0x2a4>
 80003c6:	d053      	beq.n	8000470 <__udivmoddi4+0x2a0>
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d069      	beq.n	80004a0 <__udivmoddi4+0x2d0>
 80003cc:	ebb3 0208 	subs.w	r2, r3, r8
 80003d0:	eb64 040e 	sbc.w	r4, r4, lr
 80003d4:	fa22 f301 	lsr.w	r3, r2, r1
 80003d8:	fa04 f707 	lsl.w	r7, r4, r7
 80003dc:	431f      	orrs	r7, r3
 80003de:	40cc      	lsrs	r4, r1
 80003e0:	e9c6 7400 	strd	r7, r4, [r6]
 80003e4:	2100      	movs	r1, #0
 80003e6:	e747      	b.n	8000278 <__udivmoddi4+0xa8>
 80003e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ec:	f1c2 0120 	rsb	r1, r2, #32
 80003f0:	fa25 f301 	lsr.w	r3, r5, r1
 80003f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f8:	fa20 f101 	lsr.w	r1, r0, r1
 80003fc:	4095      	lsls	r5, r2
 80003fe:	430d      	orrs	r5, r1
 8000400:	fbb3 f1f7 	udiv	r1, r3, r7
 8000404:	fb07 3311 	mls	r3, r7, r1, r3
 8000408:	fa1f fe8c 	uxth.w	lr, ip
 800040c:	0c28      	lsrs	r0, r5, #16
 800040e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000412:	fb01 f30e 	mul.w	r3, r1, lr
 8000416:	4283      	cmp	r3, r0
 8000418:	fa04 f402 	lsl.w	r4, r4, r2
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x260>
 800041e:	eb1c 0000 	adds.w	r0, ip, r0
 8000422:	f101 38ff 	add.w	r8, r1, #4294967295
 8000426:	d22f      	bcs.n	8000488 <__udivmoddi4+0x2b8>
 8000428:	4283      	cmp	r3, r0
 800042a:	d92d      	bls.n	8000488 <__udivmoddi4+0x2b8>
 800042c:	3902      	subs	r1, #2
 800042e:	4460      	add	r0, ip
 8000430:	1ac0      	subs	r0, r0, r3
 8000432:	fbb0 f3f7 	udiv	r3, r0, r7
 8000436:	fb07 0013 	mls	r0, r7, r3, r0
 800043a:	b2ad      	uxth	r5, r5
 800043c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000440:	fb03 f00e 	mul.w	r0, r3, lr
 8000444:	42a8      	cmp	r0, r5
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x28a>
 8000448:	eb1c 0505 	adds.w	r5, ip, r5
 800044c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000450:	d216      	bcs.n	8000480 <__udivmoddi4+0x2b0>
 8000452:	42a8      	cmp	r0, r5
 8000454:	d914      	bls.n	8000480 <__udivmoddi4+0x2b0>
 8000456:	3b02      	subs	r3, #2
 8000458:	4465      	add	r5, ip
 800045a:	1a28      	subs	r0, r5, r0
 800045c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000460:	e738      	b.n	80002d4 <__udivmoddi4+0x104>
 8000462:	4631      	mov	r1, r6
 8000464:	4630      	mov	r0, r6
 8000466:	e707      	b.n	8000278 <__udivmoddi4+0xa8>
 8000468:	462f      	mov	r7, r5
 800046a:	e6e4      	b.n	8000236 <__udivmoddi4+0x66>
 800046c:	4618      	mov	r0, r3
 800046e:	e6f9      	b.n	8000264 <__udivmoddi4+0x94>
 8000470:	454b      	cmp	r3, r9
 8000472:	d2a9      	bcs.n	80003c8 <__udivmoddi4+0x1f8>
 8000474:	ebb9 0802 	subs.w	r8, r9, r2
 8000478:	eb65 0e0c 	sbc.w	lr, r5, ip
 800047c:	3801      	subs	r0, #1
 800047e:	e7a3      	b.n	80003c8 <__udivmoddi4+0x1f8>
 8000480:	4643      	mov	r3, r8
 8000482:	e7ea      	b.n	800045a <__udivmoddi4+0x28a>
 8000484:	4628      	mov	r0, r5
 8000486:	e794      	b.n	80003b2 <__udivmoddi4+0x1e2>
 8000488:	4641      	mov	r1, r8
 800048a:	e7d1      	b.n	8000430 <__udivmoddi4+0x260>
 800048c:	46d0      	mov	r8, sl
 800048e:	e77b      	b.n	8000388 <__udivmoddi4+0x1b8>
 8000490:	4464      	add	r4, ip
 8000492:	3802      	subs	r0, #2
 8000494:	e747      	b.n	8000326 <__udivmoddi4+0x156>
 8000496:	3b02      	subs	r3, #2
 8000498:	4465      	add	r5, ip
 800049a:	e72f      	b.n	80002fc <__udivmoddi4+0x12c>
 800049c:	4608      	mov	r0, r1
 800049e:	e706      	b.n	80002ae <__udivmoddi4+0xde>
 80004a0:	4631      	mov	r1, r6
 80004a2:	e6e9      	b.n	8000278 <__udivmoddi4+0xa8>

080004a4 <__aeabi_idiv0>:
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop

080004a8 <UARTDMA_UartIrqHandler>:
#include "string.h"
#include "scheduler.h"


void UARTDMA_UartIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
	if(huartdma->huart->Instance->SR & UART_FLAG_IDLE)       // Check if Idle flag is set
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	f003 0310 	and.w	r3, r3, #16
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d01a      	beq.n	80004f6 <UARTDMA_UartIrqHandler+0x4e>
	{

		volatile uint32_t tmp;
		tmp = huartdma->huart->Instance->SR;                      // Read status register
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	60fb      	str	r3, [r7, #12]
		tmp = huartdma->huart->Instance->DR;                      // Read data register
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	685b      	ldr	r3, [r3, #4]
 80004d2:	60fb      	str	r3, [r7, #12]
		huartdma->huart->hdmarx->Instance->CCR &= ~DMA_CCR_EN; 	  // Disable DMA - it will force Transfer Complete interrupt if it's enabled
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	f022 0201 	bic.w	r2, r2, #1
 80004ea:	601a      	str	r2, [r3, #0]
																  // BUT! It's only for DMA Streams(i.e F4), not for Channels like there in F103!
		tmp = tmp; // For unused warning
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	60fb      	str	r3, [r7, #12]
		UARTDMA_DmaIrqHandler(huartdma); // Since DMA IRQ won't start independently for Channels, we have to handle it manually
 80004f0:	6878      	ldr	r0, [r7, #4]
 80004f2:	f000 f804 	bl	80004fe <UARTDMA_DmaIrqHandler>
	}
}
 80004f6:	bf00      	nop
 80004f8:	3710      	adds	r7, #16
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <UARTDMA_DmaIrqHandler>:

void UARTDMA_DmaIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 80004fe:	b480      	push	{r7}
 8000500:	b089      	sub	sp, #36	; 0x24
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
	{
		__IO uint32_t ISR;   // DMA interrupt status register
		__IO uint32_t IFCR;  // DMA interrupt flag clear register
	} DMA_Base_Registers;

	DMA_Base_Registers *DmaRegisters = (DMA_Base_Registers *) huartdma->huart->hdmarx->DmaBaseAddress; // Take registers base address
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800050c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800050e:	61bb      	str	r3, [r7, #24]

	if (__HAL_DMA_GET_IT_SOURCE(huartdma->huart->hdmarx, DMA_IT_TC) != RESET) // Check if interrupt source is Transfer Complete
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f003 0302 	and.w	r3, r3, #2
 800051e:	2b00      	cmp	r3, #0
 8000520:	d075      	beq.n	800060e <UARTDMA_DmaIrqHandler+0x110>
	{
		DmaRegisters->IFCR = DMA_IFCR_CTCIF1 << huartdma->huart->hdmarx->ChannelIndex;	// Clear Transfer Complete flag
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052a:	2202      	movs	r2, #2
 800052c:	409a      	lsls	r2, r3
 800052e:	69bb      	ldr	r3, [r7, #24]
 8000530:	605a      	str	r2, [r3, #4]

		Length = DMA_RX_BUFFER_SIZE - huartdma->huart->hdmarx->Instance->CNDTR; // Get the Length of transfered data
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8000540:	617b      	str	r3, [r7, #20]

		UartBufferPointer = huartdma->UART_Buffer;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8000548:	613b      	str	r3, [r7, #16]
		DmaBufferPointer = 	huartdma->DMA_RX_Buffer;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	3304      	adds	r3, #4
 800054e:	60fb      	str	r3, [r7, #12]

		// Write received data for UART main buffer - circular buffer
		for(i = 0; i < Length; i++)
 8000550:	2300      	movs	r3, #0
 8000552:	83fb      	strh	r3, [r7, #30]
 8000554:	e035      	b.n	80005c2 <UARTDMA_DmaIrqHandler+0xc4>
		{
			TempHead = (huartdma->UartBufferHead + 1) % UART_BUFFER_SIZE;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	f8b3 3c04 	ldrh.w	r3, [r3, #3076]	; 0xc04
 800055c:	3301      	adds	r3, #1
 800055e:	425a      	negs	r2, r3
 8000560:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000564:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000568:	bf58      	it	pl
 800056a:	4253      	negpl	r3, r2
 800056c:	817b      	strh	r3, [r7, #10]
			if(TempHead == huartdma->UartBufferTail)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 8000574:	897a      	ldrh	r2, [r7, #10]
 8000576:	429a      	cmp	r2, r3
 8000578:	d106      	bne.n	8000588 <UARTDMA_DmaIrqHandler+0x8a>
			{
				huartdma->UartBufferHead = huartdma->UartBufferTail;	// No room for new data
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	f8b3 2c06 	ldrh.w	r2, [r3, #3078]	; 0xc06
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	f8a3 2c04 	strh.w	r2, [r3, #3076]	; 0xc04
 8000586:	e019      	b.n	80005bc <UARTDMA_DmaIrqHandler+0xbe>
			}
			else
			{
				UartBufferPointer[TempHead] = DmaBufferPointer[i];
 8000588:	8bfb      	ldrh	r3, [r7, #30]
 800058a:	68fa      	ldr	r2, [r7, #12]
 800058c:	441a      	add	r2, r3
 800058e:	897b      	ldrh	r3, [r7, #10]
 8000590:	6939      	ldr	r1, [r7, #16]
 8000592:	440b      	add	r3, r1
 8000594:	7812      	ldrb	r2, [r2, #0]
 8000596:	701a      	strb	r2, [r3, #0]
				if(UartBufferPointer[TempHead] == '\n')
 8000598:	897b      	ldrh	r3, [r7, #10]
 800059a:	693a      	ldr	r2, [r7, #16]
 800059c:	4413      	add	r3, r2
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b0a      	cmp	r3, #10
 80005a2:	d107      	bne.n	80005b4 <UARTDMA_DmaIrqHandler+0xb6>
				{
					huartdma->UartBufferLines++;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f893 3c08 	ldrb.w	r3, [r3, #3080]	; 0xc08
 80005aa:	3301      	adds	r3, #1
 80005ac:	b2da      	uxtb	r2, r3
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	f883 2c08 	strb.w	r2, [r3, #3080]	; 0xc08
				}
				huartdma->UartBufferHead = TempHead;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	897a      	ldrh	r2, [r7, #10]
 80005b8:	f8a3 2c04 	strh.w	r2, [r3, #3076]	; 0xc04
		for(i = 0; i < Length; i++)
 80005bc:	8bfb      	ldrh	r3, [r7, #30]
 80005be:	3301      	adds	r3, #1
 80005c0:	83fb      	strh	r3, [r7, #30]
 80005c2:	8bfb      	ldrh	r3, [r7, #30]
 80005c4:	697a      	ldr	r2, [r7, #20]
 80005c6:	429a      	cmp	r2, r3
 80005c8:	d8c5      	bhi.n	8000556 <UARTDMA_DmaIrqHandler+0x58>
			}
		}


		DmaRegisters->IFCR = 0x0FU << huartdma->huart->hdmarx->ChannelIndex; 		// Clear all interrupts
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d2:	220f      	movs	r2, #15
 80005d4:	409a      	lsls	r2, r3
 80005d6:	69bb      	ldr	r3, [r7, #24]
 80005d8:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CMAR = (uint32_t) huartdma->DMA_RX_Buffer; // Set memory address for DMA again
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	1d1a      	adds	r2, r3, #4
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	60da      	str	r2, [r3, #12]
		huartdma->huart->hdmarx->Instance->CNDTR = DMA_RX_BUFFER_SIZE; // Set number of bytes to receive
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005f4:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CCR |= DMA_CCR_EN;            	// Start DMA transfer
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f042 0201 	orr.w	r2, r2, #1
 800060c:	601a      	str	r2, [r3, #0]
	}
}
 800060e:	bf00      	nop
 8000610:	3724      	adds	r7, #36	; 0x24
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr

08000618 <UARTDMA_GetCharFromBuffer>:

int UARTDMA_GetCharFromBuffer(UARTDMA_HandleTypeDef *huartdma)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	if(huartdma->UartBufferHead == huartdma->UartBufferTail)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f8b3 2c04 	ldrh.w	r2, [r3, #3076]	; 0xc04
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 800062c:	429a      	cmp	r2, r3
 800062e:	d102      	bne.n	8000636 <UARTDMA_GetCharFromBuffer+0x1e>
	{
		return -1; // error - no char to return
 8000630:	f04f 33ff 	mov.w	r3, #4294967295
 8000634:	e016      	b.n	8000664 <UARTDMA_GetCharFromBuffer+0x4c>
	}
	huartdma->UartBufferTail = (huartdma->UartBufferTail + 1) % UART_BUFFER_SIZE;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 800063c:	3301      	adds	r3, #1
 800063e:	425a      	negs	r2, r3
 8000640:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000644:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000648:	bf58      	it	pl
 800064a:	4253      	negpl	r3, r2
 800064c:	b29a      	uxth	r2, r3
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	f8a3 2c06 	strh.w	r2, [r3, #3078]	; 0xc06

	return huartdma->UART_Buffer[huartdma->UartBufferTail];
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 800065a:	461a      	mov	r2, r3
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	4413      	add	r3, r2
 8000660:	f893 3404 	ldrb.w	r3, [r3, #1028]	; 0x404
}
 8000664:	4618      	mov	r0, r3
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	bc80      	pop	{r7}
 800066c:	4770      	bx	lr

0800066e <UARTDMA_IsDataReady>:

uint8_t UARTDMA_IsDataReady(UARTDMA_HandleTypeDef *huartdma)
{
 800066e:	b480      	push	{r7}
 8000670:	b083      	sub	sp, #12
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
	if(huartdma->UartBufferLines)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f893 3c08 	ldrb.w	r3, [r3, #3080]	; 0xc08
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <UARTDMA_IsDataReady+0x16>
		return 1;
 8000680:	2301      	movs	r3, #1
 8000682:	e000      	b.n	8000686 <UARTDMA_IsDataReady+0x18>
	else
		return 0;
 8000684:	2300      	movs	r3, #0
}
 8000686:	4618      	mov	r0, r3
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr

08000690 <UARTDMA_GetLineFromBuffer>:

int UARTDMA_GetLineFromBuffer(UARTDMA_HandleTypeDef *huartdma, char *OutBuffer)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	6039      	str	r1, [r7, #0]
	char TempChar;
	char* LinePointer = OutBuffer;
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	60fb      	str	r3, [r7, #12]
	if(huartdma->UartBufferLines)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	f893 3c08 	ldrb.w	r3, [r3, #3080]	; 0xc08
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d024      	beq.n	80006f2 <UARTDMA_GetLineFromBuffer+0x62>
	{
		while((TempChar = UARTDMA_GetCharFromBuffer(huartdma)))
 80006a8:	e00e      	b.n	80006c8 <UARTDMA_GetLineFromBuffer+0x38>
		{
			if(TempChar == '\n')
 80006aa:	7afb      	ldrb	r3, [r7, #11]
 80006ac:	2b0a      	cmp	r3, #10
 80006ae:	d014      	beq.n	80006da <UARTDMA_GetLineFromBuffer+0x4a>
			{
				break;
			}
			if((TempChar != '\n') && (TempChar != '\r')){
 80006b0:	7afb      	ldrb	r3, [r7, #11]
 80006b2:	2b0a      	cmp	r3, #10
 80006b4:	d008      	beq.n	80006c8 <UARTDMA_GetLineFromBuffer+0x38>
 80006b6:	7afb      	ldrb	r3, [r7, #11]
 80006b8:	2b0d      	cmp	r3, #13
 80006ba:	d005      	beq.n	80006c8 <UARTDMA_GetLineFromBuffer+0x38>
				*LinePointer = TempChar;
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	7afa      	ldrb	r2, [r7, #11]
 80006c0:	701a      	strb	r2, [r3, #0]
				LinePointer++;
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	3301      	adds	r3, #1
 80006c6:	60fb      	str	r3, [r7, #12]
		while((TempChar = UARTDMA_GetCharFromBuffer(huartdma)))
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f7ff ffa5 	bl	8000618 <UARTDMA_GetCharFromBuffer>
 80006ce:	4603      	mov	r3, r0
 80006d0:	72fb      	strb	r3, [r7, #11]
 80006d2:	7afb      	ldrb	r3, [r7, #11]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d1e8      	bne.n	80006aa <UARTDMA_GetLineFromBuffer+0x1a>
 80006d8:	e000      	b.n	80006dc <UARTDMA_GetLineFromBuffer+0x4c>
				break;
 80006da:	bf00      	nop
			}
		}
		*LinePointer = 0; // end of cstring
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]
		huartdma->UartBufferLines--; // decrement line counter
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	f893 3c08 	ldrb.w	r3, [r3, #3080]	; 0xc08
 80006e8:	3b01      	subs	r3, #1
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	f883 2c08 	strb.w	r2, [r3, #3080]	; 0xc08
	}
	return 0;
 80006f2:	2300      	movs	r3, #0
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3710      	adds	r7, #16
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <UARTDMA_Init>:

void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	6039      	str	r1, [r7, #0]
	huartdma->huart = huart;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	683a      	ldr	r2, [r7, #0]
 800070a:	601a      	str	r2, [r3, #0]

	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	68da      	ldr	r2, [r3, #12]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f042 0210 	orr.w	r2, r2, #16
 800071e:	60da      	str	r2, [r3, #12]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f042 0202 	orr.w	r2, r2, #2
 8000736:	601a      	str	r2, [r3, #0]

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	6818      	ldr	r0, [r3, #0]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3304      	adds	r3, #4
 8000740:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000744:	4619      	mov	r1, r3
 8000746:	f002 fae0 	bl	8002d0a <HAL_UART_Receive_DMA>

	huartdma->huart->hdmarx->Instance->CCR &= ~DMA_CCR_HTIE; // Disable DMA Half Complete interrupt
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f022 0204 	bic.w	r2, r2, #4
 8000760:	601a      	str	r2, [r3, #0]
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
	...

0800076c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000774:	1d39      	adds	r1, r7, #4
 8000776:	f04f 33ff 	mov.w	r3, #4294967295
 800077a:	2201      	movs	r2, #1
 800077c:	4803      	ldr	r0, [pc, #12]	; (800078c <__io_putchar+0x20>)
 800077e:	f002 fa41 	bl	8002c04 <HAL_UART_Transmit>
	return ch;
 8000782:	687b      	ldr	r3, [r7, #4]
}
 8000784:	4618      	mov	r0, r3
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000ce0 	.word	0x20000ce0

08000790 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000790:	b5b0      	push	{r4, r5, r7, lr}
 8000792:	f5ad 5dc7 	sub.w	sp, sp, #6368	; 0x18e0
 8000796:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000798:	f000 ffa3 	bl	80016e2 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800079c:	f000 fb18 	bl	8000dd0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80007a0:	f000 fc2a 	bl	8000ff8 <MX_GPIO_Init>
	MX_DMA_Init();
 80007a4:	f000 fc0a 	bl	8000fbc <MX_DMA_Init>
	MX_USART2_UART_Init();
 80007a8:	f000 fbb4 	bl	8000f14 <MX_USART2_UART_Init>
	MX_UART4_Init();
 80007ac:	f000 fb5e 	bl	8000e6c <MX_UART4_Init>
	MX_USART1_UART_Init();
 80007b0:	f000 fb86 	bl	8000ec0 <MX_USART1_UART_Init>
	MX_USART3_UART_Init();
 80007b4:	f000 fbd8 	bl	8000f68 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	UARTDMA_Init(&huartdma6, &huart2);
 80007b8:	49a7      	ldr	r1, [pc, #668]	; (8000a58 <main+0x2c8>)
 80007ba:	48a8      	ldr	r0, [pc, #672]	; (8000a5c <main+0x2cc>)
 80007bc:	f7ff ff9e 	bl	80006fc <UARTDMA_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */


	command LTE_sim_check_active = {
 80007c0:	4ba7      	ldr	r3, [pc, #668]	; (8000a60 <main+0x2d0>)
 80007c2:	f507 54c5 	add.w	r4, r7, #6304	; 0x18a0
 80007c6:	f104 0408 	add.w	r4, r4, #8
 80007ca:	461d      	mov	r5, r3
 80007cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007d0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80007d4:	e884 0003 	stmia.w	r4, {r0, r1}
			.act_on_error = RETRY,
			.retry_counter = 3
	};


	command LTE_deactivate_gprs = {
 80007d8:	4ba2      	ldr	r3, [pc, #648]	; (8000a64 <main+0x2d4>)
 80007da:	f507 54c4 	add.w	r4, r7, #6272	; 0x1880
 80007de:	f104 0410 	add.w	r4, r4, #16
 80007e2:	461d      	mov	r5, r3
 80007e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007e8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80007ec:	e884 0003 	stmia.w	r4, {r0, r1}
			.act_on_error = RETRY,
			.retry_counter = 3
	};


	command LTE_attach_gprs = {
 80007f0:	4b9d      	ldr	r3, [pc, #628]	; (8000a68 <main+0x2d8>)
 80007f2:	f507 54c3 	add.w	r4, r7, #6240	; 0x1860
 80007f6:	f104 0418 	add.w	r4, r4, #24
 80007fa:	461d      	mov	r5, r3
 80007fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000800:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000804:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = RETRY,
			.retry_counter = 3
	};

	command LTE_set_apn = {
 8000808:	4b98      	ldr	r3, [pc, #608]	; (8000a6c <main+0x2dc>)
 800080a:	f507 54c3 	add.w	r4, r7, #6240	; 0x1860
 800080e:	461d      	mov	r5, r3
 8000810:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000812:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000814:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000818:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = RETRY,
			.retry_counter = 3
	};

	command LTE_gprs_up = {
 800081c:	4b94      	ldr	r3, [pc, #592]	; (8000a70 <main+0x2e0>)
 800081e:	f507 54c2 	add.w	r4, r7, #6208	; 0x1840
 8000822:	f104 0408 	add.w	r4, r4, #8
 8000826:	461d      	mov	r5, r3
 8000828:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800082a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800082c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000830:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = RETRY,
			.retry_counter = 3
	};

	command LTE_get_ip = {
 8000834:	4b8f      	ldr	r3, [pc, #572]	; (8000a74 <main+0x2e4>)
 8000836:	f507 54c1 	add.w	r4, r7, #6176	; 0x1820
 800083a:	f104 0410 	add.w	r4, r4, #16
 800083e:	461d      	mov	r5, r3
 8000840:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000842:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000844:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000848:	e884 0003 	stmia.w	r4, {r0, r1}
			.act_on_error = RETRY,
			.retry_counter = 3
	};


	command LTE_init_gps = {
 800084c:	4b8a      	ldr	r3, [pc, #552]	; (8000a78 <main+0x2e8>)
 800084e:	f507 54c0 	add.w	r4, r7, #6144	; 0x1800
 8000852:	f104 0418 	add.w	r4, r4, #24
 8000856:	461d      	mov	r5, r3
 8000858:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800085a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800085c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000860:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = RETRY,
			.retry_counter = 3
	};

	command LTE_get_position = {
 8000864:	4b85      	ldr	r3, [pc, #532]	; (8000a7c <main+0x2ec>)
 8000866:	f507 54c0 	add.w	r4, r7, #6144	; 0x1800
 800086a:	461d      	mov	r5, r3
 800086c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800086e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000870:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000874:	e884 0003 	stmia.w	r4, {r0, r1}
			.bad_answer = "ERROR",
			.act_on_error = MOVE_ON,
			.retry_counter = 0
	};

	command LTE_reset_action = {
 8000878:	f507 53bf 	add.w	r3, r7, #6112	; 0x17e0
 800087c:	f103 0308 	add.w	r3, r3, #8
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
 800088c:	615a      	str	r2, [r3, #20]
 800088e:	4b7c      	ldr	r3, [pc, #496]	; (8000a80 <main+0x2f0>)
 8000890:	f507 52bf 	add.w	r2, r7, #6112	; 0x17e0
 8000894:	f102 0208 	add.w	r2, r2, #8
 8000898:	6013      	str	r3, [r2, #0]
			.cmd = "RESET_ACTION"
	};

	uint8_t last_action = 11;
 800089a:	230b      	movs	r3, #11
 800089c:	f507 52c6 	add.w	r2, r7, #6336	; 0x18c0
 80008a0:	f102 0203 	add.w	r2, r2, #3
 80008a4:	7013      	strb	r3, [r2, #0]
	uint8_t current_action = 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	f507 52c6 	add.w	r2, r7, #6336	; 0x18c0
 80008ac:	f102 020f 	add.w	r2, r2, #15
 80008b0:	7013      	strb	r3, [r2, #0]

	command action_list[255];


	action_list[0] = LTE_sim_check_active;
 80008b2:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 80008b6:	f5a3 630d 	sub.w	r3, r3, #2256	; 0x8d0
 80008ba:	461d      	mov	r5, r3
 80008bc:	f507 54c5 	add.w	r4, r7, #6304	; 0x18a0
 80008c0:	f104 0408 	add.w	r4, r4, #8
 80008c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80008cc:	e885 0003 	stmia.w	r5, {r0, r1}
	action_list[1] = LTE_deactivate_gprs;
 80008d0:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 80008d4:	f5a3 630d 	sub.w	r3, r3, #2256	; 0x8d0
 80008d8:	f103 0418 	add.w	r4, r3, #24
 80008dc:	f507 55c4 	add.w	r5, r7, #6272	; 0x1880
 80008e0:	f105 0510 	add.w	r5, r5, #16
 80008e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008e8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80008ec:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[2] = LTE_attach_gprs;
 80008f0:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 80008f4:	f5a3 630d 	sub.w	r3, r3, #2256	; 0x8d0
 80008f8:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80008fc:	f507 55c3 	add.w	r5, r7, #6240	; 0x1860
 8000900:	f105 0518 	add.w	r5, r5, #24
 8000904:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000906:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000908:	e895 0003 	ldmia.w	r5, {r0, r1}
 800090c:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[3] = LTE_set_apn;
 8000910:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8000914:	f5a3 630d 	sub.w	r3, r3, #2256	; 0x8d0
 8000918:	f103 0448 	add.w	r4, r3, #72	; 0x48
 800091c:	f507 55c3 	add.w	r5, r7, #6240	; 0x1860
 8000920:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000922:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000924:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000928:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[4] = LTE_gprs_up;
 800092c:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8000930:	f5a3 630d 	sub.w	r3, r3, #2256	; 0x8d0
 8000934:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8000938:	f507 55c2 	add.w	r5, r7, #6208	; 0x1840
 800093c:	f105 0508 	add.w	r5, r5, #8
 8000940:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000942:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000944:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000948:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[5] = LTE_get_ip;
 800094c:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8000950:	f5a3 630d 	sub.w	r3, r3, #2256	; 0x8d0
 8000954:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8000958:	f507 55c1 	add.w	r5, r7, #6176	; 0x1820
 800095c:	f105 0510 	add.w	r5, r5, #16
 8000960:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000962:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000964:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000968:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[6] = LTE_init_gps;
 800096c:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8000970:	f5a3 630d 	sub.w	r3, r3, #2256	; 0x8d0
 8000974:	f103 0490 	add.w	r4, r3, #144	; 0x90
 8000978:	f507 55c0 	add.w	r5, r7, #6144	; 0x1800
 800097c:	f105 0518 	add.w	r5, r5, #24
 8000980:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000984:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000988:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[7] = LTE_reset_action;
 800098c:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8000990:	f5a3 630d 	sub.w	r3, r3, #2256	; 0x8d0
 8000994:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8000998:	f507 55bf 	add.w	r5, r7, #6112	; 0x17e0
 800099c:	f105 0508 	add.w	r5, r5, #8
 80009a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009a4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80009a8:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[8] = LTE_get_position;
 80009ac:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 80009b0:	f5a3 630d 	sub.w	r3, r3, #2256	; 0x8d0
 80009b4:	f103 04c0 	add.w	r4, r3, #192	; 0xc0
 80009b8:	f507 55c0 	add.w	r5, r7, #6144	; 0x1800
 80009bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009c0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80009c4:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[9] = LTE_get_position;
 80009c8:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 80009cc:	f5a3 630d 	sub.w	r3, r3, #2256	; 0x8d0
 80009d0:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 80009d4:	f507 55c0 	add.w	r5, r7, #6144	; 0x1800
 80009d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009dc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80009e0:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[10] = LTE_get_position;
 80009e4:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 80009e8:	f5a3 630d 	sub.w	r3, r3, #2256	; 0x8d0
 80009ec:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 80009f0:	f507 55c0 	add.w	r5, r7, #6144	; 0x1800
 80009f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009f8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80009fc:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[11] = LTE_get_position;
 8000a00:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8000a04:	f5a3 630d 	sub.w	r3, r3, #2256	; 0x8d0
 8000a08:	f503 7484 	add.w	r4, r3, #264	; 0x108
 8000a0c:	f507 55c0 	add.w	r5, r7, #6144	; 0x1800
 8000a10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a14:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a18:	e884 0003 	stmia.w	r4, {r0, r1}
	action_list[12] = LTE_reset_action;
 8000a1c:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8000a20:	f5a3 630d 	sub.w	r3, r3, #2256	; 0x8d0
 8000a24:	f503 7490 	add.w	r4, r3, #288	; 0x120
 8000a28:	f507 55bf 	add.w	r5, r7, #6112	; 0x17e0
 8000a2c:	f105 0508 	add.w	r5, r5, #8
 8000a30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a34:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a38:	e884 0003 	stmia.w	r4, {r0, r1}



	uint8_t startup = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	f507 52c6 	add.w	r2, r7, #6336	; 0x18c0
 8000a42:	f102 020e 	add.w	r2, r2, #14
 8000a46:	7013      	strb	r3, [r2, #0]

	for(int i = 0; i< BUFFER_SIZE; i++){
 8000a48:	2300      	movs	r3, #0
 8000a4a:	f507 52c6 	add.w	r2, r7, #6336	; 0x18c0
 8000a4e:	f102 0208 	add.w	r2, r2, #8
 8000a52:	6013      	str	r3, [r2, #0]
 8000a54:	e02a      	b.n	8000aac <main+0x31c>
 8000a56:	bf00      	nop
 8000a58:	20000d28 	.word	0x20000d28
 8000a5c:	2000008c 	.word	0x2000008c
 8000a60:	08004600 	.word	0x08004600
 8000a64:	08004618 	.word	0x08004618
 8000a68:	08004630 	.word	0x08004630
 8000a6c:	08004648 	.word	0x08004648
 8000a70:	08004660 	.word	0x08004660
 8000a74:	08004678 	.word	0x08004678
 8000a78:	08004690 	.word	0x08004690
 8000a7c:	080046a8 	.word	0x080046a8
 8000a80:	08004598 	.word	0x08004598
		ParseBuffer[i] ='\0';
 8000a84:	4ac9      	ldr	r2, [pc, #804]	; (8000dac <main+0x61c>)
 8000a86:	f507 53c6 	add.w	r3, r7, #6336	; 0x18c0
 8000a8a:	f103 0308 	add.w	r3, r3, #8
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4413      	add	r3, r2
 8000a92:	2200      	movs	r2, #0
 8000a94:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i< BUFFER_SIZE; i++){
 8000a96:	f507 53c6 	add.w	r3, r7, #6336	; 0x18c0
 8000a9a:	f103 0308 	add.w	r3, r3, #8
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	f507 52c6 	add.w	r2, r7, #6336	; 0x18c0
 8000aa6:	f102 0208 	add.w	r2, r2, #8
 8000aaa:	6013      	str	r3, [r2, #0]
 8000aac:	f507 53c6 	add.w	r3, r7, #6336	; 0x18c0
 8000ab0:	f103 0308 	add.w	r3, r3, #8
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000aba:	dbe3      	blt.n	8000a84 <main+0x2f4>
		//	  while(current_action == last_action){
		//		  printf("Code completed, forever loop\n");
		//	  }


		if(current_action >= last_action){
 8000abc:	f507 53c6 	add.w	r3, r7, #6336	; 0x18c0
 8000ac0:	f103 030f 	add.w	r3, r3, #15
 8000ac4:	781a      	ldrb	r2, [r3, #0]
 8000ac6:	f507 53c6 	add.w	r3, r7, #6336	; 0x18c0
 8000aca:	f103 0303 	add.w	r3, r3, #3
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d309      	bcc.n	8000ae8 <main+0x358>
			current_action = last_action;
 8000ad4:	f507 53c6 	add.w	r3, r7, #6336	; 0x18c0
 8000ad8:	f103 0303 	add.w	r3, r3, #3
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	f507 52c6 	add.w	r2, r7, #6336	; 0x18c0
 8000ae2:	f102 020f 	add.w	r2, r2, #15
 8000ae6:	7013      	strb	r3, [r2, #0]
		}


		enum State state = Do_Action(action_list[current_action], (uint8_t*)ParseBuffer);
 8000ae8:	f507 53c6 	add.w	r3, r7, #6336	; 0x18c0
 8000aec:	f103 030f 	add.w	r3, r3, #15
 8000af0:	781a      	ldrb	r2, [r3, #0]
 8000af2:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8000af6:	f5a3 610d 	sub.w	r1, r3, #2256	; 0x8d0
 8000afa:	4613      	mov	r3, r2
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	4413      	add	r3, r2
 8000b00:	00db      	lsls	r3, r3, #3
 8000b02:	440b      	add	r3, r1
 8000b04:	4aa9      	ldr	r2, [pc, #676]	; (8000dac <main+0x61c>)
 8000b06:	9202      	str	r2, [sp, #8]
 8000b08:	466c      	mov	r4, sp
 8000b0a:	f103 0210 	add.w	r2, r3, #16
 8000b0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b12:	e884 0003 	stmia.w	r4, {r0, r1}
 8000b16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b18:	f000 faf6 	bl	8001108 <Do_Action>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	f507 52c6 	add.w	r2, r7, #6336	; 0x18c0
 8000b22:	f102 0202 	add.w	r2, r2, #2
 8000b26:	7013      	strb	r3, [r2, #0]

		switch (state){
 8000b28:	f507 53c6 	add.w	r3, r7, #6336	; 0x18c0
 8000b2c:	f103 0302 	add.w	r3, r3, #2
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b04      	cmp	r3, #4
 8000b34:	f200 8105 	bhi.w	8000d42 <main+0x5b2>
 8000b38:	a201      	add	r2, pc, #4	; (adr r2, 8000b40 <main+0x3b0>)
 8000b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b3e:	bf00      	nop
 8000b40:	08000bf5 	.word	0x08000bf5
 8000b44:	08000d43 	.word	0x08000d43
 8000b48:	08000b55 	.word	0x08000b55
 8000b4c:	08000cc1 	.word	0x08000cc1
 8000b50:	08000c0d 	.word	0x08000c0d
		case GOOD_ANSWER:
			printf("%s - %s\r\n", action_list[current_action].cmd, action_list[current_action].good_answer);
 8000b54:	f507 53c6 	add.w	r3, r7, #6336	; 0x18c0
 8000b58:	f103 030f 	add.w	r3, r3, #15
 8000b5c:	781a      	ldrb	r2, [r3, #0]
 8000b5e:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8000b62:	f5a3 610d 	sub.w	r1, r3, #2256	; 0x8d0
 8000b66:	4613      	mov	r3, r2
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	4413      	add	r3, r2
 8000b6c:	00db      	lsls	r3, r3, #3
 8000b6e:	440b      	add	r3, r1
 8000b70:	6818      	ldr	r0, [r3, #0]
 8000b72:	f507 53c6 	add.w	r3, r7, #6336	; 0x18c0
 8000b76:	f103 030f 	add.w	r3, r3, #15
 8000b7a:	781a      	ldrb	r2, [r3, #0]
 8000b7c:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8000b80:	f5a3 610d 	sub.w	r1, r3, #2256	; 0x8d0
 8000b84:	4613      	mov	r3, r2
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	4413      	add	r3, r2
 8000b8a:	00db      	lsls	r3, r3, #3
 8000b8c:	440b      	add	r3, r1
 8000b8e:	3304      	adds	r3, #4
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	461a      	mov	r2, r3
 8000b94:	4601      	mov	r1, r0
 8000b96:	4886      	ldr	r0, [pc, #536]	; (8000db0 <main+0x620>)
 8000b98:	f002 fca8 	bl	80034ec <iprintf>
			printf("\tREPLY: >>%s<<\r\n", (char*)ParseBuffer);
 8000b9c:	4983      	ldr	r1, [pc, #524]	; (8000dac <main+0x61c>)
 8000b9e:	4885      	ldr	r0, [pc, #532]	; (8000db4 <main+0x624>)
 8000ba0:	f002 fca4 	bl	80034ec <iprintf>
			Do_Action(LTE_reset_action, (uint8_t*)ParseBuffer);
 8000ba4:	4b81      	ldr	r3, [pc, #516]	; (8000dac <main+0x61c>)
 8000ba6:	9302      	str	r3, [sp, #8]
 8000ba8:	466a      	mov	r2, sp
 8000baa:	f507 53bf 	add.w	r3, r7, #6112	; 0x17e0
 8000bae:	f103 0318 	add.w	r3, r3, #24
 8000bb2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000bb6:	e882 0003 	stmia.w	r2, {r0, r1}
 8000bba:	f507 53bf 	add.w	r3, r7, #6112	; 0x17e0
 8000bbe:	f103 0308 	add.w	r3, r3, #8
 8000bc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bc4:	f000 faa0 	bl	8001108 <Do_Action>
			current_action++;
 8000bc8:	f507 53c6 	add.w	r3, r7, #6336	; 0x18c0
 8000bcc:	f103 030f 	add.w	r3, r3, #15
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	f507 52c6 	add.w	r2, r7, #6336	; 0x18c0
 8000bd8:	f102 020f 	add.w	r2, r2, #15
 8000bdc:	7013      	strb	r3, [r2, #0]
			HAL_Delay(1000);
 8000bde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000be2:	f000 fded 	bl	80017c0 <HAL_Delay>
			startup = 5;
 8000be6:	2305      	movs	r3, #5
 8000be8:	f507 52c6 	add.w	r2, r7, #6336	; 0x18c0
 8000bec:	f102 020e 	add.w	r2, r2, #14
 8000bf0:	7013      	strb	r3, [r2, #0]
			break;
 8000bf2:	e0a7      	b.n	8000d44 <main+0x5b4>
		case READY:
			//printf("%s - READY\r\n", action_list[current_action].cmd);
			//printf("BUFFER: >>%s<<\r\n", (char*)ParseBuffer);
			current_action++;
 8000bf4:	f507 53c6 	add.w	r3, r7, #6336	; 0x18c0
 8000bf8:	f103 030f 	add.w	r3, r3, #15
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	f507 52c6 	add.w	r2, r7, #6336	; 0x18c0
 8000c04:	f102 020f 	add.w	r2, r2, #15
 8000c08:	7013      	strb	r3, [r2, #0]
			break;
 8000c0a:	e09b      	b.n	8000d44 <main+0x5b4>
		case TIMEOUT:
			printf("%s - Timeout\r\n", action_list[current_action].cmd);
 8000c0c:	f507 53c6 	add.w	r3, r7, #6336	; 0x18c0
 8000c10:	f103 030f 	add.w	r3, r3, #15
 8000c14:	781a      	ldrb	r2, [r3, #0]
 8000c16:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8000c1a:	f5a3 610d 	sub.w	r1, r3, #2256	; 0x8d0
 8000c1e:	4613      	mov	r3, r2
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	4413      	add	r3, r2
 8000c24:	00db      	lsls	r3, r3, #3
 8000c26:	440b      	add	r3, r1
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4862      	ldr	r0, [pc, #392]	; (8000db8 <main+0x628>)
 8000c2e:	f002 fc5d 	bl	80034ec <iprintf>
			if(startup < 2){
 8000c32:	f507 53c6 	add.w	r3, r7, #6336	; 0x18c0
 8000c36:	f103 030e 	add.w	r3, r3, #14
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d822      	bhi.n	8000c86 <main+0x4f6>
				printf("INIT\r\n");
 8000c40:	485e      	ldr	r0, [pc, #376]	; (8000dbc <main+0x62c>)
 8000c42:	f002 fcd9 	bl	80035f8 <puts>
				printf("TURN ON\r\n");
 8000c46:	485e      	ldr	r0, [pc, #376]	; (8000dc0 <main+0x630>)
 8000c48:	f002 fcd6 	bl	80035f8 <puts>
				HAL_GPIO_WritePin(GPIOA,  GPIO_PIN_6, GPIO_PIN_SET);
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	2140      	movs	r1, #64	; 0x40
 8000c50:	485c      	ldr	r0, [pc, #368]	; (8000dc4 <main+0x634>)
 8000c52:	f001 f979 	bl	8001f48 <HAL_GPIO_WritePin>
				HAL_Delay(1500);
 8000c56:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000c5a:	f000 fdb1 	bl	80017c0 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOA,  GPIO_PIN_6, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2140      	movs	r1, #64	; 0x40
 8000c62:	4858      	ldr	r0, [pc, #352]	; (8000dc4 <main+0x634>)
 8000c64:	f001 f970 	bl	8001f48 <HAL_GPIO_WritePin>
				HAL_Delay(5000);
 8000c68:	f241 3088 	movw	r0, #5000	; 0x1388
 8000c6c:	f000 fda8 	bl	80017c0 <HAL_Delay>
				startup++;
 8000c70:	f507 53c6 	add.w	r3, r7, #6336	; 0x18c0
 8000c74:	f103 030e 	add.w	r3, r3, #14
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	f507 52c6 	add.w	r2, r7, #6336	; 0x18c0
 8000c80:	f102 020e 	add.w	r2, r2, #14
 8000c84:	7013      	strb	r3, [r2, #0]
			}
			Do_Action(LTE_reset_action, (uint8_t*)ParseBuffer);
 8000c86:	4b49      	ldr	r3, [pc, #292]	; (8000dac <main+0x61c>)
 8000c88:	9302      	str	r3, [sp, #8]
 8000c8a:	466a      	mov	r2, sp
 8000c8c:	f507 53bf 	add.w	r3, r7, #6112	; 0x17e0
 8000c90:	f103 0318 	add.w	r3, r3, #24
 8000c94:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c98:	e882 0003 	stmia.w	r2, {r0, r1}
 8000c9c:	f507 53bf 	add.w	r3, r7, #6112	; 0x17e0
 8000ca0:	f103 0308 	add.w	r3, r3, #8
 8000ca4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ca6:	f000 fa2f 	bl	8001108 <Do_Action>

			HAL_Delay(1000);
 8000caa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cae:	f000 fd87 	bl	80017c0 <HAL_Delay>
			current_action=0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	f507 52c6 	add.w	r2, r7, #6336	; 0x18c0
 8000cb8:	f102 020f 	add.w	r2, r2, #15
 8000cbc:	7013      	strb	r3, [r2, #0]
			break;
 8000cbe:	e041      	b.n	8000d44 <main+0x5b4>
		case BAD_ANSWER:
			printf("%s - %s\r\n", action_list[current_action].cmd, action_list[current_action].bad_answer);
 8000cc0:	f507 53c6 	add.w	r3, r7, #6336	; 0x18c0
 8000cc4:	f103 030f 	add.w	r3, r3, #15
 8000cc8:	781a      	ldrb	r2, [r3, #0]
 8000cca:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8000cce:	f5a3 610d 	sub.w	r1, r3, #2256	; 0x8d0
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	4413      	add	r3, r2
 8000cd8:	00db      	lsls	r3, r3, #3
 8000cda:	440b      	add	r3, r1
 8000cdc:	6818      	ldr	r0, [r3, #0]
 8000cde:	f507 53c6 	add.w	r3, r7, #6336	; 0x18c0
 8000ce2:	f103 030f 	add.w	r3, r3, #15
 8000ce6:	781a      	ldrb	r2, [r3, #0]
 8000ce8:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8000cec:	f5a3 610d 	sub.w	r1, r3, #2256	; 0x8d0
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	4413      	add	r3, r2
 8000cf6:	00db      	lsls	r3, r3, #3
 8000cf8:	440b      	add	r3, r1
 8000cfa:	330c      	adds	r3, #12
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	461a      	mov	r2, r3
 8000d00:	4601      	mov	r1, r0
 8000d02:	482b      	ldr	r0, [pc, #172]	; (8000db0 <main+0x620>)
 8000d04:	f002 fbf2 	bl	80034ec <iprintf>
			Do_Action(LTE_reset_action, (uint8_t*)ParseBuffer);
 8000d08:	4b28      	ldr	r3, [pc, #160]	; (8000dac <main+0x61c>)
 8000d0a:	9302      	str	r3, [sp, #8]
 8000d0c:	466a      	mov	r2, sp
 8000d0e:	f507 53bf 	add.w	r3, r7, #6112	; 0x17e0
 8000d12:	f103 0318 	add.w	r3, r3, #24
 8000d16:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d1a:	e882 0003 	stmia.w	r2, {r0, r1}
 8000d1e:	f507 53bf 	add.w	r3, r7, #6112	; 0x17e0
 8000d22:	f103 0308 	add.w	r3, r3, #8
 8000d26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d28:	f000 f9ee 	bl	8001108 <Do_Action>
			HAL_Delay(1000);
 8000d2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d30:	f000 fd46 	bl	80017c0 <HAL_Delay>
			startup = 5;
 8000d34:	2305      	movs	r3, #5
 8000d36:	f507 52c6 	add.w	r2, r7, #6336	; 0x18c0
 8000d3a:	f102 020e 	add.w	r2, r2, #14
 8000d3e:	7013      	strb	r3, [r2, #0]
			break;
 8000d40:	e000      	b.n	8000d44 <main+0x5b4>
		default:
			break;
 8000d42:	bf00      	nop
		};

		if(UARTDMA_IsDataReady(&huartdma6))
 8000d44:	4820      	ldr	r0, [pc, #128]	; (8000dc8 <main+0x638>)
 8000d46:	f7ff fc92 	bl	800066e <UARTDMA_IsDataReady>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d008      	beq.n	8000d62 <main+0x5d2>
		{
			UARTDMA_GetLineFromBuffer(&huartdma6, ParseBuffer);
 8000d50:	4916      	ldr	r1, [pc, #88]	; (8000dac <main+0x61c>)
 8000d52:	481d      	ldr	r0, [pc, #116]	; (8000dc8 <main+0x638>)
 8000d54:	f7ff fc9c 	bl	8000690 <UARTDMA_GetLineFromBuffer>
			printf("BUFFER: >>%s<<\r\n", (char*)ParseBuffer);
 8000d58:	4914      	ldr	r1, [pc, #80]	; (8000dac <main+0x61c>)
 8000d5a:	481c      	ldr	r0, [pc, #112]	; (8000dcc <main+0x63c>)
 8000d5c:	f002 fbc6 	bl	80034ec <iprintf>
 8000d60:	e6ac      	b.n	8000abc <main+0x32c>
		}else{
			for(int i = 0; i< BUFFER_SIZE; i++){
 8000d62:	2300      	movs	r3, #0
 8000d64:	f507 52c6 	add.w	r2, r7, #6336	; 0x18c0
 8000d68:	f102 0204 	add.w	r2, r2, #4
 8000d6c:	6013      	str	r3, [r2, #0]
 8000d6e:	e013      	b.n	8000d98 <main+0x608>
				ParseBuffer[i] ='\0';
 8000d70:	4a0e      	ldr	r2, [pc, #56]	; (8000dac <main+0x61c>)
 8000d72:	f507 53c6 	add.w	r3, r7, #6336	; 0x18c0
 8000d76:	f103 0304 	add.w	r3, r3, #4
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	2200      	movs	r2, #0
 8000d80:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i< BUFFER_SIZE; i++){
 8000d82:	f507 53c6 	add.w	r3, r7, #6336	; 0x18c0
 8000d86:	f103 0304 	add.w	r3, r3, #4
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	f507 52c6 	add.w	r2, r7, #6336	; 0x18c0
 8000d92:	f102 0204 	add.w	r2, r2, #4
 8000d96:	6013      	str	r3, [r2, #0]
 8000d98:	f507 53c6 	add.w	r3, r7, #6336	; 0x18c0
 8000d9c:	f103 0304 	add.w	r3, r3, #4
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000da6:	dbe3      	blt.n	8000d70 <main+0x5e0>
	{
 8000da8:	e688      	b.n	8000abc <main+0x32c>
 8000daa:	bf00      	nop
 8000dac:	20000dfc 	.word	0x20000dfc
 8000db0:	080045a8 	.word	0x080045a8
 8000db4:	080045b4 	.word	0x080045b4
 8000db8:	080045c8 	.word	0x080045c8
 8000dbc:	080045d8 	.word	0x080045d8
 8000dc0:	080045e0 	.word	0x080045e0
 8000dc4:	40020000 	.word	0x40020000
 8000dc8:	2000008c 	.word	0x2000008c
 8000dcc:	080045ec 	.word	0x080045ec

08000dd0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b092      	sub	sp, #72	; 0x48
 8000dd4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dd6:	f107 0314 	add.w	r3, r7, #20
 8000dda:	2234      	movs	r2, #52	; 0x34
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4618      	mov	r0, r3
 8000de0:	f002 fb7c 	bl	80034dc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de4:	463b      	mov	r3, r7
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
 8000df0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000df2:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <SystemClock_Config+0x98>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000dfa:	4a1b      	ldr	r2, [pc, #108]	; (8000e68 <SystemClock_Config+0x98>)
 8000dfc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e00:	6013      	str	r3, [r2, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e02:	2302      	movs	r3, #2
 8000e04:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e06:	2301      	movs	r3, #1
 8000e08:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e0a:	2310      	movs	r3, #16
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e12:	2300      	movs	r3, #0
 8000e14:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000e16:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000e1a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000e1c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000e20:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	4618      	mov	r0, r3
 8000e28:	f001 f8a6 	bl	8001f78 <HAL_RCC_OscConfig>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <SystemClock_Config+0x66>
	{
		Error_Handler();
 8000e32:	f000 f947 	bl	80010c4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e36:	230f      	movs	r3, #15
 8000e38:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e4a:	463b      	mov	r3, r7
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f001 fbc2 	bl	80025d8 <HAL_RCC_ClockConfig>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <SystemClock_Config+0x8e>
	{
		Error_Handler();
 8000e5a:	f000 f933 	bl	80010c4 <Error_Handler>
	}
}
 8000e5e:	bf00      	nop
 8000e60:	3748      	adds	r7, #72	; 0x48
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40007000 	.word	0x40007000

08000e6c <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8000e70:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <MX_UART4_Init+0x4c>)
 8000e72:	4a12      	ldr	r2, [pc, #72]	; (8000ebc <MX_UART4_Init+0x50>)
 8000e74:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 8000e76:	4b10      	ldr	r3, [pc, #64]	; (8000eb8 <MX_UART4_Init+0x4c>)
 8000e78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e7c:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <MX_UART4_Init+0x4c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <MX_UART4_Init+0x4c>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <MX_UART4_Init+0x4c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8000e90:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <MX_UART4_Init+0x4c>)
 8000e92:	220c      	movs	r2, #12
 8000e94:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e96:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <MX_UART4_Init+0x4c>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <MX_UART4_Init+0x4c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK)
 8000ea2:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <MX_UART4_Init+0x4c>)
 8000ea4:	f001 fe5e 	bl	8002b64 <HAL_UART_Init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_UART4_Init+0x46>
	{
		Error_Handler();
 8000eae:	f000 f909 	bl	80010c4 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000c98 	.word	0x20000c98
 8000ebc:	40004c00 	.word	0x40004c00

08000ec0 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000ec4:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <MX_USART1_UART_Init+0x4c>)
 8000ec6:	4a12      	ldr	r2, [pc, #72]	; (8000f10 <MX_USART1_UART_Init+0x50>)
 8000ec8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000eca:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <MX_USART1_UART_Init+0x4c>)
 8000ecc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ed0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <MX_USART1_UART_Init+0x4c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <MX_USART1_UART_Init+0x4c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000ede:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <MX_USART1_UART_Init+0x4c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000ee4:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <MX_USART1_UART_Init+0x4c>)
 8000ee6:	220c      	movs	r2, #12
 8000ee8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eea:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <MX_USART1_UART_Init+0x4c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <MX_USART1_UART_Init+0x4c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ef6:	4805      	ldr	r0, [pc, #20]	; (8000f0c <MX_USART1_UART_Init+0x4c>)
 8000ef8:	f001 fe34 	bl	8002b64 <HAL_UART_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8000f02:	f000 f8df 	bl	80010c4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000ce0 	.word	0x20000ce0
 8000f10:	40013800 	.word	0x40013800

08000f14 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <MX_USART2_UART_Init+0x4c>)
 8000f1a:	4a12      	ldr	r2, [pc, #72]	; (8000f64 <MX_USART2_UART_Init+0x50>)
 8000f1c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 57600;
 8000f1e:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <MX_USART2_UART_Init+0x4c>)
 8000f20:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000f24:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f26:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <MX_USART2_UART_Init+0x4c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <MX_USART2_UART_Init+0x4c>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000f32:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <MX_USART2_UART_Init+0x4c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000f38:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <MX_USART2_UART_Init+0x4c>)
 8000f3a:	220c      	movs	r2, #12
 8000f3c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f3e:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <MX_USART2_UART_Init+0x4c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <MX_USART2_UART_Init+0x4c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f4a:	4805      	ldr	r0, [pc, #20]	; (8000f60 <MX_USART2_UART_Init+0x4c>)
 8000f4c:	f001 fe0a 	bl	8002b64 <HAL_UART_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8000f56:	f000 f8b5 	bl	80010c4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000d28 	.word	0x20000d28
 8000f64:	40004400 	.word	0x40004400

08000f68 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000f6c:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <MX_USART3_UART_Init+0x4c>)
 8000f6e:	4a12      	ldr	r2, [pc, #72]	; (8000fb8 <MX_USART3_UART_Init+0x50>)
 8000f70:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000f72:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <MX_USART3_UART_Init+0x4c>)
 8000f74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f78:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <MX_USART3_UART_Init+0x4c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <MX_USART3_UART_Init+0x4c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000f86:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <MX_USART3_UART_Init+0x4c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000f8c:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <MX_USART3_UART_Init+0x4c>)
 8000f8e:	220c      	movs	r2, #12
 8000f90:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f92:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <MX_USART3_UART_Init+0x4c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <MX_USART3_UART_Init+0x4c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f9e:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <MX_USART3_UART_Init+0x4c>)
 8000fa0:	f001 fde0 	bl	8002b64 <HAL_UART_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 8000faa:	f000 f88b 	bl	80010c4 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000d70 	.word	0x20000d70
 8000fb8:	40004800 	.word	0x40004800

08000fbc <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <MX_DMA_Init+0x38>)
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <MX_DMA_Init+0x38>)
 8000fc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fcc:	61d3      	str	r3, [r2, #28]
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <MX_DMA_Init+0x38>)
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2100      	movs	r1, #0
 8000fde:	2010      	movs	r0, #16
 8000fe0:	f000 fce7 	bl	80019b2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000fe4:	2010      	movs	r0, #16
 8000fe6:	f000 fd00 	bl	80019ea <HAL_NVIC_EnableIRQ>

}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40023800 	.word	0x40023800

08000ff8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
 800100c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800100e:	4b2a      	ldr	r3, [pc, #168]	; (80010b8 <MX_GPIO_Init+0xc0>)
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	4a29      	ldr	r2, [pc, #164]	; (80010b8 <MX_GPIO_Init+0xc0>)
 8001014:	f043 0304 	orr.w	r3, r3, #4
 8001018:	61d3      	str	r3, [r2, #28]
 800101a:	4b27      	ldr	r3, [pc, #156]	; (80010b8 <MX_GPIO_Init+0xc0>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	f003 0304 	and.w	r3, r3, #4
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001026:	4b24      	ldr	r3, [pc, #144]	; (80010b8 <MX_GPIO_Init+0xc0>)
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	4a23      	ldr	r2, [pc, #140]	; (80010b8 <MX_GPIO_Init+0xc0>)
 800102c:	f043 0320 	orr.w	r3, r3, #32
 8001030:	61d3      	str	r3, [r2, #28]
 8001032:	4b21      	ldr	r3, [pc, #132]	; (80010b8 <MX_GPIO_Init+0xc0>)
 8001034:	69db      	ldr	r3, [r3, #28]
 8001036:	f003 0320 	and.w	r3, r3, #32
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	4b1e      	ldr	r3, [pc, #120]	; (80010b8 <MX_GPIO_Init+0xc0>)
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	4a1d      	ldr	r2, [pc, #116]	; (80010b8 <MX_GPIO_Init+0xc0>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	61d3      	str	r3, [r2, #28]
 800104a:	4b1b      	ldr	r3, [pc, #108]	; (80010b8 <MX_GPIO_Init+0xc0>)
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001056:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <MX_GPIO_Init+0xc0>)
 8001058:	69db      	ldr	r3, [r3, #28]
 800105a:	4a17      	ldr	r2, [pc, #92]	; (80010b8 <MX_GPIO_Init+0xc0>)
 800105c:	f043 0302 	orr.w	r3, r3, #2
 8001060:	61d3      	str	r3, [r2, #28]
 8001062:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <MX_GPIO_Init+0xc0>)
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	2160      	movs	r1, #96	; 0x60
 8001072:	4812      	ldr	r0, [pc, #72]	; (80010bc <MX_GPIO_Init+0xc4>)
 8001074:	f000 ff68 	bl	8001f48 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001078:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800107c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800107e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001082:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	4619      	mov	r1, r3
 800108e:	480c      	ldr	r0, [pc, #48]	; (80010c0 <MX_GPIO_Init+0xc8>)
 8001090:	f000 fdca 	bl	8001c28 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin PA6 */
	GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
 8001094:	2360      	movs	r3, #96	; 0x60
 8001096:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001098:	2301      	movs	r3, #1
 800109a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	4619      	mov	r1, r3
 80010aa:	4804      	ldr	r0, [pc, #16]	; (80010bc <MX_GPIO_Init+0xc4>)
 80010ac:	f000 fdbc 	bl	8001c28 <HAL_GPIO_Init>

}
 80010b0:	bf00      	nop
 80010b2:	3728      	adds	r7, #40	; 0x28
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40020000 	.word	0x40020000
 80010c0:	40020800 	.word	0x40020800

080010c4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c8:	b672      	cpsid	i
}
 80010ca:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80010cc:	e7fe      	b.n	80010cc <Error_Handler+0x8>
	...

080010d0 <Send_LTE>:
#include "scheduler.h"


void Send_LTE(char* cmd){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	//printf("%s, %d - SIZEOF\r\n", (char*)cmd, sizeof(cmd));
	//	strcat(cmd, "\r\n");
	//printf("%s, %d - SIZEOF\r\n", cmd, strlen(cmd));
	HAL_UART_Transmit(&huart2,(uint8_t*)cmd,strlen(cmd),10);
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f7ff f859 	bl	8000190 <strlen>
 80010de:	4603      	mov	r3, r0
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	230a      	movs	r3, #10
 80010e4:	6879      	ldr	r1, [r7, #4]
 80010e6:	4806      	ldr	r0, [pc, #24]	; (8001100 <Send_LTE+0x30>)
 80010e8:	f001 fd8c 	bl	8002c04 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2,(uint8_t*)"\r\n",2,10);
 80010ec:	230a      	movs	r3, #10
 80010ee:	2202      	movs	r2, #2
 80010f0:	4904      	ldr	r1, [pc, #16]	; (8001104 <Send_LTE+0x34>)
 80010f2:	4803      	ldr	r0, [pc, #12]	; (8001100 <Send_LTE+0x30>)
 80010f4:	f001 fd86 	bl	8002c04 <HAL_UART_Transmit>
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000d28 	.word	0x20000d28
 8001104:	080046c0 	.word	0x080046c0

08001108 <Do_Action>:
void Get_LTE_data(){
	UARTDMA_IsDataReady(&huartdma6);
}


enum State Do_Action(command cmd, uint8_t* uart_data){
 8001108:	b084      	sub	sp, #16
 800110a:	b590      	push	{r4, r7, lr}
 800110c:	b087      	sub	sp, #28
 800110e:	af04      	add	r7, sp, #16
 8001110:	f107 0418 	add.w	r4, r7, #24
 8001114:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	static enum State state = READY;
	static unsigned int retry;
	static int start_time;

	if(strcmp(cmd.cmd, "RESET_ACTION") == 0){
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	494b      	ldr	r1, [pc, #300]	; (8001248 <Do_Action+0x140>)
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff f82d 	bl	800017c <strcmp>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d117      	bne.n	8001158 <Do_Action+0x50>
		state = READY;
 8001128:	4b48      	ldr	r3, [pc, #288]	; (800124c <Do_Action+0x144>)
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]
		retry = 0;
 800112e:	4b48      	ldr	r3, [pc, #288]	; (8001250 <Do_Action+0x148>)
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
		for(int i = 0; i< BUFFER_SIZE; i++){
 8001134:	2300      	movs	r3, #0
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	e007      	b.n	800114a <Do_Action+0x42>
			uart_data[i] ='\0';
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800113e:	4413      	add	r3, r2
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i< BUFFER_SIZE; i++){
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3301      	adds	r3, #1
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001150:	dbf3      	blt.n	800113a <Do_Action+0x32>
		}
		return state;
 8001152:	4b3e      	ldr	r3, [pc, #248]	; (800124c <Do_Action+0x144>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	e06f      	b.n	8001238 <Do_Action+0x130>
	}

	if(state == READY){ 					// ready to send new command
 8001158:	4b3c      	ldr	r3, [pc, #240]	; (800124c <Do_Action+0x144>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d10f      	bne.n	8001180 <Do_Action+0x78>
		start_time = HAL_GetTick();		// save send time
 8001160:	f000 fb24 	bl	80017ac <HAL_GetTick>
 8001164:	4603      	mov	r3, r0
 8001166:	461a      	mov	r2, r3
 8001168:	4b3a      	ldr	r3, [pc, #232]	; (8001254 <Do_Action+0x14c>)
 800116a:	601a      	str	r2, [r3, #0]
		state = CHECKING_ANSWER;			// notify that now we wait for a reply
 800116c:	4b37      	ldr	r3, [pc, #220]	; (800124c <Do_Action+0x144>)
 800116e:	2201      	movs	r2, #1
 8001170:	701a      	strb	r2, [r3, #0]
		Send_LTE(cmd.cmd);				// send new command
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff ffab 	bl	80010d0 <Send_LTE>
		return state;
 800117a:	4b34      	ldr	r3, [pc, #208]	; (800124c <Do_Action+0x144>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	e05b      	b.n	8001238 <Do_Action+0x130>

	}else if(state == CHECKING_ANSWER){	// if we expect a reply now
 8001180:	4b32      	ldr	r3, [pc, #200]	; (800124c <Do_Action+0x144>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d155      	bne.n	8001234 <Do_Action+0x12c>

		if((start_time + cmd.timeout) < HAL_GetTick()){	// if we wait too long, report timeout
 8001188:	6a3a      	ldr	r2, [r7, #32]
 800118a:	4b32      	ldr	r3, [pc, #200]	; (8001254 <Do_Action+0x14c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4413      	add	r3, r2
 8001190:	461c      	mov	r4, r3
 8001192:	f000 fb0b 	bl	80017ac <HAL_GetTick>
 8001196:	4603      	mov	r3, r0
 8001198:	429c      	cmp	r4, r3
 800119a:	d205      	bcs.n	80011a8 <Do_Action+0xa0>
			state = TIMEOUT;
 800119c:	4b2b      	ldr	r3, [pc, #172]	; (800124c <Do_Action+0x144>)
 800119e:	2204      	movs	r2, #4
 80011a0:	701a      	strb	r2, [r3, #0]
			return state;
 80011a2:	4b2a      	ldr	r3, [pc, #168]	; (800124c <Do_Action+0x144>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	e047      	b.n	8001238 <Do_Action+0x130>
		}

		if((strcmp(cmd.good_answer, (char*)uart_data) == 0) || strcmp(cmd.good_answer, "ANY") == 0){ 		// if the reply is OK, return success
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7fe ffe5 	bl	800017c <strcmp>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d007      	beq.n	80011c8 <Do_Action+0xc0>
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	4927      	ldr	r1, [pc, #156]	; (8001258 <Do_Action+0x150>)
 80011bc:	4618      	mov	r0, r3
 80011be:	f7fe ffdd 	bl	800017c <strcmp>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d105      	bne.n	80011d4 <Do_Action+0xcc>
			state = GOOD_ANSWER;
 80011c8:	4b20      	ldr	r3, [pc, #128]	; (800124c <Do_Action+0x144>)
 80011ca:	2202      	movs	r2, #2
 80011cc:	701a      	strb	r2, [r3, #0]
			return state;
 80011ce:	4b1f      	ldr	r3, [pc, #124]	; (800124c <Do_Action+0x144>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	e031      	b.n	8001238 <Do_Action+0x130>
		}else if(strcmp(cmd.bad_answer, (char*)uart_data) == 0){	// if the reply suggest an error...
 80011d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80011d8:	4618      	mov	r0, r3
 80011da:	f7fe ffcf 	bl	800017c <strcmp>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d127      	bne.n	8001234 <Do_Action+0x12c>
			state = BAD_ANSWER;
 80011e4:	4b19      	ldr	r3, [pc, #100]	; (800124c <Do_Action+0x144>)
 80011e6:	2203      	movs	r2, #3
 80011e8:	701a      	strb	r2, [r3, #0]
			if(retry < cmd.retry_counter){				// retry if structure suggest that behaviour
 80011ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ec:	461a      	mov	r2, r3
 80011ee:	4b18      	ldr	r3, [pc, #96]	; (8001250 <Do_Action+0x148>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d915      	bls.n	8001222 <Do_Action+0x11a>
				retry++;
 80011f6:	4b16      	ldr	r3, [pc, #88]	; (8001250 <Do_Action+0x148>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	3301      	adds	r3, #1
 80011fc:	4a14      	ldr	r2, [pc, #80]	; (8001250 <Do_Action+0x148>)
 80011fe:	6013      	str	r3, [r2, #0]
				Do_Action(cmd, uart_data);
 8001200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001202:	9302      	str	r3, [sp, #8]
 8001204:	466a      	mov	r2, sp
 8001206:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800120a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800120e:	e882 0003 	stmia.w	r2, {r0, r1}
 8001212:	f107 0318 	add.w	r3, r7, #24
 8001216:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001218:	f7ff ff76 	bl	8001108 <Do_Action>
			}else{										// if retries still give an error, or no replies suggested, report error
				retry = 0;
				state = BAD_ANSWER;
				return state;
			}
			return state;
 800121c:	4b0b      	ldr	r3, [pc, #44]	; (800124c <Do_Action+0x144>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	e00a      	b.n	8001238 <Do_Action+0x130>
				retry = 0;
 8001222:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <Do_Action+0x148>)
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
				state = BAD_ANSWER;
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <Do_Action+0x144>)
 800122a:	2203      	movs	r2, #3
 800122c:	701a      	strb	r2, [r3, #0]
				return state;
 800122e:	4b07      	ldr	r3, [pc, #28]	; (800124c <Do_Action+0x144>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	e001      	b.n	8001238 <Do_Action+0x130>
		}
	}

	return state;
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <Do_Action+0x144>)
 8001236:	781b      	ldrb	r3, [r3, #0]
}
 8001238:	4618      	mov	r0, r3
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001242:	b004      	add	sp, #16
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	080046c4 	.word	0x080046c4
 800124c:	200011fc 	.word	0x200011fc
 8001250:	20001200 	.word	0x20001200
 8001254:	20001204 	.word	0x20001204
 8001258:	080046d4 	.word	0x080046d4

0800125c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <HAL_MspInit+0x5c>)
 8001264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001266:	4a14      	ldr	r2, [pc, #80]	; (80012b8 <HAL_MspInit+0x5c>)
 8001268:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800126c:	6253      	str	r3, [r2, #36]	; 0x24
 800126e:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <HAL_MspInit+0x5c>)
 8001270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001272:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127a:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <HAL_MspInit+0x5c>)
 800127c:	6a1b      	ldr	r3, [r3, #32]
 800127e:	4a0e      	ldr	r2, [pc, #56]	; (80012b8 <HAL_MspInit+0x5c>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6213      	str	r3, [r2, #32]
 8001286:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <HAL_MspInit+0x5c>)
 8001288:	6a1b      	ldr	r3, [r3, #32]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <HAL_MspInit+0x5c>)
 8001294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001296:	4a08      	ldr	r2, [pc, #32]	; (80012b8 <HAL_MspInit+0x5c>)
 8001298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800129c:	6253      	str	r3, [r2, #36]	; 0x24
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_MspInit+0x5c>)
 80012a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012aa:	2007      	movs	r0, #7
 80012ac:	f000 fb76 	bl	800199c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012b0:	bf00      	nop
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40023800 	.word	0x40023800

080012bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b090      	sub	sp, #64	; 0x40
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a74      	ldr	r2, [pc, #464]	; (80014ac <HAL_UART_MspInit+0x1f0>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d129      	bne.n	8001332 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80012de:	4b74      	ldr	r3, [pc, #464]	; (80014b0 <HAL_UART_MspInit+0x1f4>)
 80012e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e2:	4a73      	ldr	r2, [pc, #460]	; (80014b0 <HAL_UART_MspInit+0x1f4>)
 80012e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80012e8:	6253      	str	r3, [r2, #36]	; 0x24
 80012ea:	4b71      	ldr	r3, [pc, #452]	; (80014b0 <HAL_UART_MspInit+0x1f4>)
 80012ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80012f4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f6:	4b6e      	ldr	r3, [pc, #440]	; (80014b0 <HAL_UART_MspInit+0x1f4>)
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	4a6d      	ldr	r2, [pc, #436]	; (80014b0 <HAL_UART_MspInit+0x1f4>)
 80012fc:	f043 0304 	orr.w	r3, r3, #4
 8001300:	61d3      	str	r3, [r2, #28]
 8001302:	4b6b      	ldr	r3, [pc, #428]	; (80014b0 <HAL_UART_MspInit+0x1f4>)
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	627b      	str	r3, [r7, #36]	; 0x24
 800130c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800130e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001312:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001314:	2302      	movs	r3, #2
 8001316:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001318:	2301      	movs	r3, #1
 800131a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131c:	2303      	movs	r3, #3
 800131e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001320:	2308      	movs	r3, #8
 8001322:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001324:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001328:	4619      	mov	r1, r3
 800132a:	4862      	ldr	r0, [pc, #392]	; (80014b4 <HAL_UART_MspInit+0x1f8>)
 800132c:	f000 fc7c 	bl	8001c28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001330:	e0b8      	b.n	80014a4 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART1)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a60      	ldr	r2, [pc, #384]	; (80014b8 <HAL_UART_MspInit+0x1fc>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d129      	bne.n	8001390 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART1_CLK_ENABLE();
 800133c:	4b5c      	ldr	r3, [pc, #368]	; (80014b0 <HAL_UART_MspInit+0x1f4>)
 800133e:	6a1b      	ldr	r3, [r3, #32]
 8001340:	4a5b      	ldr	r2, [pc, #364]	; (80014b0 <HAL_UART_MspInit+0x1f4>)
 8001342:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001346:	6213      	str	r3, [r2, #32]
 8001348:	4b59      	ldr	r3, [pc, #356]	; (80014b0 <HAL_UART_MspInit+0x1f4>)
 800134a:	6a1b      	ldr	r3, [r3, #32]
 800134c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001350:	623b      	str	r3, [r7, #32]
 8001352:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001354:	4b56      	ldr	r3, [pc, #344]	; (80014b0 <HAL_UART_MspInit+0x1f4>)
 8001356:	69db      	ldr	r3, [r3, #28]
 8001358:	4a55      	ldr	r2, [pc, #340]	; (80014b0 <HAL_UART_MspInit+0x1f4>)
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	61d3      	str	r3, [r2, #28]
 8001360:	4b53      	ldr	r3, [pc, #332]	; (80014b0 <HAL_UART_MspInit+0x1f4>)
 8001362:	69db      	ldr	r3, [r3, #28]
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	61fb      	str	r3, [r7, #28]
 800136a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800136c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001370:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001372:	2302      	movs	r3, #2
 8001374:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137a:	2303      	movs	r3, #3
 800137c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800137e:	2307      	movs	r3, #7
 8001380:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001382:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001386:	4619      	mov	r1, r3
 8001388:	484c      	ldr	r0, [pc, #304]	; (80014bc <HAL_UART_MspInit+0x200>)
 800138a:	f000 fc4d 	bl	8001c28 <HAL_GPIO_Init>
}
 800138e:	e089      	b.n	80014a4 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART2)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a4a      	ldr	r2, [pc, #296]	; (80014c0 <HAL_UART_MspInit+0x204>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d156      	bne.n	8001448 <HAL_UART_MspInit+0x18c>
    __HAL_RCC_USART2_CLK_ENABLE();
 800139a:	4b45      	ldr	r3, [pc, #276]	; (80014b0 <HAL_UART_MspInit+0x1f4>)
 800139c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139e:	4a44      	ldr	r2, [pc, #272]	; (80014b0 <HAL_UART_MspInit+0x1f4>)
 80013a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a4:	6253      	str	r3, [r2, #36]	; 0x24
 80013a6:	4b42      	ldr	r3, [pc, #264]	; (80014b0 <HAL_UART_MspInit+0x1f4>)
 80013a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ae:	61bb      	str	r3, [r7, #24]
 80013b0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b2:	4b3f      	ldr	r3, [pc, #252]	; (80014b0 <HAL_UART_MspInit+0x1f4>)
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	4a3e      	ldr	r2, [pc, #248]	; (80014b0 <HAL_UART_MspInit+0x1f4>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	61d3      	str	r3, [r2, #28]
 80013be:	4b3c      	ldr	r3, [pc, #240]	; (80014b0 <HAL_UART_MspInit+0x1f4>)
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013ca:	230c      	movs	r3, #12
 80013cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ce:	2302      	movs	r3, #2
 80013d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d6:	2303      	movs	r3, #3
 80013d8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013da:	2307      	movs	r3, #7
 80013dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013e2:	4619      	mov	r1, r3
 80013e4:	4835      	ldr	r0, [pc, #212]	; (80014bc <HAL_UART_MspInit+0x200>)
 80013e6:	f000 fc1f 	bl	8001c28 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80013ea:	4b36      	ldr	r3, [pc, #216]	; (80014c4 <HAL_UART_MspInit+0x208>)
 80013ec:	4a36      	ldr	r2, [pc, #216]	; (80014c8 <HAL_UART_MspInit+0x20c>)
 80013ee:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013f0:	4b34      	ldr	r3, [pc, #208]	; (80014c4 <HAL_UART_MspInit+0x208>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013f6:	4b33      	ldr	r3, [pc, #204]	; (80014c4 <HAL_UART_MspInit+0x208>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013fc:	4b31      	ldr	r3, [pc, #196]	; (80014c4 <HAL_UART_MspInit+0x208>)
 80013fe:	2280      	movs	r2, #128	; 0x80
 8001400:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001402:	4b30      	ldr	r3, [pc, #192]	; (80014c4 <HAL_UART_MspInit+0x208>)
 8001404:	2200      	movs	r2, #0
 8001406:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001408:	4b2e      	ldr	r3, [pc, #184]	; (80014c4 <HAL_UART_MspInit+0x208>)
 800140a:	2200      	movs	r2, #0
 800140c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800140e:	4b2d      	ldr	r3, [pc, #180]	; (80014c4 <HAL_UART_MspInit+0x208>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001414:	4b2b      	ldr	r3, [pc, #172]	; (80014c4 <HAL_UART_MspInit+0x208>)
 8001416:	2200      	movs	r2, #0
 8001418:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800141a:	482a      	ldr	r0, [pc, #168]	; (80014c4 <HAL_UART_MspInit+0x208>)
 800141c:	f000 fb00 	bl	8001a20 <HAL_DMA_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <HAL_UART_MspInit+0x16e>
      Error_Handler();
 8001426:	f7ff fe4d 	bl	80010c4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a25      	ldr	r2, [pc, #148]	; (80014c4 <HAL_UART_MspInit+0x208>)
 800142e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001430:	4a24      	ldr	r2, [pc, #144]	; (80014c4 <HAL_UART_MspInit+0x208>)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001436:	2200      	movs	r2, #0
 8001438:	2100      	movs	r1, #0
 800143a:	2026      	movs	r0, #38	; 0x26
 800143c:	f000 fab9 	bl	80019b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001440:	2026      	movs	r0, #38	; 0x26
 8001442:	f000 fad2 	bl	80019ea <HAL_NVIC_EnableIRQ>
}
 8001446:	e02d      	b.n	80014a4 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART3)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a1f      	ldr	r2, [pc, #124]	; (80014cc <HAL_UART_MspInit+0x210>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d128      	bne.n	80014a4 <HAL_UART_MspInit+0x1e8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001452:	4b17      	ldr	r3, [pc, #92]	; (80014b0 <HAL_UART_MspInit+0x1f4>)
 8001454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001456:	4a16      	ldr	r2, [pc, #88]	; (80014b0 <HAL_UART_MspInit+0x1f4>)
 8001458:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800145c:	6253      	str	r3, [r2, #36]	; 0x24
 800145e:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <HAL_UART_MspInit+0x1f4>)
 8001460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001462:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800146a:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <HAL_UART_MspInit+0x1f4>)
 800146c:	69db      	ldr	r3, [r3, #28]
 800146e:	4a10      	ldr	r2, [pc, #64]	; (80014b0 <HAL_UART_MspInit+0x1f4>)
 8001470:	f043 0302 	orr.w	r3, r3, #2
 8001474:	61d3      	str	r3, [r2, #28]
 8001476:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <HAL_UART_MspInit+0x1f4>)
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001482:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001486:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001488:	2302      	movs	r3, #2
 800148a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001490:	2303      	movs	r3, #3
 8001492:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001494:	2307      	movs	r3, #7
 8001496:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001498:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800149c:	4619      	mov	r1, r3
 800149e:	480c      	ldr	r0, [pc, #48]	; (80014d0 <HAL_UART_MspInit+0x214>)
 80014a0:	f000 fbc2 	bl	8001c28 <HAL_GPIO_Init>
}
 80014a4:	bf00      	nop
 80014a6:	3740      	adds	r7, #64	; 0x40
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40004c00 	.word	0x40004c00
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40020800 	.word	0x40020800
 80014b8:	40013800 	.word	0x40013800
 80014bc:	40020000 	.word	0x40020000
 80014c0:	40004400 	.word	0x40004400
 80014c4:	20000db8 	.word	0x20000db8
 80014c8:	4002606c 	.word	0x4002606c
 80014cc:	40004800 	.word	0x40004800
 80014d0:	40020400 	.word	0x40020400

080014d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014d8:	e7fe      	b.n	80014d8 <NMI_Handler+0x4>

080014da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014de:	e7fe      	b.n	80014de <HardFault_Handler+0x4>

080014e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e4:	e7fe      	b.n	80014e4 <MemManage_Handler+0x4>

080014e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ea:	e7fe      	b.n	80014ea <BusFault_Handler+0x4>

080014ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <UsageFault_Handler+0x4>

080014f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr

080014fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr

0800150a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr

08001516 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800151a:	f000 f935 	bl	8001788 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
  UARTDMA_DmaIrqHandler(&huartdma6);
 8001528:	4802      	ldr	r0, [pc, #8]	; (8001534 <DMA1_Channel6_IRQHandler+0x10>)
 800152a:	f7fe ffe8 	bl	80004fe <UARTDMA_DmaIrqHandler>
  return;
 800152e:	bf00      	nop
  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	2000008c 	.word	0x2000008c

08001538 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  UARTDMA_UartIrqHandler(&huartdma6);
 800153c:	4802      	ldr	r0, [pc, #8]	; (8001548 <USART2_IRQHandler+0x10>)
 800153e:	f7fe ffb3 	bl	80004a8 <UARTDMA_UartIrqHandler>
  return;
 8001542:	bf00      	nop
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	2000008c 	.word	0x2000008c

0800154c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
 800155c:	e00a      	b.n	8001574 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800155e:	f3af 8000 	nop.w
 8001562:	4601      	mov	r1, r0
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	1c5a      	adds	r2, r3, #1
 8001568:	60ba      	str	r2, [r7, #8]
 800156a:	b2ca      	uxtb	r2, r1
 800156c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	3301      	adds	r3, #1
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	697a      	ldr	r2, [r7, #20]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	429a      	cmp	r2, r3
 800157a:	dbf0      	blt.n	800155e <_read+0x12>
  }

  return len;
 800157c:	687b      	ldr	r3, [r7, #4]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b086      	sub	sp, #24
 800158a:	af00      	add	r7, sp, #0
 800158c:	60f8      	str	r0, [r7, #12]
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
 8001596:	e009      	b.n	80015ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	1c5a      	adds	r2, r3, #1
 800159c:	60ba      	str	r2, [r7, #8]
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff f8e3 	bl	800076c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	3301      	adds	r3, #1
 80015aa:	617b      	str	r3, [r7, #20]
 80015ac:	697a      	ldr	r2, [r7, #20]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	dbf1      	blt.n	8001598 <_write+0x12>
  }
  return len;
 80015b4:	687b      	ldr	r3, [r7, #4]
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <_close>:

int _close(int file)
{
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr

080015d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015e4:	605a      	str	r2, [r3, #4]
  return 0;
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr

080015f2 <_isatty>:

int _isatty(int file)
{
 80015f2:	b480      	push	{r7}
 80015f4:	b083      	sub	sp, #12
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015fa:	2301      	movs	r3, #1
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	bc80      	pop	{r7}
 8001604:	4770      	bx	lr

08001606 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001606:	b480      	push	{r7}
 8001608:	b085      	sub	sp, #20
 800160a:	af00      	add	r7, sp, #0
 800160c:	60f8      	str	r0, [r7, #12]
 800160e:	60b9      	str	r1, [r7, #8]
 8001610:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001612:	2300      	movs	r3, #0
}
 8001614:	4618      	mov	r0, r3
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr
	...

08001620 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001628:	4a14      	ldr	r2, [pc, #80]	; (800167c <_sbrk+0x5c>)
 800162a:	4b15      	ldr	r3, [pc, #84]	; (8001680 <_sbrk+0x60>)
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001634:	4b13      	ldr	r3, [pc, #76]	; (8001684 <_sbrk+0x64>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d102      	bne.n	8001642 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800163c:	4b11      	ldr	r3, [pc, #68]	; (8001684 <_sbrk+0x64>)
 800163e:	4a12      	ldr	r2, [pc, #72]	; (8001688 <_sbrk+0x68>)
 8001640:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001642:	4b10      	ldr	r3, [pc, #64]	; (8001684 <_sbrk+0x64>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4413      	add	r3, r2
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	429a      	cmp	r2, r3
 800164e:	d207      	bcs.n	8001660 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001650:	f001 ff1a 	bl	8003488 <__errno>
 8001654:	4603      	mov	r3, r0
 8001656:	220c      	movs	r2, #12
 8001658:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800165a:	f04f 33ff 	mov.w	r3, #4294967295
 800165e:	e009      	b.n	8001674 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001660:	4b08      	ldr	r3, [pc, #32]	; (8001684 <_sbrk+0x64>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001666:	4b07      	ldr	r3, [pc, #28]	; (8001684 <_sbrk+0x64>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4413      	add	r3, r2
 800166e:	4a05      	ldr	r2, [pc, #20]	; (8001684 <_sbrk+0x64>)
 8001670:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001672:	68fb      	ldr	r3, [r7, #12]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20014000 	.word	0x20014000
 8001680:	00000400 	.word	0x00000400
 8001684:	20001208 	.word	0x20001208
 8001688:	20001220 	.word	0x20001220

0800168c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr

08001698 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8001698:	f7ff fff8 	bl	800168c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800169c:	480b      	ldr	r0, [pc, #44]	; (80016cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800169e:	490c      	ldr	r1, [pc, #48]	; (80016d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80016a0:	4a0c      	ldr	r2, [pc, #48]	; (80016d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80016a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016a4:	e002      	b.n	80016ac <LoopCopyDataInit>

080016a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016aa:	3304      	adds	r3, #4

080016ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016b0:	d3f9      	bcc.n	80016a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016b2:	4a09      	ldr	r2, [pc, #36]	; (80016d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80016b4:	4c09      	ldr	r4, [pc, #36]	; (80016dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b8:	e001      	b.n	80016be <LoopFillZerobss>

080016ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016bc:	3204      	adds	r2, #4

080016be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016c0:	d3fb      	bcc.n	80016ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016c2:	f001 fee7 	bl	8003494 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016c6:	f7ff f863 	bl	8000790 <main>
  bx lr
 80016ca:	4770      	bx	lr
  ldr r0, =_sdata
 80016cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016d0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80016d4:	080047a4 	.word	0x080047a4
  ldr r2, =_sbss
 80016d8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80016dc:	20001220 	.word	0x20001220

080016e0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016e0:	e7fe      	b.n	80016e0 <ADC1_IRQHandler>

080016e2 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b082      	sub	sp, #8
 80016e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016e8:	2300      	movs	r3, #0
 80016ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ec:	2003      	movs	r0, #3
 80016ee:	f000 f955 	bl	800199c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016f2:	2000      	movs	r0, #0
 80016f4:	f000 f80e 	bl	8001714 <HAL_InitTick>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d002      	beq.n	8001704 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	71fb      	strb	r3, [r7, #7]
 8001702:	e001      	b.n	8001708 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001704:	f7ff fdaa 	bl	800125c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001708:	79fb      	ldrb	r3, [r7, #7]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
	...

08001714 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800171c:	2300      	movs	r3, #0
 800171e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001720:	4b16      	ldr	r3, [pc, #88]	; (800177c <HAL_InitTick+0x68>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d022      	beq.n	800176e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001728:	4b15      	ldr	r3, [pc, #84]	; (8001780 <HAL_InitTick+0x6c>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4b13      	ldr	r3, [pc, #76]	; (800177c <HAL_InitTick+0x68>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001734:	fbb1 f3f3 	udiv	r3, r1, r3
 8001738:	fbb2 f3f3 	udiv	r3, r2, r3
 800173c:	4618      	mov	r0, r3
 800173e:	f000 f962 	bl	8001a06 <HAL_SYSTICK_Config>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d10f      	bne.n	8001768 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b0f      	cmp	r3, #15
 800174c:	d809      	bhi.n	8001762 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800174e:	2200      	movs	r2, #0
 8001750:	6879      	ldr	r1, [r7, #4]
 8001752:	f04f 30ff 	mov.w	r0, #4294967295
 8001756:	f000 f92c 	bl	80019b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800175a:	4a0a      	ldr	r2, [pc, #40]	; (8001784 <HAL_InitTick+0x70>)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6013      	str	r3, [r2, #0]
 8001760:	e007      	b.n	8001772 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	73fb      	strb	r3, [r7, #15]
 8001766:	e004      	b.n	8001772 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	73fb      	strb	r3, [r7, #15]
 800176c:	e001      	b.n	8001772 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001772:	7bfb      	ldrb	r3, [r7, #15]
}
 8001774:	4618      	mov	r0, r3
 8001776:	3710      	adds	r7, #16
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000008 	.word	0x20000008
 8001780:	20000000 	.word	0x20000000
 8001784:	20000004 	.word	0x20000004

08001788 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800178c:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <HAL_IncTick+0x1c>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <HAL_IncTick+0x20>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4413      	add	r3, r2
 8001796:	4a03      	ldr	r2, [pc, #12]	; (80017a4 <HAL_IncTick+0x1c>)
 8001798:	6013      	str	r3, [r2, #0]
}
 800179a:	bf00      	nop
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	2000120c 	.word	0x2000120c
 80017a8:	20000008 	.word	0x20000008

080017ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return uwTick;
 80017b0:	4b02      	ldr	r3, [pc, #8]	; (80017bc <HAL_GetTick+0x10>)
 80017b2:	681b      	ldr	r3, [r3, #0]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr
 80017bc:	2000120c 	.word	0x2000120c

080017c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017c8:	f7ff fff0 	bl	80017ac <HAL_GetTick>
 80017cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d8:	d004      	beq.n	80017e4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80017da:	4b09      	ldr	r3, [pc, #36]	; (8001800 <HAL_Delay+0x40>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	4413      	add	r3, r2
 80017e2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017e4:	bf00      	nop
 80017e6:	f7ff ffe1 	bl	80017ac <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	68fa      	ldr	r2, [r7, #12]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d8f7      	bhi.n	80017e6 <HAL_Delay+0x26>
  {
  }
}
 80017f6:	bf00      	nop
 80017f8:	bf00      	nop
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20000008 	.word	0x20000008

08001804 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <__NVIC_SetPriorityGrouping+0x44>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800181a:	68ba      	ldr	r2, [r7, #8]
 800181c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001820:	4013      	ands	r3, r2
 8001822:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800182c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001836:	4a04      	ldr	r2, [pc, #16]	; (8001848 <__NVIC_SetPriorityGrouping+0x44>)
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	60d3      	str	r3, [r2, #12]
}
 800183c:	bf00      	nop
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001850:	4b04      	ldr	r3, [pc, #16]	; (8001864 <__NVIC_GetPriorityGrouping+0x18>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	0a1b      	lsrs	r3, r3, #8
 8001856:	f003 0307 	and.w	r3, r3, #7
}
 800185a:	4618      	mov	r0, r3
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	2b00      	cmp	r3, #0
 8001878:	db0b      	blt.n	8001892 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	f003 021f 	and.w	r2, r3, #31
 8001880:	4906      	ldr	r1, [pc, #24]	; (800189c <__NVIC_EnableIRQ+0x34>)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	095b      	lsrs	r3, r3, #5
 8001888:	2001      	movs	r0, #1
 800188a:	fa00 f202 	lsl.w	r2, r0, r2
 800188e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr
 800189c:	e000e100 	.word	0xe000e100

080018a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	6039      	str	r1, [r7, #0]
 80018aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	db0a      	blt.n	80018ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	490c      	ldr	r1, [pc, #48]	; (80018ec <__NVIC_SetPriority+0x4c>)
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	0112      	lsls	r2, r2, #4
 80018c0:	b2d2      	uxtb	r2, r2
 80018c2:	440b      	add	r3, r1
 80018c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018c8:	e00a      	b.n	80018e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	4908      	ldr	r1, [pc, #32]	; (80018f0 <__NVIC_SetPriority+0x50>)
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	f003 030f 	and.w	r3, r3, #15
 80018d6:	3b04      	subs	r3, #4
 80018d8:	0112      	lsls	r2, r2, #4
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	440b      	add	r3, r1
 80018de:	761a      	strb	r2, [r3, #24]
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc80      	pop	{r7}
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	e000e100 	.word	0xe000e100
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b089      	sub	sp, #36	; 0x24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	f1c3 0307 	rsb	r3, r3, #7
 800190e:	2b04      	cmp	r3, #4
 8001910:	bf28      	it	cs
 8001912:	2304      	movcs	r3, #4
 8001914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	3304      	adds	r3, #4
 800191a:	2b06      	cmp	r3, #6
 800191c:	d902      	bls.n	8001924 <NVIC_EncodePriority+0x30>
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3b03      	subs	r3, #3
 8001922:	e000      	b.n	8001926 <NVIC_EncodePriority+0x32>
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001928:	f04f 32ff 	mov.w	r2, #4294967295
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43da      	mvns	r2, r3
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	401a      	ands	r2, r3
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800193c:	f04f 31ff 	mov.w	r1, #4294967295
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	fa01 f303 	lsl.w	r3, r1, r3
 8001946:	43d9      	mvns	r1, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800194c:	4313      	orrs	r3, r2
         );
}
 800194e:	4618      	mov	r0, r3
 8001950:	3724      	adds	r7, #36	; 0x24
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr

08001958 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3b01      	subs	r3, #1
 8001964:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001968:	d301      	bcc.n	800196e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800196a:	2301      	movs	r3, #1
 800196c:	e00f      	b.n	800198e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800196e:	4a0a      	ldr	r2, [pc, #40]	; (8001998 <SysTick_Config+0x40>)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3b01      	subs	r3, #1
 8001974:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001976:	210f      	movs	r1, #15
 8001978:	f04f 30ff 	mov.w	r0, #4294967295
 800197c:	f7ff ff90 	bl	80018a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001980:	4b05      	ldr	r3, [pc, #20]	; (8001998 <SysTick_Config+0x40>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001986:	4b04      	ldr	r3, [pc, #16]	; (8001998 <SysTick_Config+0x40>)
 8001988:	2207      	movs	r2, #7
 800198a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	e000e010 	.word	0xe000e010

0800199c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7ff ff2d 	bl	8001804 <__NVIC_SetPriorityGrouping>
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b086      	sub	sp, #24
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	4603      	mov	r3, r0
 80019ba:	60b9      	str	r1, [r7, #8]
 80019bc:	607a      	str	r2, [r7, #4]
 80019be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019c4:	f7ff ff42 	bl	800184c <__NVIC_GetPriorityGrouping>
 80019c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	68b9      	ldr	r1, [r7, #8]
 80019ce:	6978      	ldr	r0, [r7, #20]
 80019d0:	f7ff ff90 	bl	80018f4 <NVIC_EncodePriority>
 80019d4:	4602      	mov	r2, r0
 80019d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019da:	4611      	mov	r1, r2
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff5f 	bl	80018a0 <__NVIC_SetPriority>
}
 80019e2:	bf00      	nop
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	4603      	mov	r3, r0
 80019f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ff35 	bl	8001868 <__NVIC_EnableIRQ>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff ffa2 	bl	8001958 <SysTick_Config>
 8001a14:	4603      	mov	r3, r0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e059      	b.n	8001ae6 <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	461a      	mov	r2, r3
 8001a38:	4b2d      	ldr	r3, [pc, #180]	; (8001af0 <HAL_DMA_Init+0xd0>)
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d80f      	bhi.n	8001a5e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	461a      	mov	r2, r3
 8001a44:	4b2b      	ldr	r3, [pc, #172]	; (8001af4 <HAL_DMA_Init+0xd4>)
 8001a46:	4413      	add	r3, r2
 8001a48:	4a2b      	ldr	r2, [pc, #172]	; (8001af8 <HAL_DMA_Init+0xd8>)
 8001a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4e:	091b      	lsrs	r3, r3, #4
 8001a50:	009a      	lsls	r2, r3, #2
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a28      	ldr	r2, [pc, #160]	; (8001afc <HAL_DMA_Init+0xdc>)
 8001a5a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a5c:	e00e      	b.n	8001a7c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	4b26      	ldr	r3, [pc, #152]	; (8001b00 <HAL_DMA_Init+0xe0>)
 8001a66:	4413      	add	r3, r2
 8001a68:	4a23      	ldr	r2, [pc, #140]	; (8001af8 <HAL_DMA_Init+0xd8>)
 8001a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6e:	091b      	lsrs	r3, r3, #4
 8001a70:	009a      	lsls	r2, r3, #2
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a22      	ldr	r2, [pc, #136]	; (8001b04 <HAL_DMA_Init+0xe4>)
 8001a7a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2202      	movs	r2, #2
 8001a80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a96:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001aa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ab8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3714      	adds	r7, #20
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr
 8001af0:	40026407 	.word	0x40026407
 8001af4:	bffd9ff8 	.word	0xbffd9ff8
 8001af8:	cccccccd 	.word	0xcccccccd
 8001afc:	40026000 	.word	0x40026000
 8001b00:	bffd9bf8 	.word	0xbffd9bf8
 8001b04:	40026400 	.word	0x40026400

08001b08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
 8001b14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b16:	2300      	movs	r3, #0
 8001b18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d101      	bne.n	8001b28 <HAL_DMA_Start_IT+0x20>
 8001b24:	2302      	movs	r3, #2
 8001b26:	e04b      	b.n	8001bc0 <HAL_DMA_Start_IT+0xb8>
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d13a      	bne.n	8001bb2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2202      	movs	r2, #2
 8001b40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 0201 	bic.w	r2, r2, #1
 8001b58:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	68b9      	ldr	r1, [r7, #8]
 8001b60:	68f8      	ldr	r0, [r7, #12]
 8001b62:	f000 f831 	bl	8001bc8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d008      	beq.n	8001b80 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f042 020e 	orr.w	r2, r2, #14
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	e00f      	b.n	8001ba0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f022 0204 	bic.w	r2, r2, #4
 8001b8e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f042 020a 	orr.w	r2, r2, #10
 8001b9e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f042 0201 	orr.w	r2, r2, #1
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	e005      	b.n	8001bbe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001bbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3718      	adds	r7, #24
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
 8001bd4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	f003 021c 	and.w	r2, r3, #28
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001be2:	2101      	movs	r1, #1
 8001be4:	fa01 f202 	lsl.w	r2, r1, r2
 8001be8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b10      	cmp	r3, #16
 8001bf8:	d108      	bne.n	8001c0c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68ba      	ldr	r2, [r7, #8]
 8001c08:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001c0a:	e007      	b.n	8001c1c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	68ba      	ldr	r2, [r7, #8]
 8001c12:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	60da      	str	r2, [r3, #12]
}
 8001c1c:	bf00      	nop
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr
	...

08001c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b087      	sub	sp, #28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001c36:	2300      	movs	r3, #0
 8001c38:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001c3e:	e160      	b.n	8001f02 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	2101      	movs	r1, #1
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 8152 	beq.w	8001efc <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f003 0303 	and.w	r3, r3, #3
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d005      	beq.n	8001c70 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d130      	bne.n	8001cd2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	2203      	movs	r2, #3
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	4013      	ands	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	68da      	ldr	r2, [r3, #12]
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	091b      	lsrs	r3, r3, #4
 8001cbc:	f003 0201 	and.w	r2, r3, #1
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	2b03      	cmp	r3, #3
 8001cdc:	d017      	beq.n	8001d0e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	2203      	movs	r2, #3
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	689a      	ldr	r2, [r3, #8]
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d123      	bne.n	8001d62 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	08da      	lsrs	r2, r3, #3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	3208      	adds	r2, #8
 8001d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d26:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	220f      	movs	r2, #15
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43db      	mvns	r3, r3
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	691a      	ldr	r2, [r3, #16]
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	08da      	lsrs	r2, r3, #3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3208      	adds	r2, #8
 8001d5c:	6939      	ldr	r1, [r7, #16]
 8001d5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	2203      	movs	r2, #3
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43db      	mvns	r3, r3
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	4013      	ands	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f003 0203 	and.w	r2, r3, #3
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 80ac 	beq.w	8001efc <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da4:	4b5e      	ldr	r3, [pc, #376]	; (8001f20 <HAL_GPIO_Init+0x2f8>)
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	4a5d      	ldr	r2, [pc, #372]	; (8001f20 <HAL_GPIO_Init+0x2f8>)
 8001daa:	f043 0301 	orr.w	r3, r3, #1
 8001dae:	6213      	str	r3, [r2, #32]
 8001db0:	4b5b      	ldr	r3, [pc, #364]	; (8001f20 <HAL_GPIO_Init+0x2f8>)
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	60bb      	str	r3, [r7, #8]
 8001dba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001dbc:	4a59      	ldr	r2, [pc, #356]	; (8001f24 <HAL_GPIO_Init+0x2fc>)
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	089b      	lsrs	r3, r3, #2
 8001dc2:	3302      	adds	r3, #2
 8001dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	f003 0303 	and.w	r3, r3, #3
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	220f      	movs	r2, #15
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a51      	ldr	r2, [pc, #324]	; (8001f28 <HAL_GPIO_Init+0x300>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d025      	beq.n	8001e34 <HAL_GPIO_Init+0x20c>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a50      	ldr	r2, [pc, #320]	; (8001f2c <HAL_GPIO_Init+0x304>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d01f      	beq.n	8001e30 <HAL_GPIO_Init+0x208>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a4f      	ldr	r2, [pc, #316]	; (8001f30 <HAL_GPIO_Init+0x308>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d019      	beq.n	8001e2c <HAL_GPIO_Init+0x204>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a4e      	ldr	r2, [pc, #312]	; (8001f34 <HAL_GPIO_Init+0x30c>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d013      	beq.n	8001e28 <HAL_GPIO_Init+0x200>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a4d      	ldr	r2, [pc, #308]	; (8001f38 <HAL_GPIO_Init+0x310>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d00d      	beq.n	8001e24 <HAL_GPIO_Init+0x1fc>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a4c      	ldr	r2, [pc, #304]	; (8001f3c <HAL_GPIO_Init+0x314>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d007      	beq.n	8001e20 <HAL_GPIO_Init+0x1f8>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a4b      	ldr	r2, [pc, #300]	; (8001f40 <HAL_GPIO_Init+0x318>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d101      	bne.n	8001e1c <HAL_GPIO_Init+0x1f4>
 8001e18:	2306      	movs	r3, #6
 8001e1a:	e00c      	b.n	8001e36 <HAL_GPIO_Init+0x20e>
 8001e1c:	2307      	movs	r3, #7
 8001e1e:	e00a      	b.n	8001e36 <HAL_GPIO_Init+0x20e>
 8001e20:	2305      	movs	r3, #5
 8001e22:	e008      	b.n	8001e36 <HAL_GPIO_Init+0x20e>
 8001e24:	2304      	movs	r3, #4
 8001e26:	e006      	b.n	8001e36 <HAL_GPIO_Init+0x20e>
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e004      	b.n	8001e36 <HAL_GPIO_Init+0x20e>
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	e002      	b.n	8001e36 <HAL_GPIO_Init+0x20e>
 8001e30:	2301      	movs	r3, #1
 8001e32:	e000      	b.n	8001e36 <HAL_GPIO_Init+0x20e>
 8001e34:	2300      	movs	r3, #0
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	f002 0203 	and.w	r2, r2, #3
 8001e3c:	0092      	lsls	r2, r2, #2
 8001e3e:	4093      	lsls	r3, r2
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e46:	4937      	ldr	r1, [pc, #220]	; (8001f24 <HAL_GPIO_Init+0x2fc>)
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	089b      	lsrs	r3, r3, #2
 8001e4c:	3302      	adds	r3, #2
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e54:	4b3b      	ldr	r3, [pc, #236]	; (8001f44 <HAL_GPIO_Init+0x31c>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	4013      	ands	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e78:	4a32      	ldr	r2, [pc, #200]	; (8001f44 <HAL_GPIO_Init+0x31c>)
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e7e:	4b31      	ldr	r3, [pc, #196]	; (8001f44 <HAL_GPIO_Init+0x31c>)
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	43db      	mvns	r3, r3
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ea2:	4a28      	ldr	r2, [pc, #160]	; (8001f44 <HAL_GPIO_Init+0x31c>)
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ea8:	4b26      	ldr	r3, [pc, #152]	; (8001f44 <HAL_GPIO_Init+0x31c>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ecc:	4a1d      	ldr	r2, [pc, #116]	; (8001f44 <HAL_GPIO_Init+0x31c>)
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ed2:	4b1c      	ldr	r3, [pc, #112]	; (8001f44 <HAL_GPIO_Init+0x31c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	43db      	mvns	r3, r3
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ef6:	4a13      	ldr	r2, [pc, #76]	; (8001f44 <HAL_GPIO_Init+0x31c>)
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	3301      	adds	r3, #1
 8001f00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	fa22 f303 	lsr.w	r3, r2, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f47f ae97 	bne.w	8001c40 <HAL_GPIO_Init+0x18>
  }
}
 8001f12:	bf00      	nop
 8001f14:	bf00      	nop
 8001f16:	371c      	adds	r7, #28
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	40023800 	.word	0x40023800
 8001f24:	40010000 	.word	0x40010000
 8001f28:	40020000 	.word	0x40020000
 8001f2c:	40020400 	.word	0x40020400
 8001f30:	40020800 	.word	0x40020800
 8001f34:	40020c00 	.word	0x40020c00
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	40021400 	.word	0x40021400
 8001f40:	40021800 	.word	0x40021800
 8001f44:	40010400 	.word	0x40010400

08001f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	460b      	mov	r3, r1
 8001f52:	807b      	strh	r3, [r7, #2]
 8001f54:	4613      	mov	r3, r2
 8001f56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f58:	787b      	ldrb	r3, [r7, #1]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f5e:	887a      	ldrh	r2, [r7, #2]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001f64:	e003      	b.n	8001f6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001f66:	887b      	ldrh	r3, [r7, #2]
 8001f68:	041a      	lsls	r2, r3, #16
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	619a      	str	r2, [r3, #24]
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr

08001f78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b088      	sub	sp, #32
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e31d      	b.n	80025c6 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f8a:	4b94      	ldr	r3, [pc, #592]	; (80021dc <HAL_RCC_OscConfig+0x264>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 030c 	and.w	r3, r3, #12
 8001f92:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f94:	4b91      	ldr	r3, [pc, #580]	; (80021dc <HAL_RCC_OscConfig+0x264>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f9c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d07b      	beq.n	80020a2 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	2b08      	cmp	r3, #8
 8001fae:	d006      	beq.n	8001fbe <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	2b0c      	cmp	r3, #12
 8001fb4:	d10f      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x5e>
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fbc:	d10b      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fbe:	4b87      	ldr	r3, [pc, #540]	; (80021dc <HAL_RCC_OscConfig+0x264>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d06a      	beq.n	80020a0 <HAL_RCC_OscConfig+0x128>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d166      	bne.n	80020a0 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e2f7      	b.n	80025c6 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d106      	bne.n	8001fec <HAL_RCC_OscConfig+0x74>
 8001fde:	4b7f      	ldr	r3, [pc, #508]	; (80021dc <HAL_RCC_OscConfig+0x264>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a7e      	ldr	r2, [pc, #504]	; (80021dc <HAL_RCC_OscConfig+0x264>)
 8001fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	e02d      	b.n	8002048 <HAL_RCC_OscConfig+0xd0>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d10c      	bne.n	800200e <HAL_RCC_OscConfig+0x96>
 8001ff4:	4b79      	ldr	r3, [pc, #484]	; (80021dc <HAL_RCC_OscConfig+0x264>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a78      	ldr	r2, [pc, #480]	; (80021dc <HAL_RCC_OscConfig+0x264>)
 8001ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ffe:	6013      	str	r3, [r2, #0]
 8002000:	4b76      	ldr	r3, [pc, #472]	; (80021dc <HAL_RCC_OscConfig+0x264>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a75      	ldr	r2, [pc, #468]	; (80021dc <HAL_RCC_OscConfig+0x264>)
 8002006:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800200a:	6013      	str	r3, [r2, #0]
 800200c:	e01c      	b.n	8002048 <HAL_RCC_OscConfig+0xd0>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b05      	cmp	r3, #5
 8002014:	d10c      	bne.n	8002030 <HAL_RCC_OscConfig+0xb8>
 8002016:	4b71      	ldr	r3, [pc, #452]	; (80021dc <HAL_RCC_OscConfig+0x264>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a70      	ldr	r2, [pc, #448]	; (80021dc <HAL_RCC_OscConfig+0x264>)
 800201c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	4b6e      	ldr	r3, [pc, #440]	; (80021dc <HAL_RCC_OscConfig+0x264>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a6d      	ldr	r2, [pc, #436]	; (80021dc <HAL_RCC_OscConfig+0x264>)
 8002028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	e00b      	b.n	8002048 <HAL_RCC_OscConfig+0xd0>
 8002030:	4b6a      	ldr	r3, [pc, #424]	; (80021dc <HAL_RCC_OscConfig+0x264>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a69      	ldr	r2, [pc, #420]	; (80021dc <HAL_RCC_OscConfig+0x264>)
 8002036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800203a:	6013      	str	r3, [r2, #0]
 800203c:	4b67      	ldr	r3, [pc, #412]	; (80021dc <HAL_RCC_OscConfig+0x264>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a66      	ldr	r2, [pc, #408]	; (80021dc <HAL_RCC_OscConfig+0x264>)
 8002042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002046:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d013      	beq.n	8002078 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002050:	f7ff fbac 	bl	80017ac <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002058:	f7ff fba8 	bl	80017ac <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b64      	cmp	r3, #100	; 0x64
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e2ad      	b.n	80025c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800206a:	4b5c      	ldr	r3, [pc, #368]	; (80021dc <HAL_RCC_OscConfig+0x264>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0f0      	beq.n	8002058 <HAL_RCC_OscConfig+0xe0>
 8002076:	e014      	b.n	80020a2 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002078:	f7ff fb98 	bl	80017ac <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002080:	f7ff fb94 	bl	80017ac <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b64      	cmp	r3, #100	; 0x64
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e299      	b.n	80025c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002092:	4b52      	ldr	r3, [pc, #328]	; (80021dc <HAL_RCC_OscConfig+0x264>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f0      	bne.n	8002080 <HAL_RCC_OscConfig+0x108>
 800209e:	e000      	b.n	80020a2 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d05a      	beq.n	8002164 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	2b04      	cmp	r3, #4
 80020b2:	d005      	beq.n	80020c0 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	2b0c      	cmp	r3, #12
 80020b8:	d119      	bne.n	80020ee <HAL_RCC_OscConfig+0x176>
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d116      	bne.n	80020ee <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020c0:	4b46      	ldr	r3, [pc, #280]	; (80021dc <HAL_RCC_OscConfig+0x264>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d005      	beq.n	80020d8 <HAL_RCC_OscConfig+0x160>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d001      	beq.n	80020d8 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e276      	b.n	80025c6 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020d8:	4b40      	ldr	r3, [pc, #256]	; (80021dc <HAL_RCC_OscConfig+0x264>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	021b      	lsls	r3, r3, #8
 80020e6:	493d      	ldr	r1, [pc, #244]	; (80021dc <HAL_RCC_OscConfig+0x264>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ec:	e03a      	b.n	8002164 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d020      	beq.n	8002138 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020f6:	4b3a      	ldr	r3, [pc, #232]	; (80021e0 <HAL_RCC_OscConfig+0x268>)
 80020f8:	2201      	movs	r2, #1
 80020fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fc:	f7ff fb56 	bl	80017ac <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002104:	f7ff fb52 	bl	80017ac <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e257      	b.n	80025c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002116:	4b31      	ldr	r3, [pc, #196]	; (80021dc <HAL_RCC_OscConfig+0x264>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d0f0      	beq.n	8002104 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002122:	4b2e      	ldr	r3, [pc, #184]	; (80021dc <HAL_RCC_OscConfig+0x264>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	021b      	lsls	r3, r3, #8
 8002130:	492a      	ldr	r1, [pc, #168]	; (80021dc <HAL_RCC_OscConfig+0x264>)
 8002132:	4313      	orrs	r3, r2
 8002134:	604b      	str	r3, [r1, #4]
 8002136:	e015      	b.n	8002164 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002138:	4b29      	ldr	r3, [pc, #164]	; (80021e0 <HAL_RCC_OscConfig+0x268>)
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213e:	f7ff fb35 	bl	80017ac <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002144:	e008      	b.n	8002158 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002146:	f7ff fb31 	bl	80017ac <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e236      	b.n	80025c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002158:	4b20      	ldr	r3, [pc, #128]	; (80021dc <HAL_RCC_OscConfig+0x264>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1f0      	bne.n	8002146 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0310 	and.w	r3, r3, #16
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 80b8 	beq.w	80022e2 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d170      	bne.n	800225a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002178:	4b18      	ldr	r3, [pc, #96]	; (80021dc <HAL_RCC_OscConfig+0x264>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002180:	2b00      	cmp	r3, #0
 8002182:	d005      	beq.n	8002190 <HAL_RCC_OscConfig+0x218>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e21a      	b.n	80025c6 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a1a      	ldr	r2, [r3, #32]
 8002194:	4b11      	ldr	r3, [pc, #68]	; (80021dc <HAL_RCC_OscConfig+0x264>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800219c:	429a      	cmp	r2, r3
 800219e:	d921      	bls.n	80021e4 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a1b      	ldr	r3, [r3, #32]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f000 fc7d 	bl	8002aa4 <RCC_SetFlashLatencyFromMSIRange>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e208      	b.n	80025c6 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021b4:	4b09      	ldr	r3, [pc, #36]	; (80021dc <HAL_RCC_OscConfig+0x264>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	4906      	ldr	r1, [pc, #24]	; (80021dc <HAL_RCC_OscConfig+0x264>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021c6:	4b05      	ldr	r3, [pc, #20]	; (80021dc <HAL_RCC_OscConfig+0x264>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	061b      	lsls	r3, r3, #24
 80021d4:	4901      	ldr	r1, [pc, #4]	; (80021dc <HAL_RCC_OscConfig+0x264>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	604b      	str	r3, [r1, #4]
 80021da:	e020      	b.n	800221e <HAL_RCC_OscConfig+0x2a6>
 80021dc:	40023800 	.word	0x40023800
 80021e0:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021e4:	4b99      	ldr	r3, [pc, #612]	; (800244c <HAL_RCC_OscConfig+0x4d4>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	4996      	ldr	r1, [pc, #600]	; (800244c <HAL_RCC_OscConfig+0x4d4>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021f6:	4b95      	ldr	r3, [pc, #596]	; (800244c <HAL_RCC_OscConfig+0x4d4>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	061b      	lsls	r3, r3, #24
 8002204:	4991      	ldr	r1, [pc, #580]	; (800244c <HAL_RCC_OscConfig+0x4d4>)
 8002206:	4313      	orrs	r3, r2
 8002208:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a1b      	ldr	r3, [r3, #32]
 800220e:	4618      	mov	r0, r3
 8002210:	f000 fc48 	bl	8002aa4 <RCC_SetFlashLatencyFromMSIRange>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e1d3      	b.n	80025c6 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	0b5b      	lsrs	r3, r3, #13
 8002224:	3301      	adds	r3, #1
 8002226:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800222e:	4a87      	ldr	r2, [pc, #540]	; (800244c <HAL_RCC_OscConfig+0x4d4>)
 8002230:	6892      	ldr	r2, [r2, #8]
 8002232:	0912      	lsrs	r2, r2, #4
 8002234:	f002 020f 	and.w	r2, r2, #15
 8002238:	4985      	ldr	r1, [pc, #532]	; (8002450 <HAL_RCC_OscConfig+0x4d8>)
 800223a:	5c8a      	ldrb	r2, [r1, r2]
 800223c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800223e:	4a85      	ldr	r2, [pc, #532]	; (8002454 <HAL_RCC_OscConfig+0x4dc>)
 8002240:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002242:	4b85      	ldr	r3, [pc, #532]	; (8002458 <HAL_RCC_OscConfig+0x4e0>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff fa64 	bl	8001714 <HAL_InitTick>
 800224c:	4603      	mov	r3, r0
 800224e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d045      	beq.n	80022e2 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002256:	7bfb      	ldrb	r3, [r7, #15]
 8002258:	e1b5      	b.n	80025c6 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d029      	beq.n	80022b6 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002262:	4b7e      	ldr	r3, [pc, #504]	; (800245c <HAL_RCC_OscConfig+0x4e4>)
 8002264:	2201      	movs	r2, #1
 8002266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002268:	f7ff faa0 	bl	80017ac <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002270:	f7ff fa9c 	bl	80017ac <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e1a1      	b.n	80025c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002282:	4b72      	ldr	r3, [pc, #456]	; (800244c <HAL_RCC_OscConfig+0x4d4>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0f0      	beq.n	8002270 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800228e:	4b6f      	ldr	r3, [pc, #444]	; (800244c <HAL_RCC_OscConfig+0x4d4>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	496c      	ldr	r1, [pc, #432]	; (800244c <HAL_RCC_OscConfig+0x4d4>)
 800229c:	4313      	orrs	r3, r2
 800229e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022a0:	4b6a      	ldr	r3, [pc, #424]	; (800244c <HAL_RCC_OscConfig+0x4d4>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	69db      	ldr	r3, [r3, #28]
 80022ac:	061b      	lsls	r3, r3, #24
 80022ae:	4967      	ldr	r1, [pc, #412]	; (800244c <HAL_RCC_OscConfig+0x4d4>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	604b      	str	r3, [r1, #4]
 80022b4:	e015      	b.n	80022e2 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80022b6:	4b69      	ldr	r3, [pc, #420]	; (800245c <HAL_RCC_OscConfig+0x4e4>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022bc:	f7ff fa76 	bl	80017ac <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022c4:	f7ff fa72 	bl	80017ac <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e177      	b.n	80025c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80022d6:	4b5d      	ldr	r3, [pc, #372]	; (800244c <HAL_RCC_OscConfig+0x4d4>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0308 	and.w	r3, r3, #8
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d030      	beq.n	8002350 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d016      	beq.n	8002324 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022f6:	4b5a      	ldr	r3, [pc, #360]	; (8002460 <HAL_RCC_OscConfig+0x4e8>)
 80022f8:	2201      	movs	r2, #1
 80022fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022fc:	f7ff fa56 	bl	80017ac <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002304:	f7ff fa52 	bl	80017ac <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e157      	b.n	80025c6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002316:	4b4d      	ldr	r3, [pc, #308]	; (800244c <HAL_RCC_OscConfig+0x4d4>)
 8002318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0f0      	beq.n	8002304 <HAL_RCC_OscConfig+0x38c>
 8002322:	e015      	b.n	8002350 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002324:	4b4e      	ldr	r3, [pc, #312]	; (8002460 <HAL_RCC_OscConfig+0x4e8>)
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800232a:	f7ff fa3f 	bl	80017ac <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002332:	f7ff fa3b 	bl	80017ac <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e140      	b.n	80025c6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002344:	4b41      	ldr	r3, [pc, #260]	; (800244c <HAL_RCC_OscConfig+0x4d4>)
 8002346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1f0      	bne.n	8002332 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 80b5 	beq.w	80024c8 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800235e:	2300      	movs	r3, #0
 8002360:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002362:	4b3a      	ldr	r3, [pc, #232]	; (800244c <HAL_RCC_OscConfig+0x4d4>)
 8002364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d10d      	bne.n	800238a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800236e:	4b37      	ldr	r3, [pc, #220]	; (800244c <HAL_RCC_OscConfig+0x4d4>)
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	4a36      	ldr	r2, [pc, #216]	; (800244c <HAL_RCC_OscConfig+0x4d4>)
 8002374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002378:	6253      	str	r3, [r2, #36]	; 0x24
 800237a:	4b34      	ldr	r3, [pc, #208]	; (800244c <HAL_RCC_OscConfig+0x4d4>)
 800237c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002382:	60bb      	str	r3, [r7, #8]
 8002384:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002386:	2301      	movs	r3, #1
 8002388:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238a:	4b36      	ldr	r3, [pc, #216]	; (8002464 <HAL_RCC_OscConfig+0x4ec>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002392:	2b00      	cmp	r3, #0
 8002394:	d118      	bne.n	80023c8 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002396:	4b33      	ldr	r3, [pc, #204]	; (8002464 <HAL_RCC_OscConfig+0x4ec>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a32      	ldr	r2, [pc, #200]	; (8002464 <HAL_RCC_OscConfig+0x4ec>)
 800239c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023a2:	f7ff fa03 	bl	80017ac <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a8:	e008      	b.n	80023bc <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023aa:	f7ff f9ff 	bl	80017ac <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b64      	cmp	r3, #100	; 0x64
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e104      	b.n	80025c6 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023bc:	4b29      	ldr	r3, [pc, #164]	; (8002464 <HAL_RCC_OscConfig+0x4ec>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0f0      	beq.n	80023aa <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d106      	bne.n	80023de <HAL_RCC_OscConfig+0x466>
 80023d0:	4b1e      	ldr	r3, [pc, #120]	; (800244c <HAL_RCC_OscConfig+0x4d4>)
 80023d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d4:	4a1d      	ldr	r2, [pc, #116]	; (800244c <HAL_RCC_OscConfig+0x4d4>)
 80023d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023da:	6353      	str	r3, [r2, #52]	; 0x34
 80023dc:	e02d      	b.n	800243a <HAL_RCC_OscConfig+0x4c2>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10c      	bne.n	8002400 <HAL_RCC_OscConfig+0x488>
 80023e6:	4b19      	ldr	r3, [pc, #100]	; (800244c <HAL_RCC_OscConfig+0x4d4>)
 80023e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ea:	4a18      	ldr	r2, [pc, #96]	; (800244c <HAL_RCC_OscConfig+0x4d4>)
 80023ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023f0:	6353      	str	r3, [r2, #52]	; 0x34
 80023f2:	4b16      	ldr	r3, [pc, #88]	; (800244c <HAL_RCC_OscConfig+0x4d4>)
 80023f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f6:	4a15      	ldr	r2, [pc, #84]	; (800244c <HAL_RCC_OscConfig+0x4d4>)
 80023f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023fc:	6353      	str	r3, [r2, #52]	; 0x34
 80023fe:	e01c      	b.n	800243a <HAL_RCC_OscConfig+0x4c2>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	2b05      	cmp	r3, #5
 8002406:	d10c      	bne.n	8002422 <HAL_RCC_OscConfig+0x4aa>
 8002408:	4b10      	ldr	r3, [pc, #64]	; (800244c <HAL_RCC_OscConfig+0x4d4>)
 800240a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800240c:	4a0f      	ldr	r2, [pc, #60]	; (800244c <HAL_RCC_OscConfig+0x4d4>)
 800240e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002412:	6353      	str	r3, [r2, #52]	; 0x34
 8002414:	4b0d      	ldr	r3, [pc, #52]	; (800244c <HAL_RCC_OscConfig+0x4d4>)
 8002416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002418:	4a0c      	ldr	r2, [pc, #48]	; (800244c <HAL_RCC_OscConfig+0x4d4>)
 800241a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800241e:	6353      	str	r3, [r2, #52]	; 0x34
 8002420:	e00b      	b.n	800243a <HAL_RCC_OscConfig+0x4c2>
 8002422:	4b0a      	ldr	r3, [pc, #40]	; (800244c <HAL_RCC_OscConfig+0x4d4>)
 8002424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002426:	4a09      	ldr	r2, [pc, #36]	; (800244c <HAL_RCC_OscConfig+0x4d4>)
 8002428:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800242c:	6353      	str	r3, [r2, #52]	; 0x34
 800242e:	4b07      	ldr	r3, [pc, #28]	; (800244c <HAL_RCC_OscConfig+0x4d4>)
 8002430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002432:	4a06      	ldr	r2, [pc, #24]	; (800244c <HAL_RCC_OscConfig+0x4d4>)
 8002434:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002438:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d024      	beq.n	800248c <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002442:	f7ff f9b3 	bl	80017ac <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002448:	e019      	b.n	800247e <HAL_RCC_OscConfig+0x506>
 800244a:	bf00      	nop
 800244c:	40023800 	.word	0x40023800
 8002450:	080046e4 	.word	0x080046e4
 8002454:	20000000 	.word	0x20000000
 8002458:	20000004 	.word	0x20000004
 800245c:	42470020 	.word	0x42470020
 8002460:	42470680 	.word	0x42470680
 8002464:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002468:	f7ff f9a0 	bl	80017ac <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	f241 3288 	movw	r2, #5000	; 0x1388
 8002476:	4293      	cmp	r3, r2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e0a3      	b.n	80025c6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800247e:	4b54      	ldr	r3, [pc, #336]	; (80025d0 <HAL_RCC_OscConfig+0x658>)
 8002480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002482:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002486:	2b00      	cmp	r3, #0
 8002488:	d0ee      	beq.n	8002468 <HAL_RCC_OscConfig+0x4f0>
 800248a:	e014      	b.n	80024b6 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800248c:	f7ff f98e 	bl	80017ac <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002492:	e00a      	b.n	80024aa <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002494:	f7ff f98a 	bl	80017ac <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e08d      	b.n	80025c6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80024aa:	4b49      	ldr	r3, [pc, #292]	; (80025d0 <HAL_RCC_OscConfig+0x658>)
 80024ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1ee      	bne.n	8002494 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024b6:	7ffb      	ldrb	r3, [r7, #31]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d105      	bne.n	80024c8 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024bc:	4b44      	ldr	r3, [pc, #272]	; (80025d0 <HAL_RCC_OscConfig+0x658>)
 80024be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c0:	4a43      	ldr	r2, [pc, #268]	; (80025d0 <HAL_RCC_OscConfig+0x658>)
 80024c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024c6:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d079      	beq.n	80025c4 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	2b0c      	cmp	r3, #12
 80024d4:	d056      	beq.n	8002584 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d13b      	bne.n	8002556 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024de:	4b3d      	ldr	r3, [pc, #244]	; (80025d4 <HAL_RCC_OscConfig+0x65c>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e4:	f7ff f962 	bl	80017ac <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ec:	f7ff f95e 	bl	80017ac <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e063      	b.n	80025c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024fe:	4b34      	ldr	r3, [pc, #208]	; (80025d0 <HAL_RCC_OscConfig+0x658>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1f0      	bne.n	80024ec <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800250a:	4b31      	ldr	r3, [pc, #196]	; (80025d0 <HAL_RCC_OscConfig+0x658>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251a:	4319      	orrs	r1, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002520:	430b      	orrs	r3, r1
 8002522:	492b      	ldr	r1, [pc, #172]	; (80025d0 <HAL_RCC_OscConfig+0x658>)
 8002524:	4313      	orrs	r3, r2
 8002526:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002528:	4b2a      	ldr	r3, [pc, #168]	; (80025d4 <HAL_RCC_OscConfig+0x65c>)
 800252a:	2201      	movs	r2, #1
 800252c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252e:	f7ff f93d 	bl	80017ac <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002536:	f7ff f939 	bl	80017ac <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e03e      	b.n	80025c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002548:	4b21      	ldr	r3, [pc, #132]	; (80025d0 <HAL_RCC_OscConfig+0x658>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0f0      	beq.n	8002536 <HAL_RCC_OscConfig+0x5be>
 8002554:	e036      	b.n	80025c4 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002556:	4b1f      	ldr	r3, [pc, #124]	; (80025d4 <HAL_RCC_OscConfig+0x65c>)
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255c:	f7ff f926 	bl	80017ac <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002564:	f7ff f922 	bl	80017ac <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e027      	b.n	80025c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002576:	4b16      	ldr	r3, [pc, #88]	; (80025d0 <HAL_RCC_OscConfig+0x658>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f0      	bne.n	8002564 <HAL_RCC_OscConfig+0x5ec>
 8002582:	e01f      	b.n	80025c4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002588:	2b01      	cmp	r3, #1
 800258a:	d101      	bne.n	8002590 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e01a      	b.n	80025c6 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002590:	4b0f      	ldr	r3, [pc, #60]	; (80025d0 <HAL_RCC_OscConfig+0x658>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d10d      	bne.n	80025c0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d106      	bne.n	80025c0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80025bc:	429a      	cmp	r2, r3
 80025be:	d001      	beq.n	80025c4 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e000      	b.n	80025c6 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3720      	adds	r7, #32
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40023800 	.word	0x40023800
 80025d4:	42470060 	.word	0x42470060

080025d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e11a      	b.n	8002822 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025ec:	4b8f      	ldr	r3, [pc, #572]	; (800282c <HAL_RCC_ClockConfig+0x254>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d919      	bls.n	800262e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d105      	bne.n	800260c <HAL_RCC_ClockConfig+0x34>
 8002600:	4b8a      	ldr	r3, [pc, #552]	; (800282c <HAL_RCC_ClockConfig+0x254>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a89      	ldr	r2, [pc, #548]	; (800282c <HAL_RCC_ClockConfig+0x254>)
 8002606:	f043 0304 	orr.w	r3, r3, #4
 800260a:	6013      	str	r3, [r2, #0]
 800260c:	4b87      	ldr	r3, [pc, #540]	; (800282c <HAL_RCC_ClockConfig+0x254>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f023 0201 	bic.w	r2, r3, #1
 8002614:	4985      	ldr	r1, [pc, #532]	; (800282c <HAL_RCC_ClockConfig+0x254>)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	4313      	orrs	r3, r2
 800261a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800261c:	4b83      	ldr	r3, [pc, #524]	; (800282c <HAL_RCC_ClockConfig+0x254>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	429a      	cmp	r2, r3
 8002628:	d001      	beq.n	800262e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e0f9      	b.n	8002822 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d008      	beq.n	800264c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800263a:	4b7d      	ldr	r3, [pc, #500]	; (8002830 <HAL_RCC_ClockConfig+0x258>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	497a      	ldr	r1, [pc, #488]	; (8002830 <HAL_RCC_ClockConfig+0x258>)
 8002648:	4313      	orrs	r3, r2
 800264a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b00      	cmp	r3, #0
 8002656:	f000 808e 	beq.w	8002776 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b02      	cmp	r3, #2
 8002660:	d107      	bne.n	8002672 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002662:	4b73      	ldr	r3, [pc, #460]	; (8002830 <HAL_RCC_ClockConfig+0x258>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d121      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e0d7      	b.n	8002822 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b03      	cmp	r3, #3
 8002678:	d107      	bne.n	800268a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800267a:	4b6d      	ldr	r3, [pc, #436]	; (8002830 <HAL_RCC_ClockConfig+0x258>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d115      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e0cb      	b.n	8002822 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d107      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002692:	4b67      	ldr	r3, [pc, #412]	; (8002830 <HAL_RCC_ClockConfig+0x258>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d109      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e0bf      	b.n	8002822 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80026a2:	4b63      	ldr	r3, [pc, #396]	; (8002830 <HAL_RCC_ClockConfig+0x258>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e0b7      	b.n	8002822 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026b2:	4b5f      	ldr	r3, [pc, #380]	; (8002830 <HAL_RCC_ClockConfig+0x258>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f023 0203 	bic.w	r2, r3, #3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	495c      	ldr	r1, [pc, #368]	; (8002830 <HAL_RCC_ClockConfig+0x258>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026c4:	f7ff f872 	bl	80017ac <HAL_GetTick>
 80026c8:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d112      	bne.n	80026f8 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80026d2:	e00a      	b.n	80026ea <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026d4:	f7ff f86a 	bl	80017ac <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e09b      	b.n	8002822 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80026ea:	4b51      	ldr	r3, [pc, #324]	; (8002830 <HAL_RCC_ClockConfig+0x258>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 030c 	and.w	r3, r3, #12
 80026f2:	2b08      	cmp	r3, #8
 80026f4:	d1ee      	bne.n	80026d4 <HAL_RCC_ClockConfig+0xfc>
 80026f6:	e03e      	b.n	8002776 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b03      	cmp	r3, #3
 80026fe:	d112      	bne.n	8002726 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002700:	e00a      	b.n	8002718 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002702:	f7ff f853 	bl	80017ac <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002710:	4293      	cmp	r3, r2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e084      	b.n	8002822 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002718:	4b45      	ldr	r3, [pc, #276]	; (8002830 <HAL_RCC_ClockConfig+0x258>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f003 030c 	and.w	r3, r3, #12
 8002720:	2b0c      	cmp	r3, #12
 8002722:	d1ee      	bne.n	8002702 <HAL_RCC_ClockConfig+0x12a>
 8002724:	e027      	b.n	8002776 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d11d      	bne.n	800276a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800272e:	e00a      	b.n	8002746 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002730:	f7ff f83c 	bl	80017ac <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	f241 3288 	movw	r2, #5000	; 0x1388
 800273e:	4293      	cmp	r3, r2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e06d      	b.n	8002822 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002746:	4b3a      	ldr	r3, [pc, #232]	; (8002830 <HAL_RCC_ClockConfig+0x258>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 030c 	and.w	r3, r3, #12
 800274e:	2b04      	cmp	r3, #4
 8002750:	d1ee      	bne.n	8002730 <HAL_RCC_ClockConfig+0x158>
 8002752:	e010      	b.n	8002776 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002754:	f7ff f82a 	bl	80017ac <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002762:	4293      	cmp	r3, r2
 8002764:	d901      	bls.n	800276a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e05b      	b.n	8002822 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800276a:	4b31      	ldr	r3, [pc, #196]	; (8002830 <HAL_RCC_ClockConfig+0x258>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 030c 	and.w	r3, r3, #12
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1ee      	bne.n	8002754 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002776:	4b2d      	ldr	r3, [pc, #180]	; (800282c <HAL_RCC_ClockConfig+0x254>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	429a      	cmp	r2, r3
 8002782:	d219      	bcs.n	80027b8 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d105      	bne.n	8002796 <HAL_RCC_ClockConfig+0x1be>
 800278a:	4b28      	ldr	r3, [pc, #160]	; (800282c <HAL_RCC_ClockConfig+0x254>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a27      	ldr	r2, [pc, #156]	; (800282c <HAL_RCC_ClockConfig+0x254>)
 8002790:	f043 0304 	orr.w	r3, r3, #4
 8002794:	6013      	str	r3, [r2, #0]
 8002796:	4b25      	ldr	r3, [pc, #148]	; (800282c <HAL_RCC_ClockConfig+0x254>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f023 0201 	bic.w	r2, r3, #1
 800279e:	4923      	ldr	r1, [pc, #140]	; (800282c <HAL_RCC_ClockConfig+0x254>)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a6:	4b21      	ldr	r3, [pc, #132]	; (800282c <HAL_RCC_ClockConfig+0x254>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d001      	beq.n	80027b8 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e034      	b.n	8002822 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d008      	beq.n	80027d6 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027c4:	4b1a      	ldr	r3, [pc, #104]	; (8002830 <HAL_RCC_ClockConfig+0x258>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	4917      	ldr	r1, [pc, #92]	; (8002830 <HAL_RCC_ClockConfig+0x258>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d009      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027e2:	4b13      	ldr	r3, [pc, #76]	; (8002830 <HAL_RCC_ClockConfig+0x258>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	490f      	ldr	r1, [pc, #60]	; (8002830 <HAL_RCC_ClockConfig+0x258>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027f6:	f000 f823 	bl	8002840 <HAL_RCC_GetSysClockFreq>
 80027fa:	4602      	mov	r2, r0
 80027fc:	4b0c      	ldr	r3, [pc, #48]	; (8002830 <HAL_RCC_ClockConfig+0x258>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	091b      	lsrs	r3, r3, #4
 8002802:	f003 030f 	and.w	r3, r3, #15
 8002806:	490b      	ldr	r1, [pc, #44]	; (8002834 <HAL_RCC_ClockConfig+0x25c>)
 8002808:	5ccb      	ldrb	r3, [r1, r3]
 800280a:	fa22 f303 	lsr.w	r3, r2, r3
 800280e:	4a0a      	ldr	r2, [pc, #40]	; (8002838 <HAL_RCC_ClockConfig+0x260>)
 8002810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002812:	4b0a      	ldr	r3, [pc, #40]	; (800283c <HAL_RCC_ClockConfig+0x264>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f7fe ff7c 	bl	8001714 <HAL_InitTick>
 800281c:	4603      	mov	r3, r0
 800281e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002820:	7afb      	ldrb	r3, [r7, #11]
}
 8002822:	4618      	mov	r0, r3
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40023c00 	.word	0x40023c00
 8002830:	40023800 	.word	0x40023800
 8002834:	080046e4 	.word	0x080046e4
 8002838:	20000000 	.word	0x20000000
 800283c:	20000004 	.word	0x20000004

08002840 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002844:	b092      	sub	sp, #72	; 0x48
 8002846:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002848:	4b79      	ldr	r3, [pc, #484]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800284e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002850:	f003 030c 	and.w	r3, r3, #12
 8002854:	2b0c      	cmp	r3, #12
 8002856:	d00d      	beq.n	8002874 <HAL_RCC_GetSysClockFreq+0x34>
 8002858:	2b0c      	cmp	r3, #12
 800285a:	f200 80d5 	bhi.w	8002a08 <HAL_RCC_GetSysClockFreq+0x1c8>
 800285e:	2b04      	cmp	r3, #4
 8002860:	d002      	beq.n	8002868 <HAL_RCC_GetSysClockFreq+0x28>
 8002862:	2b08      	cmp	r3, #8
 8002864:	d003      	beq.n	800286e <HAL_RCC_GetSysClockFreq+0x2e>
 8002866:	e0cf      	b.n	8002a08 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002868:	4b72      	ldr	r3, [pc, #456]	; (8002a34 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800286a:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800286c:	e0da      	b.n	8002a24 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800286e:	4b72      	ldr	r3, [pc, #456]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8002870:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002872:	e0d7      	b.n	8002a24 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002876:	0c9b      	lsrs	r3, r3, #18
 8002878:	f003 020f 	and.w	r2, r3, #15
 800287c:	4b6f      	ldr	r3, [pc, #444]	; (8002a3c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800287e:	5c9b      	ldrb	r3, [r3, r2]
 8002880:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002884:	0d9b      	lsrs	r3, r3, #22
 8002886:	f003 0303 	and.w	r3, r3, #3
 800288a:	3301      	adds	r3, #1
 800288c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800288e:	4b68      	ldr	r3, [pc, #416]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d05d      	beq.n	8002956 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800289a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800289c:	2200      	movs	r2, #0
 800289e:	4618      	mov	r0, r3
 80028a0:	4611      	mov	r1, r2
 80028a2:	4604      	mov	r4, r0
 80028a4:	460d      	mov	r5, r1
 80028a6:	4622      	mov	r2, r4
 80028a8:	462b      	mov	r3, r5
 80028aa:	f04f 0000 	mov.w	r0, #0
 80028ae:	f04f 0100 	mov.w	r1, #0
 80028b2:	0159      	lsls	r1, r3, #5
 80028b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028b8:	0150      	lsls	r0, r2, #5
 80028ba:	4602      	mov	r2, r0
 80028bc:	460b      	mov	r3, r1
 80028be:	4621      	mov	r1, r4
 80028c0:	1a51      	subs	r1, r2, r1
 80028c2:	6139      	str	r1, [r7, #16]
 80028c4:	4629      	mov	r1, r5
 80028c6:	eb63 0301 	sbc.w	r3, r3, r1
 80028ca:	617b      	str	r3, [r7, #20]
 80028cc:	f04f 0200 	mov.w	r2, #0
 80028d0:	f04f 0300 	mov.w	r3, #0
 80028d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028d8:	4659      	mov	r1, fp
 80028da:	018b      	lsls	r3, r1, #6
 80028dc:	4651      	mov	r1, sl
 80028de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028e2:	4651      	mov	r1, sl
 80028e4:	018a      	lsls	r2, r1, #6
 80028e6:	46d4      	mov	ip, sl
 80028e8:	ebb2 080c 	subs.w	r8, r2, ip
 80028ec:	4659      	mov	r1, fp
 80028ee:	eb63 0901 	sbc.w	r9, r3, r1
 80028f2:	f04f 0200 	mov.w	r2, #0
 80028f6:	f04f 0300 	mov.w	r3, #0
 80028fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002902:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002906:	4690      	mov	r8, r2
 8002908:	4699      	mov	r9, r3
 800290a:	4623      	mov	r3, r4
 800290c:	eb18 0303 	adds.w	r3, r8, r3
 8002910:	60bb      	str	r3, [r7, #8]
 8002912:	462b      	mov	r3, r5
 8002914:	eb49 0303 	adc.w	r3, r9, r3
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	f04f 0200 	mov.w	r2, #0
 800291e:	f04f 0300 	mov.w	r3, #0
 8002922:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002926:	4629      	mov	r1, r5
 8002928:	024b      	lsls	r3, r1, #9
 800292a:	4620      	mov	r0, r4
 800292c:	4629      	mov	r1, r5
 800292e:	4604      	mov	r4, r0
 8002930:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8002934:	4601      	mov	r1, r0
 8002936:	024a      	lsls	r2, r1, #9
 8002938:	4610      	mov	r0, r2
 800293a:	4619      	mov	r1, r3
 800293c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800293e:	2200      	movs	r2, #0
 8002940:	62bb      	str	r3, [r7, #40]	; 0x28
 8002942:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002944:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002948:	f7fd fc2a 	bl	80001a0 <__aeabi_uldivmod>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4613      	mov	r3, r2
 8002952:	647b      	str	r3, [r7, #68]	; 0x44
 8002954:	e055      	b.n	8002a02 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002958:	2200      	movs	r2, #0
 800295a:	623b      	str	r3, [r7, #32]
 800295c:	627a      	str	r2, [r7, #36]	; 0x24
 800295e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002962:	4642      	mov	r2, r8
 8002964:	464b      	mov	r3, r9
 8002966:	f04f 0000 	mov.w	r0, #0
 800296a:	f04f 0100 	mov.w	r1, #0
 800296e:	0159      	lsls	r1, r3, #5
 8002970:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002974:	0150      	lsls	r0, r2, #5
 8002976:	4602      	mov	r2, r0
 8002978:	460b      	mov	r3, r1
 800297a:	46c4      	mov	ip, r8
 800297c:	ebb2 0a0c 	subs.w	sl, r2, ip
 8002980:	4640      	mov	r0, r8
 8002982:	4649      	mov	r1, r9
 8002984:	468c      	mov	ip, r1
 8002986:	eb63 0b0c 	sbc.w	fp, r3, ip
 800298a:	f04f 0200 	mov.w	r2, #0
 800298e:	f04f 0300 	mov.w	r3, #0
 8002992:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002996:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800299a:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800299e:	ebb2 040a 	subs.w	r4, r2, sl
 80029a2:	eb63 050b 	sbc.w	r5, r3, fp
 80029a6:	f04f 0200 	mov.w	r2, #0
 80029aa:	f04f 0300 	mov.w	r3, #0
 80029ae:	00eb      	lsls	r3, r5, #3
 80029b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029b4:	00e2      	lsls	r2, r4, #3
 80029b6:	4614      	mov	r4, r2
 80029b8:	461d      	mov	r5, r3
 80029ba:	4603      	mov	r3, r0
 80029bc:	18e3      	adds	r3, r4, r3
 80029be:	603b      	str	r3, [r7, #0]
 80029c0:	460b      	mov	r3, r1
 80029c2:	eb45 0303 	adc.w	r3, r5, r3
 80029c6:	607b      	str	r3, [r7, #4]
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	f04f 0300 	mov.w	r3, #0
 80029d0:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029d4:	4629      	mov	r1, r5
 80029d6:	028b      	lsls	r3, r1, #10
 80029d8:	4620      	mov	r0, r4
 80029da:	4629      	mov	r1, r5
 80029dc:	4604      	mov	r4, r0
 80029de:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80029e2:	4601      	mov	r1, r0
 80029e4:	028a      	lsls	r2, r1, #10
 80029e6:	4610      	mov	r0, r2
 80029e8:	4619      	mov	r1, r3
 80029ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ec:	2200      	movs	r2, #0
 80029ee:	61bb      	str	r3, [r7, #24]
 80029f0:	61fa      	str	r2, [r7, #28]
 80029f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029f6:	f7fd fbd3 	bl	80001a0 <__aeabi_uldivmod>
 80029fa:	4602      	mov	r2, r0
 80029fc:	460b      	mov	r3, r1
 80029fe:	4613      	mov	r3, r2
 8002a00:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8002a02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a04:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002a06:	e00d      	b.n	8002a24 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002a08:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	0b5b      	lsrs	r3, r3, #13
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a16:	3301      	adds	r3, #1
 8002a18:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002a22:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3748      	adds	r7, #72	; 0x48
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a30:	40023800 	.word	0x40023800
 8002a34:	00f42400 	.word	0x00f42400
 8002a38:	007a1200 	.word	0x007a1200
 8002a3c:	080046d8 	.word	0x080046d8

08002a40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a44:	4b02      	ldr	r3, [pc, #8]	; (8002a50 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a46:	681b      	ldr	r3, [r3, #0]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bc80      	pop	{r7}
 8002a4e:	4770      	bx	lr
 8002a50:	20000000 	.word	0x20000000

08002a54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a58:	f7ff fff2 	bl	8002a40 <HAL_RCC_GetHCLKFreq>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	0a1b      	lsrs	r3, r3, #8
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	4903      	ldr	r1, [pc, #12]	; (8002a78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a6a:	5ccb      	ldrb	r3, [r1, r3]
 8002a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40023800 	.word	0x40023800
 8002a78:	080046f4 	.word	0x080046f4

08002a7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a80:	f7ff ffde 	bl	8002a40 <HAL_RCC_GetHCLKFreq>
 8002a84:	4602      	mov	r2, r0
 8002a86:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	0adb      	lsrs	r3, r3, #11
 8002a8c:	f003 0307 	and.w	r3, r3, #7
 8002a90:	4903      	ldr	r1, [pc, #12]	; (8002aa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a92:	5ccb      	ldrb	r3, [r1, r3]
 8002a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	080046f4 	.word	0x080046f4

08002aa4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b087      	sub	sp, #28
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002aac:	2300      	movs	r3, #0
 8002aae:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002ab0:	4b29      	ldr	r3, [pc, #164]	; (8002b58 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d12c      	bne.n	8002b16 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002abc:	4b26      	ldr	r3, [pc, #152]	; (8002b58 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d005      	beq.n	8002ad4 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002ac8:	4b24      	ldr	r3, [pc, #144]	; (8002b5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002ad0:	617b      	str	r3, [r7, #20]
 8002ad2:	e016      	b.n	8002b02 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ad4:	4b20      	ldr	r3, [pc, #128]	; (8002b58 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad8:	4a1f      	ldr	r2, [pc, #124]	; (8002b58 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002ada:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ade:	6253      	str	r3, [r2, #36]	; 0x24
 8002ae0:	4b1d      	ldr	r3, [pc, #116]	; (8002b58 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae8:	60fb      	str	r3, [r7, #12]
 8002aea:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002aec:	4b1b      	ldr	r3, [pc, #108]	; (8002b5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002af4:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002af6:	4b18      	ldr	r3, [pc, #96]	; (8002b58 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afa:	4a17      	ldr	r2, [pc, #92]	; (8002b58 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002afc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b00:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002b08:	d105      	bne.n	8002b16 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002b10:	d101      	bne.n	8002b16 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8002b12:	2301      	movs	r3, #1
 8002b14:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d105      	bne.n	8002b28 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002b1c:	4b10      	ldr	r3, [pc, #64]	; (8002b60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a0f      	ldr	r2, [pc, #60]	; (8002b60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b22:	f043 0304 	orr.w	r3, r3, #4
 8002b26:	6013      	str	r3, [r2, #0]
 8002b28:	4b0d      	ldr	r3, [pc, #52]	; (8002b60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f023 0201 	bic.w	r2, r3, #1
 8002b30:	490b      	ldr	r1, [pc, #44]	; (8002b60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b38:	4b09      	ldr	r3, [pc, #36]	; (8002b60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d001      	beq.n	8002b4a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e000      	b.n	8002b4c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	371c      	adds	r7, #28
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc80      	pop	{r7}
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	40007000 	.word	0x40007000
 8002b60:	40023c00 	.word	0x40023c00

08002b64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e042      	b.n	8002bfc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d106      	bne.n	8002b90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7fe fb96 	bl	80012bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2224      	movs	r2, #36	; 0x24
 8002b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68da      	ldr	r2, [r3, #12]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ba6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 fb89 	bl	80032c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	691a      	ldr	r2, [r3, #16]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	695a      	ldr	r2, [r3, #20]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68da      	ldr	r2, [r3, #12]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2220      	movs	r2, #32
 8002be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b08a      	sub	sp, #40	; 0x28
 8002c08:	af02      	add	r7, sp, #8
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	603b      	str	r3, [r7, #0]
 8002c10:	4613      	mov	r3, r2
 8002c12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b20      	cmp	r3, #32
 8002c22:	d16d      	bne.n	8002d00 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d002      	beq.n	8002c30 <HAL_UART_Transmit+0x2c>
 8002c2a:	88fb      	ldrh	r3, [r7, #6]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e066      	b.n	8002d02 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2221      	movs	r2, #33	; 0x21
 8002c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c42:	f7fe fdb3 	bl	80017ac <HAL_GetTick>
 8002c46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	88fa      	ldrh	r2, [r7, #6]
 8002c4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	88fa      	ldrh	r2, [r7, #6]
 8002c52:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c5c:	d108      	bne.n	8002c70 <HAL_UART_Transmit+0x6c>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d104      	bne.n	8002c70 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002c66:	2300      	movs	r3, #0
 8002c68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	61bb      	str	r3, [r7, #24]
 8002c6e:	e003      	b.n	8002c78 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c74:	2300      	movs	r3, #0
 8002c76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c78:	e02a      	b.n	8002cd0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	9300      	str	r3, [sp, #0]
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	2200      	movs	r2, #0
 8002c82:	2180      	movs	r1, #128	; 0x80
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f000 f989 	bl	8002f9c <UART_WaitOnFlagUntilTimeout>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e036      	b.n	8002d02 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10b      	bne.n	8002cb2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	881b      	ldrh	r3, [r3, #0]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ca8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	3302      	adds	r3, #2
 8002cae:	61bb      	str	r3, [r7, #24]
 8002cb0:	e007      	b.n	8002cc2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	781a      	ldrb	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1cf      	bne.n	8002c7a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	2140      	movs	r1, #64	; 0x40
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 f959 	bl	8002f9c <UART_WaitOnFlagUntilTimeout>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e006      	b.n	8002d02 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	e000      	b.n	8002d02 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002d00:	2302      	movs	r3, #2
  }
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3720      	adds	r7, #32
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b084      	sub	sp, #16
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	60f8      	str	r0, [r7, #12]
 8002d12:	60b9      	str	r1, [r7, #8]
 8002d14:	4613      	mov	r3, r2
 8002d16:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b20      	cmp	r3, #32
 8002d22:	d112      	bne.n	8002d4a <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d002      	beq.n	8002d30 <HAL_UART_Receive_DMA+0x26>
 8002d2a:	88fb      	ldrh	r3, [r7, #6]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e00b      	b.n	8002d4c <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002d3a:	88fb      	ldrh	r3, [r7, #6]
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	68b9      	ldr	r1, [r7, #8]
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f000 f999 	bl	8003078 <UART_Start_Receive_DMA>
 8002d46:	4603      	mov	r3, r0
 8002d48:	e000      	b.n	8002d4c <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002d4a:	2302      	movs	r3, #2
  }
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bc80      	pop	{r7}
 8002d64:	4770      	bx	lr

08002d66 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bc80      	pop	{r7}
 8002d76:	4770      	bx	lr

08002d78 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bc80      	pop	{r7}
 8002d88:	4770      	bx	lr

08002d8a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	460b      	mov	r3, r1
 8002d94:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d96:	bf00      	nop
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr

08002da0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b09c      	sub	sp, #112	; 0x70
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0320 	and.w	r3, r3, #32
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d172      	bne.n	8002ea2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	330c      	adds	r3, #12
 8002dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dcc:	e853 3f00 	ldrex	r3, [r3]
 8002dd0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002dd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dd8:	66bb      	str	r3, [r7, #104]	; 0x68
 8002dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	330c      	adds	r3, #12
 8002de0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002de2:	65ba      	str	r2, [r7, #88]	; 0x58
 8002de4:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002de8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002dea:	e841 2300 	strex	r3, r2, [r1]
 8002dee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002df0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1e5      	bne.n	8002dc2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	3314      	adds	r3, #20
 8002dfc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e00:	e853 3f00 	ldrex	r3, [r3]
 8002e04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e08:	f023 0301 	bic.w	r3, r3, #1
 8002e0c:	667b      	str	r3, [r7, #100]	; 0x64
 8002e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	3314      	adds	r3, #20
 8002e14:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002e16:	647a      	str	r2, [r7, #68]	; 0x44
 8002e18:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e1e:	e841 2300 	strex	r3, r2, [r1]
 8002e22:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1e5      	bne.n	8002df6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	3314      	adds	r3, #20
 8002e30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	e853 3f00 	ldrex	r3, [r3]
 8002e38:	623b      	str	r3, [r7, #32]
   return(result);
 8002e3a:	6a3b      	ldr	r3, [r7, #32]
 8002e3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e40:	663b      	str	r3, [r7, #96]	; 0x60
 8002e42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	3314      	adds	r3, #20
 8002e48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e4a:	633a      	str	r2, [r7, #48]	; 0x30
 8002e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e52:	e841 2300 	strex	r3, r2, [r1]
 8002e56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1e5      	bne.n	8002e2a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e60:	2220      	movs	r2, #32
 8002e62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d119      	bne.n	8002ea2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	330c      	adds	r3, #12
 8002e74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	e853 3f00 	ldrex	r3, [r3]
 8002e7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f023 0310 	bic.w	r3, r3, #16
 8002e84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	330c      	adds	r3, #12
 8002e8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002e8e:	61fa      	str	r2, [r7, #28]
 8002e90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e92:	69b9      	ldr	r1, [r7, #24]
 8002e94:	69fa      	ldr	r2, [r7, #28]
 8002e96:	e841 2300 	strex	r3, r2, [r1]
 8002e9a:	617b      	str	r3, [r7, #20]
   return(result);
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1e5      	bne.n	8002e6e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d106      	bne.n	8002ebe <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eb2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002eb8:	f7ff ff67 	bl	8002d8a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002ebc:	e002      	b.n	8002ec4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8002ebe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002ec0:	f7ff ff48 	bl	8002d54 <HAL_UART_RxCpltCallback>
}
 8002ec4:	bf00      	nop
 8002ec6:	3770      	adds	r7, #112	; 0x70
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2201      	movs	r2, #1
 8002ede:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d108      	bne.n	8002efa <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002eec:	085b      	lsrs	r3, r3, #1
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f7ff ff49 	bl	8002d8a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002ef8:	e002      	b.n	8002f00 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f7ff ff33 	bl	8002d66 <HAL_UART_RxHalfCpltCallback>
}
 8002f00:	bf00      	nop
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f18:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f24:	2b80      	cmp	r3, #128	; 0x80
 8002f26:	bf0c      	ite	eq
 8002f28:	2301      	moveq	r3, #1
 8002f2a:	2300      	movne	r3, #0
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b21      	cmp	r3, #33	; 0x21
 8002f3a:	d108      	bne.n	8002f4e <UART_DMAError+0x46>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d005      	beq.n	8002f4e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	2200      	movs	r2, #0
 8002f46:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002f48:	68b8      	ldr	r0, [r7, #8]
 8002f4a:	f000 f92f 	bl	80031ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f58:	2b40      	cmp	r3, #64	; 0x40
 8002f5a:	bf0c      	ite	eq
 8002f5c:	2301      	moveq	r3, #1
 8002f5e:	2300      	movne	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b22      	cmp	r3, #34	; 0x22
 8002f6e:	d108      	bne.n	8002f82 <UART_DMAError+0x7a>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d005      	beq.n	8002f82 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002f7c:	68b8      	ldr	r0, [r7, #8]
 8002f7e:	f000 f93c 	bl	80031fa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f86:	f043 0210 	orr.w	r2, r3, #16
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f8e:	68b8      	ldr	r0, [r7, #8]
 8002f90:	f7ff fef2 	bl	8002d78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f94:	bf00      	nop
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b090      	sub	sp, #64	; 0x40
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	603b      	str	r3, [r7, #0]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fac:	e050      	b.n	8003050 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb4:	d04c      	beq.n	8003050 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002fb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d007      	beq.n	8002fcc <UART_WaitOnFlagUntilTimeout+0x30>
 8002fbc:	f7fe fbf6 	bl	80017ac <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d241      	bcs.n	8003050 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	330c      	adds	r3, #12
 8002fd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd6:	e853 3f00 	ldrex	r3, [r3]
 8002fda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fde:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	330c      	adds	r3, #12
 8002fea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fec:	637a      	str	r2, [r7, #52]	; 0x34
 8002fee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ff2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ff4:	e841 2300 	strex	r3, r2, [r1]
 8002ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1e5      	bne.n	8002fcc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	3314      	adds	r3, #20
 8003006:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	e853 3f00 	ldrex	r3, [r3]
 800300e:	613b      	str	r3, [r7, #16]
   return(result);
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	f023 0301 	bic.w	r3, r3, #1
 8003016:	63bb      	str	r3, [r7, #56]	; 0x38
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	3314      	adds	r3, #20
 800301e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003020:	623a      	str	r2, [r7, #32]
 8003022:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003024:	69f9      	ldr	r1, [r7, #28]
 8003026:	6a3a      	ldr	r2, [r7, #32]
 8003028:	e841 2300 	strex	r3, r2, [r1]
 800302c:	61bb      	str	r3, [r7, #24]
   return(result);
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1e5      	bne.n	8003000 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2220      	movs	r2, #32
 8003038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2220      	movs	r2, #32
 8003040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e00f      	b.n	8003070 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	4013      	ands	r3, r2
 800305a:	68ba      	ldr	r2, [r7, #8]
 800305c:	429a      	cmp	r2, r3
 800305e:	bf0c      	ite	eq
 8003060:	2301      	moveq	r3, #1
 8003062:	2300      	movne	r3, #0
 8003064:	b2db      	uxtb	r3, r3
 8003066:	461a      	mov	r2, r3
 8003068:	79fb      	ldrb	r3, [r7, #7]
 800306a:	429a      	cmp	r2, r3
 800306c:	d09f      	beq.n	8002fae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3740      	adds	r7, #64	; 0x40
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b098      	sub	sp, #96	; 0x60
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	4613      	mov	r3, r2
 8003084:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	88fa      	ldrh	r2, [r7, #6]
 8003090:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2222      	movs	r2, #34	; 0x22
 800309c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a4:	4a3e      	ldr	r2, [pc, #248]	; (80031a0 <UART_Start_Receive_DMA+0x128>)
 80030a6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ac:	4a3d      	ldr	r2, [pc, #244]	; (80031a4 <UART_Start_Receive_DMA+0x12c>)
 80030ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b4:	4a3c      	ldr	r2, [pc, #240]	; (80031a8 <UART_Start_Receive_DMA+0x130>)
 80030b6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030bc:	2200      	movs	r2, #0
 80030be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80030c0:	f107 0308 	add.w	r3, r7, #8
 80030c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	3304      	adds	r3, #4
 80030d0:	4619      	mov	r1, r3
 80030d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	88fb      	ldrh	r3, [r7, #6]
 80030d8:	f7fe fd16 	bl	8001b08 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80030dc:	2300      	movs	r3, #0
 80030de:	613b      	str	r3, [r7, #16]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	613b      	str	r3, [r7, #16]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	613b      	str	r3, [r7, #16]
 80030f0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d019      	beq.n	800312e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	330c      	adds	r3, #12
 8003100:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003102:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003104:	e853 3f00 	ldrex	r3, [r3]
 8003108:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800310a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800310c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003110:	65bb      	str	r3, [r7, #88]	; 0x58
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	330c      	adds	r3, #12
 8003118:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800311a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800311c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800311e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003120:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003122:	e841 2300 	strex	r3, r2, [r1]
 8003126:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003128:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1e5      	bne.n	80030fa <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	3314      	adds	r3, #20
 8003134:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003138:	e853 3f00 	ldrex	r3, [r3]
 800313c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800313e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003140:	f043 0301 	orr.w	r3, r3, #1
 8003144:	657b      	str	r3, [r7, #84]	; 0x54
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	3314      	adds	r3, #20
 800314c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800314e:	63ba      	str	r2, [r7, #56]	; 0x38
 8003150:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003152:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003154:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003156:	e841 2300 	strex	r3, r2, [r1]
 800315a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800315c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1e5      	bne.n	800312e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	3314      	adds	r3, #20
 8003168:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	e853 3f00 	ldrex	r3, [r3]
 8003170:	617b      	str	r3, [r7, #20]
   return(result);
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003178:	653b      	str	r3, [r7, #80]	; 0x50
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	3314      	adds	r3, #20
 8003180:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003182:	627a      	str	r2, [r7, #36]	; 0x24
 8003184:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003186:	6a39      	ldr	r1, [r7, #32]
 8003188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800318a:	e841 2300 	strex	r3, r2, [r1]
 800318e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1e5      	bne.n	8003162 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3760      	adds	r7, #96	; 0x60
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	08002da1 	.word	0x08002da1
 80031a4:	08002ecd 	.word	0x08002ecd
 80031a8:	08002f09 	.word	0x08002f09

080031ac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b089      	sub	sp, #36	; 0x24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	330c      	adds	r3, #12
 80031ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	e853 3f00 	ldrex	r3, [r3]
 80031c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80031ca:	61fb      	str	r3, [r7, #28]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	330c      	adds	r3, #12
 80031d2:	69fa      	ldr	r2, [r7, #28]
 80031d4:	61ba      	str	r2, [r7, #24]
 80031d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d8:	6979      	ldr	r1, [r7, #20]
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	e841 2300 	strex	r3, r2, [r1]
 80031e0:	613b      	str	r3, [r7, #16]
   return(result);
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1e5      	bne.n	80031b4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2220      	movs	r2, #32
 80031ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80031f0:	bf00      	nop
 80031f2:	3724      	adds	r7, #36	; 0x24
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bc80      	pop	{r7}
 80031f8:	4770      	bx	lr

080031fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b095      	sub	sp, #84	; 0x54
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	330c      	adds	r3, #12
 8003208:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800320c:	e853 3f00 	ldrex	r3, [r3]
 8003210:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003214:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003218:	64fb      	str	r3, [r7, #76]	; 0x4c
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	330c      	adds	r3, #12
 8003220:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003222:	643a      	str	r2, [r7, #64]	; 0x40
 8003224:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003226:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003228:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800322a:	e841 2300 	strex	r3, r2, [r1]
 800322e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1e5      	bne.n	8003202 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	3314      	adds	r3, #20
 800323c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800323e:	6a3b      	ldr	r3, [r7, #32]
 8003240:	e853 3f00 	ldrex	r3, [r3]
 8003244:	61fb      	str	r3, [r7, #28]
   return(result);
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	f023 0301 	bic.w	r3, r3, #1
 800324c:	64bb      	str	r3, [r7, #72]	; 0x48
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	3314      	adds	r3, #20
 8003254:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003256:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003258:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800325a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800325c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800325e:	e841 2300 	strex	r3, r2, [r1]
 8003262:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1e5      	bne.n	8003236 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	2b01      	cmp	r3, #1
 8003270:	d119      	bne.n	80032a6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	330c      	adds	r3, #12
 8003278:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	e853 3f00 	ldrex	r3, [r3]
 8003280:	60bb      	str	r3, [r7, #8]
   return(result);
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	f023 0310 	bic.w	r3, r3, #16
 8003288:	647b      	str	r3, [r7, #68]	; 0x44
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	330c      	adds	r3, #12
 8003290:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003292:	61ba      	str	r2, [r7, #24]
 8003294:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003296:	6979      	ldr	r1, [r7, #20]
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	e841 2300 	strex	r3, r2, [r1]
 800329e:	613b      	str	r3, [r7, #16]
   return(result);
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1e5      	bne.n	8003272 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2220      	movs	r2, #32
 80032aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80032b4:	bf00      	nop
 80032b6:	3754      	adds	r7, #84	; 0x54
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bc80      	pop	{r7}
 80032bc:	4770      	bx	lr
	...

080032c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68da      	ldr	r2, [r3, #12]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	430a      	orrs	r2, r1
 80032dc:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	689a      	ldr	r2, [r3, #8]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	431a      	orrs	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	431a      	orrs	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003300:	f023 030c 	bic.w	r3, r3, #12
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	6812      	ldr	r2, [r2, #0]
 8003308:	68b9      	ldr	r1, [r7, #8]
 800330a:	430b      	orrs	r3, r1
 800330c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	699a      	ldr	r2, [r3, #24]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	430a      	orrs	r2, r1
 8003322:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a55      	ldr	r2, [pc, #340]	; (8003480 <UART_SetConfig+0x1c0>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d103      	bne.n	8003336 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800332e:	f7ff fba5 	bl	8002a7c <HAL_RCC_GetPCLK2Freq>
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	e002      	b.n	800333c <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003336:	f7ff fb8d 	bl	8002a54 <HAL_RCC_GetPCLK1Freq>
 800333a:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	69db      	ldr	r3, [r3, #28]
 8003340:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003344:	d14c      	bne.n	80033e0 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	4613      	mov	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4413      	add	r3, r2
 800334e:	009a      	lsls	r2, r3, #2
 8003350:	441a      	add	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	fbb2 f3f3 	udiv	r3, r2, r3
 800335c:	4a49      	ldr	r2, [pc, #292]	; (8003484 <UART_SetConfig+0x1c4>)
 800335e:	fba2 2303 	umull	r2, r3, r2, r3
 8003362:	095b      	lsrs	r3, r3, #5
 8003364:	0119      	lsls	r1, r3, #4
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	4613      	mov	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	009a      	lsls	r2, r3, #2
 8003370:	441a      	add	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	fbb2 f2f3 	udiv	r2, r2, r3
 800337c:	4b41      	ldr	r3, [pc, #260]	; (8003484 <UART_SetConfig+0x1c4>)
 800337e:	fba3 0302 	umull	r0, r3, r3, r2
 8003382:	095b      	lsrs	r3, r3, #5
 8003384:	2064      	movs	r0, #100	; 0x64
 8003386:	fb00 f303 	mul.w	r3, r0, r3
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	3332      	adds	r3, #50	; 0x32
 8003390:	4a3c      	ldr	r2, [pc, #240]	; (8003484 <UART_SetConfig+0x1c4>)
 8003392:	fba2 2303 	umull	r2, r3, r2, r3
 8003396:	095b      	lsrs	r3, r3, #5
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800339e:	4419      	add	r1, r3
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	4613      	mov	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	009a      	lsls	r2, r3, #2
 80033aa:	441a      	add	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80033b6:	4b33      	ldr	r3, [pc, #204]	; (8003484 <UART_SetConfig+0x1c4>)
 80033b8:	fba3 0302 	umull	r0, r3, r3, r2
 80033bc:	095b      	lsrs	r3, r3, #5
 80033be:	2064      	movs	r0, #100	; 0x64
 80033c0:	fb00 f303 	mul.w	r3, r0, r3
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	3332      	adds	r3, #50	; 0x32
 80033ca:	4a2e      	ldr	r2, [pc, #184]	; (8003484 <UART_SetConfig+0x1c4>)
 80033cc:	fba2 2303 	umull	r2, r3, r2, r3
 80033d0:	095b      	lsrs	r3, r3, #5
 80033d2:	f003 0207 	and.w	r2, r3, #7
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	440a      	add	r2, r1
 80033dc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033de:	e04a      	b.n	8003476 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	4613      	mov	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	009a      	lsls	r2, r3, #2
 80033ea:	441a      	add	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f6:	4a23      	ldr	r2, [pc, #140]	; (8003484 <UART_SetConfig+0x1c4>)
 80033f8:	fba2 2303 	umull	r2, r3, r2, r3
 80033fc:	095b      	lsrs	r3, r3, #5
 80033fe:	0119      	lsls	r1, r3, #4
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	4613      	mov	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4413      	add	r3, r2
 8003408:	009a      	lsls	r2, r3, #2
 800340a:	441a      	add	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	fbb2 f2f3 	udiv	r2, r2, r3
 8003416:	4b1b      	ldr	r3, [pc, #108]	; (8003484 <UART_SetConfig+0x1c4>)
 8003418:	fba3 0302 	umull	r0, r3, r3, r2
 800341c:	095b      	lsrs	r3, r3, #5
 800341e:	2064      	movs	r0, #100	; 0x64
 8003420:	fb00 f303 	mul.w	r3, r0, r3
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	011b      	lsls	r3, r3, #4
 8003428:	3332      	adds	r3, #50	; 0x32
 800342a:	4a16      	ldr	r2, [pc, #88]	; (8003484 <UART_SetConfig+0x1c4>)
 800342c:	fba2 2303 	umull	r2, r3, r2, r3
 8003430:	095b      	lsrs	r3, r3, #5
 8003432:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003436:	4419      	add	r1, r3
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	4613      	mov	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	009a      	lsls	r2, r3, #2
 8003442:	441a      	add	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	fbb2 f2f3 	udiv	r2, r2, r3
 800344e:	4b0d      	ldr	r3, [pc, #52]	; (8003484 <UART_SetConfig+0x1c4>)
 8003450:	fba3 0302 	umull	r0, r3, r3, r2
 8003454:	095b      	lsrs	r3, r3, #5
 8003456:	2064      	movs	r0, #100	; 0x64
 8003458:	fb00 f303 	mul.w	r3, r0, r3
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	011b      	lsls	r3, r3, #4
 8003460:	3332      	adds	r3, #50	; 0x32
 8003462:	4a08      	ldr	r2, [pc, #32]	; (8003484 <UART_SetConfig+0x1c4>)
 8003464:	fba2 2303 	umull	r2, r3, r2, r3
 8003468:	095b      	lsrs	r3, r3, #5
 800346a:	f003 020f 	and.w	r2, r3, #15
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	440a      	add	r2, r1
 8003474:	609a      	str	r2, [r3, #8]
}
 8003476:	bf00      	nop
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	40013800 	.word	0x40013800
 8003484:	51eb851f 	.word	0x51eb851f

08003488 <__errno>:
 8003488:	4b01      	ldr	r3, [pc, #4]	; (8003490 <__errno+0x8>)
 800348a:	6818      	ldr	r0, [r3, #0]
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	2000000c 	.word	0x2000000c

08003494 <__libc_init_array>:
 8003494:	b570      	push	{r4, r5, r6, lr}
 8003496:	2600      	movs	r6, #0
 8003498:	4d0c      	ldr	r5, [pc, #48]	; (80034cc <__libc_init_array+0x38>)
 800349a:	4c0d      	ldr	r4, [pc, #52]	; (80034d0 <__libc_init_array+0x3c>)
 800349c:	1b64      	subs	r4, r4, r5
 800349e:	10a4      	asrs	r4, r4, #2
 80034a0:	42a6      	cmp	r6, r4
 80034a2:	d109      	bne.n	80034b8 <__libc_init_array+0x24>
 80034a4:	f001 f82c 	bl	8004500 <_init>
 80034a8:	2600      	movs	r6, #0
 80034aa:	4d0a      	ldr	r5, [pc, #40]	; (80034d4 <__libc_init_array+0x40>)
 80034ac:	4c0a      	ldr	r4, [pc, #40]	; (80034d8 <__libc_init_array+0x44>)
 80034ae:	1b64      	subs	r4, r4, r5
 80034b0:	10a4      	asrs	r4, r4, #2
 80034b2:	42a6      	cmp	r6, r4
 80034b4:	d105      	bne.n	80034c2 <__libc_init_array+0x2e>
 80034b6:	bd70      	pop	{r4, r5, r6, pc}
 80034b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80034bc:	4798      	blx	r3
 80034be:	3601      	adds	r6, #1
 80034c0:	e7ee      	b.n	80034a0 <__libc_init_array+0xc>
 80034c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80034c6:	4798      	blx	r3
 80034c8:	3601      	adds	r6, #1
 80034ca:	e7f2      	b.n	80034b2 <__libc_init_array+0x1e>
 80034cc:	0800479c 	.word	0x0800479c
 80034d0:	0800479c 	.word	0x0800479c
 80034d4:	0800479c 	.word	0x0800479c
 80034d8:	080047a0 	.word	0x080047a0

080034dc <memset>:
 80034dc:	4603      	mov	r3, r0
 80034de:	4402      	add	r2, r0
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d100      	bne.n	80034e6 <memset+0xa>
 80034e4:	4770      	bx	lr
 80034e6:	f803 1b01 	strb.w	r1, [r3], #1
 80034ea:	e7f9      	b.n	80034e0 <memset+0x4>

080034ec <iprintf>:
 80034ec:	b40f      	push	{r0, r1, r2, r3}
 80034ee:	4b0a      	ldr	r3, [pc, #40]	; (8003518 <iprintf+0x2c>)
 80034f0:	b513      	push	{r0, r1, r4, lr}
 80034f2:	681c      	ldr	r4, [r3, #0]
 80034f4:	b124      	cbz	r4, 8003500 <iprintf+0x14>
 80034f6:	69a3      	ldr	r3, [r4, #24]
 80034f8:	b913      	cbnz	r3, 8003500 <iprintf+0x14>
 80034fa:	4620      	mov	r0, r4
 80034fc:	f000 fa5a 	bl	80039b4 <__sinit>
 8003500:	ab05      	add	r3, sp, #20
 8003502:	4620      	mov	r0, r4
 8003504:	9a04      	ldr	r2, [sp, #16]
 8003506:	68a1      	ldr	r1, [r4, #8]
 8003508:	9301      	str	r3, [sp, #4]
 800350a:	f000 fc5d 	bl	8003dc8 <_vfiprintf_r>
 800350e:	b002      	add	sp, #8
 8003510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003514:	b004      	add	sp, #16
 8003516:	4770      	bx	lr
 8003518:	2000000c 	.word	0x2000000c

0800351c <_puts_r>:
 800351c:	b570      	push	{r4, r5, r6, lr}
 800351e:	460e      	mov	r6, r1
 8003520:	4605      	mov	r5, r0
 8003522:	b118      	cbz	r0, 800352c <_puts_r+0x10>
 8003524:	6983      	ldr	r3, [r0, #24]
 8003526:	b90b      	cbnz	r3, 800352c <_puts_r+0x10>
 8003528:	f000 fa44 	bl	80039b4 <__sinit>
 800352c:	69ab      	ldr	r3, [r5, #24]
 800352e:	68ac      	ldr	r4, [r5, #8]
 8003530:	b913      	cbnz	r3, 8003538 <_puts_r+0x1c>
 8003532:	4628      	mov	r0, r5
 8003534:	f000 fa3e 	bl	80039b4 <__sinit>
 8003538:	4b2c      	ldr	r3, [pc, #176]	; (80035ec <_puts_r+0xd0>)
 800353a:	429c      	cmp	r4, r3
 800353c:	d120      	bne.n	8003580 <_puts_r+0x64>
 800353e:	686c      	ldr	r4, [r5, #4]
 8003540:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003542:	07db      	lsls	r3, r3, #31
 8003544:	d405      	bmi.n	8003552 <_puts_r+0x36>
 8003546:	89a3      	ldrh	r3, [r4, #12]
 8003548:	0598      	lsls	r0, r3, #22
 800354a:	d402      	bmi.n	8003552 <_puts_r+0x36>
 800354c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800354e:	f000 facf 	bl	8003af0 <__retarget_lock_acquire_recursive>
 8003552:	89a3      	ldrh	r3, [r4, #12]
 8003554:	0719      	lsls	r1, r3, #28
 8003556:	d51d      	bpl.n	8003594 <_puts_r+0x78>
 8003558:	6923      	ldr	r3, [r4, #16]
 800355a:	b1db      	cbz	r3, 8003594 <_puts_r+0x78>
 800355c:	3e01      	subs	r6, #1
 800355e:	68a3      	ldr	r3, [r4, #8]
 8003560:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003564:	3b01      	subs	r3, #1
 8003566:	60a3      	str	r3, [r4, #8]
 8003568:	bb39      	cbnz	r1, 80035ba <_puts_r+0x9e>
 800356a:	2b00      	cmp	r3, #0
 800356c:	da38      	bge.n	80035e0 <_puts_r+0xc4>
 800356e:	4622      	mov	r2, r4
 8003570:	210a      	movs	r1, #10
 8003572:	4628      	mov	r0, r5
 8003574:	f000 f848 	bl	8003608 <__swbuf_r>
 8003578:	3001      	adds	r0, #1
 800357a:	d011      	beq.n	80035a0 <_puts_r+0x84>
 800357c:	250a      	movs	r5, #10
 800357e:	e011      	b.n	80035a4 <_puts_r+0x88>
 8003580:	4b1b      	ldr	r3, [pc, #108]	; (80035f0 <_puts_r+0xd4>)
 8003582:	429c      	cmp	r4, r3
 8003584:	d101      	bne.n	800358a <_puts_r+0x6e>
 8003586:	68ac      	ldr	r4, [r5, #8]
 8003588:	e7da      	b.n	8003540 <_puts_r+0x24>
 800358a:	4b1a      	ldr	r3, [pc, #104]	; (80035f4 <_puts_r+0xd8>)
 800358c:	429c      	cmp	r4, r3
 800358e:	bf08      	it	eq
 8003590:	68ec      	ldreq	r4, [r5, #12]
 8003592:	e7d5      	b.n	8003540 <_puts_r+0x24>
 8003594:	4621      	mov	r1, r4
 8003596:	4628      	mov	r0, r5
 8003598:	f000 f888 	bl	80036ac <__swsetup_r>
 800359c:	2800      	cmp	r0, #0
 800359e:	d0dd      	beq.n	800355c <_puts_r+0x40>
 80035a0:	f04f 35ff 	mov.w	r5, #4294967295
 80035a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035a6:	07da      	lsls	r2, r3, #31
 80035a8:	d405      	bmi.n	80035b6 <_puts_r+0x9a>
 80035aa:	89a3      	ldrh	r3, [r4, #12]
 80035ac:	059b      	lsls	r3, r3, #22
 80035ae:	d402      	bmi.n	80035b6 <_puts_r+0x9a>
 80035b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035b2:	f000 fa9e 	bl	8003af2 <__retarget_lock_release_recursive>
 80035b6:	4628      	mov	r0, r5
 80035b8:	bd70      	pop	{r4, r5, r6, pc}
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	da04      	bge.n	80035c8 <_puts_r+0xac>
 80035be:	69a2      	ldr	r2, [r4, #24]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	dc06      	bgt.n	80035d2 <_puts_r+0xb6>
 80035c4:	290a      	cmp	r1, #10
 80035c6:	d004      	beq.n	80035d2 <_puts_r+0xb6>
 80035c8:	6823      	ldr	r3, [r4, #0]
 80035ca:	1c5a      	adds	r2, r3, #1
 80035cc:	6022      	str	r2, [r4, #0]
 80035ce:	7019      	strb	r1, [r3, #0]
 80035d0:	e7c5      	b.n	800355e <_puts_r+0x42>
 80035d2:	4622      	mov	r2, r4
 80035d4:	4628      	mov	r0, r5
 80035d6:	f000 f817 	bl	8003608 <__swbuf_r>
 80035da:	3001      	adds	r0, #1
 80035dc:	d1bf      	bne.n	800355e <_puts_r+0x42>
 80035de:	e7df      	b.n	80035a0 <_puts_r+0x84>
 80035e0:	250a      	movs	r5, #10
 80035e2:	6823      	ldr	r3, [r4, #0]
 80035e4:	1c5a      	adds	r2, r3, #1
 80035e6:	6022      	str	r2, [r4, #0]
 80035e8:	701d      	strb	r5, [r3, #0]
 80035ea:	e7db      	b.n	80035a4 <_puts_r+0x88>
 80035ec:	08004720 	.word	0x08004720
 80035f0:	08004740 	.word	0x08004740
 80035f4:	08004700 	.word	0x08004700

080035f8 <puts>:
 80035f8:	4b02      	ldr	r3, [pc, #8]	; (8003604 <puts+0xc>)
 80035fa:	4601      	mov	r1, r0
 80035fc:	6818      	ldr	r0, [r3, #0]
 80035fe:	f7ff bf8d 	b.w	800351c <_puts_r>
 8003602:	bf00      	nop
 8003604:	2000000c 	.word	0x2000000c

08003608 <__swbuf_r>:
 8003608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800360a:	460e      	mov	r6, r1
 800360c:	4614      	mov	r4, r2
 800360e:	4605      	mov	r5, r0
 8003610:	b118      	cbz	r0, 800361a <__swbuf_r+0x12>
 8003612:	6983      	ldr	r3, [r0, #24]
 8003614:	b90b      	cbnz	r3, 800361a <__swbuf_r+0x12>
 8003616:	f000 f9cd 	bl	80039b4 <__sinit>
 800361a:	4b21      	ldr	r3, [pc, #132]	; (80036a0 <__swbuf_r+0x98>)
 800361c:	429c      	cmp	r4, r3
 800361e:	d12b      	bne.n	8003678 <__swbuf_r+0x70>
 8003620:	686c      	ldr	r4, [r5, #4]
 8003622:	69a3      	ldr	r3, [r4, #24]
 8003624:	60a3      	str	r3, [r4, #8]
 8003626:	89a3      	ldrh	r3, [r4, #12]
 8003628:	071a      	lsls	r2, r3, #28
 800362a:	d52f      	bpl.n	800368c <__swbuf_r+0x84>
 800362c:	6923      	ldr	r3, [r4, #16]
 800362e:	b36b      	cbz	r3, 800368c <__swbuf_r+0x84>
 8003630:	6923      	ldr	r3, [r4, #16]
 8003632:	6820      	ldr	r0, [r4, #0]
 8003634:	b2f6      	uxtb	r6, r6
 8003636:	1ac0      	subs	r0, r0, r3
 8003638:	6963      	ldr	r3, [r4, #20]
 800363a:	4637      	mov	r7, r6
 800363c:	4283      	cmp	r3, r0
 800363e:	dc04      	bgt.n	800364a <__swbuf_r+0x42>
 8003640:	4621      	mov	r1, r4
 8003642:	4628      	mov	r0, r5
 8003644:	f000 f922 	bl	800388c <_fflush_r>
 8003648:	bb30      	cbnz	r0, 8003698 <__swbuf_r+0x90>
 800364a:	68a3      	ldr	r3, [r4, #8]
 800364c:	3001      	adds	r0, #1
 800364e:	3b01      	subs	r3, #1
 8003650:	60a3      	str	r3, [r4, #8]
 8003652:	6823      	ldr	r3, [r4, #0]
 8003654:	1c5a      	adds	r2, r3, #1
 8003656:	6022      	str	r2, [r4, #0]
 8003658:	701e      	strb	r6, [r3, #0]
 800365a:	6963      	ldr	r3, [r4, #20]
 800365c:	4283      	cmp	r3, r0
 800365e:	d004      	beq.n	800366a <__swbuf_r+0x62>
 8003660:	89a3      	ldrh	r3, [r4, #12]
 8003662:	07db      	lsls	r3, r3, #31
 8003664:	d506      	bpl.n	8003674 <__swbuf_r+0x6c>
 8003666:	2e0a      	cmp	r6, #10
 8003668:	d104      	bne.n	8003674 <__swbuf_r+0x6c>
 800366a:	4621      	mov	r1, r4
 800366c:	4628      	mov	r0, r5
 800366e:	f000 f90d 	bl	800388c <_fflush_r>
 8003672:	b988      	cbnz	r0, 8003698 <__swbuf_r+0x90>
 8003674:	4638      	mov	r0, r7
 8003676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003678:	4b0a      	ldr	r3, [pc, #40]	; (80036a4 <__swbuf_r+0x9c>)
 800367a:	429c      	cmp	r4, r3
 800367c:	d101      	bne.n	8003682 <__swbuf_r+0x7a>
 800367e:	68ac      	ldr	r4, [r5, #8]
 8003680:	e7cf      	b.n	8003622 <__swbuf_r+0x1a>
 8003682:	4b09      	ldr	r3, [pc, #36]	; (80036a8 <__swbuf_r+0xa0>)
 8003684:	429c      	cmp	r4, r3
 8003686:	bf08      	it	eq
 8003688:	68ec      	ldreq	r4, [r5, #12]
 800368a:	e7ca      	b.n	8003622 <__swbuf_r+0x1a>
 800368c:	4621      	mov	r1, r4
 800368e:	4628      	mov	r0, r5
 8003690:	f000 f80c 	bl	80036ac <__swsetup_r>
 8003694:	2800      	cmp	r0, #0
 8003696:	d0cb      	beq.n	8003630 <__swbuf_r+0x28>
 8003698:	f04f 37ff 	mov.w	r7, #4294967295
 800369c:	e7ea      	b.n	8003674 <__swbuf_r+0x6c>
 800369e:	bf00      	nop
 80036a0:	08004720 	.word	0x08004720
 80036a4:	08004740 	.word	0x08004740
 80036a8:	08004700 	.word	0x08004700

080036ac <__swsetup_r>:
 80036ac:	4b32      	ldr	r3, [pc, #200]	; (8003778 <__swsetup_r+0xcc>)
 80036ae:	b570      	push	{r4, r5, r6, lr}
 80036b0:	681d      	ldr	r5, [r3, #0]
 80036b2:	4606      	mov	r6, r0
 80036b4:	460c      	mov	r4, r1
 80036b6:	b125      	cbz	r5, 80036c2 <__swsetup_r+0x16>
 80036b8:	69ab      	ldr	r3, [r5, #24]
 80036ba:	b913      	cbnz	r3, 80036c2 <__swsetup_r+0x16>
 80036bc:	4628      	mov	r0, r5
 80036be:	f000 f979 	bl	80039b4 <__sinit>
 80036c2:	4b2e      	ldr	r3, [pc, #184]	; (800377c <__swsetup_r+0xd0>)
 80036c4:	429c      	cmp	r4, r3
 80036c6:	d10f      	bne.n	80036e8 <__swsetup_r+0x3c>
 80036c8:	686c      	ldr	r4, [r5, #4]
 80036ca:	89a3      	ldrh	r3, [r4, #12]
 80036cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80036d0:	0719      	lsls	r1, r3, #28
 80036d2:	d42c      	bmi.n	800372e <__swsetup_r+0x82>
 80036d4:	06dd      	lsls	r5, r3, #27
 80036d6:	d411      	bmi.n	80036fc <__swsetup_r+0x50>
 80036d8:	2309      	movs	r3, #9
 80036da:	6033      	str	r3, [r6, #0]
 80036dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80036e0:	f04f 30ff 	mov.w	r0, #4294967295
 80036e4:	81a3      	strh	r3, [r4, #12]
 80036e6:	e03e      	b.n	8003766 <__swsetup_r+0xba>
 80036e8:	4b25      	ldr	r3, [pc, #148]	; (8003780 <__swsetup_r+0xd4>)
 80036ea:	429c      	cmp	r4, r3
 80036ec:	d101      	bne.n	80036f2 <__swsetup_r+0x46>
 80036ee:	68ac      	ldr	r4, [r5, #8]
 80036f0:	e7eb      	b.n	80036ca <__swsetup_r+0x1e>
 80036f2:	4b24      	ldr	r3, [pc, #144]	; (8003784 <__swsetup_r+0xd8>)
 80036f4:	429c      	cmp	r4, r3
 80036f6:	bf08      	it	eq
 80036f8:	68ec      	ldreq	r4, [r5, #12]
 80036fa:	e7e6      	b.n	80036ca <__swsetup_r+0x1e>
 80036fc:	0758      	lsls	r0, r3, #29
 80036fe:	d512      	bpl.n	8003726 <__swsetup_r+0x7a>
 8003700:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003702:	b141      	cbz	r1, 8003716 <__swsetup_r+0x6a>
 8003704:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003708:	4299      	cmp	r1, r3
 800370a:	d002      	beq.n	8003712 <__swsetup_r+0x66>
 800370c:	4630      	mov	r0, r6
 800370e:	f000 fa57 	bl	8003bc0 <_free_r>
 8003712:	2300      	movs	r3, #0
 8003714:	6363      	str	r3, [r4, #52]	; 0x34
 8003716:	89a3      	ldrh	r3, [r4, #12]
 8003718:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800371c:	81a3      	strh	r3, [r4, #12]
 800371e:	2300      	movs	r3, #0
 8003720:	6063      	str	r3, [r4, #4]
 8003722:	6923      	ldr	r3, [r4, #16]
 8003724:	6023      	str	r3, [r4, #0]
 8003726:	89a3      	ldrh	r3, [r4, #12]
 8003728:	f043 0308 	orr.w	r3, r3, #8
 800372c:	81a3      	strh	r3, [r4, #12]
 800372e:	6923      	ldr	r3, [r4, #16]
 8003730:	b94b      	cbnz	r3, 8003746 <__swsetup_r+0x9a>
 8003732:	89a3      	ldrh	r3, [r4, #12]
 8003734:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800373c:	d003      	beq.n	8003746 <__swsetup_r+0x9a>
 800373e:	4621      	mov	r1, r4
 8003740:	4630      	mov	r0, r6
 8003742:	f000 f9fd 	bl	8003b40 <__smakebuf_r>
 8003746:	89a0      	ldrh	r0, [r4, #12]
 8003748:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800374c:	f010 0301 	ands.w	r3, r0, #1
 8003750:	d00a      	beq.n	8003768 <__swsetup_r+0xbc>
 8003752:	2300      	movs	r3, #0
 8003754:	60a3      	str	r3, [r4, #8]
 8003756:	6963      	ldr	r3, [r4, #20]
 8003758:	425b      	negs	r3, r3
 800375a:	61a3      	str	r3, [r4, #24]
 800375c:	6923      	ldr	r3, [r4, #16]
 800375e:	b943      	cbnz	r3, 8003772 <__swsetup_r+0xc6>
 8003760:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003764:	d1ba      	bne.n	80036dc <__swsetup_r+0x30>
 8003766:	bd70      	pop	{r4, r5, r6, pc}
 8003768:	0781      	lsls	r1, r0, #30
 800376a:	bf58      	it	pl
 800376c:	6963      	ldrpl	r3, [r4, #20]
 800376e:	60a3      	str	r3, [r4, #8]
 8003770:	e7f4      	b.n	800375c <__swsetup_r+0xb0>
 8003772:	2000      	movs	r0, #0
 8003774:	e7f7      	b.n	8003766 <__swsetup_r+0xba>
 8003776:	bf00      	nop
 8003778:	2000000c 	.word	0x2000000c
 800377c:	08004720 	.word	0x08004720
 8003780:	08004740 	.word	0x08004740
 8003784:	08004700 	.word	0x08004700

08003788 <__sflush_r>:
 8003788:	898a      	ldrh	r2, [r1, #12]
 800378a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800378c:	4605      	mov	r5, r0
 800378e:	0710      	lsls	r0, r2, #28
 8003790:	460c      	mov	r4, r1
 8003792:	d457      	bmi.n	8003844 <__sflush_r+0xbc>
 8003794:	684b      	ldr	r3, [r1, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	dc04      	bgt.n	80037a4 <__sflush_r+0x1c>
 800379a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800379c:	2b00      	cmp	r3, #0
 800379e:	dc01      	bgt.n	80037a4 <__sflush_r+0x1c>
 80037a0:	2000      	movs	r0, #0
 80037a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80037a6:	2e00      	cmp	r6, #0
 80037a8:	d0fa      	beq.n	80037a0 <__sflush_r+0x18>
 80037aa:	2300      	movs	r3, #0
 80037ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80037b0:	682f      	ldr	r7, [r5, #0]
 80037b2:	602b      	str	r3, [r5, #0]
 80037b4:	d032      	beq.n	800381c <__sflush_r+0x94>
 80037b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80037b8:	89a3      	ldrh	r3, [r4, #12]
 80037ba:	075a      	lsls	r2, r3, #29
 80037bc:	d505      	bpl.n	80037ca <__sflush_r+0x42>
 80037be:	6863      	ldr	r3, [r4, #4]
 80037c0:	1ac0      	subs	r0, r0, r3
 80037c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80037c4:	b10b      	cbz	r3, 80037ca <__sflush_r+0x42>
 80037c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80037c8:	1ac0      	subs	r0, r0, r3
 80037ca:	2300      	movs	r3, #0
 80037cc:	4602      	mov	r2, r0
 80037ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80037d0:	4628      	mov	r0, r5
 80037d2:	6a21      	ldr	r1, [r4, #32]
 80037d4:	47b0      	blx	r6
 80037d6:	1c43      	adds	r3, r0, #1
 80037d8:	89a3      	ldrh	r3, [r4, #12]
 80037da:	d106      	bne.n	80037ea <__sflush_r+0x62>
 80037dc:	6829      	ldr	r1, [r5, #0]
 80037de:	291d      	cmp	r1, #29
 80037e0:	d82c      	bhi.n	800383c <__sflush_r+0xb4>
 80037e2:	4a29      	ldr	r2, [pc, #164]	; (8003888 <__sflush_r+0x100>)
 80037e4:	40ca      	lsrs	r2, r1
 80037e6:	07d6      	lsls	r6, r2, #31
 80037e8:	d528      	bpl.n	800383c <__sflush_r+0xb4>
 80037ea:	2200      	movs	r2, #0
 80037ec:	6062      	str	r2, [r4, #4]
 80037ee:	6922      	ldr	r2, [r4, #16]
 80037f0:	04d9      	lsls	r1, r3, #19
 80037f2:	6022      	str	r2, [r4, #0]
 80037f4:	d504      	bpl.n	8003800 <__sflush_r+0x78>
 80037f6:	1c42      	adds	r2, r0, #1
 80037f8:	d101      	bne.n	80037fe <__sflush_r+0x76>
 80037fa:	682b      	ldr	r3, [r5, #0]
 80037fc:	b903      	cbnz	r3, 8003800 <__sflush_r+0x78>
 80037fe:	6560      	str	r0, [r4, #84]	; 0x54
 8003800:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003802:	602f      	str	r7, [r5, #0]
 8003804:	2900      	cmp	r1, #0
 8003806:	d0cb      	beq.n	80037a0 <__sflush_r+0x18>
 8003808:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800380c:	4299      	cmp	r1, r3
 800380e:	d002      	beq.n	8003816 <__sflush_r+0x8e>
 8003810:	4628      	mov	r0, r5
 8003812:	f000 f9d5 	bl	8003bc0 <_free_r>
 8003816:	2000      	movs	r0, #0
 8003818:	6360      	str	r0, [r4, #52]	; 0x34
 800381a:	e7c2      	b.n	80037a2 <__sflush_r+0x1a>
 800381c:	6a21      	ldr	r1, [r4, #32]
 800381e:	2301      	movs	r3, #1
 8003820:	4628      	mov	r0, r5
 8003822:	47b0      	blx	r6
 8003824:	1c41      	adds	r1, r0, #1
 8003826:	d1c7      	bne.n	80037b8 <__sflush_r+0x30>
 8003828:	682b      	ldr	r3, [r5, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d0c4      	beq.n	80037b8 <__sflush_r+0x30>
 800382e:	2b1d      	cmp	r3, #29
 8003830:	d001      	beq.n	8003836 <__sflush_r+0xae>
 8003832:	2b16      	cmp	r3, #22
 8003834:	d101      	bne.n	800383a <__sflush_r+0xb2>
 8003836:	602f      	str	r7, [r5, #0]
 8003838:	e7b2      	b.n	80037a0 <__sflush_r+0x18>
 800383a:	89a3      	ldrh	r3, [r4, #12]
 800383c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003840:	81a3      	strh	r3, [r4, #12]
 8003842:	e7ae      	b.n	80037a2 <__sflush_r+0x1a>
 8003844:	690f      	ldr	r7, [r1, #16]
 8003846:	2f00      	cmp	r7, #0
 8003848:	d0aa      	beq.n	80037a0 <__sflush_r+0x18>
 800384a:	0793      	lsls	r3, r2, #30
 800384c:	bf18      	it	ne
 800384e:	2300      	movne	r3, #0
 8003850:	680e      	ldr	r6, [r1, #0]
 8003852:	bf08      	it	eq
 8003854:	694b      	ldreq	r3, [r1, #20]
 8003856:	1bf6      	subs	r6, r6, r7
 8003858:	600f      	str	r7, [r1, #0]
 800385a:	608b      	str	r3, [r1, #8]
 800385c:	2e00      	cmp	r6, #0
 800385e:	dd9f      	ble.n	80037a0 <__sflush_r+0x18>
 8003860:	4633      	mov	r3, r6
 8003862:	463a      	mov	r2, r7
 8003864:	4628      	mov	r0, r5
 8003866:	6a21      	ldr	r1, [r4, #32]
 8003868:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800386c:	47e0      	blx	ip
 800386e:	2800      	cmp	r0, #0
 8003870:	dc06      	bgt.n	8003880 <__sflush_r+0xf8>
 8003872:	89a3      	ldrh	r3, [r4, #12]
 8003874:	f04f 30ff 	mov.w	r0, #4294967295
 8003878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800387c:	81a3      	strh	r3, [r4, #12]
 800387e:	e790      	b.n	80037a2 <__sflush_r+0x1a>
 8003880:	4407      	add	r7, r0
 8003882:	1a36      	subs	r6, r6, r0
 8003884:	e7ea      	b.n	800385c <__sflush_r+0xd4>
 8003886:	bf00      	nop
 8003888:	20400001 	.word	0x20400001

0800388c <_fflush_r>:
 800388c:	b538      	push	{r3, r4, r5, lr}
 800388e:	690b      	ldr	r3, [r1, #16]
 8003890:	4605      	mov	r5, r0
 8003892:	460c      	mov	r4, r1
 8003894:	b913      	cbnz	r3, 800389c <_fflush_r+0x10>
 8003896:	2500      	movs	r5, #0
 8003898:	4628      	mov	r0, r5
 800389a:	bd38      	pop	{r3, r4, r5, pc}
 800389c:	b118      	cbz	r0, 80038a6 <_fflush_r+0x1a>
 800389e:	6983      	ldr	r3, [r0, #24]
 80038a0:	b90b      	cbnz	r3, 80038a6 <_fflush_r+0x1a>
 80038a2:	f000 f887 	bl	80039b4 <__sinit>
 80038a6:	4b14      	ldr	r3, [pc, #80]	; (80038f8 <_fflush_r+0x6c>)
 80038a8:	429c      	cmp	r4, r3
 80038aa:	d11b      	bne.n	80038e4 <_fflush_r+0x58>
 80038ac:	686c      	ldr	r4, [r5, #4]
 80038ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d0ef      	beq.n	8003896 <_fflush_r+0xa>
 80038b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80038b8:	07d0      	lsls	r0, r2, #31
 80038ba:	d404      	bmi.n	80038c6 <_fflush_r+0x3a>
 80038bc:	0599      	lsls	r1, r3, #22
 80038be:	d402      	bmi.n	80038c6 <_fflush_r+0x3a>
 80038c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038c2:	f000 f915 	bl	8003af0 <__retarget_lock_acquire_recursive>
 80038c6:	4628      	mov	r0, r5
 80038c8:	4621      	mov	r1, r4
 80038ca:	f7ff ff5d 	bl	8003788 <__sflush_r>
 80038ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80038d0:	4605      	mov	r5, r0
 80038d2:	07da      	lsls	r2, r3, #31
 80038d4:	d4e0      	bmi.n	8003898 <_fflush_r+0xc>
 80038d6:	89a3      	ldrh	r3, [r4, #12]
 80038d8:	059b      	lsls	r3, r3, #22
 80038da:	d4dd      	bmi.n	8003898 <_fflush_r+0xc>
 80038dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038de:	f000 f908 	bl	8003af2 <__retarget_lock_release_recursive>
 80038e2:	e7d9      	b.n	8003898 <_fflush_r+0xc>
 80038e4:	4b05      	ldr	r3, [pc, #20]	; (80038fc <_fflush_r+0x70>)
 80038e6:	429c      	cmp	r4, r3
 80038e8:	d101      	bne.n	80038ee <_fflush_r+0x62>
 80038ea:	68ac      	ldr	r4, [r5, #8]
 80038ec:	e7df      	b.n	80038ae <_fflush_r+0x22>
 80038ee:	4b04      	ldr	r3, [pc, #16]	; (8003900 <_fflush_r+0x74>)
 80038f0:	429c      	cmp	r4, r3
 80038f2:	bf08      	it	eq
 80038f4:	68ec      	ldreq	r4, [r5, #12]
 80038f6:	e7da      	b.n	80038ae <_fflush_r+0x22>
 80038f8:	08004720 	.word	0x08004720
 80038fc:	08004740 	.word	0x08004740
 8003900:	08004700 	.word	0x08004700

08003904 <std>:
 8003904:	2300      	movs	r3, #0
 8003906:	b510      	push	{r4, lr}
 8003908:	4604      	mov	r4, r0
 800390a:	e9c0 3300 	strd	r3, r3, [r0]
 800390e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003912:	6083      	str	r3, [r0, #8]
 8003914:	8181      	strh	r1, [r0, #12]
 8003916:	6643      	str	r3, [r0, #100]	; 0x64
 8003918:	81c2      	strh	r2, [r0, #14]
 800391a:	6183      	str	r3, [r0, #24]
 800391c:	4619      	mov	r1, r3
 800391e:	2208      	movs	r2, #8
 8003920:	305c      	adds	r0, #92	; 0x5c
 8003922:	f7ff fddb 	bl	80034dc <memset>
 8003926:	4b05      	ldr	r3, [pc, #20]	; (800393c <std+0x38>)
 8003928:	6224      	str	r4, [r4, #32]
 800392a:	6263      	str	r3, [r4, #36]	; 0x24
 800392c:	4b04      	ldr	r3, [pc, #16]	; (8003940 <std+0x3c>)
 800392e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003930:	4b04      	ldr	r3, [pc, #16]	; (8003944 <std+0x40>)
 8003932:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003934:	4b04      	ldr	r3, [pc, #16]	; (8003948 <std+0x44>)
 8003936:	6323      	str	r3, [r4, #48]	; 0x30
 8003938:	bd10      	pop	{r4, pc}
 800393a:	bf00      	nop
 800393c:	08004375 	.word	0x08004375
 8003940:	08004397 	.word	0x08004397
 8003944:	080043cf 	.word	0x080043cf
 8003948:	080043f3 	.word	0x080043f3

0800394c <_cleanup_r>:
 800394c:	4901      	ldr	r1, [pc, #4]	; (8003954 <_cleanup_r+0x8>)
 800394e:	f000 b8af 	b.w	8003ab0 <_fwalk_reent>
 8003952:	bf00      	nop
 8003954:	0800388d 	.word	0x0800388d

08003958 <__sfmoreglue>:
 8003958:	2268      	movs	r2, #104	; 0x68
 800395a:	b570      	push	{r4, r5, r6, lr}
 800395c:	1e4d      	subs	r5, r1, #1
 800395e:	4355      	muls	r5, r2
 8003960:	460e      	mov	r6, r1
 8003962:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003966:	f000 f993 	bl	8003c90 <_malloc_r>
 800396a:	4604      	mov	r4, r0
 800396c:	b140      	cbz	r0, 8003980 <__sfmoreglue+0x28>
 800396e:	2100      	movs	r1, #0
 8003970:	e9c0 1600 	strd	r1, r6, [r0]
 8003974:	300c      	adds	r0, #12
 8003976:	60a0      	str	r0, [r4, #8]
 8003978:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800397c:	f7ff fdae 	bl	80034dc <memset>
 8003980:	4620      	mov	r0, r4
 8003982:	bd70      	pop	{r4, r5, r6, pc}

08003984 <__sfp_lock_acquire>:
 8003984:	4801      	ldr	r0, [pc, #4]	; (800398c <__sfp_lock_acquire+0x8>)
 8003986:	f000 b8b3 	b.w	8003af0 <__retarget_lock_acquire_recursive>
 800398a:	bf00      	nop
 800398c:	20001211 	.word	0x20001211

08003990 <__sfp_lock_release>:
 8003990:	4801      	ldr	r0, [pc, #4]	; (8003998 <__sfp_lock_release+0x8>)
 8003992:	f000 b8ae 	b.w	8003af2 <__retarget_lock_release_recursive>
 8003996:	bf00      	nop
 8003998:	20001211 	.word	0x20001211

0800399c <__sinit_lock_acquire>:
 800399c:	4801      	ldr	r0, [pc, #4]	; (80039a4 <__sinit_lock_acquire+0x8>)
 800399e:	f000 b8a7 	b.w	8003af0 <__retarget_lock_acquire_recursive>
 80039a2:	bf00      	nop
 80039a4:	20001212 	.word	0x20001212

080039a8 <__sinit_lock_release>:
 80039a8:	4801      	ldr	r0, [pc, #4]	; (80039b0 <__sinit_lock_release+0x8>)
 80039aa:	f000 b8a2 	b.w	8003af2 <__retarget_lock_release_recursive>
 80039ae:	bf00      	nop
 80039b0:	20001212 	.word	0x20001212

080039b4 <__sinit>:
 80039b4:	b510      	push	{r4, lr}
 80039b6:	4604      	mov	r4, r0
 80039b8:	f7ff fff0 	bl	800399c <__sinit_lock_acquire>
 80039bc:	69a3      	ldr	r3, [r4, #24]
 80039be:	b11b      	cbz	r3, 80039c8 <__sinit+0x14>
 80039c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039c4:	f7ff bff0 	b.w	80039a8 <__sinit_lock_release>
 80039c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80039cc:	6523      	str	r3, [r4, #80]	; 0x50
 80039ce:	4b13      	ldr	r3, [pc, #76]	; (8003a1c <__sinit+0x68>)
 80039d0:	4a13      	ldr	r2, [pc, #76]	; (8003a20 <__sinit+0x6c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80039d6:	42a3      	cmp	r3, r4
 80039d8:	bf08      	it	eq
 80039da:	2301      	moveq	r3, #1
 80039dc:	4620      	mov	r0, r4
 80039de:	bf08      	it	eq
 80039e0:	61a3      	streq	r3, [r4, #24]
 80039e2:	f000 f81f 	bl	8003a24 <__sfp>
 80039e6:	6060      	str	r0, [r4, #4]
 80039e8:	4620      	mov	r0, r4
 80039ea:	f000 f81b 	bl	8003a24 <__sfp>
 80039ee:	60a0      	str	r0, [r4, #8]
 80039f0:	4620      	mov	r0, r4
 80039f2:	f000 f817 	bl	8003a24 <__sfp>
 80039f6:	2200      	movs	r2, #0
 80039f8:	2104      	movs	r1, #4
 80039fa:	60e0      	str	r0, [r4, #12]
 80039fc:	6860      	ldr	r0, [r4, #4]
 80039fe:	f7ff ff81 	bl	8003904 <std>
 8003a02:	2201      	movs	r2, #1
 8003a04:	2109      	movs	r1, #9
 8003a06:	68a0      	ldr	r0, [r4, #8]
 8003a08:	f7ff ff7c 	bl	8003904 <std>
 8003a0c:	2202      	movs	r2, #2
 8003a0e:	2112      	movs	r1, #18
 8003a10:	68e0      	ldr	r0, [r4, #12]
 8003a12:	f7ff ff77 	bl	8003904 <std>
 8003a16:	2301      	movs	r3, #1
 8003a18:	61a3      	str	r3, [r4, #24]
 8003a1a:	e7d1      	b.n	80039c0 <__sinit+0xc>
 8003a1c:	080046fc 	.word	0x080046fc
 8003a20:	0800394d 	.word	0x0800394d

08003a24 <__sfp>:
 8003a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a26:	4607      	mov	r7, r0
 8003a28:	f7ff ffac 	bl	8003984 <__sfp_lock_acquire>
 8003a2c:	4b1e      	ldr	r3, [pc, #120]	; (8003aa8 <__sfp+0x84>)
 8003a2e:	681e      	ldr	r6, [r3, #0]
 8003a30:	69b3      	ldr	r3, [r6, #24]
 8003a32:	b913      	cbnz	r3, 8003a3a <__sfp+0x16>
 8003a34:	4630      	mov	r0, r6
 8003a36:	f7ff ffbd 	bl	80039b4 <__sinit>
 8003a3a:	3648      	adds	r6, #72	; 0x48
 8003a3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003a40:	3b01      	subs	r3, #1
 8003a42:	d503      	bpl.n	8003a4c <__sfp+0x28>
 8003a44:	6833      	ldr	r3, [r6, #0]
 8003a46:	b30b      	cbz	r3, 8003a8c <__sfp+0x68>
 8003a48:	6836      	ldr	r6, [r6, #0]
 8003a4a:	e7f7      	b.n	8003a3c <__sfp+0x18>
 8003a4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003a50:	b9d5      	cbnz	r5, 8003a88 <__sfp+0x64>
 8003a52:	4b16      	ldr	r3, [pc, #88]	; (8003aac <__sfp+0x88>)
 8003a54:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003a58:	60e3      	str	r3, [r4, #12]
 8003a5a:	6665      	str	r5, [r4, #100]	; 0x64
 8003a5c:	f000 f847 	bl	8003aee <__retarget_lock_init_recursive>
 8003a60:	f7ff ff96 	bl	8003990 <__sfp_lock_release>
 8003a64:	2208      	movs	r2, #8
 8003a66:	4629      	mov	r1, r5
 8003a68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003a6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003a70:	6025      	str	r5, [r4, #0]
 8003a72:	61a5      	str	r5, [r4, #24]
 8003a74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003a78:	f7ff fd30 	bl	80034dc <memset>
 8003a7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003a80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003a84:	4620      	mov	r0, r4
 8003a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a88:	3468      	adds	r4, #104	; 0x68
 8003a8a:	e7d9      	b.n	8003a40 <__sfp+0x1c>
 8003a8c:	2104      	movs	r1, #4
 8003a8e:	4638      	mov	r0, r7
 8003a90:	f7ff ff62 	bl	8003958 <__sfmoreglue>
 8003a94:	4604      	mov	r4, r0
 8003a96:	6030      	str	r0, [r6, #0]
 8003a98:	2800      	cmp	r0, #0
 8003a9a:	d1d5      	bne.n	8003a48 <__sfp+0x24>
 8003a9c:	f7ff ff78 	bl	8003990 <__sfp_lock_release>
 8003aa0:	230c      	movs	r3, #12
 8003aa2:	603b      	str	r3, [r7, #0]
 8003aa4:	e7ee      	b.n	8003a84 <__sfp+0x60>
 8003aa6:	bf00      	nop
 8003aa8:	080046fc 	.word	0x080046fc
 8003aac:	ffff0001 	.word	0xffff0001

08003ab0 <_fwalk_reent>:
 8003ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ab4:	4606      	mov	r6, r0
 8003ab6:	4688      	mov	r8, r1
 8003ab8:	2700      	movs	r7, #0
 8003aba:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003abe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ac2:	f1b9 0901 	subs.w	r9, r9, #1
 8003ac6:	d505      	bpl.n	8003ad4 <_fwalk_reent+0x24>
 8003ac8:	6824      	ldr	r4, [r4, #0]
 8003aca:	2c00      	cmp	r4, #0
 8003acc:	d1f7      	bne.n	8003abe <_fwalk_reent+0xe>
 8003ace:	4638      	mov	r0, r7
 8003ad0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ad4:	89ab      	ldrh	r3, [r5, #12]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d907      	bls.n	8003aea <_fwalk_reent+0x3a>
 8003ada:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	d003      	beq.n	8003aea <_fwalk_reent+0x3a>
 8003ae2:	4629      	mov	r1, r5
 8003ae4:	4630      	mov	r0, r6
 8003ae6:	47c0      	blx	r8
 8003ae8:	4307      	orrs	r7, r0
 8003aea:	3568      	adds	r5, #104	; 0x68
 8003aec:	e7e9      	b.n	8003ac2 <_fwalk_reent+0x12>

08003aee <__retarget_lock_init_recursive>:
 8003aee:	4770      	bx	lr

08003af0 <__retarget_lock_acquire_recursive>:
 8003af0:	4770      	bx	lr

08003af2 <__retarget_lock_release_recursive>:
 8003af2:	4770      	bx	lr

08003af4 <__swhatbuf_r>:
 8003af4:	b570      	push	{r4, r5, r6, lr}
 8003af6:	460e      	mov	r6, r1
 8003af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003afc:	4614      	mov	r4, r2
 8003afe:	2900      	cmp	r1, #0
 8003b00:	461d      	mov	r5, r3
 8003b02:	b096      	sub	sp, #88	; 0x58
 8003b04:	da08      	bge.n	8003b18 <__swhatbuf_r+0x24>
 8003b06:	2200      	movs	r2, #0
 8003b08:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003b0c:	602a      	str	r2, [r5, #0]
 8003b0e:	061a      	lsls	r2, r3, #24
 8003b10:	d410      	bmi.n	8003b34 <__swhatbuf_r+0x40>
 8003b12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b16:	e00e      	b.n	8003b36 <__swhatbuf_r+0x42>
 8003b18:	466a      	mov	r2, sp
 8003b1a:	f000 fc91 	bl	8004440 <_fstat_r>
 8003b1e:	2800      	cmp	r0, #0
 8003b20:	dbf1      	blt.n	8003b06 <__swhatbuf_r+0x12>
 8003b22:	9a01      	ldr	r2, [sp, #4]
 8003b24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003b28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003b2c:	425a      	negs	r2, r3
 8003b2e:	415a      	adcs	r2, r3
 8003b30:	602a      	str	r2, [r5, #0]
 8003b32:	e7ee      	b.n	8003b12 <__swhatbuf_r+0x1e>
 8003b34:	2340      	movs	r3, #64	; 0x40
 8003b36:	2000      	movs	r0, #0
 8003b38:	6023      	str	r3, [r4, #0]
 8003b3a:	b016      	add	sp, #88	; 0x58
 8003b3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003b40 <__smakebuf_r>:
 8003b40:	898b      	ldrh	r3, [r1, #12]
 8003b42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b44:	079d      	lsls	r5, r3, #30
 8003b46:	4606      	mov	r6, r0
 8003b48:	460c      	mov	r4, r1
 8003b4a:	d507      	bpl.n	8003b5c <__smakebuf_r+0x1c>
 8003b4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003b50:	6023      	str	r3, [r4, #0]
 8003b52:	6123      	str	r3, [r4, #16]
 8003b54:	2301      	movs	r3, #1
 8003b56:	6163      	str	r3, [r4, #20]
 8003b58:	b002      	add	sp, #8
 8003b5a:	bd70      	pop	{r4, r5, r6, pc}
 8003b5c:	466a      	mov	r2, sp
 8003b5e:	ab01      	add	r3, sp, #4
 8003b60:	f7ff ffc8 	bl	8003af4 <__swhatbuf_r>
 8003b64:	9900      	ldr	r1, [sp, #0]
 8003b66:	4605      	mov	r5, r0
 8003b68:	4630      	mov	r0, r6
 8003b6a:	f000 f891 	bl	8003c90 <_malloc_r>
 8003b6e:	b948      	cbnz	r0, 8003b84 <__smakebuf_r+0x44>
 8003b70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b74:	059a      	lsls	r2, r3, #22
 8003b76:	d4ef      	bmi.n	8003b58 <__smakebuf_r+0x18>
 8003b78:	f023 0303 	bic.w	r3, r3, #3
 8003b7c:	f043 0302 	orr.w	r3, r3, #2
 8003b80:	81a3      	strh	r3, [r4, #12]
 8003b82:	e7e3      	b.n	8003b4c <__smakebuf_r+0xc>
 8003b84:	4b0d      	ldr	r3, [pc, #52]	; (8003bbc <__smakebuf_r+0x7c>)
 8003b86:	62b3      	str	r3, [r6, #40]	; 0x28
 8003b88:	89a3      	ldrh	r3, [r4, #12]
 8003b8a:	6020      	str	r0, [r4, #0]
 8003b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b90:	81a3      	strh	r3, [r4, #12]
 8003b92:	9b00      	ldr	r3, [sp, #0]
 8003b94:	6120      	str	r0, [r4, #16]
 8003b96:	6163      	str	r3, [r4, #20]
 8003b98:	9b01      	ldr	r3, [sp, #4]
 8003b9a:	b15b      	cbz	r3, 8003bb4 <__smakebuf_r+0x74>
 8003b9c:	4630      	mov	r0, r6
 8003b9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ba2:	f000 fc5f 	bl	8004464 <_isatty_r>
 8003ba6:	b128      	cbz	r0, 8003bb4 <__smakebuf_r+0x74>
 8003ba8:	89a3      	ldrh	r3, [r4, #12]
 8003baa:	f023 0303 	bic.w	r3, r3, #3
 8003bae:	f043 0301 	orr.w	r3, r3, #1
 8003bb2:	81a3      	strh	r3, [r4, #12]
 8003bb4:	89a0      	ldrh	r0, [r4, #12]
 8003bb6:	4305      	orrs	r5, r0
 8003bb8:	81a5      	strh	r5, [r4, #12]
 8003bba:	e7cd      	b.n	8003b58 <__smakebuf_r+0x18>
 8003bbc:	0800394d 	.word	0x0800394d

08003bc0 <_free_r>:
 8003bc0:	b538      	push	{r3, r4, r5, lr}
 8003bc2:	4605      	mov	r5, r0
 8003bc4:	2900      	cmp	r1, #0
 8003bc6:	d040      	beq.n	8003c4a <_free_r+0x8a>
 8003bc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bcc:	1f0c      	subs	r4, r1, #4
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	bfb8      	it	lt
 8003bd2:	18e4      	addlt	r4, r4, r3
 8003bd4:	f000 fc76 	bl	80044c4 <__malloc_lock>
 8003bd8:	4a1c      	ldr	r2, [pc, #112]	; (8003c4c <_free_r+0x8c>)
 8003bda:	6813      	ldr	r3, [r2, #0]
 8003bdc:	b933      	cbnz	r3, 8003bec <_free_r+0x2c>
 8003bde:	6063      	str	r3, [r4, #4]
 8003be0:	6014      	str	r4, [r2, #0]
 8003be2:	4628      	mov	r0, r5
 8003be4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003be8:	f000 bc72 	b.w	80044d0 <__malloc_unlock>
 8003bec:	42a3      	cmp	r3, r4
 8003bee:	d908      	bls.n	8003c02 <_free_r+0x42>
 8003bf0:	6820      	ldr	r0, [r4, #0]
 8003bf2:	1821      	adds	r1, r4, r0
 8003bf4:	428b      	cmp	r3, r1
 8003bf6:	bf01      	itttt	eq
 8003bf8:	6819      	ldreq	r1, [r3, #0]
 8003bfa:	685b      	ldreq	r3, [r3, #4]
 8003bfc:	1809      	addeq	r1, r1, r0
 8003bfe:	6021      	streq	r1, [r4, #0]
 8003c00:	e7ed      	b.n	8003bde <_free_r+0x1e>
 8003c02:	461a      	mov	r2, r3
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	b10b      	cbz	r3, 8003c0c <_free_r+0x4c>
 8003c08:	42a3      	cmp	r3, r4
 8003c0a:	d9fa      	bls.n	8003c02 <_free_r+0x42>
 8003c0c:	6811      	ldr	r1, [r2, #0]
 8003c0e:	1850      	adds	r0, r2, r1
 8003c10:	42a0      	cmp	r0, r4
 8003c12:	d10b      	bne.n	8003c2c <_free_r+0x6c>
 8003c14:	6820      	ldr	r0, [r4, #0]
 8003c16:	4401      	add	r1, r0
 8003c18:	1850      	adds	r0, r2, r1
 8003c1a:	4283      	cmp	r3, r0
 8003c1c:	6011      	str	r1, [r2, #0]
 8003c1e:	d1e0      	bne.n	8003be2 <_free_r+0x22>
 8003c20:	6818      	ldr	r0, [r3, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	4401      	add	r1, r0
 8003c26:	6011      	str	r1, [r2, #0]
 8003c28:	6053      	str	r3, [r2, #4]
 8003c2a:	e7da      	b.n	8003be2 <_free_r+0x22>
 8003c2c:	d902      	bls.n	8003c34 <_free_r+0x74>
 8003c2e:	230c      	movs	r3, #12
 8003c30:	602b      	str	r3, [r5, #0]
 8003c32:	e7d6      	b.n	8003be2 <_free_r+0x22>
 8003c34:	6820      	ldr	r0, [r4, #0]
 8003c36:	1821      	adds	r1, r4, r0
 8003c38:	428b      	cmp	r3, r1
 8003c3a:	bf01      	itttt	eq
 8003c3c:	6819      	ldreq	r1, [r3, #0]
 8003c3e:	685b      	ldreq	r3, [r3, #4]
 8003c40:	1809      	addeq	r1, r1, r0
 8003c42:	6021      	streq	r1, [r4, #0]
 8003c44:	6063      	str	r3, [r4, #4]
 8003c46:	6054      	str	r4, [r2, #4]
 8003c48:	e7cb      	b.n	8003be2 <_free_r+0x22>
 8003c4a:	bd38      	pop	{r3, r4, r5, pc}
 8003c4c:	20001214 	.word	0x20001214

08003c50 <sbrk_aligned>:
 8003c50:	b570      	push	{r4, r5, r6, lr}
 8003c52:	4e0e      	ldr	r6, [pc, #56]	; (8003c8c <sbrk_aligned+0x3c>)
 8003c54:	460c      	mov	r4, r1
 8003c56:	6831      	ldr	r1, [r6, #0]
 8003c58:	4605      	mov	r5, r0
 8003c5a:	b911      	cbnz	r1, 8003c62 <sbrk_aligned+0x12>
 8003c5c:	f000 fb7a 	bl	8004354 <_sbrk_r>
 8003c60:	6030      	str	r0, [r6, #0]
 8003c62:	4621      	mov	r1, r4
 8003c64:	4628      	mov	r0, r5
 8003c66:	f000 fb75 	bl	8004354 <_sbrk_r>
 8003c6a:	1c43      	adds	r3, r0, #1
 8003c6c:	d00a      	beq.n	8003c84 <sbrk_aligned+0x34>
 8003c6e:	1cc4      	adds	r4, r0, #3
 8003c70:	f024 0403 	bic.w	r4, r4, #3
 8003c74:	42a0      	cmp	r0, r4
 8003c76:	d007      	beq.n	8003c88 <sbrk_aligned+0x38>
 8003c78:	1a21      	subs	r1, r4, r0
 8003c7a:	4628      	mov	r0, r5
 8003c7c:	f000 fb6a 	bl	8004354 <_sbrk_r>
 8003c80:	3001      	adds	r0, #1
 8003c82:	d101      	bne.n	8003c88 <sbrk_aligned+0x38>
 8003c84:	f04f 34ff 	mov.w	r4, #4294967295
 8003c88:	4620      	mov	r0, r4
 8003c8a:	bd70      	pop	{r4, r5, r6, pc}
 8003c8c:	20001218 	.word	0x20001218

08003c90 <_malloc_r>:
 8003c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c94:	1ccd      	adds	r5, r1, #3
 8003c96:	f025 0503 	bic.w	r5, r5, #3
 8003c9a:	3508      	adds	r5, #8
 8003c9c:	2d0c      	cmp	r5, #12
 8003c9e:	bf38      	it	cc
 8003ca0:	250c      	movcc	r5, #12
 8003ca2:	2d00      	cmp	r5, #0
 8003ca4:	4607      	mov	r7, r0
 8003ca6:	db01      	blt.n	8003cac <_malloc_r+0x1c>
 8003ca8:	42a9      	cmp	r1, r5
 8003caa:	d905      	bls.n	8003cb8 <_malloc_r+0x28>
 8003cac:	230c      	movs	r3, #12
 8003cae:	2600      	movs	r6, #0
 8003cb0:	603b      	str	r3, [r7, #0]
 8003cb2:	4630      	mov	r0, r6
 8003cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cb8:	4e2e      	ldr	r6, [pc, #184]	; (8003d74 <_malloc_r+0xe4>)
 8003cba:	f000 fc03 	bl	80044c4 <__malloc_lock>
 8003cbe:	6833      	ldr	r3, [r6, #0]
 8003cc0:	461c      	mov	r4, r3
 8003cc2:	bb34      	cbnz	r4, 8003d12 <_malloc_r+0x82>
 8003cc4:	4629      	mov	r1, r5
 8003cc6:	4638      	mov	r0, r7
 8003cc8:	f7ff ffc2 	bl	8003c50 <sbrk_aligned>
 8003ccc:	1c43      	adds	r3, r0, #1
 8003cce:	4604      	mov	r4, r0
 8003cd0:	d14d      	bne.n	8003d6e <_malloc_r+0xde>
 8003cd2:	6834      	ldr	r4, [r6, #0]
 8003cd4:	4626      	mov	r6, r4
 8003cd6:	2e00      	cmp	r6, #0
 8003cd8:	d140      	bne.n	8003d5c <_malloc_r+0xcc>
 8003cda:	6823      	ldr	r3, [r4, #0]
 8003cdc:	4631      	mov	r1, r6
 8003cde:	4638      	mov	r0, r7
 8003ce0:	eb04 0803 	add.w	r8, r4, r3
 8003ce4:	f000 fb36 	bl	8004354 <_sbrk_r>
 8003ce8:	4580      	cmp	r8, r0
 8003cea:	d13a      	bne.n	8003d62 <_malloc_r+0xd2>
 8003cec:	6821      	ldr	r1, [r4, #0]
 8003cee:	3503      	adds	r5, #3
 8003cf0:	1a6d      	subs	r5, r5, r1
 8003cf2:	f025 0503 	bic.w	r5, r5, #3
 8003cf6:	3508      	adds	r5, #8
 8003cf8:	2d0c      	cmp	r5, #12
 8003cfa:	bf38      	it	cc
 8003cfc:	250c      	movcc	r5, #12
 8003cfe:	4638      	mov	r0, r7
 8003d00:	4629      	mov	r1, r5
 8003d02:	f7ff ffa5 	bl	8003c50 <sbrk_aligned>
 8003d06:	3001      	adds	r0, #1
 8003d08:	d02b      	beq.n	8003d62 <_malloc_r+0xd2>
 8003d0a:	6823      	ldr	r3, [r4, #0]
 8003d0c:	442b      	add	r3, r5
 8003d0e:	6023      	str	r3, [r4, #0]
 8003d10:	e00e      	b.n	8003d30 <_malloc_r+0xa0>
 8003d12:	6822      	ldr	r2, [r4, #0]
 8003d14:	1b52      	subs	r2, r2, r5
 8003d16:	d41e      	bmi.n	8003d56 <_malloc_r+0xc6>
 8003d18:	2a0b      	cmp	r2, #11
 8003d1a:	d916      	bls.n	8003d4a <_malloc_r+0xba>
 8003d1c:	1961      	adds	r1, r4, r5
 8003d1e:	42a3      	cmp	r3, r4
 8003d20:	6025      	str	r5, [r4, #0]
 8003d22:	bf18      	it	ne
 8003d24:	6059      	strne	r1, [r3, #4]
 8003d26:	6863      	ldr	r3, [r4, #4]
 8003d28:	bf08      	it	eq
 8003d2a:	6031      	streq	r1, [r6, #0]
 8003d2c:	5162      	str	r2, [r4, r5]
 8003d2e:	604b      	str	r3, [r1, #4]
 8003d30:	4638      	mov	r0, r7
 8003d32:	f104 060b 	add.w	r6, r4, #11
 8003d36:	f000 fbcb 	bl	80044d0 <__malloc_unlock>
 8003d3a:	f026 0607 	bic.w	r6, r6, #7
 8003d3e:	1d23      	adds	r3, r4, #4
 8003d40:	1af2      	subs	r2, r6, r3
 8003d42:	d0b6      	beq.n	8003cb2 <_malloc_r+0x22>
 8003d44:	1b9b      	subs	r3, r3, r6
 8003d46:	50a3      	str	r3, [r4, r2]
 8003d48:	e7b3      	b.n	8003cb2 <_malloc_r+0x22>
 8003d4a:	6862      	ldr	r2, [r4, #4]
 8003d4c:	42a3      	cmp	r3, r4
 8003d4e:	bf0c      	ite	eq
 8003d50:	6032      	streq	r2, [r6, #0]
 8003d52:	605a      	strne	r2, [r3, #4]
 8003d54:	e7ec      	b.n	8003d30 <_malloc_r+0xa0>
 8003d56:	4623      	mov	r3, r4
 8003d58:	6864      	ldr	r4, [r4, #4]
 8003d5a:	e7b2      	b.n	8003cc2 <_malloc_r+0x32>
 8003d5c:	4634      	mov	r4, r6
 8003d5e:	6876      	ldr	r6, [r6, #4]
 8003d60:	e7b9      	b.n	8003cd6 <_malloc_r+0x46>
 8003d62:	230c      	movs	r3, #12
 8003d64:	4638      	mov	r0, r7
 8003d66:	603b      	str	r3, [r7, #0]
 8003d68:	f000 fbb2 	bl	80044d0 <__malloc_unlock>
 8003d6c:	e7a1      	b.n	8003cb2 <_malloc_r+0x22>
 8003d6e:	6025      	str	r5, [r4, #0]
 8003d70:	e7de      	b.n	8003d30 <_malloc_r+0xa0>
 8003d72:	bf00      	nop
 8003d74:	20001214 	.word	0x20001214

08003d78 <__sfputc_r>:
 8003d78:	6893      	ldr	r3, [r2, #8]
 8003d7a:	b410      	push	{r4}
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	6093      	str	r3, [r2, #8]
 8003d82:	da07      	bge.n	8003d94 <__sfputc_r+0x1c>
 8003d84:	6994      	ldr	r4, [r2, #24]
 8003d86:	42a3      	cmp	r3, r4
 8003d88:	db01      	blt.n	8003d8e <__sfputc_r+0x16>
 8003d8a:	290a      	cmp	r1, #10
 8003d8c:	d102      	bne.n	8003d94 <__sfputc_r+0x1c>
 8003d8e:	bc10      	pop	{r4}
 8003d90:	f7ff bc3a 	b.w	8003608 <__swbuf_r>
 8003d94:	6813      	ldr	r3, [r2, #0]
 8003d96:	1c58      	adds	r0, r3, #1
 8003d98:	6010      	str	r0, [r2, #0]
 8003d9a:	7019      	strb	r1, [r3, #0]
 8003d9c:	4608      	mov	r0, r1
 8003d9e:	bc10      	pop	{r4}
 8003da0:	4770      	bx	lr

08003da2 <__sfputs_r>:
 8003da2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003da4:	4606      	mov	r6, r0
 8003da6:	460f      	mov	r7, r1
 8003da8:	4614      	mov	r4, r2
 8003daa:	18d5      	adds	r5, r2, r3
 8003dac:	42ac      	cmp	r4, r5
 8003dae:	d101      	bne.n	8003db4 <__sfputs_r+0x12>
 8003db0:	2000      	movs	r0, #0
 8003db2:	e007      	b.n	8003dc4 <__sfputs_r+0x22>
 8003db4:	463a      	mov	r2, r7
 8003db6:	4630      	mov	r0, r6
 8003db8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dbc:	f7ff ffdc 	bl	8003d78 <__sfputc_r>
 8003dc0:	1c43      	adds	r3, r0, #1
 8003dc2:	d1f3      	bne.n	8003dac <__sfputs_r+0xa>
 8003dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003dc8 <_vfiprintf_r>:
 8003dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dcc:	460d      	mov	r5, r1
 8003dce:	4614      	mov	r4, r2
 8003dd0:	4698      	mov	r8, r3
 8003dd2:	4606      	mov	r6, r0
 8003dd4:	b09d      	sub	sp, #116	; 0x74
 8003dd6:	b118      	cbz	r0, 8003de0 <_vfiprintf_r+0x18>
 8003dd8:	6983      	ldr	r3, [r0, #24]
 8003dda:	b90b      	cbnz	r3, 8003de0 <_vfiprintf_r+0x18>
 8003ddc:	f7ff fdea 	bl	80039b4 <__sinit>
 8003de0:	4b89      	ldr	r3, [pc, #548]	; (8004008 <_vfiprintf_r+0x240>)
 8003de2:	429d      	cmp	r5, r3
 8003de4:	d11b      	bne.n	8003e1e <_vfiprintf_r+0x56>
 8003de6:	6875      	ldr	r5, [r6, #4]
 8003de8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003dea:	07d9      	lsls	r1, r3, #31
 8003dec:	d405      	bmi.n	8003dfa <_vfiprintf_r+0x32>
 8003dee:	89ab      	ldrh	r3, [r5, #12]
 8003df0:	059a      	lsls	r2, r3, #22
 8003df2:	d402      	bmi.n	8003dfa <_vfiprintf_r+0x32>
 8003df4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003df6:	f7ff fe7b 	bl	8003af0 <__retarget_lock_acquire_recursive>
 8003dfa:	89ab      	ldrh	r3, [r5, #12]
 8003dfc:	071b      	lsls	r3, r3, #28
 8003dfe:	d501      	bpl.n	8003e04 <_vfiprintf_r+0x3c>
 8003e00:	692b      	ldr	r3, [r5, #16]
 8003e02:	b9eb      	cbnz	r3, 8003e40 <_vfiprintf_r+0x78>
 8003e04:	4629      	mov	r1, r5
 8003e06:	4630      	mov	r0, r6
 8003e08:	f7ff fc50 	bl	80036ac <__swsetup_r>
 8003e0c:	b1c0      	cbz	r0, 8003e40 <_vfiprintf_r+0x78>
 8003e0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e10:	07dc      	lsls	r4, r3, #31
 8003e12:	d50e      	bpl.n	8003e32 <_vfiprintf_r+0x6a>
 8003e14:	f04f 30ff 	mov.w	r0, #4294967295
 8003e18:	b01d      	add	sp, #116	; 0x74
 8003e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e1e:	4b7b      	ldr	r3, [pc, #492]	; (800400c <_vfiprintf_r+0x244>)
 8003e20:	429d      	cmp	r5, r3
 8003e22:	d101      	bne.n	8003e28 <_vfiprintf_r+0x60>
 8003e24:	68b5      	ldr	r5, [r6, #8]
 8003e26:	e7df      	b.n	8003de8 <_vfiprintf_r+0x20>
 8003e28:	4b79      	ldr	r3, [pc, #484]	; (8004010 <_vfiprintf_r+0x248>)
 8003e2a:	429d      	cmp	r5, r3
 8003e2c:	bf08      	it	eq
 8003e2e:	68f5      	ldreq	r5, [r6, #12]
 8003e30:	e7da      	b.n	8003de8 <_vfiprintf_r+0x20>
 8003e32:	89ab      	ldrh	r3, [r5, #12]
 8003e34:	0598      	lsls	r0, r3, #22
 8003e36:	d4ed      	bmi.n	8003e14 <_vfiprintf_r+0x4c>
 8003e38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e3a:	f7ff fe5a 	bl	8003af2 <__retarget_lock_release_recursive>
 8003e3e:	e7e9      	b.n	8003e14 <_vfiprintf_r+0x4c>
 8003e40:	2300      	movs	r3, #0
 8003e42:	9309      	str	r3, [sp, #36]	; 0x24
 8003e44:	2320      	movs	r3, #32
 8003e46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e4a:	2330      	movs	r3, #48	; 0x30
 8003e4c:	f04f 0901 	mov.w	r9, #1
 8003e50:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e54:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004014 <_vfiprintf_r+0x24c>
 8003e58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e5c:	4623      	mov	r3, r4
 8003e5e:	469a      	mov	sl, r3
 8003e60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e64:	b10a      	cbz	r2, 8003e6a <_vfiprintf_r+0xa2>
 8003e66:	2a25      	cmp	r2, #37	; 0x25
 8003e68:	d1f9      	bne.n	8003e5e <_vfiprintf_r+0x96>
 8003e6a:	ebba 0b04 	subs.w	fp, sl, r4
 8003e6e:	d00b      	beq.n	8003e88 <_vfiprintf_r+0xc0>
 8003e70:	465b      	mov	r3, fp
 8003e72:	4622      	mov	r2, r4
 8003e74:	4629      	mov	r1, r5
 8003e76:	4630      	mov	r0, r6
 8003e78:	f7ff ff93 	bl	8003da2 <__sfputs_r>
 8003e7c:	3001      	adds	r0, #1
 8003e7e:	f000 80aa 	beq.w	8003fd6 <_vfiprintf_r+0x20e>
 8003e82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e84:	445a      	add	r2, fp
 8003e86:	9209      	str	r2, [sp, #36]	; 0x24
 8003e88:	f89a 3000 	ldrb.w	r3, [sl]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f000 80a2 	beq.w	8003fd6 <_vfiprintf_r+0x20e>
 8003e92:	2300      	movs	r3, #0
 8003e94:	f04f 32ff 	mov.w	r2, #4294967295
 8003e98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e9c:	f10a 0a01 	add.w	sl, sl, #1
 8003ea0:	9304      	str	r3, [sp, #16]
 8003ea2:	9307      	str	r3, [sp, #28]
 8003ea4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ea8:	931a      	str	r3, [sp, #104]	; 0x68
 8003eaa:	4654      	mov	r4, sl
 8003eac:	2205      	movs	r2, #5
 8003eae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003eb2:	4858      	ldr	r0, [pc, #352]	; (8004014 <_vfiprintf_r+0x24c>)
 8003eb4:	f000 faf8 	bl	80044a8 <memchr>
 8003eb8:	9a04      	ldr	r2, [sp, #16]
 8003eba:	b9d8      	cbnz	r0, 8003ef4 <_vfiprintf_r+0x12c>
 8003ebc:	06d1      	lsls	r1, r2, #27
 8003ebe:	bf44      	itt	mi
 8003ec0:	2320      	movmi	r3, #32
 8003ec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ec6:	0713      	lsls	r3, r2, #28
 8003ec8:	bf44      	itt	mi
 8003eca:	232b      	movmi	r3, #43	; 0x2b
 8003ecc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ed0:	f89a 3000 	ldrb.w	r3, [sl]
 8003ed4:	2b2a      	cmp	r3, #42	; 0x2a
 8003ed6:	d015      	beq.n	8003f04 <_vfiprintf_r+0x13c>
 8003ed8:	4654      	mov	r4, sl
 8003eda:	2000      	movs	r0, #0
 8003edc:	f04f 0c0a 	mov.w	ip, #10
 8003ee0:	9a07      	ldr	r2, [sp, #28]
 8003ee2:	4621      	mov	r1, r4
 8003ee4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ee8:	3b30      	subs	r3, #48	; 0x30
 8003eea:	2b09      	cmp	r3, #9
 8003eec:	d94e      	bls.n	8003f8c <_vfiprintf_r+0x1c4>
 8003eee:	b1b0      	cbz	r0, 8003f1e <_vfiprintf_r+0x156>
 8003ef0:	9207      	str	r2, [sp, #28]
 8003ef2:	e014      	b.n	8003f1e <_vfiprintf_r+0x156>
 8003ef4:	eba0 0308 	sub.w	r3, r0, r8
 8003ef8:	fa09 f303 	lsl.w	r3, r9, r3
 8003efc:	4313      	orrs	r3, r2
 8003efe:	46a2      	mov	sl, r4
 8003f00:	9304      	str	r3, [sp, #16]
 8003f02:	e7d2      	b.n	8003eaa <_vfiprintf_r+0xe2>
 8003f04:	9b03      	ldr	r3, [sp, #12]
 8003f06:	1d19      	adds	r1, r3, #4
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	9103      	str	r1, [sp, #12]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	bfbb      	ittet	lt
 8003f10:	425b      	neglt	r3, r3
 8003f12:	f042 0202 	orrlt.w	r2, r2, #2
 8003f16:	9307      	strge	r3, [sp, #28]
 8003f18:	9307      	strlt	r3, [sp, #28]
 8003f1a:	bfb8      	it	lt
 8003f1c:	9204      	strlt	r2, [sp, #16]
 8003f1e:	7823      	ldrb	r3, [r4, #0]
 8003f20:	2b2e      	cmp	r3, #46	; 0x2e
 8003f22:	d10c      	bne.n	8003f3e <_vfiprintf_r+0x176>
 8003f24:	7863      	ldrb	r3, [r4, #1]
 8003f26:	2b2a      	cmp	r3, #42	; 0x2a
 8003f28:	d135      	bne.n	8003f96 <_vfiprintf_r+0x1ce>
 8003f2a:	9b03      	ldr	r3, [sp, #12]
 8003f2c:	3402      	adds	r4, #2
 8003f2e:	1d1a      	adds	r2, r3, #4
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	9203      	str	r2, [sp, #12]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	bfb8      	it	lt
 8003f38:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f3c:	9305      	str	r3, [sp, #20]
 8003f3e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8004018 <_vfiprintf_r+0x250>
 8003f42:	2203      	movs	r2, #3
 8003f44:	4650      	mov	r0, sl
 8003f46:	7821      	ldrb	r1, [r4, #0]
 8003f48:	f000 faae 	bl	80044a8 <memchr>
 8003f4c:	b140      	cbz	r0, 8003f60 <_vfiprintf_r+0x198>
 8003f4e:	2340      	movs	r3, #64	; 0x40
 8003f50:	eba0 000a 	sub.w	r0, r0, sl
 8003f54:	fa03 f000 	lsl.w	r0, r3, r0
 8003f58:	9b04      	ldr	r3, [sp, #16]
 8003f5a:	3401      	adds	r4, #1
 8003f5c:	4303      	orrs	r3, r0
 8003f5e:	9304      	str	r3, [sp, #16]
 8003f60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f64:	2206      	movs	r2, #6
 8003f66:	482d      	ldr	r0, [pc, #180]	; (800401c <_vfiprintf_r+0x254>)
 8003f68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f6c:	f000 fa9c 	bl	80044a8 <memchr>
 8003f70:	2800      	cmp	r0, #0
 8003f72:	d03f      	beq.n	8003ff4 <_vfiprintf_r+0x22c>
 8003f74:	4b2a      	ldr	r3, [pc, #168]	; (8004020 <_vfiprintf_r+0x258>)
 8003f76:	bb1b      	cbnz	r3, 8003fc0 <_vfiprintf_r+0x1f8>
 8003f78:	9b03      	ldr	r3, [sp, #12]
 8003f7a:	3307      	adds	r3, #7
 8003f7c:	f023 0307 	bic.w	r3, r3, #7
 8003f80:	3308      	adds	r3, #8
 8003f82:	9303      	str	r3, [sp, #12]
 8003f84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f86:	443b      	add	r3, r7
 8003f88:	9309      	str	r3, [sp, #36]	; 0x24
 8003f8a:	e767      	b.n	8003e5c <_vfiprintf_r+0x94>
 8003f8c:	460c      	mov	r4, r1
 8003f8e:	2001      	movs	r0, #1
 8003f90:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f94:	e7a5      	b.n	8003ee2 <_vfiprintf_r+0x11a>
 8003f96:	2300      	movs	r3, #0
 8003f98:	f04f 0c0a 	mov.w	ip, #10
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	3401      	adds	r4, #1
 8003fa0:	9305      	str	r3, [sp, #20]
 8003fa2:	4620      	mov	r0, r4
 8003fa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fa8:	3a30      	subs	r2, #48	; 0x30
 8003faa:	2a09      	cmp	r2, #9
 8003fac:	d903      	bls.n	8003fb6 <_vfiprintf_r+0x1ee>
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d0c5      	beq.n	8003f3e <_vfiprintf_r+0x176>
 8003fb2:	9105      	str	r1, [sp, #20]
 8003fb4:	e7c3      	b.n	8003f3e <_vfiprintf_r+0x176>
 8003fb6:	4604      	mov	r4, r0
 8003fb8:	2301      	movs	r3, #1
 8003fba:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fbe:	e7f0      	b.n	8003fa2 <_vfiprintf_r+0x1da>
 8003fc0:	ab03      	add	r3, sp, #12
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	462a      	mov	r2, r5
 8003fc6:	4630      	mov	r0, r6
 8003fc8:	4b16      	ldr	r3, [pc, #88]	; (8004024 <_vfiprintf_r+0x25c>)
 8003fca:	a904      	add	r1, sp, #16
 8003fcc:	f3af 8000 	nop.w
 8003fd0:	4607      	mov	r7, r0
 8003fd2:	1c78      	adds	r0, r7, #1
 8003fd4:	d1d6      	bne.n	8003f84 <_vfiprintf_r+0x1bc>
 8003fd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003fd8:	07d9      	lsls	r1, r3, #31
 8003fda:	d405      	bmi.n	8003fe8 <_vfiprintf_r+0x220>
 8003fdc:	89ab      	ldrh	r3, [r5, #12]
 8003fde:	059a      	lsls	r2, r3, #22
 8003fe0:	d402      	bmi.n	8003fe8 <_vfiprintf_r+0x220>
 8003fe2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003fe4:	f7ff fd85 	bl	8003af2 <__retarget_lock_release_recursive>
 8003fe8:	89ab      	ldrh	r3, [r5, #12]
 8003fea:	065b      	lsls	r3, r3, #25
 8003fec:	f53f af12 	bmi.w	8003e14 <_vfiprintf_r+0x4c>
 8003ff0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ff2:	e711      	b.n	8003e18 <_vfiprintf_r+0x50>
 8003ff4:	ab03      	add	r3, sp, #12
 8003ff6:	9300      	str	r3, [sp, #0]
 8003ff8:	462a      	mov	r2, r5
 8003ffa:	4630      	mov	r0, r6
 8003ffc:	4b09      	ldr	r3, [pc, #36]	; (8004024 <_vfiprintf_r+0x25c>)
 8003ffe:	a904      	add	r1, sp, #16
 8004000:	f000 f882 	bl	8004108 <_printf_i>
 8004004:	e7e4      	b.n	8003fd0 <_vfiprintf_r+0x208>
 8004006:	bf00      	nop
 8004008:	08004720 	.word	0x08004720
 800400c:	08004740 	.word	0x08004740
 8004010:	08004700 	.word	0x08004700
 8004014:	08004760 	.word	0x08004760
 8004018:	08004766 	.word	0x08004766
 800401c:	0800476a 	.word	0x0800476a
 8004020:	00000000 	.word	0x00000000
 8004024:	08003da3 	.word	0x08003da3

08004028 <_printf_common>:
 8004028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800402c:	4616      	mov	r6, r2
 800402e:	4699      	mov	r9, r3
 8004030:	688a      	ldr	r2, [r1, #8]
 8004032:	690b      	ldr	r3, [r1, #16]
 8004034:	4607      	mov	r7, r0
 8004036:	4293      	cmp	r3, r2
 8004038:	bfb8      	it	lt
 800403a:	4613      	movlt	r3, r2
 800403c:	6033      	str	r3, [r6, #0]
 800403e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004042:	460c      	mov	r4, r1
 8004044:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004048:	b10a      	cbz	r2, 800404e <_printf_common+0x26>
 800404a:	3301      	adds	r3, #1
 800404c:	6033      	str	r3, [r6, #0]
 800404e:	6823      	ldr	r3, [r4, #0]
 8004050:	0699      	lsls	r1, r3, #26
 8004052:	bf42      	ittt	mi
 8004054:	6833      	ldrmi	r3, [r6, #0]
 8004056:	3302      	addmi	r3, #2
 8004058:	6033      	strmi	r3, [r6, #0]
 800405a:	6825      	ldr	r5, [r4, #0]
 800405c:	f015 0506 	ands.w	r5, r5, #6
 8004060:	d106      	bne.n	8004070 <_printf_common+0x48>
 8004062:	f104 0a19 	add.w	sl, r4, #25
 8004066:	68e3      	ldr	r3, [r4, #12]
 8004068:	6832      	ldr	r2, [r6, #0]
 800406a:	1a9b      	subs	r3, r3, r2
 800406c:	42ab      	cmp	r3, r5
 800406e:	dc28      	bgt.n	80040c2 <_printf_common+0x9a>
 8004070:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004074:	1e13      	subs	r3, r2, #0
 8004076:	6822      	ldr	r2, [r4, #0]
 8004078:	bf18      	it	ne
 800407a:	2301      	movne	r3, #1
 800407c:	0692      	lsls	r2, r2, #26
 800407e:	d42d      	bmi.n	80040dc <_printf_common+0xb4>
 8004080:	4649      	mov	r1, r9
 8004082:	4638      	mov	r0, r7
 8004084:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004088:	47c0      	blx	r8
 800408a:	3001      	adds	r0, #1
 800408c:	d020      	beq.n	80040d0 <_printf_common+0xa8>
 800408e:	6823      	ldr	r3, [r4, #0]
 8004090:	68e5      	ldr	r5, [r4, #12]
 8004092:	f003 0306 	and.w	r3, r3, #6
 8004096:	2b04      	cmp	r3, #4
 8004098:	bf18      	it	ne
 800409a:	2500      	movne	r5, #0
 800409c:	6832      	ldr	r2, [r6, #0]
 800409e:	f04f 0600 	mov.w	r6, #0
 80040a2:	68a3      	ldr	r3, [r4, #8]
 80040a4:	bf08      	it	eq
 80040a6:	1aad      	subeq	r5, r5, r2
 80040a8:	6922      	ldr	r2, [r4, #16]
 80040aa:	bf08      	it	eq
 80040ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040b0:	4293      	cmp	r3, r2
 80040b2:	bfc4      	itt	gt
 80040b4:	1a9b      	subgt	r3, r3, r2
 80040b6:	18ed      	addgt	r5, r5, r3
 80040b8:	341a      	adds	r4, #26
 80040ba:	42b5      	cmp	r5, r6
 80040bc:	d11a      	bne.n	80040f4 <_printf_common+0xcc>
 80040be:	2000      	movs	r0, #0
 80040c0:	e008      	b.n	80040d4 <_printf_common+0xac>
 80040c2:	2301      	movs	r3, #1
 80040c4:	4652      	mov	r2, sl
 80040c6:	4649      	mov	r1, r9
 80040c8:	4638      	mov	r0, r7
 80040ca:	47c0      	blx	r8
 80040cc:	3001      	adds	r0, #1
 80040ce:	d103      	bne.n	80040d8 <_printf_common+0xb0>
 80040d0:	f04f 30ff 	mov.w	r0, #4294967295
 80040d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040d8:	3501      	adds	r5, #1
 80040da:	e7c4      	b.n	8004066 <_printf_common+0x3e>
 80040dc:	2030      	movs	r0, #48	; 0x30
 80040de:	18e1      	adds	r1, r4, r3
 80040e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040e4:	1c5a      	adds	r2, r3, #1
 80040e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040ea:	4422      	add	r2, r4
 80040ec:	3302      	adds	r3, #2
 80040ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040f2:	e7c5      	b.n	8004080 <_printf_common+0x58>
 80040f4:	2301      	movs	r3, #1
 80040f6:	4622      	mov	r2, r4
 80040f8:	4649      	mov	r1, r9
 80040fa:	4638      	mov	r0, r7
 80040fc:	47c0      	blx	r8
 80040fe:	3001      	adds	r0, #1
 8004100:	d0e6      	beq.n	80040d0 <_printf_common+0xa8>
 8004102:	3601      	adds	r6, #1
 8004104:	e7d9      	b.n	80040ba <_printf_common+0x92>
	...

08004108 <_printf_i>:
 8004108:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800410c:	7e0f      	ldrb	r7, [r1, #24]
 800410e:	4691      	mov	r9, r2
 8004110:	2f78      	cmp	r7, #120	; 0x78
 8004112:	4680      	mov	r8, r0
 8004114:	460c      	mov	r4, r1
 8004116:	469a      	mov	sl, r3
 8004118:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800411a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800411e:	d807      	bhi.n	8004130 <_printf_i+0x28>
 8004120:	2f62      	cmp	r7, #98	; 0x62
 8004122:	d80a      	bhi.n	800413a <_printf_i+0x32>
 8004124:	2f00      	cmp	r7, #0
 8004126:	f000 80d9 	beq.w	80042dc <_printf_i+0x1d4>
 800412a:	2f58      	cmp	r7, #88	; 0x58
 800412c:	f000 80a4 	beq.w	8004278 <_printf_i+0x170>
 8004130:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004134:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004138:	e03a      	b.n	80041b0 <_printf_i+0xa8>
 800413a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800413e:	2b15      	cmp	r3, #21
 8004140:	d8f6      	bhi.n	8004130 <_printf_i+0x28>
 8004142:	a101      	add	r1, pc, #4	; (adr r1, 8004148 <_printf_i+0x40>)
 8004144:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004148:	080041a1 	.word	0x080041a1
 800414c:	080041b5 	.word	0x080041b5
 8004150:	08004131 	.word	0x08004131
 8004154:	08004131 	.word	0x08004131
 8004158:	08004131 	.word	0x08004131
 800415c:	08004131 	.word	0x08004131
 8004160:	080041b5 	.word	0x080041b5
 8004164:	08004131 	.word	0x08004131
 8004168:	08004131 	.word	0x08004131
 800416c:	08004131 	.word	0x08004131
 8004170:	08004131 	.word	0x08004131
 8004174:	080042c3 	.word	0x080042c3
 8004178:	080041e5 	.word	0x080041e5
 800417c:	080042a5 	.word	0x080042a5
 8004180:	08004131 	.word	0x08004131
 8004184:	08004131 	.word	0x08004131
 8004188:	080042e5 	.word	0x080042e5
 800418c:	08004131 	.word	0x08004131
 8004190:	080041e5 	.word	0x080041e5
 8004194:	08004131 	.word	0x08004131
 8004198:	08004131 	.word	0x08004131
 800419c:	080042ad 	.word	0x080042ad
 80041a0:	682b      	ldr	r3, [r5, #0]
 80041a2:	1d1a      	adds	r2, r3, #4
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	602a      	str	r2, [r5, #0]
 80041a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041b0:	2301      	movs	r3, #1
 80041b2:	e0a4      	b.n	80042fe <_printf_i+0x1f6>
 80041b4:	6820      	ldr	r0, [r4, #0]
 80041b6:	6829      	ldr	r1, [r5, #0]
 80041b8:	0606      	lsls	r6, r0, #24
 80041ba:	f101 0304 	add.w	r3, r1, #4
 80041be:	d50a      	bpl.n	80041d6 <_printf_i+0xce>
 80041c0:	680e      	ldr	r6, [r1, #0]
 80041c2:	602b      	str	r3, [r5, #0]
 80041c4:	2e00      	cmp	r6, #0
 80041c6:	da03      	bge.n	80041d0 <_printf_i+0xc8>
 80041c8:	232d      	movs	r3, #45	; 0x2d
 80041ca:	4276      	negs	r6, r6
 80041cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041d0:	230a      	movs	r3, #10
 80041d2:	485e      	ldr	r0, [pc, #376]	; (800434c <_printf_i+0x244>)
 80041d4:	e019      	b.n	800420a <_printf_i+0x102>
 80041d6:	680e      	ldr	r6, [r1, #0]
 80041d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80041dc:	602b      	str	r3, [r5, #0]
 80041de:	bf18      	it	ne
 80041e0:	b236      	sxthne	r6, r6
 80041e2:	e7ef      	b.n	80041c4 <_printf_i+0xbc>
 80041e4:	682b      	ldr	r3, [r5, #0]
 80041e6:	6820      	ldr	r0, [r4, #0]
 80041e8:	1d19      	adds	r1, r3, #4
 80041ea:	6029      	str	r1, [r5, #0]
 80041ec:	0601      	lsls	r1, r0, #24
 80041ee:	d501      	bpl.n	80041f4 <_printf_i+0xec>
 80041f0:	681e      	ldr	r6, [r3, #0]
 80041f2:	e002      	b.n	80041fa <_printf_i+0xf2>
 80041f4:	0646      	lsls	r6, r0, #25
 80041f6:	d5fb      	bpl.n	80041f0 <_printf_i+0xe8>
 80041f8:	881e      	ldrh	r6, [r3, #0]
 80041fa:	2f6f      	cmp	r7, #111	; 0x6f
 80041fc:	bf0c      	ite	eq
 80041fe:	2308      	moveq	r3, #8
 8004200:	230a      	movne	r3, #10
 8004202:	4852      	ldr	r0, [pc, #328]	; (800434c <_printf_i+0x244>)
 8004204:	2100      	movs	r1, #0
 8004206:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800420a:	6865      	ldr	r5, [r4, #4]
 800420c:	2d00      	cmp	r5, #0
 800420e:	bfa8      	it	ge
 8004210:	6821      	ldrge	r1, [r4, #0]
 8004212:	60a5      	str	r5, [r4, #8]
 8004214:	bfa4      	itt	ge
 8004216:	f021 0104 	bicge.w	r1, r1, #4
 800421a:	6021      	strge	r1, [r4, #0]
 800421c:	b90e      	cbnz	r6, 8004222 <_printf_i+0x11a>
 800421e:	2d00      	cmp	r5, #0
 8004220:	d04d      	beq.n	80042be <_printf_i+0x1b6>
 8004222:	4615      	mov	r5, r2
 8004224:	fbb6 f1f3 	udiv	r1, r6, r3
 8004228:	fb03 6711 	mls	r7, r3, r1, r6
 800422c:	5dc7      	ldrb	r7, [r0, r7]
 800422e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004232:	4637      	mov	r7, r6
 8004234:	42bb      	cmp	r3, r7
 8004236:	460e      	mov	r6, r1
 8004238:	d9f4      	bls.n	8004224 <_printf_i+0x11c>
 800423a:	2b08      	cmp	r3, #8
 800423c:	d10b      	bne.n	8004256 <_printf_i+0x14e>
 800423e:	6823      	ldr	r3, [r4, #0]
 8004240:	07de      	lsls	r6, r3, #31
 8004242:	d508      	bpl.n	8004256 <_printf_i+0x14e>
 8004244:	6923      	ldr	r3, [r4, #16]
 8004246:	6861      	ldr	r1, [r4, #4]
 8004248:	4299      	cmp	r1, r3
 800424a:	bfde      	ittt	le
 800424c:	2330      	movle	r3, #48	; 0x30
 800424e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004252:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004256:	1b52      	subs	r2, r2, r5
 8004258:	6122      	str	r2, [r4, #16]
 800425a:	464b      	mov	r3, r9
 800425c:	4621      	mov	r1, r4
 800425e:	4640      	mov	r0, r8
 8004260:	f8cd a000 	str.w	sl, [sp]
 8004264:	aa03      	add	r2, sp, #12
 8004266:	f7ff fedf 	bl	8004028 <_printf_common>
 800426a:	3001      	adds	r0, #1
 800426c:	d14c      	bne.n	8004308 <_printf_i+0x200>
 800426e:	f04f 30ff 	mov.w	r0, #4294967295
 8004272:	b004      	add	sp, #16
 8004274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004278:	4834      	ldr	r0, [pc, #208]	; (800434c <_printf_i+0x244>)
 800427a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800427e:	6829      	ldr	r1, [r5, #0]
 8004280:	6823      	ldr	r3, [r4, #0]
 8004282:	f851 6b04 	ldr.w	r6, [r1], #4
 8004286:	6029      	str	r1, [r5, #0]
 8004288:	061d      	lsls	r5, r3, #24
 800428a:	d514      	bpl.n	80042b6 <_printf_i+0x1ae>
 800428c:	07df      	lsls	r7, r3, #31
 800428e:	bf44      	itt	mi
 8004290:	f043 0320 	orrmi.w	r3, r3, #32
 8004294:	6023      	strmi	r3, [r4, #0]
 8004296:	b91e      	cbnz	r6, 80042a0 <_printf_i+0x198>
 8004298:	6823      	ldr	r3, [r4, #0]
 800429a:	f023 0320 	bic.w	r3, r3, #32
 800429e:	6023      	str	r3, [r4, #0]
 80042a0:	2310      	movs	r3, #16
 80042a2:	e7af      	b.n	8004204 <_printf_i+0xfc>
 80042a4:	6823      	ldr	r3, [r4, #0]
 80042a6:	f043 0320 	orr.w	r3, r3, #32
 80042aa:	6023      	str	r3, [r4, #0]
 80042ac:	2378      	movs	r3, #120	; 0x78
 80042ae:	4828      	ldr	r0, [pc, #160]	; (8004350 <_printf_i+0x248>)
 80042b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80042b4:	e7e3      	b.n	800427e <_printf_i+0x176>
 80042b6:	0659      	lsls	r1, r3, #25
 80042b8:	bf48      	it	mi
 80042ba:	b2b6      	uxthmi	r6, r6
 80042bc:	e7e6      	b.n	800428c <_printf_i+0x184>
 80042be:	4615      	mov	r5, r2
 80042c0:	e7bb      	b.n	800423a <_printf_i+0x132>
 80042c2:	682b      	ldr	r3, [r5, #0]
 80042c4:	6826      	ldr	r6, [r4, #0]
 80042c6:	1d18      	adds	r0, r3, #4
 80042c8:	6961      	ldr	r1, [r4, #20]
 80042ca:	6028      	str	r0, [r5, #0]
 80042cc:	0635      	lsls	r5, r6, #24
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	d501      	bpl.n	80042d6 <_printf_i+0x1ce>
 80042d2:	6019      	str	r1, [r3, #0]
 80042d4:	e002      	b.n	80042dc <_printf_i+0x1d4>
 80042d6:	0670      	lsls	r0, r6, #25
 80042d8:	d5fb      	bpl.n	80042d2 <_printf_i+0x1ca>
 80042da:	8019      	strh	r1, [r3, #0]
 80042dc:	2300      	movs	r3, #0
 80042de:	4615      	mov	r5, r2
 80042e0:	6123      	str	r3, [r4, #16]
 80042e2:	e7ba      	b.n	800425a <_printf_i+0x152>
 80042e4:	682b      	ldr	r3, [r5, #0]
 80042e6:	2100      	movs	r1, #0
 80042e8:	1d1a      	adds	r2, r3, #4
 80042ea:	602a      	str	r2, [r5, #0]
 80042ec:	681d      	ldr	r5, [r3, #0]
 80042ee:	6862      	ldr	r2, [r4, #4]
 80042f0:	4628      	mov	r0, r5
 80042f2:	f000 f8d9 	bl	80044a8 <memchr>
 80042f6:	b108      	cbz	r0, 80042fc <_printf_i+0x1f4>
 80042f8:	1b40      	subs	r0, r0, r5
 80042fa:	6060      	str	r0, [r4, #4]
 80042fc:	6863      	ldr	r3, [r4, #4]
 80042fe:	6123      	str	r3, [r4, #16]
 8004300:	2300      	movs	r3, #0
 8004302:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004306:	e7a8      	b.n	800425a <_printf_i+0x152>
 8004308:	462a      	mov	r2, r5
 800430a:	4649      	mov	r1, r9
 800430c:	4640      	mov	r0, r8
 800430e:	6923      	ldr	r3, [r4, #16]
 8004310:	47d0      	blx	sl
 8004312:	3001      	adds	r0, #1
 8004314:	d0ab      	beq.n	800426e <_printf_i+0x166>
 8004316:	6823      	ldr	r3, [r4, #0]
 8004318:	079b      	lsls	r3, r3, #30
 800431a:	d413      	bmi.n	8004344 <_printf_i+0x23c>
 800431c:	68e0      	ldr	r0, [r4, #12]
 800431e:	9b03      	ldr	r3, [sp, #12]
 8004320:	4298      	cmp	r0, r3
 8004322:	bfb8      	it	lt
 8004324:	4618      	movlt	r0, r3
 8004326:	e7a4      	b.n	8004272 <_printf_i+0x16a>
 8004328:	2301      	movs	r3, #1
 800432a:	4632      	mov	r2, r6
 800432c:	4649      	mov	r1, r9
 800432e:	4640      	mov	r0, r8
 8004330:	47d0      	blx	sl
 8004332:	3001      	adds	r0, #1
 8004334:	d09b      	beq.n	800426e <_printf_i+0x166>
 8004336:	3501      	adds	r5, #1
 8004338:	68e3      	ldr	r3, [r4, #12]
 800433a:	9903      	ldr	r1, [sp, #12]
 800433c:	1a5b      	subs	r3, r3, r1
 800433e:	42ab      	cmp	r3, r5
 8004340:	dcf2      	bgt.n	8004328 <_printf_i+0x220>
 8004342:	e7eb      	b.n	800431c <_printf_i+0x214>
 8004344:	2500      	movs	r5, #0
 8004346:	f104 0619 	add.w	r6, r4, #25
 800434a:	e7f5      	b.n	8004338 <_printf_i+0x230>
 800434c:	08004771 	.word	0x08004771
 8004350:	08004782 	.word	0x08004782

08004354 <_sbrk_r>:
 8004354:	b538      	push	{r3, r4, r5, lr}
 8004356:	2300      	movs	r3, #0
 8004358:	4d05      	ldr	r5, [pc, #20]	; (8004370 <_sbrk_r+0x1c>)
 800435a:	4604      	mov	r4, r0
 800435c:	4608      	mov	r0, r1
 800435e:	602b      	str	r3, [r5, #0]
 8004360:	f7fd f95e 	bl	8001620 <_sbrk>
 8004364:	1c43      	adds	r3, r0, #1
 8004366:	d102      	bne.n	800436e <_sbrk_r+0x1a>
 8004368:	682b      	ldr	r3, [r5, #0]
 800436a:	b103      	cbz	r3, 800436e <_sbrk_r+0x1a>
 800436c:	6023      	str	r3, [r4, #0]
 800436e:	bd38      	pop	{r3, r4, r5, pc}
 8004370:	2000121c 	.word	0x2000121c

08004374 <__sread>:
 8004374:	b510      	push	{r4, lr}
 8004376:	460c      	mov	r4, r1
 8004378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800437c:	f000 f8ae 	bl	80044dc <_read_r>
 8004380:	2800      	cmp	r0, #0
 8004382:	bfab      	itete	ge
 8004384:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004386:	89a3      	ldrhlt	r3, [r4, #12]
 8004388:	181b      	addge	r3, r3, r0
 800438a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800438e:	bfac      	ite	ge
 8004390:	6563      	strge	r3, [r4, #84]	; 0x54
 8004392:	81a3      	strhlt	r3, [r4, #12]
 8004394:	bd10      	pop	{r4, pc}

08004396 <__swrite>:
 8004396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800439a:	461f      	mov	r7, r3
 800439c:	898b      	ldrh	r3, [r1, #12]
 800439e:	4605      	mov	r5, r0
 80043a0:	05db      	lsls	r3, r3, #23
 80043a2:	460c      	mov	r4, r1
 80043a4:	4616      	mov	r6, r2
 80043a6:	d505      	bpl.n	80043b4 <__swrite+0x1e>
 80043a8:	2302      	movs	r3, #2
 80043aa:	2200      	movs	r2, #0
 80043ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043b0:	f000 f868 	bl	8004484 <_lseek_r>
 80043b4:	89a3      	ldrh	r3, [r4, #12]
 80043b6:	4632      	mov	r2, r6
 80043b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043bc:	81a3      	strh	r3, [r4, #12]
 80043be:	4628      	mov	r0, r5
 80043c0:	463b      	mov	r3, r7
 80043c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043ca:	f000 b817 	b.w	80043fc <_write_r>

080043ce <__sseek>:
 80043ce:	b510      	push	{r4, lr}
 80043d0:	460c      	mov	r4, r1
 80043d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043d6:	f000 f855 	bl	8004484 <_lseek_r>
 80043da:	1c43      	adds	r3, r0, #1
 80043dc:	89a3      	ldrh	r3, [r4, #12]
 80043de:	bf15      	itete	ne
 80043e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80043e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80043e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80043ea:	81a3      	strheq	r3, [r4, #12]
 80043ec:	bf18      	it	ne
 80043ee:	81a3      	strhne	r3, [r4, #12]
 80043f0:	bd10      	pop	{r4, pc}

080043f2 <__sclose>:
 80043f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043f6:	f000 b813 	b.w	8004420 <_close_r>
	...

080043fc <_write_r>:
 80043fc:	b538      	push	{r3, r4, r5, lr}
 80043fe:	4604      	mov	r4, r0
 8004400:	4608      	mov	r0, r1
 8004402:	4611      	mov	r1, r2
 8004404:	2200      	movs	r2, #0
 8004406:	4d05      	ldr	r5, [pc, #20]	; (800441c <_write_r+0x20>)
 8004408:	602a      	str	r2, [r5, #0]
 800440a:	461a      	mov	r2, r3
 800440c:	f7fd f8bb 	bl	8001586 <_write>
 8004410:	1c43      	adds	r3, r0, #1
 8004412:	d102      	bne.n	800441a <_write_r+0x1e>
 8004414:	682b      	ldr	r3, [r5, #0]
 8004416:	b103      	cbz	r3, 800441a <_write_r+0x1e>
 8004418:	6023      	str	r3, [r4, #0]
 800441a:	bd38      	pop	{r3, r4, r5, pc}
 800441c:	2000121c 	.word	0x2000121c

08004420 <_close_r>:
 8004420:	b538      	push	{r3, r4, r5, lr}
 8004422:	2300      	movs	r3, #0
 8004424:	4d05      	ldr	r5, [pc, #20]	; (800443c <_close_r+0x1c>)
 8004426:	4604      	mov	r4, r0
 8004428:	4608      	mov	r0, r1
 800442a:	602b      	str	r3, [r5, #0]
 800442c:	f7fd f8c7 	bl	80015be <_close>
 8004430:	1c43      	adds	r3, r0, #1
 8004432:	d102      	bne.n	800443a <_close_r+0x1a>
 8004434:	682b      	ldr	r3, [r5, #0]
 8004436:	b103      	cbz	r3, 800443a <_close_r+0x1a>
 8004438:	6023      	str	r3, [r4, #0]
 800443a:	bd38      	pop	{r3, r4, r5, pc}
 800443c:	2000121c 	.word	0x2000121c

08004440 <_fstat_r>:
 8004440:	b538      	push	{r3, r4, r5, lr}
 8004442:	2300      	movs	r3, #0
 8004444:	4d06      	ldr	r5, [pc, #24]	; (8004460 <_fstat_r+0x20>)
 8004446:	4604      	mov	r4, r0
 8004448:	4608      	mov	r0, r1
 800444a:	4611      	mov	r1, r2
 800444c:	602b      	str	r3, [r5, #0]
 800444e:	f7fd f8c1 	bl	80015d4 <_fstat>
 8004452:	1c43      	adds	r3, r0, #1
 8004454:	d102      	bne.n	800445c <_fstat_r+0x1c>
 8004456:	682b      	ldr	r3, [r5, #0]
 8004458:	b103      	cbz	r3, 800445c <_fstat_r+0x1c>
 800445a:	6023      	str	r3, [r4, #0]
 800445c:	bd38      	pop	{r3, r4, r5, pc}
 800445e:	bf00      	nop
 8004460:	2000121c 	.word	0x2000121c

08004464 <_isatty_r>:
 8004464:	b538      	push	{r3, r4, r5, lr}
 8004466:	2300      	movs	r3, #0
 8004468:	4d05      	ldr	r5, [pc, #20]	; (8004480 <_isatty_r+0x1c>)
 800446a:	4604      	mov	r4, r0
 800446c:	4608      	mov	r0, r1
 800446e:	602b      	str	r3, [r5, #0]
 8004470:	f7fd f8bf 	bl	80015f2 <_isatty>
 8004474:	1c43      	adds	r3, r0, #1
 8004476:	d102      	bne.n	800447e <_isatty_r+0x1a>
 8004478:	682b      	ldr	r3, [r5, #0]
 800447a:	b103      	cbz	r3, 800447e <_isatty_r+0x1a>
 800447c:	6023      	str	r3, [r4, #0]
 800447e:	bd38      	pop	{r3, r4, r5, pc}
 8004480:	2000121c 	.word	0x2000121c

08004484 <_lseek_r>:
 8004484:	b538      	push	{r3, r4, r5, lr}
 8004486:	4604      	mov	r4, r0
 8004488:	4608      	mov	r0, r1
 800448a:	4611      	mov	r1, r2
 800448c:	2200      	movs	r2, #0
 800448e:	4d05      	ldr	r5, [pc, #20]	; (80044a4 <_lseek_r+0x20>)
 8004490:	602a      	str	r2, [r5, #0]
 8004492:	461a      	mov	r2, r3
 8004494:	f7fd f8b7 	bl	8001606 <_lseek>
 8004498:	1c43      	adds	r3, r0, #1
 800449a:	d102      	bne.n	80044a2 <_lseek_r+0x1e>
 800449c:	682b      	ldr	r3, [r5, #0]
 800449e:	b103      	cbz	r3, 80044a2 <_lseek_r+0x1e>
 80044a0:	6023      	str	r3, [r4, #0]
 80044a2:	bd38      	pop	{r3, r4, r5, pc}
 80044a4:	2000121c 	.word	0x2000121c

080044a8 <memchr>:
 80044a8:	4603      	mov	r3, r0
 80044aa:	b510      	push	{r4, lr}
 80044ac:	b2c9      	uxtb	r1, r1
 80044ae:	4402      	add	r2, r0
 80044b0:	4293      	cmp	r3, r2
 80044b2:	4618      	mov	r0, r3
 80044b4:	d101      	bne.n	80044ba <memchr+0x12>
 80044b6:	2000      	movs	r0, #0
 80044b8:	e003      	b.n	80044c2 <memchr+0x1a>
 80044ba:	7804      	ldrb	r4, [r0, #0]
 80044bc:	3301      	adds	r3, #1
 80044be:	428c      	cmp	r4, r1
 80044c0:	d1f6      	bne.n	80044b0 <memchr+0x8>
 80044c2:	bd10      	pop	{r4, pc}

080044c4 <__malloc_lock>:
 80044c4:	4801      	ldr	r0, [pc, #4]	; (80044cc <__malloc_lock+0x8>)
 80044c6:	f7ff bb13 	b.w	8003af0 <__retarget_lock_acquire_recursive>
 80044ca:	bf00      	nop
 80044cc:	20001210 	.word	0x20001210

080044d0 <__malloc_unlock>:
 80044d0:	4801      	ldr	r0, [pc, #4]	; (80044d8 <__malloc_unlock+0x8>)
 80044d2:	f7ff bb0e 	b.w	8003af2 <__retarget_lock_release_recursive>
 80044d6:	bf00      	nop
 80044d8:	20001210 	.word	0x20001210

080044dc <_read_r>:
 80044dc:	b538      	push	{r3, r4, r5, lr}
 80044de:	4604      	mov	r4, r0
 80044e0:	4608      	mov	r0, r1
 80044e2:	4611      	mov	r1, r2
 80044e4:	2200      	movs	r2, #0
 80044e6:	4d05      	ldr	r5, [pc, #20]	; (80044fc <_read_r+0x20>)
 80044e8:	602a      	str	r2, [r5, #0]
 80044ea:	461a      	mov	r2, r3
 80044ec:	f7fd f82e 	bl	800154c <_read>
 80044f0:	1c43      	adds	r3, r0, #1
 80044f2:	d102      	bne.n	80044fa <_read_r+0x1e>
 80044f4:	682b      	ldr	r3, [r5, #0]
 80044f6:	b103      	cbz	r3, 80044fa <_read_r+0x1e>
 80044f8:	6023      	str	r3, [r4, #0]
 80044fa:	bd38      	pop	{r3, r4, r5, pc}
 80044fc:	2000121c 	.word	0x2000121c

08004500 <_init>:
 8004500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004502:	bf00      	nop
 8004504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004506:	bc08      	pop	{r3}
 8004508:	469e      	mov	lr, r3
 800450a:	4770      	bx	lr

0800450c <_fini>:
 800450c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800450e:	bf00      	nop
 8004510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004512:	bc08      	pop	{r3}
 8004514:	469e      	mov	lr, r3
 8004516:	4770      	bx	lr
