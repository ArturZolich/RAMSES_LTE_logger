
RAMSES_LTE_logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062d0  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000968  0800640c  0800640c  0001640c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d74  08006d74  000205a0  2**0
                  CONTENTS
  4 .ARM          00000008  08006d74  08006d74  00016d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d7c  08006d7c  000205a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d7c  08006d7c  00016d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d80  08006d80  00016d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005a0  20000000  08006d84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003700  200005a0  08007324  000205a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003ca0  08007324  00023ca0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000205a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bdcc  00000000  00000000  000205c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002079  00000000  00000000  0002c395  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000940  00000000  00000000  0002e410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000878  00000000  00000000  0002ed50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001730e  00000000  00000000  0002f5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000babf  00000000  00000000  000468d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d2d2  00000000  00000000  00052395  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000df667  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030e8  00000000  00000000  000df6b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  000e27a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000e27c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200005a0 	.word	0x200005a0
 8000158:	00000000 	.word	0x00000000
 800015c:	080063f4 	.word	0x080063f4

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200005a4 	.word	0x200005a4
 8000178:	080063f4 	.word	0x080063f4

0800017c <strcmp>:
 800017c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000180:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000184:	2a01      	cmp	r2, #1
 8000186:	bf28      	it	cs
 8000188:	429a      	cmpcs	r2, r3
 800018a:	d0f7      	beq.n	800017c <strcmp>
 800018c:	1ad0      	subs	r0, r2, r3
 800018e:	4770      	bx	lr

08000190 <strlen>:
 8000190:	4603      	mov	r3, r0
 8000192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000196:	2a00      	cmp	r2, #0
 8000198:	d1fb      	bne.n	8000192 <strlen+0x2>
 800019a:	1a18      	subs	r0, r3, r0
 800019c:	3801      	subs	r0, #1
 800019e:	4770      	bx	lr

080001a0 <__aeabi_uldivmod>:
 80001a0:	b953      	cbnz	r3, 80001b8 <__aeabi_uldivmod+0x18>
 80001a2:	b94a      	cbnz	r2, 80001b8 <__aeabi_uldivmod+0x18>
 80001a4:	2900      	cmp	r1, #0
 80001a6:	bf08      	it	eq
 80001a8:	2800      	cmpeq	r0, #0
 80001aa:	bf1c      	itt	ne
 80001ac:	f04f 31ff 	movne.w	r1, #4294967295
 80001b0:	f04f 30ff 	movne.w	r0, #4294967295
 80001b4:	f000 b976 	b.w	80004a4 <__aeabi_idiv0>
 80001b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001c0:	f000 f806 	bl	80001d0 <__udivmoddi4>
 80001c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001cc:	b004      	add	sp, #16
 80001ce:	4770      	bx	lr

080001d0 <__udivmoddi4>:
 80001d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001d4:	9e08      	ldr	r6, [sp, #32]
 80001d6:	460d      	mov	r5, r1
 80001d8:	4604      	mov	r4, r0
 80001da:	4688      	mov	r8, r1
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d14d      	bne.n	800027c <__udivmoddi4+0xac>
 80001e0:	428a      	cmp	r2, r1
 80001e2:	4694      	mov	ip, r2
 80001e4:	d968      	bls.n	80002b8 <__udivmoddi4+0xe8>
 80001e6:	fab2 f282 	clz	r2, r2
 80001ea:	b152      	cbz	r2, 8000202 <__udivmoddi4+0x32>
 80001ec:	fa01 f302 	lsl.w	r3, r1, r2
 80001f0:	f1c2 0120 	rsb	r1, r2, #32
 80001f4:	fa20 f101 	lsr.w	r1, r0, r1
 80001f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80001fc:	ea41 0803 	orr.w	r8, r1, r3
 8000200:	4094      	lsls	r4, r2
 8000202:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000206:	fbb8 f7f1 	udiv	r7, r8, r1
 800020a:	fa1f fe8c 	uxth.w	lr, ip
 800020e:	fb01 8817 	mls	r8, r1, r7, r8
 8000212:	fb07 f00e 	mul.w	r0, r7, lr
 8000216:	0c23      	lsrs	r3, r4, #16
 8000218:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800021c:	4298      	cmp	r0, r3
 800021e:	d90a      	bls.n	8000236 <__udivmoddi4+0x66>
 8000220:	eb1c 0303 	adds.w	r3, ip, r3
 8000224:	f107 35ff 	add.w	r5, r7, #4294967295
 8000228:	f080 811e 	bcs.w	8000468 <__udivmoddi4+0x298>
 800022c:	4298      	cmp	r0, r3
 800022e:	f240 811b 	bls.w	8000468 <__udivmoddi4+0x298>
 8000232:	3f02      	subs	r7, #2
 8000234:	4463      	add	r3, ip
 8000236:	1a1b      	subs	r3, r3, r0
 8000238:	fbb3 f0f1 	udiv	r0, r3, r1
 800023c:	fb01 3310 	mls	r3, r1, r0, r3
 8000240:	fb00 fe0e 	mul.w	lr, r0, lr
 8000244:	b2a4      	uxth	r4, r4
 8000246:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800024a:	45a6      	cmp	lr, r4
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x94>
 800024e:	eb1c 0404 	adds.w	r4, ip, r4
 8000252:	f100 33ff 	add.w	r3, r0, #4294967295
 8000256:	f080 8109 	bcs.w	800046c <__udivmoddi4+0x29c>
 800025a:	45a6      	cmp	lr, r4
 800025c:	f240 8106 	bls.w	800046c <__udivmoddi4+0x29c>
 8000260:	4464      	add	r4, ip
 8000262:	3802      	subs	r0, #2
 8000264:	2100      	movs	r1, #0
 8000266:	eba4 040e 	sub.w	r4, r4, lr
 800026a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800026e:	b11e      	cbz	r6, 8000278 <__udivmoddi4+0xa8>
 8000270:	2300      	movs	r3, #0
 8000272:	40d4      	lsrs	r4, r2
 8000274:	e9c6 4300 	strd	r4, r3, [r6]
 8000278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027c:	428b      	cmp	r3, r1
 800027e:	d908      	bls.n	8000292 <__udivmoddi4+0xc2>
 8000280:	2e00      	cmp	r6, #0
 8000282:	f000 80ee 	beq.w	8000462 <__udivmoddi4+0x292>
 8000286:	2100      	movs	r1, #0
 8000288:	e9c6 0500 	strd	r0, r5, [r6]
 800028c:	4608      	mov	r0, r1
 800028e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000292:	fab3 f183 	clz	r1, r3
 8000296:	2900      	cmp	r1, #0
 8000298:	d14a      	bne.n	8000330 <__udivmoddi4+0x160>
 800029a:	42ab      	cmp	r3, r5
 800029c:	d302      	bcc.n	80002a4 <__udivmoddi4+0xd4>
 800029e:	4282      	cmp	r2, r0
 80002a0:	f200 80fc 	bhi.w	800049c <__udivmoddi4+0x2cc>
 80002a4:	1a84      	subs	r4, r0, r2
 80002a6:	eb65 0303 	sbc.w	r3, r5, r3
 80002aa:	2001      	movs	r0, #1
 80002ac:	4698      	mov	r8, r3
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	d0e2      	beq.n	8000278 <__udivmoddi4+0xa8>
 80002b2:	e9c6 4800 	strd	r4, r8, [r6]
 80002b6:	e7df      	b.n	8000278 <__udivmoddi4+0xa8>
 80002b8:	b902      	cbnz	r2, 80002bc <__udivmoddi4+0xec>
 80002ba:	deff      	udf	#255	; 0xff
 80002bc:	fab2 f282 	clz	r2, r2
 80002c0:	2a00      	cmp	r2, #0
 80002c2:	f040 8091 	bne.w	80003e8 <__udivmoddi4+0x218>
 80002c6:	eba1 000c 	sub.w	r0, r1, ip
 80002ca:	2101      	movs	r1, #1
 80002cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d0:	fa1f fe8c 	uxth.w	lr, ip
 80002d4:	fbb0 f3f7 	udiv	r3, r0, r7
 80002d8:	fb07 0013 	mls	r0, r7, r3, r0
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002e2:	fb0e f003 	mul.w	r0, lr, r3
 80002e6:	42a8      	cmp	r0, r5
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0x12c>
 80002ea:	eb1c 0505 	adds.w	r5, ip, r5
 80002ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x12a>
 80002f4:	42a8      	cmp	r0, r5
 80002f6:	f200 80ce 	bhi.w	8000496 <__udivmoddi4+0x2c6>
 80002fa:	4643      	mov	r3, r8
 80002fc:	1a2d      	subs	r5, r5, r0
 80002fe:	fbb5 f0f7 	udiv	r0, r5, r7
 8000302:	fb07 5510 	mls	r5, r7, r0, r5
 8000306:	fb0e fe00 	mul.w	lr, lr, r0
 800030a:	b2a4      	uxth	r4, r4
 800030c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000310:	45a6      	cmp	lr, r4
 8000312:	d908      	bls.n	8000326 <__udivmoddi4+0x156>
 8000314:	eb1c 0404 	adds.w	r4, ip, r4
 8000318:	f100 35ff 	add.w	r5, r0, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x154>
 800031e:	45a6      	cmp	lr, r4
 8000320:	f200 80b6 	bhi.w	8000490 <__udivmoddi4+0x2c0>
 8000324:	4628      	mov	r0, r5
 8000326:	eba4 040e 	sub.w	r4, r4, lr
 800032a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800032e:	e79e      	b.n	800026e <__udivmoddi4+0x9e>
 8000330:	f1c1 0720 	rsb	r7, r1, #32
 8000334:	408b      	lsls	r3, r1
 8000336:	fa22 fc07 	lsr.w	ip, r2, r7
 800033a:	ea4c 0c03 	orr.w	ip, ip, r3
 800033e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000342:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000346:	fbba f8f9 	udiv	r8, sl, r9
 800034a:	fa20 f307 	lsr.w	r3, r0, r7
 800034e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000352:	408d      	lsls	r5, r1
 8000354:	fa1f fe8c 	uxth.w	lr, ip
 8000358:	431d      	orrs	r5, r3
 800035a:	fa00 f301 	lsl.w	r3, r0, r1
 800035e:	fb08 f00e 	mul.w	r0, r8, lr
 8000362:	0c2c      	lsrs	r4, r5, #16
 8000364:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000368:	42a0      	cmp	r0, r4
 800036a:	fa02 f201 	lsl.w	r2, r2, r1
 800036e:	d90b      	bls.n	8000388 <__udivmoddi4+0x1b8>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f108 3aff 	add.w	sl, r8, #4294967295
 8000378:	f080 8088 	bcs.w	800048c <__udivmoddi4+0x2bc>
 800037c:	42a0      	cmp	r0, r4
 800037e:	f240 8085 	bls.w	800048c <__udivmoddi4+0x2bc>
 8000382:	f1a8 0802 	sub.w	r8, r8, #2
 8000386:	4464      	add	r4, ip
 8000388:	1a24      	subs	r4, r4, r0
 800038a:	fbb4 f0f9 	udiv	r0, r4, r9
 800038e:	fb09 4410 	mls	r4, r9, r0, r4
 8000392:	fb00 fe0e 	mul.w	lr, r0, lr
 8000396:	b2ad      	uxth	r5, r5
 8000398:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800039c:	45a6      	cmp	lr, r4
 800039e:	d908      	bls.n	80003b2 <__udivmoddi4+0x1e2>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f100 35ff 	add.w	r5, r0, #4294967295
 80003a8:	d26c      	bcs.n	8000484 <__udivmoddi4+0x2b4>
 80003aa:	45a6      	cmp	lr, r4
 80003ac:	d96a      	bls.n	8000484 <__udivmoddi4+0x2b4>
 80003ae:	3802      	subs	r0, #2
 80003b0:	4464      	add	r4, ip
 80003b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003b6:	fba0 9502 	umull	r9, r5, r0, r2
 80003ba:	eba4 040e 	sub.w	r4, r4, lr
 80003be:	42ac      	cmp	r4, r5
 80003c0:	46c8      	mov	r8, r9
 80003c2:	46ae      	mov	lr, r5
 80003c4:	d356      	bcc.n	8000474 <__udivmoddi4+0x2a4>
 80003c6:	d053      	beq.n	8000470 <__udivmoddi4+0x2a0>
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d069      	beq.n	80004a0 <__udivmoddi4+0x2d0>
 80003cc:	ebb3 0208 	subs.w	r2, r3, r8
 80003d0:	eb64 040e 	sbc.w	r4, r4, lr
 80003d4:	fa22 f301 	lsr.w	r3, r2, r1
 80003d8:	fa04 f707 	lsl.w	r7, r4, r7
 80003dc:	431f      	orrs	r7, r3
 80003de:	40cc      	lsrs	r4, r1
 80003e0:	e9c6 7400 	strd	r7, r4, [r6]
 80003e4:	2100      	movs	r1, #0
 80003e6:	e747      	b.n	8000278 <__udivmoddi4+0xa8>
 80003e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ec:	f1c2 0120 	rsb	r1, r2, #32
 80003f0:	fa25 f301 	lsr.w	r3, r5, r1
 80003f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f8:	fa20 f101 	lsr.w	r1, r0, r1
 80003fc:	4095      	lsls	r5, r2
 80003fe:	430d      	orrs	r5, r1
 8000400:	fbb3 f1f7 	udiv	r1, r3, r7
 8000404:	fb07 3311 	mls	r3, r7, r1, r3
 8000408:	fa1f fe8c 	uxth.w	lr, ip
 800040c:	0c28      	lsrs	r0, r5, #16
 800040e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000412:	fb01 f30e 	mul.w	r3, r1, lr
 8000416:	4283      	cmp	r3, r0
 8000418:	fa04 f402 	lsl.w	r4, r4, r2
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x260>
 800041e:	eb1c 0000 	adds.w	r0, ip, r0
 8000422:	f101 38ff 	add.w	r8, r1, #4294967295
 8000426:	d22f      	bcs.n	8000488 <__udivmoddi4+0x2b8>
 8000428:	4283      	cmp	r3, r0
 800042a:	d92d      	bls.n	8000488 <__udivmoddi4+0x2b8>
 800042c:	3902      	subs	r1, #2
 800042e:	4460      	add	r0, ip
 8000430:	1ac0      	subs	r0, r0, r3
 8000432:	fbb0 f3f7 	udiv	r3, r0, r7
 8000436:	fb07 0013 	mls	r0, r7, r3, r0
 800043a:	b2ad      	uxth	r5, r5
 800043c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000440:	fb03 f00e 	mul.w	r0, r3, lr
 8000444:	42a8      	cmp	r0, r5
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x28a>
 8000448:	eb1c 0505 	adds.w	r5, ip, r5
 800044c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000450:	d216      	bcs.n	8000480 <__udivmoddi4+0x2b0>
 8000452:	42a8      	cmp	r0, r5
 8000454:	d914      	bls.n	8000480 <__udivmoddi4+0x2b0>
 8000456:	3b02      	subs	r3, #2
 8000458:	4465      	add	r5, ip
 800045a:	1a28      	subs	r0, r5, r0
 800045c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000460:	e738      	b.n	80002d4 <__udivmoddi4+0x104>
 8000462:	4631      	mov	r1, r6
 8000464:	4630      	mov	r0, r6
 8000466:	e707      	b.n	8000278 <__udivmoddi4+0xa8>
 8000468:	462f      	mov	r7, r5
 800046a:	e6e4      	b.n	8000236 <__udivmoddi4+0x66>
 800046c:	4618      	mov	r0, r3
 800046e:	e6f9      	b.n	8000264 <__udivmoddi4+0x94>
 8000470:	454b      	cmp	r3, r9
 8000472:	d2a9      	bcs.n	80003c8 <__udivmoddi4+0x1f8>
 8000474:	ebb9 0802 	subs.w	r8, r9, r2
 8000478:	eb65 0e0c 	sbc.w	lr, r5, ip
 800047c:	3801      	subs	r0, #1
 800047e:	e7a3      	b.n	80003c8 <__udivmoddi4+0x1f8>
 8000480:	4643      	mov	r3, r8
 8000482:	e7ea      	b.n	800045a <__udivmoddi4+0x28a>
 8000484:	4628      	mov	r0, r5
 8000486:	e794      	b.n	80003b2 <__udivmoddi4+0x1e2>
 8000488:	4641      	mov	r1, r8
 800048a:	e7d1      	b.n	8000430 <__udivmoddi4+0x260>
 800048c:	46d0      	mov	r8, sl
 800048e:	e77b      	b.n	8000388 <__udivmoddi4+0x1b8>
 8000490:	4464      	add	r4, ip
 8000492:	3802      	subs	r0, #2
 8000494:	e747      	b.n	8000326 <__udivmoddi4+0x156>
 8000496:	3b02      	subs	r3, #2
 8000498:	4465      	add	r5, ip
 800049a:	e72f      	b.n	80002fc <__udivmoddi4+0x12c>
 800049c:	4608      	mov	r0, r1
 800049e:	e706      	b.n	80002ae <__udivmoddi4+0xde>
 80004a0:	4631      	mov	r1, r6
 80004a2:	e6e9      	b.n	8000278 <__udivmoddi4+0xa8>

080004a4 <__aeabi_idiv0>:
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop

080004a8 <UARTDMA_UartIrqHandler>:
#include "string.h"
#include "scheduler.h"


void UARTDMA_UartIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
	if(huartdma->huart->Instance->SR & UART_FLAG_IDLE)       // Check if Idle flag is set
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	f003 0310 	and.w	r3, r3, #16
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d01a      	beq.n	80004f6 <UARTDMA_UartIrqHandler+0x4e>
	{

		volatile uint32_t tmp;
		tmp = huartdma->huart->Instance->SR;                      // Read status register
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	60fb      	str	r3, [r7, #12]
		tmp = huartdma->huart->Instance->DR;                      // Read data register
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	685b      	ldr	r3, [r3, #4]
 80004d2:	60fb      	str	r3, [r7, #12]
		huartdma->huart->hdmarx->Instance->CCR &= ~DMA_CCR_EN; 	  // Disable DMA - it will force Transfer Complete interrupt if it's enabled
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	f022 0201 	bic.w	r2, r2, #1
 80004ea:	601a      	str	r2, [r3, #0]
																  // BUT! It's only for DMA Streams(i.e F4), not for Channels like there in F103!
		tmp = tmp; // For unused warning
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	60fb      	str	r3, [r7, #12]
		UARTDMA_DmaIrqHandler(huartdma); // Since DMA IRQ won't start independently for Channels, we have to handle it manually
 80004f0:	6878      	ldr	r0, [r7, #4]
 80004f2:	f000 f804 	bl	80004fe <UARTDMA_DmaIrqHandler>
	}
}
 80004f6:	bf00      	nop
 80004f8:	3710      	adds	r7, #16
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <UARTDMA_DmaIrqHandler>:

void UARTDMA_DmaIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 80004fe:	b480      	push	{r7}
 8000500:	b089      	sub	sp, #36	; 0x24
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
	{
		__IO uint32_t ISR;   // DMA interrupt status register
		__IO uint32_t IFCR;  // DMA interrupt flag clear register
	} DMA_Base_Registers;

	DMA_Base_Registers *DmaRegisters = (DMA_Base_Registers *) huartdma->huart->hdmarx->DmaBaseAddress; // Take registers base address
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800050c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800050e:	61bb      	str	r3, [r7, #24]

	if (__HAL_DMA_GET_IT_SOURCE(huartdma->huart->hdmarx, DMA_IT_TC) != RESET) // Check if interrupt source is Transfer Complete
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f003 0302 	and.w	r3, r3, #2
 800051e:	2b00      	cmp	r3, #0
 8000520:	d079      	beq.n	8000616 <UARTDMA_DmaIrqHandler+0x118>
	{
		DmaRegisters->IFCR = DMA_IFCR_CTCIF1 << huartdma->huart->hdmarx->ChannelIndex;	// Clear Transfer Complete flag
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052a:	2202      	movs	r2, #2
 800052c:	409a      	lsls	r2, r3
 800052e:	69bb      	ldr	r3, [r7, #24]
 8000530:	605a      	str	r2, [r3, #4]

		Length = DMA_RX_BUFFER_SIZE - huartdma->huart->hdmarx->Instance->CNDTR; // Get the Length of transfered data
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8000540:	617b      	str	r3, [r7, #20]

		UartBufferPointer = huartdma->UART_Buffer;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8000548:	613b      	str	r3, [r7, #16]
		DmaBufferPointer = 	huartdma->DMA_RX_Buffer;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	3304      	adds	r3, #4
 800054e:	60fb      	str	r3, [r7, #12]

		// Write received data for UART main buffer - circular buffer
		for(i = 0; i < Length; i++)
 8000550:	2300      	movs	r3, #0
 8000552:	83fb      	strh	r3, [r7, #30]
 8000554:	e035      	b.n	80005c2 <UARTDMA_DmaIrqHandler+0xc4>
		{
			TempHead = (huartdma->UartBufferHead + 1) % UART_BUFFER_SIZE;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	f8b3 3c04 	ldrh.w	r3, [r3, #3076]	; 0xc04
 800055c:	3301      	adds	r3, #1
 800055e:	425a      	negs	r2, r3
 8000560:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000564:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000568:	bf58      	it	pl
 800056a:	4253      	negpl	r3, r2
 800056c:	817b      	strh	r3, [r7, #10]
			if(TempHead == huartdma->UartBufferTail)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 8000574:	897a      	ldrh	r2, [r7, #10]
 8000576:	429a      	cmp	r2, r3
 8000578:	d106      	bne.n	8000588 <UARTDMA_DmaIrqHandler+0x8a>
			{
				huartdma->UartBufferHead = huartdma->UartBufferTail;	// No room for new data
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	f8b3 2c06 	ldrh.w	r2, [r3, #3078]	; 0xc06
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	f8a3 2c04 	strh.w	r2, [r3, #3076]	; 0xc04
 8000586:	e019      	b.n	80005bc <UARTDMA_DmaIrqHandler+0xbe>
			}
			else
			{
				UartBufferPointer[TempHead] = DmaBufferPointer[i];
 8000588:	8bfb      	ldrh	r3, [r7, #30]
 800058a:	68fa      	ldr	r2, [r7, #12]
 800058c:	441a      	add	r2, r3
 800058e:	897b      	ldrh	r3, [r7, #10]
 8000590:	6939      	ldr	r1, [r7, #16]
 8000592:	440b      	add	r3, r1
 8000594:	7812      	ldrb	r2, [r2, #0]
 8000596:	701a      	strb	r2, [r3, #0]
				if(UartBufferPointer[TempHead] == '\n')
 8000598:	897b      	ldrh	r3, [r7, #10]
 800059a:	693a      	ldr	r2, [r7, #16]
 800059c:	4413      	add	r3, r2
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b0a      	cmp	r3, #10
 80005a2:	d107      	bne.n	80005b4 <UARTDMA_DmaIrqHandler+0xb6>
				{
					huartdma->UartBufferLines++;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f893 3c08 	ldrb.w	r3, [r3, #3080]	; 0xc08
 80005aa:	3301      	adds	r3, #1
 80005ac:	b2da      	uxtb	r2, r3
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	f883 2c08 	strb.w	r2, [r3, #3080]	; 0xc08
				}
				huartdma->UartBufferHead = TempHead;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	897a      	ldrh	r2, [r7, #10]
 80005b8:	f8a3 2c04 	strh.w	r2, [r3, #3076]	; 0xc04
		for(i = 0; i < Length; i++)
 80005bc:	8bfb      	ldrh	r3, [r7, #30]
 80005be:	3301      	adds	r3, #1
 80005c0:	83fb      	strh	r3, [r7, #30]
 80005c2:	8bfb      	ldrh	r3, [r7, #30]
 80005c4:	697a      	ldr	r2, [r7, #20]
 80005c6:	429a      	cmp	r2, r3
 80005c8:	d8c5      	bhi.n	8000556 <UARTDMA_DmaIrqHandler+0x58>
			}
		}

		huartdma->UartTransferCompleted = 1;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2201      	movs	r2, #1
 80005ce:	f883 2c09 	strb.w	r2, [r3, #3081]	; 0xc09


		DmaRegisters->IFCR = 0x0FU << huartdma->huart->hdmarx->ChannelIndex; 		// Clear all interrupts
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005da:	220f      	movs	r2, #15
 80005dc:	409a      	lsls	r2, r3
 80005de:	69bb      	ldr	r3, [r7, #24]
 80005e0:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CMAR = (uint32_t) huartdma->DMA_RX_Buffer; // Set memory address for DMA again
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	1d1a      	adds	r2, r3, #4
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	60da      	str	r2, [r3, #12]
		huartdma->huart->hdmarx->Instance->CNDTR = DMA_RX_BUFFER_SIZE; // Set number of bytes to receive
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005fc:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CCR |= DMA_CCR_EN;            	// Start DMA transfer
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f042 0201 	orr.w	r2, r2, #1
 8000614:	601a      	str	r2, [r3, #0]
	}
}
 8000616:	bf00      	nop
 8000618:	3724      	adds	r7, #36	; 0x24
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr

08000620 <UARTDMA_GetCharFromBuffer>:

int UARTDMA_GetCharFromBuffer(UARTDMA_HandleTypeDef *huartdma)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	if(huartdma->UartBufferHead == huartdma->UartBufferTail)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	f8b3 2c04 	ldrh.w	r2, [r3, #3076]	; 0xc04
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 8000634:	429a      	cmp	r2, r3
 8000636:	d106      	bne.n	8000646 <UARTDMA_GetCharFromBuffer+0x26>
	{
		huartdma->UartTransferCompleted = 0;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	2200      	movs	r2, #0
 800063c:	f883 2c09 	strb.w	r2, [r3, #3081]	; 0xc09
		return -1; // error - no char to return
 8000640:	f04f 33ff 	mov.w	r3, #4294967295
 8000644:	e016      	b.n	8000674 <UARTDMA_GetCharFromBuffer+0x54>
	}
	huartdma->UartBufferTail = (huartdma->UartBufferTail + 1) % UART_BUFFER_SIZE;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 800064c:	3301      	adds	r3, #1
 800064e:	425a      	negs	r2, r3
 8000650:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000654:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000658:	bf58      	it	pl
 800065a:	4253      	negpl	r3, r2
 800065c:	b29a      	uxth	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	f8a3 2c06 	strh.w	r2, [r3, #3078]	; 0xc06

	return huartdma->UART_Buffer[huartdma->UartBufferTail];
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 800066a:	461a      	mov	r2, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4413      	add	r3, r2
 8000670:	f893 3404 	ldrb.w	r3, [r3, #1028]	; 0x404
}
 8000674:	4618      	mov	r0, r3
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	bc80      	pop	{r7}
 800067c:	4770      	bx	lr

0800067e <UARTDMA_IsDataReady>:

uint8_t UARTDMA_IsDataReady(UARTDMA_HandleTypeDef *huartdma)
{
 800067e:	b480      	push	{r7}
 8000680:	b083      	sub	sp, #12
 8000682:	af00      	add	r7, sp, #0
 8000684:	6078      	str	r0, [r7, #4]
	if(huartdma->UartBufferLines)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	f893 3c08 	ldrb.w	r3, [r3, #3080]	; 0xc08
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <UARTDMA_IsDataReady+0x16>
		return 1;
 8000690:	2301      	movs	r3, #1
 8000692:	e000      	b.n	8000696 <UARTDMA_IsDataReady+0x18>
	else
		return 0;
 8000694:	2300      	movs	r3, #0
}
 8000696:	4618      	mov	r0, r3
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr

080006a0 <UARTDMA_GetLineFromBuffer>:

int UARTDMA_GetLineFromBuffer(UARTDMA_HandleTypeDef *huartdma, char *OutBuffer)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	6039      	str	r1, [r7, #0]
	char TempChar;
	char* LinePointer = OutBuffer;
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	60fb      	str	r3, [r7, #12]
	if(huartdma->UartBufferLines)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	f893 3c08 	ldrb.w	r3, [r3, #3080]	; 0xc08
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d024      	beq.n	8000702 <UARTDMA_GetLineFromBuffer+0x62>
	{
		while((TempChar = UARTDMA_GetCharFromBuffer(huartdma)))
 80006b8:	e00e      	b.n	80006d8 <UARTDMA_GetLineFromBuffer+0x38>
		{
			if(TempChar == '\n')
 80006ba:	7afb      	ldrb	r3, [r7, #11]
 80006bc:	2b0a      	cmp	r3, #10
 80006be:	d014      	beq.n	80006ea <UARTDMA_GetLineFromBuffer+0x4a>
			{
				break;
			}
			if((TempChar != '\n') && (TempChar != '\r')){
 80006c0:	7afb      	ldrb	r3, [r7, #11]
 80006c2:	2b0a      	cmp	r3, #10
 80006c4:	d008      	beq.n	80006d8 <UARTDMA_GetLineFromBuffer+0x38>
 80006c6:	7afb      	ldrb	r3, [r7, #11]
 80006c8:	2b0d      	cmp	r3, #13
 80006ca:	d005      	beq.n	80006d8 <UARTDMA_GetLineFromBuffer+0x38>
				*LinePointer = TempChar;
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	7afa      	ldrb	r2, [r7, #11]
 80006d0:	701a      	strb	r2, [r3, #0]
				LinePointer++;
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	3301      	adds	r3, #1
 80006d6:	60fb      	str	r3, [r7, #12]
		while((TempChar = UARTDMA_GetCharFromBuffer(huartdma)))
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f7ff ffa1 	bl	8000620 <UARTDMA_GetCharFromBuffer>
 80006de:	4603      	mov	r3, r0
 80006e0:	72fb      	strb	r3, [r7, #11]
 80006e2:	7afb      	ldrb	r3, [r7, #11]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d1e8      	bne.n	80006ba <UARTDMA_GetLineFromBuffer+0x1a>
 80006e8:	e000      	b.n	80006ec <UARTDMA_GetLineFromBuffer+0x4c>
				break;
 80006ea:	bf00      	nop
			}
		}
		*LinePointer = 0; // end of cstring
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	2200      	movs	r2, #0
 80006f0:	701a      	strb	r2, [r3, #0]
		huartdma->UartBufferLines--; // decrement line counter
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	f893 3c08 	ldrb.w	r3, [r3, #3080]	; 0xc08
 80006f8:	3b01      	subs	r3, #1
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	f883 2c08 	strb.w	r2, [r3, #3080]	; 0xc08
	}
	return 0;
 8000702:	2300      	movs	r3, #0
}
 8000704:	4618      	mov	r0, r3
 8000706:	3710      	adds	r7, #16
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <UARTDMA_Init>:

void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
	huartdma->huart = huart;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	683a      	ldr	r2, [r7, #0]
 800071a:	601a      	str	r2, [r3, #0]

	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	68da      	ldr	r2, [r3, #12]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f042 0210 	orr.w	r2, r2, #16
 800072e:	60da      	str	r2, [r3, #12]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f042 0202 	orr.w	r2, r2, #2
 8000746:	601a      	str	r2, [r3, #0]

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	6818      	ldr	r0, [r3, #0]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	3304      	adds	r3, #4
 8000750:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000754:	4619      	mov	r1, r3
 8000756:	f004 f81a 	bl	800478e <HAL_UART_Receive_DMA>

	huartdma->huart->hdmarx->Instance->CCR &= ~DMA_CCR_HTIE; // Disable DMA Half Complete interrupt
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f022 0204 	bic.w	r2, r2, #4
 8000770:	601a      	str	r2, [r3, #0]
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000784:	1d39      	adds	r1, r7, #4
 8000786:	f04f 33ff 	mov.w	r3, #4294967295
 800078a:	2201      	movs	r2, #1
 800078c:	4803      	ldr	r0, [pc, #12]	; (800079c <__io_putchar+0x20>)
 800078e:	f003 ff7b 	bl	8004688 <HAL_UART_Transmit>
	return ch;
 8000792:	687b      	ldr	r3, [r7, #4]
}
 8000794:	4618      	mov	r0, r3
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20002a34 	.word	0x20002a34

080007a0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80007a0:	b5b0      	push	{r4, r5, r7, lr}
 80007a2:	f5ad 5de9 	sub.w	sp, sp, #7456	; 0x1d20
 80007a6:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80007a8:	f002 fa11 	bl	8002bce <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80007ac:	f001 fa88 	bl	8001cc0 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */

	srand(time(NULL));
 80007b0:	2000      	movs	r0, #0
 80007b2:	f004 fda9 	bl	8005308 <time>
 80007b6:	4602      	mov	r2, r0
 80007b8:	460b      	mov	r3, r1
 80007ba:	4613      	mov	r3, r2
 80007bc:	4618      	mov	r0, r3
 80007be:	f004 fc83 	bl	80050c8 <srand>

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80007c2:	f001 fc23 	bl	800200c <MX_GPIO_Init>
	MX_DMA_Init();
 80007c6:	f001 fbf3 	bl	8001fb0 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80007ca:	f001 fb9d 	bl	8001f08 <MX_USART2_UART_Init>
	MX_UART4_Init();
 80007ce:	f001 fb1d 	bl	8001e0c <MX_UART4_Init>
	MX_USART1_UART_Init();
 80007d2:	f001 fb6f 	bl	8001eb4 <MX_USART1_UART_Init>
	MX_USART3_UART_Init();
 80007d6:	f001 fbc1 	bl	8001f5c <MX_USART3_UART_Init>
	MX_ADC_Init();
 80007da:	f001 fabf 	bl	8001d5c <MX_ADC_Init>
	MX_UART5_Init();
 80007de:	f001 fb3f 	bl	8001e60 <MX_UART5_Init>
	/* USER CODE BEGIN 2 */

	UARTDMA_Init(&hLTE_uart2dma6, &huart2); // receives LTE modem serial
 80007e2:	49d2      	ldr	r1, [pc, #840]	; (8000b2c <main+0x38c>)
 80007e4:	48d2      	ldr	r0, [pc, #840]	; (8000b30 <main+0x390>)
 80007e6:	f7ff ff91 	bl	800070c <UARTDMA_Init>
	UARTDMA_Init(&hRAM_1_uart1dma5, &huart1); // receives RAMSES 1 serial
 80007ea:	49d2      	ldr	r1, [pc, #840]	; (8000b34 <main+0x394>)
 80007ec:	48d2      	ldr	r0, [pc, #840]	; (8000b38 <main+0x398>)
 80007ee:	f7ff ff8d 	bl	800070c <UARTDMA_Init>
	UARTDMA_Init(&hRAM_2_uart3dma3, &huart3); // receives RAMSES 2 serial
 80007f2:	49d2      	ldr	r1, [pc, #840]	; (8000b3c <main+0x39c>)
 80007f4:	48d2      	ldr	r0, [pc, #840]	; (8000b40 <main+0x3a0>)
 80007f6:	f7ff ff89 	bl	800070c <UARTDMA_Init>

	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, SET);
 80007fa:	2201      	movs	r2, #1
 80007fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000800:	48d0      	ldr	r0, [pc, #832]	; (8000b44 <main+0x3a4>)
 8000802:	f003 f8c9 	bl	8003998 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, SET);
 8000806:	2201      	movs	r2, #1
 8000808:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800080c:	48cd      	ldr	r0, [pc, #820]	; (8000b44 <main+0x3a4>)
 800080e:	f003 f8c3 	bl	8003998 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, SET);
 8000812:	2201      	movs	r2, #1
 8000814:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000818:	48ca      	ldr	r0, [pc, #808]	; (8000b44 <main+0x3a4>)
 800081a:	f003 f8bd 	bl	8003998 <HAL_GPIO_WritePin>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */


	char random[20]; 				// create an initial file name, in case LTE won't get time fix
	itoa(rand(), random, 10);
 800081e:	f004 fc81 	bl	8005124 <rand>
 8000822:	f507 53e6 	add.w	r3, r7, #7360	; 0x1cc0
 8000826:	f103 030c 	add.w	r3, r3, #12
 800082a:	220a      	movs	r2, #10
 800082c:	4619      	mov	r1, r3
 800082e:	f004 fbb3 	bl	8004f98 <itoa>
	strcat((char*)g_fileName, random);
 8000832:	f507 53e6 	add.w	r3, r7, #7360	; 0x1cc0
 8000836:	f103 030c 	add.w	r3, r3, #12
 800083a:	4619      	mov	r1, r3
 800083c:	48c2      	ldr	r0, [pc, #776]	; (8000b48 <main+0x3a8>)
 800083e:	f004 fcaf 	bl	80051a0 <strcat>
	strcat((char*)g_fileName, ".txt\"\r\n");
 8000842:	48c1      	ldr	r0, [pc, #772]	; (8000b48 <main+0x3a8>)
 8000844:	f7ff fca4 	bl	8000190 <strlen>
 8000848:	4603      	mov	r3, r0
 800084a:	461a      	mov	r2, r3
 800084c:	4bbe      	ldr	r3, [pc, #760]	; (8000b48 <main+0x3a8>)
 800084e:	4413      	add	r3, r2
 8000850:	49be      	ldr	r1, [pc, #760]	; (8000b4c <main+0x3ac>)
 8000852:	461a      	mov	r2, r3
 8000854:	460b      	mov	r3, r1
 8000856:	cb03      	ldmia	r3!, {r0, r1}
 8000858:	6010      	str	r0, [r2, #0]
 800085a:	6051      	str	r1, [r2, #4]


	printf("\t\tFILE_RAND: %s\r\n", g_fileName);
 800085c:	49ba      	ldr	r1, [pc, #744]	; (8000b48 <main+0x3a8>)
 800085e:	48bc      	ldr	r0, [pc, #752]	; (8000b50 <main+0x3b0>)
 8000860:	f004 fba4 	bl	8004fac <iprintf>


	// query, sample, dataSize, data


	uint8_t current_action = 0; // currently executed action
 8000864:	2300      	movs	r3, #0
 8000866:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 800086a:	f102 020f 	add.w	r2, r2, #15
 800086e:	7013      	strb	r3, [r2, #0]

	uint8_t filename_time_set = 0; // flag to see if random file name was updated with LTE time
 8000870:	2300      	movs	r3, #0
 8000872:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 8000876:	f102 020e 	add.w	r2, r2, #14
 800087a:	7013      	strb	r3, [r2, #0]
	//uint8_t transfer_status = 0;

	command action_list[255]; // list of actions to perform


	uint8_t startup = 0; // flag to see if we just reset the processor to check LTE modem - if it is On or Off
 800087c:	2300      	movs	r3, #0
 800087e:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 8000882:	f102 020d 	add.w	r2, r2, #13
 8000886:	7013      	strb	r3, [r2, #0]

	int resolution = 0; // reduces amount of printf, helpful in case there's no delay between loops
 8000888:	2300      	movs	r3, #0
 800088a:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 800088e:	f102 0208 	add.w	r2, r2, #8
 8000892:	6013      	str	r3, [r2, #0]


	action_list[0] = LTE_sim_check_active;
 8000894:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000898:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 800089c:	4aad      	ldr	r2, [pc, #692]	; (8000b54 <main+0x3b4>)
 800089e:	461c      	mov	r4, r3
 80008a0:	4615      	mov	r5, r2
 80008a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[1] = LTE_disable_echo;
 80008ae:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 80008b2:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 80008b6:	4aa8      	ldr	r2, [pc, #672]	; (8000b58 <main+0x3b8>)
 80008b8:	f103 041c 	add.w	r4, r3, #28
 80008bc:	4615      	mov	r5, r2
 80008be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[2] = LTE_deactivate_gprs;
 80008ca:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 80008ce:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 80008d2:	4aa2      	ldr	r2, [pc, #648]	; (8000b5c <main+0x3bc>)
 80008d4:	f103 0438 	add.w	r4, r3, #56	; 0x38
 80008d8:	4615      	mov	r5, r2
 80008da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[3] = LTE_attach_gprs;
 80008e6:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 80008ea:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 80008ee:	4a9c      	ldr	r2, [pc, #624]	; (8000b60 <main+0x3c0>)
 80008f0:	f103 0454 	add.w	r4, r3, #84	; 0x54
 80008f4:	4615      	mov	r5, r2
 80008f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[4] = LTE_set_apn;
 8000902:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000906:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 800090a:	4a96      	ldr	r2, [pc, #600]	; (8000b64 <main+0x3c4>)
 800090c:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8000910:	4615      	mov	r5, r2
 8000912:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000914:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000916:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800091a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[5] = LTE_gprs_up;
 800091e:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000922:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000926:	4a90      	ldr	r2, [pc, #576]	; (8000b68 <main+0x3c8>)
 8000928:	f103 048c 	add.w	r4, r3, #140	; 0x8c
 800092c:	4615      	mov	r5, r2
 800092e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000930:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000932:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000936:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[6] = LTE_get_ip;
 800093a:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 800093e:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000942:	4a8a      	ldr	r2, [pc, #552]	; (8000b6c <main+0x3cc>)
 8000944:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8000948:	4615      	mov	r5, r2
 800094a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800094c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800094e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000952:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[7] = LTE_init_gps;
 8000956:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 800095a:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 800095e:	4a84      	ldr	r2, [pc, #528]	; (8000b70 <main+0x3d0>)
 8000960:	f103 04c4 	add.w	r4, r3, #196	; 0xc4
 8000964:	4615      	mov	r5, r2
 8000966:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000968:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800096a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800096e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[8] = LTE_reset_action;
 8000972:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000976:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 800097a:	4a7e      	ldr	r2, [pc, #504]	; (8000b74 <main+0x3d4>)
 800097c:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 8000980:	4615      	mov	r5, r2
 8000982:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000984:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000986:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800098a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[9] = LTE_bearer_1;
 800098e:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000992:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000996:	4a78      	ldr	r2, [pc, #480]	; (8000b78 <main+0x3d8>)
 8000998:	f103 04fc 	add.w	r4, r3, #252	; 0xfc
 800099c:	4615      	mov	r5, r2
 800099e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[10] = LTE_bearer_2;
 80009aa:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 80009ae:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 80009b2:	4a72      	ldr	r2, [pc, #456]	; (8000b7c <main+0x3dc>)
 80009b4:	f503 748c 	add.w	r4, r3, #280	; 0x118
 80009b8:	4615      	mov	r5, r2
 80009ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[11] = LTE_bearer_3;
 80009c6:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 80009ca:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 80009ce:	4a6c      	ldr	r2, [pc, #432]	; (8000b80 <main+0x3e0>)
 80009d0:	f503 749a 	add.w	r4, r3, #308	; 0x134
 80009d4:	4615      	mov	r5, r2
 80009d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[12] = LTE_set_dns;
 80009e2:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 80009e6:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 80009ea:	4a66      	ldr	r2, [pc, #408]	; (8000b84 <main+0x3e4>)
 80009ec:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 80009f0:	4615      	mov	r5, r2
 80009f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[13] = RAM_1_query;
 80009fe:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000a02:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000a06:	4a60      	ldr	r2, [pc, #384]	; (8000b88 <main+0x3e8>)
 8000a08:	f503 74b6 	add.w	r4, r3, #364	; 0x16c
 8000a0c:	4615      	mov	r5, r2
 8000a0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a12:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a16:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[14] = LTE_get_position;
 8000a1a:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000a1e:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000a22:	4a5a      	ldr	r2, [pc, #360]	; (8000b8c <main+0x3ec>)
 8000a24:	f503 74c4 	add.w	r4, r3, #392	; 0x188
 8000a28:	4615      	mov	r5, r2
 8000a2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a2e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a32:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[15] = RAM_2_query;
 8000a36:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000a3a:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000a3e:	4a54      	ldr	r2, [pc, #336]	; (8000b90 <main+0x3f0>)
 8000a40:	f503 74d2 	add.w	r4, r3, #420	; 0x1a4
 8000a44:	4615      	mov	r5, r2
 8000a46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a4a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[16] = LTE_get_time;
 8000a52:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000a56:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000a5a:	4a4e      	ldr	r2, [pc, #312]	; (8000b94 <main+0x3f4>)
 8000a5c:	f503 74e0 	add.w	r4, r3, #448	; 0x1c0
 8000a60:	4615      	mov	r5, r2
 8000a62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a66:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[17] = LTE_ftp_quit;
 8000a6e:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000a72:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000a76:	4a48      	ldr	r2, [pc, #288]	; (8000b98 <main+0x3f8>)
 8000a78:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 8000a7c:	4615      	mov	r5, r2
 8000a7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a82:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[18] = LTE_ftp_bearer;
 8000a8a:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000a8e:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000a92:	4a42      	ldr	r2, [pc, #264]	; (8000b9c <main+0x3fc>)
 8000a94:	f503 74fc 	add.w	r4, r3, #504	; 0x1f8
 8000a98:	4615      	mov	r5, r2
 8000a9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000aa2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[19] = LTE_ftp_type_binary;
 8000aa6:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000aaa:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000aae:	4a3c      	ldr	r2, [pc, #240]	; (8000ba0 <main+0x400>)
 8000ab0:	f503 7405 	add.w	r4, r3, #532	; 0x214
 8000ab4:	4615      	mov	r5, r2
 8000ab6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ab8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000abe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[20] = LTE_ftp_append;
 8000ac2:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000ac6:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000aca:	4a36      	ldr	r2, [pc, #216]	; (8000ba4 <main+0x404>)
 8000acc:	f503 740c 	add.w	r4, r3, #560	; 0x230
 8000ad0:	4615      	mov	r5, r2
 8000ad2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ad4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ad6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ada:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[21] = LTE_ftp_ip;
 8000ade:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000ae2:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000ae6:	4a30      	ldr	r2, [pc, #192]	; (8000ba8 <main+0x408>)
 8000ae8:	f503 7413 	add.w	r4, r3, #588	; 0x24c
 8000aec:	4615      	mov	r5, r2
 8000aee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000af0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000af2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000af6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[22] = LTE_ftp_user;
 8000afa:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000afe:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000b02:	4a2a      	ldr	r2, [pc, #168]	; (8000bac <main+0x40c>)
 8000b04:	f503 741a 	add.w	r4, r3, #616	; 0x268
 8000b08:	4615      	mov	r5, r2
 8000b0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b0e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[23] = LTE_ftp_pass;
 8000b16:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000b1a:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000b1e:	4a24      	ldr	r2, [pc, #144]	; (8000bb0 <main+0x410>)
 8000b20:	f503 7421 	add.w	r4, r3, #644	; 0x284
 8000b24:	4615      	mov	r5, r2
 8000b26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b28:	e044      	b.n	8000bb4 <main+0x414>
 8000b2a:	bf00      	nop
 8000b2c:	20002b0c 	.word	0x20002b0c
 8000b30:	200005bc 	.word	0x200005bc
 8000b34:	20002ac4 	.word	0x20002ac4
 8000b38:	200011c8 	.word	0x200011c8
 8000b3c:	20002b54 	.word	0x20002b54
 8000b40:	20001dd4 	.word	0x20001dd4
 8000b44:	40020400 	.word	0x40020400
 8000b48:	20000000 	.word	0x20000000
 8000b4c:	080066d8 	.word	0x080066d8
 8000b50:	080066e0 	.word	0x080066e0
 8000b54:	200000b4 	.word	0x200000b4
 8000b58:	200000d0 	.word	0x200000d0
 8000b5c:	200000ec 	.word	0x200000ec
 8000b60:	20000108 	.word	0x20000108
 8000b64:	20000124 	.word	0x20000124
 8000b68:	20000140 	.word	0x20000140
 8000b6c:	2000015c 	.word	0x2000015c
 8000b70:	20000178 	.word	0x20000178
 8000b74:	200003c4 	.word	0x200003c4
 8000b78:	200001cc 	.word	0x200001cc
 8000b7c:	200001e8 	.word	0x200001e8
 8000b80:	20000204 	.word	0x20000204
 8000b84:	20000220 	.word	0x20000220
 8000b88:	200003e0 	.word	0x200003e0
 8000b8c:	20000194 	.word	0x20000194
 8000b90:	20000418 	.word	0x20000418
 8000b94:	2000031c 	.word	0x2000031c
 8000b98:	200001b0 	.word	0x200001b0
 8000b9c:	2000023c 	.word	0x2000023c
 8000ba0:	20000258 	.word	0x20000258
 8000ba4:	20000274 	.word	0x20000274
 8000ba8:	20000290 	.word	0x20000290
 8000bac:	200002ac 	.word	0x200002ac
 8000bb0:	200002c8 	.word	0x200002c8
 8000bb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[24] = LTE_ftp_port;
 8000bbe:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000bc2:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000bc6:	4ad1      	ldr	r2, [pc, #836]	; (8000f0c <main+0x76c>)
 8000bc8:	f503 7428 	add.w	r4, r3, #672	; 0x2a0
 8000bcc:	4615      	mov	r5, r2
 8000bce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bd2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bd6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[25] = LTE_ftp_path;
 8000bda:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000bde:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000be2:	4acb      	ldr	r2, [pc, #812]	; (8000f10 <main+0x770>)
 8000be4:	f503 742f 	add.w	r4, r3, #700	; 0x2bc
 8000be8:	4615      	mov	r5, r2
 8000bea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bf2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[26] = LTE_ftp_filename;
 8000bf6:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000bfa:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000bfe:	4ac5      	ldr	r2, [pc, #788]	; (8000f14 <main+0x774>)
 8000c00:	f503 7436 	add.w	r4, r3, #728	; 0x2d8
 8000c04:	4615      	mov	r5, r2
 8000c06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c0a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[27] = LTE_ftp_start_put;
 8000c12:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000c16:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000c1a:	4abf      	ldr	r2, [pc, #764]	; (8000f18 <main+0x778>)
 8000c1c:	f503 743d 	add.w	r4, r3, #756	; 0x2f4
 8000c20:	4615      	mov	r5, r2
 8000c22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c26:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[28] = LTE_ftp_put_data_size;
 8000c2e:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000c32:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000c36:	4ab9      	ldr	r2, [pc, #740]	; (8000f1c <main+0x77c>)
 8000c38:	f503 7444 	add.w	r4, r3, #784	; 0x310
 8000c3c:	4615      	mov	r5, r2
 8000c3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c42:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[29] = LTE_ftp_put_data;
 8000c4a:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000c4e:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000c52:	4ab3      	ldr	r2, [pc, #716]	; (8000f20 <main+0x780>)
 8000c54:	f503 744b 	add.w	r4, r3, #812	; 0x32c
 8000c58:	4615      	mov	r5, r2
 8000c5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c5e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c62:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[30] = LTE_ftp_put_RAM_1_preamble_size;
 8000c66:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000c6a:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000c6e:	4aad      	ldr	r2, [pc, #692]	; (8000f24 <main+0x784>)
 8000c70:	f503 7452 	add.w	r4, r3, #840	; 0x348
 8000c74:	4615      	mov	r5, r2
 8000c76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c7a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[31] = LTE_ftp_put_RAM_1_preamble;
 8000c82:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000c86:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000c8a:	4aa7      	ldr	r2, [pc, #668]	; (8000f28 <main+0x788>)
 8000c8c:	f503 7459 	add.w	r4, r3, #868	; 0x364
 8000c90:	4615      	mov	r5, r2
 8000c92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c96:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[32] = LTE_ftp_put_RAM_1_data_size;
 8000c9e:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000ca2:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000ca6:	4aa1      	ldr	r2, [pc, #644]	; (8000f2c <main+0x78c>)
 8000ca8:	f503 7460 	add.w	r4, r3, #896	; 0x380
 8000cac:	4615      	mov	r5, r2
 8000cae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cb2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[33] = LTE_ftp_put_RAM_1_data;
 8000cba:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000cbe:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000cc2:	4a9b      	ldr	r2, [pc, #620]	; (8000f30 <main+0x790>)
 8000cc4:	f503 7467 	add.w	r4, r3, #924	; 0x39c
 8000cc8:	4615      	mov	r5, r2
 8000cca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ccc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[34] = LTE_ftp_put_RAM_2_preamble_size;
 8000cd6:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000cda:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000cde:	4a95      	ldr	r2, [pc, #596]	; (8000f34 <main+0x794>)
 8000ce0:	f503 746e 	add.w	r4, r3, #952	; 0x3b8
 8000ce4:	4615      	mov	r5, r2
 8000ce6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ce8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[35] = LTE_ftp_put_RAM_2_preamble;
 8000cf2:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000cf6:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000cfa:	4a8f      	ldr	r2, [pc, #572]	; (8000f38 <main+0x798>)
 8000cfc:	f503 7475 	add.w	r4, r3, #980	; 0x3d4
 8000d00:	4615      	mov	r5, r2
 8000d02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d06:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[36] = LTE_ftp_put_RAM_2_data_size;
 8000d0e:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000d12:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000d16:	4a89      	ldr	r2, [pc, #548]	; (8000f3c <main+0x79c>)
 8000d18:	f503 747c 	add.w	r4, r3, #1008	; 0x3f0
 8000d1c:	4615      	mov	r5, r2
 8000d1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d22:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[37] = LTE_ftp_put_RAM_2_data;
 8000d2a:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000d2e:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000d32:	4a83      	ldr	r2, [pc, #524]	; (8000f40 <main+0x7a0>)
 8000d34:	f203 440c 	addw	r4, r3, #1036	; 0x40c
 8000d38:	4615      	mov	r5, r2
 8000d3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d42:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[38] = LTE_ftp_end_put;
 8000d46:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000d4a:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000d4e:	4a7d      	ldr	r2, [pc, #500]	; (8000f44 <main+0x7a4>)
 8000d50:	f503 6485 	add.w	r4, r3, #1064	; 0x428
 8000d54:	4615      	mov	r5, r2
 8000d56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d5a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}


	action_list[39] = RAM_1_sample;
 8000d62:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000d66:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000d6a:	4a77      	ldr	r2, [pc, #476]	; (8000f48 <main+0x7a8>)
 8000d6c:	f203 4444 	addw	r4, r3, #1092	; 0x444
 8000d70:	4615      	mov	r5, r2
 8000d72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d76:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[40] = LTE_get_position;
 8000d7e:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000d82:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000d86:	4a71      	ldr	r2, [pc, #452]	; (8000f4c <main+0x7ac>)
 8000d88:	f503 648c 	add.w	r4, r3, #1120	; 0x460
 8000d8c:	4615      	mov	r5, r2
 8000d8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d92:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d96:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[41] = RAM_2_sample;
 8000d9a:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000d9e:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000da2:	4a6b      	ldr	r2, [pc, #428]	; (8000f50 <main+0x7b0>)
 8000da4:	f203 447c 	addw	r4, r3, #1148	; 0x47c
 8000da8:	4615      	mov	r5, r2
 8000daa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000db2:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[42] = LTE_get_time;
 8000db6:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000dba:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000dbe:	4a65      	ldr	r2, [pc, #404]	; (8000f54 <main+0x7b4>)
 8000dc0:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8000dc4:	4615      	mov	r5, r2
 8000dc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dce:	e884 0007 	stmia.w	r4, {r0, r1, r2}


	// sample loop cycle below


	action_list[43] = LTE_ftp_start_put;
 8000dd2:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000dd6:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000dda:	4a4f      	ldr	r2, [pc, #316]	; (8000f18 <main+0x778>)
 8000ddc:	f203 44b4 	addw	r4, r3, #1204	; 0x4b4
 8000de0:	4615      	mov	r5, r2
 8000de2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000de4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000de6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[44] = LTE_ftp_put_data_size;
 8000dee:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000df2:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000df6:	4a49      	ldr	r2, [pc, #292]	; (8000f1c <main+0x77c>)
 8000df8:	f503 649a 	add.w	r4, r3, #1232	; 0x4d0
 8000dfc:	4615      	mov	r5, r2
 8000dfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[45] = LTE_ftp_put_data;
 8000e0a:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000e0e:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000e12:	4a43      	ldr	r2, [pc, #268]	; (8000f20 <main+0x780>)
 8000e14:	f203 44ec 	addw	r4, r3, #1260	; 0x4ec
 8000e18:	4615      	mov	r5, r2
 8000e1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e1e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e22:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[46] = LTE_ftp_put_RAM_1_preamble_size;
 8000e26:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000e2a:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000e2e:	4a3d      	ldr	r2, [pc, #244]	; (8000f24 <main+0x784>)
 8000e30:	f503 64a1 	add.w	r4, r3, #1288	; 0x508
 8000e34:	4615      	mov	r5, r2
 8000e36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e3a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[47] = LTE_ftp_put_RAM_1_preamble;
 8000e42:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000e46:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000e4a:	4a37      	ldr	r2, [pc, #220]	; (8000f28 <main+0x788>)
 8000e4c:	f203 5424 	addw	r4, r3, #1316	; 0x524
 8000e50:	4615      	mov	r5, r2
 8000e52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e56:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[48] = LTE_ftp_put_RAM_1_data_size;
 8000e5e:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000e62:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000e66:	4a31      	ldr	r2, [pc, #196]	; (8000f2c <main+0x78c>)
 8000e68:	f503 64a8 	add.w	r4, r3, #1344	; 0x540
 8000e6c:	4615      	mov	r5, r2
 8000e6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e72:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[49] = LTE_ftp_put_RAM_1_data;
 8000e7a:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000e7e:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000e82:	4a2b      	ldr	r2, [pc, #172]	; (8000f30 <main+0x790>)
 8000e84:	f203 545c 	addw	r4, r3, #1372	; 0x55c
 8000e88:	4615      	mov	r5, r2
 8000e8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e8e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e92:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[50] = LTE_ftp_put_RAM_2_preamble_size;
 8000e96:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000e9a:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000e9e:	4a25      	ldr	r2, [pc, #148]	; (8000f34 <main+0x794>)
 8000ea0:	f503 64af 	add.w	r4, r3, #1400	; 0x578
 8000ea4:	4615      	mov	r5, r2
 8000ea6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ea8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eaa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000eae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[51] = LTE_ftp_put_RAM_2_preamble;
 8000eb2:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000eb6:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000eba:	4a1f      	ldr	r2, [pc, #124]	; (8000f38 <main+0x798>)
 8000ebc:	f203 5494 	addw	r4, r3, #1428	; 0x594
 8000ec0:	4615      	mov	r5, r2
 8000ec2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ec4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ec6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000eca:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[52] = LTE_ftp_put_RAM_2_data_size;
 8000ece:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000ed2:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000ed6:	4a19      	ldr	r2, [pc, #100]	; (8000f3c <main+0x79c>)
 8000ed8:	f503 64b6 	add.w	r4, r3, #1456	; 0x5b0
 8000edc:	4615      	mov	r5, r2
 8000ede:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ee0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ee2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ee6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	action_list[53] = LTE_ftp_put_RAM_2_data;
 8000eea:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000eee:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000ef2:	4a13      	ldr	r2, [pc, #76]	; (8000f40 <main+0x7a0>)
 8000ef4:	f203 54cc 	addw	r4, r3, #1484	; 0x5cc
 8000ef8:	4615      	mov	r5, r2
 8000efa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000efc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000efe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f02:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[54] = LTE_ftp_end_put;
 8000f06:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000f0a:	e025      	b.n	8000f58 <main+0x7b8>
 8000f0c:	200002e4 	.word	0x200002e4
 8000f10:	20000300 	.word	0x20000300
 8000f14:	20000338 	.word	0x20000338
 8000f18:	20000354 	.word	0x20000354
 8000f1c:	20000370 	.word	0x20000370
 8000f20:	2000038c 	.word	0x2000038c
 8000f24:	200004c0 	.word	0x200004c0
 8000f28:	200004dc 	.word	0x200004dc
 8000f2c:	20000450 	.word	0x20000450
 8000f30:	20000488 	.word	0x20000488
 8000f34:	200004f8 	.word	0x200004f8
 8000f38:	20000514 	.word	0x20000514
 8000f3c:	2000046c 	.word	0x2000046c
 8000f40:	200004a4 	.word	0x200004a4
 8000f44:	200003a8 	.word	0x200003a8
 8000f48:	200003fc 	.word	0x200003fc
 8000f4c:	20000194 	.word	0x20000194
 8000f50:	20000434 	.word	0x20000434
 8000f54:	2000031c 	.word	0x2000031c
 8000f58:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000f5c:	4ac9      	ldr	r2, [pc, #804]	; (8001284 <main+0xae4>)
 8000f5e:	f503 64bd 	add.w	r4, r3, #1512	; 0x5e8
 8000f62:	4615      	mov	r5, r2
 8000f64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f68:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	// get new data
	action_list[55] = RAM_1_sample; 				// list ends with request for new data. A new cycle should be triggered when both RAMSESEs sends data
 8000f70:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000f74:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000f78:	4ac3      	ldr	r2, [pc, #780]	; (8001288 <main+0xae8>)
 8000f7a:	f203 6404 	addw	r4, r3, #1540	; 0x604
 8000f7e:	4615      	mov	r5, r2
 8000f80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f84:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f88:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[56] = LTE_get_position;
 8000f8c:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000f90:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000f94:	4abd      	ldr	r2, [pc, #756]	; (800128c <main+0xaec>)
 8000f96:	f503 64c4 	add.w	r4, r3, #1568	; 0x620
 8000f9a:	4615      	mov	r5, r2
 8000f9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fa0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fa4:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[57] = RAM_2_sample;
 8000fa8:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000fac:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000fb0:	4ab7      	ldr	r2, [pc, #732]	; (8001290 <main+0xaf0>)
 8000fb2:	f203 643c 	addw	r4, r3, #1596	; 0x63c
 8000fb6:	4615      	mov	r5, r2
 8000fb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fbc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fc0:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[58] = LTE_get_time;
 8000fc4:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000fc8:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000fcc:	4ab1      	ldr	r2, [pc, #708]	; (8001294 <main+0xaf4>)
 8000fce:	f503 64cb 	add.w	r4, r3, #1624	; 0x658
 8000fd2:	4615      	mov	r5, r2
 8000fd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fd8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fdc:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	action_list[59] = LTE_reset_action;
 8000fe0:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8000fe4:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8000fe8:	4aab      	ldr	r2, [pc, #684]	; (8001298 <main+0xaf8>)
 8000fea:	f203 6474 	addw	r4, r3, #1652	; 0x674
 8000fee:	4615      	mov	r5, r2
 8000ff0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ff2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ff4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ff8:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	uint8_t last_action = 59; // number of the last action we want to execute
 8000ffc:	233b      	movs	r3, #59	; 0x3b
 8000ffe:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8001002:	f102 0213 	add.w	r2, r2, #19
 8001006:	7013      	strb	r3, [r2, #0]
	uint8_t cycle_start_action = 43; // number of the last action we want to execute
 8001008:	232b      	movs	r3, #43	; 0x2b
 800100a:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 800100e:	f102 0212 	add.w	r2, r2, #18
 8001012:	7013      	strb	r3, [r2, #0]


	//uint8_t ftp_transfer_active = 0;


	Clear_Array(g_LTE_ParseBuffer, BUFFER_SIZE); // let's start with clean LTE buffer
 8001014:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001018:	48a0      	ldr	r0, [pc, #640]	; (800129c <main+0xafc>)
 800101a:	f001 f8a1 	bl	8002160 <Clear_Array>


	hRAM_1_uart1dma5.UartTransferCompleted = 0;
 800101e:	4ba0      	ldr	r3, [pc, #640]	; (80012a0 <main+0xb00>)
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2c09 	strb.w	r2, [r3, #3081]	; 0xc09
	hRAM_2_uart3dma3.UartTransferCompleted = 0;
 8001026:	4b9f      	ldr	r3, [pc, #636]	; (80012a4 <main+0xb04>)
 8001028:	2200      	movs	r2, #0
 800102a:	f883 2c09 	strb.w	r2, [r3, #3081]	; 0xc09

	uint8_t ftp_flag = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 8001034:	f102 0207 	add.w	r2, r2, #7
 8001038:	7013      	strb	r3, [r2, #0]


	while (1)
	{

		if(current_action > last_action){ // wait with a cycle, until RAMSES data is ready
 800103a:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 800103e:	f103 030f 	add.w	r3, r3, #15
 8001042:	781a      	ldrb	r2, [r3, #0]
 8001044:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001048:	f103 0313 	add.w	r3, r3, #19
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	429a      	cmp	r2, r3
 8001050:	d921      	bls.n	8001096 <main+0x8f6>
			if(g_RAM_1_data_ready == 1 && g_RAM_2_data_ready == 1){
 8001052:	4b95      	ldr	r3, [pc, #596]	; (80012a8 <main+0xb08>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d10e      	bne.n	8001078 <main+0x8d8>
 800105a:	4b94      	ldr	r3, [pc, #592]	; (80012ac <main+0xb0c>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d10a      	bne.n	8001078 <main+0x8d8>
				current_action = cycle_start_action; // WARNING, the end of the list must trigger RAMSES measurements (or RAMSES timeout)
 8001062:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001066:	f103 0312 	add.w	r3, r3, #18
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 8001070:	f102 020f 	add.w	r2, r2, #15
 8001074:	7013      	strb	r3, [r2, #0]
 8001076:	e009      	b.n	800108c <main+0x8ec>
			}else{
				current_action = last_action;
 8001078:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 800107c:	f103 0313 	add.w	r3, r3, #19
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 8001086:	f102 020f 	add.w	r2, r2, #15
 800108a:	7013      	strb	r3, [r2, #0]
			}
			Clear_Array(g_LTE_ParseBuffer, BUFFER_SIZE);
 800108c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001090:	4882      	ldr	r0, [pc, #520]	; (800129c <main+0xafc>)
 8001092:	f001 f865 	bl	8002160 <Clear_Array>
		}

		if(action_list[current_action].cmd == LTE_ftp_quit.cmd){ // ftp connection process starts, start blinking blue led.
 8001096:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 800109a:	f103 030f 	add.w	r3, r3, #15
 800109e:	781a      	ldrb	r2, [r3, #0]
 80010a0:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 80010a4:	f6a3 4128 	subw	r1, r3, #3112	; 0xc28
 80010a8:	4613      	mov	r3, r2
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	1a9b      	subs	r3, r3, r2
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	440b      	add	r3, r1
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b7e      	ldr	r3, [pc, #504]	; (80012b0 <main+0xb10>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d105      	bne.n	80010c8 <main+0x928>
			ftp_flag = 1;
 80010bc:	2301      	movs	r3, #1
 80010be:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 80010c2:	f102 0207 	add.w	r2, r2, #7
 80010c6:	7013      	strb	r3, [r2, #0]
		}

		if((resolution % 50) == 0){ // reducing UI speed
 80010c8:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 80010cc:	f103 0308 	add.w	r3, r3, #8
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	4b78      	ldr	r3, [pc, #480]	; (80012b4 <main+0xb14>)
 80010d4:	fb83 1302 	smull	r1, r3, r3, r2
 80010d8:	1119      	asrs	r1, r3, #4
 80010da:	17d3      	asrs	r3, r2, #31
 80010dc:	1acb      	subs	r3, r1, r3
 80010de:	2132      	movs	r1, #50	; 0x32
 80010e0:	fb01 f303 	mul.w	r3, r1, r3
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d114      	bne.n	8001114 <main+0x974>
			//printf("TRYING: >>%s<<\r\n", action_list[current_action].cmd);
			printf("TRYING: >>%d<<\r\n", current_action);
 80010ea:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 80010ee:	f103 030f 	add.w	r3, r3, #15
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	4619      	mov	r1, r3
 80010f6:	4870      	ldr	r0, [pc, #448]	; (80012b8 <main+0xb18>)
 80010f8:	f003 ff58 	bl	8004fac <iprintf>

			if(ftp_flag == 1){
 80010fc:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 8001100:	f103 0307 	add.w	r3, r3, #7
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d104      	bne.n	8001114 <main+0x974>
				HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin); //  ftp connection process starts, start blinking blue led.
 800110a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800110e:	486b      	ldr	r0, [pc, #428]	; (80012bc <main+0xb1c>)
 8001110:	f002 fc5a 	bl	80039c8 <HAL_GPIO_TogglePin>
			}
		}



		enum State state = Do_Action(action_list[current_action], g_LTE_ParseBuffer);
 8001114:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 8001118:	f103 030f 	add.w	r3, r3, #15
 800111c:	781a      	ldrb	r2, [r3, #0]
 800111e:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8001122:	f6a3 4128 	subw	r1, r3, #3112	; 0xc28
 8001126:	4613      	mov	r3, r2
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	1a9b      	subs	r3, r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	440b      	add	r3, r1
 8001130:	4a5a      	ldr	r2, [pc, #360]	; (800129c <main+0xafc>)
 8001132:	9203      	str	r2, [sp, #12]
 8001134:	466c      	mov	r4, sp
 8001136:	f103 0210 	add.w	r2, r3, #16
 800113a:	ca07      	ldmia	r2, {r0, r1, r2}
 800113c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001140:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001142:	f001 f905 	bl	8002350 <Do_Action>
 8001146:	4603      	mov	r3, r0
 8001148:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 800114c:	f102 0211 	add.w	r2, r2, #17
 8001150:	7013      	strb	r3, [r2, #0]
		resolution++;
 8001152:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 8001156:	f103 0308 	add.w	r3, r3, #8
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	3301      	adds	r3, #1
 800115e:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 8001162:	f102 0208 	add.w	r2, r2, #8
 8001166:	6013      	str	r3, [r2, #0]

		//uint8_t query[] = { 0x23, 0x00, 0x00, 0x80, 0xB0, 0x00, 0x00, 0x01 };
		//uint8_t query[] = { 0x23, 0x00, 0x00, 0x00, 0xA8, 0x00, 0x81, 0x01 };

		switch (state){
 8001168:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 800116c:	f103 0311 	add.w	r3, r3, #17
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b05      	cmp	r3, #5
 8001174:	f200 81be 	bhi.w	80014f4 <main+0xd54>
 8001178:	a201      	add	r2, pc, #4	; (adr r2, 8001180 <main+0x9e0>)
 800117a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800117e:	bf00      	nop
 8001180:	0800125f 	.word	0x0800125f
 8001184:	080014f5 	.word	0x080014f5
 8001188:	08001199 	.word	0x08001199
 800118c:	0800140b 	.word	0x0800140b
 8001190:	080012c9 	.word	0x080012c9
 8001194:	080014f5 	.word	0x080014f5
		case GOOD_ANSWER:
			//HAL_UART_Transmit(&huart1, query, SAMPLE_CMD_SIZE, 500);
			//HAL_UART_Transmit(&huart3, sam, SAMPLE_CMD_SIZE, 500);


			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, SET); // Good answer - turn off yellow LED
 8001198:	2201      	movs	r2, #1
 800119a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800119e:	4847      	ldr	r0, [pc, #284]	; (80012bc <main+0xb1c>)
 80011a0:	f002 fbfa 	bl	8003998 <HAL_GPIO_WritePin>

			if(action_list[current_action].cmd == LTE_ftp_put_data.cmd){
 80011a4:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 80011a8:	f103 030f 	add.w	r3, r3, #15
 80011ac:	781a      	ldrb	r2, [r3, #0]
 80011ae:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 80011b2:	f6a3 4128 	subw	r1, r3, #3112	; 0xc28
 80011b6:	4613      	mov	r3, r2
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	1a9b      	subs	r3, r3, r2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	440b      	add	r3, r1
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	4b3f      	ldr	r3, [pc, #252]	; (80012c0 <main+0xb20>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d10b      	bne.n	80011e2 <main+0xa42>
				HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011d0:	483a      	ldr	r0, [pc, #232]	; (80012bc <main+0xb1c>)
 80011d2:	f002 fbe1 	bl	8003998 <HAL_GPIO_WritePin>
				ftp_flag = 2;
 80011d6:	2302      	movs	r3, #2
 80011d8:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 80011dc:	f102 0207 	add.w	r2, r2, #7
 80011e0:	7013      	strb	r3, [r2, #0]
			}

			//printf("%s - %s\r\n", action_list[current_action].cmd, action_list[current_action].good_answer);
			printf("\tREPLY: >>%s<<\r\n", (char*)g_LTE_ParseBuffer);
 80011e2:	492e      	ldr	r1, [pc, #184]	; (800129c <main+0xafc>)
 80011e4:	4837      	ldr	r0, [pc, #220]	; (80012c4 <main+0xb24>)
 80011e6:	f003 fee1 	bl	8004fac <iprintf>

			// printf("\t\t\tTIME: >>%d<<\r\n", HAL_GetTick());

			Do_Action(LTE_reset_action, g_LTE_ParseBuffer);
 80011ea:	4b2b      	ldr	r3, [pc, #172]	; (8001298 <main+0xaf8>)
 80011ec:	4a2b      	ldr	r2, [pc, #172]	; (800129c <main+0xafc>)
 80011ee:	9203      	str	r2, [sp, #12]
 80011f0:	466c      	mov	r4, sp
 80011f2:	f103 0210 	add.w	r2, r3, #16
 80011f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80011f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80011fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011fe:	f001 f8a7 	bl	8002350 <Do_Action>
			current_action++;
 8001202:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 8001206:	f103 030f 	add.w	r3, r3, #15
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	3301      	adds	r3, #1
 800120e:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 8001212:	f102 020f 	add.w	r2, r2, #15
 8001216:	7013      	strb	r3, [r2, #0]
			HAL_Delay(action_list[current_action].timeout / 2);
 8001218:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 800121c:	f103 030f 	add.w	r3, r3, #15
 8001220:	781a      	ldrb	r2, [r3, #0]
 8001222:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8001226:	f6a3 4128 	subw	r1, r3, #3112	; 0xc28
 800122a:	4613      	mov	r3, r2
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	1a9b      	subs	r3, r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	440b      	add	r3, r1
 8001234:	330c      	adds	r3, #12
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	0fda      	lsrs	r2, r3, #31
 800123a:	4413      	add	r3, r2
 800123c:	105b      	asrs	r3, r3, #1
 800123e:	4618      	mov	r0, r3
 8001240:	f001 fd34 	bl	8002cac <HAL_Delay>
			startup = 5;
 8001244:	2305      	movs	r3, #5
 8001246:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 800124a:	f102 020d 	add.w	r2, r2, #13
 800124e:	7013      	strb	r3, [r2, #0]
			resolution = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 8001256:	f102 0208 	add.w	r2, r2, #8
 800125a:	6013      	str	r3, [r2, #0]
			break;
 800125c:	e14b      	b.n	80014f6 <main+0xd56>
		case READY:
			//printf("%s - READY\r\n", action_list[current_action].cmd);
			//printf("BUFFER: >>%s<<\r\n", (char*)LTE_ParseBuffer);
			current_action++;
 800125e:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 8001262:	f103 030f 	add.w	r3, r3, #15
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	3301      	adds	r3, #1
 800126a:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 800126e:	f102 020f 	add.w	r2, r2, #15
 8001272:	7013      	strb	r3, [r2, #0]
			resolution = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 800127a:	f102 0208 	add.w	r2, r2, #8
 800127e:	6013      	str	r3, [r2, #0]
			break;
 8001280:	e139      	b.n	80014f6 <main+0xd56>
 8001282:	bf00      	nop
 8001284:	200003a8 	.word	0x200003a8
 8001288:	200003fc 	.word	0x200003fc
 800128c:	20000194 	.word	0x20000194
 8001290:	20000434 	.word	0x20000434
 8001294:	2000031c 	.word	0x2000031c
 8001298:	200003c4 	.word	0x200003c4
 800129c:	20002c68 	.word	0x20002c68
 80012a0:	200011c8 	.word	0x200011c8
 80012a4:	20001dd4 	.word	0x20001dd4
 80012a8:	2000386a 	.word	0x2000386a
 80012ac:	20003c76 	.word	0x20003c76
 80012b0:	200001b0 	.word	0x200001b0
 80012b4:	51eb851f 	.word	0x51eb851f
 80012b8:	080066f4 	.word	0x080066f4
 80012bc:	40020400 	.word	0x40020400
 80012c0:	2000038c 	.word	0x2000038c
 80012c4:	08006708 	.word	0x08006708
		case TIMEOUT:
			printf("%s - Timeout\r\n", action_list[current_action].cmd);
 80012c8:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 80012cc:	f103 030f 	add.w	r3, r3, #15
 80012d0:	781a      	ldrb	r2, [r3, #0]
 80012d2:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 80012d6:	f6a3 4128 	subw	r1, r3, #3112	; 0xc28
 80012da:	4613      	mov	r3, r2
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	1a9b      	subs	r3, r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	440b      	add	r3, r1
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4619      	mov	r1, r3
 80012e8:	488a      	ldr	r0, [pc, #552]	; (8001514 <main+0xd74>)
 80012ea:	f003 fe5f 	bl	8004fac <iprintf>
			if(startup < 2){
 80012ee:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 80012f2:	f103 030d 	add.w	r3, r3, #13
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d822      	bhi.n	8001342 <main+0xba2>
				printf("INIT\r\n");
 80012fc:	4886      	ldr	r0, [pc, #536]	; (8001518 <main+0xd78>)
 80012fe:	f003 fedb 	bl	80050b8 <puts>
				printf("TURN ON\r\n");
 8001302:	4886      	ldr	r0, [pc, #536]	; (800151c <main+0xd7c>)
 8001304:	f003 fed8 	bl	80050b8 <puts>
				HAL_GPIO_WritePin(GPIOA,  GPIO_PIN_6, GPIO_PIN_SET);
 8001308:	2201      	movs	r2, #1
 800130a:	2140      	movs	r1, #64	; 0x40
 800130c:	4884      	ldr	r0, [pc, #528]	; (8001520 <main+0xd80>)
 800130e:	f002 fb43 	bl	8003998 <HAL_GPIO_WritePin>
				HAL_Delay(1500);
 8001312:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001316:	f001 fcc9 	bl	8002cac <HAL_Delay>
				HAL_GPIO_WritePin(GPIOA,  GPIO_PIN_6, GPIO_PIN_RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	2140      	movs	r1, #64	; 0x40
 800131e:	4880      	ldr	r0, [pc, #512]	; (8001520 <main+0xd80>)
 8001320:	f002 fb3a 	bl	8003998 <HAL_GPIO_WritePin>
				HAL_Delay(5000);
 8001324:	f241 3088 	movw	r0, #5000	; 0x1388
 8001328:	f001 fcc0 	bl	8002cac <HAL_Delay>
				startup++;
 800132c:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 8001330:	f103 030d 	add.w	r3, r3, #13
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	3301      	adds	r3, #1
 8001338:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 800133c:	f102 020d 	add.w	r2, r2, #13
 8001340:	7013      	strb	r3, [r2, #0]
			}

			if(action_list[current_action].cmd == LTE_ftp_put_data.cmd){ // turn off Blue LED, since ftp failed
 8001342:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 8001346:	f103 030f 	add.w	r3, r3, #15
 800134a:	781a      	ldrb	r2, [r3, #0]
 800134c:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8001350:	f6a3 4128 	subw	r1, r3, #3112	; 0xc28
 8001354:	4613      	mov	r3, r2
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	1a9b      	subs	r3, r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	440b      	add	r3, r1
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4b70      	ldr	r3, [pc, #448]	; (8001524 <main+0xd84>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	429a      	cmp	r2, r3
 8001366:	d10b      	bne.n	8001380 <main+0xbe0>
				HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, SET);
 8001368:	2201      	movs	r2, #1
 800136a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800136e:	486e      	ldr	r0, [pc, #440]	; (8001528 <main+0xd88>)
 8001370:	f002 fb12 	bl	8003998 <HAL_GPIO_WritePin>
				ftp_flag = 3;
 8001374:	2303      	movs	r3, #3
 8001376:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 800137a:	f102 0207 	add.w	r2, r2, #7
 800137e:	7013      	strb	r3, [r2, #0]
			}


			Do_Action(LTE_reset_action, (uint8_t*)g_LTE_ParseBuffer);
 8001380:	4b6a      	ldr	r3, [pc, #424]	; (800152c <main+0xd8c>)
 8001382:	4a6b      	ldr	r2, [pc, #428]	; (8001530 <main+0xd90>)
 8001384:	9203      	str	r2, [sp, #12]
 8001386:	466c      	mov	r4, sp
 8001388:	f103 0210 	add.w	r2, r3, #16
 800138c:	ca07      	ldmia	r2, {r0, r1, r2}
 800138e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001392:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001394:	f000 ffdc 	bl	8002350 <Do_Action>

			if(action_list[current_action].cmd != LTE_sim_check_active.cmd){ // the sim active command can timeout, because modem is off by default
 8001398:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 800139c:	f103 030f 	add.w	r3, r3, #15
 80013a0:	781a      	ldrb	r2, [r3, #0]
 80013a2:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 80013a6:	f6a3 4128 	subw	r1, r3, #3112	; 0xc28
 80013aa:	4613      	mov	r3, r2
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	1a9b      	subs	r3, r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	440b      	add	r3, r1
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	4b5f      	ldr	r3, [pc, #380]	; (8001534 <main+0xd94>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d005      	beq.n	80013ca <main+0xc2a>
				HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, RESET); // TIMEOUT - turn on red LED
 80013be:	2200      	movs	r2, #0
 80013c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013c4:	4858      	ldr	r0, [pc, #352]	; (8001528 <main+0xd88>)
 80013c6:	f002 fae7 	bl	8003998 <HAL_GPIO_WritePin>
			}


			HAL_Delay(action_list[current_action].timeout);
 80013ca:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 80013ce:	f103 030f 	add.w	r3, r3, #15
 80013d2:	781a      	ldrb	r2, [r3, #0]
 80013d4:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 80013d8:	f6a3 4128 	subw	r1, r3, #3112	; 0xc28
 80013dc:	4613      	mov	r3, r2
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	1a9b      	subs	r3, r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	440b      	add	r3, r1
 80013e6:	330c      	adds	r3, #12
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f001 fc5e 	bl	8002cac <HAL_Delay>
			current_action=0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 80013f6:	f102 020f 	add.w	r2, r2, #15
 80013fa:	7013      	strb	r3, [r2, #0]
			resolution = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 8001402:	f102 0208 	add.w	r2, r2, #8
 8001406:	6013      	str	r3, [r2, #0]
			break;
 8001408:	e075      	b.n	80014f6 <main+0xd56>
		case BAD_ANSWER:

			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, RESET); // Bad answer - turn on yellow LED
 800140a:	2200      	movs	r2, #0
 800140c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001410:	4845      	ldr	r0, [pc, #276]	; (8001528 <main+0xd88>)
 8001412:	f002 fac1 	bl	8003998 <HAL_GPIO_WritePin>

			if(action_list[current_action].cmd == LTE_ftp_put_data.cmd){ // turn off Blue LED, since ftp failed
 8001416:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 800141a:	f103 030f 	add.w	r3, r3, #15
 800141e:	781a      	ldrb	r2, [r3, #0]
 8001420:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8001424:	f6a3 4128 	subw	r1, r3, #3112	; 0xc28
 8001428:	4613      	mov	r3, r2
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	1a9b      	subs	r3, r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	440b      	add	r3, r1
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	4b3b      	ldr	r3, [pc, #236]	; (8001524 <main+0xd84>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	429a      	cmp	r2, r3
 800143a:	d10b      	bne.n	8001454 <main+0xcb4>
				HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, SET);
 800143c:	2201      	movs	r2, #1
 800143e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001442:	4839      	ldr	r0, [pc, #228]	; (8001528 <main+0xd88>)
 8001444:	f002 faa8 	bl	8003998 <HAL_GPIO_WritePin>
				ftp_flag = 3;
 8001448:	2303      	movs	r3, #3
 800144a:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 800144e:	f102 0207 	add.w	r2, r2, #7
 8001452:	7013      	strb	r3, [r2, #0]
			}

			printf("%s - %s\r\n", action_list[current_action].cmd, action_list[current_action].bad_answer);
 8001454:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 8001458:	f103 030f 	add.w	r3, r3, #15
 800145c:	781a      	ldrb	r2, [r3, #0]
 800145e:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8001462:	f6a3 4128 	subw	r1, r3, #3112	; 0xc28
 8001466:	4613      	mov	r3, r2
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	1a9b      	subs	r3, r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	440b      	add	r3, r1
 8001470:	6818      	ldr	r0, [r3, #0]
 8001472:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 8001476:	f103 030f 	add.w	r3, r3, #15
 800147a:	781a      	ldrb	r2, [r3, #0]
 800147c:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8001480:	f6a3 4128 	subw	r1, r3, #3112	; 0xc28
 8001484:	4613      	mov	r3, r2
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	1a9b      	subs	r3, r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	440b      	add	r3, r1
 800148e:	3310      	adds	r3, #16
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	461a      	mov	r2, r3
 8001494:	4601      	mov	r1, r0
 8001496:	4828      	ldr	r0, [pc, #160]	; (8001538 <main+0xd98>)
 8001498:	f003 fd88 	bl	8004fac <iprintf>
			Do_Action(LTE_reset_action, (uint8_t*)g_LTE_ParseBuffer);
 800149c:	4b23      	ldr	r3, [pc, #140]	; (800152c <main+0xd8c>)
 800149e:	4a24      	ldr	r2, [pc, #144]	; (8001530 <main+0xd90>)
 80014a0:	9203      	str	r2, [sp, #12]
 80014a2:	466c      	mov	r4, sp
 80014a4:	f103 0210 	add.w	r2, r3, #16
 80014a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80014aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80014ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014b0:	f000 ff4e 	bl	8002350 <Do_Action>
			HAL_Delay(action_list[current_action].timeout);
 80014b4:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 80014b8:	f103 030f 	add.w	r3, r3, #15
 80014bc:	781a      	ldrb	r2, [r3, #0]
 80014be:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 80014c2:	f6a3 4128 	subw	r1, r3, #3112	; 0xc28
 80014c6:	4613      	mov	r3, r2
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	1a9b      	subs	r3, r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	440b      	add	r3, r1
 80014d0:	330c      	adds	r3, #12
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f001 fbe9 	bl	8002cac <HAL_Delay>
			startup = 5;
 80014da:	2305      	movs	r3, #5
 80014dc:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 80014e0:	f102 020d 	add.w	r2, r2, #13
 80014e4:	7013      	strb	r3, [r2, #0]
			resolution = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 80014ec:	f102 0208 	add.w	r2, r2, #8
 80014f0:	6013      	str	r3, [r2, #0]
			break;
 80014f2:	e000      	b.n	80014f6 <main+0xd56>
		case FTP_ACTIVE:

			break;
		default:
			break;
 80014f4:	bf00      	nop
		};


		if(hRAM_1_uart1dma5.UartTransferCompleted == 1)
 80014f6:	4b11      	ldr	r3, [pc, #68]	; (800153c <main+0xd9c>)
 80014f8:	f893 3c09 	ldrb.w	r3, [r3, #3081]	; 0xc09
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	f040 80b6 	bne.w	800166e <main+0xece>
		{
			printf("\t\t\t\tRAMSES_1\r\n");
 8001502:	480f      	ldr	r0, [pc, #60]	; (8001540 <main+0xda0>)
 8001504:	f003 fdd8 	bl	80050b8 <puts>
			// remember about timeout


			int tmpByte;
			int count = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 800150e:	6013      	str	r3, [r2, #0]
			//uint8_t* LinePointer = g_RAM_1_data_latest;

			while((tmpByte = UARTDMA_GetCharFromBuffer(&hRAM_1_uart1dma5)) != -1){ // it use a feature that I read 8 bit data, so I can use 16bit negative to detect end of queue
 8001510:	e032      	b.n	8001578 <main+0xdd8>
 8001512:	bf00      	nop
 8001514:	0800671c 	.word	0x0800671c
 8001518:	0800672c 	.word	0x0800672c
 800151c:	08006734 	.word	0x08006734
 8001520:	40020000 	.word	0x40020000
 8001524:	2000038c 	.word	0x2000038c
 8001528:	40020400 	.word	0x40020400
 800152c:	200003c4 	.word	0x200003c4
 8001530:	20002c68 	.word	0x20002c68
 8001534:	200000b4 	.word	0x200000b4
 8001538:	08006740 	.word	0x08006740
 800153c:	200011c8 	.word	0x200011c8
 8001540:	0800674c 	.word	0x0800674c
				//	*LinePointer = (uint8_t) tmpByte;
				//	LinePointer++;
				//printf("\t\t\t\tRAMSES_1: >>%c<<\r\n", (char)tmpByte);
				printf("\t\t\t\t\tRAMSES_1: >>%d<<\r\n", count);
 8001544:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 8001548:	6819      	ldr	r1, [r3, #0]
 800154a:	4851      	ldr	r0, [pc, #324]	; (8001690 <main+0xef0>)
 800154c:	f003 fd2e 	bl	8004fac <iprintf>
				g_RAM_1_data_latest[count]= (uint8_t)tmpByte;
 8001550:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001554:	f103 030c 	add.w	r3, r3, #12
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	b2d9      	uxtb	r1, r3
 800155c:	4a4d      	ldr	r2, [pc, #308]	; (8001694 <main+0xef4>)
 800155e:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4413      	add	r3, r2
 8001566:	460a      	mov	r2, r1
 8001568:	701a      	strb	r2, [r3, #0]
				count++;
 800156a:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	3301      	adds	r3, #1
 8001572:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 8001576:	6013      	str	r3, [r2, #0]
			while((tmpByte = UARTDMA_GetCharFromBuffer(&hRAM_1_uart1dma5)) != -1){ // it use a feature that I read 8 bit data, so I can use 16bit negative to detect end of queue
 8001578:	4847      	ldr	r0, [pc, #284]	; (8001698 <main+0xef8>)
 800157a:	f7ff f851 	bl	8000620 <UARTDMA_GetCharFromBuffer>
 800157e:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001582:	f103 030c 	add.w	r3, r3, #12
 8001586:	6018      	str	r0, [r3, #0]
 8001588:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 800158c:	f103 030c 	add.w	r3, r3, #12
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001596:	d1d5      	bne.n	8001544 <main+0xda4>
			}
			//g_RAM_1_data_latest[count]= '\0';
			printf("\t\t\t\tRAMSES_1: >>%d<<\r\n", count);
 8001598:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 800159c:	6819      	ldr	r1, [r3, #0]
 800159e:	483f      	ldr	r0, [pc, #252]	; (800169c <main+0xefc>)
 80015a0:	f003 fd04 	bl	8004fac <iprintf>

			g_RAM_1_data_size = count;
 80015a4:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	4b3c      	ldr	r3, [pc, #240]	; (80016a0 <main+0xf00>)
 80015ae:	801a      	strh	r2, [r3, #0]

			char save[100] = "AT+FTPPUT=2,";
 80015b0:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 80015b4:	f5a3 6551 	sub.w	r5, r3, #3344	; 0xd10
 80015b8:	4b3a      	ldr	r3, [pc, #232]	; (80016a4 <main+0xf04>)
 80015ba:	462c      	mov	r4, r5
 80015bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015be:	c407      	stmia	r4!, {r0, r1, r2}
 80015c0:	7023      	strb	r3, [r4, #0]
 80015c2:	f105 030d 	add.w	r3, r5, #13
 80015c6:	2257      	movs	r2, #87	; 0x57
 80015c8:	2100      	movs	r1, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	f003 fce6 	bl	8004f9c <memset>
			char len[10];
			itoa(g_RAM_1_data_size, len, 10);
 80015d0:	4b33      	ldr	r3, [pc, #204]	; (80016a0 <main+0xf00>)
 80015d2:	881b      	ldrh	r3, [r3, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80015da:	3b14      	subs	r3, #20
 80015dc:	220a      	movs	r2, #10
 80015de:	4619      	mov	r1, r3
 80015e0:	f003 fcda 	bl	8004f98 <itoa>
			strcat(save, len);
 80015e4:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80015e8:	3a14      	subs	r2, #20
 80015ea:	f107 0310 	add.w	r3, r7, #16
 80015ee:	3b10      	subs	r3, #16
 80015f0:	4611      	mov	r1, r2
 80015f2:	4618      	mov	r0, r3
 80015f4:	f003 fdd4 	bl	80051a0 <strcat>
			strcat(save, "\r\n");
 80015f8:	f107 0310 	add.w	r3, r7, #16
 80015fc:	3b10      	subs	r3, #16
 80015fe:	4618      	mov	r0, r3
 8001600:	f7fe fdc6 	bl	8000190 <strlen>
 8001604:	4603      	mov	r3, r0
 8001606:	461a      	mov	r2, r3
 8001608:	f107 0310 	add.w	r3, r7, #16
 800160c:	3b10      	subs	r3, #16
 800160e:	4413      	add	r3, r2
 8001610:	4a25      	ldr	r2, [pc, #148]	; (80016a8 <main+0xf08>)
 8001612:	8811      	ldrh	r1, [r2, #0]
 8001614:	7892      	ldrb	r2, [r2, #2]
 8001616:	8019      	strh	r1, [r3, #0]
 8001618:	709a      	strb	r2, [r3, #2]

			strcpy((char*)g_RAM_1_dataSize, save);
 800161a:	f107 0310 	add.w	r3, r7, #16
 800161e:	3b10      	subs	r3, #16
 8001620:	4619      	mov	r1, r3
 8001622:	4822      	ldr	r0, [pc, #136]	; (80016ac <main+0xf0c>)
 8001624:	f003 fdcb 	bl	80051be <strcpy>

			char save2[100] = "+FTPPUT: 2,";
 8001628:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 800162c:	f6a3 43ac 	subw	r3, r3, #3244	; 0xcac
 8001630:	4a1f      	ldr	r2, [pc, #124]	; (80016b0 <main+0xf10>)
 8001632:	461c      	mov	r4, r3
 8001634:	ca07      	ldmia	r2, {r0, r1, r2}
 8001636:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800163a:	330c      	adds	r3, #12
 800163c:	2258      	movs	r2, #88	; 0x58
 800163e:	2100      	movs	r1, #0
 8001640:	4618      	mov	r0, r3
 8001642:	f003 fcab 	bl	8004f9c <memset>
			strcat(save2, len);
 8001646:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800164a:	3a14      	subs	r2, #20
 800164c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001650:	3b0c      	subs	r3, #12
 8001652:	4611      	mov	r1, r2
 8001654:	4618      	mov	r0, r3
 8001656:	f003 fda3 	bl	80051a0 <strcat>

			strcpy((char*)g_RAM_1_dataSizeResponse, save2);
 800165a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800165e:	3b0c      	subs	r3, #12
 8001660:	4619      	mov	r1, r3
 8001662:	4814      	ldr	r0, [pc, #80]	; (80016b4 <main+0xf14>)
 8001664:	f003 fdab 	bl	80051be <strcpy>

			g_RAM_1_data_ready = 1;
 8001668:	4b13      	ldr	r3, [pc, #76]	; (80016b8 <main+0xf18>)
 800166a:	2201      	movs	r2, #1
 800166c:	701a      	strb	r2, [r3, #0]
		}

		if(hRAM_2_uart3dma3.UartTransferCompleted == 1)
 800166e:	4b13      	ldr	r3, [pc, #76]	; (80016bc <main+0xf1c>)
 8001670:	f893 3c09 	ldrb.w	r3, [r3, #3081]	; 0xc09
 8001674:	2b01      	cmp	r3, #1
 8001676:	f040 80c3 	bne.w	8001800 <main+0x1060>
		{
			printf("\t\t\t\tRAMSES_2\r\n");
 800167a:	4811      	ldr	r0, [pc, #68]	; (80016c0 <main+0xf20>)
 800167c:	f003 fd1c 	bl	80050b8 <puts>

			int tmpByte;
			int count = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8001686:	f102 021c 	add.w	r2, r2, #28
 800168a:	6013      	str	r3, [r2, #0]
			//uint8_t* LinePointer = g_RAM_1_data_latest;

			while((tmpByte = UARTDMA_GetCharFromBuffer(&hRAM_2_uart3dma3)) != -1){ // it use a feature that I read 8 bit data, so I can use 16bit negative to detect end of queue
 800168c:	e03c      	b.n	8001708 <main+0xf68>
 800168e:	bf00      	nop
 8001690:	0800675c 	.word	0x0800675c
 8001694:	20003468 	.word	0x20003468
 8001698:	200011c8 	.word	0x200011c8
 800169c:	08006774 	.word	0x08006774
 80016a0:	20003868 	.word	0x20003868
 80016a4:	08006908 	.word	0x08006908
 80016a8:	0800678c 	.word	0x0800678c
 80016ac:	20000064 	.word	0x20000064
 80016b0:	0800696c 	.word	0x0800696c
 80016b4:	20000078 	.word	0x20000078
 80016b8:	2000386a 	.word	0x2000386a
 80016bc:	20001dd4 	.word	0x20001dd4
 80016c0:	08006790 	.word	0x08006790
				//	*LinePointer = (uint8_t) tmpByte;
				//	LinePointer++;
				//printf("\t\t\t\tRAMSES_1: >>%c<<\r\n", (char)tmpByte);
				printf("\t\t\t\t\tRAMSES_2: >>%d<<\r\n", count);
 80016c4:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 80016c8:	f103 031c 	add.w	r3, r3, #28
 80016cc:	6819      	ldr	r1, [r3, #0]
 80016ce:	489d      	ldr	r0, [pc, #628]	; (8001944 <main+0x11a4>)
 80016d0:	f003 fc6c 	bl	8004fac <iprintf>
				g_RAM_2_data_latest[count]= (uint8_t)tmpByte;
 80016d4:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 80016d8:	f103 0308 	add.w	r3, r3, #8
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	b2d9      	uxtb	r1, r3
 80016e0:	4a99      	ldr	r2, [pc, #612]	; (8001948 <main+0x11a8>)
 80016e2:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 80016e6:	f103 031c 	add.w	r3, r3, #28
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4413      	add	r3, r2
 80016ee:	460a      	mov	r2, r1
 80016f0:	701a      	strb	r2, [r3, #0]
				count++;
 80016f2:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 80016f6:	f103 031c 	add.w	r3, r3, #28
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	3301      	adds	r3, #1
 80016fe:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8001702:	f102 021c 	add.w	r2, r2, #28
 8001706:	6013      	str	r3, [r2, #0]
			while((tmpByte = UARTDMA_GetCharFromBuffer(&hRAM_2_uart3dma3)) != -1){ // it use a feature that I read 8 bit data, so I can use 16bit negative to detect end of queue
 8001708:	4890      	ldr	r0, [pc, #576]	; (800194c <main+0x11ac>)
 800170a:	f7fe ff89 	bl	8000620 <UARTDMA_GetCharFromBuffer>
 800170e:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001712:	f103 0308 	add.w	r3, r3, #8
 8001716:	6018      	str	r0, [r3, #0]
 8001718:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 800171c:	f103 0308 	add.w	r3, r3, #8
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001726:	d1cd      	bne.n	80016c4 <main+0xf24>
			}
			//g_RAM_1_data_latest[count]= '\0';
			printf("\t\t\t\tRAMSES_2: >>%d<<\r\n", count);
 8001728:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 800172c:	f103 031c 	add.w	r3, r3, #28
 8001730:	6819      	ldr	r1, [r3, #0]
 8001732:	4887      	ldr	r0, [pc, #540]	; (8001950 <main+0x11b0>)
 8001734:	f003 fc3a 	bl	8004fac <iprintf>

			g_RAM_2_data_size = count;
 8001738:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 800173c:	f103 031c 	add.w	r3, r3, #28
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	b29a      	uxth	r2, r3
 8001744:	4b83      	ldr	r3, [pc, #524]	; (8001954 <main+0x11b4>)
 8001746:	801a      	strh	r2, [r3, #0]

			char save[100] = "AT+FTPPUT=2,";
 8001748:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 800174c:	f5a3 6551 	sub.w	r5, r3, #3344	; 0xd10
 8001750:	4b81      	ldr	r3, [pc, #516]	; (8001958 <main+0x11b8>)
 8001752:	462c      	mov	r4, r5
 8001754:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001756:	c407      	stmia	r4!, {r0, r1, r2}
 8001758:	7023      	strb	r3, [r4, #0]
 800175a:	f105 030d 	add.w	r3, r5, #13
 800175e:	2257      	movs	r2, #87	; 0x57
 8001760:	2100      	movs	r1, #0
 8001762:	4618      	mov	r0, r3
 8001764:	f003 fc1a 	bl	8004f9c <memset>
			char len[10];
			itoa(g_RAM_2_data_size, len, 10);
 8001768:	4b7a      	ldr	r3, [pc, #488]	; (8001954 <main+0x11b4>)
 800176a:	881b      	ldrh	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001772:	220a      	movs	r2, #10
 8001774:	4619      	mov	r1, r3
 8001776:	f003 fc0f 	bl	8004f98 <itoa>
			strcat(save, len);
 800177a:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800177e:	f107 0310 	add.w	r3, r7, #16
 8001782:	3b10      	subs	r3, #16
 8001784:	4611      	mov	r1, r2
 8001786:	4618      	mov	r0, r3
 8001788:	f003 fd0a 	bl	80051a0 <strcat>
			strcat(save, "\r\n");
 800178c:	f107 0310 	add.w	r3, r7, #16
 8001790:	3b10      	subs	r3, #16
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe fcfc 	bl	8000190 <strlen>
 8001798:	4603      	mov	r3, r0
 800179a:	461a      	mov	r2, r3
 800179c:	f107 0310 	add.w	r3, r7, #16
 80017a0:	3b10      	subs	r3, #16
 80017a2:	4413      	add	r3, r2
 80017a4:	4a6d      	ldr	r2, [pc, #436]	; (800195c <main+0x11bc>)
 80017a6:	8811      	ldrh	r1, [r2, #0]
 80017a8:	7892      	ldrb	r2, [r2, #2]
 80017aa:	8019      	strh	r1, [r3, #0]
 80017ac:	709a      	strb	r2, [r3, #2]

			strcpy((char*)g_RAM_2_dataSize, save);
 80017ae:	f107 0310 	add.w	r3, r7, #16
 80017b2:	3b10      	subs	r3, #16
 80017b4:	4619      	mov	r1, r3
 80017b6:	486a      	ldr	r0, [pc, #424]	; (8001960 <main+0x11c0>)
 80017b8:	f003 fd01 	bl	80051be <strcpy>

			char save2[100] = "+FTPPUT: 2,";
 80017bc:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 80017c0:	f6a3 43ac 	subw	r3, r3, #3244	; 0xcac
 80017c4:	4a67      	ldr	r2, [pc, #412]	; (8001964 <main+0x11c4>)
 80017c6:	461c      	mov	r4, r3
 80017c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80017ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80017ce:	330c      	adds	r3, #12
 80017d0:	2258      	movs	r2, #88	; 0x58
 80017d2:	2100      	movs	r1, #0
 80017d4:	4618      	mov	r0, r3
 80017d6:	f003 fbe1 	bl	8004f9c <memset>
			strcat(save2, len);
 80017da:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80017de:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017e2:	3b0c      	subs	r3, #12
 80017e4:	4611      	mov	r1, r2
 80017e6:	4618      	mov	r0, r3
 80017e8:	f003 fcda 	bl	80051a0 <strcat>

			strcpy((char*)g_RAM_2_dataSizeResponse, save2);
 80017ec:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017f0:	3b0c      	subs	r3, #12
 80017f2:	4619      	mov	r1, r3
 80017f4:	485c      	ldr	r0, [pc, #368]	; (8001968 <main+0x11c8>)
 80017f6:	f003 fce2 	bl	80051be <strcpy>

			g_RAM_2_data_ready = 1;
 80017fa:	4b5c      	ldr	r3, [pc, #368]	; (800196c <main+0x11cc>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	701a      	strb	r2, [r3, #0]

		}


		if(g_RAM_1_triggered == 1 && ((g_RAM_1_timer + RAMSES_TIMEOUT) < HAL_GetTick())){
 8001800:	4b5b      	ldr	r3, [pc, #364]	; (8001970 <main+0x11d0>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d127      	bne.n	8001858 <main+0x10b8>
 8001808:	4b5a      	ldr	r3, [pc, #360]	; (8001974 <main+0x11d4>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8001810:	3320      	adds	r3, #32
 8001812:	461c      	mov	r4, r3
 8001814:	f001 fa40 	bl	8002c98 <HAL_GetTick>
 8001818:	4603      	mov	r3, r0
 800181a:	429c      	cmp	r4, r3
 800181c:	d21c      	bcs.n	8001858 <main+0x10b8>
			// RAMSES timeout
			// if no response, report timeout
			printf("\t\t\t\tRAMSES_1 TIMEOUT\r\n");
 800181e:	4856      	ldr	r0, [pc, #344]	; (8001978 <main+0x11d8>)
 8001820:	f003 fc4a 	bl	80050b8 <puts>
			strcpy((char*)g_RAM_1_data_latest, "#+RAM_1_TIMEOUT");
 8001824:	4a55      	ldr	r2, [pc, #340]	; (800197c <main+0x11dc>)
 8001826:	4b56      	ldr	r3, [pc, #344]	; (8001980 <main+0x11e0>)
 8001828:	4614      	mov	r4, r2
 800182a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800182c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			strcpy((char*)g_RAM_1_dataSize, "AT+FTPPUT=2,15\r\n");
 8001830:	4a54      	ldr	r2, [pc, #336]	; (8001984 <main+0x11e4>)
 8001832:	4b55      	ldr	r3, [pc, #340]	; (8001988 <main+0x11e8>)
 8001834:	4614      	mov	r4, r2
 8001836:	461d      	mov	r5, r3
 8001838:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800183a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800183c:	682b      	ldr	r3, [r5, #0]
 800183e:	7023      	strb	r3, [r4, #0]
			strcpy((char*)g_RAM_1_dataSizeResponse, "+FTPPUT: 2,15");
 8001840:	4a52      	ldr	r2, [pc, #328]	; (800198c <main+0x11ec>)
 8001842:	4b53      	ldr	r3, [pc, #332]	; (8001990 <main+0x11f0>)
 8001844:	4614      	mov	r4, r2
 8001846:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001848:	c407      	stmia	r4!, {r0, r1, r2}
 800184a:	8023      	strh	r3, [r4, #0]

			g_RAM_1_data_ready = 1;
 800184c:	4b51      	ldr	r3, [pc, #324]	; (8001994 <main+0x11f4>)
 800184e:	2201      	movs	r2, #1
 8001850:	701a      	strb	r2, [r3, #0]
			g_RAM_1_triggered = 0;
 8001852:	4b47      	ldr	r3, [pc, #284]	; (8001970 <main+0x11d0>)
 8001854:	2200      	movs	r2, #0
 8001856:	701a      	strb	r2, [r3, #0]
		}

		if(g_RAM_2_triggered == 1 && ((g_RAM_2_timer + RAMSES_TIMEOUT) < HAL_GetTick())){
 8001858:	4b4f      	ldr	r3, [pc, #316]	; (8001998 <main+0x11f8>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d127      	bne.n	80018b0 <main+0x1110>
 8001860:	4b4e      	ldr	r3, [pc, #312]	; (800199c <main+0x11fc>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8001868:	3320      	adds	r3, #32
 800186a:	461c      	mov	r4, r3
 800186c:	f001 fa14 	bl	8002c98 <HAL_GetTick>
 8001870:	4603      	mov	r3, r0
 8001872:	429c      	cmp	r4, r3
 8001874:	d21c      	bcs.n	80018b0 <main+0x1110>
			// RAMSES timeout
			printf("\t\t\t\tRAMSES_2 TIMEOUT\r\n");
 8001876:	484a      	ldr	r0, [pc, #296]	; (80019a0 <main+0x1200>)
 8001878:	f003 fc1e 	bl	80050b8 <puts>

			strcpy((char*)g_RAM_2_data_latest, "#+RAM_2_TIMEOUT");
 800187c:	4a32      	ldr	r2, [pc, #200]	; (8001948 <main+0x11a8>)
 800187e:	4b49      	ldr	r3, [pc, #292]	; (80019a4 <main+0x1204>)
 8001880:	4614      	mov	r4, r2
 8001882:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001884:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			strcpy((char*)g_RAM_2_dataSize, "AT+FTPPUT=2,15\r\n");
 8001888:	4a35      	ldr	r2, [pc, #212]	; (8001960 <main+0x11c0>)
 800188a:	4b3f      	ldr	r3, [pc, #252]	; (8001988 <main+0x11e8>)
 800188c:	4614      	mov	r4, r2
 800188e:	461d      	mov	r5, r3
 8001890:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001892:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001894:	682b      	ldr	r3, [r5, #0]
 8001896:	7023      	strb	r3, [r4, #0]
			strcpy((char*)g_RAM_2_dataSizeResponse, "+FTPPUT: 2,15");
 8001898:	4a33      	ldr	r2, [pc, #204]	; (8001968 <main+0x11c8>)
 800189a:	4b3d      	ldr	r3, [pc, #244]	; (8001990 <main+0x11f0>)
 800189c:	4614      	mov	r4, r2
 800189e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018a0:	c407      	stmia	r4!, {r0, r1, r2}
 80018a2:	8023      	strh	r3, [r4, #0]

			g_RAM_2_data_ready = 1;
 80018a4:	4b31      	ldr	r3, [pc, #196]	; (800196c <main+0x11cc>)
 80018a6:	2201      	movs	r2, #1
 80018a8:	701a      	strb	r2, [r3, #0]
			g_RAM_2_triggered = 0;
 80018aa:	4b3b      	ldr	r3, [pc, #236]	; (8001998 <main+0x11f8>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	701a      	strb	r2, [r3, #0]
		}


		if(UARTDMA_IsDataReady(&hLTE_uart2dma6))
 80018b0:	483d      	ldr	r0, [pc, #244]	; (80019a8 <main+0x1208>)
 80018b2:	f7fe fee4 	bl	800067e <UARTDMA_IsDataReady>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f000 81da 	beq.w	8001c72 <main+0x14d2>
		{
			UARTDMA_GetLineFromBuffer(&hLTE_uart2dma6, (char*)g_LTE_ParseBuffer);
 80018be:	493b      	ldr	r1, [pc, #236]	; (80019ac <main+0x120c>)
 80018c0:	4839      	ldr	r0, [pc, #228]	; (80019a8 <main+0x1208>)
 80018c2:	f7fe feed 	bl	80006a0 <UARTDMA_GetLineFromBuffer>
			printf("\tBUFFER: >>%s<<\r\n", (char*)g_LTE_ParseBuffer);
 80018c6:	4939      	ldr	r1, [pc, #228]	; (80019ac <main+0x120c>)
 80018c8:	4839      	ldr	r0, [pc, #228]	; (80019b0 <main+0x1210>)
 80018ca:	f003 fb6f 	bl	8004fac <iprintf>

			// if message is time, update FTP filename
			char* ptr;
			if((ptr = strstr((char*)g_LTE_ParseBuffer, "+CCLK: ")) != NULL){
 80018ce:	4939      	ldr	r1, [pc, #228]	; (80019b4 <main+0x1214>)
 80018d0:	4836      	ldr	r0, [pc, #216]	; (80019ac <main+0x120c>)
 80018d2:	f003 fc7c 	bl	80051ce <strstr>
 80018d6:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 80018da:	f103 0304 	add.w	r3, r3, #4
 80018de:	6018      	str	r0, [r3, #0]
 80018e0:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 80018e4:	f103 0304 	add.w	r3, r3, #4
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 8154 	beq.w	8001b98 <main+0x13f8>
				printf("\t\tTIME: %s\r\n", (char*)g_LTE_ParseBuffer);
 80018f0:	492e      	ldr	r1, [pc, #184]	; (80019ac <main+0x120c>)
 80018f2:	4831      	ldr	r0, [pc, #196]	; (80019b8 <main+0x1218>)
 80018f4:	f003 fb5a 	bl	8004fac <iprintf>

				strcat((char*)gps_data_latest,(char*)g_LTE_ParseBuffer); // append GPS data with LTE time
 80018f8:	492c      	ldr	r1, [pc, #176]	; (80019ac <main+0x120c>)
 80018fa:	4830      	ldr	r0, [pc, #192]	; (80019bc <main+0x121c>)
 80018fc:	f003 fc50 	bl	80051a0 <strcat>
				//strcat(gps_data_latest,"\r\n");

				printf("GPS BUFFER AT TIME: %s\r\n", gps_data_latest);
 8001900:	492e      	ldr	r1, [pc, #184]	; (80019bc <main+0x121c>)
 8001902:	482f      	ldr	r0, [pc, #188]	; (80019c0 <main+0x1220>)
 8001904:	f003 fb52 	bl	8004fac <iprintf>

				if(filename_time_set == 0){ // it's the first time I receive, and I will set FTP file name based on it
 8001908:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 800190c:	f103 030e 	add.w	r3, r3, #14
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	f040 80dc 	bne.w	8001ad0 <main+0x1330>


					filename_time_set = 1; // do not repeat
 8001918:	2301      	movs	r3, #1
 800191a:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 800191e:	f102 020e 	add.w	r2, r2, #14
 8001922:	7013      	strb	r3, [r2, #0]

					char* timeString = ptr+8;
 8001924:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001928:	f103 0304 	add.w	r3, r3, #4
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	3308      	adds	r3, #8
 8001930:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8001934:	6013      	str	r3, [r2, #0]

					for (int i = 0; i < strlen(timeString); i++)
 8001936:	2300      	movs	r3, #0
 8001938:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 800193c:	f102 0218 	add.w	r2, r2, #24
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	e07f      	b.n	8001a44 <main+0x12a4>
 8001944:	080067a0 	.word	0x080067a0
 8001948:	20003874 	.word	0x20003874
 800194c:	20001dd4 	.word	0x20001dd4
 8001950:	080067b8 	.word	0x080067b8
 8001954:	20003c74 	.word	0x20003c74
 8001958:	08006908 	.word	0x08006908
 800195c:	0800678c 	.word	0x0800678c
 8001960:	2000008c 	.word	0x2000008c
 8001964:	0800696c 	.word	0x0800696c
 8001968:	200000a0 	.word	0x200000a0
 800196c:	20003c76 	.word	0x20003c76
 8001970:	20003870 	.word	0x20003870
 8001974:	2000386c 	.word	0x2000386c
 8001978:	080067d0 	.word	0x080067d0
 800197c:	20003468 	.word	0x20003468
 8001980:	080067e8 	.word	0x080067e8
 8001984:	20000064 	.word	0x20000064
 8001988:	080067f8 	.word	0x080067f8
 800198c:	20000078 	.word	0x20000078
 8001990:	0800680c 	.word	0x0800680c
 8001994:	2000386a 	.word	0x2000386a
 8001998:	20003c7c 	.word	0x20003c7c
 800199c:	20003c78 	.word	0x20003c78
 80019a0:	0800681c 	.word	0x0800681c
 80019a4:	08006834 	.word	0x08006834
 80019a8:	200005bc 	.word	0x200005bc
 80019ac:	20002c68 	.word	0x20002c68
 80019b0:	08006844 	.word	0x08006844
 80019b4:	08006858 	.word	0x08006858
 80019b8:	08006860 	.word	0x08006860
 80019bc:	20003068 	.word	0x20003068
 80019c0:	08006870 	.word	0x08006870
					{
						if ((timeString[i] > '9') || (timeString[i] < '0')){
 80019c4:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 80019c8:	f103 0318 	add.w	r3, r3, #24
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 80019d2:	6812      	ldr	r2, [r2, #0]
 80019d4:	4413      	add	r3, r2
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b39      	cmp	r3, #57	; 0x39
 80019da:	d80b      	bhi.n	80019f4 <main+0x1254>
 80019dc:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 80019e0:	f103 0318 	add.w	r3, r3, #24
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	4413      	add	r3, r2
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b2f      	cmp	r3, #47	; 0x2f
 80019f2:	d80a      	bhi.n	8001a0a <main+0x126a>
							timeString[i] = '_';
 80019f4:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 80019f8:	f103 0318 	add.w	r3, r3, #24
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8001a02:	6812      	ldr	r2, [r2, #0]
 8001a04:	4413      	add	r3, r2
 8001a06:	225f      	movs	r2, #95	; 0x5f
 8001a08:	701a      	strb	r2, [r3, #0]
						}
						if(i>19){
 8001a0a:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001a0e:	f103 0318 	add.w	r3, r3, #24
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b13      	cmp	r3, #19
 8001a16:	dd0a      	ble.n	8001a2e <main+0x128e>
							timeString[i] = '\0';
 8001a18:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001a1c:	f103 0318 	add.w	r3, r3, #24
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8001a26:	6812      	ldr	r2, [r2, #0]
 8001a28:	4413      	add	r3, r2
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < strlen(timeString); i++)
 8001a2e:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001a32:	f103 0318 	add.w	r3, r3, #24
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8001a3e:	f102 0218 	add.w	r2, r2, #24
 8001a42:	6013      	str	r3, [r2, #0]
 8001a44:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001a48:	6818      	ldr	r0, [r3, #0]
 8001a4a:	f7fe fba1 	bl	8000190 <strlen>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001a54:	f103 0318 	add.w	r3, r3, #24
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d8b2      	bhi.n	80019c4 <main+0x1224>
						}
					}

					char fileNameLocal[60] = "AT+FTPPUTNAME=\"";
 8001a5e:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8001a62:	f6a3 44ac 	subw	r4, r3, #3244	; 0xcac
 8001a66:	4b86      	ldr	r3, [pc, #536]	; (8001c80 <main+0x14e0>)
 8001a68:	4625      	mov	r5, r4
 8001a6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a6c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001a70:	f104 0310 	add.w	r3, r4, #16
 8001a74:	222c      	movs	r2, #44	; 0x2c
 8001a76:	2100      	movs	r1, #0
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f003 fa8f 	bl	8004f9c <memset>
					strcat(fileNameLocal, timeString);
 8001a7e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a82:	3b0c      	subs	r3, #12
 8001a84:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8001a88:	6811      	ldr	r1, [r2, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f003 fb88 	bl	80051a0 <strcat>
					strcat(fileNameLocal, ".txt\"\r\n");
 8001a90:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a94:	3b0c      	subs	r3, #12
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7fe fb7a 	bl	8000190 <strlen>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001aa4:	3b0c      	subs	r3, #12
 8001aa6:	4413      	add	r3, r2
 8001aa8:	4976      	ldr	r1, [pc, #472]	; (8001c84 <main+0x14e4>)
 8001aaa:	461a      	mov	r2, r3
 8001aac:	460b      	mov	r3, r1
 8001aae:	cb03      	ldmia	r3!, {r0, r1}
 8001ab0:	6010      	str	r0, [r2, #0]
 8001ab2:	6051      	str	r1, [r2, #4]


					printf("\tFILENAME_TIME_CHANGE: %s\r\n", fileNameLocal);
 8001ab4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001ab8:	3b0c      	subs	r3, #12
 8001aba:	4619      	mov	r1, r3
 8001abc:	4872      	ldr	r0, [pc, #456]	; (8001c88 <main+0x14e8>)
 8001abe:	f003 fa75 	bl	8004fac <iprintf>

					strcpy((char*)g_fileName, fileNameLocal);
 8001ac2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001ac6:	3b0c      	subs	r3, #12
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4870      	ldr	r0, [pc, #448]	; (8001c8c <main+0x14ec>)
 8001acc:	f003 fb77 	bl	80051be <strcpy>

				}

				char save[100] = "AT+FTPPUT=2,";
 8001ad0:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8001ad4:	f5a3 6551 	sub.w	r5, r3, #3344	; 0xd10
 8001ad8:	4b6d      	ldr	r3, [pc, #436]	; (8001c90 <main+0x14f0>)
 8001ada:	462c      	mov	r4, r5
 8001adc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ade:	c407      	stmia	r4!, {r0, r1, r2}
 8001ae0:	7023      	strb	r3, [r4, #0]
 8001ae2:	f105 030d 	add.w	r3, r5, #13
 8001ae6:	2257      	movs	r2, #87	; 0x57
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4618      	mov	r0, r3
 8001aec:	f003 fa56 	bl	8004f9c <memset>
				char len[5];
				itoa(strlen((char*)gps_data_latest), len, 10);
 8001af0:	4868      	ldr	r0, [pc, #416]	; (8001c94 <main+0x14f4>)
 8001af2:	f7fe fb4d 	bl	8000190 <strlen>
 8001af6:	4603      	mov	r3, r0
 8001af8:	4618      	mov	r0, r3
 8001afa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001afe:	3b08      	subs	r3, #8
 8001b00:	220a      	movs	r2, #10
 8001b02:	4619      	mov	r1, r3
 8001b04:	f003 fa48 	bl	8004f98 <itoa>
				strcat(save, len);
 8001b08:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8001b0c:	3a08      	subs	r2, #8
 8001b0e:	f107 0310 	add.w	r3, r7, #16
 8001b12:	3b10      	subs	r3, #16
 8001b14:	4611      	mov	r1, r2
 8001b16:	4618      	mov	r0, r3
 8001b18:	f003 fb42 	bl	80051a0 <strcat>
				strcat(save, "\r\n");
 8001b1c:	f107 0310 	add.w	r3, r7, #16
 8001b20:	3b10      	subs	r3, #16
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7fe fb34 	bl	8000190 <strlen>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	f107 0310 	add.w	r3, r7, #16
 8001b30:	3b10      	subs	r3, #16
 8001b32:	4413      	add	r3, r2
 8001b34:	4a58      	ldr	r2, [pc, #352]	; (8001c98 <main+0x14f8>)
 8001b36:	8811      	ldrh	r1, [r2, #0]
 8001b38:	7892      	ldrb	r2, [r2, #2]
 8001b3a:	8019      	strh	r1, [r3, #0]
 8001b3c:	709a      	strb	r2, [r3, #2]

				strcpy((char*)g_dataSize, save);
 8001b3e:	f107 0310 	add.w	r3, r7, #16
 8001b42:	3b10      	subs	r3, #16
 8001b44:	4619      	mov	r1, r3
 8001b46:	4855      	ldr	r0, [pc, #340]	; (8001c9c <main+0x14fc>)
 8001b48:	f003 fb39 	bl	80051be <strcpy>

				char save2[100] = "+FTPPUT: 2,";
 8001b4c:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8001b50:	f6a3 43ac 	subw	r3, r3, #3244	; 0xcac
 8001b54:	4a52      	ldr	r2, [pc, #328]	; (8001ca0 <main+0x1500>)
 8001b56:	461c      	mov	r4, r3
 8001b58:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001b5e:	330c      	adds	r3, #12
 8001b60:	2258      	movs	r2, #88	; 0x58
 8001b62:	2100      	movs	r1, #0
 8001b64:	4618      	mov	r0, r3
 8001b66:	f003 fa19 	bl	8004f9c <memset>
				strcat(save2, len);
 8001b6a:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8001b6e:	3a08      	subs	r2, #8
 8001b70:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001b74:	3b0c      	subs	r3, #12
 8001b76:	4611      	mov	r1, r2
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f003 fb11 	bl	80051a0 <strcat>

				strcpy((char*)g_dataSizeResponse, save2);
 8001b7e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001b82:	3b0c      	subs	r3, #12
 8001b84:	4619      	mov	r1, r3
 8001b86:	4847      	ldr	r0, [pc, #284]	; (8001ca4 <main+0x1504>)
 8001b88:	f003 fb19 	bl	80051be <strcpy>

				printf("\tASSERT_EXPECTED_REPLY: %s\r\n", g_dataSizeResponse);
 8001b8c:	4945      	ldr	r1, [pc, #276]	; (8001ca4 <main+0x1504>)
 8001b8e:	4846      	ldr	r0, [pc, #280]	; (8001ca8 <main+0x1508>)
 8001b90:	f003 fa0c 	bl	8004fac <iprintf>
 8001b94:	f7ff ba51 	b.w	800103a <main+0x89a>
				//				}else{
				//					printf("\t\t\t\tCALLOC_FAIL_DATA");
				//				}


			}else if((ptr = strstr((char*)g_LTE_ParseBuffer, "+FTPPUT: 1,1,")) != NULL){ // else, if message is FTP server ready for data response
 8001b98:	4944      	ldr	r1, [pc, #272]	; (8001cac <main+0x150c>)
 8001b9a:	4845      	ldr	r0, [pc, #276]	; (8001cb0 <main+0x1510>)
 8001b9c:	f003 fb17 	bl	80051ce <strstr>
 8001ba0:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001ba4:	f103 0304 	add.w	r3, r3, #4
 8001ba8:	6018      	str	r0, [r3, #0]
 8001baa:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001bae:	f103 0304 	add.w	r3, r3, #4
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d00f      	beq.n	8001bd8 <main+0x1438>
				//ftp_transfer_active = 1;
				//transfer_status++;
				printf("FTP #: %d\r\n", atoi(ptr+13));
 8001bb8:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001bbc:	f103 0304 	add.w	r3, r3, #4
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	330d      	adds	r3, #13
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f003 f9a1 	bl	8004f0c <atoi>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4839      	ldr	r0, [pc, #228]	; (8001cb4 <main+0x1514>)
 8001bd0:	f003 f9ec 	bl	8004fac <iprintf>
 8001bd4:	f7ff ba31 	b.w	800103a <main+0x89a>
			}else if((ptr = strstr((char*)g_LTE_ParseBuffer, "+CGNSINF")) != NULL){ // save GPS data
 8001bd8:	4937      	ldr	r1, [pc, #220]	; (8001cb8 <main+0x1518>)
 8001bda:	4835      	ldr	r0, [pc, #212]	; (8001cb0 <main+0x1510>)
 8001bdc:	f003 faf7 	bl	80051ce <strstr>
 8001be0:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001be4:	f103 0304 	add.w	r3, r3, #4
 8001be8:	6018      	str	r0, [r3, #0]
 8001bea:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001bee:	f103 0304 	add.w	r3, r3, #4
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f43f aa20 	beq.w	800103a <main+0x89a>
				//ftp_transfer_active = 0;
				//transfer_status = 0; // I receive new GPS data, which means I don't transmit

				Clear_Array(gps_data_latest, BUFFER_SIZE); // clean old entries
 8001bfa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bfe:	4825      	ldr	r0, [pc, #148]	; (8001c94 <main+0x14f4>)
 8001c00:	f000 faae 	bl	8002160 <Clear_Array>

				gps_data_latest[0] = '#'; // preamble
 8001c04:	4b23      	ldr	r3, [pc, #140]	; (8001c94 <main+0x14f4>)
 8001c06:	2223      	movs	r2, #35	; 0x23
 8001c08:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<strlen((char*)g_LTE_ParseBuffer)-1; i++){ // -1 because I added preamble
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8001c10:	f102 0214 	add.w	r2, r2, #20
 8001c14:	6013      	str	r3, [r2, #0]
 8001c16:	e01a      	b.n	8001c4e <main+0x14ae>
					gps_data_latest[i+1] = g_LTE_ParseBuffer[i];
 8001c18:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001c1c:	f103 0314 	add.w	r3, r3, #20
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	3301      	adds	r3, #1
 8001c24:	4922      	ldr	r1, [pc, #136]	; (8001cb0 <main+0x1510>)
 8001c26:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8001c2a:	f102 0214 	add.w	r2, r2, #20
 8001c2e:	6812      	ldr	r2, [r2, #0]
 8001c30:	440a      	add	r2, r1
 8001c32:	7811      	ldrb	r1, [r2, #0]
 8001c34:	4a17      	ldr	r2, [pc, #92]	; (8001c94 <main+0x14f4>)
 8001c36:	54d1      	strb	r1, [r2, r3]
				for(int i=0; i<strlen((char*)g_LTE_ParseBuffer)-1; i++){ // -1 because I added preamble
 8001c38:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001c3c:	f103 0314 	add.w	r3, r3, #20
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	3301      	adds	r3, #1
 8001c44:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8001c48:	f102 0214 	add.w	r2, r2, #20
 8001c4c:	6013      	str	r3, [r2, #0]
 8001c4e:	4818      	ldr	r0, [pc, #96]	; (8001cb0 <main+0x1510>)
 8001c50:	f7fe fa9e 	bl	8000190 <strlen>
 8001c54:	4603      	mov	r3, r0
 8001c56:	1e5a      	subs	r2, r3, #1
 8001c58:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001c5c:	f103 0314 	add.w	r3, r3, #20
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d8d8      	bhi.n	8001c18 <main+0x1478>
				//char fake[BUFFER_SIZE] = "+CGNSINF: 5109.0262308,N,11401.8407342,203522.00,A,5109.0262308,N,11401.8407342,W,0.004,133.4,130522,0.0,E,D*2B";
				//				for(int i=0; i<strlen(fake); i++){
				//					gps_data_latest[i] = fake[i];
				//				}

				printf("GPS DATA LOCKED: %s\r\n", gps_data_latest);
 8001c66:	490b      	ldr	r1, [pc, #44]	; (8001c94 <main+0x14f4>)
 8001c68:	4814      	ldr	r0, [pc, #80]	; (8001cbc <main+0x151c>)
 8001c6a:	f003 f99f 	bl	8004fac <iprintf>
 8001c6e:	f7ff b9e4 	b.w	800103a <main+0x89a>

			}

		}else{
			Clear_Array(g_LTE_ParseBuffer, BUFFER_SIZE);
 8001c72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c76:	480e      	ldr	r0, [pc, #56]	; (8001cb0 <main+0x1510>)
 8001c78:	f000 fa72 	bl	8002160 <Clear_Array>
	{
 8001c7c:	f7ff b9dd 	b.w	800103a <main+0x89a>
 8001c80:	080069d0 	.word	0x080069d0
 8001c84:	080066d8 	.word	0x080066d8
 8001c88:	0800688c 	.word	0x0800688c
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	08006908 	.word	0x08006908
 8001c94:	20003068 	.word	0x20003068
 8001c98:	0800678c 	.word	0x0800678c
 8001c9c:	2000003c 	.word	0x2000003c
 8001ca0:	0800696c 	.word	0x0800696c
 8001ca4:	20000050 	.word	0x20000050
 8001ca8:	080068a8 	.word	0x080068a8
 8001cac:	080068c8 	.word	0x080068c8
 8001cb0:	20002c68 	.word	0x20002c68
 8001cb4:	080068d8 	.word	0x080068d8
 8001cb8:	080068e4 	.word	0x080068e4
 8001cbc:	080068f0 	.word	0x080068f0

08001cc0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b092      	sub	sp, #72	; 0x48
 8001cc4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cc6:	f107 0314 	add.w	r3, r7, #20
 8001cca:	2234      	movs	r2, #52	; 0x34
 8001ccc:	2100      	movs	r1, #0
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f003 f964 	bl	8004f9c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cd4:	463b      	mov	r3, r7
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	605a      	str	r2, [r3, #4]
 8001cdc:	609a      	str	r2, [r3, #8]
 8001cde:	60da      	str	r2, [r3, #12]
 8001ce0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ce2:	4b1d      	ldr	r3, [pc, #116]	; (8001d58 <SystemClock_Config+0x98>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001cea:	4a1b      	ldr	r2, [pc, #108]	; (8001d58 <SystemClock_Config+0x98>)
 8001cec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cf0:	6013      	str	r3, [r2, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cfa:	2310      	movs	r3, #16
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d02:	2300      	movs	r3, #0
 8001d04:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001d06:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001d0a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001d0c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001d10:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d12:	f107 0314 	add.w	r3, r7, #20
 8001d16:	4618      	mov	r0, r3
 8001d18:	f001 fe70 	bl	80039fc <HAL_RCC_OscConfig>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <SystemClock_Config+0x66>
	{
		Error_Handler();
 8001d22:	f000 f9fd 	bl	8002120 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d26:	230f      	movs	r3, #15
 8001d28:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d32:	2300      	movs	r3, #0
 8001d34:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d36:	2300      	movs	r3, #0
 8001d38:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001d3a:	463b      	mov	r3, r7
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f002 f98c 	bl	800405c <HAL_RCC_ClockConfig>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <SystemClock_Config+0x8e>
	{
		Error_Handler();
 8001d4a:	f000 f9e9 	bl	8002120 <Error_Handler>
	}
}
 8001d4e:	bf00      	nop
 8001d50:	3748      	adds	r7, #72	; 0x48
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40007000 	.word	0x40007000

08001d5c <MX_ADC_Init>:
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8001d62:	1d3b      	adds	r3, r7, #4
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 8001d6c:	4b25      	ldr	r3, [pc, #148]	; (8001e04 <MX_ADC_Init+0xa8>)
 8001d6e:	4a26      	ldr	r2, [pc, #152]	; (8001e08 <MX_ADC_Init+0xac>)
 8001d70:	601a      	str	r2, [r3, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001d72:	4b24      	ldr	r3, [pc, #144]	; (8001e04 <MX_ADC_Init+0xa8>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001d78:	4b22      	ldr	r3, [pc, #136]	; (8001e04 <MX_ADC_Init+0xa8>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	609a      	str	r2, [r3, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d7e:	4b21      	ldr	r3, [pc, #132]	; (8001e04 <MX_ADC_Init+0xa8>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	60da      	str	r2, [r3, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d84:	4b1f      	ldr	r3, [pc, #124]	; (8001e04 <MX_ADC_Init+0xa8>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	611a      	str	r2, [r3, #16]
	hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001d8a:	4b1e      	ldr	r3, [pc, #120]	; (8001e04 <MX_ADC_Init+0xa8>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	615a      	str	r2, [r3, #20]
	hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001d90:	4b1c      	ldr	r3, [pc, #112]	; (8001e04 <MX_ADC_Init+0xa8>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	619a      	str	r2, [r3, #24]
	hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8001d96:	4b1b      	ldr	r3, [pc, #108]	; (8001e04 <MX_ADC_Init+0xa8>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	61da      	str	r2, [r3, #28]
	hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001d9c:	4b19      	ldr	r3, [pc, #100]	; (8001e04 <MX_ADC_Init+0xa8>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	621a      	str	r2, [r3, #32]
	hadc.Init.ContinuousConvMode = DISABLE;
 8001da2:	4b18      	ldr	r3, [pc, #96]	; (8001e04 <MX_ADC_Init+0xa8>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc.Init.NbrOfConversion = 1;
 8001daa:	4b16      	ldr	r3, [pc, #88]	; (8001e04 <MX_ADC_Init+0xa8>)
 8001dac:	2201      	movs	r2, #1
 8001dae:	629a      	str	r2, [r3, #40]	; 0x28
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8001db0:	4b14      	ldr	r3, [pc, #80]	; (8001e04 <MX_ADC_Init+0xa8>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001db8:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <MX_ADC_Init+0xa8>)
 8001dba:	2210      	movs	r2, #16
 8001dbc:	635a      	str	r2, [r3, #52]	; 0x34
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001dbe:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <MX_ADC_Init+0xa8>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	639a      	str	r2, [r3, #56]	; 0x38
	hadc.Init.DMAContinuousRequests = DISABLE;
 8001dc4:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <MX_ADC_Init+0xa8>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001dcc:	480d      	ldr	r0, [pc, #52]	; (8001e04 <MX_ADC_Init+0xa8>)
 8001dce:	f000 ff8f 	bl	8002cf0 <HAL_ADC_Init>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_ADC_Init+0x80>
	{
		Error_Handler();
 8001dd8:	f000 f9a2 	bl	8002120 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001de0:	2301      	movs	r3, #1
 8001de2:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8001de4:	2300      	movs	r3, #0
 8001de6:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001de8:	1d3b      	adds	r3, r7, #4
 8001dea:	4619      	mov	r1, r3
 8001dec:	4805      	ldr	r0, [pc, #20]	; (8001e04 <MX_ADC_Init+0xa8>)
 8001dee:	f001 f8c5 	bl	8002f7c <HAL_ADC_ConfigChannel>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_ADC_Init+0xa0>
	{
		Error_Handler();
 8001df8:	f000 f992 	bl	8002120 <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 8001dfc:	bf00      	nop
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	200029e0 	.word	0x200029e0
 8001e08:	40012400 	.word	0x40012400

08001e0c <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8001e10:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <MX_UART4_Init+0x4c>)
 8001e12:	4a12      	ldr	r2, [pc, #72]	; (8001e5c <MX_UART4_Init+0x50>)
 8001e14:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 8001e16:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <MX_UART4_Init+0x4c>)
 8001e18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e1c:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001e1e:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <MX_UART4_Init+0x4c>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <MX_UART4_Init+0x4c>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8001e2a:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <MX_UART4_Init+0x4c>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8001e30:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <MX_UART4_Init+0x4c>)
 8001e32:	220c      	movs	r2, #12
 8001e34:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e36:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <MX_UART4_Init+0x4c>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <MX_UART4_Init+0x4c>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK)
 8001e42:	4805      	ldr	r0, [pc, #20]	; (8001e58 <MX_UART4_Init+0x4c>)
 8001e44:	f002 fbd0 	bl	80045e8 <HAL_UART_Init>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_UART4_Init+0x46>
	{
		Error_Handler();
 8001e4e:	f000 f967 	bl	8002120 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20002a34 	.word	0x20002a34
 8001e5c:	40004c00 	.word	0x40004c00

08001e60 <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 8001e64:	4b11      	ldr	r3, [pc, #68]	; (8001eac <MX_UART5_Init+0x4c>)
 8001e66:	4a12      	ldr	r2, [pc, #72]	; (8001eb0 <MX_UART5_Init+0x50>)
 8001e68:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 8001e6a:	4b10      	ldr	r3, [pc, #64]	; (8001eac <MX_UART5_Init+0x4c>)
 8001e6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e70:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001e72:	4b0e      	ldr	r3, [pc, #56]	; (8001eac <MX_UART5_Init+0x4c>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8001e78:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <MX_UART5_Init+0x4c>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 8001e7e:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <MX_UART5_Init+0x4c>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8001e84:	4b09      	ldr	r3, [pc, #36]	; (8001eac <MX_UART5_Init+0x4c>)
 8001e86:	220c      	movs	r2, #12
 8001e88:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e8a:	4b08      	ldr	r3, [pc, #32]	; (8001eac <MX_UART5_Init+0x4c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e90:	4b06      	ldr	r3, [pc, #24]	; (8001eac <MX_UART5_Init+0x4c>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart5) != HAL_OK)
 8001e96:	4805      	ldr	r0, [pc, #20]	; (8001eac <MX_UART5_Init+0x4c>)
 8001e98:	f002 fba6 	bl	80045e8 <HAL_UART_Init>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <MX_UART5_Init+0x46>
	{
		Error_Handler();
 8001ea2:	f000 f93d 	bl	8002120 <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20002a7c 	.word	0x20002a7c
 8001eb0:	40005000 	.word	0x40005000

08001eb4 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001eb8:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001eba:	4a12      	ldr	r2, [pc, #72]	; (8001f04 <MX_USART1_UART_Init+0x50>)
 8001ebc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8001ebe:	4b10      	ldr	r3, [pc, #64]	; (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001ec0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ec4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ec6:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001ed2:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001ed8:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001eda:	220c      	movs	r2, #12
 8001edc:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ede:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001eea:	4805      	ldr	r0, [pc, #20]	; (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001eec:	f002 fb7c 	bl	80045e8 <HAL_UART_Init>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8001ef6:	f000 f913 	bl	8002120 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20002ac4 	.word	0x20002ac4
 8001f04:	40013800 	.word	0x40013800

08001f08 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001f0c:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <MX_USART2_UART_Init+0x4c>)
 8001f0e:	4a12      	ldr	r2, [pc, #72]	; (8001f58 <MX_USART2_UART_Init+0x50>)
 8001f10:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 57600;
 8001f12:	4b10      	ldr	r3, [pc, #64]	; (8001f54 <MX_USART2_UART_Init+0x4c>)
 8001f14:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001f18:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f1a:	4b0e      	ldr	r3, [pc, #56]	; (8001f54 <MX_USART2_UART_Init+0x4c>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001f20:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <MX_USART2_UART_Init+0x4c>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001f26:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <MX_USART2_UART_Init+0x4c>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001f2c:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <MX_USART2_UART_Init+0x4c>)
 8001f2e:	220c      	movs	r2, #12
 8001f30:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f32:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <MX_USART2_UART_Init+0x4c>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f38:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <MX_USART2_UART_Init+0x4c>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f3e:	4805      	ldr	r0, [pc, #20]	; (8001f54 <MX_USART2_UART_Init+0x4c>)
 8001f40:	f002 fb52 	bl	80045e8 <HAL_UART_Init>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8001f4a:	f000 f8e9 	bl	8002120 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20002b0c 	.word	0x20002b0c
 8001f58:	40004400 	.word	0x40004400

08001f5c <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001f60:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <MX_USART3_UART_Init+0x4c>)
 8001f62:	4a12      	ldr	r2, [pc, #72]	; (8001fac <MX_USART3_UART_Init+0x50>)
 8001f64:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 8001f66:	4b10      	ldr	r3, [pc, #64]	; (8001fa8 <MX_USART3_UART_Init+0x4c>)
 8001f68:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f6c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f6e:	4b0e      	ldr	r3, [pc, #56]	; (8001fa8 <MX_USART3_UART_Init+0x4c>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001f74:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <MX_USART3_UART_Init+0x4c>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001f7a:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <MX_USART3_UART_Init+0x4c>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001f80:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <MX_USART3_UART_Init+0x4c>)
 8001f82:	220c      	movs	r2, #12
 8001f84:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f86:	4b08      	ldr	r3, [pc, #32]	; (8001fa8 <MX_USART3_UART_Init+0x4c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f8c:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <MX_USART3_UART_Init+0x4c>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f92:	4805      	ldr	r0, [pc, #20]	; (8001fa8 <MX_USART3_UART_Init+0x4c>)
 8001f94:	f002 fb28 	bl	80045e8 <HAL_UART_Init>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 8001f9e:	f000 f8bf 	bl	8002120 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	20002b54 	.word	0x20002b54
 8001fac:	40004800 	.word	0x40004800

08001fb0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001fb6:	4b14      	ldr	r3, [pc, #80]	; (8002008 <MX_DMA_Init+0x58>)
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	4a13      	ldr	r2, [pc, #76]	; (8002008 <MX_DMA_Init+0x58>)
 8001fbc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fc0:	61d3      	str	r3, [r2, #28]
 8001fc2:	4b11      	ldr	r3, [pc, #68]	; (8002008 <MX_DMA_Init+0x58>)
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fca:	607b      	str	r3, [r7, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	200d      	movs	r0, #13
 8001fd4:	f001 fa15 	bl	8003402 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001fd8:	200d      	movs	r0, #13
 8001fda:	f001 fa2e 	bl	800343a <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	200f      	movs	r0, #15
 8001fe4:	f001 fa0d 	bl	8003402 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001fe8:	200f      	movs	r0, #15
 8001fea:	f001 fa26 	bl	800343a <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	2010      	movs	r0, #16
 8001ff4:	f001 fa05 	bl	8003402 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001ff8:	2010      	movs	r0, #16
 8001ffa:	f001 fa1e 	bl	800343a <HAL_NVIC_EnableIRQ>

}
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40023800 	.word	0x40023800

0800200c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b08a      	sub	sp, #40	; 0x28
 8002010:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002012:	f107 0314 	add.w	r3, r7, #20
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	605a      	str	r2, [r3, #4]
 800201c:	609a      	str	r2, [r3, #8]
 800201e:	60da      	str	r2, [r3, #12]
 8002020:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002022:	4b3b      	ldr	r3, [pc, #236]	; (8002110 <MX_GPIO_Init+0x104>)
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	4a3a      	ldr	r2, [pc, #232]	; (8002110 <MX_GPIO_Init+0x104>)
 8002028:	f043 0304 	orr.w	r3, r3, #4
 800202c:	61d3      	str	r3, [r2, #28]
 800202e:	4b38      	ldr	r3, [pc, #224]	; (8002110 <MX_GPIO_Init+0x104>)
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	f003 0304 	and.w	r3, r3, #4
 8002036:	613b      	str	r3, [r7, #16]
 8002038:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800203a:	4b35      	ldr	r3, [pc, #212]	; (8002110 <MX_GPIO_Init+0x104>)
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	4a34      	ldr	r2, [pc, #208]	; (8002110 <MX_GPIO_Init+0x104>)
 8002040:	f043 0320 	orr.w	r3, r3, #32
 8002044:	61d3      	str	r3, [r2, #28]
 8002046:	4b32      	ldr	r3, [pc, #200]	; (8002110 <MX_GPIO_Init+0x104>)
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	f003 0320 	and.w	r3, r3, #32
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002052:	4b2f      	ldr	r3, [pc, #188]	; (8002110 <MX_GPIO_Init+0x104>)
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	4a2e      	ldr	r2, [pc, #184]	; (8002110 <MX_GPIO_Init+0x104>)
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	61d3      	str	r3, [r2, #28]
 800205e:	4b2c      	ldr	r3, [pc, #176]	; (8002110 <MX_GPIO_Init+0x104>)
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	60bb      	str	r3, [r7, #8]
 8002068:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800206a:	4b29      	ldr	r3, [pc, #164]	; (8002110 <MX_GPIO_Init+0x104>)
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	4a28      	ldr	r2, [pc, #160]	; (8002110 <MX_GPIO_Init+0x104>)
 8002070:	f043 0302 	orr.w	r3, r3, #2
 8002074:	61d3      	str	r3, [r2, #28]
 8002076:	4b26      	ldr	r3, [pc, #152]	; (8002110 <MX_GPIO_Init+0x104>)
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	607b      	str	r3, [r7, #4]
 8002080:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002082:	4b23      	ldr	r3, [pc, #140]	; (8002110 <MX_GPIO_Init+0x104>)
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	4a22      	ldr	r2, [pc, #136]	; (8002110 <MX_GPIO_Init+0x104>)
 8002088:	f043 0308 	orr.w	r3, r3, #8
 800208c:	61d3      	str	r3, [r2, #28]
 800208e:	4b20      	ldr	r3, [pc, #128]	; (8002110 <MX_GPIO_Init+0x104>)
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	f003 0308 	and.w	r3, r3, #8
 8002096:	603b      	str	r3, [r7, #0]
 8002098:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 800209a:	2200      	movs	r2, #0
 800209c:	2160      	movs	r1, #96	; 0x60
 800209e:	481d      	ldr	r0, [pc, #116]	; (8002114 <MX_GPIO_Init+0x108>)
 80020a0:	f001 fc7a 	bl	8003998 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 80020a4:	2200      	movs	r2, #0
 80020a6:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80020aa:	481b      	ldr	r0, [pc, #108]	; (8002118 <MX_GPIO_Init+0x10c>)
 80020ac:	f001 fc74 	bl	8003998 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80020b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020b4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020b6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80020ba:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80020c0:	f107 0314 	add.w	r3, r7, #20
 80020c4:	4619      	mov	r1, r3
 80020c6:	4815      	ldr	r0, [pc, #84]	; (800211c <MX_GPIO_Init+0x110>)
 80020c8:	f001 fad6 	bl	8003678 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin PA6 */
	GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
 80020cc:	2360      	movs	r3, #96	; 0x60
 80020ce:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d0:	2301      	movs	r3, #1
 80020d2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d8:	2300      	movs	r3, #0
 80020da:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020dc:	f107 0314 	add.w	r3, r7, #20
 80020e0:	4619      	mov	r1, r3
 80020e2:	480c      	ldr	r0, [pc, #48]	; (8002114 <MX_GPIO_Init+0x108>)
 80020e4:	f001 fac8 	bl	8003678 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin */
	GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin;
 80020e8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80020ec:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ee:	2301      	movs	r3, #1
 80020f0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f6:	2300      	movs	r3, #0
 80020f8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020fa:	f107 0314 	add.w	r3, r7, #20
 80020fe:	4619      	mov	r1, r3
 8002100:	4805      	ldr	r0, [pc, #20]	; (8002118 <MX_GPIO_Init+0x10c>)
 8002102:	f001 fab9 	bl	8003678 <HAL_GPIO_Init>

}
 8002106:	bf00      	nop
 8002108:	3728      	adds	r7, #40	; 0x28
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40023800 	.word	0x40023800
 8002114:	40020000 	.word	0x40020000
 8002118:	40020400 	.word	0x40020400
 800211c:	40020800 	.word	0x40020800

08002120 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002124:	b672      	cpsid	i
}
 8002126:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002128:	e7fe      	b.n	8002128 <Error_Handler+0x8>
	...

0800212c <Send_LTE>:
extern uint8_t g_RAM_2_data_ready;

extern uint8_t g_RAM_1_triggered;
extern uint8_t g_RAM_2_triggered;

void Send_LTE(uint8_t* cmd, uint16_t len){
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	460b      	mov	r3, r1
 8002136:	807b      	strh	r3, [r7, #2]
	if (len == 0){ // lenghts of arrays of chars can be computed here
 8002138:	887b      	ldrh	r3, [r7, #2]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d104      	bne.n	8002148 <Send_LTE+0x1c>
		len = strlen((char*)cmd);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7fe f826 	bl	8000190 <strlen>
 8002144:	4603      	mov	r3, r0
 8002146:	807b      	strh	r3, [r7, #2]
	}
	//printf("%s, %d - SIZEOF\r\n", (char*)cmd, sizeof(cmd));
	//	strcat(cmd, "\r\n");
	//printf("%s, %d - SIZEOF\r\n", cmd, strlen(cmd));
	HAL_UART_Transmit(&huart2,cmd,len,250);
 8002148:	887a      	ldrh	r2, [r7, #2]
 800214a:	23fa      	movs	r3, #250	; 0xfa
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	4803      	ldr	r0, [pc, #12]	; (800215c <Send_LTE+0x30>)
 8002150:	f002 fa9a 	bl	8004688 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart2,(uint8_t*)"\r\n",2,10);
}
 8002154:	bf00      	nop
 8002156:	3708      	adds	r7, #8
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	20002b0c 	.word	0x20002b0c

08002160 <Clear_Array>:

void Get_LTE_data(){
	UARTDMA_IsDataReady(&hLTE_uart2dma6);
}

void Clear_Array(uint8_t* array, unsigned int size) {
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < size; i++) {
 800216a:	2300      	movs	r3, #0
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	e007      	b.n	8002180 <Clear_Array+0x20>
		array[i] = 0;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	4413      	add	r3, r2
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; i++) {
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	3301      	adds	r3, #1
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	429a      	cmp	r2, r3
 8002186:	d8f3      	bhi.n	8002170 <Clear_Array+0x10>
	}
}
 8002188:	bf00      	nop
 800218a:	bf00      	nop
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	bc80      	pop	{r7}
 8002192:	4770      	bx	lr

08002194 <Do_Action_RAMSES>:

enum State Do_Action_RAMSES(const command *cmd) {
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
	// DO RAMSES ACTION
	if (strcmp((char*)cmd->cmd, "RAMSES_1_2_SAMPLE") == 0)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4958      	ldr	r1, [pc, #352]	; (8002304 <Do_Action_RAMSES+0x170>)
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7fd ffea 	bl	800017c <strcmp>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d125      	bne.n	80021fa <Do_Action_RAMSES+0x66>
	{
		HAL_UART_Transmit(&huart1, g_RAMSES_Sample, SAMPLE_CMD_SIZE, 50);
 80021ae:	2332      	movs	r3, #50	; 0x32
 80021b0:	2208      	movs	r2, #8
 80021b2:	4955      	ldr	r1, [pc, #340]	; (8002308 <Do_Action_RAMSES+0x174>)
 80021b4:	4855      	ldr	r0, [pc, #340]	; (800230c <Do_Action_RAMSES+0x178>)
 80021b6:	f002 fa67 	bl	8004688 <HAL_UART_Transmit>
		g_RAM_1_timer = HAL_GetTick();
 80021ba:	f000 fd6d 	bl	8002c98 <HAL_GetTick>
 80021be:	4603      	mov	r3, r0
 80021c0:	461a      	mov	r2, r3
 80021c2:	4b53      	ldr	r3, [pc, #332]	; (8002310 <Do_Action_RAMSES+0x17c>)
 80021c4:	601a      	str	r2, [r3, #0]
		g_RAM_1_data_ready = 0;
 80021c6:	4b53      	ldr	r3, [pc, #332]	; (8002314 <Do_Action_RAMSES+0x180>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	701a      	strb	r2, [r3, #0]
		g_RAM_1_triggered = 1;
 80021cc:	4b52      	ldr	r3, [pc, #328]	; (8002318 <Do_Action_RAMSES+0x184>)
 80021ce:	2201      	movs	r2, #1
 80021d0:	701a      	strb	r2, [r3, #0]

		HAL_UART_Transmit(&huart3, g_RAMSES_Sample, SAMPLE_CMD_SIZE, 50);
 80021d2:	2332      	movs	r3, #50	; 0x32
 80021d4:	2208      	movs	r2, #8
 80021d6:	494c      	ldr	r1, [pc, #304]	; (8002308 <Do_Action_RAMSES+0x174>)
 80021d8:	4850      	ldr	r0, [pc, #320]	; (800231c <Do_Action_RAMSES+0x188>)
 80021da:	f002 fa55 	bl	8004688 <HAL_UART_Transmit>
		g_RAM_2_timer = HAL_GetTick();
 80021de:	f000 fd5b 	bl	8002c98 <HAL_GetTick>
 80021e2:	4603      	mov	r3, r0
 80021e4:	461a      	mov	r2, r3
 80021e6:	4b4e      	ldr	r3, [pc, #312]	; (8002320 <Do_Action_RAMSES+0x18c>)
 80021e8:	601a      	str	r2, [r3, #0]
		g_RAM_2_data_ready = 0;
 80021ea:	4b4e      	ldr	r3, [pc, #312]	; (8002324 <Do_Action_RAMSES+0x190>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	701a      	strb	r2, [r3, #0]
		g_RAM_2_triggered = 1;
 80021f0:	4b4d      	ldr	r3, [pc, #308]	; (8002328 <Do_Action_RAMSES+0x194>)
 80021f2:	2201      	movs	r2, #1
 80021f4:	701a      	strb	r2, [r3, #0]
		return READY;
 80021f6:	2300      	movs	r3, #0
 80021f8:	e080      	b.n	80022fc <Do_Action_RAMSES+0x168>
	} else if (strcmp((char*)cmd->cmd, "RAMSES_1_SAMPLE") == 0)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	494b      	ldr	r1, [pc, #300]	; (800232c <Do_Action_RAMSES+0x198>)
 8002200:	4618      	mov	r0, r3
 8002202:	f7fd ffbb 	bl	800017c <strcmp>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d116      	bne.n	800223a <Do_Action_RAMSES+0xa6>
	{
		printf("\t\t\t\tRAMSES_1_SAMPLE\r\n");
 800220c:	4848      	ldr	r0, [pc, #288]	; (8002330 <Do_Action_RAMSES+0x19c>)
 800220e:	f002 ff53 	bl	80050b8 <puts>
		HAL_UART_Transmit(&huart1, g_RAMSES_Sample, SAMPLE_CMD_SIZE, 50);
 8002212:	2332      	movs	r3, #50	; 0x32
 8002214:	2208      	movs	r2, #8
 8002216:	493c      	ldr	r1, [pc, #240]	; (8002308 <Do_Action_RAMSES+0x174>)
 8002218:	483c      	ldr	r0, [pc, #240]	; (800230c <Do_Action_RAMSES+0x178>)
 800221a:	f002 fa35 	bl	8004688 <HAL_UART_Transmit>
		g_RAM_1_timer = HAL_GetTick();
 800221e:	f000 fd3b 	bl	8002c98 <HAL_GetTick>
 8002222:	4603      	mov	r3, r0
 8002224:	461a      	mov	r2, r3
 8002226:	4b3a      	ldr	r3, [pc, #232]	; (8002310 <Do_Action_RAMSES+0x17c>)
 8002228:	601a      	str	r2, [r3, #0]
		g_RAM_1_data_ready = 0;
 800222a:	4b3a      	ldr	r3, [pc, #232]	; (8002314 <Do_Action_RAMSES+0x180>)
 800222c:	2200      	movs	r2, #0
 800222e:	701a      	strb	r2, [r3, #0]
		g_RAM_1_triggered = 1;
 8002230:	4b39      	ldr	r3, [pc, #228]	; (8002318 <Do_Action_RAMSES+0x184>)
 8002232:	2201      	movs	r2, #1
 8002234:	701a      	strb	r2, [r3, #0]
		return READY;
 8002236:	2300      	movs	r3, #0
 8002238:	e060      	b.n	80022fc <Do_Action_RAMSES+0x168>

	} else if (strcmp((char*)cmd->cmd, "RAMSES_2_SAMPLE") == 0)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	493d      	ldr	r1, [pc, #244]	; (8002334 <Do_Action_RAMSES+0x1a0>)
 8002240:	4618      	mov	r0, r3
 8002242:	f7fd ff9b 	bl	800017c <strcmp>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d116      	bne.n	800227a <Do_Action_RAMSES+0xe6>
	{
		printf("\t\t\t\tRAMSES_2_SAMPLE\r\n");
 800224c:	483a      	ldr	r0, [pc, #232]	; (8002338 <Do_Action_RAMSES+0x1a4>)
 800224e:	f002 ff33 	bl	80050b8 <puts>
		HAL_UART_Transmit(&huart3, g_RAMSES_Sample, SAMPLE_CMD_SIZE, 50);
 8002252:	2332      	movs	r3, #50	; 0x32
 8002254:	2208      	movs	r2, #8
 8002256:	492c      	ldr	r1, [pc, #176]	; (8002308 <Do_Action_RAMSES+0x174>)
 8002258:	4830      	ldr	r0, [pc, #192]	; (800231c <Do_Action_RAMSES+0x188>)
 800225a:	f002 fa15 	bl	8004688 <HAL_UART_Transmit>
		g_RAM_2_timer = HAL_GetTick();
 800225e:	f000 fd1b 	bl	8002c98 <HAL_GetTick>
 8002262:	4603      	mov	r3, r0
 8002264:	461a      	mov	r2, r3
 8002266:	4b2e      	ldr	r3, [pc, #184]	; (8002320 <Do_Action_RAMSES+0x18c>)
 8002268:	601a      	str	r2, [r3, #0]
		g_RAM_2_data_ready = 0;
 800226a:	4b2e      	ldr	r3, [pc, #184]	; (8002324 <Do_Action_RAMSES+0x190>)
 800226c:	2200      	movs	r2, #0
 800226e:	701a      	strb	r2, [r3, #0]
		g_RAM_2_triggered = 1;
 8002270:	4b2d      	ldr	r3, [pc, #180]	; (8002328 <Do_Action_RAMSES+0x194>)
 8002272:	2201      	movs	r2, #1
 8002274:	701a      	strb	r2, [r3, #0]
		return READY;
 8002276:	2300      	movs	r3, #0
 8002278:	e040      	b.n	80022fc <Do_Action_RAMSES+0x168>

	} else if (strcmp((char*)cmd->cmd, "RAMSES_1_QUERY") == 0)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	492f      	ldr	r1, [pc, #188]	; (800233c <Do_Action_RAMSES+0x1a8>)
 8002280:	4618      	mov	r0, r3
 8002282:	f7fd ff7b 	bl	800017c <strcmp>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d116      	bne.n	80022ba <Do_Action_RAMSES+0x126>
	{
		printf("\t\t\t\tRAMSES_1_QUERY\r\n");
 800228c:	482c      	ldr	r0, [pc, #176]	; (8002340 <Do_Action_RAMSES+0x1ac>)
 800228e:	f002 ff13 	bl	80050b8 <puts>
		HAL_UART_Transmit(&huart1, g_RAMSES_Query, QUERY_CMD_SIZE, 50);
 8002292:	2332      	movs	r3, #50	; 0x32
 8002294:	2208      	movs	r2, #8
 8002296:	492b      	ldr	r1, [pc, #172]	; (8002344 <Do_Action_RAMSES+0x1b0>)
 8002298:	481c      	ldr	r0, [pc, #112]	; (800230c <Do_Action_RAMSES+0x178>)
 800229a:	f002 f9f5 	bl	8004688 <HAL_UART_Transmit>
		g_RAM_1_timer = HAL_GetTick();
 800229e:	f000 fcfb 	bl	8002c98 <HAL_GetTick>
 80022a2:	4603      	mov	r3, r0
 80022a4:	461a      	mov	r2, r3
 80022a6:	4b1a      	ldr	r3, [pc, #104]	; (8002310 <Do_Action_RAMSES+0x17c>)
 80022a8:	601a      	str	r2, [r3, #0]
		g_RAM_1_data_ready = 0;
 80022aa:	4b1a      	ldr	r3, [pc, #104]	; (8002314 <Do_Action_RAMSES+0x180>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	701a      	strb	r2, [r3, #0]
		g_RAM_1_triggered = 1;
 80022b0:	4b19      	ldr	r3, [pc, #100]	; (8002318 <Do_Action_RAMSES+0x184>)
 80022b2:	2201      	movs	r2, #1
 80022b4:	701a      	strb	r2, [r3, #0]
		return READY;
 80022b6:	2300      	movs	r3, #0
 80022b8:	e020      	b.n	80022fc <Do_Action_RAMSES+0x168>
	} else if (strcmp((char*)cmd->cmd, "RAMSES_2_QUERY") == 0)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4922      	ldr	r1, [pc, #136]	; (8002348 <Do_Action_RAMSES+0x1b4>)
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7fd ff5b 	bl	800017c <strcmp>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d116      	bne.n	80022fa <Do_Action_RAMSES+0x166>
	{
		printf("\t\t\t\tRAMSES_2_QUERY\r\n");
 80022cc:	481f      	ldr	r0, [pc, #124]	; (800234c <Do_Action_RAMSES+0x1b8>)
 80022ce:	f002 fef3 	bl	80050b8 <puts>
		HAL_UART_Transmit(&huart3, g_RAMSES_Query, QUERY_CMD_SIZE, 50);
 80022d2:	2332      	movs	r3, #50	; 0x32
 80022d4:	2208      	movs	r2, #8
 80022d6:	491b      	ldr	r1, [pc, #108]	; (8002344 <Do_Action_RAMSES+0x1b0>)
 80022d8:	4810      	ldr	r0, [pc, #64]	; (800231c <Do_Action_RAMSES+0x188>)
 80022da:	f002 f9d5 	bl	8004688 <HAL_UART_Transmit>
		g_RAM_2_timer = HAL_GetTick();
 80022de:	f000 fcdb 	bl	8002c98 <HAL_GetTick>
 80022e2:	4603      	mov	r3, r0
 80022e4:	461a      	mov	r2, r3
 80022e6:	4b0e      	ldr	r3, [pc, #56]	; (8002320 <Do_Action_RAMSES+0x18c>)
 80022e8:	601a      	str	r2, [r3, #0]
		g_RAM_2_data_ready = 0;
 80022ea:	4b0e      	ldr	r3, [pc, #56]	; (8002324 <Do_Action_RAMSES+0x190>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	701a      	strb	r2, [r3, #0]
		g_RAM_2_triggered = 1;
 80022f0:	4b0d      	ldr	r3, [pc, #52]	; (8002328 <Do_Action_RAMSES+0x194>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	701a      	strb	r2, [r3, #0]
		return READY;
 80022f6:	2300      	movs	r3, #0
 80022f8:	e000      	b.n	80022fc <Do_Action_RAMSES+0x168>
	}

	return READY;
 80022fa:	2300      	movs	r3, #0
	// if send, check if there's data, if not check if timout has passed, if yes, send timeout, if not send data, CHECKING_ANSWER can be the mode to send while waiting

}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	08006a0c 	.word	0x08006a0c
 8002308:	08006adc 	.word	0x08006adc
 800230c:	20002ac4 	.word	0x20002ac4
 8002310:	2000386c 	.word	0x2000386c
 8002314:	2000386a 	.word	0x2000386a
 8002318:	20003870 	.word	0x20003870
 800231c:	20002b54 	.word	0x20002b54
 8002320:	20003c78 	.word	0x20003c78
 8002324:	20003c76 	.word	0x20003c76
 8002328:	20003c7c 	.word	0x20003c7c
 800232c:	08006a20 	.word	0x08006a20
 8002330:	08006a30 	.word	0x08006a30
 8002334:	08006a48 	.word	0x08006a48
 8002338:	08006a58 	.word	0x08006a58
 800233c:	08006a70 	.word	0x08006a70
 8002340:	08006a80 	.word	0x08006a80
 8002344:	08006ad4 	.word	0x08006ad4
 8002348:	08006a94 	.word	0x08006a94
 800234c:	08006aa4 	.word	0x08006aa4

08002350 <Do_Action>:

enum State Do_Action(command cmd, uint8_t* uart_data){
 8002350:	b084      	sub	sp, #16
 8002352:	b590      	push	{r4, r7, lr}
 8002354:	b085      	sub	sp, #20
 8002356:	af04      	add	r7, sp, #16
 8002358:	f107 0410 	add.w	r4, r7, #16
 800235c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	static enum State state = READY;
	static unsigned int retry;
	static int start_time;

	if(strstr((char*)cmd.cmd, "RAMSES") != NULL){ // DO RAMSES ACTION
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	4954      	ldr	r1, [pc, #336]	; (80024b4 <Do_Action+0x164>)
 8002364:	4618      	mov	r0, r3
 8002366:	f002 ff32 	bl	80051ce <strstr>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00a      	beq.n	8002386 <Do_Action+0x36>
		state = Do_Action_RAMSES(&cmd);
 8002370:	f107 0010 	add.w	r0, r7, #16
 8002374:	f7ff ff0e 	bl	8002194 <Do_Action_RAMSES>
 8002378:	4603      	mov	r3, r0
 800237a:	461a      	mov	r2, r3
 800237c:	4b4e      	ldr	r3, [pc, #312]	; (80024b8 <Do_Action+0x168>)
 800237e:	701a      	strb	r2, [r3, #0]
		return state;
 8002380:	4b4d      	ldr	r3, [pc, #308]	; (80024b8 <Do_Action+0x168>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	e08f      	b.n	80024a6 <Do_Action+0x156>

	}else{ // DO LTE ACTION


		if(strcmp((char*)cmd.cmd, "RESET_ACTION") == 0){
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	494c      	ldr	r1, [pc, #304]	; (80024bc <Do_Action+0x16c>)
 800238a:	4618      	mov	r0, r3
 800238c:	f7fd fef6 	bl	800017c <strcmp>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10d      	bne.n	80023b2 <Do_Action+0x62>
			Clear_Array(uart_data, BUFFER_SIZE);  // ZOLICH _ modified without test
 8002396:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800239a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800239c:	f7ff fee0 	bl	8002160 <Clear_Array>
			retry = 0;
 80023a0:	4b47      	ldr	r3, [pc, #284]	; (80024c0 <Do_Action+0x170>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]
			state = READY;
 80023a6:	4b44      	ldr	r3, [pc, #272]	; (80024b8 <Do_Action+0x168>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	701a      	strb	r2, [r3, #0]
			return state;
 80023ac:	4b42      	ldr	r3, [pc, #264]	; (80024b8 <Do_Action+0x168>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	e079      	b.n	80024a6 <Do_Action+0x156>
		}

		if(state == READY){ 					// ready to send new command
 80023b2:	4b41      	ldr	r3, [pc, #260]	; (80024b8 <Do_Action+0x168>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d119      	bne.n	80023ee <Do_Action+0x9e>
			start_time = HAL_GetTick();		// save send time
 80023ba:	f000 fc6d 	bl	8002c98 <HAL_GetTick>
 80023be:	4603      	mov	r3, r0
 80023c0:	461a      	mov	r2, r3
 80023c2:	4b40      	ldr	r3, [pc, #256]	; (80024c4 <Do_Action+0x174>)
 80023c4:	601a      	str	r2, [r3, #0]
			state = CHECKING_ANSWER;			// notify that now we wait for a reply
 80023c6:	4b3c      	ldr	r3, [pc, #240]	; (80024b8 <Do_Action+0x168>)
 80023c8:	2201      	movs	r2, #1
 80023ca:	701a      	strb	r2, [r3, #0]
			retry = 0;
 80023cc:	4b3c      	ldr	r3, [pc, #240]	; (80024c0 <Do_Action+0x170>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]
			Clear_Array(uart_data, BUFFER_SIZE);  // ZOLICH _ modified without test
 80023d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80023d8:	f7ff fec2 	bl	8002160 <Clear_Array>
			if(cmd.length != -1){
				Send_LTE(cmd.cmd, cmd.length);				// send new command
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	8aba      	ldrh	r2, [r7, #20]
 80023e0:	4611      	mov	r1, r2
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff fea2 	bl	800212c <Send_LTE>
			}else{
				printf("NO DATA TO TRANSFER, LENGTH -1, SKIPPING\r\n");
				state = READY;
			}
			return state;
 80023e8:	4b33      	ldr	r3, [pc, #204]	; (80024b8 <Do_Action+0x168>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	e05b      	b.n	80024a6 <Do_Action+0x156>

		}else if(state == CHECKING_ANSWER){	// if we expect a reply now
 80023ee:	4b32      	ldr	r3, [pc, #200]	; (80024b8 <Do_Action+0x168>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d155      	bne.n	80024a2 <Do_Action+0x152>

			if((start_time + cmd.timeout) < HAL_GetTick()){	// if we wait too long, report timeout
 80023f6:	69fa      	ldr	r2, [r7, #28]
 80023f8:	4b32      	ldr	r3, [pc, #200]	; (80024c4 <Do_Action+0x174>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4413      	add	r3, r2
 80023fe:	461c      	mov	r4, r3
 8002400:	f000 fc4a 	bl	8002c98 <HAL_GetTick>
 8002404:	4603      	mov	r3, r0
 8002406:	429c      	cmp	r4, r3
 8002408:	d205      	bcs.n	8002416 <Do_Action+0xc6>
				state = TIMEOUT;
 800240a:	4b2b      	ldr	r3, [pc, #172]	; (80024b8 <Do_Action+0x168>)
 800240c:	2204      	movs	r2, #4
 800240e:	701a      	strb	r2, [r3, #0]
				return state;
 8002410:	4b29      	ldr	r3, [pc, #164]	; (80024b8 <Do_Action+0x168>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	e047      	b.n	80024a6 <Do_Action+0x156>
			}

			if((strcmp((char*)cmd.good_answer, (char*)uart_data) == 0) || strcmp((char*)cmd.good_answer, "ANY") == 0){ 		// if the reply is OK, return success
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800241a:	4618      	mov	r0, r3
 800241c:	f7fd feae 	bl	800017c <strcmp>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d007      	beq.n	8002436 <Do_Action+0xe6>
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	4927      	ldr	r1, [pc, #156]	; (80024c8 <Do_Action+0x178>)
 800242a:	4618      	mov	r0, r3
 800242c:	f7fd fea6 	bl	800017c <strcmp>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d105      	bne.n	8002442 <Do_Action+0xf2>
				state = GOOD_ANSWER;
 8002436:	4b20      	ldr	r3, [pc, #128]	; (80024b8 <Do_Action+0x168>)
 8002438:	2202      	movs	r2, #2
 800243a:	701a      	strb	r2, [r3, #0]
				return state;
 800243c:	4b1e      	ldr	r3, [pc, #120]	; (80024b8 <Do_Action+0x168>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	e031      	b.n	80024a6 <Do_Action+0x156>
			}else if(strcmp((char*)cmd.bad_answer, (char*)uart_data) == 0){	// if the reply suggest an error...
 8002442:	6a3b      	ldr	r3, [r7, #32]
 8002444:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002446:	4618      	mov	r0, r3
 8002448:	f7fd fe98 	bl	800017c <strcmp>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d127      	bne.n	80024a2 <Do_Action+0x152>
				state = BAD_ANSWER;
 8002452:	4b19      	ldr	r3, [pc, #100]	; (80024b8 <Do_Action+0x168>)
 8002454:	2203      	movs	r2, #3
 8002456:	701a      	strb	r2, [r3, #0]
				if(retry < cmd.retry_counter){				// retry if structure suggest that behaviour
 8002458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245a:	461a      	mov	r2, r3
 800245c:	4b18      	ldr	r3, [pc, #96]	; (80024c0 <Do_Action+0x170>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	429a      	cmp	r2, r3
 8002462:	d915      	bls.n	8002490 <Do_Action+0x140>
					retry++;
 8002464:	4b16      	ldr	r3, [pc, #88]	; (80024c0 <Do_Action+0x170>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	3301      	adds	r3, #1
 800246a:	4a15      	ldr	r2, [pc, #84]	; (80024c0 <Do_Action+0x170>)
 800246c:	6013      	str	r3, [r2, #0]
					Do_Action(cmd, uart_data);
 800246e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002470:	9303      	str	r3, [sp, #12]
 8002472:	466c      	mov	r4, sp
 8002474:	f107 0320 	add.w	r3, r7, #32
 8002478:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800247c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002480:	f107 0310 	add.w	r3, r7, #16
 8002484:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002486:	f7ff ff63 	bl	8002350 <Do_Action>
				}else{										// if retries still give an error, or no replies suggested, report error
					retry = 0;
					state = BAD_ANSWER;
					return state;
				}
				return state;
 800248a:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <Do_Action+0x168>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	e00a      	b.n	80024a6 <Do_Action+0x156>
					retry = 0;
 8002490:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <Do_Action+0x170>)
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]
					state = BAD_ANSWER;
 8002496:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <Do_Action+0x168>)
 8002498:	2203      	movs	r2, #3
 800249a:	701a      	strb	r2, [r3, #0]
					return state;
 800249c:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <Do_Action+0x168>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	e001      	b.n	80024a6 <Do_Action+0x156>
			}
		}
	}

	return state;
 80024a2:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <Do_Action+0x168>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3704      	adds	r7, #4
 80024aa:	46bd      	mov	sp, r7
 80024ac:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80024b0:	b004      	add	sp, #16
 80024b2:	4770      	bx	lr
 80024b4:	08006ab8 	.word	0x08006ab8
 80024b8:	20003c7d 	.word	0x20003c7d
 80024bc:	08006ac0 	.word	0x08006ac0
 80024c0:	20003c80 	.word	0x20003c80
 80024c4:	20003c84 	.word	0x20003c84
 80024c8:	08006ad0 	.word	0x08006ad0

080024cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80024d2:	4b15      	ldr	r3, [pc, #84]	; (8002528 <HAL_MspInit+0x5c>)
 80024d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d6:	4a14      	ldr	r2, [pc, #80]	; (8002528 <HAL_MspInit+0x5c>)
 80024d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024dc:	6253      	str	r3, [r2, #36]	; 0x24
 80024de:	4b12      	ldr	r3, [pc, #72]	; (8002528 <HAL_MspInit+0x5c>)
 80024e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ea:	4b0f      	ldr	r3, [pc, #60]	; (8002528 <HAL_MspInit+0x5c>)
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	4a0e      	ldr	r2, [pc, #56]	; (8002528 <HAL_MspInit+0x5c>)
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	6213      	str	r3, [r2, #32]
 80024f6:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <HAL_MspInit+0x5c>)
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	60bb      	str	r3, [r7, #8]
 8002500:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002502:	4b09      	ldr	r3, [pc, #36]	; (8002528 <HAL_MspInit+0x5c>)
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	4a08      	ldr	r2, [pc, #32]	; (8002528 <HAL_MspInit+0x5c>)
 8002508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800250c:	6253      	str	r3, [r2, #36]	; 0x24
 800250e:	4b06      	ldr	r3, [pc, #24]	; (8002528 <HAL_MspInit+0x5c>)
 8002510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002516:	607b      	str	r3, [r7, #4]
 8002518:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800251a:	2007      	movs	r0, #7
 800251c:	f000 ff66 	bl	80033ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002520:	bf00      	nop
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40023800 	.word	0x40023800

0800252c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b08a      	sub	sp, #40	; 0x28
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002534:	f107 0314 	add.w	r3, r7, #20
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	605a      	str	r2, [r3, #4]
 800253e:	609a      	str	r2, [r3, #8]
 8002540:	60da      	str	r2, [r3, #12]
 8002542:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a15      	ldr	r2, [pc, #84]	; (80025a0 <HAL_ADC_MspInit+0x74>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d123      	bne.n	8002596 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800254e:	4b15      	ldr	r3, [pc, #84]	; (80025a4 <HAL_ADC_MspInit+0x78>)
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	4a14      	ldr	r2, [pc, #80]	; (80025a4 <HAL_ADC_MspInit+0x78>)
 8002554:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002558:	6213      	str	r3, [r2, #32]
 800255a:	4b12      	ldr	r3, [pc, #72]	; (80025a4 <HAL_ADC_MspInit+0x78>)
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002562:	613b      	str	r3, [r7, #16]
 8002564:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002566:	4b0f      	ldr	r3, [pc, #60]	; (80025a4 <HAL_ADC_MspInit+0x78>)
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	4a0e      	ldr	r2, [pc, #56]	; (80025a4 <HAL_ADC_MspInit+0x78>)
 800256c:	f043 0301 	orr.w	r3, r3, #1
 8002570:	61d3      	str	r3, [r2, #28]
 8002572:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <HAL_ADC_MspInit+0x78>)
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800257e:	2301      	movs	r3, #1
 8002580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002582:	2303      	movs	r3, #3
 8002584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002586:	2300      	movs	r3, #0
 8002588:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258a:	f107 0314 	add.w	r3, r7, #20
 800258e:	4619      	mov	r1, r3
 8002590:	4805      	ldr	r0, [pc, #20]	; (80025a8 <HAL_ADC_MspInit+0x7c>)
 8002592:	f001 f871 	bl	8003678 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002596:	bf00      	nop
 8002598:	3728      	adds	r7, #40	; 0x28
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	40012400 	.word	0x40012400
 80025a4:	40023800 	.word	0x40023800
 80025a8:	40020000 	.word	0x40020000

080025ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b092      	sub	sp, #72	; 0x48
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	605a      	str	r2, [r3, #4]
 80025be:	609a      	str	r2, [r3, #8]
 80025c0:	60da      	str	r2, [r3, #12]
 80025c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a98      	ldr	r2, [pc, #608]	; (800282c <HAL_UART_MspInit+0x280>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d129      	bne.n	8002622 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80025ce:	4b98      	ldr	r3, [pc, #608]	; (8002830 <HAL_UART_MspInit+0x284>)
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	4a97      	ldr	r2, [pc, #604]	; (8002830 <HAL_UART_MspInit+0x284>)
 80025d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80025d8:	6253      	str	r3, [r2, #36]	; 0x24
 80025da:	4b95      	ldr	r3, [pc, #596]	; (8002830 <HAL_UART_MspInit+0x284>)
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025e2:	633b      	str	r3, [r7, #48]	; 0x30
 80025e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025e6:	4b92      	ldr	r3, [pc, #584]	; (8002830 <HAL_UART_MspInit+0x284>)
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	4a91      	ldr	r2, [pc, #580]	; (8002830 <HAL_UART_MspInit+0x284>)
 80025ec:	f043 0304 	orr.w	r3, r3, #4
 80025f0:	61d3      	str	r3, [r2, #28]
 80025f2:	4b8f      	ldr	r3, [pc, #572]	; (8002830 <HAL_UART_MspInit+0x284>)
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	f003 0304 	and.w	r3, r3, #4
 80025fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80025fe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002602:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002604:	2302      	movs	r3, #2
 8002606:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002608:	2301      	movs	r3, #1
 800260a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800260c:	2303      	movs	r3, #3
 800260e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002610:	2308      	movs	r3, #8
 8002612:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002614:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002618:	4619      	mov	r1, r3
 800261a:	4886      	ldr	r0, [pc, #536]	; (8002834 <HAL_UART_MspInit+0x288>)
 800261c:	f001 f82c 	bl	8003678 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002620:	e178      	b.n	8002914 <HAL_UART_MspInit+0x368>
  else if(huart->Instance==UART5)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a84      	ldr	r2, [pc, #528]	; (8002838 <HAL_UART_MspInit+0x28c>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d145      	bne.n	80026b8 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_UART5_CLK_ENABLE();
 800262c:	4b80      	ldr	r3, [pc, #512]	; (8002830 <HAL_UART_MspInit+0x284>)
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	4a7f      	ldr	r2, [pc, #508]	; (8002830 <HAL_UART_MspInit+0x284>)
 8002632:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002636:	6253      	str	r3, [r2, #36]	; 0x24
 8002638:	4b7d      	ldr	r3, [pc, #500]	; (8002830 <HAL_UART_MspInit+0x284>)
 800263a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002640:	62bb      	str	r3, [r7, #40]	; 0x28
 8002642:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002644:	4b7a      	ldr	r3, [pc, #488]	; (8002830 <HAL_UART_MspInit+0x284>)
 8002646:	69db      	ldr	r3, [r3, #28]
 8002648:	4a79      	ldr	r2, [pc, #484]	; (8002830 <HAL_UART_MspInit+0x284>)
 800264a:	f043 0304 	orr.w	r3, r3, #4
 800264e:	61d3      	str	r3, [r2, #28]
 8002650:	4b77      	ldr	r3, [pc, #476]	; (8002830 <HAL_UART_MspInit+0x284>)
 8002652:	69db      	ldr	r3, [r3, #28]
 8002654:	f003 0304 	and.w	r3, r3, #4
 8002658:	627b      	str	r3, [r7, #36]	; 0x24
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800265c:	4b74      	ldr	r3, [pc, #464]	; (8002830 <HAL_UART_MspInit+0x284>)
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	4a73      	ldr	r2, [pc, #460]	; (8002830 <HAL_UART_MspInit+0x284>)
 8002662:	f043 0308 	orr.w	r3, r3, #8
 8002666:	61d3      	str	r3, [r2, #28]
 8002668:	4b71      	ldr	r3, [pc, #452]	; (8002830 <HAL_UART_MspInit+0x284>)
 800266a:	69db      	ldr	r3, [r3, #28]
 800266c:	f003 0308 	and.w	r3, r3, #8
 8002670:	623b      	str	r3, [r7, #32]
 8002672:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002678:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267a:	2302      	movs	r3, #2
 800267c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800267e:	2301      	movs	r3, #1
 8002680:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002682:	2303      	movs	r3, #3
 8002684:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002686:	2308      	movs	r3, #8
 8002688:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800268a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800268e:	4619      	mov	r1, r3
 8002690:	4868      	ldr	r0, [pc, #416]	; (8002834 <HAL_UART_MspInit+0x288>)
 8002692:	f000 fff1 	bl	8003678 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002696:	2304      	movs	r3, #4
 8002698:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269a:	2302      	movs	r3, #2
 800269c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800269e:	2301      	movs	r3, #1
 80026a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a2:	2303      	movs	r3, #3
 80026a4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80026a6:	2308      	movs	r3, #8
 80026a8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026ae:	4619      	mov	r1, r3
 80026b0:	4862      	ldr	r0, [pc, #392]	; (800283c <HAL_UART_MspInit+0x290>)
 80026b2:	f000 ffe1 	bl	8003678 <HAL_GPIO_Init>
}
 80026b6:	e12d      	b.n	8002914 <HAL_UART_MspInit+0x368>
  else if(huart->Instance==USART1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a60      	ldr	r2, [pc, #384]	; (8002840 <HAL_UART_MspInit+0x294>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d157      	bne.n	8002772 <HAL_UART_MspInit+0x1c6>
    __HAL_RCC_USART1_CLK_ENABLE();
 80026c2:	4b5b      	ldr	r3, [pc, #364]	; (8002830 <HAL_UART_MspInit+0x284>)
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	4a5a      	ldr	r2, [pc, #360]	; (8002830 <HAL_UART_MspInit+0x284>)
 80026c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026cc:	6213      	str	r3, [r2, #32]
 80026ce:	4b58      	ldr	r3, [pc, #352]	; (8002830 <HAL_UART_MspInit+0x284>)
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026d6:	61fb      	str	r3, [r7, #28]
 80026d8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026da:	4b55      	ldr	r3, [pc, #340]	; (8002830 <HAL_UART_MspInit+0x284>)
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	4a54      	ldr	r2, [pc, #336]	; (8002830 <HAL_UART_MspInit+0x284>)
 80026e0:	f043 0301 	orr.w	r3, r3, #1
 80026e4:	61d3      	str	r3, [r2, #28]
 80026e6:	4b52      	ldr	r3, [pc, #328]	; (8002830 <HAL_UART_MspInit+0x284>)
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	61bb      	str	r3, [r7, #24]
 80026f0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80026f2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80026f6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f8:	2302      	movs	r3, #2
 80026fa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fc:	2300      	movs	r3, #0
 80026fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002700:	2303      	movs	r3, #3
 8002702:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002704:	2307      	movs	r3, #7
 8002706:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002708:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800270c:	4619      	mov	r1, r3
 800270e:	484d      	ldr	r0, [pc, #308]	; (8002844 <HAL_UART_MspInit+0x298>)
 8002710:	f000 ffb2 	bl	8003678 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002714:	4b4c      	ldr	r3, [pc, #304]	; (8002848 <HAL_UART_MspInit+0x29c>)
 8002716:	4a4d      	ldr	r2, [pc, #308]	; (800284c <HAL_UART_MspInit+0x2a0>)
 8002718:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800271a:	4b4b      	ldr	r3, [pc, #300]	; (8002848 <HAL_UART_MspInit+0x29c>)
 800271c:	2200      	movs	r2, #0
 800271e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002720:	4b49      	ldr	r3, [pc, #292]	; (8002848 <HAL_UART_MspInit+0x29c>)
 8002722:	2200      	movs	r2, #0
 8002724:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002726:	4b48      	ldr	r3, [pc, #288]	; (8002848 <HAL_UART_MspInit+0x29c>)
 8002728:	2280      	movs	r2, #128	; 0x80
 800272a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800272c:	4b46      	ldr	r3, [pc, #280]	; (8002848 <HAL_UART_MspInit+0x29c>)
 800272e:	2200      	movs	r2, #0
 8002730:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002732:	4b45      	ldr	r3, [pc, #276]	; (8002848 <HAL_UART_MspInit+0x29c>)
 8002734:	2200      	movs	r2, #0
 8002736:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002738:	4b43      	ldr	r3, [pc, #268]	; (8002848 <HAL_UART_MspInit+0x29c>)
 800273a:	2200      	movs	r2, #0
 800273c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800273e:	4b42      	ldr	r3, [pc, #264]	; (8002848 <HAL_UART_MspInit+0x29c>)
 8002740:	2200      	movs	r2, #0
 8002742:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002744:	4840      	ldr	r0, [pc, #256]	; (8002848 <HAL_UART_MspInit+0x29c>)
 8002746:	f000 fe93 	bl	8003470 <HAL_DMA_Init>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8002750:	f7ff fce6 	bl	8002120 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a3c      	ldr	r2, [pc, #240]	; (8002848 <HAL_UART_MspInit+0x29c>)
 8002758:	63da      	str	r2, [r3, #60]	; 0x3c
 800275a:	4a3b      	ldr	r2, [pc, #236]	; (8002848 <HAL_UART_MspInit+0x29c>)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002760:	2200      	movs	r2, #0
 8002762:	2100      	movs	r1, #0
 8002764:	2025      	movs	r0, #37	; 0x25
 8002766:	f000 fe4c 	bl	8003402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800276a:	2025      	movs	r0, #37	; 0x25
 800276c:	f000 fe65 	bl	800343a <HAL_NVIC_EnableIRQ>
}
 8002770:	e0d0      	b.n	8002914 <HAL_UART_MspInit+0x368>
  else if(huart->Instance==USART2)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a36      	ldr	r2, [pc, #216]	; (8002850 <HAL_UART_MspInit+0x2a4>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d16f      	bne.n	800285c <HAL_UART_MspInit+0x2b0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800277c:	4b2c      	ldr	r3, [pc, #176]	; (8002830 <HAL_UART_MspInit+0x284>)
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	4a2b      	ldr	r2, [pc, #172]	; (8002830 <HAL_UART_MspInit+0x284>)
 8002782:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002786:	6253      	str	r3, [r2, #36]	; 0x24
 8002788:	4b29      	ldr	r3, [pc, #164]	; (8002830 <HAL_UART_MspInit+0x284>)
 800278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002790:	617b      	str	r3, [r7, #20]
 8002792:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002794:	4b26      	ldr	r3, [pc, #152]	; (8002830 <HAL_UART_MspInit+0x284>)
 8002796:	69db      	ldr	r3, [r3, #28]
 8002798:	4a25      	ldr	r2, [pc, #148]	; (8002830 <HAL_UART_MspInit+0x284>)
 800279a:	f043 0301 	orr.w	r3, r3, #1
 800279e:	61d3      	str	r3, [r2, #28]
 80027a0:	4b23      	ldr	r3, [pc, #140]	; (8002830 <HAL_UART_MspInit+0x284>)
 80027a2:	69db      	ldr	r3, [r3, #28]
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	613b      	str	r3, [r7, #16]
 80027aa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80027ac:	230c      	movs	r3, #12
 80027ae:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b0:	2302      	movs	r3, #2
 80027b2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b8:	2303      	movs	r3, #3
 80027ba:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027bc:	2307      	movs	r3, #7
 80027be:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80027c4:	4619      	mov	r1, r3
 80027c6:	481f      	ldr	r0, [pc, #124]	; (8002844 <HAL_UART_MspInit+0x298>)
 80027c8:	f000 ff56 	bl	8003678 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80027cc:	4b21      	ldr	r3, [pc, #132]	; (8002854 <HAL_UART_MspInit+0x2a8>)
 80027ce:	4a22      	ldr	r2, [pc, #136]	; (8002858 <HAL_UART_MspInit+0x2ac>)
 80027d0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027d2:	4b20      	ldr	r3, [pc, #128]	; (8002854 <HAL_UART_MspInit+0x2a8>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027d8:	4b1e      	ldr	r3, [pc, #120]	; (8002854 <HAL_UART_MspInit+0x2a8>)
 80027da:	2200      	movs	r2, #0
 80027dc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027de:	4b1d      	ldr	r3, [pc, #116]	; (8002854 <HAL_UART_MspInit+0x2a8>)
 80027e0:	2280      	movs	r2, #128	; 0x80
 80027e2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027e4:	4b1b      	ldr	r3, [pc, #108]	; (8002854 <HAL_UART_MspInit+0x2a8>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027ea:	4b1a      	ldr	r3, [pc, #104]	; (8002854 <HAL_UART_MspInit+0x2a8>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80027f0:	4b18      	ldr	r3, [pc, #96]	; (8002854 <HAL_UART_MspInit+0x2a8>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80027f6:	4b17      	ldr	r3, [pc, #92]	; (8002854 <HAL_UART_MspInit+0x2a8>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80027fc:	4815      	ldr	r0, [pc, #84]	; (8002854 <HAL_UART_MspInit+0x2a8>)
 80027fe:	f000 fe37 	bl	8003470 <HAL_DMA_Init>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <HAL_UART_MspInit+0x260>
      Error_Handler();
 8002808:	f7ff fc8a 	bl	8002120 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a11      	ldr	r2, [pc, #68]	; (8002854 <HAL_UART_MspInit+0x2a8>)
 8002810:	63da      	str	r2, [r3, #60]	; 0x3c
 8002812:	4a10      	ldr	r2, [pc, #64]	; (8002854 <HAL_UART_MspInit+0x2a8>)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002818:	2200      	movs	r2, #0
 800281a:	2100      	movs	r1, #0
 800281c:	2026      	movs	r0, #38	; 0x26
 800281e:	f000 fdf0 	bl	8003402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002822:	2026      	movs	r0, #38	; 0x26
 8002824:	f000 fe09 	bl	800343a <HAL_NVIC_EnableIRQ>
}
 8002828:	e074      	b.n	8002914 <HAL_UART_MspInit+0x368>
 800282a:	bf00      	nop
 800282c:	40004c00 	.word	0x40004c00
 8002830:	40023800 	.word	0x40023800
 8002834:	40020800 	.word	0x40020800
 8002838:	40005000 	.word	0x40005000
 800283c:	40020c00 	.word	0x40020c00
 8002840:	40013800 	.word	0x40013800
 8002844:	40020000 	.word	0x40020000
 8002848:	20002b9c 	.word	0x20002b9c
 800284c:	40026058 	.word	0x40026058
 8002850:	40004400 	.word	0x40004400
 8002854:	20002be0 	.word	0x20002be0
 8002858:	4002606c 	.word	0x4002606c
  else if(huart->Instance==USART3)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a2e      	ldr	r2, [pc, #184]	; (800291c <HAL_UART_MspInit+0x370>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d156      	bne.n	8002914 <HAL_UART_MspInit+0x368>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002866:	4b2e      	ldr	r3, [pc, #184]	; (8002920 <HAL_UART_MspInit+0x374>)
 8002868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286a:	4a2d      	ldr	r2, [pc, #180]	; (8002920 <HAL_UART_MspInit+0x374>)
 800286c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002870:	6253      	str	r3, [r2, #36]	; 0x24
 8002872:	4b2b      	ldr	r3, [pc, #172]	; (8002920 <HAL_UART_MspInit+0x374>)
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800287e:	4b28      	ldr	r3, [pc, #160]	; (8002920 <HAL_UART_MspInit+0x374>)
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	4a27      	ldr	r2, [pc, #156]	; (8002920 <HAL_UART_MspInit+0x374>)
 8002884:	f043 0302 	orr.w	r3, r3, #2
 8002888:	61d3      	str	r3, [r2, #28]
 800288a:	4b25      	ldr	r3, [pc, #148]	; (8002920 <HAL_UART_MspInit+0x374>)
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	60bb      	str	r3, [r7, #8]
 8002894:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002896:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800289a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289c:	2302      	movs	r3, #2
 800289e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a4:	2303      	movs	r3, #3
 80028a6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80028a8:	2307      	movs	r3, #7
 80028aa:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028b0:	4619      	mov	r1, r3
 80028b2:	481c      	ldr	r0, [pc, #112]	; (8002924 <HAL_UART_MspInit+0x378>)
 80028b4:	f000 fee0 	bl	8003678 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80028b8:	4b1b      	ldr	r3, [pc, #108]	; (8002928 <HAL_UART_MspInit+0x37c>)
 80028ba:	4a1c      	ldr	r2, [pc, #112]	; (800292c <HAL_UART_MspInit+0x380>)
 80028bc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028be:	4b1a      	ldr	r3, [pc, #104]	; (8002928 <HAL_UART_MspInit+0x37c>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028c4:	4b18      	ldr	r3, [pc, #96]	; (8002928 <HAL_UART_MspInit+0x37c>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028ca:	4b17      	ldr	r3, [pc, #92]	; (8002928 <HAL_UART_MspInit+0x37c>)
 80028cc:	2280      	movs	r2, #128	; 0x80
 80028ce:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028d0:	4b15      	ldr	r3, [pc, #84]	; (8002928 <HAL_UART_MspInit+0x37c>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028d6:	4b14      	ldr	r3, [pc, #80]	; (8002928 <HAL_UART_MspInit+0x37c>)
 80028d8:	2200      	movs	r2, #0
 80028da:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80028dc:	4b12      	ldr	r3, [pc, #72]	; (8002928 <HAL_UART_MspInit+0x37c>)
 80028de:	2200      	movs	r2, #0
 80028e0:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80028e2:	4b11      	ldr	r3, [pc, #68]	; (8002928 <HAL_UART_MspInit+0x37c>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80028e8:	480f      	ldr	r0, [pc, #60]	; (8002928 <HAL_UART_MspInit+0x37c>)
 80028ea:	f000 fdc1 	bl	8003470 <HAL_DMA_Init>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <HAL_UART_MspInit+0x34c>
      Error_Handler();
 80028f4:	f7ff fc14 	bl	8002120 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a0b      	ldr	r2, [pc, #44]	; (8002928 <HAL_UART_MspInit+0x37c>)
 80028fc:	63da      	str	r2, [r3, #60]	; 0x3c
 80028fe:	4a0a      	ldr	r2, [pc, #40]	; (8002928 <HAL_UART_MspInit+0x37c>)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002904:	2200      	movs	r2, #0
 8002906:	2100      	movs	r1, #0
 8002908:	2027      	movs	r0, #39	; 0x27
 800290a:	f000 fd7a 	bl	8003402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800290e:	2027      	movs	r0, #39	; 0x27
 8002910:	f000 fd93 	bl	800343a <HAL_NVIC_EnableIRQ>
}
 8002914:	bf00      	nop
 8002916:	3748      	adds	r7, #72	; 0x48
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40004800 	.word	0x40004800
 8002920:	40023800 	.word	0x40023800
 8002924:	40020400 	.word	0x40020400
 8002928:	20002c24 	.word	0x20002c24
 800292c:	40026030 	.word	0x40026030

08002930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002934:	e7fe      	b.n	8002934 <NMI_Handler+0x4>

08002936 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002936:	b480      	push	{r7}
 8002938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800293a:	e7fe      	b.n	800293a <HardFault_Handler+0x4>

0800293c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002940:	e7fe      	b.n	8002940 <MemManage_Handler+0x4>

08002942 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002942:	b480      	push	{r7}
 8002944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002946:	e7fe      	b.n	8002946 <BusFault_Handler+0x4>

08002948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800294c:	e7fe      	b.n	800294c <UsageFault_Handler+0x4>

0800294e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800294e:	b480      	push	{r7}
 8002950:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002952:	bf00      	nop
 8002954:	46bd      	mov	sp, r7
 8002956:	bc80      	pop	{r7}
 8002958:	4770      	bx	lr

0800295a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800295a:	b480      	push	{r7}
 800295c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800295e:	bf00      	nop
 8002960:	46bd      	mov	sp, r7
 8002962:	bc80      	pop	{r7}
 8002964:	4770      	bx	lr

08002966 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002966:	b480      	push	{r7}
 8002968:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800296a:	bf00      	nop
 800296c:	46bd      	mov	sp, r7
 800296e:	bc80      	pop	{r7}
 8002970:	4770      	bx	lr

08002972 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002976:	f000 f97d 	bl	8002c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800297a:	bf00      	nop
 800297c:	bd80      	pop	{r7, pc}
	...

08002980 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */
	  UARTDMA_DmaIrqHandler(&hRAM_2_uart3dma3);
 8002984:	4802      	ldr	r0, [pc, #8]	; (8002990 <DMA1_Channel3_IRQHandler+0x10>)
 8002986:	f7fd fdba 	bl	80004fe <UARTDMA_DmaIrqHandler>
	  return;
 800298a:	bf00      	nop
  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	20001dd4 	.word	0x20001dd4

08002994 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */
	  UARTDMA_DmaIrqHandler(&hRAM_1_uart1dma5);
 8002998:	4802      	ldr	r0, [pc, #8]	; (80029a4 <DMA1_Channel5_IRQHandler+0x10>)
 800299a:	f7fd fdb0 	bl	80004fe <UARTDMA_DmaIrqHandler>
	  return;
 800299e:	bf00      	nop
  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	200011c8 	.word	0x200011c8

080029a8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
  UARTDMA_DmaIrqHandler(&hLTE_uart2dma6);
 80029ac:	4802      	ldr	r0, [pc, #8]	; (80029b8 <DMA1_Channel6_IRQHandler+0x10>)
 80029ae:	f7fd fda6 	bl	80004fe <UARTDMA_DmaIrqHandler>
  return;
 80029b2:	bf00      	nop
  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	200005bc 	.word	0x200005bc

080029bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	  UARTDMA_UartIrqHandler(&hRAM_1_uart1dma5);
 80029c0:	4802      	ldr	r0, [pc, #8]	; (80029cc <USART1_IRQHandler+0x10>)
 80029c2:	f7fd fd71 	bl	80004a8 <UARTDMA_UartIrqHandler>
	  return;
 80029c6:	bf00      	nop
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	200011c8 	.word	0x200011c8

080029d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  UARTDMA_UartIrqHandler(&hLTE_uart2dma6);
 80029d4:	4802      	ldr	r0, [pc, #8]	; (80029e0 <USART2_IRQHandler+0x10>)
 80029d6:	f7fd fd67 	bl	80004a8 <UARTDMA_UartIrqHandler>
  return;
 80029da:	bf00      	nop
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	200005bc 	.word	0x200005bc

080029e4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	  UARTDMA_UartIrqHandler(&hRAM_2_uart3dma3);
 80029e8:	4802      	ldr	r0, [pc, #8]	; (80029f4 <USART3_IRQHandler+0x10>)
 80029ea:	f7fd fd5d 	bl	80004a8 <UARTDMA_UartIrqHandler>
	  return;
 80029ee:	bf00      	nop
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	20001dd4 	.word	0x20001dd4

080029f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  return 1;
 80029fc:	2301      	movs	r3, #1
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc80      	pop	{r7}
 8002a04:	4770      	bx	lr

08002a06 <_kill>:

int _kill(int pid, int sig)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b082      	sub	sp, #8
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
 8002a0e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a10:	f002 fa80 	bl	8004f14 <__errno>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2216      	movs	r2, #22
 8002a18:	601a      	str	r2, [r3, #0]
  return -1;
 8002a1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <_exit>:

void _exit (int status)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b082      	sub	sp, #8
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a2e:	f04f 31ff 	mov.w	r1, #4294967295
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7ff ffe7 	bl	8002a06 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a38:	e7fe      	b.n	8002a38 <_exit+0x12>

08002a3a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b086      	sub	sp, #24
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	60f8      	str	r0, [r7, #12]
 8002a42:	60b9      	str	r1, [r7, #8]
 8002a44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a46:	2300      	movs	r3, #0
 8002a48:	617b      	str	r3, [r7, #20]
 8002a4a:	e00a      	b.n	8002a62 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a4c:	f3af 8000 	nop.w
 8002a50:	4601      	mov	r1, r0
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	1c5a      	adds	r2, r3, #1
 8002a56:	60ba      	str	r2, [r7, #8]
 8002a58:	b2ca      	uxtb	r2, r1
 8002a5a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	3301      	adds	r3, #1
 8002a60:	617b      	str	r3, [r7, #20]
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	dbf0      	blt.n	8002a4c <_read+0x12>
  }

  return len;
 8002a6a:	687b      	ldr	r3, [r7, #4]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3718      	adds	r7, #24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a80:	2300      	movs	r3, #0
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	e009      	b.n	8002a9a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	1c5a      	adds	r2, r3, #1
 8002a8a:	60ba      	str	r2, [r7, #8]
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7fd fe74 	bl	800077c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	3301      	adds	r3, #1
 8002a98:	617b      	str	r3, [r7, #20]
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	dbf1      	blt.n	8002a86 <_write+0x12>
  }
  return len;
 8002aa2:	687b      	ldr	r3, [r7, #4]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3718      	adds	r7, #24
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <_close>:

int _close(int file)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ab4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bc80      	pop	{r7}
 8002ac0:	4770      	bx	lr

08002ac2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
 8002aca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ad2:	605a      	str	r2, [r3, #4]
  return 0;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr

08002ae0 <_isatty>:

int _isatty(int file)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ae8:	2301      	movs	r3, #1
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr

08002af4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3714      	adds	r7, #20
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr

08002b0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b14:	4a14      	ldr	r2, [pc, #80]	; (8002b68 <_sbrk+0x5c>)
 8002b16:	4b15      	ldr	r3, [pc, #84]	; (8002b6c <_sbrk+0x60>)
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b20:	4b13      	ldr	r3, [pc, #76]	; (8002b70 <_sbrk+0x64>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d102      	bne.n	8002b2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b28:	4b11      	ldr	r3, [pc, #68]	; (8002b70 <_sbrk+0x64>)
 8002b2a:	4a12      	ldr	r2, [pc, #72]	; (8002b74 <_sbrk+0x68>)
 8002b2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b2e:	4b10      	ldr	r3, [pc, #64]	; (8002b70 <_sbrk+0x64>)
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4413      	add	r3, r2
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d207      	bcs.n	8002b4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b3c:	f002 f9ea 	bl	8004f14 <__errno>
 8002b40:	4603      	mov	r3, r0
 8002b42:	220c      	movs	r2, #12
 8002b44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b46:	f04f 33ff 	mov.w	r3, #4294967295
 8002b4a:	e009      	b.n	8002b60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b4c:	4b08      	ldr	r3, [pc, #32]	; (8002b70 <_sbrk+0x64>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b52:	4b07      	ldr	r3, [pc, #28]	; (8002b70 <_sbrk+0x64>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4413      	add	r3, r2
 8002b5a:	4a05      	ldr	r2, [pc, #20]	; (8002b70 <_sbrk+0x64>)
 8002b5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	20014000 	.word	0x20014000
 8002b6c:	00000400 	.word	0x00000400
 8002b70:	20003c88 	.word	0x20003c88
 8002b74:	20003ca0 	.word	0x20003ca0

08002b78 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b7c:	bf00      	nop
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr

08002b84 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b84:	f7ff fff8 	bl	8002b78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b88:	480b      	ldr	r0, [pc, #44]	; (8002bb8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002b8a:	490c      	ldr	r1, [pc, #48]	; (8002bbc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002b8c:	4a0c      	ldr	r2, [pc, #48]	; (8002bc0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002b8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b90:	e002      	b.n	8002b98 <LoopCopyDataInit>

08002b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b96:	3304      	adds	r3, #4

08002b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b9c:	d3f9      	bcc.n	8002b92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b9e:	4a09      	ldr	r2, [pc, #36]	; (8002bc4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002ba0:	4c09      	ldr	r4, [pc, #36]	; (8002bc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ba4:	e001      	b.n	8002baa <LoopFillZerobss>

08002ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ba8:	3204      	adds	r2, #4

08002baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bac:	d3fb      	bcc.n	8002ba6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002bae:	f002 f9b7 	bl	8004f20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002bb2:	f7fd fdf5 	bl	80007a0 <main>
  bx lr
 8002bb6:	4770      	bx	lr
  ldr r0, =_sdata
 8002bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bbc:	200005a0 	.word	0x200005a0
  ldr r2, =_sidata
 8002bc0:	08006d84 	.word	0x08006d84
  ldr r2, =_sbss
 8002bc4:	200005a0 	.word	0x200005a0
  ldr r4, =_ebss
 8002bc8:	20003ca0 	.word	0x20003ca0

08002bcc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002bcc:	e7fe      	b.n	8002bcc <ADC1_IRQHandler>

08002bce <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b082      	sub	sp, #8
 8002bd2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bd8:	2003      	movs	r0, #3
 8002bda:	f000 fc07 	bl	80033ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002bde:	2000      	movs	r0, #0
 8002be0:	f000 f80e 	bl	8002c00 <HAL_InitTick>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d002      	beq.n	8002bf0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	71fb      	strb	r3, [r7, #7]
 8002bee:	e001      	b.n	8002bf4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002bf0:	f7ff fc6c 	bl	80024cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002bf4:	79fb      	ldrb	r3, [r7, #7]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
	...

08002c00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002c0c:	4b16      	ldr	r3, [pc, #88]	; (8002c68 <HAL_InitTick+0x68>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d022      	beq.n	8002c5a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002c14:	4b15      	ldr	r3, [pc, #84]	; (8002c6c <HAL_InitTick+0x6c>)
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	4b13      	ldr	r3, [pc, #76]	; (8002c68 <HAL_InitTick+0x68>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002c20:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f000 fc14 	bl	8003456 <HAL_SYSTICK_Config>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d10f      	bne.n	8002c54 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b0f      	cmp	r3, #15
 8002c38:	d809      	bhi.n	8002c4e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8002c42:	f000 fbde 	bl	8003402 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c46:	4a0a      	ldr	r2, [pc, #40]	; (8002c70 <HAL_InitTick+0x70>)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6013      	str	r3, [r2, #0]
 8002c4c:	e007      	b.n	8002c5e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	73fb      	strb	r3, [r7, #15]
 8002c52:	e004      	b.n	8002c5e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	73fb      	strb	r3, [r7, #15]
 8002c58:	e001      	b.n	8002c5e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	20000538 	.word	0x20000538
 8002c6c:	20000530 	.word	0x20000530
 8002c70:	20000534 	.word	0x20000534

08002c74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c78:	4b05      	ldr	r3, [pc, #20]	; (8002c90 <HAL_IncTick+0x1c>)
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <HAL_IncTick+0x20>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4413      	add	r3, r2
 8002c82:	4a03      	ldr	r2, [pc, #12]	; (8002c90 <HAL_IncTick+0x1c>)
 8002c84:	6013      	str	r3, [r2, #0]
}
 8002c86:	bf00      	nop
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bc80      	pop	{r7}
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	20003c8c 	.word	0x20003c8c
 8002c94:	20000538 	.word	0x20000538

08002c98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c9c:	4b02      	ldr	r3, [pc, #8]	; (8002ca8 <HAL_GetTick+0x10>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bc80      	pop	{r7}
 8002ca6:	4770      	bx	lr
 8002ca8:	20003c8c 	.word	0x20003c8c

08002cac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cb4:	f7ff fff0 	bl	8002c98 <HAL_GetTick>
 8002cb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc4:	d004      	beq.n	8002cd0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cc6:	4b09      	ldr	r3, [pc, #36]	; (8002cec <HAL_Delay+0x40>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	4413      	add	r3, r2
 8002cce:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002cd0:	bf00      	nop
 8002cd2:	f7ff ffe1 	bl	8002c98 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d8f7      	bhi.n	8002cd2 <HAL_Delay+0x26>
  {
  }
}
 8002ce2:	bf00      	nop
 8002ce4:	bf00      	nop
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	20000538 	.word	0x20000538

08002cf0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08e      	sub	sp, #56	; 0x38
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8002d02:	2300      	movs	r3, #0
 8002d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e127      	b.n	8002f60 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d115      	bne.n	8002d4a <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d2c:	4b8e      	ldr	r3, [pc, #568]	; (8002f68 <HAL_ADC_Init+0x278>)
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	4a8d      	ldr	r2, [pc, #564]	; (8002f68 <HAL_ADC_Init+0x278>)
 8002d32:	f043 0301 	orr.w	r3, r3, #1
 8002d36:	6213      	str	r3, [r2, #32]
 8002d38:	4b8b      	ldr	r3, [pc, #556]	; (8002f68 <HAL_ADC_Init+0x278>)
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	60bb      	str	r3, [r7, #8]
 8002d42:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f7ff fbf1 	bl	800252c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d4e:	f003 0310 	and.w	r3, r3, #16
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f040 80ff 	bne.w	8002f56 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d5c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d60:	f023 0302 	bic.w	r3, r3, #2
 8002d64:	f043 0202 	orr.w	r2, r3, #2
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8002d6c:	4b7f      	ldr	r3, [pc, #508]	; (8002f6c <HAL_ADC_Init+0x27c>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	497c      	ldr	r1, [pc, #496]	; (8002f6c <HAL_ADC_Init+0x27c>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8002d86:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d8e:	4619      	mov	r1, r3
 8002d90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d94:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d96:	6a3b      	ldr	r3, [r7, #32]
 8002d98:	fa93 f3a3 	rbit	r3, r3
 8002d9c:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	fab3 f383 	clz	r3, r3
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8002daa:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002db0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002db8:	4619      	mov	r1, r3
 8002dba:	2302      	movs	r3, #2
 8002dbc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc0:	fa93 f3a3 	rbit	r3, r3
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc8:	fab3 f383 	clz	r3, r3
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8002dd2:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8002dd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dde:	2b10      	cmp	r3, #16
 8002de0:	d007      	beq.n	8002df2 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8002dea:	4313      	orrs	r3, r2
 8002dec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dee:	4313      	orrs	r3, r2
 8002df0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dfc:	2b40      	cmp	r3, #64	; 0x40
 8002dfe:	d04f      	beq.n	8002ea0 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e06:	4313      	orrs	r3, r2
 8002e08:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002e12:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6912      	ldr	r2, [r2, #16]
 8002e18:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002e1c:	d003      	beq.n	8002e26 <HAL_ADC_Init+0x136>
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6912      	ldr	r2, [r2, #16]
 8002e22:	2a01      	cmp	r2, #1
 8002e24:	d102      	bne.n	8002e2c <HAL_ADC_Init+0x13c>
 8002e26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e2a:	e000      	b.n	8002e2e <HAL_ADC_Init+0x13e>
 8002e2c:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8002e2e:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e32:	4313      	orrs	r3, r2
 8002e34:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d125      	bne.n	8002e8c <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d114      	bne.n	8002e74 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8002e54:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	fa92 f2a2 	rbit	r2, r2
 8002e5c:	617a      	str	r2, [r7, #20]
  return result;
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	fab2 f282 	clz	r2, r2
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	4093      	lsls	r3, r2
 8002e68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	633b      	str	r3, [r7, #48]	; 0x30
 8002e72:	e00b      	b.n	8002e8c <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e78:	f043 0220 	orr.w	r2, r3, #32
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e84:	f043 0201 	orr.w	r2, r3, #1
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	4b37      	ldr	r3, [pc, #220]	; (8002f70 <HAL_ADC_Init+0x280>)
 8002e94:	4013      	ands	r3, r2
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	6812      	ldr	r2, [r2, #0]
 8002e9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e9c:	430b      	orrs	r3, r1
 8002e9e:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689a      	ldr	r2, [r3, #8]
 8002ea6:	4b33      	ldr	r3, [pc, #204]	; (8002f74 <HAL_ADC_Init+0x284>)
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6812      	ldr	r2, [r2, #0]
 8002eae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002eb0:	430b      	orrs	r3, r1
 8002eb2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ebc:	d003      	beq.n	8002ec6 <HAL_ADC_Init+0x1d6>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d119      	bne.n	8002efa <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ecc:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8002eda:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	fa92 f2a2 	rbit	r2, r2
 8002ee2:	60fa      	str	r2, [r7, #12]
  return result;
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	fab2 f282 	clz	r2, r2
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	fa03 f202 	lsl.w	r2, r3, r2
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	631a      	str	r2, [r3, #48]	; 0x30
 8002ef8:	e007      	b.n	8002f0a <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8002f08:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	4b19      	ldr	r3, [pc, #100]	; (8002f78 <HAL_ADC_Init+0x288>)
 8002f12:	4013      	ands	r3, r2
 8002f14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d10b      	bne.n	8002f32 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f24:	f023 0303 	bic.w	r3, r3, #3
 8002f28:	f043 0201 	orr.w	r2, r3, #1
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002f30:	e014      	b.n	8002f5c <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f36:	f023 0312 	bic.w	r3, r3, #18
 8002f3a:	f043 0210 	orr.w	r2, r3, #16
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f46:	f043 0201 	orr.w	r2, r3, #1
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002f54:	e002      	b.n	8002f5c <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3738      	adds	r7, #56	; 0x38
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	40012700 	.word	0x40012700
 8002f70:	fcfc16ff 	.word	0xfcfc16ff
 8002f74:	c0fff189 	.word	0xc0fff189
 8002f78:	bf80fffe 	.word	0xbf80fffe

08002f7c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f86:	2300      	movs	r3, #0
 8002f88:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d101      	bne.n	8002f9c <HAL_ADC_ConfigChannel+0x20>
 8002f98:	2302      	movs	r3, #2
 8002f9a:	e14f      	b.n	800323c <HAL_ADC_ConfigChannel+0x2c0>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	2b06      	cmp	r3, #6
 8002faa:	d81c      	bhi.n	8002fe6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685a      	ldr	r2, [r3, #4]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4413      	add	r3, r2
 8002fbc:	3b05      	subs	r3, #5
 8002fbe:	221f      	movs	r2, #31
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	4019      	ands	r1, r3
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	6818      	ldr	r0, [r3, #0]
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	4413      	add	r3, r2
 8002fd6:	3b05      	subs	r3, #5
 8002fd8:	fa00 f203 	lsl.w	r2, r0, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	641a      	str	r2, [r3, #64]	; 0x40
 8002fe4:	e07e      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b0c      	cmp	r3, #12
 8002fec:	d81c      	bhi.n	8003028 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4413      	add	r3, r2
 8002ffe:	3b23      	subs	r3, #35	; 0x23
 8003000:	221f      	movs	r2, #31
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	43db      	mvns	r3, r3
 8003008:	4019      	ands	r1, r3
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	6818      	ldr	r0, [r3, #0]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	4613      	mov	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4413      	add	r3, r2
 8003018:	3b23      	subs	r3, #35	; 0x23
 800301a:	fa00 f203 	lsl.w	r2, r0, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	430a      	orrs	r2, r1
 8003024:	63da      	str	r2, [r3, #60]	; 0x3c
 8003026:	e05d      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	2b12      	cmp	r3, #18
 800302e:	d81c      	bhi.n	800306a <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	4613      	mov	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4413      	add	r3, r2
 8003040:	3b41      	subs	r3, #65	; 0x41
 8003042:	221f      	movs	r2, #31
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43db      	mvns	r3, r3
 800304a:	4019      	ands	r1, r3
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	6818      	ldr	r0, [r3, #0]
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	4613      	mov	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4413      	add	r3, r2
 800305a:	3b41      	subs	r3, #65	; 0x41
 800305c:	fa00 f203 	lsl.w	r2, r0, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	430a      	orrs	r2, r1
 8003066:	639a      	str	r2, [r3, #56]	; 0x38
 8003068:	e03c      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	2b18      	cmp	r3, #24
 8003070:	d81c      	bhi.n	80030ac <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	4613      	mov	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	4413      	add	r3, r2
 8003082:	3b5f      	subs	r3, #95	; 0x5f
 8003084:	221f      	movs	r2, #31
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	43db      	mvns	r3, r3
 800308c:	4019      	ands	r1, r3
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	6818      	ldr	r0, [r3, #0]
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	4613      	mov	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4413      	add	r3, r2
 800309c:	3b5f      	subs	r3, #95	; 0x5f
 800309e:	fa00 f203 	lsl.w	r2, r0, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	635a      	str	r2, [r3, #52]	; 0x34
 80030aa:	e01b      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	4613      	mov	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4413      	add	r3, r2
 80030bc:	3b7d      	subs	r3, #125	; 0x7d
 80030be:	221f      	movs	r2, #31
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	43db      	mvns	r3, r3
 80030c6:	4019      	ands	r1, r3
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	6818      	ldr	r0, [r3, #0]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	4613      	mov	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	3b7d      	subs	r3, #125	; 0x7d
 80030d8:	fa00 f203 	lsl.w	r2, r0, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	430a      	orrs	r2, r1
 80030e2:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2b09      	cmp	r3, #9
 80030ea:	d81a      	bhi.n	8003122 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6959      	ldr	r1, [r3, #20]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	4613      	mov	r3, r2
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	4413      	add	r3, r2
 80030fc:	2207      	movs	r2, #7
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	43db      	mvns	r3, r3
 8003104:	4019      	ands	r1, r3
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	6898      	ldr	r0, [r3, #8]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	4613      	mov	r3, r2
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	4413      	add	r3, r2
 8003114:	fa00 f203 	lsl.w	r2, r0, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	430a      	orrs	r2, r1
 800311e:	615a      	str	r2, [r3, #20]
 8003120:	e05d      	b.n	80031de <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2b13      	cmp	r3, #19
 8003128:	d81c      	bhi.n	8003164 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	6919      	ldr	r1, [r3, #16]
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	4613      	mov	r3, r2
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	4413      	add	r3, r2
 800313a:	3b1e      	subs	r3, #30
 800313c:	2207      	movs	r2, #7
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	43db      	mvns	r3, r3
 8003144:	4019      	ands	r1, r3
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	6898      	ldr	r0, [r3, #8]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	4613      	mov	r3, r2
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	4413      	add	r3, r2
 8003154:	3b1e      	subs	r3, #30
 8003156:	fa00 f203 	lsl.w	r2, r0, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	611a      	str	r2, [r3, #16]
 8003162:	e03c      	b.n	80031de <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2b1d      	cmp	r3, #29
 800316a:	d81c      	bhi.n	80031a6 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68d9      	ldr	r1, [r3, #12]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	4613      	mov	r3, r2
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	4413      	add	r3, r2
 800317c:	3b3c      	subs	r3, #60	; 0x3c
 800317e:	2207      	movs	r2, #7
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	43db      	mvns	r3, r3
 8003186:	4019      	ands	r1, r3
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	6898      	ldr	r0, [r3, #8]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	4613      	mov	r3, r2
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	4413      	add	r3, r2
 8003196:	3b3c      	subs	r3, #60	; 0x3c
 8003198:	fa00 f203 	lsl.w	r2, r0, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	60da      	str	r2, [r3, #12]
 80031a4:	e01b      	b.n	80031de <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	4613      	mov	r3, r2
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	4413      	add	r3, r2
 80031b6:	3b5a      	subs	r3, #90	; 0x5a
 80031b8:	2207      	movs	r2, #7
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	43db      	mvns	r3, r3
 80031c0:	4019      	ands	r1, r3
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	6898      	ldr	r0, [r3, #8]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	4613      	mov	r3, r2
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	4413      	add	r3, r2
 80031d0:	3b5a      	subs	r3, #90	; 0x5a
 80031d2:	fa00 f203 	lsl.w	r2, r0, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2b10      	cmp	r3, #16
 80031e4:	d003      	beq.n	80031ee <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80031ea:	2b11      	cmp	r3, #17
 80031ec:	d121      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 80031ee:	4b16      	ldr	r3, [pc, #88]	; (8003248 <HAL_ADC_ConfigChannel+0x2cc>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d11b      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80031fa:	4b13      	ldr	r3, [pc, #76]	; (8003248 <HAL_ADC_ConfigChannel+0x2cc>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	4a12      	ldr	r2, [pc, #72]	; (8003248 <HAL_ADC_ConfigChannel+0x2cc>)
 8003200:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003204:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2b10      	cmp	r3, #16
 800320c:	d111      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800320e:	4b0f      	ldr	r3, [pc, #60]	; (800324c <HAL_ADC_ConfigChannel+0x2d0>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a0f      	ldr	r2, [pc, #60]	; (8003250 <HAL_ADC_ConfigChannel+0x2d4>)
 8003214:	fba2 2303 	umull	r2, r3, r2, r3
 8003218:	0c9a      	lsrs	r2, r3, #18
 800321a:	4613      	mov	r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	4413      	add	r3, r2
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8003224:	e002      	b.n	800322c <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	3b01      	subs	r3, #1
 800322a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f9      	bne.n	8003226 <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800323a:	7bfb      	ldrb	r3, [r7, #15]
}
 800323c:	4618      	mov	r0, r3
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	bc80      	pop	{r7}
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	40012700 	.word	0x40012700
 800324c:	20000530 	.word	0x20000530
 8003250:	431bde83 	.word	0x431bde83

08003254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f003 0307 	and.w	r3, r3, #7
 8003262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003264:	4b0c      	ldr	r3, [pc, #48]	; (8003298 <__NVIC_SetPriorityGrouping+0x44>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800326a:	68ba      	ldr	r2, [r7, #8]
 800326c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003270:	4013      	ands	r3, r2
 8003272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800327c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003286:	4a04      	ldr	r2, [pc, #16]	; (8003298 <__NVIC_SetPriorityGrouping+0x44>)
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	60d3      	str	r3, [r2, #12]
}
 800328c:	bf00      	nop
 800328e:	3714      	adds	r7, #20
 8003290:	46bd      	mov	sp, r7
 8003292:	bc80      	pop	{r7}
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	e000ed00 	.word	0xe000ed00

0800329c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032a0:	4b04      	ldr	r3, [pc, #16]	; (80032b4 <__NVIC_GetPriorityGrouping+0x18>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	0a1b      	lsrs	r3, r3, #8
 80032a6:	f003 0307 	and.w	r3, r3, #7
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bc80      	pop	{r7}
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	e000ed00 	.word	0xe000ed00

080032b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	4603      	mov	r3, r0
 80032c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	db0b      	blt.n	80032e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032ca:	79fb      	ldrb	r3, [r7, #7]
 80032cc:	f003 021f 	and.w	r2, r3, #31
 80032d0:	4906      	ldr	r1, [pc, #24]	; (80032ec <__NVIC_EnableIRQ+0x34>)
 80032d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d6:	095b      	lsrs	r3, r3, #5
 80032d8:	2001      	movs	r0, #1
 80032da:	fa00 f202 	lsl.w	r2, r0, r2
 80032de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032e2:	bf00      	nop
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bc80      	pop	{r7}
 80032ea:	4770      	bx	lr
 80032ec:	e000e100 	.word	0xe000e100

080032f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	4603      	mov	r3, r0
 80032f8:	6039      	str	r1, [r7, #0]
 80032fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003300:	2b00      	cmp	r3, #0
 8003302:	db0a      	blt.n	800331a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	b2da      	uxtb	r2, r3
 8003308:	490c      	ldr	r1, [pc, #48]	; (800333c <__NVIC_SetPriority+0x4c>)
 800330a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330e:	0112      	lsls	r2, r2, #4
 8003310:	b2d2      	uxtb	r2, r2
 8003312:	440b      	add	r3, r1
 8003314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003318:	e00a      	b.n	8003330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	b2da      	uxtb	r2, r3
 800331e:	4908      	ldr	r1, [pc, #32]	; (8003340 <__NVIC_SetPriority+0x50>)
 8003320:	79fb      	ldrb	r3, [r7, #7]
 8003322:	f003 030f 	and.w	r3, r3, #15
 8003326:	3b04      	subs	r3, #4
 8003328:	0112      	lsls	r2, r2, #4
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	440b      	add	r3, r1
 800332e:	761a      	strb	r2, [r3, #24]
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	bc80      	pop	{r7}
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	e000e100 	.word	0xe000e100
 8003340:	e000ed00 	.word	0xe000ed00

08003344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003344:	b480      	push	{r7}
 8003346:	b089      	sub	sp, #36	; 0x24
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f1c3 0307 	rsb	r3, r3, #7
 800335e:	2b04      	cmp	r3, #4
 8003360:	bf28      	it	cs
 8003362:	2304      	movcs	r3, #4
 8003364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	3304      	adds	r3, #4
 800336a:	2b06      	cmp	r3, #6
 800336c:	d902      	bls.n	8003374 <NVIC_EncodePriority+0x30>
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	3b03      	subs	r3, #3
 8003372:	e000      	b.n	8003376 <NVIC_EncodePriority+0x32>
 8003374:	2300      	movs	r3, #0
 8003376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003378:	f04f 32ff 	mov.w	r2, #4294967295
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	43da      	mvns	r2, r3
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	401a      	ands	r2, r3
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800338c:	f04f 31ff 	mov.w	r1, #4294967295
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	fa01 f303 	lsl.w	r3, r1, r3
 8003396:	43d9      	mvns	r1, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800339c:	4313      	orrs	r3, r2
         );
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3724      	adds	r7, #36	; 0x24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bc80      	pop	{r7}
 80033a6:	4770      	bx	lr

080033a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3b01      	subs	r3, #1
 80033b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033b8:	d301      	bcc.n	80033be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033ba:	2301      	movs	r3, #1
 80033bc:	e00f      	b.n	80033de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033be:	4a0a      	ldr	r2, [pc, #40]	; (80033e8 <SysTick_Config+0x40>)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3b01      	subs	r3, #1
 80033c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033c6:	210f      	movs	r1, #15
 80033c8:	f04f 30ff 	mov.w	r0, #4294967295
 80033cc:	f7ff ff90 	bl	80032f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033d0:	4b05      	ldr	r3, [pc, #20]	; (80033e8 <SysTick_Config+0x40>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033d6:	4b04      	ldr	r3, [pc, #16]	; (80033e8 <SysTick_Config+0x40>)
 80033d8:	2207      	movs	r2, #7
 80033da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	e000e010 	.word	0xe000e010

080033ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f7ff ff2d 	bl	8003254 <__NVIC_SetPriorityGrouping>
}
 80033fa:	bf00      	nop
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b086      	sub	sp, #24
 8003406:	af00      	add	r7, sp, #0
 8003408:	4603      	mov	r3, r0
 800340a:	60b9      	str	r1, [r7, #8]
 800340c:	607a      	str	r2, [r7, #4]
 800340e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003410:	2300      	movs	r3, #0
 8003412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003414:	f7ff ff42 	bl	800329c <__NVIC_GetPriorityGrouping>
 8003418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	68b9      	ldr	r1, [r7, #8]
 800341e:	6978      	ldr	r0, [r7, #20]
 8003420:	f7ff ff90 	bl	8003344 <NVIC_EncodePriority>
 8003424:	4602      	mov	r2, r0
 8003426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800342a:	4611      	mov	r1, r2
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff ff5f 	bl	80032f0 <__NVIC_SetPriority>
}
 8003432:	bf00      	nop
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b082      	sub	sp, #8
 800343e:	af00      	add	r7, sp, #0
 8003440:	4603      	mov	r3, r0
 8003442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff ff35 	bl	80032b8 <__NVIC_EnableIRQ>
}
 800344e:	bf00      	nop
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b082      	sub	sp, #8
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f7ff ffa2 	bl	80033a8 <SysTick_Config>
 8003464:	4603      	mov	r3, r0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3708      	adds	r7, #8
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
	...

08003470 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e059      	b.n	8003536 <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	461a      	mov	r2, r3
 8003488:	4b2d      	ldr	r3, [pc, #180]	; (8003540 <HAL_DMA_Init+0xd0>)
 800348a:	429a      	cmp	r2, r3
 800348c:	d80f      	bhi.n	80034ae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	461a      	mov	r2, r3
 8003494:	4b2b      	ldr	r3, [pc, #172]	; (8003544 <HAL_DMA_Init+0xd4>)
 8003496:	4413      	add	r3, r2
 8003498:	4a2b      	ldr	r2, [pc, #172]	; (8003548 <HAL_DMA_Init+0xd8>)
 800349a:	fba2 2303 	umull	r2, r3, r2, r3
 800349e:	091b      	lsrs	r3, r3, #4
 80034a0:	009a      	lsls	r2, r3, #2
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a28      	ldr	r2, [pc, #160]	; (800354c <HAL_DMA_Init+0xdc>)
 80034aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80034ac:	e00e      	b.n	80034cc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	461a      	mov	r2, r3
 80034b4:	4b26      	ldr	r3, [pc, #152]	; (8003550 <HAL_DMA_Init+0xe0>)
 80034b6:	4413      	add	r3, r2
 80034b8:	4a23      	ldr	r2, [pc, #140]	; (8003548 <HAL_DMA_Init+0xd8>)
 80034ba:	fba2 2303 	umull	r2, r3, r2, r3
 80034be:	091b      	lsrs	r3, r3, #4
 80034c0:	009a      	lsls	r2, r3, #2
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a22      	ldr	r2, [pc, #136]	; (8003554 <HAL_DMA_Init+0xe4>)
 80034ca:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2202      	movs	r2, #2
 80034d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80034e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80034f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003508:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	4313      	orrs	r3, r2
 8003514:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3714      	adds	r7, #20
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr
 8003540:	40026407 	.word	0x40026407
 8003544:	bffd9ff8 	.word	0xbffd9ff8
 8003548:	cccccccd 	.word	0xcccccccd
 800354c:	40026000 	.word	0x40026000
 8003550:	bffd9bf8 	.word	0xbffd9bf8
 8003554:	40026400 	.word	0x40026400

08003558 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
 8003564:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003566:	2300      	movs	r3, #0
 8003568:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d101      	bne.n	8003578 <HAL_DMA_Start_IT+0x20>
 8003574:	2302      	movs	r3, #2
 8003576:	e04b      	b.n	8003610 <HAL_DMA_Start_IT+0xb8>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b01      	cmp	r3, #1
 800358a:	d13a      	bne.n	8003602 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2202      	movs	r2, #2
 8003590:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0201 	bic.w	r2, r2, #1
 80035a8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	68b9      	ldr	r1, [r7, #8]
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f000 f831 	bl	8003618 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d008      	beq.n	80035d0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f042 020e 	orr.w	r2, r2, #14
 80035cc:	601a      	str	r2, [r3, #0]
 80035ce:	e00f      	b.n	80035f0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0204 	bic.w	r2, r2, #4
 80035de:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f042 020a 	orr.w	r2, r2, #10
 80035ee:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f042 0201 	orr.w	r2, r2, #1
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	e005      	b.n	800360e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800360a:	2302      	movs	r3, #2
 800360c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800360e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003610:	4618      	mov	r0, r3
 8003612:	3718      	adds	r7, #24
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
 8003624:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	f003 021c 	and.w	r2, r3, #28
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003632:	2101      	movs	r1, #1
 8003634:	fa01 f202 	lsl.w	r2, r1, r2
 8003638:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	2b10      	cmp	r3, #16
 8003648:	d108      	bne.n	800365c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68ba      	ldr	r2, [r7, #8]
 8003658:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800365a:	e007      	b.n	800366c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68ba      	ldr	r2, [r7, #8]
 8003662:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	60da      	str	r2, [r3, #12]
}
 800366c:	bf00      	nop
 800366e:	3714      	adds	r7, #20
 8003670:	46bd      	mov	sp, r7
 8003672:	bc80      	pop	{r7}
 8003674:	4770      	bx	lr
	...

08003678 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003678:	b480      	push	{r7}
 800367a:	b087      	sub	sp, #28
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003682:	2300      	movs	r3, #0
 8003684:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003686:	2300      	movs	r3, #0
 8003688:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800368a:	2300      	movs	r3, #0
 800368c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800368e:	e160      	b.n	8003952 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	2101      	movs	r1, #1
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	fa01 f303 	lsl.w	r3, r1, r3
 800369c:	4013      	ands	r3, r2
 800369e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	f000 8152 	beq.w	800394c <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f003 0303 	and.w	r3, r3, #3
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d005      	beq.n	80036c0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d130      	bne.n	8003722 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	2203      	movs	r2, #3
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	43db      	mvns	r3, r3
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	4013      	ands	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	68da      	ldr	r2, [r3, #12]
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	fa02 f303 	lsl.w	r3, r2, r3
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80036f6:	2201      	movs	r2, #1
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	fa02 f303 	lsl.w	r3, r2, r3
 80036fe:	43db      	mvns	r3, r3
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	4013      	ands	r3, r2
 8003704:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	091b      	lsrs	r3, r3, #4
 800370c:	f003 0201 	and.w	r2, r3, #1
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	fa02 f303 	lsl.w	r3, r2, r3
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	4313      	orrs	r3, r2
 800371a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f003 0303 	and.w	r3, r3, #3
 800372a:	2b03      	cmp	r3, #3
 800372c:	d017      	beq.n	800375e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	2203      	movs	r2, #3
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	43db      	mvns	r3, r3
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	4013      	ands	r3, r2
 8003744:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	689a      	ldr	r2, [r3, #8]
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	fa02 f303 	lsl.w	r3, r2, r3
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	4313      	orrs	r3, r2
 8003756:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d123      	bne.n	80037b2 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	08da      	lsrs	r2, r3, #3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	3208      	adds	r2, #8
 8003772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003776:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	f003 0307 	and.w	r3, r3, #7
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	220f      	movs	r2, #15
 8003782:	fa02 f303 	lsl.w	r3, r2, r3
 8003786:	43db      	mvns	r3, r3
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	4013      	ands	r3, r2
 800378c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	691a      	ldr	r2, [r3, #16]
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	fa02 f303 	lsl.w	r3, r2, r3
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	08da      	lsrs	r2, r3, #3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3208      	adds	r2, #8
 80037ac:	6939      	ldr	r1, [r7, #16]
 80037ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	2203      	movs	r2, #3
 80037be:	fa02 f303 	lsl.w	r3, r2, r3
 80037c2:	43db      	mvns	r3, r3
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	4013      	ands	r3, r2
 80037c8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f003 0203 	and.w	r2, r3, #3
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	fa02 f303 	lsl.w	r3, r2, r3
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	4313      	orrs	r3, r2
 80037de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f000 80ac 	beq.w	800394c <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037f4:	4b5e      	ldr	r3, [pc, #376]	; (8003970 <HAL_GPIO_Init+0x2f8>)
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	4a5d      	ldr	r2, [pc, #372]	; (8003970 <HAL_GPIO_Init+0x2f8>)
 80037fa:	f043 0301 	orr.w	r3, r3, #1
 80037fe:	6213      	str	r3, [r2, #32]
 8003800:	4b5b      	ldr	r3, [pc, #364]	; (8003970 <HAL_GPIO_Init+0x2f8>)
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	60bb      	str	r3, [r7, #8]
 800380a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800380c:	4a59      	ldr	r2, [pc, #356]	; (8003974 <HAL_GPIO_Init+0x2fc>)
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	089b      	lsrs	r3, r3, #2
 8003812:	3302      	adds	r3, #2
 8003814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003818:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	f003 0303 	and.w	r3, r3, #3
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	220f      	movs	r2, #15
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	43db      	mvns	r3, r3
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	4013      	ands	r3, r2
 800382e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a51      	ldr	r2, [pc, #324]	; (8003978 <HAL_GPIO_Init+0x300>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d025      	beq.n	8003884 <HAL_GPIO_Init+0x20c>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a50      	ldr	r2, [pc, #320]	; (800397c <HAL_GPIO_Init+0x304>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d01f      	beq.n	8003880 <HAL_GPIO_Init+0x208>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a4f      	ldr	r2, [pc, #316]	; (8003980 <HAL_GPIO_Init+0x308>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d019      	beq.n	800387c <HAL_GPIO_Init+0x204>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a4e      	ldr	r2, [pc, #312]	; (8003984 <HAL_GPIO_Init+0x30c>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d013      	beq.n	8003878 <HAL_GPIO_Init+0x200>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a4d      	ldr	r2, [pc, #308]	; (8003988 <HAL_GPIO_Init+0x310>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d00d      	beq.n	8003874 <HAL_GPIO_Init+0x1fc>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a4c      	ldr	r2, [pc, #304]	; (800398c <HAL_GPIO_Init+0x314>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d007      	beq.n	8003870 <HAL_GPIO_Init+0x1f8>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a4b      	ldr	r2, [pc, #300]	; (8003990 <HAL_GPIO_Init+0x318>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d101      	bne.n	800386c <HAL_GPIO_Init+0x1f4>
 8003868:	2306      	movs	r3, #6
 800386a:	e00c      	b.n	8003886 <HAL_GPIO_Init+0x20e>
 800386c:	2307      	movs	r3, #7
 800386e:	e00a      	b.n	8003886 <HAL_GPIO_Init+0x20e>
 8003870:	2305      	movs	r3, #5
 8003872:	e008      	b.n	8003886 <HAL_GPIO_Init+0x20e>
 8003874:	2304      	movs	r3, #4
 8003876:	e006      	b.n	8003886 <HAL_GPIO_Init+0x20e>
 8003878:	2303      	movs	r3, #3
 800387a:	e004      	b.n	8003886 <HAL_GPIO_Init+0x20e>
 800387c:	2302      	movs	r3, #2
 800387e:	e002      	b.n	8003886 <HAL_GPIO_Init+0x20e>
 8003880:	2301      	movs	r3, #1
 8003882:	e000      	b.n	8003886 <HAL_GPIO_Init+0x20e>
 8003884:	2300      	movs	r3, #0
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	f002 0203 	and.w	r2, r2, #3
 800388c:	0092      	lsls	r2, r2, #2
 800388e:	4093      	lsls	r3, r2
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	4313      	orrs	r3, r2
 8003894:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003896:	4937      	ldr	r1, [pc, #220]	; (8003974 <HAL_GPIO_Init+0x2fc>)
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	089b      	lsrs	r3, r3, #2
 800389c:	3302      	adds	r3, #2
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038a4:	4b3b      	ldr	r3, [pc, #236]	; (8003994 <HAL_GPIO_Init+0x31c>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	43db      	mvns	r3, r3
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	4013      	ands	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80038c8:	4a32      	ldr	r2, [pc, #200]	; (8003994 <HAL_GPIO_Init+0x31c>)
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038ce:	4b31      	ldr	r3, [pc, #196]	; (8003994 <HAL_GPIO_Init+0x31c>)
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	43db      	mvns	r3, r3
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	4013      	ands	r3, r2
 80038dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80038f2:	4a28      	ldr	r2, [pc, #160]	; (8003994 <HAL_GPIO_Init+0x31c>)
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038f8:	4b26      	ldr	r3, [pc, #152]	; (8003994 <HAL_GPIO_Init+0x31c>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	43db      	mvns	r3, r3
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	4013      	ands	r3, r2
 8003906:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d003      	beq.n	800391c <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	4313      	orrs	r3, r2
 800391a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800391c:	4a1d      	ldr	r2, [pc, #116]	; (8003994 <HAL_GPIO_Init+0x31c>)
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003922:	4b1c      	ldr	r3, [pc, #112]	; (8003994 <HAL_GPIO_Init+0x31c>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	43db      	mvns	r3, r3
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	4013      	ands	r3, r2
 8003930:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	4313      	orrs	r3, r2
 8003944:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003946:	4a13      	ldr	r2, [pc, #76]	; (8003994 <HAL_GPIO_Init+0x31c>)
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	3301      	adds	r3, #1
 8003950:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	fa22 f303 	lsr.w	r3, r2, r3
 800395c:	2b00      	cmp	r3, #0
 800395e:	f47f ae97 	bne.w	8003690 <HAL_GPIO_Init+0x18>
  }
}
 8003962:	bf00      	nop
 8003964:	bf00      	nop
 8003966:	371c      	adds	r7, #28
 8003968:	46bd      	mov	sp, r7
 800396a:	bc80      	pop	{r7}
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	40023800 	.word	0x40023800
 8003974:	40010000 	.word	0x40010000
 8003978:	40020000 	.word	0x40020000
 800397c:	40020400 	.word	0x40020400
 8003980:	40020800 	.word	0x40020800
 8003984:	40020c00 	.word	0x40020c00
 8003988:	40021000 	.word	0x40021000
 800398c:	40021400 	.word	0x40021400
 8003990:	40021800 	.word	0x40021800
 8003994:	40010400 	.word	0x40010400

08003998 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	460b      	mov	r3, r1
 80039a2:	807b      	strh	r3, [r7, #2]
 80039a4:	4613      	mov	r3, r2
 80039a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039a8:	787b      	ldrb	r3, [r7, #1]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039ae:	887a      	ldrh	r2, [r7, #2]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80039b4:	e003      	b.n	80039be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80039b6:	887b      	ldrh	r3, [r7, #2]
 80039b8:	041a      	lsls	r2, r3, #16
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	619a      	str	r2, [r3, #24]
}
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bc80      	pop	{r7}
 80039c6:	4770      	bx	lr

080039c8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	460b      	mov	r3, r1
 80039d2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80039da:	887a      	ldrh	r2, [r7, #2]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	4013      	ands	r3, r2
 80039e0:	041a      	lsls	r2, r3, #16
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	43d9      	mvns	r1, r3
 80039e6:	887b      	ldrh	r3, [r7, #2]
 80039e8:	400b      	ands	r3, r1
 80039ea:	431a      	orrs	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	619a      	str	r2, [r3, #24]
}
 80039f0:	bf00      	nop
 80039f2:	3714      	adds	r7, #20
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bc80      	pop	{r7}
 80039f8:	4770      	bx	lr
	...

080039fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b088      	sub	sp, #32
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e31d      	b.n	800404a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a0e:	4b94      	ldr	r3, [pc, #592]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f003 030c 	and.w	r3, r3, #12
 8003a16:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a18:	4b91      	ldr	r3, [pc, #580]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a20:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d07b      	beq.n	8003b26 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	2b08      	cmp	r3, #8
 8003a32:	d006      	beq.n	8003a42 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	2b0c      	cmp	r3, #12
 8003a38:	d10f      	bne.n	8003a5a <HAL_RCC_OscConfig+0x5e>
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a40:	d10b      	bne.n	8003a5a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a42:	4b87      	ldr	r3, [pc, #540]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d06a      	beq.n	8003b24 <HAL_RCC_OscConfig+0x128>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d166      	bne.n	8003b24 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e2f7      	b.n	800404a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d106      	bne.n	8003a70 <HAL_RCC_OscConfig+0x74>
 8003a62:	4b7f      	ldr	r3, [pc, #508]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a7e      	ldr	r2, [pc, #504]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a6c:	6013      	str	r3, [r2, #0]
 8003a6e:	e02d      	b.n	8003acc <HAL_RCC_OscConfig+0xd0>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d10c      	bne.n	8003a92 <HAL_RCC_OscConfig+0x96>
 8003a78:	4b79      	ldr	r3, [pc, #484]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a78      	ldr	r2, [pc, #480]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003a7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a82:	6013      	str	r3, [r2, #0]
 8003a84:	4b76      	ldr	r3, [pc, #472]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a75      	ldr	r2, [pc, #468]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003a8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a8e:	6013      	str	r3, [r2, #0]
 8003a90:	e01c      	b.n	8003acc <HAL_RCC_OscConfig+0xd0>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2b05      	cmp	r3, #5
 8003a98:	d10c      	bne.n	8003ab4 <HAL_RCC_OscConfig+0xb8>
 8003a9a:	4b71      	ldr	r3, [pc, #452]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a70      	ldr	r2, [pc, #448]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003aa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003aa4:	6013      	str	r3, [r2, #0]
 8003aa6:	4b6e      	ldr	r3, [pc, #440]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a6d      	ldr	r2, [pc, #436]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab0:	6013      	str	r3, [r2, #0]
 8003ab2:	e00b      	b.n	8003acc <HAL_RCC_OscConfig+0xd0>
 8003ab4:	4b6a      	ldr	r3, [pc, #424]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a69      	ldr	r2, [pc, #420]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003aba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003abe:	6013      	str	r3, [r2, #0]
 8003ac0:	4b67      	ldr	r3, [pc, #412]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a66      	ldr	r2, [pc, #408]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003ac6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d013      	beq.n	8003afc <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad4:	f7ff f8e0 	bl	8002c98 <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003adc:	f7ff f8dc 	bl	8002c98 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b64      	cmp	r3, #100	; 0x64
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e2ad      	b.n	800404a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003aee:	4b5c      	ldr	r3, [pc, #368]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d0f0      	beq.n	8003adc <HAL_RCC_OscConfig+0xe0>
 8003afa:	e014      	b.n	8003b26 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003afc:	f7ff f8cc 	bl	8002c98 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b04:	f7ff f8c8 	bl	8002c98 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b64      	cmp	r3, #100	; 0x64
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e299      	b.n	800404a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b16:	4b52      	ldr	r3, [pc, #328]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1f0      	bne.n	8003b04 <HAL_RCC_OscConfig+0x108>
 8003b22:	e000      	b.n	8003b26 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d05a      	beq.n	8003be8 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	2b04      	cmp	r3, #4
 8003b36:	d005      	beq.n	8003b44 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	2b0c      	cmp	r3, #12
 8003b3c:	d119      	bne.n	8003b72 <HAL_RCC_OscConfig+0x176>
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d116      	bne.n	8003b72 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b44:	4b46      	ldr	r3, [pc, #280]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d005      	beq.n	8003b5c <HAL_RCC_OscConfig+0x160>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d001      	beq.n	8003b5c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e276      	b.n	800404a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b5c:	4b40      	ldr	r3, [pc, #256]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	021b      	lsls	r3, r3, #8
 8003b6a:	493d      	ldr	r1, [pc, #244]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b70:	e03a      	b.n	8003be8 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d020      	beq.n	8003bbc <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b7a:	4b3a      	ldr	r3, [pc, #232]	; (8003c64 <HAL_RCC_OscConfig+0x268>)
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b80:	f7ff f88a 	bl	8002c98 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b88:	f7ff f886 	bl	8002c98 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e257      	b.n	800404a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b9a:	4b31      	ldr	r3, [pc, #196]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0f0      	beq.n	8003b88 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba6:	4b2e      	ldr	r3, [pc, #184]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	021b      	lsls	r3, r3, #8
 8003bb4:	492a      	ldr	r1, [pc, #168]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	604b      	str	r3, [r1, #4]
 8003bba:	e015      	b.n	8003be8 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bbc:	4b29      	ldr	r3, [pc, #164]	; (8003c64 <HAL_RCC_OscConfig+0x268>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc2:	f7ff f869 	bl	8002c98 <HAL_GetTick>
 8003bc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003bc8:	e008      	b.n	8003bdc <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bca:	f7ff f865 	bl	8002c98 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e236      	b.n	800404a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003bdc:	4b20      	ldr	r3, [pc, #128]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1f0      	bne.n	8003bca <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0310 	and.w	r3, r3, #16
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 80b8 	beq.w	8003d66 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d170      	bne.n	8003cde <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003bfc:	4b18      	ldr	r3, [pc, #96]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d005      	beq.n	8003c14 <HAL_RCC_OscConfig+0x218>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d101      	bne.n	8003c14 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e21a      	b.n	800404a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a1a      	ldr	r2, [r3, #32]
 8003c18:	4b11      	ldr	r3, [pc, #68]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d921      	bls.n	8003c68 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f000 fc7d 	bl	8004528 <RCC_SetFlashLatencyFromMSIRange>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e208      	b.n	800404a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c38:	4b09      	ldr	r3, [pc, #36]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	4906      	ldr	r1, [pc, #24]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c4a:	4b05      	ldr	r3, [pc, #20]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	061b      	lsls	r3, r3, #24
 8003c58:	4901      	ldr	r1, [pc, #4]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	604b      	str	r3, [r1, #4]
 8003c5e:	e020      	b.n	8003ca2 <HAL_RCC_OscConfig+0x2a6>
 8003c60:	40023800 	.word	0x40023800
 8003c64:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c68:	4b99      	ldr	r3, [pc, #612]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a1b      	ldr	r3, [r3, #32]
 8003c74:	4996      	ldr	r1, [pc, #600]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c7a:	4b95      	ldr	r3, [pc, #596]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	69db      	ldr	r3, [r3, #28]
 8003c86:	061b      	lsls	r3, r3, #24
 8003c88:	4991      	ldr	r1, [pc, #580]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 fc48 	bl	8004528 <RCC_SetFlashLatencyFromMSIRange>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e1d3      	b.n	800404a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	0b5b      	lsrs	r3, r3, #13
 8003ca8:	3301      	adds	r3, #1
 8003caa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003cae:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003cb2:	4a87      	ldr	r2, [pc, #540]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003cb4:	6892      	ldr	r2, [r2, #8]
 8003cb6:	0912      	lsrs	r2, r2, #4
 8003cb8:	f002 020f 	and.w	r2, r2, #15
 8003cbc:	4985      	ldr	r1, [pc, #532]	; (8003ed4 <HAL_RCC_OscConfig+0x4d8>)
 8003cbe:	5c8a      	ldrb	r2, [r1, r2]
 8003cc0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003cc2:	4a85      	ldr	r2, [pc, #532]	; (8003ed8 <HAL_RCC_OscConfig+0x4dc>)
 8003cc4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003cc6:	4b85      	ldr	r3, [pc, #532]	; (8003edc <HAL_RCC_OscConfig+0x4e0>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7fe ff98 	bl	8002c00 <HAL_InitTick>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003cd4:	7bfb      	ldrb	r3, [r7, #15]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d045      	beq.n	8003d66 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8003cda:	7bfb      	ldrb	r3, [r7, #15]
 8003cdc:	e1b5      	b.n	800404a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d029      	beq.n	8003d3a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003ce6:	4b7e      	ldr	r3, [pc, #504]	; (8003ee0 <HAL_RCC_OscConfig+0x4e4>)
 8003ce8:	2201      	movs	r2, #1
 8003cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cec:	f7fe ffd4 	bl	8002c98 <HAL_GetTick>
 8003cf0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003cf2:	e008      	b.n	8003d06 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cf4:	f7fe ffd0 	bl	8002c98 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e1a1      	b.n	800404a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003d06:	4b72      	ldr	r3, [pc, #456]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d0f0      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d12:	4b6f      	ldr	r3, [pc, #444]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	496c      	ldr	r1, [pc, #432]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d24:	4b6a      	ldr	r3, [pc, #424]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	69db      	ldr	r3, [r3, #28]
 8003d30:	061b      	lsls	r3, r3, #24
 8003d32:	4967      	ldr	r1, [pc, #412]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	604b      	str	r3, [r1, #4]
 8003d38:	e015      	b.n	8003d66 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d3a:	4b69      	ldr	r3, [pc, #420]	; (8003ee0 <HAL_RCC_OscConfig+0x4e4>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d40:	f7fe ffaa 	bl	8002c98 <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d48:	f7fe ffa6 	bl	8002c98 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e177      	b.n	800404a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003d5a:	4b5d      	ldr	r3, [pc, #372]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1f0      	bne.n	8003d48 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0308 	and.w	r3, r3, #8
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d030      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d016      	beq.n	8003da8 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d7a:	4b5a      	ldr	r3, [pc, #360]	; (8003ee4 <HAL_RCC_OscConfig+0x4e8>)
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d80:	f7fe ff8a 	bl	8002c98 <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d88:	f7fe ff86 	bl	8002c98 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e157      	b.n	800404a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d9a:	4b4d      	ldr	r3, [pc, #308]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d0f0      	beq.n	8003d88 <HAL_RCC_OscConfig+0x38c>
 8003da6:	e015      	b.n	8003dd4 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003da8:	4b4e      	ldr	r3, [pc, #312]	; (8003ee4 <HAL_RCC_OscConfig+0x4e8>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dae:	f7fe ff73 	bl	8002c98 <HAL_GetTick>
 8003db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003db4:	e008      	b.n	8003dc8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003db6:	f7fe ff6f 	bl	8002c98 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e140      	b.n	800404a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003dc8:	4b41      	ldr	r3, [pc, #260]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1f0      	bne.n	8003db6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 80b5 	beq.w	8003f4c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003de2:	2300      	movs	r3, #0
 8003de4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003de6:	4b3a      	ldr	r3, [pc, #232]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10d      	bne.n	8003e0e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003df2:	4b37      	ldr	r3, [pc, #220]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	4a36      	ldr	r2, [pc, #216]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dfc:	6253      	str	r3, [r2, #36]	; 0x24
 8003dfe:	4b34      	ldr	r3, [pc, #208]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e06:	60bb      	str	r3, [r7, #8]
 8003e08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e0e:	4b36      	ldr	r3, [pc, #216]	; (8003ee8 <HAL_RCC_OscConfig+0x4ec>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d118      	bne.n	8003e4c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e1a:	4b33      	ldr	r3, [pc, #204]	; (8003ee8 <HAL_RCC_OscConfig+0x4ec>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a32      	ldr	r2, [pc, #200]	; (8003ee8 <HAL_RCC_OscConfig+0x4ec>)
 8003e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e26:	f7fe ff37 	bl	8002c98 <HAL_GetTick>
 8003e2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e2c:	e008      	b.n	8003e40 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e2e:	f7fe ff33 	bl	8002c98 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	2b64      	cmp	r3, #100	; 0x64
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e104      	b.n	800404a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e40:	4b29      	ldr	r3, [pc, #164]	; (8003ee8 <HAL_RCC_OscConfig+0x4ec>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d0f0      	beq.n	8003e2e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d106      	bne.n	8003e62 <HAL_RCC_OscConfig+0x466>
 8003e54:	4b1e      	ldr	r3, [pc, #120]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e58:	4a1d      	ldr	r2, [pc, #116]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003e5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e5e:	6353      	str	r3, [r2, #52]	; 0x34
 8003e60:	e02d      	b.n	8003ebe <HAL_RCC_OscConfig+0x4c2>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10c      	bne.n	8003e84 <HAL_RCC_OscConfig+0x488>
 8003e6a:	4b19      	ldr	r3, [pc, #100]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e6e:	4a18      	ldr	r2, [pc, #96]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003e70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e74:	6353      	str	r3, [r2, #52]	; 0x34
 8003e76:	4b16      	ldr	r3, [pc, #88]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e7a:	4a15      	ldr	r2, [pc, #84]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003e7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e80:	6353      	str	r3, [r2, #52]	; 0x34
 8003e82:	e01c      	b.n	8003ebe <HAL_RCC_OscConfig+0x4c2>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	2b05      	cmp	r3, #5
 8003e8a:	d10c      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x4aa>
 8003e8c:	4b10      	ldr	r3, [pc, #64]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e90:	4a0f      	ldr	r2, [pc, #60]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003e92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e96:	6353      	str	r3, [r2, #52]	; 0x34
 8003e98:	4b0d      	ldr	r3, [pc, #52]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e9c:	4a0c      	ldr	r2, [pc, #48]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ea2:	6353      	str	r3, [r2, #52]	; 0x34
 8003ea4:	e00b      	b.n	8003ebe <HAL_RCC_OscConfig+0x4c2>
 8003ea6:	4b0a      	ldr	r3, [pc, #40]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eaa:	4a09      	ldr	r2, [pc, #36]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003eac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003eb0:	6353      	str	r3, [r2, #52]	; 0x34
 8003eb2:	4b07      	ldr	r3, [pc, #28]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb6:	4a06      	ldr	r2, [pc, #24]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003eb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ebc:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d024      	beq.n	8003f10 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ec6:	f7fe fee7 	bl	8002c98 <HAL_GetTick>
 8003eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ecc:	e019      	b.n	8003f02 <HAL_RCC_OscConfig+0x506>
 8003ece:	bf00      	nop
 8003ed0:	40023800 	.word	0x40023800
 8003ed4:	08006af0 	.word	0x08006af0
 8003ed8:	20000530 	.word	0x20000530
 8003edc:	20000534 	.word	0x20000534
 8003ee0:	42470020 	.word	0x42470020
 8003ee4:	42470680 	.word	0x42470680
 8003ee8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eec:	f7fe fed4 	bl	8002c98 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e0a3      	b.n	800404a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f02:	4b54      	ldr	r3, [pc, #336]	; (8004054 <HAL_RCC_OscConfig+0x658>)
 8003f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d0ee      	beq.n	8003eec <HAL_RCC_OscConfig+0x4f0>
 8003f0e:	e014      	b.n	8003f3a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f10:	f7fe fec2 	bl	8002c98 <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f16:	e00a      	b.n	8003f2e <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f18:	f7fe febe 	bl	8002c98 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e08d      	b.n	800404a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f2e:	4b49      	ldr	r3, [pc, #292]	; (8004054 <HAL_RCC_OscConfig+0x658>)
 8003f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1ee      	bne.n	8003f18 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f3a:	7ffb      	ldrb	r3, [r7, #31]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d105      	bne.n	8003f4c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f40:	4b44      	ldr	r3, [pc, #272]	; (8004054 <HAL_RCC_OscConfig+0x658>)
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	4a43      	ldr	r2, [pc, #268]	; (8004054 <HAL_RCC_OscConfig+0x658>)
 8003f46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f4a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d079      	beq.n	8004048 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	2b0c      	cmp	r3, #12
 8003f58:	d056      	beq.n	8004008 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d13b      	bne.n	8003fda <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f62:	4b3d      	ldr	r3, [pc, #244]	; (8004058 <HAL_RCC_OscConfig+0x65c>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f68:	f7fe fe96 	bl	8002c98 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f70:	f7fe fe92 	bl	8002c98 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e063      	b.n	800404a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f82:	4b34      	ldr	r3, [pc, #208]	; (8004054 <HAL_RCC_OscConfig+0x658>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1f0      	bne.n	8003f70 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f8e:	4b31      	ldr	r3, [pc, #196]	; (8004054 <HAL_RCC_OscConfig+0x658>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9e:	4319      	orrs	r1, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa4:	430b      	orrs	r3, r1
 8003fa6:	492b      	ldr	r1, [pc, #172]	; (8004054 <HAL_RCC_OscConfig+0x658>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fac:	4b2a      	ldr	r3, [pc, #168]	; (8004058 <HAL_RCC_OscConfig+0x65c>)
 8003fae:	2201      	movs	r2, #1
 8003fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb2:	f7fe fe71 	bl	8002c98 <HAL_GetTick>
 8003fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fb8:	e008      	b.n	8003fcc <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fba:	f7fe fe6d 	bl	8002c98 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d901      	bls.n	8003fcc <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e03e      	b.n	800404a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fcc:	4b21      	ldr	r3, [pc, #132]	; (8004054 <HAL_RCC_OscConfig+0x658>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d0f0      	beq.n	8003fba <HAL_RCC_OscConfig+0x5be>
 8003fd8:	e036      	b.n	8004048 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fda:	4b1f      	ldr	r3, [pc, #124]	; (8004058 <HAL_RCC_OscConfig+0x65c>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe0:	f7fe fe5a 	bl	8002c98 <HAL_GetTick>
 8003fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fe6:	e008      	b.n	8003ffa <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fe8:	f7fe fe56 	bl	8002c98 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e027      	b.n	800404a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ffa:	4b16      	ldr	r3, [pc, #88]	; (8004054 <HAL_RCC_OscConfig+0x658>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1f0      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x5ec>
 8004006:	e01f      	b.n	8004048 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	2b01      	cmp	r3, #1
 800400e:	d101      	bne.n	8004014 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e01a      	b.n	800404a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004014:	4b0f      	ldr	r3, [pc, #60]	; (8004054 <HAL_RCC_OscConfig+0x658>)
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004024:	429a      	cmp	r2, r3
 8004026:	d10d      	bne.n	8004044 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004032:	429a      	cmp	r2, r3
 8004034:	d106      	bne.n	8004044 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004040:	429a      	cmp	r2, r3
 8004042:	d001      	beq.n	8004048 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e000      	b.n	800404a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3720      	adds	r7, #32
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	40023800 	.word	0x40023800
 8004058:	42470060 	.word	0x42470060

0800405c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e11a      	b.n	80042a6 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004070:	4b8f      	ldr	r3, [pc, #572]	; (80042b0 <HAL_RCC_ClockConfig+0x254>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0301 	and.w	r3, r3, #1
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	429a      	cmp	r2, r3
 800407c:	d919      	bls.n	80040b2 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d105      	bne.n	8004090 <HAL_RCC_ClockConfig+0x34>
 8004084:	4b8a      	ldr	r3, [pc, #552]	; (80042b0 <HAL_RCC_ClockConfig+0x254>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a89      	ldr	r2, [pc, #548]	; (80042b0 <HAL_RCC_ClockConfig+0x254>)
 800408a:	f043 0304 	orr.w	r3, r3, #4
 800408e:	6013      	str	r3, [r2, #0]
 8004090:	4b87      	ldr	r3, [pc, #540]	; (80042b0 <HAL_RCC_ClockConfig+0x254>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f023 0201 	bic.w	r2, r3, #1
 8004098:	4985      	ldr	r1, [pc, #532]	; (80042b0 <HAL_RCC_ClockConfig+0x254>)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	4313      	orrs	r3, r2
 800409e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040a0:	4b83      	ldr	r3, [pc, #524]	; (80042b0 <HAL_RCC_ClockConfig+0x254>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d001      	beq.n	80040b2 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e0f9      	b.n	80042a6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d008      	beq.n	80040d0 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040be:	4b7d      	ldr	r3, [pc, #500]	; (80042b4 <HAL_RCC_ClockConfig+0x258>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	497a      	ldr	r1, [pc, #488]	; (80042b4 <HAL_RCC_ClockConfig+0x258>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0301 	and.w	r3, r3, #1
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f000 808e 	beq.w	80041fa <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d107      	bne.n	80040f6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040e6:	4b73      	ldr	r3, [pc, #460]	; (80042b4 <HAL_RCC_ClockConfig+0x258>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d121      	bne.n	8004136 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e0d7      	b.n	80042a6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	2b03      	cmp	r3, #3
 80040fc:	d107      	bne.n	800410e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040fe:	4b6d      	ldr	r3, [pc, #436]	; (80042b4 <HAL_RCC_ClockConfig+0x258>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d115      	bne.n	8004136 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e0cb      	b.n	80042a6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d107      	bne.n	8004126 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004116:	4b67      	ldr	r3, [pc, #412]	; (80042b4 <HAL_RCC_ClockConfig+0x258>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d109      	bne.n	8004136 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e0bf      	b.n	80042a6 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004126:	4b63      	ldr	r3, [pc, #396]	; (80042b4 <HAL_RCC_ClockConfig+0x258>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800412e:	2b00      	cmp	r3, #0
 8004130:	d101      	bne.n	8004136 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e0b7      	b.n	80042a6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004136:	4b5f      	ldr	r3, [pc, #380]	; (80042b4 <HAL_RCC_ClockConfig+0x258>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f023 0203 	bic.w	r2, r3, #3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	495c      	ldr	r1, [pc, #368]	; (80042b4 <HAL_RCC_ClockConfig+0x258>)
 8004144:	4313      	orrs	r3, r2
 8004146:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004148:	f7fe fda6 	bl	8002c98 <HAL_GetTick>
 800414c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2b02      	cmp	r3, #2
 8004154:	d112      	bne.n	800417c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004156:	e00a      	b.n	800416e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004158:	f7fe fd9e 	bl	8002c98 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	f241 3288 	movw	r2, #5000	; 0x1388
 8004166:	4293      	cmp	r3, r2
 8004168:	d901      	bls.n	800416e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e09b      	b.n	80042a6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800416e:	4b51      	ldr	r3, [pc, #324]	; (80042b4 <HAL_RCC_ClockConfig+0x258>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f003 030c 	and.w	r3, r3, #12
 8004176:	2b08      	cmp	r3, #8
 8004178:	d1ee      	bne.n	8004158 <HAL_RCC_ClockConfig+0xfc>
 800417a:	e03e      	b.n	80041fa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	2b03      	cmp	r3, #3
 8004182:	d112      	bne.n	80041aa <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004184:	e00a      	b.n	800419c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004186:	f7fe fd87 	bl	8002c98 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	f241 3288 	movw	r2, #5000	; 0x1388
 8004194:	4293      	cmp	r3, r2
 8004196:	d901      	bls.n	800419c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e084      	b.n	80042a6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800419c:	4b45      	ldr	r3, [pc, #276]	; (80042b4 <HAL_RCC_ClockConfig+0x258>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f003 030c 	and.w	r3, r3, #12
 80041a4:	2b0c      	cmp	r3, #12
 80041a6:	d1ee      	bne.n	8004186 <HAL_RCC_ClockConfig+0x12a>
 80041a8:	e027      	b.n	80041fa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d11d      	bne.n	80041ee <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80041b2:	e00a      	b.n	80041ca <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041b4:	f7fe fd70 	bl	8002c98 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e06d      	b.n	80042a6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80041ca:	4b3a      	ldr	r3, [pc, #232]	; (80042b4 <HAL_RCC_ClockConfig+0x258>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 030c 	and.w	r3, r3, #12
 80041d2:	2b04      	cmp	r3, #4
 80041d4:	d1ee      	bne.n	80041b4 <HAL_RCC_ClockConfig+0x158>
 80041d6:	e010      	b.n	80041fa <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041d8:	f7fe fd5e 	bl	8002c98 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e05b      	b.n	80042a6 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80041ee:	4b31      	ldr	r3, [pc, #196]	; (80042b4 <HAL_RCC_ClockConfig+0x258>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f003 030c 	and.w	r3, r3, #12
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1ee      	bne.n	80041d8 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041fa:	4b2d      	ldr	r3, [pc, #180]	; (80042b0 <HAL_RCC_ClockConfig+0x254>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	683a      	ldr	r2, [r7, #0]
 8004204:	429a      	cmp	r2, r3
 8004206:	d219      	bcs.n	800423c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d105      	bne.n	800421a <HAL_RCC_ClockConfig+0x1be>
 800420e:	4b28      	ldr	r3, [pc, #160]	; (80042b0 <HAL_RCC_ClockConfig+0x254>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a27      	ldr	r2, [pc, #156]	; (80042b0 <HAL_RCC_ClockConfig+0x254>)
 8004214:	f043 0304 	orr.w	r3, r3, #4
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	4b25      	ldr	r3, [pc, #148]	; (80042b0 <HAL_RCC_ClockConfig+0x254>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f023 0201 	bic.w	r2, r3, #1
 8004222:	4923      	ldr	r1, [pc, #140]	; (80042b0 <HAL_RCC_ClockConfig+0x254>)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	4313      	orrs	r3, r2
 8004228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800422a:	4b21      	ldr	r3, [pc, #132]	; (80042b0 <HAL_RCC_ClockConfig+0x254>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	429a      	cmp	r2, r3
 8004236:	d001      	beq.n	800423c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e034      	b.n	80042a6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b00      	cmp	r3, #0
 8004246:	d008      	beq.n	800425a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004248:	4b1a      	ldr	r3, [pc, #104]	; (80042b4 <HAL_RCC_ClockConfig+0x258>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	4917      	ldr	r1, [pc, #92]	; (80042b4 <HAL_RCC_ClockConfig+0x258>)
 8004256:	4313      	orrs	r3, r2
 8004258:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0308 	and.w	r3, r3, #8
 8004262:	2b00      	cmp	r3, #0
 8004264:	d009      	beq.n	800427a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004266:	4b13      	ldr	r3, [pc, #76]	; (80042b4 <HAL_RCC_ClockConfig+0x258>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	490f      	ldr	r1, [pc, #60]	; (80042b4 <HAL_RCC_ClockConfig+0x258>)
 8004276:	4313      	orrs	r3, r2
 8004278:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800427a:	f000 f823 	bl	80042c4 <HAL_RCC_GetSysClockFreq>
 800427e:	4602      	mov	r2, r0
 8004280:	4b0c      	ldr	r3, [pc, #48]	; (80042b4 <HAL_RCC_ClockConfig+0x258>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	091b      	lsrs	r3, r3, #4
 8004286:	f003 030f 	and.w	r3, r3, #15
 800428a:	490b      	ldr	r1, [pc, #44]	; (80042b8 <HAL_RCC_ClockConfig+0x25c>)
 800428c:	5ccb      	ldrb	r3, [r1, r3]
 800428e:	fa22 f303 	lsr.w	r3, r2, r3
 8004292:	4a0a      	ldr	r2, [pc, #40]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 8004294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004296:	4b0a      	ldr	r3, [pc, #40]	; (80042c0 <HAL_RCC_ClockConfig+0x264>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4618      	mov	r0, r3
 800429c:	f7fe fcb0 	bl	8002c00 <HAL_InitTick>
 80042a0:	4603      	mov	r3, r0
 80042a2:	72fb      	strb	r3, [r7, #11]

  return status;
 80042a4:	7afb      	ldrb	r3, [r7, #11]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	40023c00 	.word	0x40023c00
 80042b4:	40023800 	.word	0x40023800
 80042b8:	08006af0 	.word	0x08006af0
 80042bc:	20000530 	.word	0x20000530
 80042c0:	20000534 	.word	0x20000534

080042c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042c8:	b092      	sub	sp, #72	; 0x48
 80042ca:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80042cc:	4b79      	ldr	r3, [pc, #484]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80042d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042d4:	f003 030c 	and.w	r3, r3, #12
 80042d8:	2b0c      	cmp	r3, #12
 80042da:	d00d      	beq.n	80042f8 <HAL_RCC_GetSysClockFreq+0x34>
 80042dc:	2b0c      	cmp	r3, #12
 80042de:	f200 80d5 	bhi.w	800448c <HAL_RCC_GetSysClockFreq+0x1c8>
 80042e2:	2b04      	cmp	r3, #4
 80042e4:	d002      	beq.n	80042ec <HAL_RCC_GetSysClockFreq+0x28>
 80042e6:	2b08      	cmp	r3, #8
 80042e8:	d003      	beq.n	80042f2 <HAL_RCC_GetSysClockFreq+0x2e>
 80042ea:	e0cf      	b.n	800448c <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042ec:	4b72      	ldr	r3, [pc, #456]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80042ee:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80042f0:	e0da      	b.n	80044a8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80042f2:	4b72      	ldr	r3, [pc, #456]	; (80044bc <HAL_RCC_GetSysClockFreq+0x1f8>)
 80042f4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80042f6:	e0d7      	b.n	80044a8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80042f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042fa:	0c9b      	lsrs	r3, r3, #18
 80042fc:	f003 020f 	and.w	r2, r3, #15
 8004300:	4b6f      	ldr	r3, [pc, #444]	; (80044c0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004302:	5c9b      	ldrb	r3, [r3, r2]
 8004304:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004308:	0d9b      	lsrs	r3, r3, #22
 800430a:	f003 0303 	and.w	r3, r3, #3
 800430e:	3301      	adds	r3, #1
 8004310:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004312:	4b68      	ldr	r3, [pc, #416]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d05d      	beq.n	80043da <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800431e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004320:	2200      	movs	r2, #0
 8004322:	4618      	mov	r0, r3
 8004324:	4611      	mov	r1, r2
 8004326:	4604      	mov	r4, r0
 8004328:	460d      	mov	r5, r1
 800432a:	4622      	mov	r2, r4
 800432c:	462b      	mov	r3, r5
 800432e:	f04f 0000 	mov.w	r0, #0
 8004332:	f04f 0100 	mov.w	r1, #0
 8004336:	0159      	lsls	r1, r3, #5
 8004338:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800433c:	0150      	lsls	r0, r2, #5
 800433e:	4602      	mov	r2, r0
 8004340:	460b      	mov	r3, r1
 8004342:	4621      	mov	r1, r4
 8004344:	1a51      	subs	r1, r2, r1
 8004346:	6139      	str	r1, [r7, #16]
 8004348:	4629      	mov	r1, r5
 800434a:	eb63 0301 	sbc.w	r3, r3, r1
 800434e:	617b      	str	r3, [r7, #20]
 8004350:	f04f 0200 	mov.w	r2, #0
 8004354:	f04f 0300 	mov.w	r3, #0
 8004358:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800435c:	4659      	mov	r1, fp
 800435e:	018b      	lsls	r3, r1, #6
 8004360:	4651      	mov	r1, sl
 8004362:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004366:	4651      	mov	r1, sl
 8004368:	018a      	lsls	r2, r1, #6
 800436a:	46d4      	mov	ip, sl
 800436c:	ebb2 080c 	subs.w	r8, r2, ip
 8004370:	4659      	mov	r1, fp
 8004372:	eb63 0901 	sbc.w	r9, r3, r1
 8004376:	f04f 0200 	mov.w	r2, #0
 800437a:	f04f 0300 	mov.w	r3, #0
 800437e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004382:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004386:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800438a:	4690      	mov	r8, r2
 800438c:	4699      	mov	r9, r3
 800438e:	4623      	mov	r3, r4
 8004390:	eb18 0303 	adds.w	r3, r8, r3
 8004394:	60bb      	str	r3, [r7, #8]
 8004396:	462b      	mov	r3, r5
 8004398:	eb49 0303 	adc.w	r3, r9, r3
 800439c:	60fb      	str	r3, [r7, #12]
 800439e:	f04f 0200 	mov.w	r2, #0
 80043a2:	f04f 0300 	mov.w	r3, #0
 80043a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80043aa:	4629      	mov	r1, r5
 80043ac:	024b      	lsls	r3, r1, #9
 80043ae:	4620      	mov	r0, r4
 80043b0:	4629      	mov	r1, r5
 80043b2:	4604      	mov	r4, r0
 80043b4:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80043b8:	4601      	mov	r1, r0
 80043ba:	024a      	lsls	r2, r1, #9
 80043bc:	4610      	mov	r0, r2
 80043be:	4619      	mov	r1, r3
 80043c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043c2:	2200      	movs	r2, #0
 80043c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80043c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043cc:	f7fb fee8 	bl	80001a0 <__aeabi_uldivmod>
 80043d0:	4602      	mov	r2, r0
 80043d2:	460b      	mov	r3, r1
 80043d4:	4613      	mov	r3, r2
 80043d6:	647b      	str	r3, [r7, #68]	; 0x44
 80043d8:	e055      	b.n	8004486 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80043da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043dc:	2200      	movs	r2, #0
 80043de:	623b      	str	r3, [r7, #32]
 80043e0:	627a      	str	r2, [r7, #36]	; 0x24
 80043e2:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043e6:	4642      	mov	r2, r8
 80043e8:	464b      	mov	r3, r9
 80043ea:	f04f 0000 	mov.w	r0, #0
 80043ee:	f04f 0100 	mov.w	r1, #0
 80043f2:	0159      	lsls	r1, r3, #5
 80043f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043f8:	0150      	lsls	r0, r2, #5
 80043fa:	4602      	mov	r2, r0
 80043fc:	460b      	mov	r3, r1
 80043fe:	46c4      	mov	ip, r8
 8004400:	ebb2 0a0c 	subs.w	sl, r2, ip
 8004404:	4640      	mov	r0, r8
 8004406:	4649      	mov	r1, r9
 8004408:	468c      	mov	ip, r1
 800440a:	eb63 0b0c 	sbc.w	fp, r3, ip
 800440e:	f04f 0200 	mov.w	r2, #0
 8004412:	f04f 0300 	mov.w	r3, #0
 8004416:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800441a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800441e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004422:	ebb2 040a 	subs.w	r4, r2, sl
 8004426:	eb63 050b 	sbc.w	r5, r3, fp
 800442a:	f04f 0200 	mov.w	r2, #0
 800442e:	f04f 0300 	mov.w	r3, #0
 8004432:	00eb      	lsls	r3, r5, #3
 8004434:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004438:	00e2      	lsls	r2, r4, #3
 800443a:	4614      	mov	r4, r2
 800443c:	461d      	mov	r5, r3
 800443e:	4603      	mov	r3, r0
 8004440:	18e3      	adds	r3, r4, r3
 8004442:	603b      	str	r3, [r7, #0]
 8004444:	460b      	mov	r3, r1
 8004446:	eb45 0303 	adc.w	r3, r5, r3
 800444a:	607b      	str	r3, [r7, #4]
 800444c:	f04f 0200 	mov.w	r2, #0
 8004450:	f04f 0300 	mov.w	r3, #0
 8004454:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004458:	4629      	mov	r1, r5
 800445a:	028b      	lsls	r3, r1, #10
 800445c:	4620      	mov	r0, r4
 800445e:	4629      	mov	r1, r5
 8004460:	4604      	mov	r4, r0
 8004462:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8004466:	4601      	mov	r1, r0
 8004468:	028a      	lsls	r2, r1, #10
 800446a:	4610      	mov	r0, r2
 800446c:	4619      	mov	r1, r3
 800446e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004470:	2200      	movs	r2, #0
 8004472:	61bb      	str	r3, [r7, #24]
 8004474:	61fa      	str	r2, [r7, #28]
 8004476:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800447a:	f7fb fe91 	bl	80001a0 <__aeabi_uldivmod>
 800447e:	4602      	mov	r2, r0
 8004480:	460b      	mov	r3, r1
 8004482:	4613      	mov	r3, r2
 8004484:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8004486:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004488:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800448a:	e00d      	b.n	80044a8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800448c:	4b09      	ldr	r3, [pc, #36]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	0b5b      	lsrs	r3, r3, #13
 8004492:	f003 0307 	and.w	r3, r3, #7
 8004496:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449a:	3301      	adds	r3, #1
 800449c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80044a0:	fa02 f303 	lsl.w	r3, r2, r3
 80044a4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80044a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3748      	adds	r7, #72	; 0x48
 80044ae:	46bd      	mov	sp, r7
 80044b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044b4:	40023800 	.word	0x40023800
 80044b8:	00f42400 	.word	0x00f42400
 80044bc:	007a1200 	.word	0x007a1200
 80044c0:	08006ae4 	.word	0x08006ae4

080044c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044c4:	b480      	push	{r7}
 80044c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044c8:	4b02      	ldr	r3, [pc, #8]	; (80044d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80044ca:	681b      	ldr	r3, [r3, #0]
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bc80      	pop	{r7}
 80044d2:	4770      	bx	lr
 80044d4:	20000530 	.word	0x20000530

080044d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044dc:	f7ff fff2 	bl	80044c4 <HAL_RCC_GetHCLKFreq>
 80044e0:	4602      	mov	r2, r0
 80044e2:	4b05      	ldr	r3, [pc, #20]	; (80044f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	0a1b      	lsrs	r3, r3, #8
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	4903      	ldr	r1, [pc, #12]	; (80044fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80044ee:	5ccb      	ldrb	r3, [r1, r3]
 80044f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	40023800 	.word	0x40023800
 80044fc:	08006b00 	.word	0x08006b00

08004500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004504:	f7ff ffde 	bl	80044c4 <HAL_RCC_GetHCLKFreq>
 8004508:	4602      	mov	r2, r0
 800450a:	4b05      	ldr	r3, [pc, #20]	; (8004520 <HAL_RCC_GetPCLK2Freq+0x20>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	0adb      	lsrs	r3, r3, #11
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	4903      	ldr	r1, [pc, #12]	; (8004524 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004516:	5ccb      	ldrb	r3, [r1, r3]
 8004518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800451c:	4618      	mov	r0, r3
 800451e:	bd80      	pop	{r7, pc}
 8004520:	40023800 	.word	0x40023800
 8004524:	08006b00 	.word	0x08006b00

08004528 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004528:	b480      	push	{r7}
 800452a:	b087      	sub	sp, #28
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004530:	2300      	movs	r3, #0
 8004532:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004534:	4b29      	ldr	r3, [pc, #164]	; (80045dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d12c      	bne.n	800459a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004540:	4b26      	ldr	r3, [pc, #152]	; (80045dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d005      	beq.n	8004558 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800454c:	4b24      	ldr	r3, [pc, #144]	; (80045e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004554:	617b      	str	r3, [r7, #20]
 8004556:	e016      	b.n	8004586 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004558:	4b20      	ldr	r3, [pc, #128]	; (80045dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800455a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455c:	4a1f      	ldr	r2, [pc, #124]	; (80045dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800455e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004562:	6253      	str	r3, [r2, #36]	; 0x24
 8004564:	4b1d      	ldr	r3, [pc, #116]	; (80045dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800456c:	60fb      	str	r3, [r7, #12]
 800456e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004570:	4b1b      	ldr	r3, [pc, #108]	; (80045e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004578:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800457a:	4b18      	ldr	r3, [pc, #96]	; (80045dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800457c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457e:	4a17      	ldr	r2, [pc, #92]	; (80045dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004580:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004584:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800458c:	d105      	bne.n	800459a <RCC_SetFlashLatencyFromMSIRange+0x72>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004594:	d101      	bne.n	800459a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8004596:	2301      	movs	r3, #1
 8004598:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d105      	bne.n	80045ac <RCC_SetFlashLatencyFromMSIRange+0x84>
 80045a0:	4b10      	ldr	r3, [pc, #64]	; (80045e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a0f      	ldr	r2, [pc, #60]	; (80045e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045a6:	f043 0304 	orr.w	r3, r3, #4
 80045aa:	6013      	str	r3, [r2, #0]
 80045ac:	4b0d      	ldr	r3, [pc, #52]	; (80045e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f023 0201 	bic.w	r2, r3, #1
 80045b4:	490b      	ldr	r1, [pc, #44]	; (80045e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80045bc:	4b09      	ldr	r3, [pc, #36]	; (80045e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d001      	beq.n	80045ce <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e000      	b.n	80045d0 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	371c      	adds	r7, #28
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bc80      	pop	{r7}
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	40023800 	.word	0x40023800
 80045e0:	40007000 	.word	0x40007000
 80045e4:	40023c00 	.word	0x40023c00

080045e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e042      	b.n	8004680 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d106      	bne.n	8004614 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7fd ffcc 	bl	80025ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2224      	movs	r2, #36	; 0x24
 8004618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800462a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 fb89 	bl	8004d44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	691a      	ldr	r2, [r3, #16]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004640:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	695a      	ldr	r2, [r3, #20]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004650:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004660:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2220      	movs	r2, #32
 800466c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2220      	movs	r2, #32
 8004674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b08a      	sub	sp, #40	; 0x28
 800468c:	af02      	add	r7, sp, #8
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	603b      	str	r3, [r7, #0]
 8004694:	4613      	mov	r3, r2
 8004696:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004698:	2300      	movs	r3, #0
 800469a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2b20      	cmp	r3, #32
 80046a6:	d16d      	bne.n	8004784 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d002      	beq.n	80046b4 <HAL_UART_Transmit+0x2c>
 80046ae:	88fb      	ldrh	r3, [r7, #6]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d101      	bne.n	80046b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e066      	b.n	8004786 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2221      	movs	r2, #33	; 0x21
 80046c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046c6:	f7fe fae7 	bl	8002c98 <HAL_GetTick>
 80046ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	88fa      	ldrh	r2, [r7, #6]
 80046d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	88fa      	ldrh	r2, [r7, #6]
 80046d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046e0:	d108      	bne.n	80046f4 <HAL_UART_Transmit+0x6c>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d104      	bne.n	80046f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80046ea:	2300      	movs	r3, #0
 80046ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	61bb      	str	r3, [r7, #24]
 80046f2:	e003      	b.n	80046fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046f8:	2300      	movs	r3, #0
 80046fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80046fc:	e02a      	b.n	8004754 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	9300      	str	r3, [sp, #0]
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	2200      	movs	r2, #0
 8004706:	2180      	movs	r1, #128	; 0x80
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f000 f989 	bl	8004a20 <UART_WaitOnFlagUntilTimeout>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d001      	beq.n	8004718 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e036      	b.n	8004786 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10b      	bne.n	8004736 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	881b      	ldrh	r3, [r3, #0]
 8004722:	461a      	mov	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800472c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	3302      	adds	r3, #2
 8004732:	61bb      	str	r3, [r7, #24]
 8004734:	e007      	b.n	8004746 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	781a      	ldrb	r2, [r3, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	3301      	adds	r3, #1
 8004744:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800474a:	b29b      	uxth	r3, r3
 800474c:	3b01      	subs	r3, #1
 800474e:	b29a      	uxth	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004758:	b29b      	uxth	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1cf      	bne.n	80046fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	9300      	str	r3, [sp, #0]
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	2200      	movs	r2, #0
 8004766:	2140      	movs	r1, #64	; 0x40
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f000 f959 	bl	8004a20 <UART_WaitOnFlagUntilTimeout>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d001      	beq.n	8004778 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e006      	b.n	8004786 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2220      	movs	r2, #32
 800477c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004780:	2300      	movs	r3, #0
 8004782:	e000      	b.n	8004786 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004784:	2302      	movs	r3, #2
  }
}
 8004786:	4618      	mov	r0, r3
 8004788:	3720      	adds	r7, #32
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b084      	sub	sp, #16
 8004792:	af00      	add	r7, sp, #0
 8004794:	60f8      	str	r0, [r7, #12]
 8004796:	60b9      	str	r1, [r7, #8]
 8004798:	4613      	mov	r3, r2
 800479a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	2b20      	cmp	r3, #32
 80047a6:	d112      	bne.n	80047ce <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d002      	beq.n	80047b4 <HAL_UART_Receive_DMA+0x26>
 80047ae:	88fb      	ldrh	r3, [r7, #6]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e00b      	b.n	80047d0 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80047be:	88fb      	ldrh	r3, [r7, #6]
 80047c0:	461a      	mov	r2, r3
 80047c2:	68b9      	ldr	r1, [r7, #8]
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f000 f999 	bl	8004afc <UART_Start_Receive_DMA>
 80047ca:	4603      	mov	r3, r0
 80047cc:	e000      	b.n	80047d0 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80047ce:	2302      	movs	r3, #2
  }
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bc80      	pop	{r7}
 80047e8:	4770      	bx	lr

080047ea <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80047ea:	b480      	push	{r7}
 80047ec:	b083      	sub	sp, #12
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80047f2:	bf00      	nop
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bc80      	pop	{r7}
 80047fa:	4770      	bx	lr

080047fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	bc80      	pop	{r7}
 800480c:	4770      	bx	lr

0800480e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800480e:	b480      	push	{r7}
 8004810:	b083      	sub	sp, #12
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
 8004816:	460b      	mov	r3, r1
 8004818:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800481a:	bf00      	nop
 800481c:	370c      	adds	r7, #12
 800481e:	46bd      	mov	sp, r7
 8004820:	bc80      	pop	{r7}
 8004822:	4770      	bx	lr

08004824 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b09c      	sub	sp, #112	; 0x70
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004830:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0320 	and.w	r3, r3, #32
 800483c:	2b00      	cmp	r3, #0
 800483e:	d172      	bne.n	8004926 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004842:	2200      	movs	r2, #0
 8004844:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	330c      	adds	r3, #12
 800484c:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004850:	e853 3f00 	ldrex	r3, [r3]
 8004854:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004856:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004858:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800485c:	66bb      	str	r3, [r7, #104]	; 0x68
 800485e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	330c      	adds	r3, #12
 8004864:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004866:	65ba      	str	r2, [r7, #88]	; 0x58
 8004868:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800486c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800486e:	e841 2300 	strex	r3, r2, [r1]
 8004872:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1e5      	bne.n	8004846 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800487a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	3314      	adds	r3, #20
 8004880:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004884:	e853 3f00 	ldrex	r3, [r3]
 8004888:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800488a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800488c:	f023 0301 	bic.w	r3, r3, #1
 8004890:	667b      	str	r3, [r7, #100]	; 0x64
 8004892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	3314      	adds	r3, #20
 8004898:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800489a:	647a      	str	r2, [r7, #68]	; 0x44
 800489c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048a2:	e841 2300 	strex	r3, r2, [r1]
 80048a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80048a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1e5      	bne.n	800487a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	3314      	adds	r3, #20
 80048b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b8:	e853 3f00 	ldrex	r3, [r3]
 80048bc:	623b      	str	r3, [r7, #32]
   return(result);
 80048be:	6a3b      	ldr	r3, [r7, #32]
 80048c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048c4:	663b      	str	r3, [r7, #96]	; 0x60
 80048c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	3314      	adds	r3, #20
 80048cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80048ce:	633a      	str	r2, [r7, #48]	; 0x30
 80048d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048d6:	e841 2300 	strex	r3, r2, [r1]
 80048da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1e5      	bne.n	80048ae <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80048e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048e4:	2220      	movs	r2, #32
 80048e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d119      	bne.n	8004926 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	330c      	adds	r3, #12
 80048f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	e853 3f00 	ldrex	r3, [r3]
 8004900:	60fb      	str	r3, [r7, #12]
   return(result);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f023 0310 	bic.w	r3, r3, #16
 8004908:	65fb      	str	r3, [r7, #92]	; 0x5c
 800490a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	330c      	adds	r3, #12
 8004910:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004912:	61fa      	str	r2, [r7, #28]
 8004914:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004916:	69b9      	ldr	r1, [r7, #24]
 8004918:	69fa      	ldr	r2, [r7, #28]
 800491a:	e841 2300 	strex	r3, r2, [r1]
 800491e:	617b      	str	r3, [r7, #20]
   return(result);
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1e5      	bne.n	80048f2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004928:	2200      	movs	r2, #0
 800492a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800492c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800492e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004930:	2b01      	cmp	r3, #1
 8004932:	d106      	bne.n	8004942 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004936:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004938:	4619      	mov	r1, r3
 800493a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800493c:	f7ff ff67 	bl	800480e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004940:	e002      	b.n	8004948 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004942:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004944:	f7ff ff48 	bl	80047d8 <HAL_UART_RxCpltCallback>
}
 8004948:	bf00      	nop
 800494a:	3770      	adds	r7, #112	; 0x70
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2201      	movs	r2, #1
 8004962:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004968:	2b01      	cmp	r3, #1
 800496a:	d108      	bne.n	800497e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004970:	085b      	lsrs	r3, r3, #1
 8004972:	b29b      	uxth	r3, r3
 8004974:	4619      	mov	r1, r3
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f7ff ff49 	bl	800480e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800497c:	e002      	b.n	8004984 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f7ff ff33 	bl	80047ea <HAL_UART_RxHalfCpltCallback>
}
 8004984:	bf00      	nop
 8004986:	3710      	adds	r7, #16
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004994:	2300      	movs	r3, #0
 8004996:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	695b      	ldr	r3, [r3, #20]
 80049a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a8:	2b80      	cmp	r3, #128	; 0x80
 80049aa:	bf0c      	ite	eq
 80049ac:	2301      	moveq	r3, #1
 80049ae:	2300      	movne	r3, #0
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b21      	cmp	r3, #33	; 0x21
 80049be:	d108      	bne.n	80049d2 <UART_DMAError+0x46>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d005      	beq.n	80049d2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	2200      	movs	r2, #0
 80049ca:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80049cc:	68b8      	ldr	r0, [r7, #8]
 80049ce:	f000 f92f 	bl	8004c30 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049dc:	2b40      	cmp	r3, #64	; 0x40
 80049de:	bf0c      	ite	eq
 80049e0:	2301      	moveq	r3, #1
 80049e2:	2300      	movne	r3, #0
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	2b22      	cmp	r3, #34	; 0x22
 80049f2:	d108      	bne.n	8004a06 <UART_DMAError+0x7a>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d005      	beq.n	8004a06 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	2200      	movs	r2, #0
 80049fe:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004a00:	68b8      	ldr	r0, [r7, #8]
 8004a02:	f000 f93c 	bl	8004c7e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a0a:	f043 0210 	orr.w	r2, r3, #16
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a12:	68b8      	ldr	r0, [r7, #8]
 8004a14:	f7ff fef2 	bl	80047fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a18:	bf00      	nop
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b090      	sub	sp, #64	; 0x40
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	603b      	str	r3, [r7, #0]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a30:	e050      	b.n	8004ad4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a38:	d04c      	beq.n	8004ad4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d007      	beq.n	8004a50 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a40:	f7fe f92a 	bl	8002c98 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d241      	bcs.n	8004ad4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	330c      	adds	r3, #12
 8004a56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5a:	e853 3f00 	ldrex	r3, [r3]
 8004a5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a62:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	330c      	adds	r3, #12
 8004a6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a70:	637a      	str	r2, [r7, #52]	; 0x34
 8004a72:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a78:	e841 2300 	strex	r3, r2, [r1]
 8004a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1e5      	bne.n	8004a50 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	3314      	adds	r3, #20
 8004a8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	e853 3f00 	ldrex	r3, [r3]
 8004a92:	613b      	str	r3, [r7, #16]
   return(result);
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	f023 0301 	bic.w	r3, r3, #1
 8004a9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	3314      	adds	r3, #20
 8004aa2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004aa4:	623a      	str	r2, [r7, #32]
 8004aa6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa8:	69f9      	ldr	r1, [r7, #28]
 8004aaa:	6a3a      	ldr	r2, [r7, #32]
 8004aac:	e841 2300 	strex	r3, r2, [r1]
 8004ab0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1e5      	bne.n	8004a84 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2220      	movs	r2, #32
 8004abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e00f      	b.n	8004af4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	4013      	ands	r3, r2
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	bf0c      	ite	eq
 8004ae4:	2301      	moveq	r3, #1
 8004ae6:	2300      	movne	r3, #0
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	461a      	mov	r2, r3
 8004aec:	79fb      	ldrb	r3, [r7, #7]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d09f      	beq.n	8004a32 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3740      	adds	r7, #64	; 0x40
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b098      	sub	sp, #96	; 0x60
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	4613      	mov	r3, r2
 8004b08:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	88fa      	ldrh	r2, [r7, #6]
 8004b14:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2222      	movs	r2, #34	; 0x22
 8004b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b28:	4a3e      	ldr	r2, [pc, #248]	; (8004c24 <UART_Start_Receive_DMA+0x128>)
 8004b2a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b30:	4a3d      	ldr	r2, [pc, #244]	; (8004c28 <UART_Start_Receive_DMA+0x12c>)
 8004b32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b38:	4a3c      	ldr	r2, [pc, #240]	; (8004c2c <UART_Start_Receive_DMA+0x130>)
 8004b3a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b40:	2200      	movs	r2, #0
 8004b42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004b44:	f107 0308 	add.w	r3, r7, #8
 8004b48:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	3304      	adds	r3, #4
 8004b54:	4619      	mov	r1, r3
 8004b56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	88fb      	ldrh	r3, [r7, #6]
 8004b5c:	f7fe fcfc 	bl	8003558 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004b60:	2300      	movs	r3, #0
 8004b62:	613b      	str	r3, [r7, #16]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	613b      	str	r3, [r7, #16]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	613b      	str	r3, [r7, #16]
 8004b74:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d019      	beq.n	8004bb2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	330c      	adds	r3, #12
 8004b84:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b88:	e853 3f00 	ldrex	r3, [r3]
 8004b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b94:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	330c      	adds	r3, #12
 8004b9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b9e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004ba0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004ba4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ba6:	e841 2300 	strex	r3, r2, [r1]
 8004baa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004bac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1e5      	bne.n	8004b7e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	3314      	adds	r3, #20
 8004bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bbc:	e853 3f00 	ldrex	r3, [r3]
 8004bc0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc4:	f043 0301 	orr.w	r3, r3, #1
 8004bc8:	657b      	str	r3, [r7, #84]	; 0x54
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	3314      	adds	r3, #20
 8004bd0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004bd2:	63ba      	str	r2, [r7, #56]	; 0x38
 8004bd4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004bd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bda:	e841 2300 	strex	r3, r2, [r1]
 8004bde:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1e5      	bne.n	8004bb2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	3314      	adds	r3, #20
 8004bec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	e853 3f00 	ldrex	r3, [r3]
 8004bf4:	617b      	str	r3, [r7, #20]
   return(result);
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bfc:	653b      	str	r3, [r7, #80]	; 0x50
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	3314      	adds	r3, #20
 8004c04:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004c06:	627a      	str	r2, [r7, #36]	; 0x24
 8004c08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0a:	6a39      	ldr	r1, [r7, #32]
 8004c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c0e:	e841 2300 	strex	r3, r2, [r1]
 8004c12:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1e5      	bne.n	8004be6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3760      	adds	r7, #96	; 0x60
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	08004825 	.word	0x08004825
 8004c28:	08004951 	.word	0x08004951
 8004c2c:	0800498d 	.word	0x0800498d

08004c30 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b089      	sub	sp, #36	; 0x24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	330c      	adds	r3, #12
 8004c3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	e853 3f00 	ldrex	r3, [r3]
 8004c46:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004c4e:	61fb      	str	r3, [r7, #28]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	330c      	adds	r3, #12
 8004c56:	69fa      	ldr	r2, [r7, #28]
 8004c58:	61ba      	str	r2, [r7, #24]
 8004c5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5c:	6979      	ldr	r1, [r7, #20]
 8004c5e:	69ba      	ldr	r2, [r7, #24]
 8004c60:	e841 2300 	strex	r3, r2, [r1]
 8004c64:	613b      	str	r3, [r7, #16]
   return(result);
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1e5      	bne.n	8004c38 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2220      	movs	r2, #32
 8004c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8004c74:	bf00      	nop
 8004c76:	3724      	adds	r7, #36	; 0x24
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bc80      	pop	{r7}
 8004c7c:	4770      	bx	lr

08004c7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b095      	sub	sp, #84	; 0x54
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	330c      	adds	r3, #12
 8004c8c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c90:	e853 3f00 	ldrex	r3, [r3]
 8004c94:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	330c      	adds	r3, #12
 8004ca4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ca6:	643a      	str	r2, [r7, #64]	; 0x40
 8004ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004caa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004cac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004cae:	e841 2300 	strex	r3, r2, [r1]
 8004cb2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d1e5      	bne.n	8004c86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	3314      	adds	r3, #20
 8004cc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc2:	6a3b      	ldr	r3, [r7, #32]
 8004cc4:	e853 3f00 	ldrex	r3, [r3]
 8004cc8:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	f023 0301 	bic.w	r3, r3, #1
 8004cd0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	3314      	adds	r3, #20
 8004cd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cdc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ce0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ce2:	e841 2300 	strex	r3, r2, [r1]
 8004ce6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1e5      	bne.n	8004cba <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d119      	bne.n	8004d2a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	330c      	adds	r3, #12
 8004cfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	e853 3f00 	ldrex	r3, [r3]
 8004d04:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	f023 0310 	bic.w	r3, r3, #16
 8004d0c:	647b      	str	r3, [r7, #68]	; 0x44
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	330c      	adds	r3, #12
 8004d14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d16:	61ba      	str	r2, [r7, #24]
 8004d18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1a:	6979      	ldr	r1, [r7, #20]
 8004d1c:	69ba      	ldr	r2, [r7, #24]
 8004d1e:	e841 2300 	strex	r3, r2, [r1]
 8004d22:	613b      	str	r3, [r7, #16]
   return(result);
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1e5      	bne.n	8004cf6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2220      	movs	r2, #32
 8004d2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004d38:	bf00      	nop
 8004d3a:	3754      	adds	r7, #84	; 0x54
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bc80      	pop	{r7}
 8004d40:	4770      	bx	lr
	...

08004d44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68da      	ldr	r2, [r3, #12]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	689a      	ldr	r2, [r3, #8]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	431a      	orrs	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	695b      	ldr	r3, [r3, #20]
 8004d70:	431a      	orrs	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	69db      	ldr	r3, [r3, #28]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004d84:	f023 030c 	bic.w	r3, r3, #12
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	6812      	ldr	r2, [r2, #0]
 8004d8c:	68b9      	ldr	r1, [r7, #8]
 8004d8e:	430b      	orrs	r3, r1
 8004d90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	699a      	ldr	r2, [r3, #24]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a55      	ldr	r2, [pc, #340]	; (8004f04 <UART_SetConfig+0x1c0>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d103      	bne.n	8004dba <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004db2:	f7ff fba5 	bl	8004500 <HAL_RCC_GetPCLK2Freq>
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	e002      	b.n	8004dc0 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004dba:	f7ff fb8d 	bl	80044d8 <HAL_RCC_GetPCLK1Freq>
 8004dbe:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	69db      	ldr	r3, [r3, #28]
 8004dc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dc8:	d14c      	bne.n	8004e64 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4413      	add	r3, r2
 8004dd2:	009a      	lsls	r2, r3, #2
 8004dd4:	441a      	add	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	005b      	lsls	r3, r3, #1
 8004ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de0:	4a49      	ldr	r2, [pc, #292]	; (8004f08 <UART_SetConfig+0x1c4>)
 8004de2:	fba2 2303 	umull	r2, r3, r2, r3
 8004de6:	095b      	lsrs	r3, r3, #5
 8004de8:	0119      	lsls	r1, r3, #4
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	4613      	mov	r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	4413      	add	r3, r2
 8004df2:	009a      	lsls	r2, r3, #2
 8004df4:	441a      	add	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	005b      	lsls	r3, r3, #1
 8004dfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e00:	4b41      	ldr	r3, [pc, #260]	; (8004f08 <UART_SetConfig+0x1c4>)
 8004e02:	fba3 0302 	umull	r0, r3, r3, r2
 8004e06:	095b      	lsrs	r3, r3, #5
 8004e08:	2064      	movs	r0, #100	; 0x64
 8004e0a:	fb00 f303 	mul.w	r3, r0, r3
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	00db      	lsls	r3, r3, #3
 8004e12:	3332      	adds	r3, #50	; 0x32
 8004e14:	4a3c      	ldr	r2, [pc, #240]	; (8004f08 <UART_SetConfig+0x1c4>)
 8004e16:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1a:	095b      	lsrs	r3, r3, #5
 8004e1c:	005b      	lsls	r3, r3, #1
 8004e1e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e22:	4419      	add	r1, r3
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	4613      	mov	r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	4413      	add	r3, r2
 8004e2c:	009a      	lsls	r2, r3, #2
 8004e2e:	441a      	add	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	005b      	lsls	r3, r3, #1
 8004e36:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e3a:	4b33      	ldr	r3, [pc, #204]	; (8004f08 <UART_SetConfig+0x1c4>)
 8004e3c:	fba3 0302 	umull	r0, r3, r3, r2
 8004e40:	095b      	lsrs	r3, r3, #5
 8004e42:	2064      	movs	r0, #100	; 0x64
 8004e44:	fb00 f303 	mul.w	r3, r0, r3
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	00db      	lsls	r3, r3, #3
 8004e4c:	3332      	adds	r3, #50	; 0x32
 8004e4e:	4a2e      	ldr	r2, [pc, #184]	; (8004f08 <UART_SetConfig+0x1c4>)
 8004e50:	fba2 2303 	umull	r2, r3, r2, r3
 8004e54:	095b      	lsrs	r3, r3, #5
 8004e56:	f003 0207 	and.w	r2, r3, #7
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	440a      	add	r2, r1
 8004e60:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e62:	e04a      	b.n	8004efa <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	4613      	mov	r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	4413      	add	r3, r2
 8004e6c:	009a      	lsls	r2, r3, #2
 8004e6e:	441a      	add	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e7a:	4a23      	ldr	r2, [pc, #140]	; (8004f08 <UART_SetConfig+0x1c4>)
 8004e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e80:	095b      	lsrs	r3, r3, #5
 8004e82:	0119      	lsls	r1, r3, #4
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	4613      	mov	r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	4413      	add	r3, r2
 8004e8c:	009a      	lsls	r2, r3, #2
 8004e8e:	441a      	add	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e9a:	4b1b      	ldr	r3, [pc, #108]	; (8004f08 <UART_SetConfig+0x1c4>)
 8004e9c:	fba3 0302 	umull	r0, r3, r3, r2
 8004ea0:	095b      	lsrs	r3, r3, #5
 8004ea2:	2064      	movs	r0, #100	; 0x64
 8004ea4:	fb00 f303 	mul.w	r3, r0, r3
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	011b      	lsls	r3, r3, #4
 8004eac:	3332      	adds	r3, #50	; 0x32
 8004eae:	4a16      	ldr	r2, [pc, #88]	; (8004f08 <UART_SetConfig+0x1c4>)
 8004eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb4:	095b      	lsrs	r3, r3, #5
 8004eb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004eba:	4419      	add	r1, r3
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4413      	add	r3, r2
 8004ec4:	009a      	lsls	r2, r3, #2
 8004ec6:	441a      	add	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ed2:	4b0d      	ldr	r3, [pc, #52]	; (8004f08 <UART_SetConfig+0x1c4>)
 8004ed4:	fba3 0302 	umull	r0, r3, r3, r2
 8004ed8:	095b      	lsrs	r3, r3, #5
 8004eda:	2064      	movs	r0, #100	; 0x64
 8004edc:	fb00 f303 	mul.w	r3, r0, r3
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	011b      	lsls	r3, r3, #4
 8004ee4:	3332      	adds	r3, #50	; 0x32
 8004ee6:	4a08      	ldr	r2, [pc, #32]	; (8004f08 <UART_SetConfig+0x1c4>)
 8004ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8004eec:	095b      	lsrs	r3, r3, #5
 8004eee:	f003 020f 	and.w	r2, r3, #15
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	440a      	add	r2, r1
 8004ef8:	609a      	str	r2, [r3, #8]
}
 8004efa:	bf00      	nop
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	40013800 	.word	0x40013800
 8004f08:	51eb851f 	.word	0x51eb851f

08004f0c <atoi>:
 8004f0c:	220a      	movs	r2, #10
 8004f0e:	2100      	movs	r1, #0
 8004f10:	f000 b9f0 	b.w	80052f4 <strtol>

08004f14 <__errno>:
 8004f14:	4b01      	ldr	r3, [pc, #4]	; (8004f1c <__errno+0x8>)
 8004f16:	6818      	ldr	r0, [r3, #0]
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	2000053c 	.word	0x2000053c

08004f20 <__libc_init_array>:
 8004f20:	b570      	push	{r4, r5, r6, lr}
 8004f22:	2600      	movs	r6, #0
 8004f24:	4d0c      	ldr	r5, [pc, #48]	; (8004f58 <__libc_init_array+0x38>)
 8004f26:	4c0d      	ldr	r4, [pc, #52]	; (8004f5c <__libc_init_array+0x3c>)
 8004f28:	1b64      	subs	r4, r4, r5
 8004f2a:	10a4      	asrs	r4, r4, #2
 8004f2c:	42a6      	cmp	r6, r4
 8004f2e:	d109      	bne.n	8004f44 <__libc_init_array+0x24>
 8004f30:	f001 fa60 	bl	80063f4 <_init>
 8004f34:	2600      	movs	r6, #0
 8004f36:	4d0a      	ldr	r5, [pc, #40]	; (8004f60 <__libc_init_array+0x40>)
 8004f38:	4c0a      	ldr	r4, [pc, #40]	; (8004f64 <__libc_init_array+0x44>)
 8004f3a:	1b64      	subs	r4, r4, r5
 8004f3c:	10a4      	asrs	r4, r4, #2
 8004f3e:	42a6      	cmp	r6, r4
 8004f40:	d105      	bne.n	8004f4e <__libc_init_array+0x2e>
 8004f42:	bd70      	pop	{r4, r5, r6, pc}
 8004f44:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f48:	4798      	blx	r3
 8004f4a:	3601      	adds	r6, #1
 8004f4c:	e7ee      	b.n	8004f2c <__libc_init_array+0xc>
 8004f4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f52:	4798      	blx	r3
 8004f54:	3601      	adds	r6, #1
 8004f56:	e7f2      	b.n	8004f3e <__libc_init_array+0x1e>
 8004f58:	08006d7c 	.word	0x08006d7c
 8004f5c:	08006d7c 	.word	0x08006d7c
 8004f60:	08006d7c 	.word	0x08006d7c
 8004f64:	08006d80 	.word	0x08006d80

08004f68 <__itoa>:
 8004f68:	1e93      	subs	r3, r2, #2
 8004f6a:	2b22      	cmp	r3, #34	; 0x22
 8004f6c:	b510      	push	{r4, lr}
 8004f6e:	460c      	mov	r4, r1
 8004f70:	d904      	bls.n	8004f7c <__itoa+0x14>
 8004f72:	2300      	movs	r3, #0
 8004f74:	461c      	mov	r4, r3
 8004f76:	700b      	strb	r3, [r1, #0]
 8004f78:	4620      	mov	r0, r4
 8004f7a:	bd10      	pop	{r4, pc}
 8004f7c:	2a0a      	cmp	r2, #10
 8004f7e:	d109      	bne.n	8004f94 <__itoa+0x2c>
 8004f80:	2800      	cmp	r0, #0
 8004f82:	da07      	bge.n	8004f94 <__itoa+0x2c>
 8004f84:	232d      	movs	r3, #45	; 0x2d
 8004f86:	700b      	strb	r3, [r1, #0]
 8004f88:	2101      	movs	r1, #1
 8004f8a:	4240      	negs	r0, r0
 8004f8c:	4421      	add	r1, r4
 8004f8e:	f000 f9d5 	bl	800533c <__utoa>
 8004f92:	e7f1      	b.n	8004f78 <__itoa+0x10>
 8004f94:	2100      	movs	r1, #0
 8004f96:	e7f9      	b.n	8004f8c <__itoa+0x24>

08004f98 <itoa>:
 8004f98:	f7ff bfe6 	b.w	8004f68 <__itoa>

08004f9c <memset>:
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	4402      	add	r2, r0
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d100      	bne.n	8004fa6 <memset+0xa>
 8004fa4:	4770      	bx	lr
 8004fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8004faa:	e7f9      	b.n	8004fa0 <memset+0x4>

08004fac <iprintf>:
 8004fac:	b40f      	push	{r0, r1, r2, r3}
 8004fae:	4b0a      	ldr	r3, [pc, #40]	; (8004fd8 <iprintf+0x2c>)
 8004fb0:	b513      	push	{r0, r1, r4, lr}
 8004fb2:	681c      	ldr	r4, [r3, #0]
 8004fb4:	b124      	cbz	r4, 8004fc0 <iprintf+0x14>
 8004fb6:	69a3      	ldr	r3, [r4, #24]
 8004fb8:	b913      	cbnz	r3, 8004fc0 <iprintf+0x14>
 8004fba:	4620      	mov	r0, r4
 8004fbc:	f000 fbf4 	bl	80057a8 <__sinit>
 8004fc0:	ab05      	add	r3, sp, #20
 8004fc2:	4620      	mov	r0, r4
 8004fc4:	9a04      	ldr	r2, [sp, #16]
 8004fc6:	68a1      	ldr	r1, [r4, #8]
 8004fc8:	9301      	str	r3, [sp, #4]
 8004fca:	f000 fe23 	bl	8005c14 <_vfiprintf_r>
 8004fce:	b002      	add	sp, #8
 8004fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fd4:	b004      	add	sp, #16
 8004fd6:	4770      	bx	lr
 8004fd8:	2000053c 	.word	0x2000053c

08004fdc <_puts_r>:
 8004fdc:	b570      	push	{r4, r5, r6, lr}
 8004fde:	460e      	mov	r6, r1
 8004fe0:	4605      	mov	r5, r0
 8004fe2:	b118      	cbz	r0, 8004fec <_puts_r+0x10>
 8004fe4:	6983      	ldr	r3, [r0, #24]
 8004fe6:	b90b      	cbnz	r3, 8004fec <_puts_r+0x10>
 8004fe8:	f000 fbde 	bl	80057a8 <__sinit>
 8004fec:	69ab      	ldr	r3, [r5, #24]
 8004fee:	68ac      	ldr	r4, [r5, #8]
 8004ff0:	b913      	cbnz	r3, 8004ff8 <_puts_r+0x1c>
 8004ff2:	4628      	mov	r0, r5
 8004ff4:	f000 fbd8 	bl	80057a8 <__sinit>
 8004ff8:	4b2c      	ldr	r3, [pc, #176]	; (80050ac <_puts_r+0xd0>)
 8004ffa:	429c      	cmp	r4, r3
 8004ffc:	d120      	bne.n	8005040 <_puts_r+0x64>
 8004ffe:	686c      	ldr	r4, [r5, #4]
 8005000:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005002:	07db      	lsls	r3, r3, #31
 8005004:	d405      	bmi.n	8005012 <_puts_r+0x36>
 8005006:	89a3      	ldrh	r3, [r4, #12]
 8005008:	0598      	lsls	r0, r3, #22
 800500a:	d402      	bmi.n	8005012 <_puts_r+0x36>
 800500c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800500e:	f000 fc8e 	bl	800592e <__retarget_lock_acquire_recursive>
 8005012:	89a3      	ldrh	r3, [r4, #12]
 8005014:	0719      	lsls	r1, r3, #28
 8005016:	d51d      	bpl.n	8005054 <_puts_r+0x78>
 8005018:	6923      	ldr	r3, [r4, #16]
 800501a:	b1db      	cbz	r3, 8005054 <_puts_r+0x78>
 800501c:	3e01      	subs	r6, #1
 800501e:	68a3      	ldr	r3, [r4, #8]
 8005020:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005024:	3b01      	subs	r3, #1
 8005026:	60a3      	str	r3, [r4, #8]
 8005028:	bb39      	cbnz	r1, 800507a <_puts_r+0x9e>
 800502a:	2b00      	cmp	r3, #0
 800502c:	da38      	bge.n	80050a0 <_puts_r+0xc4>
 800502e:	4622      	mov	r2, r4
 8005030:	210a      	movs	r1, #10
 8005032:	4628      	mov	r0, r5
 8005034:	f000 f9c4 	bl	80053c0 <__swbuf_r>
 8005038:	3001      	adds	r0, #1
 800503a:	d011      	beq.n	8005060 <_puts_r+0x84>
 800503c:	250a      	movs	r5, #10
 800503e:	e011      	b.n	8005064 <_puts_r+0x88>
 8005040:	4b1b      	ldr	r3, [pc, #108]	; (80050b0 <_puts_r+0xd4>)
 8005042:	429c      	cmp	r4, r3
 8005044:	d101      	bne.n	800504a <_puts_r+0x6e>
 8005046:	68ac      	ldr	r4, [r5, #8]
 8005048:	e7da      	b.n	8005000 <_puts_r+0x24>
 800504a:	4b1a      	ldr	r3, [pc, #104]	; (80050b4 <_puts_r+0xd8>)
 800504c:	429c      	cmp	r4, r3
 800504e:	bf08      	it	eq
 8005050:	68ec      	ldreq	r4, [r5, #12]
 8005052:	e7d5      	b.n	8005000 <_puts_r+0x24>
 8005054:	4621      	mov	r1, r4
 8005056:	4628      	mov	r0, r5
 8005058:	f000 fa04 	bl	8005464 <__swsetup_r>
 800505c:	2800      	cmp	r0, #0
 800505e:	d0dd      	beq.n	800501c <_puts_r+0x40>
 8005060:	f04f 35ff 	mov.w	r5, #4294967295
 8005064:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005066:	07da      	lsls	r2, r3, #31
 8005068:	d405      	bmi.n	8005076 <_puts_r+0x9a>
 800506a:	89a3      	ldrh	r3, [r4, #12]
 800506c:	059b      	lsls	r3, r3, #22
 800506e:	d402      	bmi.n	8005076 <_puts_r+0x9a>
 8005070:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005072:	f000 fc5d 	bl	8005930 <__retarget_lock_release_recursive>
 8005076:	4628      	mov	r0, r5
 8005078:	bd70      	pop	{r4, r5, r6, pc}
 800507a:	2b00      	cmp	r3, #0
 800507c:	da04      	bge.n	8005088 <_puts_r+0xac>
 800507e:	69a2      	ldr	r2, [r4, #24]
 8005080:	429a      	cmp	r2, r3
 8005082:	dc06      	bgt.n	8005092 <_puts_r+0xb6>
 8005084:	290a      	cmp	r1, #10
 8005086:	d004      	beq.n	8005092 <_puts_r+0xb6>
 8005088:	6823      	ldr	r3, [r4, #0]
 800508a:	1c5a      	adds	r2, r3, #1
 800508c:	6022      	str	r2, [r4, #0]
 800508e:	7019      	strb	r1, [r3, #0]
 8005090:	e7c5      	b.n	800501e <_puts_r+0x42>
 8005092:	4622      	mov	r2, r4
 8005094:	4628      	mov	r0, r5
 8005096:	f000 f993 	bl	80053c0 <__swbuf_r>
 800509a:	3001      	adds	r0, #1
 800509c:	d1bf      	bne.n	800501e <_puts_r+0x42>
 800509e:	e7df      	b.n	8005060 <_puts_r+0x84>
 80050a0:	250a      	movs	r5, #10
 80050a2:	6823      	ldr	r3, [r4, #0]
 80050a4:	1c5a      	adds	r2, r3, #1
 80050a6:	6022      	str	r2, [r4, #0]
 80050a8:	701d      	strb	r5, [r3, #0]
 80050aa:	e7db      	b.n	8005064 <_puts_r+0x88>
 80050ac:	08006d00 	.word	0x08006d00
 80050b0:	08006d20 	.word	0x08006d20
 80050b4:	08006ce0 	.word	0x08006ce0

080050b8 <puts>:
 80050b8:	4b02      	ldr	r3, [pc, #8]	; (80050c4 <puts+0xc>)
 80050ba:	4601      	mov	r1, r0
 80050bc:	6818      	ldr	r0, [r3, #0]
 80050be:	f7ff bf8d 	b.w	8004fdc <_puts_r>
 80050c2:	bf00      	nop
 80050c4:	2000053c 	.word	0x2000053c

080050c8 <srand>:
 80050c8:	b538      	push	{r3, r4, r5, lr}
 80050ca:	4b10      	ldr	r3, [pc, #64]	; (800510c <srand+0x44>)
 80050cc:	4604      	mov	r4, r0
 80050ce:	681d      	ldr	r5, [r3, #0]
 80050d0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80050d2:	b9b3      	cbnz	r3, 8005102 <srand+0x3a>
 80050d4:	2018      	movs	r0, #24
 80050d6:	f000 fc91 	bl	80059fc <malloc>
 80050da:	4602      	mov	r2, r0
 80050dc:	63a8      	str	r0, [r5, #56]	; 0x38
 80050de:	b920      	cbnz	r0, 80050ea <srand+0x22>
 80050e0:	2142      	movs	r1, #66	; 0x42
 80050e2:	4b0b      	ldr	r3, [pc, #44]	; (8005110 <srand+0x48>)
 80050e4:	480b      	ldr	r0, [pc, #44]	; (8005114 <srand+0x4c>)
 80050e6:	f000 fa2b 	bl	8005540 <__assert_func>
 80050ea:	490b      	ldr	r1, [pc, #44]	; (8005118 <srand+0x50>)
 80050ec:	4b0b      	ldr	r3, [pc, #44]	; (800511c <srand+0x54>)
 80050ee:	e9c0 1300 	strd	r1, r3, [r0]
 80050f2:	4b0b      	ldr	r3, [pc, #44]	; (8005120 <srand+0x58>)
 80050f4:	2100      	movs	r1, #0
 80050f6:	6083      	str	r3, [r0, #8]
 80050f8:	230b      	movs	r3, #11
 80050fa:	8183      	strh	r3, [r0, #12]
 80050fc:	2001      	movs	r0, #1
 80050fe:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005102:	2200      	movs	r2, #0
 8005104:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005106:	611c      	str	r4, [r3, #16]
 8005108:	615a      	str	r2, [r3, #20]
 800510a:	bd38      	pop	{r3, r4, r5, pc}
 800510c:	2000053c 	.word	0x2000053c
 8005110:	08006b0c 	.word	0x08006b0c
 8005114:	08006b23 	.word	0x08006b23
 8005118:	abcd330e 	.word	0xabcd330e
 800511c:	e66d1234 	.word	0xe66d1234
 8005120:	0005deec 	.word	0x0005deec

08005124 <rand>:
 8005124:	4b16      	ldr	r3, [pc, #88]	; (8005180 <rand+0x5c>)
 8005126:	b510      	push	{r4, lr}
 8005128:	681c      	ldr	r4, [r3, #0]
 800512a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800512c:	b9b3      	cbnz	r3, 800515c <rand+0x38>
 800512e:	2018      	movs	r0, #24
 8005130:	f000 fc64 	bl	80059fc <malloc>
 8005134:	4602      	mov	r2, r0
 8005136:	63a0      	str	r0, [r4, #56]	; 0x38
 8005138:	b920      	cbnz	r0, 8005144 <rand+0x20>
 800513a:	214e      	movs	r1, #78	; 0x4e
 800513c:	4b11      	ldr	r3, [pc, #68]	; (8005184 <rand+0x60>)
 800513e:	4812      	ldr	r0, [pc, #72]	; (8005188 <rand+0x64>)
 8005140:	f000 f9fe 	bl	8005540 <__assert_func>
 8005144:	4911      	ldr	r1, [pc, #68]	; (800518c <rand+0x68>)
 8005146:	4b12      	ldr	r3, [pc, #72]	; (8005190 <rand+0x6c>)
 8005148:	e9c0 1300 	strd	r1, r3, [r0]
 800514c:	4b11      	ldr	r3, [pc, #68]	; (8005194 <rand+0x70>)
 800514e:	2100      	movs	r1, #0
 8005150:	6083      	str	r3, [r0, #8]
 8005152:	230b      	movs	r3, #11
 8005154:	8183      	strh	r3, [r0, #12]
 8005156:	2001      	movs	r0, #1
 8005158:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800515c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800515e:	4a0e      	ldr	r2, [pc, #56]	; (8005198 <rand+0x74>)
 8005160:	6920      	ldr	r0, [r4, #16]
 8005162:	6963      	ldr	r3, [r4, #20]
 8005164:	4342      	muls	r2, r0
 8005166:	490d      	ldr	r1, [pc, #52]	; (800519c <rand+0x78>)
 8005168:	fb01 2203 	mla	r2, r1, r3, r2
 800516c:	fba0 0101 	umull	r0, r1, r0, r1
 8005170:	1c43      	adds	r3, r0, #1
 8005172:	eb42 0001 	adc.w	r0, r2, r1
 8005176:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800517a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800517e:	bd10      	pop	{r4, pc}
 8005180:	2000053c 	.word	0x2000053c
 8005184:	08006b0c 	.word	0x08006b0c
 8005188:	08006b23 	.word	0x08006b23
 800518c:	abcd330e 	.word	0xabcd330e
 8005190:	e66d1234 	.word	0xe66d1234
 8005194:	0005deec 	.word	0x0005deec
 8005198:	5851f42d 	.word	0x5851f42d
 800519c:	4c957f2d 	.word	0x4c957f2d

080051a0 <strcat>:
 80051a0:	4602      	mov	r2, r0
 80051a2:	b510      	push	{r4, lr}
 80051a4:	7814      	ldrb	r4, [r2, #0]
 80051a6:	4613      	mov	r3, r2
 80051a8:	3201      	adds	r2, #1
 80051aa:	2c00      	cmp	r4, #0
 80051ac:	d1fa      	bne.n	80051a4 <strcat+0x4>
 80051ae:	3b01      	subs	r3, #1
 80051b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051b4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80051b8:	2a00      	cmp	r2, #0
 80051ba:	d1f9      	bne.n	80051b0 <strcat+0x10>
 80051bc:	bd10      	pop	{r4, pc}

080051be <strcpy>:
 80051be:	4603      	mov	r3, r0
 80051c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051c4:	f803 2b01 	strb.w	r2, [r3], #1
 80051c8:	2a00      	cmp	r2, #0
 80051ca:	d1f9      	bne.n	80051c0 <strcpy+0x2>
 80051cc:	4770      	bx	lr

080051ce <strstr>:
 80051ce:	780a      	ldrb	r2, [r1, #0]
 80051d0:	b570      	push	{r4, r5, r6, lr}
 80051d2:	b96a      	cbnz	r2, 80051f0 <strstr+0x22>
 80051d4:	bd70      	pop	{r4, r5, r6, pc}
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d109      	bne.n	80051ee <strstr+0x20>
 80051da:	460c      	mov	r4, r1
 80051dc:	4605      	mov	r5, r0
 80051de:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d0f6      	beq.n	80051d4 <strstr+0x6>
 80051e6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80051ea:	429e      	cmp	r6, r3
 80051ec:	d0f7      	beq.n	80051de <strstr+0x10>
 80051ee:	3001      	adds	r0, #1
 80051f0:	7803      	ldrb	r3, [r0, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1ef      	bne.n	80051d6 <strstr+0x8>
 80051f6:	4618      	mov	r0, r3
 80051f8:	e7ec      	b.n	80051d4 <strstr+0x6>
	...

080051fc <_strtol_l.constprop.0>:
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005202:	4680      	mov	r8, r0
 8005204:	d001      	beq.n	800520a <_strtol_l.constprop.0+0xe>
 8005206:	2b24      	cmp	r3, #36	; 0x24
 8005208:	d906      	bls.n	8005218 <_strtol_l.constprop.0+0x1c>
 800520a:	f7ff fe83 	bl	8004f14 <__errno>
 800520e:	2316      	movs	r3, #22
 8005210:	6003      	str	r3, [r0, #0]
 8005212:	2000      	movs	r0, #0
 8005214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005218:	460d      	mov	r5, r1
 800521a:	4f35      	ldr	r7, [pc, #212]	; (80052f0 <_strtol_l.constprop.0+0xf4>)
 800521c:	4628      	mov	r0, r5
 800521e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005222:	5de6      	ldrb	r6, [r4, r7]
 8005224:	f016 0608 	ands.w	r6, r6, #8
 8005228:	d1f8      	bne.n	800521c <_strtol_l.constprop.0+0x20>
 800522a:	2c2d      	cmp	r4, #45	; 0x2d
 800522c:	d12f      	bne.n	800528e <_strtol_l.constprop.0+0x92>
 800522e:	2601      	movs	r6, #1
 8005230:	782c      	ldrb	r4, [r5, #0]
 8005232:	1c85      	adds	r5, r0, #2
 8005234:	2b00      	cmp	r3, #0
 8005236:	d057      	beq.n	80052e8 <_strtol_l.constprop.0+0xec>
 8005238:	2b10      	cmp	r3, #16
 800523a:	d109      	bne.n	8005250 <_strtol_l.constprop.0+0x54>
 800523c:	2c30      	cmp	r4, #48	; 0x30
 800523e:	d107      	bne.n	8005250 <_strtol_l.constprop.0+0x54>
 8005240:	7828      	ldrb	r0, [r5, #0]
 8005242:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005246:	2858      	cmp	r0, #88	; 0x58
 8005248:	d149      	bne.n	80052de <_strtol_l.constprop.0+0xe2>
 800524a:	2310      	movs	r3, #16
 800524c:	786c      	ldrb	r4, [r5, #1]
 800524e:	3502      	adds	r5, #2
 8005250:	2700      	movs	r7, #0
 8005252:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8005256:	f10e 3eff 	add.w	lr, lr, #4294967295
 800525a:	fbbe f9f3 	udiv	r9, lr, r3
 800525e:	4638      	mov	r0, r7
 8005260:	fb03 ea19 	mls	sl, r3, r9, lr
 8005264:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005268:	f1bc 0f09 	cmp.w	ip, #9
 800526c:	d814      	bhi.n	8005298 <_strtol_l.constprop.0+0x9c>
 800526e:	4664      	mov	r4, ip
 8005270:	42a3      	cmp	r3, r4
 8005272:	dd22      	ble.n	80052ba <_strtol_l.constprop.0+0xbe>
 8005274:	2f00      	cmp	r7, #0
 8005276:	db1d      	blt.n	80052b4 <_strtol_l.constprop.0+0xb8>
 8005278:	4581      	cmp	r9, r0
 800527a:	d31b      	bcc.n	80052b4 <_strtol_l.constprop.0+0xb8>
 800527c:	d101      	bne.n	8005282 <_strtol_l.constprop.0+0x86>
 800527e:	45a2      	cmp	sl, r4
 8005280:	db18      	blt.n	80052b4 <_strtol_l.constprop.0+0xb8>
 8005282:	2701      	movs	r7, #1
 8005284:	fb00 4003 	mla	r0, r0, r3, r4
 8005288:	f815 4b01 	ldrb.w	r4, [r5], #1
 800528c:	e7ea      	b.n	8005264 <_strtol_l.constprop.0+0x68>
 800528e:	2c2b      	cmp	r4, #43	; 0x2b
 8005290:	bf04      	itt	eq
 8005292:	782c      	ldrbeq	r4, [r5, #0]
 8005294:	1c85      	addeq	r5, r0, #2
 8005296:	e7cd      	b.n	8005234 <_strtol_l.constprop.0+0x38>
 8005298:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800529c:	f1bc 0f19 	cmp.w	ip, #25
 80052a0:	d801      	bhi.n	80052a6 <_strtol_l.constprop.0+0xaa>
 80052a2:	3c37      	subs	r4, #55	; 0x37
 80052a4:	e7e4      	b.n	8005270 <_strtol_l.constprop.0+0x74>
 80052a6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80052aa:	f1bc 0f19 	cmp.w	ip, #25
 80052ae:	d804      	bhi.n	80052ba <_strtol_l.constprop.0+0xbe>
 80052b0:	3c57      	subs	r4, #87	; 0x57
 80052b2:	e7dd      	b.n	8005270 <_strtol_l.constprop.0+0x74>
 80052b4:	f04f 37ff 	mov.w	r7, #4294967295
 80052b8:	e7e6      	b.n	8005288 <_strtol_l.constprop.0+0x8c>
 80052ba:	2f00      	cmp	r7, #0
 80052bc:	da07      	bge.n	80052ce <_strtol_l.constprop.0+0xd2>
 80052be:	2322      	movs	r3, #34	; 0x22
 80052c0:	4670      	mov	r0, lr
 80052c2:	f8c8 3000 	str.w	r3, [r8]
 80052c6:	2a00      	cmp	r2, #0
 80052c8:	d0a4      	beq.n	8005214 <_strtol_l.constprop.0+0x18>
 80052ca:	1e69      	subs	r1, r5, #1
 80052cc:	e005      	b.n	80052da <_strtol_l.constprop.0+0xde>
 80052ce:	b106      	cbz	r6, 80052d2 <_strtol_l.constprop.0+0xd6>
 80052d0:	4240      	negs	r0, r0
 80052d2:	2a00      	cmp	r2, #0
 80052d4:	d09e      	beq.n	8005214 <_strtol_l.constprop.0+0x18>
 80052d6:	2f00      	cmp	r7, #0
 80052d8:	d1f7      	bne.n	80052ca <_strtol_l.constprop.0+0xce>
 80052da:	6011      	str	r1, [r2, #0]
 80052dc:	e79a      	b.n	8005214 <_strtol_l.constprop.0+0x18>
 80052de:	2430      	movs	r4, #48	; 0x30
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1b5      	bne.n	8005250 <_strtol_l.constprop.0+0x54>
 80052e4:	2308      	movs	r3, #8
 80052e6:	e7b3      	b.n	8005250 <_strtol_l.constprop.0+0x54>
 80052e8:	2c30      	cmp	r4, #48	; 0x30
 80052ea:	d0a9      	beq.n	8005240 <_strtol_l.constprop.0+0x44>
 80052ec:	230a      	movs	r3, #10
 80052ee:	e7af      	b.n	8005250 <_strtol_l.constprop.0+0x54>
 80052f0:	08006be0 	.word	0x08006be0

080052f4 <strtol>:
 80052f4:	4613      	mov	r3, r2
 80052f6:	460a      	mov	r2, r1
 80052f8:	4601      	mov	r1, r0
 80052fa:	4802      	ldr	r0, [pc, #8]	; (8005304 <strtol+0x10>)
 80052fc:	6800      	ldr	r0, [r0, #0]
 80052fe:	f7ff bf7d 	b.w	80051fc <_strtol_l.constprop.0>
 8005302:	bf00      	nop
 8005304:	2000053c 	.word	0x2000053c

08005308 <time>:
 8005308:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800530a:	4b0b      	ldr	r3, [pc, #44]	; (8005338 <time+0x30>)
 800530c:	4604      	mov	r4, r0
 800530e:	2200      	movs	r2, #0
 8005310:	4669      	mov	r1, sp
 8005312:	6818      	ldr	r0, [r3, #0]
 8005314:	f000 faf8 	bl	8005908 <_gettimeofday_r>
 8005318:	2800      	cmp	r0, #0
 800531a:	da05      	bge.n	8005328 <time+0x20>
 800531c:	f04f 32ff 	mov.w	r2, #4294967295
 8005320:	f04f 33ff 	mov.w	r3, #4294967295
 8005324:	e9cd 2300 	strd	r2, r3, [sp]
 8005328:	e9dd 0100 	ldrd	r0, r1, [sp]
 800532c:	b10c      	cbz	r4, 8005332 <time+0x2a>
 800532e:	e9c4 0100 	strd	r0, r1, [r4]
 8005332:	b004      	add	sp, #16
 8005334:	bd10      	pop	{r4, pc}
 8005336:	bf00      	nop
 8005338:	2000053c 	.word	0x2000053c

0800533c <__utoa>:
 800533c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800533e:	b08b      	sub	sp, #44	; 0x2c
 8005340:	4605      	mov	r5, r0
 8005342:	460b      	mov	r3, r1
 8005344:	466e      	mov	r6, sp
 8005346:	4c1d      	ldr	r4, [pc, #116]	; (80053bc <__utoa+0x80>)
 8005348:	f104 0c20 	add.w	ip, r4, #32
 800534c:	4637      	mov	r7, r6
 800534e:	6820      	ldr	r0, [r4, #0]
 8005350:	6861      	ldr	r1, [r4, #4]
 8005352:	3408      	adds	r4, #8
 8005354:	c703      	stmia	r7!, {r0, r1}
 8005356:	4564      	cmp	r4, ip
 8005358:	463e      	mov	r6, r7
 800535a:	d1f7      	bne.n	800534c <__utoa+0x10>
 800535c:	7921      	ldrb	r1, [r4, #4]
 800535e:	6820      	ldr	r0, [r4, #0]
 8005360:	7139      	strb	r1, [r7, #4]
 8005362:	1e91      	subs	r1, r2, #2
 8005364:	2922      	cmp	r1, #34	; 0x22
 8005366:	6038      	str	r0, [r7, #0]
 8005368:	f04f 0100 	mov.w	r1, #0
 800536c:	d904      	bls.n	8005378 <__utoa+0x3c>
 800536e:	7019      	strb	r1, [r3, #0]
 8005370:	460b      	mov	r3, r1
 8005372:	4618      	mov	r0, r3
 8005374:	b00b      	add	sp, #44	; 0x2c
 8005376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005378:	1e58      	subs	r0, r3, #1
 800537a:	4684      	mov	ip, r0
 800537c:	fbb5 f7f2 	udiv	r7, r5, r2
 8005380:	fb02 5617 	mls	r6, r2, r7, r5
 8005384:	3628      	adds	r6, #40	; 0x28
 8005386:	446e      	add	r6, sp
 8005388:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800538c:	460c      	mov	r4, r1
 800538e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8005392:	462e      	mov	r6, r5
 8005394:	42b2      	cmp	r2, r6
 8005396:	463d      	mov	r5, r7
 8005398:	f101 0101 	add.w	r1, r1, #1
 800539c:	d9ee      	bls.n	800537c <__utoa+0x40>
 800539e:	2200      	movs	r2, #0
 80053a0:	545a      	strb	r2, [r3, r1]
 80053a2:	1919      	adds	r1, r3, r4
 80053a4:	1aa5      	subs	r5, r4, r2
 80053a6:	42aa      	cmp	r2, r5
 80053a8:	dae3      	bge.n	8005372 <__utoa+0x36>
 80053aa:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80053ae:	780e      	ldrb	r6, [r1, #0]
 80053b0:	3201      	adds	r2, #1
 80053b2:	7006      	strb	r6, [r0, #0]
 80053b4:	f801 5901 	strb.w	r5, [r1], #-1
 80053b8:	e7f4      	b.n	80053a4 <__utoa+0x68>
 80053ba:	bf00      	nop
 80053bc:	08006b7e 	.word	0x08006b7e

080053c0 <__swbuf_r>:
 80053c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053c2:	460e      	mov	r6, r1
 80053c4:	4614      	mov	r4, r2
 80053c6:	4605      	mov	r5, r0
 80053c8:	b118      	cbz	r0, 80053d2 <__swbuf_r+0x12>
 80053ca:	6983      	ldr	r3, [r0, #24]
 80053cc:	b90b      	cbnz	r3, 80053d2 <__swbuf_r+0x12>
 80053ce:	f000 f9eb 	bl	80057a8 <__sinit>
 80053d2:	4b21      	ldr	r3, [pc, #132]	; (8005458 <__swbuf_r+0x98>)
 80053d4:	429c      	cmp	r4, r3
 80053d6:	d12b      	bne.n	8005430 <__swbuf_r+0x70>
 80053d8:	686c      	ldr	r4, [r5, #4]
 80053da:	69a3      	ldr	r3, [r4, #24]
 80053dc:	60a3      	str	r3, [r4, #8]
 80053de:	89a3      	ldrh	r3, [r4, #12]
 80053e0:	071a      	lsls	r2, r3, #28
 80053e2:	d52f      	bpl.n	8005444 <__swbuf_r+0x84>
 80053e4:	6923      	ldr	r3, [r4, #16]
 80053e6:	b36b      	cbz	r3, 8005444 <__swbuf_r+0x84>
 80053e8:	6923      	ldr	r3, [r4, #16]
 80053ea:	6820      	ldr	r0, [r4, #0]
 80053ec:	b2f6      	uxtb	r6, r6
 80053ee:	1ac0      	subs	r0, r0, r3
 80053f0:	6963      	ldr	r3, [r4, #20]
 80053f2:	4637      	mov	r7, r6
 80053f4:	4283      	cmp	r3, r0
 80053f6:	dc04      	bgt.n	8005402 <__swbuf_r+0x42>
 80053f8:	4621      	mov	r1, r4
 80053fa:	4628      	mov	r0, r5
 80053fc:	f000 f940 	bl	8005680 <_fflush_r>
 8005400:	bb30      	cbnz	r0, 8005450 <__swbuf_r+0x90>
 8005402:	68a3      	ldr	r3, [r4, #8]
 8005404:	3001      	adds	r0, #1
 8005406:	3b01      	subs	r3, #1
 8005408:	60a3      	str	r3, [r4, #8]
 800540a:	6823      	ldr	r3, [r4, #0]
 800540c:	1c5a      	adds	r2, r3, #1
 800540e:	6022      	str	r2, [r4, #0]
 8005410:	701e      	strb	r6, [r3, #0]
 8005412:	6963      	ldr	r3, [r4, #20]
 8005414:	4283      	cmp	r3, r0
 8005416:	d004      	beq.n	8005422 <__swbuf_r+0x62>
 8005418:	89a3      	ldrh	r3, [r4, #12]
 800541a:	07db      	lsls	r3, r3, #31
 800541c:	d506      	bpl.n	800542c <__swbuf_r+0x6c>
 800541e:	2e0a      	cmp	r6, #10
 8005420:	d104      	bne.n	800542c <__swbuf_r+0x6c>
 8005422:	4621      	mov	r1, r4
 8005424:	4628      	mov	r0, r5
 8005426:	f000 f92b 	bl	8005680 <_fflush_r>
 800542a:	b988      	cbnz	r0, 8005450 <__swbuf_r+0x90>
 800542c:	4638      	mov	r0, r7
 800542e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005430:	4b0a      	ldr	r3, [pc, #40]	; (800545c <__swbuf_r+0x9c>)
 8005432:	429c      	cmp	r4, r3
 8005434:	d101      	bne.n	800543a <__swbuf_r+0x7a>
 8005436:	68ac      	ldr	r4, [r5, #8]
 8005438:	e7cf      	b.n	80053da <__swbuf_r+0x1a>
 800543a:	4b09      	ldr	r3, [pc, #36]	; (8005460 <__swbuf_r+0xa0>)
 800543c:	429c      	cmp	r4, r3
 800543e:	bf08      	it	eq
 8005440:	68ec      	ldreq	r4, [r5, #12]
 8005442:	e7ca      	b.n	80053da <__swbuf_r+0x1a>
 8005444:	4621      	mov	r1, r4
 8005446:	4628      	mov	r0, r5
 8005448:	f000 f80c 	bl	8005464 <__swsetup_r>
 800544c:	2800      	cmp	r0, #0
 800544e:	d0cb      	beq.n	80053e8 <__swbuf_r+0x28>
 8005450:	f04f 37ff 	mov.w	r7, #4294967295
 8005454:	e7ea      	b.n	800542c <__swbuf_r+0x6c>
 8005456:	bf00      	nop
 8005458:	08006d00 	.word	0x08006d00
 800545c:	08006d20 	.word	0x08006d20
 8005460:	08006ce0 	.word	0x08006ce0

08005464 <__swsetup_r>:
 8005464:	4b32      	ldr	r3, [pc, #200]	; (8005530 <__swsetup_r+0xcc>)
 8005466:	b570      	push	{r4, r5, r6, lr}
 8005468:	681d      	ldr	r5, [r3, #0]
 800546a:	4606      	mov	r6, r0
 800546c:	460c      	mov	r4, r1
 800546e:	b125      	cbz	r5, 800547a <__swsetup_r+0x16>
 8005470:	69ab      	ldr	r3, [r5, #24]
 8005472:	b913      	cbnz	r3, 800547a <__swsetup_r+0x16>
 8005474:	4628      	mov	r0, r5
 8005476:	f000 f997 	bl	80057a8 <__sinit>
 800547a:	4b2e      	ldr	r3, [pc, #184]	; (8005534 <__swsetup_r+0xd0>)
 800547c:	429c      	cmp	r4, r3
 800547e:	d10f      	bne.n	80054a0 <__swsetup_r+0x3c>
 8005480:	686c      	ldr	r4, [r5, #4]
 8005482:	89a3      	ldrh	r3, [r4, #12]
 8005484:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005488:	0719      	lsls	r1, r3, #28
 800548a:	d42c      	bmi.n	80054e6 <__swsetup_r+0x82>
 800548c:	06dd      	lsls	r5, r3, #27
 800548e:	d411      	bmi.n	80054b4 <__swsetup_r+0x50>
 8005490:	2309      	movs	r3, #9
 8005492:	6033      	str	r3, [r6, #0]
 8005494:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005498:	f04f 30ff 	mov.w	r0, #4294967295
 800549c:	81a3      	strh	r3, [r4, #12]
 800549e:	e03e      	b.n	800551e <__swsetup_r+0xba>
 80054a0:	4b25      	ldr	r3, [pc, #148]	; (8005538 <__swsetup_r+0xd4>)
 80054a2:	429c      	cmp	r4, r3
 80054a4:	d101      	bne.n	80054aa <__swsetup_r+0x46>
 80054a6:	68ac      	ldr	r4, [r5, #8]
 80054a8:	e7eb      	b.n	8005482 <__swsetup_r+0x1e>
 80054aa:	4b24      	ldr	r3, [pc, #144]	; (800553c <__swsetup_r+0xd8>)
 80054ac:	429c      	cmp	r4, r3
 80054ae:	bf08      	it	eq
 80054b0:	68ec      	ldreq	r4, [r5, #12]
 80054b2:	e7e6      	b.n	8005482 <__swsetup_r+0x1e>
 80054b4:	0758      	lsls	r0, r3, #29
 80054b6:	d512      	bpl.n	80054de <__swsetup_r+0x7a>
 80054b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054ba:	b141      	cbz	r1, 80054ce <__swsetup_r+0x6a>
 80054bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054c0:	4299      	cmp	r1, r3
 80054c2:	d002      	beq.n	80054ca <__swsetup_r+0x66>
 80054c4:	4630      	mov	r0, r6
 80054c6:	f000 faa1 	bl	8005a0c <_free_r>
 80054ca:	2300      	movs	r3, #0
 80054cc:	6363      	str	r3, [r4, #52]	; 0x34
 80054ce:	89a3      	ldrh	r3, [r4, #12]
 80054d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80054d4:	81a3      	strh	r3, [r4, #12]
 80054d6:	2300      	movs	r3, #0
 80054d8:	6063      	str	r3, [r4, #4]
 80054da:	6923      	ldr	r3, [r4, #16]
 80054dc:	6023      	str	r3, [r4, #0]
 80054de:	89a3      	ldrh	r3, [r4, #12]
 80054e0:	f043 0308 	orr.w	r3, r3, #8
 80054e4:	81a3      	strh	r3, [r4, #12]
 80054e6:	6923      	ldr	r3, [r4, #16]
 80054e8:	b94b      	cbnz	r3, 80054fe <__swsetup_r+0x9a>
 80054ea:	89a3      	ldrh	r3, [r4, #12]
 80054ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80054f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054f4:	d003      	beq.n	80054fe <__swsetup_r+0x9a>
 80054f6:	4621      	mov	r1, r4
 80054f8:	4630      	mov	r0, r6
 80054fa:	f000 fa3f 	bl	800597c <__smakebuf_r>
 80054fe:	89a0      	ldrh	r0, [r4, #12]
 8005500:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005504:	f010 0301 	ands.w	r3, r0, #1
 8005508:	d00a      	beq.n	8005520 <__swsetup_r+0xbc>
 800550a:	2300      	movs	r3, #0
 800550c:	60a3      	str	r3, [r4, #8]
 800550e:	6963      	ldr	r3, [r4, #20]
 8005510:	425b      	negs	r3, r3
 8005512:	61a3      	str	r3, [r4, #24]
 8005514:	6923      	ldr	r3, [r4, #16]
 8005516:	b943      	cbnz	r3, 800552a <__swsetup_r+0xc6>
 8005518:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800551c:	d1ba      	bne.n	8005494 <__swsetup_r+0x30>
 800551e:	bd70      	pop	{r4, r5, r6, pc}
 8005520:	0781      	lsls	r1, r0, #30
 8005522:	bf58      	it	pl
 8005524:	6963      	ldrpl	r3, [r4, #20]
 8005526:	60a3      	str	r3, [r4, #8]
 8005528:	e7f4      	b.n	8005514 <__swsetup_r+0xb0>
 800552a:	2000      	movs	r0, #0
 800552c:	e7f7      	b.n	800551e <__swsetup_r+0xba>
 800552e:	bf00      	nop
 8005530:	2000053c 	.word	0x2000053c
 8005534:	08006d00 	.word	0x08006d00
 8005538:	08006d20 	.word	0x08006d20
 800553c:	08006ce0 	.word	0x08006ce0

08005540 <__assert_func>:
 8005540:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005542:	4614      	mov	r4, r2
 8005544:	461a      	mov	r2, r3
 8005546:	4b09      	ldr	r3, [pc, #36]	; (800556c <__assert_func+0x2c>)
 8005548:	4605      	mov	r5, r0
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68d8      	ldr	r0, [r3, #12]
 800554e:	b14c      	cbz	r4, 8005564 <__assert_func+0x24>
 8005550:	4b07      	ldr	r3, [pc, #28]	; (8005570 <__assert_func+0x30>)
 8005552:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005556:	9100      	str	r1, [sp, #0]
 8005558:	462b      	mov	r3, r5
 800555a:	4906      	ldr	r1, [pc, #24]	; (8005574 <__assert_func+0x34>)
 800555c:	f000 f9a2 	bl	80058a4 <fiprintf>
 8005560:	f000 fe84 	bl	800626c <abort>
 8005564:	4b04      	ldr	r3, [pc, #16]	; (8005578 <__assert_func+0x38>)
 8005566:	461c      	mov	r4, r3
 8005568:	e7f3      	b.n	8005552 <__assert_func+0x12>
 800556a:	bf00      	nop
 800556c:	2000053c 	.word	0x2000053c
 8005570:	08006ba3 	.word	0x08006ba3
 8005574:	08006bb0 	.word	0x08006bb0
 8005578:	08006bde 	.word	0x08006bde

0800557c <__sflush_r>:
 800557c:	898a      	ldrh	r2, [r1, #12]
 800557e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005580:	4605      	mov	r5, r0
 8005582:	0710      	lsls	r0, r2, #28
 8005584:	460c      	mov	r4, r1
 8005586:	d457      	bmi.n	8005638 <__sflush_r+0xbc>
 8005588:	684b      	ldr	r3, [r1, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	dc04      	bgt.n	8005598 <__sflush_r+0x1c>
 800558e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005590:	2b00      	cmp	r3, #0
 8005592:	dc01      	bgt.n	8005598 <__sflush_r+0x1c>
 8005594:	2000      	movs	r0, #0
 8005596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005598:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800559a:	2e00      	cmp	r6, #0
 800559c:	d0fa      	beq.n	8005594 <__sflush_r+0x18>
 800559e:	2300      	movs	r3, #0
 80055a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80055a4:	682f      	ldr	r7, [r5, #0]
 80055a6:	602b      	str	r3, [r5, #0]
 80055a8:	d032      	beq.n	8005610 <__sflush_r+0x94>
 80055aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80055ac:	89a3      	ldrh	r3, [r4, #12]
 80055ae:	075a      	lsls	r2, r3, #29
 80055b0:	d505      	bpl.n	80055be <__sflush_r+0x42>
 80055b2:	6863      	ldr	r3, [r4, #4]
 80055b4:	1ac0      	subs	r0, r0, r3
 80055b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80055b8:	b10b      	cbz	r3, 80055be <__sflush_r+0x42>
 80055ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055bc:	1ac0      	subs	r0, r0, r3
 80055be:	2300      	movs	r3, #0
 80055c0:	4602      	mov	r2, r0
 80055c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80055c4:	4628      	mov	r0, r5
 80055c6:	6a21      	ldr	r1, [r4, #32]
 80055c8:	47b0      	blx	r6
 80055ca:	1c43      	adds	r3, r0, #1
 80055cc:	89a3      	ldrh	r3, [r4, #12]
 80055ce:	d106      	bne.n	80055de <__sflush_r+0x62>
 80055d0:	6829      	ldr	r1, [r5, #0]
 80055d2:	291d      	cmp	r1, #29
 80055d4:	d82c      	bhi.n	8005630 <__sflush_r+0xb4>
 80055d6:	4a29      	ldr	r2, [pc, #164]	; (800567c <__sflush_r+0x100>)
 80055d8:	40ca      	lsrs	r2, r1
 80055da:	07d6      	lsls	r6, r2, #31
 80055dc:	d528      	bpl.n	8005630 <__sflush_r+0xb4>
 80055de:	2200      	movs	r2, #0
 80055e0:	6062      	str	r2, [r4, #4]
 80055e2:	6922      	ldr	r2, [r4, #16]
 80055e4:	04d9      	lsls	r1, r3, #19
 80055e6:	6022      	str	r2, [r4, #0]
 80055e8:	d504      	bpl.n	80055f4 <__sflush_r+0x78>
 80055ea:	1c42      	adds	r2, r0, #1
 80055ec:	d101      	bne.n	80055f2 <__sflush_r+0x76>
 80055ee:	682b      	ldr	r3, [r5, #0]
 80055f0:	b903      	cbnz	r3, 80055f4 <__sflush_r+0x78>
 80055f2:	6560      	str	r0, [r4, #84]	; 0x54
 80055f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055f6:	602f      	str	r7, [r5, #0]
 80055f8:	2900      	cmp	r1, #0
 80055fa:	d0cb      	beq.n	8005594 <__sflush_r+0x18>
 80055fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005600:	4299      	cmp	r1, r3
 8005602:	d002      	beq.n	800560a <__sflush_r+0x8e>
 8005604:	4628      	mov	r0, r5
 8005606:	f000 fa01 	bl	8005a0c <_free_r>
 800560a:	2000      	movs	r0, #0
 800560c:	6360      	str	r0, [r4, #52]	; 0x34
 800560e:	e7c2      	b.n	8005596 <__sflush_r+0x1a>
 8005610:	6a21      	ldr	r1, [r4, #32]
 8005612:	2301      	movs	r3, #1
 8005614:	4628      	mov	r0, r5
 8005616:	47b0      	blx	r6
 8005618:	1c41      	adds	r1, r0, #1
 800561a:	d1c7      	bne.n	80055ac <__sflush_r+0x30>
 800561c:	682b      	ldr	r3, [r5, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d0c4      	beq.n	80055ac <__sflush_r+0x30>
 8005622:	2b1d      	cmp	r3, #29
 8005624:	d001      	beq.n	800562a <__sflush_r+0xae>
 8005626:	2b16      	cmp	r3, #22
 8005628:	d101      	bne.n	800562e <__sflush_r+0xb2>
 800562a:	602f      	str	r7, [r5, #0]
 800562c:	e7b2      	b.n	8005594 <__sflush_r+0x18>
 800562e:	89a3      	ldrh	r3, [r4, #12]
 8005630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005634:	81a3      	strh	r3, [r4, #12]
 8005636:	e7ae      	b.n	8005596 <__sflush_r+0x1a>
 8005638:	690f      	ldr	r7, [r1, #16]
 800563a:	2f00      	cmp	r7, #0
 800563c:	d0aa      	beq.n	8005594 <__sflush_r+0x18>
 800563e:	0793      	lsls	r3, r2, #30
 8005640:	bf18      	it	ne
 8005642:	2300      	movne	r3, #0
 8005644:	680e      	ldr	r6, [r1, #0]
 8005646:	bf08      	it	eq
 8005648:	694b      	ldreq	r3, [r1, #20]
 800564a:	1bf6      	subs	r6, r6, r7
 800564c:	600f      	str	r7, [r1, #0]
 800564e:	608b      	str	r3, [r1, #8]
 8005650:	2e00      	cmp	r6, #0
 8005652:	dd9f      	ble.n	8005594 <__sflush_r+0x18>
 8005654:	4633      	mov	r3, r6
 8005656:	463a      	mov	r2, r7
 8005658:	4628      	mov	r0, r5
 800565a:	6a21      	ldr	r1, [r4, #32]
 800565c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005660:	47e0      	blx	ip
 8005662:	2800      	cmp	r0, #0
 8005664:	dc06      	bgt.n	8005674 <__sflush_r+0xf8>
 8005666:	89a3      	ldrh	r3, [r4, #12]
 8005668:	f04f 30ff 	mov.w	r0, #4294967295
 800566c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005670:	81a3      	strh	r3, [r4, #12]
 8005672:	e790      	b.n	8005596 <__sflush_r+0x1a>
 8005674:	4407      	add	r7, r0
 8005676:	1a36      	subs	r6, r6, r0
 8005678:	e7ea      	b.n	8005650 <__sflush_r+0xd4>
 800567a:	bf00      	nop
 800567c:	20400001 	.word	0x20400001

08005680 <_fflush_r>:
 8005680:	b538      	push	{r3, r4, r5, lr}
 8005682:	690b      	ldr	r3, [r1, #16]
 8005684:	4605      	mov	r5, r0
 8005686:	460c      	mov	r4, r1
 8005688:	b913      	cbnz	r3, 8005690 <_fflush_r+0x10>
 800568a:	2500      	movs	r5, #0
 800568c:	4628      	mov	r0, r5
 800568e:	bd38      	pop	{r3, r4, r5, pc}
 8005690:	b118      	cbz	r0, 800569a <_fflush_r+0x1a>
 8005692:	6983      	ldr	r3, [r0, #24]
 8005694:	b90b      	cbnz	r3, 800569a <_fflush_r+0x1a>
 8005696:	f000 f887 	bl	80057a8 <__sinit>
 800569a:	4b14      	ldr	r3, [pc, #80]	; (80056ec <_fflush_r+0x6c>)
 800569c:	429c      	cmp	r4, r3
 800569e:	d11b      	bne.n	80056d8 <_fflush_r+0x58>
 80056a0:	686c      	ldr	r4, [r5, #4]
 80056a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d0ef      	beq.n	800568a <_fflush_r+0xa>
 80056aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80056ac:	07d0      	lsls	r0, r2, #31
 80056ae:	d404      	bmi.n	80056ba <_fflush_r+0x3a>
 80056b0:	0599      	lsls	r1, r3, #22
 80056b2:	d402      	bmi.n	80056ba <_fflush_r+0x3a>
 80056b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056b6:	f000 f93a 	bl	800592e <__retarget_lock_acquire_recursive>
 80056ba:	4628      	mov	r0, r5
 80056bc:	4621      	mov	r1, r4
 80056be:	f7ff ff5d 	bl	800557c <__sflush_r>
 80056c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80056c4:	4605      	mov	r5, r0
 80056c6:	07da      	lsls	r2, r3, #31
 80056c8:	d4e0      	bmi.n	800568c <_fflush_r+0xc>
 80056ca:	89a3      	ldrh	r3, [r4, #12]
 80056cc:	059b      	lsls	r3, r3, #22
 80056ce:	d4dd      	bmi.n	800568c <_fflush_r+0xc>
 80056d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056d2:	f000 f92d 	bl	8005930 <__retarget_lock_release_recursive>
 80056d6:	e7d9      	b.n	800568c <_fflush_r+0xc>
 80056d8:	4b05      	ldr	r3, [pc, #20]	; (80056f0 <_fflush_r+0x70>)
 80056da:	429c      	cmp	r4, r3
 80056dc:	d101      	bne.n	80056e2 <_fflush_r+0x62>
 80056de:	68ac      	ldr	r4, [r5, #8]
 80056e0:	e7df      	b.n	80056a2 <_fflush_r+0x22>
 80056e2:	4b04      	ldr	r3, [pc, #16]	; (80056f4 <_fflush_r+0x74>)
 80056e4:	429c      	cmp	r4, r3
 80056e6:	bf08      	it	eq
 80056e8:	68ec      	ldreq	r4, [r5, #12]
 80056ea:	e7da      	b.n	80056a2 <_fflush_r+0x22>
 80056ec:	08006d00 	.word	0x08006d00
 80056f0:	08006d20 	.word	0x08006d20
 80056f4:	08006ce0 	.word	0x08006ce0

080056f8 <std>:
 80056f8:	2300      	movs	r3, #0
 80056fa:	b510      	push	{r4, lr}
 80056fc:	4604      	mov	r4, r0
 80056fe:	e9c0 3300 	strd	r3, r3, [r0]
 8005702:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005706:	6083      	str	r3, [r0, #8]
 8005708:	8181      	strh	r1, [r0, #12]
 800570a:	6643      	str	r3, [r0, #100]	; 0x64
 800570c:	81c2      	strh	r2, [r0, #14]
 800570e:	6183      	str	r3, [r0, #24]
 8005710:	4619      	mov	r1, r3
 8005712:	2208      	movs	r2, #8
 8005714:	305c      	adds	r0, #92	; 0x5c
 8005716:	f7ff fc41 	bl	8004f9c <memset>
 800571a:	4b05      	ldr	r3, [pc, #20]	; (8005730 <std+0x38>)
 800571c:	6224      	str	r4, [r4, #32]
 800571e:	6263      	str	r3, [r4, #36]	; 0x24
 8005720:	4b04      	ldr	r3, [pc, #16]	; (8005734 <std+0x3c>)
 8005722:	62a3      	str	r3, [r4, #40]	; 0x28
 8005724:	4b04      	ldr	r3, [pc, #16]	; (8005738 <std+0x40>)
 8005726:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005728:	4b04      	ldr	r3, [pc, #16]	; (800573c <std+0x44>)
 800572a:	6323      	str	r3, [r4, #48]	; 0x30
 800572c:	bd10      	pop	{r4, pc}
 800572e:	bf00      	nop
 8005730:	080061c1 	.word	0x080061c1
 8005734:	080061e3 	.word	0x080061e3
 8005738:	0800621b 	.word	0x0800621b
 800573c:	0800623f 	.word	0x0800623f

08005740 <_cleanup_r>:
 8005740:	4901      	ldr	r1, [pc, #4]	; (8005748 <_cleanup_r+0x8>)
 8005742:	f000 b8c1 	b.w	80058c8 <_fwalk_reent>
 8005746:	bf00      	nop
 8005748:	08005681 	.word	0x08005681

0800574c <__sfmoreglue>:
 800574c:	2268      	movs	r2, #104	; 0x68
 800574e:	b570      	push	{r4, r5, r6, lr}
 8005750:	1e4d      	subs	r5, r1, #1
 8005752:	4355      	muls	r5, r2
 8005754:	460e      	mov	r6, r1
 8005756:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800575a:	f000 f9bf 	bl	8005adc <_malloc_r>
 800575e:	4604      	mov	r4, r0
 8005760:	b140      	cbz	r0, 8005774 <__sfmoreglue+0x28>
 8005762:	2100      	movs	r1, #0
 8005764:	e9c0 1600 	strd	r1, r6, [r0]
 8005768:	300c      	adds	r0, #12
 800576a:	60a0      	str	r0, [r4, #8]
 800576c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005770:	f7ff fc14 	bl	8004f9c <memset>
 8005774:	4620      	mov	r0, r4
 8005776:	bd70      	pop	{r4, r5, r6, pc}

08005778 <__sfp_lock_acquire>:
 8005778:	4801      	ldr	r0, [pc, #4]	; (8005780 <__sfp_lock_acquire+0x8>)
 800577a:	f000 b8d8 	b.w	800592e <__retarget_lock_acquire_recursive>
 800577e:	bf00      	nop
 8005780:	20003c91 	.word	0x20003c91

08005784 <__sfp_lock_release>:
 8005784:	4801      	ldr	r0, [pc, #4]	; (800578c <__sfp_lock_release+0x8>)
 8005786:	f000 b8d3 	b.w	8005930 <__retarget_lock_release_recursive>
 800578a:	bf00      	nop
 800578c:	20003c91 	.word	0x20003c91

08005790 <__sinit_lock_acquire>:
 8005790:	4801      	ldr	r0, [pc, #4]	; (8005798 <__sinit_lock_acquire+0x8>)
 8005792:	f000 b8cc 	b.w	800592e <__retarget_lock_acquire_recursive>
 8005796:	bf00      	nop
 8005798:	20003c92 	.word	0x20003c92

0800579c <__sinit_lock_release>:
 800579c:	4801      	ldr	r0, [pc, #4]	; (80057a4 <__sinit_lock_release+0x8>)
 800579e:	f000 b8c7 	b.w	8005930 <__retarget_lock_release_recursive>
 80057a2:	bf00      	nop
 80057a4:	20003c92 	.word	0x20003c92

080057a8 <__sinit>:
 80057a8:	b510      	push	{r4, lr}
 80057aa:	4604      	mov	r4, r0
 80057ac:	f7ff fff0 	bl	8005790 <__sinit_lock_acquire>
 80057b0:	69a3      	ldr	r3, [r4, #24]
 80057b2:	b11b      	cbz	r3, 80057bc <__sinit+0x14>
 80057b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057b8:	f7ff bff0 	b.w	800579c <__sinit_lock_release>
 80057bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80057c0:	6523      	str	r3, [r4, #80]	; 0x50
 80057c2:	4b13      	ldr	r3, [pc, #76]	; (8005810 <__sinit+0x68>)
 80057c4:	4a13      	ldr	r2, [pc, #76]	; (8005814 <__sinit+0x6c>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80057ca:	42a3      	cmp	r3, r4
 80057cc:	bf08      	it	eq
 80057ce:	2301      	moveq	r3, #1
 80057d0:	4620      	mov	r0, r4
 80057d2:	bf08      	it	eq
 80057d4:	61a3      	streq	r3, [r4, #24]
 80057d6:	f000 f81f 	bl	8005818 <__sfp>
 80057da:	6060      	str	r0, [r4, #4]
 80057dc:	4620      	mov	r0, r4
 80057de:	f000 f81b 	bl	8005818 <__sfp>
 80057e2:	60a0      	str	r0, [r4, #8]
 80057e4:	4620      	mov	r0, r4
 80057e6:	f000 f817 	bl	8005818 <__sfp>
 80057ea:	2200      	movs	r2, #0
 80057ec:	2104      	movs	r1, #4
 80057ee:	60e0      	str	r0, [r4, #12]
 80057f0:	6860      	ldr	r0, [r4, #4]
 80057f2:	f7ff ff81 	bl	80056f8 <std>
 80057f6:	2201      	movs	r2, #1
 80057f8:	2109      	movs	r1, #9
 80057fa:	68a0      	ldr	r0, [r4, #8]
 80057fc:	f7ff ff7c 	bl	80056f8 <std>
 8005800:	2202      	movs	r2, #2
 8005802:	2112      	movs	r1, #18
 8005804:	68e0      	ldr	r0, [r4, #12]
 8005806:	f7ff ff77 	bl	80056f8 <std>
 800580a:	2301      	movs	r3, #1
 800580c:	61a3      	str	r3, [r4, #24]
 800580e:	e7d1      	b.n	80057b4 <__sinit+0xc>
 8005810:	08006b08 	.word	0x08006b08
 8005814:	08005741 	.word	0x08005741

08005818 <__sfp>:
 8005818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800581a:	4607      	mov	r7, r0
 800581c:	f7ff ffac 	bl	8005778 <__sfp_lock_acquire>
 8005820:	4b1e      	ldr	r3, [pc, #120]	; (800589c <__sfp+0x84>)
 8005822:	681e      	ldr	r6, [r3, #0]
 8005824:	69b3      	ldr	r3, [r6, #24]
 8005826:	b913      	cbnz	r3, 800582e <__sfp+0x16>
 8005828:	4630      	mov	r0, r6
 800582a:	f7ff ffbd 	bl	80057a8 <__sinit>
 800582e:	3648      	adds	r6, #72	; 0x48
 8005830:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005834:	3b01      	subs	r3, #1
 8005836:	d503      	bpl.n	8005840 <__sfp+0x28>
 8005838:	6833      	ldr	r3, [r6, #0]
 800583a:	b30b      	cbz	r3, 8005880 <__sfp+0x68>
 800583c:	6836      	ldr	r6, [r6, #0]
 800583e:	e7f7      	b.n	8005830 <__sfp+0x18>
 8005840:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005844:	b9d5      	cbnz	r5, 800587c <__sfp+0x64>
 8005846:	4b16      	ldr	r3, [pc, #88]	; (80058a0 <__sfp+0x88>)
 8005848:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800584c:	60e3      	str	r3, [r4, #12]
 800584e:	6665      	str	r5, [r4, #100]	; 0x64
 8005850:	f000 f86c 	bl	800592c <__retarget_lock_init_recursive>
 8005854:	f7ff ff96 	bl	8005784 <__sfp_lock_release>
 8005858:	2208      	movs	r2, #8
 800585a:	4629      	mov	r1, r5
 800585c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005860:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005864:	6025      	str	r5, [r4, #0]
 8005866:	61a5      	str	r5, [r4, #24]
 8005868:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800586c:	f7ff fb96 	bl	8004f9c <memset>
 8005870:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005874:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005878:	4620      	mov	r0, r4
 800587a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800587c:	3468      	adds	r4, #104	; 0x68
 800587e:	e7d9      	b.n	8005834 <__sfp+0x1c>
 8005880:	2104      	movs	r1, #4
 8005882:	4638      	mov	r0, r7
 8005884:	f7ff ff62 	bl	800574c <__sfmoreglue>
 8005888:	4604      	mov	r4, r0
 800588a:	6030      	str	r0, [r6, #0]
 800588c:	2800      	cmp	r0, #0
 800588e:	d1d5      	bne.n	800583c <__sfp+0x24>
 8005890:	f7ff ff78 	bl	8005784 <__sfp_lock_release>
 8005894:	230c      	movs	r3, #12
 8005896:	603b      	str	r3, [r7, #0]
 8005898:	e7ee      	b.n	8005878 <__sfp+0x60>
 800589a:	bf00      	nop
 800589c:	08006b08 	.word	0x08006b08
 80058a0:	ffff0001 	.word	0xffff0001

080058a4 <fiprintf>:
 80058a4:	b40e      	push	{r1, r2, r3}
 80058a6:	b503      	push	{r0, r1, lr}
 80058a8:	4601      	mov	r1, r0
 80058aa:	ab03      	add	r3, sp, #12
 80058ac:	4805      	ldr	r0, [pc, #20]	; (80058c4 <fiprintf+0x20>)
 80058ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80058b2:	6800      	ldr	r0, [r0, #0]
 80058b4:	9301      	str	r3, [sp, #4]
 80058b6:	f000 f9ad 	bl	8005c14 <_vfiprintf_r>
 80058ba:	b002      	add	sp, #8
 80058bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80058c0:	b003      	add	sp, #12
 80058c2:	4770      	bx	lr
 80058c4:	2000053c 	.word	0x2000053c

080058c8 <_fwalk_reent>:
 80058c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058cc:	4606      	mov	r6, r0
 80058ce:	4688      	mov	r8, r1
 80058d0:	2700      	movs	r7, #0
 80058d2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80058d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80058da:	f1b9 0901 	subs.w	r9, r9, #1
 80058de:	d505      	bpl.n	80058ec <_fwalk_reent+0x24>
 80058e0:	6824      	ldr	r4, [r4, #0]
 80058e2:	2c00      	cmp	r4, #0
 80058e4:	d1f7      	bne.n	80058d6 <_fwalk_reent+0xe>
 80058e6:	4638      	mov	r0, r7
 80058e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058ec:	89ab      	ldrh	r3, [r5, #12]
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d907      	bls.n	8005902 <_fwalk_reent+0x3a>
 80058f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80058f6:	3301      	adds	r3, #1
 80058f8:	d003      	beq.n	8005902 <_fwalk_reent+0x3a>
 80058fa:	4629      	mov	r1, r5
 80058fc:	4630      	mov	r0, r6
 80058fe:	47c0      	blx	r8
 8005900:	4307      	orrs	r7, r0
 8005902:	3568      	adds	r5, #104	; 0x68
 8005904:	e7e9      	b.n	80058da <_fwalk_reent+0x12>
	...

08005908 <_gettimeofday_r>:
 8005908:	b538      	push	{r3, r4, r5, lr}
 800590a:	2300      	movs	r3, #0
 800590c:	4d06      	ldr	r5, [pc, #24]	; (8005928 <_gettimeofday_r+0x20>)
 800590e:	4604      	mov	r4, r0
 8005910:	4608      	mov	r0, r1
 8005912:	4611      	mov	r1, r2
 8005914:	602b      	str	r3, [r5, #0]
 8005916:	f000 fd65 	bl	80063e4 <_gettimeofday>
 800591a:	1c43      	adds	r3, r0, #1
 800591c:	d102      	bne.n	8005924 <_gettimeofday_r+0x1c>
 800591e:	682b      	ldr	r3, [r5, #0]
 8005920:	b103      	cbz	r3, 8005924 <_gettimeofday_r+0x1c>
 8005922:	6023      	str	r3, [r4, #0]
 8005924:	bd38      	pop	{r3, r4, r5, pc}
 8005926:	bf00      	nop
 8005928:	20003c9c 	.word	0x20003c9c

0800592c <__retarget_lock_init_recursive>:
 800592c:	4770      	bx	lr

0800592e <__retarget_lock_acquire_recursive>:
 800592e:	4770      	bx	lr

08005930 <__retarget_lock_release_recursive>:
 8005930:	4770      	bx	lr

08005932 <__swhatbuf_r>:
 8005932:	b570      	push	{r4, r5, r6, lr}
 8005934:	460e      	mov	r6, r1
 8005936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800593a:	4614      	mov	r4, r2
 800593c:	2900      	cmp	r1, #0
 800593e:	461d      	mov	r5, r3
 8005940:	b096      	sub	sp, #88	; 0x58
 8005942:	da08      	bge.n	8005956 <__swhatbuf_r+0x24>
 8005944:	2200      	movs	r2, #0
 8005946:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800594a:	602a      	str	r2, [r5, #0]
 800594c:	061a      	lsls	r2, r3, #24
 800594e:	d410      	bmi.n	8005972 <__swhatbuf_r+0x40>
 8005950:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005954:	e00e      	b.n	8005974 <__swhatbuf_r+0x42>
 8005956:	466a      	mov	r2, sp
 8005958:	f000 fca0 	bl	800629c <_fstat_r>
 800595c:	2800      	cmp	r0, #0
 800595e:	dbf1      	blt.n	8005944 <__swhatbuf_r+0x12>
 8005960:	9a01      	ldr	r2, [sp, #4]
 8005962:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005966:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800596a:	425a      	negs	r2, r3
 800596c:	415a      	adcs	r2, r3
 800596e:	602a      	str	r2, [r5, #0]
 8005970:	e7ee      	b.n	8005950 <__swhatbuf_r+0x1e>
 8005972:	2340      	movs	r3, #64	; 0x40
 8005974:	2000      	movs	r0, #0
 8005976:	6023      	str	r3, [r4, #0]
 8005978:	b016      	add	sp, #88	; 0x58
 800597a:	bd70      	pop	{r4, r5, r6, pc}

0800597c <__smakebuf_r>:
 800597c:	898b      	ldrh	r3, [r1, #12]
 800597e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005980:	079d      	lsls	r5, r3, #30
 8005982:	4606      	mov	r6, r0
 8005984:	460c      	mov	r4, r1
 8005986:	d507      	bpl.n	8005998 <__smakebuf_r+0x1c>
 8005988:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800598c:	6023      	str	r3, [r4, #0]
 800598e:	6123      	str	r3, [r4, #16]
 8005990:	2301      	movs	r3, #1
 8005992:	6163      	str	r3, [r4, #20]
 8005994:	b002      	add	sp, #8
 8005996:	bd70      	pop	{r4, r5, r6, pc}
 8005998:	466a      	mov	r2, sp
 800599a:	ab01      	add	r3, sp, #4
 800599c:	f7ff ffc9 	bl	8005932 <__swhatbuf_r>
 80059a0:	9900      	ldr	r1, [sp, #0]
 80059a2:	4605      	mov	r5, r0
 80059a4:	4630      	mov	r0, r6
 80059a6:	f000 f899 	bl	8005adc <_malloc_r>
 80059aa:	b948      	cbnz	r0, 80059c0 <__smakebuf_r+0x44>
 80059ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059b0:	059a      	lsls	r2, r3, #22
 80059b2:	d4ef      	bmi.n	8005994 <__smakebuf_r+0x18>
 80059b4:	f023 0303 	bic.w	r3, r3, #3
 80059b8:	f043 0302 	orr.w	r3, r3, #2
 80059bc:	81a3      	strh	r3, [r4, #12]
 80059be:	e7e3      	b.n	8005988 <__smakebuf_r+0xc>
 80059c0:	4b0d      	ldr	r3, [pc, #52]	; (80059f8 <__smakebuf_r+0x7c>)
 80059c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80059c4:	89a3      	ldrh	r3, [r4, #12]
 80059c6:	6020      	str	r0, [r4, #0]
 80059c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059cc:	81a3      	strh	r3, [r4, #12]
 80059ce:	9b00      	ldr	r3, [sp, #0]
 80059d0:	6120      	str	r0, [r4, #16]
 80059d2:	6163      	str	r3, [r4, #20]
 80059d4:	9b01      	ldr	r3, [sp, #4]
 80059d6:	b15b      	cbz	r3, 80059f0 <__smakebuf_r+0x74>
 80059d8:	4630      	mov	r0, r6
 80059da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059de:	f000 fc6f 	bl	80062c0 <_isatty_r>
 80059e2:	b128      	cbz	r0, 80059f0 <__smakebuf_r+0x74>
 80059e4:	89a3      	ldrh	r3, [r4, #12]
 80059e6:	f023 0303 	bic.w	r3, r3, #3
 80059ea:	f043 0301 	orr.w	r3, r3, #1
 80059ee:	81a3      	strh	r3, [r4, #12]
 80059f0:	89a0      	ldrh	r0, [r4, #12]
 80059f2:	4305      	orrs	r5, r0
 80059f4:	81a5      	strh	r5, [r4, #12]
 80059f6:	e7cd      	b.n	8005994 <__smakebuf_r+0x18>
 80059f8:	08005741 	.word	0x08005741

080059fc <malloc>:
 80059fc:	4b02      	ldr	r3, [pc, #8]	; (8005a08 <malloc+0xc>)
 80059fe:	4601      	mov	r1, r0
 8005a00:	6818      	ldr	r0, [r3, #0]
 8005a02:	f000 b86b 	b.w	8005adc <_malloc_r>
 8005a06:	bf00      	nop
 8005a08:	2000053c 	.word	0x2000053c

08005a0c <_free_r>:
 8005a0c:	b538      	push	{r3, r4, r5, lr}
 8005a0e:	4605      	mov	r5, r0
 8005a10:	2900      	cmp	r1, #0
 8005a12:	d040      	beq.n	8005a96 <_free_r+0x8a>
 8005a14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a18:	1f0c      	subs	r4, r1, #4
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	bfb8      	it	lt
 8005a1e:	18e4      	addlt	r4, r4, r3
 8005a20:	f000 fc7e 	bl	8006320 <__malloc_lock>
 8005a24:	4a1c      	ldr	r2, [pc, #112]	; (8005a98 <_free_r+0x8c>)
 8005a26:	6813      	ldr	r3, [r2, #0]
 8005a28:	b933      	cbnz	r3, 8005a38 <_free_r+0x2c>
 8005a2a:	6063      	str	r3, [r4, #4]
 8005a2c:	6014      	str	r4, [r2, #0]
 8005a2e:	4628      	mov	r0, r5
 8005a30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a34:	f000 bc7a 	b.w	800632c <__malloc_unlock>
 8005a38:	42a3      	cmp	r3, r4
 8005a3a:	d908      	bls.n	8005a4e <_free_r+0x42>
 8005a3c:	6820      	ldr	r0, [r4, #0]
 8005a3e:	1821      	adds	r1, r4, r0
 8005a40:	428b      	cmp	r3, r1
 8005a42:	bf01      	itttt	eq
 8005a44:	6819      	ldreq	r1, [r3, #0]
 8005a46:	685b      	ldreq	r3, [r3, #4]
 8005a48:	1809      	addeq	r1, r1, r0
 8005a4a:	6021      	streq	r1, [r4, #0]
 8005a4c:	e7ed      	b.n	8005a2a <_free_r+0x1e>
 8005a4e:	461a      	mov	r2, r3
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	b10b      	cbz	r3, 8005a58 <_free_r+0x4c>
 8005a54:	42a3      	cmp	r3, r4
 8005a56:	d9fa      	bls.n	8005a4e <_free_r+0x42>
 8005a58:	6811      	ldr	r1, [r2, #0]
 8005a5a:	1850      	adds	r0, r2, r1
 8005a5c:	42a0      	cmp	r0, r4
 8005a5e:	d10b      	bne.n	8005a78 <_free_r+0x6c>
 8005a60:	6820      	ldr	r0, [r4, #0]
 8005a62:	4401      	add	r1, r0
 8005a64:	1850      	adds	r0, r2, r1
 8005a66:	4283      	cmp	r3, r0
 8005a68:	6011      	str	r1, [r2, #0]
 8005a6a:	d1e0      	bne.n	8005a2e <_free_r+0x22>
 8005a6c:	6818      	ldr	r0, [r3, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	4401      	add	r1, r0
 8005a72:	6011      	str	r1, [r2, #0]
 8005a74:	6053      	str	r3, [r2, #4]
 8005a76:	e7da      	b.n	8005a2e <_free_r+0x22>
 8005a78:	d902      	bls.n	8005a80 <_free_r+0x74>
 8005a7a:	230c      	movs	r3, #12
 8005a7c:	602b      	str	r3, [r5, #0]
 8005a7e:	e7d6      	b.n	8005a2e <_free_r+0x22>
 8005a80:	6820      	ldr	r0, [r4, #0]
 8005a82:	1821      	adds	r1, r4, r0
 8005a84:	428b      	cmp	r3, r1
 8005a86:	bf01      	itttt	eq
 8005a88:	6819      	ldreq	r1, [r3, #0]
 8005a8a:	685b      	ldreq	r3, [r3, #4]
 8005a8c:	1809      	addeq	r1, r1, r0
 8005a8e:	6021      	streq	r1, [r4, #0]
 8005a90:	6063      	str	r3, [r4, #4]
 8005a92:	6054      	str	r4, [r2, #4]
 8005a94:	e7cb      	b.n	8005a2e <_free_r+0x22>
 8005a96:	bd38      	pop	{r3, r4, r5, pc}
 8005a98:	20003c94 	.word	0x20003c94

08005a9c <sbrk_aligned>:
 8005a9c:	b570      	push	{r4, r5, r6, lr}
 8005a9e:	4e0e      	ldr	r6, [pc, #56]	; (8005ad8 <sbrk_aligned+0x3c>)
 8005aa0:	460c      	mov	r4, r1
 8005aa2:	6831      	ldr	r1, [r6, #0]
 8005aa4:	4605      	mov	r5, r0
 8005aa6:	b911      	cbnz	r1, 8005aae <sbrk_aligned+0x12>
 8005aa8:	f000 fb7a 	bl	80061a0 <_sbrk_r>
 8005aac:	6030      	str	r0, [r6, #0]
 8005aae:	4621      	mov	r1, r4
 8005ab0:	4628      	mov	r0, r5
 8005ab2:	f000 fb75 	bl	80061a0 <_sbrk_r>
 8005ab6:	1c43      	adds	r3, r0, #1
 8005ab8:	d00a      	beq.n	8005ad0 <sbrk_aligned+0x34>
 8005aba:	1cc4      	adds	r4, r0, #3
 8005abc:	f024 0403 	bic.w	r4, r4, #3
 8005ac0:	42a0      	cmp	r0, r4
 8005ac2:	d007      	beq.n	8005ad4 <sbrk_aligned+0x38>
 8005ac4:	1a21      	subs	r1, r4, r0
 8005ac6:	4628      	mov	r0, r5
 8005ac8:	f000 fb6a 	bl	80061a0 <_sbrk_r>
 8005acc:	3001      	adds	r0, #1
 8005ace:	d101      	bne.n	8005ad4 <sbrk_aligned+0x38>
 8005ad0:	f04f 34ff 	mov.w	r4, #4294967295
 8005ad4:	4620      	mov	r0, r4
 8005ad6:	bd70      	pop	{r4, r5, r6, pc}
 8005ad8:	20003c98 	.word	0x20003c98

08005adc <_malloc_r>:
 8005adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ae0:	1ccd      	adds	r5, r1, #3
 8005ae2:	f025 0503 	bic.w	r5, r5, #3
 8005ae6:	3508      	adds	r5, #8
 8005ae8:	2d0c      	cmp	r5, #12
 8005aea:	bf38      	it	cc
 8005aec:	250c      	movcc	r5, #12
 8005aee:	2d00      	cmp	r5, #0
 8005af0:	4607      	mov	r7, r0
 8005af2:	db01      	blt.n	8005af8 <_malloc_r+0x1c>
 8005af4:	42a9      	cmp	r1, r5
 8005af6:	d905      	bls.n	8005b04 <_malloc_r+0x28>
 8005af8:	230c      	movs	r3, #12
 8005afa:	2600      	movs	r6, #0
 8005afc:	603b      	str	r3, [r7, #0]
 8005afe:	4630      	mov	r0, r6
 8005b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b04:	4e2e      	ldr	r6, [pc, #184]	; (8005bc0 <_malloc_r+0xe4>)
 8005b06:	f000 fc0b 	bl	8006320 <__malloc_lock>
 8005b0a:	6833      	ldr	r3, [r6, #0]
 8005b0c:	461c      	mov	r4, r3
 8005b0e:	bb34      	cbnz	r4, 8005b5e <_malloc_r+0x82>
 8005b10:	4629      	mov	r1, r5
 8005b12:	4638      	mov	r0, r7
 8005b14:	f7ff ffc2 	bl	8005a9c <sbrk_aligned>
 8005b18:	1c43      	adds	r3, r0, #1
 8005b1a:	4604      	mov	r4, r0
 8005b1c:	d14d      	bne.n	8005bba <_malloc_r+0xde>
 8005b1e:	6834      	ldr	r4, [r6, #0]
 8005b20:	4626      	mov	r6, r4
 8005b22:	2e00      	cmp	r6, #0
 8005b24:	d140      	bne.n	8005ba8 <_malloc_r+0xcc>
 8005b26:	6823      	ldr	r3, [r4, #0]
 8005b28:	4631      	mov	r1, r6
 8005b2a:	4638      	mov	r0, r7
 8005b2c:	eb04 0803 	add.w	r8, r4, r3
 8005b30:	f000 fb36 	bl	80061a0 <_sbrk_r>
 8005b34:	4580      	cmp	r8, r0
 8005b36:	d13a      	bne.n	8005bae <_malloc_r+0xd2>
 8005b38:	6821      	ldr	r1, [r4, #0]
 8005b3a:	3503      	adds	r5, #3
 8005b3c:	1a6d      	subs	r5, r5, r1
 8005b3e:	f025 0503 	bic.w	r5, r5, #3
 8005b42:	3508      	adds	r5, #8
 8005b44:	2d0c      	cmp	r5, #12
 8005b46:	bf38      	it	cc
 8005b48:	250c      	movcc	r5, #12
 8005b4a:	4638      	mov	r0, r7
 8005b4c:	4629      	mov	r1, r5
 8005b4e:	f7ff ffa5 	bl	8005a9c <sbrk_aligned>
 8005b52:	3001      	adds	r0, #1
 8005b54:	d02b      	beq.n	8005bae <_malloc_r+0xd2>
 8005b56:	6823      	ldr	r3, [r4, #0]
 8005b58:	442b      	add	r3, r5
 8005b5a:	6023      	str	r3, [r4, #0]
 8005b5c:	e00e      	b.n	8005b7c <_malloc_r+0xa0>
 8005b5e:	6822      	ldr	r2, [r4, #0]
 8005b60:	1b52      	subs	r2, r2, r5
 8005b62:	d41e      	bmi.n	8005ba2 <_malloc_r+0xc6>
 8005b64:	2a0b      	cmp	r2, #11
 8005b66:	d916      	bls.n	8005b96 <_malloc_r+0xba>
 8005b68:	1961      	adds	r1, r4, r5
 8005b6a:	42a3      	cmp	r3, r4
 8005b6c:	6025      	str	r5, [r4, #0]
 8005b6e:	bf18      	it	ne
 8005b70:	6059      	strne	r1, [r3, #4]
 8005b72:	6863      	ldr	r3, [r4, #4]
 8005b74:	bf08      	it	eq
 8005b76:	6031      	streq	r1, [r6, #0]
 8005b78:	5162      	str	r2, [r4, r5]
 8005b7a:	604b      	str	r3, [r1, #4]
 8005b7c:	4638      	mov	r0, r7
 8005b7e:	f104 060b 	add.w	r6, r4, #11
 8005b82:	f000 fbd3 	bl	800632c <__malloc_unlock>
 8005b86:	f026 0607 	bic.w	r6, r6, #7
 8005b8a:	1d23      	adds	r3, r4, #4
 8005b8c:	1af2      	subs	r2, r6, r3
 8005b8e:	d0b6      	beq.n	8005afe <_malloc_r+0x22>
 8005b90:	1b9b      	subs	r3, r3, r6
 8005b92:	50a3      	str	r3, [r4, r2]
 8005b94:	e7b3      	b.n	8005afe <_malloc_r+0x22>
 8005b96:	6862      	ldr	r2, [r4, #4]
 8005b98:	42a3      	cmp	r3, r4
 8005b9a:	bf0c      	ite	eq
 8005b9c:	6032      	streq	r2, [r6, #0]
 8005b9e:	605a      	strne	r2, [r3, #4]
 8005ba0:	e7ec      	b.n	8005b7c <_malloc_r+0xa0>
 8005ba2:	4623      	mov	r3, r4
 8005ba4:	6864      	ldr	r4, [r4, #4]
 8005ba6:	e7b2      	b.n	8005b0e <_malloc_r+0x32>
 8005ba8:	4634      	mov	r4, r6
 8005baa:	6876      	ldr	r6, [r6, #4]
 8005bac:	e7b9      	b.n	8005b22 <_malloc_r+0x46>
 8005bae:	230c      	movs	r3, #12
 8005bb0:	4638      	mov	r0, r7
 8005bb2:	603b      	str	r3, [r7, #0]
 8005bb4:	f000 fbba 	bl	800632c <__malloc_unlock>
 8005bb8:	e7a1      	b.n	8005afe <_malloc_r+0x22>
 8005bba:	6025      	str	r5, [r4, #0]
 8005bbc:	e7de      	b.n	8005b7c <_malloc_r+0xa0>
 8005bbe:	bf00      	nop
 8005bc0:	20003c94 	.word	0x20003c94

08005bc4 <__sfputc_r>:
 8005bc4:	6893      	ldr	r3, [r2, #8]
 8005bc6:	b410      	push	{r4}
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	6093      	str	r3, [r2, #8]
 8005bce:	da07      	bge.n	8005be0 <__sfputc_r+0x1c>
 8005bd0:	6994      	ldr	r4, [r2, #24]
 8005bd2:	42a3      	cmp	r3, r4
 8005bd4:	db01      	blt.n	8005bda <__sfputc_r+0x16>
 8005bd6:	290a      	cmp	r1, #10
 8005bd8:	d102      	bne.n	8005be0 <__sfputc_r+0x1c>
 8005bda:	bc10      	pop	{r4}
 8005bdc:	f7ff bbf0 	b.w	80053c0 <__swbuf_r>
 8005be0:	6813      	ldr	r3, [r2, #0]
 8005be2:	1c58      	adds	r0, r3, #1
 8005be4:	6010      	str	r0, [r2, #0]
 8005be6:	7019      	strb	r1, [r3, #0]
 8005be8:	4608      	mov	r0, r1
 8005bea:	bc10      	pop	{r4}
 8005bec:	4770      	bx	lr

08005bee <__sfputs_r>:
 8005bee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bf0:	4606      	mov	r6, r0
 8005bf2:	460f      	mov	r7, r1
 8005bf4:	4614      	mov	r4, r2
 8005bf6:	18d5      	adds	r5, r2, r3
 8005bf8:	42ac      	cmp	r4, r5
 8005bfa:	d101      	bne.n	8005c00 <__sfputs_r+0x12>
 8005bfc:	2000      	movs	r0, #0
 8005bfe:	e007      	b.n	8005c10 <__sfputs_r+0x22>
 8005c00:	463a      	mov	r2, r7
 8005c02:	4630      	mov	r0, r6
 8005c04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c08:	f7ff ffdc 	bl	8005bc4 <__sfputc_r>
 8005c0c:	1c43      	adds	r3, r0, #1
 8005c0e:	d1f3      	bne.n	8005bf8 <__sfputs_r+0xa>
 8005c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005c14 <_vfiprintf_r>:
 8005c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c18:	460d      	mov	r5, r1
 8005c1a:	4614      	mov	r4, r2
 8005c1c:	4698      	mov	r8, r3
 8005c1e:	4606      	mov	r6, r0
 8005c20:	b09d      	sub	sp, #116	; 0x74
 8005c22:	b118      	cbz	r0, 8005c2c <_vfiprintf_r+0x18>
 8005c24:	6983      	ldr	r3, [r0, #24]
 8005c26:	b90b      	cbnz	r3, 8005c2c <_vfiprintf_r+0x18>
 8005c28:	f7ff fdbe 	bl	80057a8 <__sinit>
 8005c2c:	4b89      	ldr	r3, [pc, #548]	; (8005e54 <_vfiprintf_r+0x240>)
 8005c2e:	429d      	cmp	r5, r3
 8005c30:	d11b      	bne.n	8005c6a <_vfiprintf_r+0x56>
 8005c32:	6875      	ldr	r5, [r6, #4]
 8005c34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c36:	07d9      	lsls	r1, r3, #31
 8005c38:	d405      	bmi.n	8005c46 <_vfiprintf_r+0x32>
 8005c3a:	89ab      	ldrh	r3, [r5, #12]
 8005c3c:	059a      	lsls	r2, r3, #22
 8005c3e:	d402      	bmi.n	8005c46 <_vfiprintf_r+0x32>
 8005c40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c42:	f7ff fe74 	bl	800592e <__retarget_lock_acquire_recursive>
 8005c46:	89ab      	ldrh	r3, [r5, #12]
 8005c48:	071b      	lsls	r3, r3, #28
 8005c4a:	d501      	bpl.n	8005c50 <_vfiprintf_r+0x3c>
 8005c4c:	692b      	ldr	r3, [r5, #16]
 8005c4e:	b9eb      	cbnz	r3, 8005c8c <_vfiprintf_r+0x78>
 8005c50:	4629      	mov	r1, r5
 8005c52:	4630      	mov	r0, r6
 8005c54:	f7ff fc06 	bl	8005464 <__swsetup_r>
 8005c58:	b1c0      	cbz	r0, 8005c8c <_vfiprintf_r+0x78>
 8005c5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c5c:	07dc      	lsls	r4, r3, #31
 8005c5e:	d50e      	bpl.n	8005c7e <_vfiprintf_r+0x6a>
 8005c60:	f04f 30ff 	mov.w	r0, #4294967295
 8005c64:	b01d      	add	sp, #116	; 0x74
 8005c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c6a:	4b7b      	ldr	r3, [pc, #492]	; (8005e58 <_vfiprintf_r+0x244>)
 8005c6c:	429d      	cmp	r5, r3
 8005c6e:	d101      	bne.n	8005c74 <_vfiprintf_r+0x60>
 8005c70:	68b5      	ldr	r5, [r6, #8]
 8005c72:	e7df      	b.n	8005c34 <_vfiprintf_r+0x20>
 8005c74:	4b79      	ldr	r3, [pc, #484]	; (8005e5c <_vfiprintf_r+0x248>)
 8005c76:	429d      	cmp	r5, r3
 8005c78:	bf08      	it	eq
 8005c7a:	68f5      	ldreq	r5, [r6, #12]
 8005c7c:	e7da      	b.n	8005c34 <_vfiprintf_r+0x20>
 8005c7e:	89ab      	ldrh	r3, [r5, #12]
 8005c80:	0598      	lsls	r0, r3, #22
 8005c82:	d4ed      	bmi.n	8005c60 <_vfiprintf_r+0x4c>
 8005c84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c86:	f7ff fe53 	bl	8005930 <__retarget_lock_release_recursive>
 8005c8a:	e7e9      	b.n	8005c60 <_vfiprintf_r+0x4c>
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	9309      	str	r3, [sp, #36]	; 0x24
 8005c90:	2320      	movs	r3, #32
 8005c92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c96:	2330      	movs	r3, #48	; 0x30
 8005c98:	f04f 0901 	mov.w	r9, #1
 8005c9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ca0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005e60 <_vfiprintf_r+0x24c>
 8005ca4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ca8:	4623      	mov	r3, r4
 8005caa:	469a      	mov	sl, r3
 8005cac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cb0:	b10a      	cbz	r2, 8005cb6 <_vfiprintf_r+0xa2>
 8005cb2:	2a25      	cmp	r2, #37	; 0x25
 8005cb4:	d1f9      	bne.n	8005caa <_vfiprintf_r+0x96>
 8005cb6:	ebba 0b04 	subs.w	fp, sl, r4
 8005cba:	d00b      	beq.n	8005cd4 <_vfiprintf_r+0xc0>
 8005cbc:	465b      	mov	r3, fp
 8005cbe:	4622      	mov	r2, r4
 8005cc0:	4629      	mov	r1, r5
 8005cc2:	4630      	mov	r0, r6
 8005cc4:	f7ff ff93 	bl	8005bee <__sfputs_r>
 8005cc8:	3001      	adds	r0, #1
 8005cca:	f000 80aa 	beq.w	8005e22 <_vfiprintf_r+0x20e>
 8005cce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cd0:	445a      	add	r2, fp
 8005cd2:	9209      	str	r2, [sp, #36]	; 0x24
 8005cd4:	f89a 3000 	ldrb.w	r3, [sl]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f000 80a2 	beq.w	8005e22 <_vfiprintf_r+0x20e>
 8005cde:	2300      	movs	r3, #0
 8005ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ce4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ce8:	f10a 0a01 	add.w	sl, sl, #1
 8005cec:	9304      	str	r3, [sp, #16]
 8005cee:	9307      	str	r3, [sp, #28]
 8005cf0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005cf4:	931a      	str	r3, [sp, #104]	; 0x68
 8005cf6:	4654      	mov	r4, sl
 8005cf8:	2205      	movs	r2, #5
 8005cfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cfe:	4858      	ldr	r0, [pc, #352]	; (8005e60 <_vfiprintf_r+0x24c>)
 8005d00:	f000 fb00 	bl	8006304 <memchr>
 8005d04:	9a04      	ldr	r2, [sp, #16]
 8005d06:	b9d8      	cbnz	r0, 8005d40 <_vfiprintf_r+0x12c>
 8005d08:	06d1      	lsls	r1, r2, #27
 8005d0a:	bf44      	itt	mi
 8005d0c:	2320      	movmi	r3, #32
 8005d0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d12:	0713      	lsls	r3, r2, #28
 8005d14:	bf44      	itt	mi
 8005d16:	232b      	movmi	r3, #43	; 0x2b
 8005d18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d1c:	f89a 3000 	ldrb.w	r3, [sl]
 8005d20:	2b2a      	cmp	r3, #42	; 0x2a
 8005d22:	d015      	beq.n	8005d50 <_vfiprintf_r+0x13c>
 8005d24:	4654      	mov	r4, sl
 8005d26:	2000      	movs	r0, #0
 8005d28:	f04f 0c0a 	mov.w	ip, #10
 8005d2c:	9a07      	ldr	r2, [sp, #28]
 8005d2e:	4621      	mov	r1, r4
 8005d30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d34:	3b30      	subs	r3, #48	; 0x30
 8005d36:	2b09      	cmp	r3, #9
 8005d38:	d94e      	bls.n	8005dd8 <_vfiprintf_r+0x1c4>
 8005d3a:	b1b0      	cbz	r0, 8005d6a <_vfiprintf_r+0x156>
 8005d3c:	9207      	str	r2, [sp, #28]
 8005d3e:	e014      	b.n	8005d6a <_vfiprintf_r+0x156>
 8005d40:	eba0 0308 	sub.w	r3, r0, r8
 8005d44:	fa09 f303 	lsl.w	r3, r9, r3
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	46a2      	mov	sl, r4
 8005d4c:	9304      	str	r3, [sp, #16]
 8005d4e:	e7d2      	b.n	8005cf6 <_vfiprintf_r+0xe2>
 8005d50:	9b03      	ldr	r3, [sp, #12]
 8005d52:	1d19      	adds	r1, r3, #4
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	9103      	str	r1, [sp, #12]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	bfbb      	ittet	lt
 8005d5c:	425b      	neglt	r3, r3
 8005d5e:	f042 0202 	orrlt.w	r2, r2, #2
 8005d62:	9307      	strge	r3, [sp, #28]
 8005d64:	9307      	strlt	r3, [sp, #28]
 8005d66:	bfb8      	it	lt
 8005d68:	9204      	strlt	r2, [sp, #16]
 8005d6a:	7823      	ldrb	r3, [r4, #0]
 8005d6c:	2b2e      	cmp	r3, #46	; 0x2e
 8005d6e:	d10c      	bne.n	8005d8a <_vfiprintf_r+0x176>
 8005d70:	7863      	ldrb	r3, [r4, #1]
 8005d72:	2b2a      	cmp	r3, #42	; 0x2a
 8005d74:	d135      	bne.n	8005de2 <_vfiprintf_r+0x1ce>
 8005d76:	9b03      	ldr	r3, [sp, #12]
 8005d78:	3402      	adds	r4, #2
 8005d7a:	1d1a      	adds	r2, r3, #4
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	9203      	str	r2, [sp, #12]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	bfb8      	it	lt
 8005d84:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d88:	9305      	str	r3, [sp, #20]
 8005d8a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005e64 <_vfiprintf_r+0x250>
 8005d8e:	2203      	movs	r2, #3
 8005d90:	4650      	mov	r0, sl
 8005d92:	7821      	ldrb	r1, [r4, #0]
 8005d94:	f000 fab6 	bl	8006304 <memchr>
 8005d98:	b140      	cbz	r0, 8005dac <_vfiprintf_r+0x198>
 8005d9a:	2340      	movs	r3, #64	; 0x40
 8005d9c:	eba0 000a 	sub.w	r0, r0, sl
 8005da0:	fa03 f000 	lsl.w	r0, r3, r0
 8005da4:	9b04      	ldr	r3, [sp, #16]
 8005da6:	3401      	adds	r4, #1
 8005da8:	4303      	orrs	r3, r0
 8005daa:	9304      	str	r3, [sp, #16]
 8005dac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005db0:	2206      	movs	r2, #6
 8005db2:	482d      	ldr	r0, [pc, #180]	; (8005e68 <_vfiprintf_r+0x254>)
 8005db4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005db8:	f000 faa4 	bl	8006304 <memchr>
 8005dbc:	2800      	cmp	r0, #0
 8005dbe:	d03f      	beq.n	8005e40 <_vfiprintf_r+0x22c>
 8005dc0:	4b2a      	ldr	r3, [pc, #168]	; (8005e6c <_vfiprintf_r+0x258>)
 8005dc2:	bb1b      	cbnz	r3, 8005e0c <_vfiprintf_r+0x1f8>
 8005dc4:	9b03      	ldr	r3, [sp, #12]
 8005dc6:	3307      	adds	r3, #7
 8005dc8:	f023 0307 	bic.w	r3, r3, #7
 8005dcc:	3308      	adds	r3, #8
 8005dce:	9303      	str	r3, [sp, #12]
 8005dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dd2:	443b      	add	r3, r7
 8005dd4:	9309      	str	r3, [sp, #36]	; 0x24
 8005dd6:	e767      	b.n	8005ca8 <_vfiprintf_r+0x94>
 8005dd8:	460c      	mov	r4, r1
 8005dda:	2001      	movs	r0, #1
 8005ddc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005de0:	e7a5      	b.n	8005d2e <_vfiprintf_r+0x11a>
 8005de2:	2300      	movs	r3, #0
 8005de4:	f04f 0c0a 	mov.w	ip, #10
 8005de8:	4619      	mov	r1, r3
 8005dea:	3401      	adds	r4, #1
 8005dec:	9305      	str	r3, [sp, #20]
 8005dee:	4620      	mov	r0, r4
 8005df0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005df4:	3a30      	subs	r2, #48	; 0x30
 8005df6:	2a09      	cmp	r2, #9
 8005df8:	d903      	bls.n	8005e02 <_vfiprintf_r+0x1ee>
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d0c5      	beq.n	8005d8a <_vfiprintf_r+0x176>
 8005dfe:	9105      	str	r1, [sp, #20]
 8005e00:	e7c3      	b.n	8005d8a <_vfiprintf_r+0x176>
 8005e02:	4604      	mov	r4, r0
 8005e04:	2301      	movs	r3, #1
 8005e06:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e0a:	e7f0      	b.n	8005dee <_vfiprintf_r+0x1da>
 8005e0c:	ab03      	add	r3, sp, #12
 8005e0e:	9300      	str	r3, [sp, #0]
 8005e10:	462a      	mov	r2, r5
 8005e12:	4630      	mov	r0, r6
 8005e14:	4b16      	ldr	r3, [pc, #88]	; (8005e70 <_vfiprintf_r+0x25c>)
 8005e16:	a904      	add	r1, sp, #16
 8005e18:	f3af 8000 	nop.w
 8005e1c:	4607      	mov	r7, r0
 8005e1e:	1c78      	adds	r0, r7, #1
 8005e20:	d1d6      	bne.n	8005dd0 <_vfiprintf_r+0x1bc>
 8005e22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e24:	07d9      	lsls	r1, r3, #31
 8005e26:	d405      	bmi.n	8005e34 <_vfiprintf_r+0x220>
 8005e28:	89ab      	ldrh	r3, [r5, #12]
 8005e2a:	059a      	lsls	r2, r3, #22
 8005e2c:	d402      	bmi.n	8005e34 <_vfiprintf_r+0x220>
 8005e2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e30:	f7ff fd7e 	bl	8005930 <__retarget_lock_release_recursive>
 8005e34:	89ab      	ldrh	r3, [r5, #12]
 8005e36:	065b      	lsls	r3, r3, #25
 8005e38:	f53f af12 	bmi.w	8005c60 <_vfiprintf_r+0x4c>
 8005e3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e3e:	e711      	b.n	8005c64 <_vfiprintf_r+0x50>
 8005e40:	ab03      	add	r3, sp, #12
 8005e42:	9300      	str	r3, [sp, #0]
 8005e44:	462a      	mov	r2, r5
 8005e46:	4630      	mov	r0, r6
 8005e48:	4b09      	ldr	r3, [pc, #36]	; (8005e70 <_vfiprintf_r+0x25c>)
 8005e4a:	a904      	add	r1, sp, #16
 8005e4c:	f000 f882 	bl	8005f54 <_printf_i>
 8005e50:	e7e4      	b.n	8005e1c <_vfiprintf_r+0x208>
 8005e52:	bf00      	nop
 8005e54:	08006d00 	.word	0x08006d00
 8005e58:	08006d20 	.word	0x08006d20
 8005e5c:	08006ce0 	.word	0x08006ce0
 8005e60:	08006d40 	.word	0x08006d40
 8005e64:	08006d46 	.word	0x08006d46
 8005e68:	08006d4a 	.word	0x08006d4a
 8005e6c:	00000000 	.word	0x00000000
 8005e70:	08005bef 	.word	0x08005bef

08005e74 <_printf_common>:
 8005e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e78:	4616      	mov	r6, r2
 8005e7a:	4699      	mov	r9, r3
 8005e7c:	688a      	ldr	r2, [r1, #8]
 8005e7e:	690b      	ldr	r3, [r1, #16]
 8005e80:	4607      	mov	r7, r0
 8005e82:	4293      	cmp	r3, r2
 8005e84:	bfb8      	it	lt
 8005e86:	4613      	movlt	r3, r2
 8005e88:	6033      	str	r3, [r6, #0]
 8005e8a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e8e:	460c      	mov	r4, r1
 8005e90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e94:	b10a      	cbz	r2, 8005e9a <_printf_common+0x26>
 8005e96:	3301      	adds	r3, #1
 8005e98:	6033      	str	r3, [r6, #0]
 8005e9a:	6823      	ldr	r3, [r4, #0]
 8005e9c:	0699      	lsls	r1, r3, #26
 8005e9e:	bf42      	ittt	mi
 8005ea0:	6833      	ldrmi	r3, [r6, #0]
 8005ea2:	3302      	addmi	r3, #2
 8005ea4:	6033      	strmi	r3, [r6, #0]
 8005ea6:	6825      	ldr	r5, [r4, #0]
 8005ea8:	f015 0506 	ands.w	r5, r5, #6
 8005eac:	d106      	bne.n	8005ebc <_printf_common+0x48>
 8005eae:	f104 0a19 	add.w	sl, r4, #25
 8005eb2:	68e3      	ldr	r3, [r4, #12]
 8005eb4:	6832      	ldr	r2, [r6, #0]
 8005eb6:	1a9b      	subs	r3, r3, r2
 8005eb8:	42ab      	cmp	r3, r5
 8005eba:	dc28      	bgt.n	8005f0e <_printf_common+0x9a>
 8005ebc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ec0:	1e13      	subs	r3, r2, #0
 8005ec2:	6822      	ldr	r2, [r4, #0]
 8005ec4:	bf18      	it	ne
 8005ec6:	2301      	movne	r3, #1
 8005ec8:	0692      	lsls	r2, r2, #26
 8005eca:	d42d      	bmi.n	8005f28 <_printf_common+0xb4>
 8005ecc:	4649      	mov	r1, r9
 8005ece:	4638      	mov	r0, r7
 8005ed0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ed4:	47c0      	blx	r8
 8005ed6:	3001      	adds	r0, #1
 8005ed8:	d020      	beq.n	8005f1c <_printf_common+0xa8>
 8005eda:	6823      	ldr	r3, [r4, #0]
 8005edc:	68e5      	ldr	r5, [r4, #12]
 8005ede:	f003 0306 	and.w	r3, r3, #6
 8005ee2:	2b04      	cmp	r3, #4
 8005ee4:	bf18      	it	ne
 8005ee6:	2500      	movne	r5, #0
 8005ee8:	6832      	ldr	r2, [r6, #0]
 8005eea:	f04f 0600 	mov.w	r6, #0
 8005eee:	68a3      	ldr	r3, [r4, #8]
 8005ef0:	bf08      	it	eq
 8005ef2:	1aad      	subeq	r5, r5, r2
 8005ef4:	6922      	ldr	r2, [r4, #16]
 8005ef6:	bf08      	it	eq
 8005ef8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005efc:	4293      	cmp	r3, r2
 8005efe:	bfc4      	itt	gt
 8005f00:	1a9b      	subgt	r3, r3, r2
 8005f02:	18ed      	addgt	r5, r5, r3
 8005f04:	341a      	adds	r4, #26
 8005f06:	42b5      	cmp	r5, r6
 8005f08:	d11a      	bne.n	8005f40 <_printf_common+0xcc>
 8005f0a:	2000      	movs	r0, #0
 8005f0c:	e008      	b.n	8005f20 <_printf_common+0xac>
 8005f0e:	2301      	movs	r3, #1
 8005f10:	4652      	mov	r2, sl
 8005f12:	4649      	mov	r1, r9
 8005f14:	4638      	mov	r0, r7
 8005f16:	47c0      	blx	r8
 8005f18:	3001      	adds	r0, #1
 8005f1a:	d103      	bne.n	8005f24 <_printf_common+0xb0>
 8005f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f24:	3501      	adds	r5, #1
 8005f26:	e7c4      	b.n	8005eb2 <_printf_common+0x3e>
 8005f28:	2030      	movs	r0, #48	; 0x30
 8005f2a:	18e1      	adds	r1, r4, r3
 8005f2c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f30:	1c5a      	adds	r2, r3, #1
 8005f32:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f36:	4422      	add	r2, r4
 8005f38:	3302      	adds	r3, #2
 8005f3a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f3e:	e7c5      	b.n	8005ecc <_printf_common+0x58>
 8005f40:	2301      	movs	r3, #1
 8005f42:	4622      	mov	r2, r4
 8005f44:	4649      	mov	r1, r9
 8005f46:	4638      	mov	r0, r7
 8005f48:	47c0      	blx	r8
 8005f4a:	3001      	adds	r0, #1
 8005f4c:	d0e6      	beq.n	8005f1c <_printf_common+0xa8>
 8005f4e:	3601      	adds	r6, #1
 8005f50:	e7d9      	b.n	8005f06 <_printf_common+0x92>
	...

08005f54 <_printf_i>:
 8005f54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f58:	7e0f      	ldrb	r7, [r1, #24]
 8005f5a:	4691      	mov	r9, r2
 8005f5c:	2f78      	cmp	r7, #120	; 0x78
 8005f5e:	4680      	mov	r8, r0
 8005f60:	460c      	mov	r4, r1
 8005f62:	469a      	mov	sl, r3
 8005f64:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f6a:	d807      	bhi.n	8005f7c <_printf_i+0x28>
 8005f6c:	2f62      	cmp	r7, #98	; 0x62
 8005f6e:	d80a      	bhi.n	8005f86 <_printf_i+0x32>
 8005f70:	2f00      	cmp	r7, #0
 8005f72:	f000 80d9 	beq.w	8006128 <_printf_i+0x1d4>
 8005f76:	2f58      	cmp	r7, #88	; 0x58
 8005f78:	f000 80a4 	beq.w	80060c4 <_printf_i+0x170>
 8005f7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f84:	e03a      	b.n	8005ffc <_printf_i+0xa8>
 8005f86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f8a:	2b15      	cmp	r3, #21
 8005f8c:	d8f6      	bhi.n	8005f7c <_printf_i+0x28>
 8005f8e:	a101      	add	r1, pc, #4	; (adr r1, 8005f94 <_printf_i+0x40>)
 8005f90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f94:	08005fed 	.word	0x08005fed
 8005f98:	08006001 	.word	0x08006001
 8005f9c:	08005f7d 	.word	0x08005f7d
 8005fa0:	08005f7d 	.word	0x08005f7d
 8005fa4:	08005f7d 	.word	0x08005f7d
 8005fa8:	08005f7d 	.word	0x08005f7d
 8005fac:	08006001 	.word	0x08006001
 8005fb0:	08005f7d 	.word	0x08005f7d
 8005fb4:	08005f7d 	.word	0x08005f7d
 8005fb8:	08005f7d 	.word	0x08005f7d
 8005fbc:	08005f7d 	.word	0x08005f7d
 8005fc0:	0800610f 	.word	0x0800610f
 8005fc4:	08006031 	.word	0x08006031
 8005fc8:	080060f1 	.word	0x080060f1
 8005fcc:	08005f7d 	.word	0x08005f7d
 8005fd0:	08005f7d 	.word	0x08005f7d
 8005fd4:	08006131 	.word	0x08006131
 8005fd8:	08005f7d 	.word	0x08005f7d
 8005fdc:	08006031 	.word	0x08006031
 8005fe0:	08005f7d 	.word	0x08005f7d
 8005fe4:	08005f7d 	.word	0x08005f7d
 8005fe8:	080060f9 	.word	0x080060f9
 8005fec:	682b      	ldr	r3, [r5, #0]
 8005fee:	1d1a      	adds	r2, r3, #4
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	602a      	str	r2, [r5, #0]
 8005ff4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ff8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e0a4      	b.n	800614a <_printf_i+0x1f6>
 8006000:	6820      	ldr	r0, [r4, #0]
 8006002:	6829      	ldr	r1, [r5, #0]
 8006004:	0606      	lsls	r6, r0, #24
 8006006:	f101 0304 	add.w	r3, r1, #4
 800600a:	d50a      	bpl.n	8006022 <_printf_i+0xce>
 800600c:	680e      	ldr	r6, [r1, #0]
 800600e:	602b      	str	r3, [r5, #0]
 8006010:	2e00      	cmp	r6, #0
 8006012:	da03      	bge.n	800601c <_printf_i+0xc8>
 8006014:	232d      	movs	r3, #45	; 0x2d
 8006016:	4276      	negs	r6, r6
 8006018:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800601c:	230a      	movs	r3, #10
 800601e:	485e      	ldr	r0, [pc, #376]	; (8006198 <_printf_i+0x244>)
 8006020:	e019      	b.n	8006056 <_printf_i+0x102>
 8006022:	680e      	ldr	r6, [r1, #0]
 8006024:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006028:	602b      	str	r3, [r5, #0]
 800602a:	bf18      	it	ne
 800602c:	b236      	sxthne	r6, r6
 800602e:	e7ef      	b.n	8006010 <_printf_i+0xbc>
 8006030:	682b      	ldr	r3, [r5, #0]
 8006032:	6820      	ldr	r0, [r4, #0]
 8006034:	1d19      	adds	r1, r3, #4
 8006036:	6029      	str	r1, [r5, #0]
 8006038:	0601      	lsls	r1, r0, #24
 800603a:	d501      	bpl.n	8006040 <_printf_i+0xec>
 800603c:	681e      	ldr	r6, [r3, #0]
 800603e:	e002      	b.n	8006046 <_printf_i+0xf2>
 8006040:	0646      	lsls	r6, r0, #25
 8006042:	d5fb      	bpl.n	800603c <_printf_i+0xe8>
 8006044:	881e      	ldrh	r6, [r3, #0]
 8006046:	2f6f      	cmp	r7, #111	; 0x6f
 8006048:	bf0c      	ite	eq
 800604a:	2308      	moveq	r3, #8
 800604c:	230a      	movne	r3, #10
 800604e:	4852      	ldr	r0, [pc, #328]	; (8006198 <_printf_i+0x244>)
 8006050:	2100      	movs	r1, #0
 8006052:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006056:	6865      	ldr	r5, [r4, #4]
 8006058:	2d00      	cmp	r5, #0
 800605a:	bfa8      	it	ge
 800605c:	6821      	ldrge	r1, [r4, #0]
 800605e:	60a5      	str	r5, [r4, #8]
 8006060:	bfa4      	itt	ge
 8006062:	f021 0104 	bicge.w	r1, r1, #4
 8006066:	6021      	strge	r1, [r4, #0]
 8006068:	b90e      	cbnz	r6, 800606e <_printf_i+0x11a>
 800606a:	2d00      	cmp	r5, #0
 800606c:	d04d      	beq.n	800610a <_printf_i+0x1b6>
 800606e:	4615      	mov	r5, r2
 8006070:	fbb6 f1f3 	udiv	r1, r6, r3
 8006074:	fb03 6711 	mls	r7, r3, r1, r6
 8006078:	5dc7      	ldrb	r7, [r0, r7]
 800607a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800607e:	4637      	mov	r7, r6
 8006080:	42bb      	cmp	r3, r7
 8006082:	460e      	mov	r6, r1
 8006084:	d9f4      	bls.n	8006070 <_printf_i+0x11c>
 8006086:	2b08      	cmp	r3, #8
 8006088:	d10b      	bne.n	80060a2 <_printf_i+0x14e>
 800608a:	6823      	ldr	r3, [r4, #0]
 800608c:	07de      	lsls	r6, r3, #31
 800608e:	d508      	bpl.n	80060a2 <_printf_i+0x14e>
 8006090:	6923      	ldr	r3, [r4, #16]
 8006092:	6861      	ldr	r1, [r4, #4]
 8006094:	4299      	cmp	r1, r3
 8006096:	bfde      	ittt	le
 8006098:	2330      	movle	r3, #48	; 0x30
 800609a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800609e:	f105 35ff 	addle.w	r5, r5, #4294967295
 80060a2:	1b52      	subs	r2, r2, r5
 80060a4:	6122      	str	r2, [r4, #16]
 80060a6:	464b      	mov	r3, r9
 80060a8:	4621      	mov	r1, r4
 80060aa:	4640      	mov	r0, r8
 80060ac:	f8cd a000 	str.w	sl, [sp]
 80060b0:	aa03      	add	r2, sp, #12
 80060b2:	f7ff fedf 	bl	8005e74 <_printf_common>
 80060b6:	3001      	adds	r0, #1
 80060b8:	d14c      	bne.n	8006154 <_printf_i+0x200>
 80060ba:	f04f 30ff 	mov.w	r0, #4294967295
 80060be:	b004      	add	sp, #16
 80060c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060c4:	4834      	ldr	r0, [pc, #208]	; (8006198 <_printf_i+0x244>)
 80060c6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80060ca:	6829      	ldr	r1, [r5, #0]
 80060cc:	6823      	ldr	r3, [r4, #0]
 80060ce:	f851 6b04 	ldr.w	r6, [r1], #4
 80060d2:	6029      	str	r1, [r5, #0]
 80060d4:	061d      	lsls	r5, r3, #24
 80060d6:	d514      	bpl.n	8006102 <_printf_i+0x1ae>
 80060d8:	07df      	lsls	r7, r3, #31
 80060da:	bf44      	itt	mi
 80060dc:	f043 0320 	orrmi.w	r3, r3, #32
 80060e0:	6023      	strmi	r3, [r4, #0]
 80060e2:	b91e      	cbnz	r6, 80060ec <_printf_i+0x198>
 80060e4:	6823      	ldr	r3, [r4, #0]
 80060e6:	f023 0320 	bic.w	r3, r3, #32
 80060ea:	6023      	str	r3, [r4, #0]
 80060ec:	2310      	movs	r3, #16
 80060ee:	e7af      	b.n	8006050 <_printf_i+0xfc>
 80060f0:	6823      	ldr	r3, [r4, #0]
 80060f2:	f043 0320 	orr.w	r3, r3, #32
 80060f6:	6023      	str	r3, [r4, #0]
 80060f8:	2378      	movs	r3, #120	; 0x78
 80060fa:	4828      	ldr	r0, [pc, #160]	; (800619c <_printf_i+0x248>)
 80060fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006100:	e7e3      	b.n	80060ca <_printf_i+0x176>
 8006102:	0659      	lsls	r1, r3, #25
 8006104:	bf48      	it	mi
 8006106:	b2b6      	uxthmi	r6, r6
 8006108:	e7e6      	b.n	80060d8 <_printf_i+0x184>
 800610a:	4615      	mov	r5, r2
 800610c:	e7bb      	b.n	8006086 <_printf_i+0x132>
 800610e:	682b      	ldr	r3, [r5, #0]
 8006110:	6826      	ldr	r6, [r4, #0]
 8006112:	1d18      	adds	r0, r3, #4
 8006114:	6961      	ldr	r1, [r4, #20]
 8006116:	6028      	str	r0, [r5, #0]
 8006118:	0635      	lsls	r5, r6, #24
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	d501      	bpl.n	8006122 <_printf_i+0x1ce>
 800611e:	6019      	str	r1, [r3, #0]
 8006120:	e002      	b.n	8006128 <_printf_i+0x1d4>
 8006122:	0670      	lsls	r0, r6, #25
 8006124:	d5fb      	bpl.n	800611e <_printf_i+0x1ca>
 8006126:	8019      	strh	r1, [r3, #0]
 8006128:	2300      	movs	r3, #0
 800612a:	4615      	mov	r5, r2
 800612c:	6123      	str	r3, [r4, #16]
 800612e:	e7ba      	b.n	80060a6 <_printf_i+0x152>
 8006130:	682b      	ldr	r3, [r5, #0]
 8006132:	2100      	movs	r1, #0
 8006134:	1d1a      	adds	r2, r3, #4
 8006136:	602a      	str	r2, [r5, #0]
 8006138:	681d      	ldr	r5, [r3, #0]
 800613a:	6862      	ldr	r2, [r4, #4]
 800613c:	4628      	mov	r0, r5
 800613e:	f000 f8e1 	bl	8006304 <memchr>
 8006142:	b108      	cbz	r0, 8006148 <_printf_i+0x1f4>
 8006144:	1b40      	subs	r0, r0, r5
 8006146:	6060      	str	r0, [r4, #4]
 8006148:	6863      	ldr	r3, [r4, #4]
 800614a:	6123      	str	r3, [r4, #16]
 800614c:	2300      	movs	r3, #0
 800614e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006152:	e7a8      	b.n	80060a6 <_printf_i+0x152>
 8006154:	462a      	mov	r2, r5
 8006156:	4649      	mov	r1, r9
 8006158:	4640      	mov	r0, r8
 800615a:	6923      	ldr	r3, [r4, #16]
 800615c:	47d0      	blx	sl
 800615e:	3001      	adds	r0, #1
 8006160:	d0ab      	beq.n	80060ba <_printf_i+0x166>
 8006162:	6823      	ldr	r3, [r4, #0]
 8006164:	079b      	lsls	r3, r3, #30
 8006166:	d413      	bmi.n	8006190 <_printf_i+0x23c>
 8006168:	68e0      	ldr	r0, [r4, #12]
 800616a:	9b03      	ldr	r3, [sp, #12]
 800616c:	4298      	cmp	r0, r3
 800616e:	bfb8      	it	lt
 8006170:	4618      	movlt	r0, r3
 8006172:	e7a4      	b.n	80060be <_printf_i+0x16a>
 8006174:	2301      	movs	r3, #1
 8006176:	4632      	mov	r2, r6
 8006178:	4649      	mov	r1, r9
 800617a:	4640      	mov	r0, r8
 800617c:	47d0      	blx	sl
 800617e:	3001      	adds	r0, #1
 8006180:	d09b      	beq.n	80060ba <_printf_i+0x166>
 8006182:	3501      	adds	r5, #1
 8006184:	68e3      	ldr	r3, [r4, #12]
 8006186:	9903      	ldr	r1, [sp, #12]
 8006188:	1a5b      	subs	r3, r3, r1
 800618a:	42ab      	cmp	r3, r5
 800618c:	dcf2      	bgt.n	8006174 <_printf_i+0x220>
 800618e:	e7eb      	b.n	8006168 <_printf_i+0x214>
 8006190:	2500      	movs	r5, #0
 8006192:	f104 0619 	add.w	r6, r4, #25
 8006196:	e7f5      	b.n	8006184 <_printf_i+0x230>
 8006198:	08006d51 	.word	0x08006d51
 800619c:	08006d62 	.word	0x08006d62

080061a0 <_sbrk_r>:
 80061a0:	b538      	push	{r3, r4, r5, lr}
 80061a2:	2300      	movs	r3, #0
 80061a4:	4d05      	ldr	r5, [pc, #20]	; (80061bc <_sbrk_r+0x1c>)
 80061a6:	4604      	mov	r4, r0
 80061a8:	4608      	mov	r0, r1
 80061aa:	602b      	str	r3, [r5, #0]
 80061ac:	f7fc fcae 	bl	8002b0c <_sbrk>
 80061b0:	1c43      	adds	r3, r0, #1
 80061b2:	d102      	bne.n	80061ba <_sbrk_r+0x1a>
 80061b4:	682b      	ldr	r3, [r5, #0]
 80061b6:	b103      	cbz	r3, 80061ba <_sbrk_r+0x1a>
 80061b8:	6023      	str	r3, [r4, #0]
 80061ba:	bd38      	pop	{r3, r4, r5, pc}
 80061bc:	20003c9c 	.word	0x20003c9c

080061c0 <__sread>:
 80061c0:	b510      	push	{r4, lr}
 80061c2:	460c      	mov	r4, r1
 80061c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061c8:	f000 f8b6 	bl	8006338 <_read_r>
 80061cc:	2800      	cmp	r0, #0
 80061ce:	bfab      	itete	ge
 80061d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80061d2:	89a3      	ldrhlt	r3, [r4, #12]
 80061d4:	181b      	addge	r3, r3, r0
 80061d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80061da:	bfac      	ite	ge
 80061dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80061de:	81a3      	strhlt	r3, [r4, #12]
 80061e0:	bd10      	pop	{r4, pc}

080061e2 <__swrite>:
 80061e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061e6:	461f      	mov	r7, r3
 80061e8:	898b      	ldrh	r3, [r1, #12]
 80061ea:	4605      	mov	r5, r0
 80061ec:	05db      	lsls	r3, r3, #23
 80061ee:	460c      	mov	r4, r1
 80061f0:	4616      	mov	r6, r2
 80061f2:	d505      	bpl.n	8006200 <__swrite+0x1e>
 80061f4:	2302      	movs	r3, #2
 80061f6:	2200      	movs	r2, #0
 80061f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061fc:	f000 f870 	bl	80062e0 <_lseek_r>
 8006200:	89a3      	ldrh	r3, [r4, #12]
 8006202:	4632      	mov	r2, r6
 8006204:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006208:	81a3      	strh	r3, [r4, #12]
 800620a:	4628      	mov	r0, r5
 800620c:	463b      	mov	r3, r7
 800620e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006212:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006216:	f000 b817 	b.w	8006248 <_write_r>

0800621a <__sseek>:
 800621a:	b510      	push	{r4, lr}
 800621c:	460c      	mov	r4, r1
 800621e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006222:	f000 f85d 	bl	80062e0 <_lseek_r>
 8006226:	1c43      	adds	r3, r0, #1
 8006228:	89a3      	ldrh	r3, [r4, #12]
 800622a:	bf15      	itete	ne
 800622c:	6560      	strne	r0, [r4, #84]	; 0x54
 800622e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006232:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006236:	81a3      	strheq	r3, [r4, #12]
 8006238:	bf18      	it	ne
 800623a:	81a3      	strhne	r3, [r4, #12]
 800623c:	bd10      	pop	{r4, pc}

0800623e <__sclose>:
 800623e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006242:	f000 b81b 	b.w	800627c <_close_r>
	...

08006248 <_write_r>:
 8006248:	b538      	push	{r3, r4, r5, lr}
 800624a:	4604      	mov	r4, r0
 800624c:	4608      	mov	r0, r1
 800624e:	4611      	mov	r1, r2
 8006250:	2200      	movs	r2, #0
 8006252:	4d05      	ldr	r5, [pc, #20]	; (8006268 <_write_r+0x20>)
 8006254:	602a      	str	r2, [r5, #0]
 8006256:	461a      	mov	r2, r3
 8006258:	f7fc fc0c 	bl	8002a74 <_write>
 800625c:	1c43      	adds	r3, r0, #1
 800625e:	d102      	bne.n	8006266 <_write_r+0x1e>
 8006260:	682b      	ldr	r3, [r5, #0]
 8006262:	b103      	cbz	r3, 8006266 <_write_r+0x1e>
 8006264:	6023      	str	r3, [r4, #0]
 8006266:	bd38      	pop	{r3, r4, r5, pc}
 8006268:	20003c9c 	.word	0x20003c9c

0800626c <abort>:
 800626c:	2006      	movs	r0, #6
 800626e:	b508      	push	{r3, lr}
 8006270:	f000 f89c 	bl	80063ac <raise>
 8006274:	2001      	movs	r0, #1
 8006276:	f7fc fbd6 	bl	8002a26 <_exit>
	...

0800627c <_close_r>:
 800627c:	b538      	push	{r3, r4, r5, lr}
 800627e:	2300      	movs	r3, #0
 8006280:	4d05      	ldr	r5, [pc, #20]	; (8006298 <_close_r+0x1c>)
 8006282:	4604      	mov	r4, r0
 8006284:	4608      	mov	r0, r1
 8006286:	602b      	str	r3, [r5, #0]
 8006288:	f7fc fc10 	bl	8002aac <_close>
 800628c:	1c43      	adds	r3, r0, #1
 800628e:	d102      	bne.n	8006296 <_close_r+0x1a>
 8006290:	682b      	ldr	r3, [r5, #0]
 8006292:	b103      	cbz	r3, 8006296 <_close_r+0x1a>
 8006294:	6023      	str	r3, [r4, #0]
 8006296:	bd38      	pop	{r3, r4, r5, pc}
 8006298:	20003c9c 	.word	0x20003c9c

0800629c <_fstat_r>:
 800629c:	b538      	push	{r3, r4, r5, lr}
 800629e:	2300      	movs	r3, #0
 80062a0:	4d06      	ldr	r5, [pc, #24]	; (80062bc <_fstat_r+0x20>)
 80062a2:	4604      	mov	r4, r0
 80062a4:	4608      	mov	r0, r1
 80062a6:	4611      	mov	r1, r2
 80062a8:	602b      	str	r3, [r5, #0]
 80062aa:	f7fc fc0a 	bl	8002ac2 <_fstat>
 80062ae:	1c43      	adds	r3, r0, #1
 80062b0:	d102      	bne.n	80062b8 <_fstat_r+0x1c>
 80062b2:	682b      	ldr	r3, [r5, #0]
 80062b4:	b103      	cbz	r3, 80062b8 <_fstat_r+0x1c>
 80062b6:	6023      	str	r3, [r4, #0]
 80062b8:	bd38      	pop	{r3, r4, r5, pc}
 80062ba:	bf00      	nop
 80062bc:	20003c9c 	.word	0x20003c9c

080062c0 <_isatty_r>:
 80062c0:	b538      	push	{r3, r4, r5, lr}
 80062c2:	2300      	movs	r3, #0
 80062c4:	4d05      	ldr	r5, [pc, #20]	; (80062dc <_isatty_r+0x1c>)
 80062c6:	4604      	mov	r4, r0
 80062c8:	4608      	mov	r0, r1
 80062ca:	602b      	str	r3, [r5, #0]
 80062cc:	f7fc fc08 	bl	8002ae0 <_isatty>
 80062d0:	1c43      	adds	r3, r0, #1
 80062d2:	d102      	bne.n	80062da <_isatty_r+0x1a>
 80062d4:	682b      	ldr	r3, [r5, #0]
 80062d6:	b103      	cbz	r3, 80062da <_isatty_r+0x1a>
 80062d8:	6023      	str	r3, [r4, #0]
 80062da:	bd38      	pop	{r3, r4, r5, pc}
 80062dc:	20003c9c 	.word	0x20003c9c

080062e0 <_lseek_r>:
 80062e0:	b538      	push	{r3, r4, r5, lr}
 80062e2:	4604      	mov	r4, r0
 80062e4:	4608      	mov	r0, r1
 80062e6:	4611      	mov	r1, r2
 80062e8:	2200      	movs	r2, #0
 80062ea:	4d05      	ldr	r5, [pc, #20]	; (8006300 <_lseek_r+0x20>)
 80062ec:	602a      	str	r2, [r5, #0]
 80062ee:	461a      	mov	r2, r3
 80062f0:	f7fc fc00 	bl	8002af4 <_lseek>
 80062f4:	1c43      	adds	r3, r0, #1
 80062f6:	d102      	bne.n	80062fe <_lseek_r+0x1e>
 80062f8:	682b      	ldr	r3, [r5, #0]
 80062fa:	b103      	cbz	r3, 80062fe <_lseek_r+0x1e>
 80062fc:	6023      	str	r3, [r4, #0]
 80062fe:	bd38      	pop	{r3, r4, r5, pc}
 8006300:	20003c9c 	.word	0x20003c9c

08006304 <memchr>:
 8006304:	4603      	mov	r3, r0
 8006306:	b510      	push	{r4, lr}
 8006308:	b2c9      	uxtb	r1, r1
 800630a:	4402      	add	r2, r0
 800630c:	4293      	cmp	r3, r2
 800630e:	4618      	mov	r0, r3
 8006310:	d101      	bne.n	8006316 <memchr+0x12>
 8006312:	2000      	movs	r0, #0
 8006314:	e003      	b.n	800631e <memchr+0x1a>
 8006316:	7804      	ldrb	r4, [r0, #0]
 8006318:	3301      	adds	r3, #1
 800631a:	428c      	cmp	r4, r1
 800631c:	d1f6      	bne.n	800630c <memchr+0x8>
 800631e:	bd10      	pop	{r4, pc}

08006320 <__malloc_lock>:
 8006320:	4801      	ldr	r0, [pc, #4]	; (8006328 <__malloc_lock+0x8>)
 8006322:	f7ff bb04 	b.w	800592e <__retarget_lock_acquire_recursive>
 8006326:	bf00      	nop
 8006328:	20003c90 	.word	0x20003c90

0800632c <__malloc_unlock>:
 800632c:	4801      	ldr	r0, [pc, #4]	; (8006334 <__malloc_unlock+0x8>)
 800632e:	f7ff baff 	b.w	8005930 <__retarget_lock_release_recursive>
 8006332:	bf00      	nop
 8006334:	20003c90 	.word	0x20003c90

08006338 <_read_r>:
 8006338:	b538      	push	{r3, r4, r5, lr}
 800633a:	4604      	mov	r4, r0
 800633c:	4608      	mov	r0, r1
 800633e:	4611      	mov	r1, r2
 8006340:	2200      	movs	r2, #0
 8006342:	4d05      	ldr	r5, [pc, #20]	; (8006358 <_read_r+0x20>)
 8006344:	602a      	str	r2, [r5, #0]
 8006346:	461a      	mov	r2, r3
 8006348:	f7fc fb77 	bl	8002a3a <_read>
 800634c:	1c43      	adds	r3, r0, #1
 800634e:	d102      	bne.n	8006356 <_read_r+0x1e>
 8006350:	682b      	ldr	r3, [r5, #0]
 8006352:	b103      	cbz	r3, 8006356 <_read_r+0x1e>
 8006354:	6023      	str	r3, [r4, #0]
 8006356:	bd38      	pop	{r3, r4, r5, pc}
 8006358:	20003c9c 	.word	0x20003c9c

0800635c <_raise_r>:
 800635c:	291f      	cmp	r1, #31
 800635e:	b538      	push	{r3, r4, r5, lr}
 8006360:	4604      	mov	r4, r0
 8006362:	460d      	mov	r5, r1
 8006364:	d904      	bls.n	8006370 <_raise_r+0x14>
 8006366:	2316      	movs	r3, #22
 8006368:	6003      	str	r3, [r0, #0]
 800636a:	f04f 30ff 	mov.w	r0, #4294967295
 800636e:	bd38      	pop	{r3, r4, r5, pc}
 8006370:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006372:	b112      	cbz	r2, 800637a <_raise_r+0x1e>
 8006374:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006378:	b94b      	cbnz	r3, 800638e <_raise_r+0x32>
 800637a:	4620      	mov	r0, r4
 800637c:	f000 f830 	bl	80063e0 <_getpid_r>
 8006380:	462a      	mov	r2, r5
 8006382:	4601      	mov	r1, r0
 8006384:	4620      	mov	r0, r4
 8006386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800638a:	f000 b817 	b.w	80063bc <_kill_r>
 800638e:	2b01      	cmp	r3, #1
 8006390:	d00a      	beq.n	80063a8 <_raise_r+0x4c>
 8006392:	1c59      	adds	r1, r3, #1
 8006394:	d103      	bne.n	800639e <_raise_r+0x42>
 8006396:	2316      	movs	r3, #22
 8006398:	6003      	str	r3, [r0, #0]
 800639a:	2001      	movs	r0, #1
 800639c:	e7e7      	b.n	800636e <_raise_r+0x12>
 800639e:	2400      	movs	r4, #0
 80063a0:	4628      	mov	r0, r5
 80063a2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80063a6:	4798      	blx	r3
 80063a8:	2000      	movs	r0, #0
 80063aa:	e7e0      	b.n	800636e <_raise_r+0x12>

080063ac <raise>:
 80063ac:	4b02      	ldr	r3, [pc, #8]	; (80063b8 <raise+0xc>)
 80063ae:	4601      	mov	r1, r0
 80063b0:	6818      	ldr	r0, [r3, #0]
 80063b2:	f7ff bfd3 	b.w	800635c <_raise_r>
 80063b6:	bf00      	nop
 80063b8:	2000053c 	.word	0x2000053c

080063bc <_kill_r>:
 80063bc:	b538      	push	{r3, r4, r5, lr}
 80063be:	2300      	movs	r3, #0
 80063c0:	4d06      	ldr	r5, [pc, #24]	; (80063dc <_kill_r+0x20>)
 80063c2:	4604      	mov	r4, r0
 80063c4:	4608      	mov	r0, r1
 80063c6:	4611      	mov	r1, r2
 80063c8:	602b      	str	r3, [r5, #0]
 80063ca:	f7fc fb1c 	bl	8002a06 <_kill>
 80063ce:	1c43      	adds	r3, r0, #1
 80063d0:	d102      	bne.n	80063d8 <_kill_r+0x1c>
 80063d2:	682b      	ldr	r3, [r5, #0]
 80063d4:	b103      	cbz	r3, 80063d8 <_kill_r+0x1c>
 80063d6:	6023      	str	r3, [r4, #0]
 80063d8:	bd38      	pop	{r3, r4, r5, pc}
 80063da:	bf00      	nop
 80063dc:	20003c9c 	.word	0x20003c9c

080063e0 <_getpid_r>:
 80063e0:	f7fc bb0a 	b.w	80029f8 <_getpid>

080063e4 <_gettimeofday>:
 80063e4:	2258      	movs	r2, #88	; 0x58
 80063e6:	4b02      	ldr	r3, [pc, #8]	; (80063f0 <_gettimeofday+0xc>)
 80063e8:	f04f 30ff 	mov.w	r0, #4294967295
 80063ec:	601a      	str	r2, [r3, #0]
 80063ee:	4770      	bx	lr
 80063f0:	20003c9c 	.word	0x20003c9c

080063f4 <_init>:
 80063f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063f6:	bf00      	nop
 80063f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063fa:	bc08      	pop	{r3}
 80063fc:	469e      	mov	lr, r3
 80063fe:	4770      	bx	lr

08006400 <_fini>:
 8006400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006402:	bf00      	nop
 8006404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006406:	bc08      	pop	{r3}
 8006408:	469e      	mov	lr, r3
 800640a:	4770      	bx	lr
